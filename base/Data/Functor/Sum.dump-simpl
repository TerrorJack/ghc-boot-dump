
==================== Tidy Core ====================
2018-03-16 16:11:46.667262545 UTC

Result size of Tidy Core
  = {terms: 2,670, types: 7,868, coercions: 1,152, joins: 0/24}

-- RHS size: {terms: 31, types: 65, coercions: 4, joins: 0/0}
Data.Functor.Sum.$fEq1Sum_$cliftEq
  :: forall (f :: * -> *) (g :: * -> *).
     (Eq1 f, Eq1 g) =>
     forall a b. (a -> b -> Bool) -> Sum f g a -> Sum f g b -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,U><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 60 0 90 60] 140 20}]
Data.Functor.Sum.$fEq1Sum_$cliftEq
  = \ (@ (f_afX65 :: * -> *))
      (@ (g_afX66 :: * -> *))
      ($dEq1_afX67 :: Eq1 f_afX65)
      ($dEq2_afX68 :: Eq1 g_afX66)
      (@ a_afX6c)
      (@ b_afX6d)
      (eq_afWKM :: a_afX6c -> b_afX6d -> Bool)
      (ds_dfXaz :: Sum f_afX65 g_afX66 a_afX6c)
      (ds1_dfXaA :: Sum f_afX65 g_afX66 b_afX6d) ->
      case ds_dfXaz of {
        InL x1_afWKN ->
          case ds1_dfXaA of {
            InL x2_afWKO ->
              ($dEq1_afX67
               `cast` (Data.Functor.Classes.N:Eq1[0] <f_afX65>_N
                       :: (Eq1 f_afX65 :: Constraint)
                          ~R# (forall a b.
                               (a -> b -> Bool) -> f_afX65 a -> f_afX65 b -> Bool :: *)))
                @ a_afX6c @ b_afX6d eq_afWKM x1_afWKN x2_afWKO;
            InR ds2_dfXaU -> GHC.Types.False
          };
        InR ds2_dfXaV ->
          case ds1_dfXaA of {
            InL ds3_dfXaW -> GHC.Types.False;
            InR y2_afWKR ->
              ($dEq2_afX68
               `cast` (Data.Functor.Classes.N:Eq1[0] <g_afX66>_N
                       :: (Eq1 g_afX66 :: Constraint)
                          ~R# (forall a b.
                               (a -> b -> Bool) -> g_afX66 a -> g_afX66 b -> Bool :: *)))
                @ a_afX6c @ b_afX6d eq_afWKM ds2_dfXaV y2_afWKR
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 23, joins: 0/0}
Data.Functor.Sum.$fEq1Sum [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Eq1 f, Eq1 g) =>
     Eq1 (Sum f g)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,U><S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= Data.Functor.Sum.$fEq1Sum_$cliftEq
               `cast` (forall (f :: <* -> *>_N) (g :: <* -> *>_N).
                       <Eq1 f>_R
                       ->_R <Eq1 g>_R
                       ->_R Sym (Data.Functor.Classes.N:Eq1[0] <Sum f g>_N)
                       :: (forall (f :: * -> *) (g :: * -> *).
                           (Eq1 f, Eq1 g) =>
                           forall a b.
                           (a -> b -> Bool) -> Sum f g a -> Sum f g b -> Bool :: *)
                          ~R# (forall (f :: * -> *) (g :: * -> *).
                               (Eq1 f, Eq1 g) =>
                               Eq1 (Sum f g) :: *))}]
Data.Functor.Sum.$fEq1Sum
  = Data.Functor.Sum.$fEq1Sum_$cliftEq
    `cast` (forall (f :: <* -> *>_N) (g :: <* -> *>_N).
            <Eq1 f>_R
            ->_R <Eq1 g>_R
            ->_R Sym (Data.Functor.Classes.N:Eq1[0] <Sum f g>_N)
            :: (forall (f :: * -> *) (g :: * -> *).
                (Eq1 f, Eq1 g) =>
                forall a b.
                (a -> b -> Bool) -> Sum f g a -> Sum f g b -> Bool :: *)
               ~R# (forall (f :: * -> *) (g :: * -> *).
                    (Eq1 f, Eq1 g) =>
                    Eq1 (Sum f g) :: *))

-- RHS size: {terms: 33, types: 67, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrd1Sum_$cliftCompare
  :: forall (f :: * -> *) (g :: * -> *).
     (Ord1 f, Ord1 g) =>
     forall a b.
     (a -> b -> Ordering) -> Sum f g a -> Sum f g b -> Ordering
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,U><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 100 60] 160 20}]
Data.Functor.Sum.$fOrd1Sum_$cliftCompare
  = \ (@ (f_afX5G :: * -> *))
      (@ (g_afX5H :: * -> *))
      ($dOrd1_afX5I :: Ord1 f_afX5G)
      ($dOrd2_afX5J :: Ord1 g_afX5H)
      (@ a_afX5R)
      (@ b_afX5S)
      (comp_afWKE :: a_afX5R -> b_afX5S -> Ordering)
      (ds_dfXa9 :: Sum f_afX5G g_afX5H a_afX5R)
      (ds1_dfXaa :: Sum f_afX5G g_afX5H b_afX5S) ->
      case ds_dfXa9 of {
        InL x1_afWKF ->
          case ds1_dfXaa of {
            InL x2_afWKG ->
              liftCompare
                @ f_afX5G
                $dOrd1_afX5I
                @ a_afX5R
                @ b_afX5S
                comp_afWKE
                x1_afWKF
                x2_afWKG;
            InR ds2_dfXaw -> GHC.Types.LT
          };
        InR ds2_dfXax ->
          case ds1_dfXaa of {
            InL ds3_dfXay -> GHC.Types.GT;
            InR y2_afWKJ ->
              liftCompare
                @ g_afX5H
                $dOrd2_afX5J
                @ a_afX5R
                @ b_afX5S
                comp_afWKE
                ds2_dfXax
                y2_afWKJ
          }
      }

-- RHS size: {terms: 33, types: 67, coercions: 4, joins: 0/0}
Data.Functor.Sum.$fOrd1Sum1
  :: forall (f :: * -> *) (g :: * -> *).
     (Ord1 f, Ord1 g) =>
     forall a b. (a -> b -> Bool) -> Sum f g a -> Sum f g b -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C1(U))),A)><L,1*U(1*C1(C1(C1(U))),A)><L,U><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 100 60] 160 20}]
Data.Functor.Sum.$fOrd1Sum1
  = \ (@ (f_afX5G :: * -> *))
      (@ (g_afX5H :: * -> *))
      ($dOrd1_afX5I :: Ord1 f_afX5G)
      ($dOrd2_afX5J :: Ord1 g_afX5H)
      (@ a_adwad)
      (@ b_adwae)
      (eta_B3 :: a_adwad -> b_adwae -> Bool)
      (eta1_B2 :: Sum f_afX5G g_afX5H a_adwad)
      (eta2_B1 :: Sum f_afX5G g_afX5H b_adwae) ->
      case eta1_B2 of {
        InL x1_afWKN ->
          case eta2_B1 of {
            InL x2_afWKO ->
              ((Data.Functor.Classes.$p1Ord1 @ f_afX5G $dOrd1_afX5I)
               `cast` (Data.Functor.Classes.N:Eq1[0] <f_afX5G>_N
                       :: (Eq1 f_afX5G :: Constraint)
                          ~R# (forall a b.
                               (a -> b -> Bool) -> f_afX5G a -> f_afX5G b -> Bool :: *)))
                @ a_adwad @ b_adwae eta_B3 x1_afWKN x2_afWKO;
            InR ds_dfXaU -> GHC.Types.False
          };
        InR ds_dfXaV ->
          case eta2_B1 of {
            InL ds1_dfXaW -> GHC.Types.False;
            InR y2_afWKR ->
              ((Data.Functor.Classes.$p1Ord1 @ g_afX5H $dOrd2_afX5J)
               `cast` (Data.Functor.Classes.N:Eq1[0] <g_afX5H>_N
                       :: (Eq1 g_afX5H :: Constraint)
                          ~R# (forall a b.
                               (a -> b -> Bool) -> g_afX5H a -> g_afX5H b -> Bool :: *)))
                @ a_adwad @ b_adwae eta_B3 ds_dfXaV y2_afWKR
          }
      }

-- RHS size: {terms: 11, types: 21, coercions: 7, joins: 0/0}
Data.Functor.Sum.$fOrd1Sum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Ord1 f, Ord1 g) =>
     Ord1 (Sum f g)
[GblId[DFunId],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C1(U))),C(C1(C1(U))))><L,U(C(C1(C1(U))),C(C1(C1(U))))>m,
 Unf=DFun: \ (@ (f_afWKC :: * -> *))
             (@ (g_afWKD :: * -> *))
             (v_B1 :: Ord1 f_afWKC)
             (v1_B2 :: Ord1 g_afWKD) ->
       Data.Functor.Classes.C:Ord1 TYPE: Sum f_afWKC g_afWKD
                                   (Data.Functor.Sum.$fOrd1Sum1 @ f_afWKC @ g_afWKD v_B1 v1_B2)
                                   `cast` (Sym (Data.Functor.Classes.N:Eq1[0]
                                                    <Sum f_afWKC g_afWKD>_N)
                                           :: (forall a b.
                                               (a -> b -> Bool)
                                               -> Sum f_afWKC g_afWKD a
                                               -> Sum f_afWKC g_afWKD b
                                               -> Bool :: *)
                                              ~R# (Eq1 (Sum f_afWKC g_afWKD) :: Constraint))
                                   Data.Functor.Sum.$fOrd1Sum_$cliftCompare
                                     @ f_afWKC @ g_afWKD v_B1 v1_B2]
Data.Functor.Sum.$fOrd1Sum
  = \ (@ (f_XfX7u :: * -> *))
      (@ (g_XfX7w :: * -> *))
      ($dOrd1_XfX7y :: Ord1 f_XfX7u)
      ($dOrd2_XfX7A :: Ord1 g_XfX7w) ->
      Data.Functor.Classes.C:Ord1
        @ (Sum f_XfX7u g_XfX7w)
        ((Data.Functor.Sum.$fOrd1Sum1
            @ f_XfX7u @ g_XfX7w $dOrd1_XfX7y $dOrd2_XfX7A)
         `cast` (Sym (Data.Functor.Classes.N:Eq1[0] <Sum f_XfX7u g_XfX7w>_N)
                 :: (forall a b.
                     (a -> b -> Bool)
                     -> Sum f_XfX7u g_XfX7w a -> Sum f_XfX7u g_XfX7w b -> Bool :: *)
                    ~R# (Eq1 (Sum f_XfX7u g_XfX7w) :: Constraint)))
        (Data.Functor.Sum.$fOrd1Sum_$cliftCompare
           @ f_XfX7u @ g_XfX7w $dOrd1_XfX7y $dOrd2_XfX7A)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum8 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$fRead1Sum8 = "InL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$fRead1Sum7
  = GHC.CString.unpackCString# Data.Functor.Sum.$fRead1Sum8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$fRead1Sum4 = "InR"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$fRead1Sum3
  = GHC.CString.unpackCString# Data.Functor.Sum.$fRead1Sum4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum2 :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$fRead1Sum2
  = Text.Read.Lex.Ident Data.Functor.Sum.$fRead1Sum3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum5 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$fRead1Sum5 = GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum6 :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$fRead1Sum6
  = Text.Read.Lex.Ident Data.Functor.Sum.$fRead1Sum7

-- RHS size: {terms: 72, types: 139, coercions: 31, joins: 0/4}
Data.Functor.Sum.$fRead1Sum1
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Sum f g a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 0] 571 60}]
Data.Functor.Sum.$fRead1Sum1
  = \ (@ (f_afX4G :: * -> *))
      (@ (g_afX4H :: * -> *))
      ($dRead1_afX4I :: Read1 f_afX4G)
      ($dRead2_afX4J :: Read1 g_afX4H)
      (@ a_afX54)
      (rp_afWKA :: Text.ParserCombinators.ReadPrec.ReadPrec a_afX54)
      (rl_afWKB :: Text.ParserCombinators.ReadPrec.ReadPrec [a_afX54]) ->
      let {
        ds_sfXgH [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.ReadPrec (f_afX4G a_afX54)
        [LclId]
        ds_sfXgH
          = liftReadPrec
              @ f_afX4G $dRead1_afX4I @ a_afX54 rp_afWKA rl_afWKB } in
      let {
        ds1_sfXgF [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.ReadPrec (g_afX4H a_afX54)
        [LclId]
        ds1_sfXgF
          = liftReadPrec
              @ g_afX4H $dRead2_afX4J @ a_afX54 rp_afWKA rl_afWKB } in
      let {
        $wlvl_sfXzh [InlPrag=NOUSERINLINE[0], Dmd=<L,C(C1(U))>]
          :: GHC.Prim.Int#
             -> forall b.
                (Sum f_afX4G g_afX4H a_afX54 -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []]
        $wlvl_sfXzh
          = \ (ww_sfXzf :: GHC.Prim.Int#)
              (@ b_sfXzb)
              (w_sfXzc
                 :: Sum f_afX4G g_afX4H a_afX54
                    -> Text.ParserCombinators.ReadP.P b_sfXzb) ->
              case GHC.Prim.<=# ww_sfXzf 10# of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_sfXzb;
                1# ->
                  case Text.Read.Lex.$wexpect
                         Data.Functor.Sum.$fRead1Sum6
                         @ b_sfXzb
                         (\ _ [Occ=Dead, OS=OneShot] ->
                            (((ds_sfXgH
                               `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                           <f_afX4G a_afX54>_R
                                       :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                             (f_afX4G a_afX54) :: *)
                                          ~R# (Text.ParserCombinators.ReadPrec.Prec
                                               -> Text.ParserCombinators.ReadP.ReadP
                                                    (f_afX4G a_afX54) :: *)))
                                Data.Functor.Sum.$fRead1Sum5)
                             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <f_afX4G a_afX54>_R
                                     :: (Text.ParserCombinators.ReadP.ReadP (f_afX4G a_afX54) :: *)
                                        ~R# (forall b.
                                             (f_afX4G a_afX54 -> Text.ParserCombinators.ReadP.P b)
                                             -> Text.ParserCombinators.ReadP.P b :: *)))
                              @ b_sfXzb
                              (\ (a2_i88WJ :: f_afX4G a_afX54) ->
                                 w_sfXzc
                                   (Data.Functor.Sum.InL
                                      @ * @ f_afX4G @ g_afX4H @ a_afX54 a2_i88WJ)))
                  of
                  { (# ww2_sdy4c #) ->
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b_sfXzb
                    (Text.ParserCombinators.ReadP.Look @ b_sfXzb ww2_sdy4c)
                    (case Text.Read.Lex.$wexpect
                            Data.Functor.Sum.$fRead1Sum2
                            @ b_sfXzb
                            (\ _ [Occ=Dead, OS=OneShot] ->
                               (((ds1_sfXgF
                                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                              <g_afX4H a_afX54>_R
                                          :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                                (g_afX4H a_afX54) :: *)
                                             ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                  -> Text.ParserCombinators.ReadP.ReadP
                                                       (g_afX4H a_afX54) :: *)))
                                   Data.Functor.Sum.$fRead1Sum5)
                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <g_afX4H a_afX54>_R
                                        :: (Text.ParserCombinators.ReadP.ReadP
                                              (g_afX4H a_afX54) :: *)
                                           ~R# (forall b.
                                                (g_afX4H a_afX54
                                                 -> Text.ParserCombinators.ReadP.P b)
                                                -> Text.ParserCombinators.ReadP.P b :: *)))
                                 @ b_sfXzb
                                 (\ (a2_i88WJ :: g_afX4H a_afX54) ->
                                    w_sfXzc
                                      (Data.Functor.Sum.InR
                                         @ * @ f_afX4G @ g_afX4H @ a_afX54 a2_i88WJ)))
                     of
                     { (# ww4_Xdy7f #) ->
                     Text.ParserCombinators.ReadP.Look @ b_sfXzb ww4_Xdy7f
                     })
                  }
              } } in
      let {
        lvl8_sfXgR [InlPrag=NOUSERINLINE[0], Dmd=<L,C(C(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Sum f_afX4G g_afX4H a_afX54 -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId,
         Arity=2,
         Str=<S(S),1*U(U)><L,C(U)>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (w_sfXza [Occ=Once!]
                            :: Text.ParserCombinators.ReadPrec.Prec)
                         (@ b_sfXzb)
                         (w1_sfXzc [Occ=Once]
                            :: Sum f_afX4G g_afX4H a_afX54
                               -> Text.ParserCombinators.ReadP.P b_sfXzb) ->
                         case w_sfXza of { GHC.Types.I# ww1_sfXzf [Occ=Once] ->
                         $wlvl_sfXzh ww1_sfXzf @ b_sfXzb w1_sfXzc
                         }}]
        lvl8_sfXgR
          = \ (w_sfXza :: Text.ParserCombinators.ReadPrec.Prec)
              (@ b_sfXzb)
              (w1_sfXzc
                 :: Sum f_afX4G g_afX4H a_afX54
                    -> Text.ParserCombinators.ReadP.P b_sfXzb) ->
              case w_sfXza of { GHC.Types.I# ww1_sfXzf ->
              $wlvl_sfXzh ww1_sfXzf @ b_sfXzb w1_sfXzc
              } } in
      \ (eta_B2 :: Text.ParserCombinators.ReadPrec.Prec)
        (@ b_i815e)
        (eta1_B1
           :: Sum f_afX4G g_afX4H a_afX54
              -> Text.ParserCombinators.ReadP.P b_i815e) ->
        GHC.Read.list3
          @ (Sum f_afX4G g_afX4H a_afX54)
          (lvl8_sfXgR
           `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Sum
                                     f_afX4G
                                     g_afX4H
                                     a_afX54>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <Sum f_afX4G g_afX4H a_afX54>_R)
                   :: (Text.ParserCombinators.ReadPrec.Prec
                       -> forall b.
                          (Sum f_afX4G g_afX4H a_afX54 -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                             (Sum f_afX4G g_afX4H a_afX54) :: *)))
          eta_B2
          @ b_i815e
          eta1_B1

-- RHS size: {terms: 28, types: 75, coercions: 20, joins: 0/1}
Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a. (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (Sum f g a)
[GblId,
 Arity=4,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,C(C(U))><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 210 60}]
Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec
  = \ (@ (f_XfX6H :: * -> *))
      (@ (g_XfX6J :: * -> *))
      ($dRead1_XfX6L :: Read1 f_XfX6H)
      ($dRead2_XfX6N :: Read1 g_XfX6J)
      (@ a_afX4N)
      (rp_adwa1 :: Int -> ReadS a_afX4N)
      (rl_adwa2 :: ReadS [a_afX4N]) ->
      let {
        ds_sfXgz [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Sum f_XfX6H g_XfX6J a_afX4N -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId]
        ds_sfXgz
          = Data.Functor.Sum.$fRead1Sum1
              @ f_XfX6H
              @ g_XfX6J
              $dRead1_XfX6L
              $dRead2_XfX6N
              @ a_afX4N
              ((Text.ParserCombinators.ReadPrec.readS_to_Prec1
                  @ a_afX4N rp_adwa1)
               `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <a_afX4N>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                               <a_afX4N>_R)
                       :: (Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (a_afX4N -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (Text.ParserCombinators.ReadPrec.ReadPrec a_afX4N :: *)))
              ((\ _ [Occ=Dead]
                  (@ b_idxi2)
                  (w1_idxi3
                     :: [a_afX4N] -> Text.ParserCombinators.ReadP.P b_idxi2) ->
                  case Text.ParserCombinators.ReadP.$wreadS_to_P
                         @ [a_afX4N] rl_adwa2 @ b_idxi2 w1_idxi3
                  of
                  { (# ww1_idxi6 #) ->
                  Text.ParserCombinators.ReadP.Look @ b_idxi2 ww1_idxi6
                  })
               `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <[a_afX4N]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <[a_afX4N]>_R)
                       :: (Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              ([a_afX4N] -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                 [a_afX4N] :: *))) } in
      \ (n_idx7Z :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Sum f_XfX6H g_XfX6J a_afX4N)
          (ds_sfXgz
             n_idx7Z
             @ (Sum f_XfX6H g_XfX6J a_afX4N)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Sum f_XfX6H g_XfX6J a_afX4N)))

-- RHS size: {terms: 13, types: 28, coercions: 19, joins: 0/0}
Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> Text.ParserCombinators.ReadPrec.ReadPrec [Sum f g a]
[GblId,
 Arity=4,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XfX6F :: * -> *))
                 (@ (g_XfX6H :: * -> *))
                 ($dRead1_XfX6J [Occ=Once] :: Read1 f_XfX6F)
                 ($dRead2_XfX6L [Occ=Once] :: Read1 g_XfX6H)
                 (@ a_afX5y)
                 (rp_adwdf [Occ=Once]
                    :: Text.ParserCombinators.ReadPrec.ReadPrec a_afX5y)
                 (rl_adwdg [Occ=Once]
                    :: Text.ParserCombinators.ReadPrec.ReadPrec [a_afX5y]) ->
                 GHC.Read.list
                   @ (Sum f_XfX6F g_XfX6H a_afX5y)
                   ((Data.Functor.Sum.$fRead1Sum1
                       @ f_XfX6F
                       @ g_XfX6H
                       $dRead1_XfX6J
                       $dRead2_XfX6L
                       @ a_afX5y
                       rp_adwdf
                       rl_adwdg)
                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Sum
                                              f_XfX6F
                                              g_XfX6H
                                              a_afX5y>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Sum
                                                                         f_XfX6F g_XfX6H a_afX5y>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> forall b.
                                   (Sum f_XfX6F g_XfX6H a_afX5y -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                      (Sum f_XfX6F g_XfX6H a_afX5y) :: *)))}]
Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec
  = \ (@ (f_XfX6F :: * -> *))
      (@ (g_XfX6H :: * -> *))
      ($dRead1_XfX6J :: Read1 f_XfX6F)
      ($dRead2_XfX6L :: Read1 g_XfX6H)
      (@ a_afX5y)
      (rp_adwdf :: Text.ParserCombinators.ReadPrec.ReadPrec a_afX5y)
      (rl_adwdg :: Text.ParserCombinators.ReadPrec.ReadPrec [a_afX5y]) ->
      GHC.Read.list
        @ (Sum f_XfX6F g_XfX6H a_afX5y)
        ((Data.Functor.Sum.$fRead1Sum1
            @ f_XfX6F
            @ g_XfX6H
            $dRead1_XfX6J
            $dRead2_XfX6L
            @ a_afX5y
            rp_adwdf
            rl_adwdg)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Sum
                                   f_XfX6F
                                   g_XfX6H
                                   a_afX5y>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Sum f_XfX6F g_XfX6H a_afX5y>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Sum f_XfX6F g_XfX6H a_afX5y -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Sum f_XfX6F g_XfX6H a_afX5y) :: *)))

Rec {
-- RHS size: {terms: 17, types: 25, coercions: 29, joins: 0/0}
Data.Functor.Sum.$fRead1Sum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     Read1 (Sum f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,A,C(C1(C(C1(U)))),A)><L,U(A,A,C(C1(C(C1(U)))),A)>m,
 Unf=DFun: \ (@ (f_afWKy :: * -> *))
             (@ (g_afWKz :: * -> *))
             (v_B1 :: Read1 f_afWKy)
             (v1_B2 :: Read1 g_afWKz) ->
       Data.Functor.Classes.C:Read1 TYPE: Sum f_afWKy g_afWKz
                                    Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec
                                      @ f_afWKy @ g_afWKz v_B1 v1_B2
                                    Data.Functor.Sum.$fRead1Sum_$cliftReadList
                                      @ f_afWKy @ g_afWKz v_B1 v1_B2
                                    (Data.Functor.Sum.$fRead1Sum1 @ f_afWKy @ g_afWKz v_B1 v1_B2)
                                    `cast` (forall (a :: <*>_N).
                                            <Text.ParserCombinators.ReadPrec.ReadPrec a>_R
                                            ->_R <Text.ParserCombinators.ReadPrec.ReadPrec [a]>_R
                                            ->_R (<Text.ParserCombinators.ReadPrec.Prec>_R
                                                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                <Sum
                                                                   f_afWKy
                                                                   g_afWKz
                                                                   a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                     <Sum
                                                                                        f_afWKy
                                                                                        g_afWKz
                                                                                        a>_R)
                                            :: (forall a.
                                                Text.ParserCombinators.ReadPrec.ReadPrec a
                                                -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
                                                -> Text.ParserCombinators.ReadPrec.Prec
                                                -> forall b.
                                                   (Sum f_afWKy g_afWKz a
                                                    -> Text.ParserCombinators.ReadP.P b)
                                                   -> Text.ParserCombinators.ReadP.P b :: *)
                                               ~R# (forall a.
                                                    Text.ParserCombinators.ReadPrec.ReadPrec a
                                                    -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
                                                    -> Text.ParserCombinators.ReadPrec.ReadPrec
                                                         (Sum f_afWKy g_afWKz a) :: *))
                                    Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec
                                      @ f_afWKy @ g_afWKz v_B1 v1_B2]
Data.Functor.Sum.$fRead1Sum
  = \ (@ (f_XfX6E :: * -> *))
      (@ (g_XfX6G :: * -> *))
      ($dRead1_XfX6I :: Read1 f_XfX6E)
      ($dRead2_XfX6K :: Read1 g_XfX6G) ->
      Data.Functor.Classes.C:Read1
        @ (Sum f_XfX6E g_XfX6G)
        (Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec
           @ f_XfX6E @ g_XfX6G $dRead1_XfX6I $dRead2_XfX6K)
        (Data.Functor.Sum.$fRead1Sum_$cliftReadList
           @ f_XfX6E @ g_XfX6G $dRead1_XfX6I $dRead2_XfX6K)
        ((Data.Functor.Sum.$fRead1Sum1
            @ f_XfX6E @ g_XfX6G $dRead1_XfX6I $dRead2_XfX6K)
         `cast` (forall (a :: <*>_N).
                 <Text.ParserCombinators.ReadPrec.ReadPrec a>_R
                 ->_R <Text.ParserCombinators.ReadPrec.ReadPrec [a]>_R
                 ->_R (<Text.ParserCombinators.ReadPrec.Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Sum
                                        f_XfX6E
                                        g_XfX6G
                                        a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <Sum f_XfX6E g_XfX6G a>_R)
                 :: (forall a.
                     Text.ParserCombinators.ReadPrec.ReadPrec a
                     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
                     -> Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Sum f_XfX6E g_XfX6G a -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (forall a.
                         Text.ParserCombinators.ReadPrec.ReadPrec a
                         -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
                         -> Text.ParserCombinators.ReadPrec.ReadPrec
                              (Sum f_XfX6E g_XfX6G a) :: *)))
        (Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec
           @ f_XfX6E @ g_XfX6G $dRead1_XfX6I $dRead2_XfX6K)

-- RHS size: {terms: 9, types: 22, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fRead1Sum_$cliftReadList [Occ=LoopBreaker]
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a. (Int -> ReadS a) -> ReadS [a] -> ReadS [Sum f g a]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C1(C(C1(U)))),A)><L,U(A,A,C(C1(C(C1(U)))),A)>,
 Unf=OtherCon []]
Data.Functor.Sum.$fRead1Sum_$cliftReadList
  = \ (@ (f_XfX6G :: * -> *))
      (@ (g_XfX6I :: * -> *))
      ($dRead1_XfX6K :: Read1 f_XfX6G)
      ($dRead2_XfX6M :: Read1 g_XfX6I)
      (@ a_afX4V) ->
      liftReadListDefault
        @ (Sum f_XfX6G g_XfX6I)
        @ a_afX4V
        (Data.Functor.Sum.$fRead1Sum
           @ f_XfX6G @ g_XfX6I $dRead1_XfX6K $dRead2_XfX6M)
end Rec }

-- RHS size: {terms: 29, types: 45, coercions: 0, joins: 0/0}
Data.Functor.Sum.$w$cliftShowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     forall a.
     (Int -> a -> ShowS)
     -> ([a] -> ShowS) -> GHC.Prim.Int# -> Sum f g a -> ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,U><L,U><S,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 0 0 120] 200 0}]
Data.Functor.Sum.$w$cliftShowsPrec
  = \ (@ (f_sfXzA :: * -> *))
      (@ (g_sfXzB :: * -> *))
      (w_sfXzC :: Show1 f_sfXzA)
      (w1_sfXzD :: Show1 g_sfXzB)
      (@ a_sfXzE)
      (w2_sfXzF :: Int -> a_sfXzE -> ShowS)
      (w3_sfXzG :: [a_sfXzE] -> ShowS)
      (ww_sfXzL :: GHC.Prim.Int#)
      (w4_sfXzI :: Sum f_sfXzA g_sfXzB a_sfXzE) ->
      case w4_sfXzI of {
        InL x_afWKt ->
          Data.Functor.Classes.$wshowsUnaryWith
            @ (f_sfXzA a_sfXzE)
            (liftShowsPrec @ f_sfXzA w_sfXzC @ a_sfXzE w2_sfXzF w3_sfXzG)
            Data.Functor.Sum.$fRead1Sum7
            ww_sfXzL
            x_afWKt;
        InR y_afWKx ->
          Data.Functor.Classes.$wshowsUnaryWith
            @ (g_sfXzB a_sfXzE)
            (liftShowsPrec @ g_sfXzB w1_sfXzD @ a_sfXzE w2_sfXzF w3_sfXzG)
            Data.Functor.Sum.$fRead1Sum3
            ww_sfXzL
            y_afWKx
      }

-- RHS size: {terms: 19, types: 32, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     forall a.
     (Int -> a -> ShowS) -> ([a] -> ShowS) -> Int -> Sum f g a -> ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,U><L,U><S(S),1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_sfXzA :: * -> *))
                 (@ (g_sfXzB :: * -> *))
                 (w_sfXzC [Occ=Once] :: Show1 f_sfXzA)
                 (w1_sfXzD [Occ=Once] :: Show1 g_sfXzB)
                 (@ a_sfXzE)
                 (w2_sfXzF [Occ=Once] :: Int -> a_sfXzE -> ShowS)
                 (w3_sfXzG [Occ=Once] :: [a_sfXzE] -> ShowS)
                 (w4_sfXzH [Occ=Once!] :: Int)
                 (w5_sfXzI [Occ=Once] :: Sum f_sfXzA g_sfXzB a_sfXzE) ->
                 case w4_sfXzH of { GHC.Types.I# ww1_sfXzL [Occ=Once] ->
                 Data.Functor.Sum.$w$cliftShowsPrec
                   @ f_sfXzA
                   @ g_sfXzB
                   w_sfXzC
                   w1_sfXzD
                   @ a_sfXzE
                   w2_sfXzF
                   w3_sfXzG
                   ww1_sfXzL
                   w5_sfXzI
                 }}]
Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec
  = \ (@ (f_sfXzA :: * -> *))
      (@ (g_sfXzB :: * -> *))
      (w_sfXzC :: Show1 f_sfXzA)
      (w1_sfXzD :: Show1 g_sfXzB)
      (@ a_sfXzE)
      (w2_sfXzF :: Int -> a_sfXzE -> ShowS)
      (w3_sfXzG :: [a_sfXzE] -> ShowS)
      (w4_sfXzH :: Int)
      (w5_sfXzI :: Sum f_sfXzA g_sfXzB a_sfXzE) ->
      case w4_sfXzH of { GHC.Types.I# ww1_sfXzL ->
      Data.Functor.Sum.$w$cliftShowsPrec
        @ f_sfXzA
        @ g_sfXzB
        w_sfXzC
        w1_sfXzD
        @ a_sfXzE
        w2_sfXzF
        w3_sfXzG
        ww1_sfXzL
        w5_sfXzI
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum6 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$fFoldableSum6 = GHC.Types.I# 0#

-- RHS size: {terms: 20, types: 43, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fShow1Sum_$cliftShowList
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     forall a.
     (Int -> a -> ShowS) -> ([a] -> ShowS) -> [Sum f g a] -> ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(C1(C1(C(U))))),A)><L,U><L,U><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX4e :: * -> *))
                 (@ (g_afX4f :: * -> *))
                 ($dShow1_afX4g [Occ=Once] :: Show1 f_afX4e)
                 ($dShow2_afX4h [Occ=Once] :: Show1 g_afX4f)
                 (@ a_afX4z)
                 (sp_adw9U [Occ=Once] :: Int -> a_afX4z -> ShowS)
                 (sl_adw9V [Occ=Once] :: [a_afX4z] -> ShowS)
                 (eta_B2 [Occ=Once] :: [Sum f_afX4e g_afX4f a_afX4z])
                 (eta1_B1 [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ (Sum f_afX4e g_afX4f a_afX4z)
                   (Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec
                      @ f_afX4e
                      @ g_afX4f
                      $dShow1_afX4g
                      $dShow2_afX4h
                      @ a_afX4z
                      sp_adw9U
                      sl_adw9V
                      Data.Functor.Sum.$fFoldableSum6)
                   eta_B2
                   eta1_B1}]
Data.Functor.Sum.$fShow1Sum_$cliftShowList
  = \ (@ (f_afX4e :: * -> *))
      (@ (g_afX4f :: * -> *))
      ($dShow1_afX4g :: Show1 f_afX4e)
      ($dShow2_afX4h :: Show1 g_afX4f)
      (@ a_afX4z)
      (sp_adw9U :: Int -> a_afX4z -> ShowS)
      (sl_adw9V :: [a_afX4z] -> ShowS)
      (eta_B2 :: [Sum f_afX4e g_afX4f a_afX4z])
      (eta1_B1 :: String) ->
      GHC.Show.showList__
        @ (Sum f_afX4e g_afX4f a_afX4z)
        (\ (w_sfXzI :: Sum f_afX4e g_afX4f a_afX4z) ->
           Data.Functor.Sum.$w$cliftShowsPrec
             @ f_afX4e
             @ g_afX4f
             $dShow1_afX4g
             $dShow2_afX4h
             @ a_afX4z
             sp_adw9U
             sl_adw9V
             0#
             w_sfXzI)
        eta_B2
        eta1_B1

-- RHS size: {terms: 11, types: 21, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fShow1Sum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     Show1 (Sum f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(C1(C1(C(U))))),A)>m,
 Unf=DFun: \ (@ (f_afWKo :: * -> *))
             (@ (g_afWKp :: * -> *))
             (v_B1 :: Show1 f_afWKo)
             (v1_B2 :: Show1 g_afWKp) ->
       Data.Functor.Classes.C:Show1 TYPE: Sum f_afWKo g_afWKp
                                    Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec
                                      @ f_afWKo @ g_afWKp v_B1 v1_B2
                                    Data.Functor.Sum.$fShow1Sum_$cliftShowList
                                      @ f_afWKo @ g_afWKp v_B1 v1_B2]
Data.Functor.Sum.$fShow1Sum
  = \ (@ (f_afX4e :: * -> *))
      (@ (g_afX4f :: * -> *))
      ($dShow1_afX4g :: Show1 f_afX4e)
      ($dShow2_afX4h :: Show1 g_afX4f) ->
      Data.Functor.Classes.C:Show1
        @ (Sum f_afX4e g_afX4f)
        (Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec
           @ f_afX4e @ g_afX4f $dShow1_afX4g $dShow2_afX4h)
        (Data.Functor.Sum.$fShow1Sum_$cliftShowList
           @ f_afX4e @ g_afX4f $dShow1_afX4g $dShow2_afX4h)

-- RHS size: {terms: 15, types: 33, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fEqSum_$c==
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Eq1 f, Eq1 g, Eq a) =>
     Sum f g a -> Sum f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,1*U(1*U,A)><S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX3T :: * -> *))
                 (@ (g_afX3U :: * -> *))
                 (@ a_afX3V)
                 ($dEq1_afX3W [Occ=Once] :: Eq1 f_afX3T)
                 ($dEq2_afX3X [Occ=Once] :: Eq1 g_afX3U)
                 ($dEq_afX3Y [Occ=Once] :: Eq a_afX3V)
                 (eta_B2 [Occ=Once] :: Sum f_afX3T g_afX3U a_afX3V)
                 (eta1_B1 [Occ=Once] :: Sum f_afX3T g_afX3U a_afX3V) ->
                 Data.Functor.Sum.$fEq1Sum_$cliftEq
                   @ f_afX3T
                   @ g_afX3U
                   $dEq1_afX3W
                   $dEq2_afX3X
                   @ a_afX3V
                   @ a_afX3V
                   (== @ a_afX3V $dEq_afX3Y)
                   eta_B2
                   eta1_B1}]
Data.Functor.Sum.$fEqSum_$c==
  = \ (@ (f_afX3T :: * -> *))
      (@ (g_afX3U :: * -> *))
      (@ a_afX3V)
      ($dEq1_afX3W :: Eq1 f_afX3T)
      ($dEq2_afX3X :: Eq1 g_afX3U)
      ($dEq_afX3Y :: Eq a_afX3V)
      (eta_B2 :: Sum f_afX3T g_afX3U a_afX3V)
      (eta1_B1 :: Sum f_afX3T g_afX3U a_afX3V) ->
      Data.Functor.Sum.$fEq1Sum_$cliftEq
        @ f_afX3T
        @ g_afX3U
        $dEq1_afX3W
        $dEq2_afX3X
        @ a_afX3V
        @ a_afX3V
        (== @ a_afX3V $dEq_afX3Y)
        eta_B2
        eta1_B1

-- RHS size: {terms: 42, types: 66, coercions: 4, joins: 0/0}
Data.Functor.Sum.$fEqSum_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Eq1 f, Eq1 g, Eq a) =>
     Sum f g a -> Sum f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,1*U(1*U,A)><S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_afX3T :: * -> *))
                 (@ (g_afX3U :: * -> *))
                 (@ a_afX3V)
                 ($dEq1_afX3W [Occ=Once] :: Eq1 f_afX3T)
                 ($dEq2_afX3X [Occ=Once] :: Eq1 g_afX3U)
                 ($dEq_afX3Y [Occ=Once*] :: Eq a_afX3V)
                 (x_a22b [Occ=Once!] :: Sum f_afX3T g_afX3U a_afX3V)
                 (y_a22c [Occ=Once*!] :: Sum f_afX3T g_afX3U a_afX3V) ->
                 case x_a22b of {
                   InL x1_afWKN [Occ=Once] ->
                     case y_a22c of {
                       InL x2_afWKO [Occ=Once] ->
                         case ($dEq1_afX3W
                               `cast` (Data.Functor.Classes.N:Eq1[0] <f_afX3T>_N
                                       :: (Eq1 f_afX3T :: Constraint)
                                          ~R# (forall a b.
                                               (a -> b -> Bool)
                                               -> f_afX3T a -> f_afX3T b -> Bool :: *)))
                                @ a_afX3V @ a_afX3V (== @ a_afX3V $dEq_afX3Y) x1_afWKN x2_afWKO
                         of {
                           False -> GHC.Types.True;
                           True -> GHC.Types.False
                         };
                       InR _ [Occ=Dead] -> GHC.Types.True
                     };
                   InR ds_dfXaV [Occ=Once] ->
                     case y_a22c of {
                       InL _ [Occ=Dead] -> GHC.Types.True;
                       InR y2_afWKR [Occ=Once] ->
                         case ($dEq2_afX3X
                               `cast` (Data.Functor.Classes.N:Eq1[0] <g_afX3U>_N
                                       :: (Eq1 g_afX3U :: Constraint)
                                          ~R# (forall a b.
                                               (a -> b -> Bool)
                                               -> g_afX3U a -> g_afX3U b -> Bool :: *)))
                                @ a_afX3V @ a_afX3V (== @ a_afX3V $dEq_afX3Y) ds_dfXaV y2_afWKR
                         of {
                           False -> GHC.Types.True;
                           True -> GHC.Types.False
                         }
                     }
                 }}]
Data.Functor.Sum.$fEqSum_$c/=
  = \ (@ (f_afX3T :: * -> *))
      (@ (g_afX3U :: * -> *))
      (@ a_afX3V)
      ($dEq1_afX3W :: Eq1 f_afX3T)
      ($dEq2_afX3X :: Eq1 g_afX3U)
      ($dEq_afX3Y :: Eq a_afX3V)
      (eta_B2 :: Sum f_afX3T g_afX3U a_afX3V)
      (eta1_B1 :: Sum f_afX3T g_afX3U a_afX3V) ->
      case eta_B2 of {
        InL x1_afWKN ->
          case eta1_B1 of {
            InL x2_afWKO ->
              case ($dEq1_afX3W
                    `cast` (Data.Functor.Classes.N:Eq1[0] <f_afX3T>_N
                            :: (Eq1 f_afX3T :: Constraint)
                               ~R# (forall a b.
                                    (a -> b -> Bool) -> f_afX3T a -> f_afX3T b -> Bool :: *)))
                     @ a_afX3V @ a_afX3V (== @ a_afX3V $dEq_afX3Y) x1_afWKN x2_afWKO
              of {
                False -> GHC.Types.True;
                True -> GHC.Types.False
              };
            InR ds_dfXaU -> GHC.Types.True
          };
        InR ds_dfXaV ->
          case eta1_B1 of {
            InL ds1_dfXaW -> GHC.Types.True;
            InR y2_afWKR ->
              case ($dEq2_afX3X
                    `cast` (Data.Functor.Classes.N:Eq1[0] <g_afX3U>_N
                            :: (Eq1 g_afX3U :: Constraint)
                               ~R# (forall a b.
                                    (a -> b -> Bool) -> g_afX3U a -> g_afX3U b -> Bool :: *)))
                     @ a_afX3V @ a_afX3V (== @ a_afX3V $dEq_afX3Y) ds_dfXaV y2_afWKR
              of {
                False -> GHC.Types.True;
                True -> GHC.Types.False
              }
          }
      }

-- RHS size: {terms: 15, types: 28, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fEqSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Eq1 f, Eq1 g, Eq a) =>
     Eq (Sum f g a)
[GblId[DFunId],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(U)))><L,C(C1(C1(U)))><L,U(U,A)>m,
 Unf=DFun: \ (@ (f_afWKl :: * -> *))
             (@ (g_afWKm :: * -> *))
             (@ a_afWKn)
             (v_B1 :: Eq1 f_afWKl)
             (v1_B2 :: Eq1 g_afWKm)
             (v2_B3 :: Eq a_afWKn) ->
       GHC.Classes.C:Eq TYPE: Sum f_afWKl g_afWKm a_afWKn
                        Data.Functor.Sum.$fEqSum_$c==
                          @ f_afWKl @ g_afWKm @ a_afWKn v_B1 v1_B2 v2_B3
                        Data.Functor.Sum.$fEqSum_$c/=
                          @ f_afWKl @ g_afWKm @ a_afWKn v_B1 v1_B2 v2_B3]
Data.Functor.Sum.$fEqSum
  = \ (@ (f_afX3T :: * -> *))
      (@ (g_afX3U :: * -> *))
      (@ a_afX3V)
      ($dEq1_afX3W :: Eq1 f_afX3T)
      ($dEq2_afX3X :: Eq1 g_afX3U)
      ($dEq_afX3Y :: Eq a_afX3V) ->
      GHC.Classes.C:Eq
        @ (Sum f_afX3T g_afX3U a_afX3V)
        (Data.Functor.Sum.$fEqSum_$c==
           @ f_afX3T @ g_afX3U @ a_afX3V $dEq1_afX3W $dEq2_afX3X $dEq_afX3Y)
        (Data.Functor.Sum.$fEqSum_$c/=
           @ f_afX3T @ g_afX3U @ a_afX3V $dEq1_afX3W $dEq2_afX3X $dEq_afX3Y)

-- RHS size: {terms: 15, types: 33, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$ccompare
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Sum f g a -> Sum f g a -> Ordering
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*U,A,A,A,A,A,A)><S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX35 :: * -> *))
                 (@ (g_afX36 :: * -> *))
                 (@ a_afX37)
                 ($dOrd1_afX38 [Occ=Once] :: Ord1 f_afX35)
                 ($dOrd2_afX39 [Occ=Once] :: Ord1 g_afX36)
                 ($dOrd_afX3a [Occ=Once] :: Ord a_afX37)
                 (eta_B2 [Occ=Once] :: Sum f_afX35 g_afX36 a_afX37)
                 (eta1_B1 [Occ=Once] :: Sum f_afX35 g_afX36 a_afX37) ->
                 Data.Functor.Sum.$fOrd1Sum_$cliftCompare
                   @ f_afX35
                   @ g_afX36
                   $dOrd1_afX38
                   $dOrd2_afX39
                   @ a_afX37
                   @ a_afX37
                   (compare @ a_afX37 $dOrd_afX3a)
                   eta_B2
                   eta1_B1}]
Data.Functor.Sum.$fOrdSum_$ccompare
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37)
      (eta_B2 :: Sum f_afX35 g_afX36 a_afX37)
      (eta1_B1 :: Sum f_afX35 g_afX36 a_afX37) ->
      Data.Functor.Sum.$fOrd1Sum_$cliftCompare
        @ f_afX35
        @ g_afX36
        $dOrd1_afX38
        $dOrd2_afX39
        @ a_afX37
        @ a_afX37
        (compare @ a_afX37 $dOrd_afX3a)
        eta_B2
        eta1_B1

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$cp1Ord
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Eq (Sum f g a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(C1(U))),A)><L,1*U(1*C(C1(C1(U))),A)><L,1*U(1*U(U,A),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX35 :: * -> *))
                 (@ (g_afX36 :: * -> *))
                 (@ a_afX37)
                 ($dOrd1_afX38 [Occ=Once] :: Ord1 f_afX35)
                 ($dOrd2_afX39 [Occ=Once] :: Ord1 g_afX36)
                 ($dOrd_afX3a [Occ=Once] :: Ord a_afX37) ->
                 Data.Functor.Sum.$fEqSum
                   @ f_afX35
                   @ g_afX36
                   @ a_afX37
                   (Data.Functor.Classes.$p1Ord1 @ f_afX35 $dOrd1_afX38)
                   (Data.Functor.Classes.$p1Ord1 @ g_afX36 $dOrd2_afX39)
                   (GHC.Classes.$p1Ord @ a_afX37 $dOrd_afX3a)}]
Data.Functor.Sum.$fOrdSum_$cp1Ord
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37) ->
      Data.Functor.Sum.$fEqSum
        @ f_afX35
        @ g_afX36
        @ a_afX37
        (Data.Functor.Classes.$p1Ord1 @ f_afX35 $dOrd1_afX38)
        (Data.Functor.Classes.$p1Ord1 @ g_afX36 $dOrd2_afX39)
        (GHC.Classes.$p1Ord @ a_afX37 $dOrd_afX3a)

-- RHS size: {terms: 44, types: 68, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$c<
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Sum f g a -> Sum f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*U,A,A,A,A,A,A)><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 140 60] 240 60}]
Data.Functor.Sum.$fOrdSum_$c<
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37)
      (x_a1MiF :: Sum f_afX35 g_afX36 a_afX37)
      (y_a1MiG :: Sum f_afX35 g_afX36 a_afX37) ->
      case x_a1MiF of {
        InL x1_afWKF ->
          case y_a1MiG of {
            InL x2_afWKG ->
              case liftCompare
                     @ f_afX35
                     $dOrd1_afX38
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     x1_afWKF
                     x2_afWKG
              of {
                __DEFAULT -> GHC.Types.False;
                LT -> GHC.Types.True
              };
            InR ds_dfXaw -> GHC.Types.True
          };
        InR ds_dfXax ->
          case y_a1MiG of {
            InL ds1_dfXay -> GHC.Types.False;
            InR y2_afWKJ ->
              case liftCompare
                     @ g_afX36
                     $dOrd2_afX39
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     ds_dfXax
                     y2_afWKJ
              of {
                __DEFAULT -> GHC.Types.False;
                LT -> GHC.Types.True
              }
          }
      }

-- RHS size: {terms: 44, types: 68, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$c>=
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Sum f g a -> Sum f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*U,A,A,A,A,A,A)><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 140 60] 240 60}]
Data.Functor.Sum.$fOrdSum_$c>=
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37)
      (x_a1fiT :: Sum f_afX35 g_afX36 a_afX37)
      (y_a1fiU :: Sum f_afX35 g_afX36 a_afX37) ->
      case x_a1fiT of {
        InL x1_afWKF ->
          case y_a1fiU of {
            InL x2_afWKG ->
              case liftCompare
                     @ f_afX35
                     $dOrd1_afX38
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     x1_afWKF
                     x2_afWKG
              of {
                __DEFAULT -> GHC.Types.True;
                LT -> GHC.Types.False
              };
            InR ds_dfXaw -> GHC.Types.False
          };
        InR ds_dfXax ->
          case y_a1fiU of {
            InL ds1_dfXay -> GHC.Types.True;
            InR y2_afWKJ ->
              case liftCompare
                     @ g_afX36
                     $dOrd2_afX39
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     ds_dfXax
                     y2_afWKJ
              of {
                __DEFAULT -> GHC.Types.True;
                LT -> GHC.Types.False
              }
          }
      }

-- RHS size: {terms: 44, types: 68, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$c>
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Sum f g a -> Sum f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*U,A,A,A,A,A,A)><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 140 60] 240 60}]
Data.Functor.Sum.$fOrdSum_$c>
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37)
      (x_a1fiM :: Sum f_afX35 g_afX36 a_afX37)
      (y_a1fiN :: Sum f_afX35 g_afX36 a_afX37) ->
      case x_a1fiM of {
        InL x1_afWKF ->
          case y_a1fiN of {
            InL x2_afWKG ->
              case liftCompare
                     @ f_afX35
                     $dOrd1_afX38
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     x1_afWKF
                     x2_afWKG
              of {
                __DEFAULT -> GHC.Types.False;
                GT -> GHC.Types.True
              };
            InR ds_dfXaw -> GHC.Types.False
          };
        InR ds_dfXax ->
          case y_a1fiN of {
            InL ds1_dfXay -> GHC.Types.True;
            InR y2_afWKJ ->
              case liftCompare
                     @ g_afX36
                     $dOrd2_afX39
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     ds_dfXax
                     y2_afWKJ
              of {
                __DEFAULT -> GHC.Types.False;
                GT -> GHC.Types.True
              }
          }
      }

-- RHS size: {terms: 44, types: 68, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$c<=
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Sum f g a -> Sum f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*U,A,A,A,A,A,A)><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 140 60] 240 60}]
Data.Functor.Sum.$fOrdSum_$c<=
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37)
      (x_a1MiL :: Sum f_afX35 g_afX36 a_afX37)
      (y_a1MiM :: Sum f_afX35 g_afX36 a_afX37) ->
      case x_a1MiL of {
        InL x1_afWKF ->
          case y_a1MiM of {
            InL x2_afWKG ->
              case liftCompare
                     @ f_afX35
                     $dOrd1_afX38
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     x1_afWKF
                     x2_afWKG
              of {
                __DEFAULT -> GHC.Types.True;
                GT -> GHC.Types.False
              };
            InR ds_dfXaw -> GHC.Types.True
          };
        InR ds_dfXax ->
          case y_a1MiM of {
            InL ds1_dfXay -> GHC.Types.False;
            InR y2_afWKJ ->
              case liftCompare
                     @ g_afX36
                     $dOrd2_afX39
                     @ a_afX37
                     @ a_afX37
                     (compare @ a_afX37 $dOrd_afX3a)
                     ds_dfXax
                     y2_afWKJ
              of {
                __DEFAULT -> GHC.Types.True;
                GT -> GHC.Types.False
              }
          }
      }

-- RHS size: {terms: 19, types: 32, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$cmax
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Sum f g a -> Sum f g a -> Sum f g a
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*U,A,A,A,A,A,A)><S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX35 :: * -> *))
                 (@ (g_afX36 :: * -> *))
                 (@ a_afX37)
                 ($dOrd1_afX38 [Occ=Once] :: Ord1 f_afX35)
                 ($dOrd2_afX39 [Occ=Once] :: Ord1 g_afX36)
                 ($dOrd_afX3a [Occ=Once] :: Ord a_afX37)
                 (x_a55d :: Sum f_afX35 g_afX36 a_afX37)
                 (y_a55e :: Sum f_afX35 g_afX36 a_afX37) ->
                 case Data.Functor.Sum.$fOrdSum_$c<=
                        @ f_afX35
                        @ g_afX36
                        @ a_afX37
                        $dOrd1_afX38
                        $dOrd2_afX39
                        $dOrd_afX3a
                        x_a55d
                        y_a55e
                 of {
                   False -> x_a55d;
                   True -> y_a55e
                 }}]
Data.Functor.Sum.$fOrdSum_$cmax
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37)
      (x_a55d :: Sum f_afX35 g_afX36 a_afX37)
      (y_a55e :: Sum f_afX35 g_afX36 a_afX37) ->
      case Data.Functor.Sum.$fOrdSum_$c<=
             @ f_afX35
             @ g_afX36
             @ a_afX37
             $dOrd1_afX38
             $dOrd2_afX39
             $dOrd_afX3a
             x_a55d
             y_a55e
      of {
        False -> x_a55d;
        True -> y_a55e
      }

-- RHS size: {terms: 19, types: 32, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum_$cmin
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Sum f g a -> Sum f g a -> Sum f g a
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*U,A,A,A,A,A,A)><S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX35 :: * -> *))
                 (@ (g_afX36 :: * -> *))
                 (@ a_afX37)
                 ($dOrd1_afX38 [Occ=Once] :: Ord1 f_afX35)
                 ($dOrd2_afX39 [Occ=Once] :: Ord1 g_afX36)
                 ($dOrd_afX3a [Occ=Once] :: Ord a_afX37)
                 (x_a55m :: Sum f_afX35 g_afX36 a_afX37)
                 (y_a55n :: Sum f_afX35 g_afX36 a_afX37) ->
                 case Data.Functor.Sum.$fOrdSum_$c<=
                        @ f_afX35
                        @ g_afX36
                        @ a_afX37
                        $dOrd1_afX38
                        $dOrd2_afX39
                        $dOrd_afX3a
                        x_a55m
                        y_a55n
                 of {
                   False -> y_a55n;
                   True -> x_a55m
                 }}]
Data.Functor.Sum.$fOrdSum_$cmin
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37)
      (x_a55m :: Sum f_afX35 g_afX36 a_afX37)
      (y_a55n :: Sum f_afX35 g_afX36 a_afX37) ->
      case Data.Functor.Sum.$fOrdSum_$c<=
             @ f_afX35
             @ g_afX36
             @ a_afX37
             $dOrd1_afX38
             $dOrd2_afX39
             $dOrd_afX3a
             x_a55m
             y_a55n
      of {
        False -> y_a55n;
        True -> x_a55m
      }

-- RHS size: {terms: 39, types: 46, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fOrdSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Ord (Sum f g a)
[GblId[DFunId],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(1*C(C1(C1(U))),C(C1(C1(U))))><L,U(1*C(C1(C1(U))),C(C1(C1(U))))><L,U(1*U(U,A),U,A,A,A,A,A,A)>m,
 Unf=DFun: \ (@ (f_afWKi :: * -> *))
             (@ (g_afWKj :: * -> *))
             (@ a_afWKk)
             (v_B1 :: Ord1 f_afWKi)
             (v1_B2 :: Ord1 g_afWKj)
             (v2_B3 :: Ord a_afWKk) ->
       GHC.Classes.C:Ord TYPE: Sum f_afWKi g_afWKj a_afWKk
                         Data.Functor.Sum.$fOrdSum_$cp1Ord
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3
                         Data.Functor.Sum.$fOrdSum_$ccompare
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3
                         Data.Functor.Sum.$fOrdSum_$c<
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3
                         Data.Functor.Sum.$fOrdSum_$c<=
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3
                         Data.Functor.Sum.$fOrdSum_$c>
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3
                         Data.Functor.Sum.$fOrdSum_$c>=
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3
                         Data.Functor.Sum.$fOrdSum_$cmax
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3
                         Data.Functor.Sum.$fOrdSum_$cmin
                           @ f_afWKi @ g_afWKj @ a_afWKk v_B1 v1_B2 v2_B3]
Data.Functor.Sum.$fOrdSum
  = \ (@ (f_afX35 :: * -> *))
      (@ (g_afX36 :: * -> *))
      (@ a_afX37)
      ($dOrd1_afX38 :: Ord1 f_afX35)
      ($dOrd2_afX39 :: Ord1 g_afX36)
      ($dOrd_afX3a :: Ord a_afX37) ->
      GHC.Classes.C:Ord
        @ (Sum f_afX35 g_afX36 a_afX37)
        (Data.Functor.Sum.$fOrdSum_$cp1Ord
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)
        (Data.Functor.Sum.$fOrdSum_$ccompare
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)
        (Data.Functor.Sum.$fOrdSum_$c<
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)
        (Data.Functor.Sum.$fOrdSum_$c<=
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)
        (Data.Functor.Sum.$fOrdSum_$c>
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)
        (Data.Functor.Sum.$fOrdSum_$c>=
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)
        (Data.Functor.Sum.$fOrdSum_$cmax
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)
        (Data.Functor.Sum.$fOrdSum_$cmin
           @ f_afX35
           @ g_afX36
           @ a_afX37
           $dOrd1_afX38
           $dOrd2_afX39
           $dOrd_afX3a)

-- RHS size: {terms: 13, types: 21, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fReadSum1
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Sum f g a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX2y :: * -> *))
                 (@ (g_afX2z :: * -> *))
                 (@ a_afX2A)
                 ($dRead1_afX2B [Occ=Once] :: Read1 f_afX2y)
                 ($dRead2_afX2C [Occ=Once] :: Read1 g_afX2z)
                 ($dRead_afX2D :: Read a_afX2A) ->
                 Data.Functor.Sum.$fRead1Sum1
                   @ f_afX2y
                   @ g_afX2z
                   $dRead1_afX2B
                   $dRead2_afX2C
                   @ a_afX2A
                   (readPrec @ a_afX2A $dRead_afX2D)
                   (readListPrec @ a_afX2A $dRead_afX2D)}]
Data.Functor.Sum.$fReadSum1
  = \ (@ (f_afX2y :: * -> *))
      (@ (g_afX2z :: * -> *))
      (@ a_afX2A)
      ($dRead1_afX2B :: Read1 f_afX2y)
      ($dRead2_afX2C :: Read1 g_afX2z)
      ($dRead_afX2D :: Read a_afX2A) ->
      Data.Functor.Sum.$fRead1Sum1
        @ f_afX2y
        @ g_afX2z
        $dRead1_afX2B
        $dRead2_afX2C
        @ a_afX2A
        (readPrec @ a_afX2A $dRead_afX2D)
        (readListPrec @ a_afX2A $dRead_afX2D)

-- RHS size: {terms: 19, types: 53, coercions: 0, joins: 0/1}
Data.Functor.Sum.$fReadSum_$creadsPrec
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Int -> ReadS (Sum f g a)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,1*U,1*U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 60] 160 60}]
Data.Functor.Sum.$fReadSum_$creadsPrec
  = \ (@ (f_XfX50 :: * -> *))
      (@ (g_XfX52 :: * -> *))
      (@ a_XfX54)
      ($dRead1_XfX56 :: Read1 f_XfX50)
      ($dRead2_XfX58 :: Read1 g_XfX52)
      ($dRead_XfX5a :: Read a_XfX54) ->
      let {
        ds_sfXgx [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Sum f_XfX50 g_XfX52 a_XfX54 -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId]
        ds_sfXgx
          = Data.Functor.Sum.$fRead1Sum1
              @ f_XfX50
              @ g_XfX52
              $dRead1_XfX56
              $dRead2_XfX58
              @ a_XfX54
              (readPrec @ a_XfX54 $dRead_XfX5a)
              (readListPrec @ a_XfX54 $dRead_XfX5a) } in
      \ (n_i8156 :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Sum f_XfX50 g_XfX52 a_XfX54)
          (ds_sfXgx
             n_i8156
             @ (Sum f_XfX50 g_XfX52 a_XfX54)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Sum f_XfX50 g_XfX52 a_XfX54)))

-- RHS size: {terms: 14, types: 27, coercions: 19, joins: 0/0}
Data.Functor.Sum.$fReadSum_$creadListPrec
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Sum f g a]
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,1*U,1*U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 60] 110 0}]
Data.Functor.Sum.$fReadSum_$creadListPrec
  = \ (@ (f_XfX4Y :: * -> *))
      (@ (g_XfX50 :: * -> *))
      (@ a_XfX52)
      ($dRead1_XfX54 :: Read1 f_XfX4Y)
      ($dRead2_XfX56 :: Read1 g_XfX50)
      ($dRead_XfX58 :: Read a_XfX52) ->
      GHC.Read.list
        @ (Sum f_XfX4Y g_XfX50 a_XfX52)
        ((Data.Functor.Sum.$fRead1Sum1
            @ f_XfX4Y
            @ g_XfX50
            $dRead1_XfX54
            $dRead2_XfX56
            @ a_XfX52
            (readPrec @ a_XfX52 $dRead_XfX58)
            (readListPrec @ a_XfX52 $dRead_XfX58))
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Sum
                                   f_XfX4Y
                                   g_XfX50
                                   a_XfX52>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Sum f_XfX4Y g_XfX50 a_XfX52>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Sum f_XfX4Y g_XfX50 a_XfX52 -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Sum f_XfX4Y g_XfX50 a_XfX52) :: *)))

-- RHS size: {terms: 13, types: 40, coercions: 16, joins: 0/0}
Data.Functor.Sum.$fReadSum_$creadList
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     ReadS [Sum f g a]
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XfX4Z :: * -> *))
                 (@ (g_XfX51 :: * -> *))
                 (@ a_XfX53)
                 ($dRead1_XfX55 [Occ=Once] :: Read1 f_XfX4Z)
                 ($dRead2_XfX57 [Occ=Once] :: Read1 g_XfX51)
                 ($dRead_XfX59 [Occ=Once] :: Read a_XfX53) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Sum f_XfX4Z g_XfX51 a_XfX53]
                   (((((Data.Functor.Sum.$fReadSum_$creadListPrec
                          @ f_XfX4Z
                          @ g_XfX51
                          @ a_XfX53
                          $dRead1_XfX55
                          $dRead2_XfX57
                          $dRead_XfX59)
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Sum f_XfX4Z g_XfX51 a_XfX53]>_R
                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                     [Sum f_XfX4Z g_XfX51 a_XfX53] :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                       -> Text.ParserCombinators.ReadP.ReadP
                                            [Sum f_XfX4Z g_XfX51 a_XfX53] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[Sum f_XfX4Z g_XfX51 a_XfX53]>_R
                             :: (Text.ParserCombinators.ReadP.ReadP
                                   [Sum f_XfX4Z g_XfX51 a_XfX53] :: *)
                                ~R# (forall b.
                                     ([Sum f_XfX4Z g_XfX51 a_XfX53]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Sum f_XfX4Z g_XfX51 a_XfX53]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Sum f_XfX4Z g_XfX51 a_XfX53]))}]
Data.Functor.Sum.$fReadSum_$creadList
  = \ (@ (f_XfX4Z :: * -> *))
      (@ (g_XfX51 :: * -> *))
      (@ a_XfX53)
      ($dRead1_XfX55 :: Read1 f_XfX4Z)
      ($dRead2_XfX57 :: Read1 g_XfX51)
      ($dRead_XfX59 :: Read a_XfX53) ->
      Text.ParserCombinators.ReadP.run
        @ [Sum f_XfX4Z g_XfX51 a_XfX53]
        (((((Data.Functor.Sum.$fReadSum_$creadListPrec
               @ f_XfX4Z
               @ g_XfX51
               @ a_XfX53
               $dRead1_XfX55
               $dRead2_XfX57
               $dRead_XfX59)
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Sum f_XfX4Z g_XfX51 a_XfX53]>_R
                    :: (Text.ParserCombinators.ReadPrec.ReadPrec
                          [Sum f_XfX4Z g_XfX51 a_XfX53] :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.Prec
                            -> Text.ParserCombinators.ReadP.ReadP
                                 [Sum f_XfX4Z g_XfX51 a_XfX53] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[Sum f_XfX4Z g_XfX51 a_XfX53]>_R
                  :: (Text.ParserCombinators.ReadP.ReadP
                        [Sum f_XfX4Z g_XfX51 a_XfX53] :: *)
                     ~R# (forall b.
                          ([Sum f_XfX4Z g_XfX51 a_XfX53] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Sum f_XfX4Z g_XfX51 a_XfX53]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Sum f_XfX4Z g_XfX51 a_XfX53]))

-- RHS size: {terms: 23, types: 34, coercions: 19, joins: 0/0}
Data.Functor.Sum.$fReadSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Read (Sum f g a)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C1(C(C1(U)))),A)><L,U(A,A,C(C1(C(C1(U)))),A)><L,U(A,A,U,U)>m,
 Unf=DFun: \ (@ (f_afWKf :: * -> *))
             (@ (g_afWKg :: * -> *))
             (@ a_afWKh)
             (v_B1 :: Read1 f_afWKf)
             (v1_B2 :: Read1 g_afWKg)
             (v2_B3 :: Read a_afWKh) ->
       GHC.Read.C:Read TYPE: Sum f_afWKf g_afWKg a_afWKh
                       Data.Functor.Sum.$fReadSum_$creadsPrec
                         @ f_afWKf @ g_afWKg @ a_afWKh v_B1 v1_B2 v2_B3
                       Data.Functor.Sum.$fReadSum_$creadList
                         @ f_afWKf @ g_afWKg @ a_afWKh v_B1 v1_B2 v2_B3
                       (Data.Functor.Sum.$fReadSum1
                          @ f_afWKf @ g_afWKg @ a_afWKh v_B1 v1_B2 v2_B3)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Sum
                                                 f_afWKf
                                                 g_afWKg
                                                 a_afWKh>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Sum
                                                                            f_afWKf
                                                                            g_afWKg
                                                                            a_afWKh>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Sum f_afWKf g_afWKg a_afWKh
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                         (Sum f_afWKf g_afWKg a_afWKh) :: *))
                       Data.Functor.Sum.$fReadSum_$creadListPrec
                         @ f_afWKf @ g_afWKg @ a_afWKh v_B1 v1_B2 v2_B3]
Data.Functor.Sum.$fReadSum
  = \ (@ (f_XfX4X :: * -> *))
      (@ (g_XfX4Z :: * -> *))
      (@ a_XfX51)
      ($dRead1_XfX53 :: Read1 f_XfX4X)
      ($dRead2_XfX55 :: Read1 g_XfX4Z)
      ($dRead_XfX57 :: Read a_XfX51) ->
      GHC.Read.C:Read
        @ (Sum f_XfX4X g_XfX4Z a_XfX51)
        (Data.Functor.Sum.$fReadSum_$creadsPrec
           @ f_XfX4X
           @ g_XfX4Z
           @ a_XfX51
           $dRead1_XfX53
           $dRead2_XfX55
           $dRead_XfX57)
        (Data.Functor.Sum.$fReadSum_$creadList
           @ f_XfX4X
           @ g_XfX4Z
           @ a_XfX51
           $dRead1_XfX53
           $dRead2_XfX55
           $dRead_XfX57)
        ((Data.Functor.Sum.$fReadSum1
            @ f_XfX4X
            @ g_XfX4Z
            @ a_XfX51
            $dRead1_XfX53
            $dRead2_XfX55
            $dRead_XfX57)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Sum
                                   f_XfX4X
                                   g_XfX4Z
                                   a_XfX51>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Sum f_XfX4X g_XfX4Z a_XfX51>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Sum f_XfX4X g_XfX4Z a_XfX51 -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Sum f_XfX4X g_XfX4Z a_XfX51) :: *)))
        (Data.Functor.Sum.$fReadSum_$creadListPrec
           @ f_XfX4X
           @ g_XfX4Z
           @ a_XfX51
           $dRead1_XfX53
           $dRead2_XfX55
           $dRead_XfX57)

-- RHS size: {terms: 20, types: 30, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fShowSum_$cshowsPrec
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     Int -> Sum f g a -> ShowS
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,U(1*U,A,1*U)><S(S),1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX28 :: * -> *))
                 (@ (g_afX29 :: * -> *))
                 (@ a_afX2a)
                 ($dShow1_afX2b [Occ=Once] :: Show1 f_afX28)
                 ($dShow2_afX2c [Occ=Once] :: Show1 g_afX29)
                 ($dShow_afX2d :: Show a_afX2a)
                 (eta_B2 [Occ=Once] :: Int)
                 (eta1_B1 [Occ=Once] :: Sum f_afX28 g_afX29 a_afX2a) ->
                 Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec
                   @ f_afX28
                   @ g_afX29
                   $dShow1_afX2b
                   $dShow2_afX2c
                   @ a_afX2a
                   (showsPrec @ a_afX2a $dShow_afX2d)
                   (showList @ a_afX2a $dShow_afX2d)
                   eta_B2
                   eta1_B1}]
Data.Functor.Sum.$fShowSum_$cshowsPrec
  = \ (@ (f_afX28 :: * -> *))
      (@ (g_afX29 :: * -> *))
      (@ a_afX2a)
      ($dShow1_afX2b :: Show1 f_afX28)
      ($dShow2_afX2c :: Show1 g_afX29)
      ($dShow_afX2d :: Show a_afX2a)
      (eta_B2 :: Int)
      (eta1_B1 :: Sum f_afX28 g_afX29 a_afX2a) ->
      case eta_B2 of { GHC.Types.I# ww1_sfXzL ->
      Data.Functor.Sum.$w$cliftShowsPrec
        @ f_afX28
        @ g_afX29
        $dShow1_afX2b
        $dShow2_afX2c
        @ a_afX2a
        (showsPrec @ a_afX2a $dShow_afX2d)
        (showList @ a_afX2a $dShow_afX2d)
        ww1_sfXzL
        eta1_B1
      }

-- RHS size: {terms: 37, types: 46, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fShowSum_$cshow
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     Sum f g a -> String
[GblId,
 Arity=4,
 Str=<L,1*U(1*C1(C1(C1(C1(C1(U))))),A)><L,1*U(1*C1(C1(C1(C1(C1(U))))),A)><L,U(1*U,A,1*U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 120 180] 320 0}]
Data.Functor.Sum.$fShowSum_$cshow
  = \ (@ (f_afX28 :: * -> *))
      (@ (g_afX29 :: * -> *))
      (@ a_afX2a)
      ($dShow1_afX2b :: Show1 f_afX28)
      ($dShow2_afX2c :: Show1 g_afX29)
      ($dShow_afX2d :: Show a_afX2a)
      (x_i7Jay :: Sum f_afX28 g_afX29 a_afX2a) ->
      case x_i7Jay of {
        InL x1_afWKt ->
          ++
            @ Char
            Data.Functor.Sum.$fRead1Sum7
            (GHC.Types.:
               @ Char
               Data.Functor.Classes.showsUnaryWith1
               (liftShowsPrec
                  @ f_afX28
                  $dShow1_afX2b
                  @ a_afX2a
                  (showsPrec @ a_afX2a $dShow_afX2d)
                  (showList @ a_afX2a $dShow_afX2d)
                  Data.Functor.Classes.$fRead1Const1
                  x1_afWKt
                  (GHC.Types.[] @ Char)));
        InR y_afWKx ->
          ++
            @ Char
            Data.Functor.Sum.$fRead1Sum3
            (GHC.Types.:
               @ Char
               Data.Functor.Classes.showsUnaryWith1
               (liftShowsPrec
                  @ g_afX29
                  $dShow2_afX2c
                  @ a_afX2a
                  (showsPrec @ a_afX2a $dShow_afX2d)
                  (showList @ a_afX2a $dShow_afX2d)
                  Data.Functor.Classes.$fRead1Const1
                  y_afWKx
                  (GHC.Types.[] @ Char)))
      }

-- RHS size: {terms: 25, types: 47, coercions: 0, joins: 0/2}
Data.Functor.Sum.$fShowSum_$cshowList
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     [Sum f g a] -> ShowS
[GblId,
 Arity=5,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(C1(C1(C(U))))),A)><L,U(1*U,A,1*U)><S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 60 0 0] 180 0}]
Data.Functor.Sum.$fShowSum_$cshowList
  = \ (@ (f_afX28 :: * -> *))
      (@ (g_afX29 :: * -> *))
      (@ a_afX2a)
      ($dShow1_afX2b :: Show1 f_afX28)
      ($dShow2_afX2c :: Show1 g_afX29)
      ($dShow_afX2d :: Show a_afX2a)
      (ls_i7JaB :: [Sum f_afX28 g_afX29 a_afX2a])
      (s_i7JaC :: String) ->
      let {
        lvl8_sfXh2 :: Int -> a_afX2a -> ShowS
        [LclId]
        lvl8_sfXh2 = showsPrec @ a_afX2a $dShow_afX2d } in
      let {
        lvl9_sfXh3 :: [a_afX2a] -> ShowS
        [LclId]
        lvl9_sfXh3 = showList @ a_afX2a $dShow_afX2d } in
      GHC.Show.showList__
        @ (Sum f_afX28 g_afX29 a_afX2a)
        (\ (eta_B1 :: Sum f_afX28 g_afX29 a_afX2a) ->
           Data.Functor.Sum.$w$cliftShowsPrec
             @ f_afX28
             @ g_afX29
             $dShow1_afX2b
             $dShow2_afX2c
             @ a_afX2a
             lvl8_sfXh2
             lvl9_sfXh3
             0#
             eta_B1)
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 19, types: 31, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fShowSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     Show (Sum f g a)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(C1(C1(C(U))))),A)><L,U(U,A,U)>m,
 Unf=DFun: \ (@ (f_afWKc :: * -> *))
             (@ (g_afWKd :: * -> *))
             (@ a_afWKe)
             (v_B1 :: Show1 f_afWKc)
             (v1_B2 :: Show1 g_afWKd)
             (v2_B3 :: Show a_afWKe) ->
       GHC.Show.C:Show TYPE: Sum f_afWKc g_afWKd a_afWKe
                       Data.Functor.Sum.$fShowSum_$cshowsPrec
                         @ f_afWKc @ g_afWKd @ a_afWKe v_B1 v1_B2 v2_B3
                       Data.Functor.Sum.$fShowSum_$cshow
                         @ f_afWKc @ g_afWKd @ a_afWKe v_B1 v1_B2 v2_B3
                       Data.Functor.Sum.$fShowSum_$cshowList
                         @ f_afWKc @ g_afWKd @ a_afWKe v_B1 v1_B2 v2_B3]
Data.Functor.Sum.$fShowSum
  = \ (@ (f_afX28 :: * -> *))
      (@ (g_afX29 :: * -> *))
      (@ a_afX2a)
      ($dShow1_afX2b :: Show1 f_afX28)
      ($dShow2_afX2c :: Show1 g_afX29)
      ($dShow_afX2d :: Show a_afX2a) ->
      GHC.Show.C:Show
        @ (Sum f_afX28 g_afX29 a_afX2a)
        (Data.Functor.Sum.$fShowSum_$cshowsPrec
           @ f_afX28
           @ g_afX29
           @ a_afX2a
           $dShow1_afX2b
           $dShow2_afX2c
           $dShow_afX2d)
        (Data.Functor.Sum.$fShowSum_$cshow
           @ f_afX28
           @ g_afX29
           @ a_afX2a
           $dShow1_afX2b
           $dShow2_afX2c
           $dShow_afX2d)
        (Data.Functor.Sum.$fShowSum_$cshowList
           @ f_afX28
           @ g_afX29
           @ a_afX2a
           $dShow1_afX2b
           $dShow2_afX2c
           $dShow_afX2d)

-- RHS size: {terms: 22, types: 50, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFunctorSum_$cfmap
  :: forall (f :: * -> *) (g :: * -> *).
     (Functor f, Functor g) =>
     forall a b. (a -> b) -> Sum f g a -> Sum f g b
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 80] 120 40}]
Data.Functor.Sum.$fFunctorSum_$cfmap
  = \ (@ (f_afX1v :: * -> *))
      (@ (g_afX1w :: * -> *))
      ($dFunctor_afX1x :: Functor f_afX1v)
      ($dFunctor1_afX1y :: Functor g_afX1w)
      (@ a_afX1C)
      (@ b_afX1D)
      (f1_afWK8 :: a_afX1C -> b_afX1D)
      (ds_dfX9L :: Sum f_afX1v g_afX1w a_afX1C) ->
      case ds_dfX9L of {
        InL x_afWK9 ->
          Data.Functor.Sum.InL
            @ *
            @ f_afX1v
            @ g_afX1w
            @ b_afX1D
            (fmap
               @ f_afX1v $dFunctor_afX1x @ a_afX1C @ b_afX1D f1_afWK8 x_afWK9);
        InR y_afWKb ->
          Data.Functor.Sum.InR
            @ *
            @ f_afX1v
            @ g_afX1w
            @ b_afX1D
            (fmap
               @ g_afX1w $dFunctor1_afX1y @ a_afX1C @ b_afX1D f1_afWK8 y_afWKb)
      }

-- RHS size: {terms: 14, types: 28, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFunctorSum_$c<$
  :: forall (f :: * -> *) (g :: * -> *).
     (Functor f, Functor g) =>
     forall a b. a -> Sum f g b -> Sum f g a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afX1v :: * -> *))
                 (@ (g_afX1w :: * -> *))
                 ($dFunctor_afX1x [Occ=Once] :: Functor f_afX1v)
                 ($dFunctor1_afX1y [Occ=Once] :: Functor g_afX1w)
                 (@ a_afX1Z)
                 (@ b_afX20)
                 (x_i9DkS [Occ=OnceL] :: a_afX1Z)
                 (eta_B1 [Occ=Once] :: Sum f_afX1v g_afX1w b_afX20) ->
                 Data.Functor.Sum.$fFunctorSum_$cfmap
                   @ f_afX1v
                   @ g_afX1w
                   $dFunctor_afX1x
                   $dFunctor1_afX1y
                   @ b_afX20
                   @ a_afX1Z
                   (\ _ [Occ=Dead] -> x_i9DkS)
                   eta_B1}]
Data.Functor.Sum.$fFunctorSum_$c<$
  = \ (@ (f_afX1v :: * -> *))
      (@ (g_afX1w :: * -> *))
      ($dFunctor_afX1x :: Functor f_afX1v)
      ($dFunctor1_afX1y :: Functor g_afX1w)
      (@ a_afX1Z)
      (@ b_afX20)
      (x_i9DkS :: a_afX1Z)
      (eta_B1 :: Sum f_afX1v g_afX1w b_afX20) ->
      Data.Functor.Sum.$fFunctorSum_$cfmap
        @ f_afX1v
        @ g_afX1w
        $dFunctor_afX1x
        $dFunctor1_afX1y
        @ b_afX20
        @ a_afX1Z
        (\ _ [Occ=Dead] -> x_i9DkS)
        eta_B1

-- RHS size: {terms: 11, types: 21, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFunctorSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Functor f, Functor g) =>
     Functor (Sum f g)
[GblId[DFunId],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
 Unf=DFun: \ (@ (f_afWK6 :: * -> *))
             (@ (g_afWK7 :: * -> *))
             (v_B1 :: Functor f_afWK6)
             (v1_B2 :: Functor g_afWK7) ->
       GHC.Base.C:Functor TYPE: Sum f_afWK6 g_afWK7
                          Data.Functor.Sum.$fFunctorSum_$cfmap @ f_afWK6 @ g_afWK7 v_B1 v1_B2
                          Data.Functor.Sum.$fFunctorSum_$c<$ @ f_afWK6 @ g_afWK7 v_B1 v1_B2]
Data.Functor.Sum.$fFunctorSum
  = \ (@ (f_afX1v :: * -> *))
      (@ (g_afX1w :: * -> *))
      ($dFunctor_afX1x :: Functor f_afX1v)
      ($dFunctor1_afX1y :: Functor g_afX1w) ->
      GHC.Base.C:Functor
        @ (Sum f_afX1v g_afX1w)
        (Data.Functor.Sum.$fFunctorSum_$cfmap
           @ f_afX1v @ g_afX1w $dFunctor_afX1x $dFunctor1_afX1y)
        (Data.Functor.Sum.$fFunctorSum_$c<$
           @ f_afX1v @ g_afX1w $dFunctor_afX1x $dFunctor1_afX1y)

-- RHS size: {terms: 23, types: 42, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cfoldMap
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall m a. Monoid m => (a -> m) -> Sum f g a -> m
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afWYR :: * -> *))
                 (@ (g_afWYS :: * -> *))
                 ($dFoldable_afWYT [Occ=Once] :: Foldable f_afWYR)
                 ($dFoldable1_afWYU [Occ=Once] :: Foldable g_afWYS)
                 (@ m_afWZ8)
                 (@ a_afWZ9)
                 ($dMonoid_afWZb [Occ=Once*] :: Monoid m_afWZ8)
                 (f1_afWK2 [Occ=Once*] :: a_afWZ9 -> m_afWZ8)
                 (ds_dfX9E [Occ=Once!] :: Sum f_afWYR g_afWYS a_afWZ9) ->
                 case ds_dfX9E of {
                   InL x_afWK3 [Occ=Once] ->
                     foldMap
                       @ f_afWYR
                       $dFoldable_afWYT
                       @ m_afWZ8
                       @ a_afWZ9
                       $dMonoid_afWZb
                       f1_afWK2
                       x_afWK3;
                   InR y_afWK5 [Occ=Once] ->
                     foldMap
                       @ g_afWYS
                       $dFoldable1_afWYU
                       @ m_afWZ8
                       @ a_afWZ9
                       $dMonoid_afWZb
                       f1_afWK2
                       y_afWK5
                 }}]
Data.Functor.Sum.$fFoldableSum_$cfoldMap
  = \ (@ (f_afWYR :: * -> *))
      (@ (g_afWYS :: * -> *))
      ($dFoldable_afWYT :: Foldable f_afWYR)
      ($dFoldable1_afWYU :: Foldable g_afWYS)
      (@ m_afWZ8)
      (@ a_afWZ9)
      ($dMonoid_afWZb :: Monoid m_afWZ8)
      (f1_afWK2 :: a_afWZ9 -> m_afWZ8)
      (ds_dfX9E :: Sum f_afWYR g_afWYS a_afWZ9) ->
      case ds_dfX9E of {
        InL x_afWK3 ->
          foldMap
            @ f_afWYR
            $dFoldable_afWYT
            @ m_afWZ8
            @ a_afWZ9
            $dMonoid_afWZb
            f1_afWK2
            x_afWK3;
        InR y_afWK5 ->
          foldMap
            @ g_afWYS
            $dFoldable1_afWYU
            @ m_afWZ8
            @ a_afWZ9
            $dMonoid_afWZb
            f1_afWK2
            y_afWK5
      }

-- RHS size: {terms: 21, types: 40, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cfold
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall m. Monoid m => Sum f g m -> m
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XfX1V :: * -> *))
                 (@ (g_XfX1X :: * -> *))
                 ($dFoldable_XfX1Z [Occ=Once] :: Foldable f_XfX1V)
                 ($dFoldable1_XfX21 [Occ=Once] :: Foldable g_XfX1X)
                 (@ m_afWYY)
                 ($dMonoid_afWZ0 [Occ=Once*] :: Monoid m_afWYY)
                 (ds_dfX9E [Occ=Once!] :: Sum f_XfX1V g_XfX1X m_afWYY) ->
                 case ds_dfX9E of {
                   InL x_afWK3 [Occ=Once] ->
                     foldMap
                       @ f_XfX1V
                       $dFoldable_XfX1Z
                       @ m_afWYY
                       @ m_afWYY
                       $dMonoid_afWZ0
                       (id @ m_afWYY)
                       x_afWK3;
                   InR y_afWK5 [Occ=Once] ->
                     foldMap
                       @ g_XfX1X
                       $dFoldable1_XfX21
                       @ m_afWYY
                       @ m_afWYY
                       $dMonoid_afWZ0
                       (id @ m_afWYY)
                       y_afWK5
                 }}]
Data.Functor.Sum.$fFoldableSum_$cfold
  = \ (@ (f_XfX1V :: * -> *))
      (@ (g_XfX1X :: * -> *))
      ($dFoldable_XfX1Z :: Foldable f_XfX1V)
      ($dFoldable1_XfX21 :: Foldable g_XfX1X)
      (@ m_afWYY)
      ($dMonoid_afWZ0 :: Monoid m_afWYY)
      (ds_dfX9E :: Sum f_XfX1V g_XfX1X m_afWYY) ->
      case ds_dfX9E of {
        InL x_afWK3 ->
          foldMap
            @ f_XfX1V
            $dFoldable_XfX1Z
            @ m_afWYY
            @ m_afWYY
            $dMonoid_afWZ0
            (id @ m_afWYY)
            x_afWK3;
        InR y_afWK5 ->
          foldMap
            @ g_XfX1X
            $dFoldable1_XfX21
            @ m_afWYY
            @ m_afWYY
            $dMonoid_afWZ0
            (id @ m_afWYY)
            y_afWK5
      }

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum2 :: forall a. a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_afX1c) (v_ifzGv [Occ=Once] :: a_afX1c) -> v_ifzGv}]
Data.Functor.Sum.$fFoldableSum2
  = \ (@ a_afX1c) (v_ifzGv :: a_afX1c) -> v_ifzGv

-- RHS size: {terms: 24, types: 46, coercions: 10, joins: 0/1}
Data.Functor.Sum.$fFoldableSum3
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Num a => Sum f g a -> Data.Semigroup.Internal.Sum a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U,A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XfX1N :: * -> *))
                 (@ (g_XfX1P :: * -> *))
                 ($dFoldable_XfX1R [Occ=OnceL] :: Foldable f_XfX1N)
                 ($dFoldable1_XfX1T [Occ=OnceL] :: Foldable g_XfX1P)
                 (@ a_afX1c)
                 ($dNum_afX1e [Occ=OnceL] :: Num a_afX1c) ->
                 let {
                   $dMonoid_afWZb [Occ=OnceL*]
                     :: Monoid (Data.Semigroup.Internal.Sum a_afX1c)
                   [LclId]
                   $dMonoid_afWZb
                     = Data.Semigroup.Internal.$fMonoidSum @ a_afX1c $dNum_afX1e } in
                 \ (ds_dfX9E [Occ=Once!] :: Sum f_XfX1N g_XfX1P a_afX1c) ->
                   case ds_dfX9E of {
                     InL x_afWK3 [Occ=Once] ->
                       foldMap
                         @ f_XfX1N
                         $dFoldable_XfX1R
                         @ (Data.Semigroup.Internal.Sum a_afX1c)
                         @ a_afX1c
                         $dMonoid_afWZb
                         ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1c)
                          `cast` (<a_afX1c>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_afX1c>_R)
                                  :: (a_afX1c -> a_afX1c :: *)
                                     ~R# (a_afX1c -> Data.Semigroup.Internal.Sum a_afX1c :: *)))
                         x_afWK3;
                     InR y_afWK5 [Occ=Once] ->
                       foldMap
                         @ g_XfX1P
                         $dFoldable1_XfX1T
                         @ (Data.Semigroup.Internal.Sum a_afX1c)
                         @ a_afX1c
                         $dMonoid_afWZb
                         ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1c)
                          `cast` (<a_afX1c>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_afX1c>_R)
                                  :: (a_afX1c -> a_afX1c :: *)
                                     ~R# (a_afX1c -> Data.Semigroup.Internal.Sum a_afX1c :: *)))
                         y_afWK5
                   }}]
Data.Functor.Sum.$fFoldableSum3
  = \ (@ (f_XfX1N :: * -> *))
      (@ (g_XfX1P :: * -> *))
      ($dFoldable_XfX1R :: Foldable f_XfX1N)
      ($dFoldable1_XfX1T :: Foldable g_XfX1P)
      (@ a_afX1c)
      ($dNum_afX1e :: Num a_afX1c) ->
      let {
        $dMonoid_afWZb :: Monoid (Data.Semigroup.Internal.Sum a_afX1c)
        [LclId]
        $dMonoid_afWZb
          = Data.Semigroup.Internal.$fMonoidSum @ a_afX1c $dNum_afX1e } in
      \ (ds_dfX9E :: Sum f_XfX1N g_XfX1P a_afX1c) ->
        case ds_dfX9E of {
          InL x_afWK3 ->
            foldMap
              @ f_XfX1N
              $dFoldable_XfX1R
              @ (Data.Semigroup.Internal.Sum a_afX1c)
              @ a_afX1c
              $dMonoid_afWZb
              ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1c)
               `cast` (<a_afX1c>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_afX1c>_R)
                       :: (a_afX1c -> a_afX1c :: *)
                          ~R# (a_afX1c -> Data.Semigroup.Internal.Sum a_afX1c :: *)))
              x_afWK3;
          InR y_afWK5 ->
            foldMap
              @ g_XfX1P
              $dFoldable1_XfX1T
              @ (Data.Semigroup.Internal.Sum a_afX1c)
              @ a_afX1c
              $dMonoid_afWZb
              ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1c)
               `cast` (<a_afX1c>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_afX1c>_R)
                       :: (a_afX1c -> a_afX1c :: *)
                          ~R# (a_afX1c -> Data.Semigroup.Internal.Sum a_afX1c :: *)))
              y_afWK5
        }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rfXP1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rfXP1 = "minimum: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum4 :: forall a. a
[GblId, Str=x]
Data.Functor.Sum.$fFoldableSum4
  = \ (@ a_afX12) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_afX12
        (GHC.CString.unpackCString# lvl_rfXP1)

-- RHS size: {terms: 34, types: 54, coercions: 14, joins: 0/1}
Data.Functor.Sum.$fFoldableSum_$cminimum
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Ord a => Sum f g a -> a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,A,C(C1(U)),A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 200 60}]
Data.Functor.Sum.$fFoldableSum_$cminimum
  = \ (@ (f_XfX1M :: * -> *))
      (@ (g_XfX1O :: * -> *))
      ($dFoldable_XfX1Q :: Foldable f_XfX1M)
      ($dFoldable1_XfX1S :: Foldable g_XfX1O)
      (@ a_afX12)
      ($dOrd_afX14 :: Ord a_afX12) ->
      let {
        g1_sfXgs :: Monoid (Data.Functor.Utils.Min a_afX12)
        [LclId]
        g1_sfXgs
          = Data.Functor.Utils.$fMonoidMin @ a_afX12 $dOrd_afX14 } in
      \ (x_ifzGk :: Sum f_XfX1M g_XfX1O a_afX12) ->
        case x_ifzGk of {
          InL x1_afWK3 ->
            case (foldMap
                    @ f_XfX1M
                    $dFoldable_XfX1Q
                    @ (Data.Functor.Utils.Min a_afX12)
                    @ a_afX12
                    g1_sfXgs
                    ((GHC.Base.Just @ a_afX12)
                     `cast` (<a_afX12>_R
                             ->_R Sym (Data.Functor.Utils.N:Min[0]) <a_afX12>_N
                             :: (a_afX12 -> Maybe a_afX12 :: *)
                                ~R# (a_afX12 -> Data.Functor.Utils.Min a_afX12 :: *)))
                    x1_afWK3)
                 `cast` (Data.Functor.Utils.N:Min[0] <a_afX12>_N
                         :: (Data.Functor.Utils.Min a_afX12 :: *) ~R# (Maybe a_afX12 :: *))
            of {
              Nothing -> Data.Functor.Sum.$fFoldableSum4 @ a_afX12;
              Just v_ifzGp -> v_ifzGp
            };
          InR y_afWK5 ->
            case (foldMap
                    @ g_XfX1O
                    $dFoldable1_XfX1S
                    @ (Data.Functor.Utils.Min a_afX12)
                    @ a_afX12
                    g1_sfXgs
                    ((GHC.Base.Just @ a_afX12)
                     `cast` (<a_afX12>_R
                             ->_R Sym (Data.Functor.Utils.N:Min[0]) <a_afX12>_N
                             :: (a_afX12 -> Maybe a_afX12 :: *)
                                ~R# (a_afX12 -> Data.Functor.Utils.Min a_afX12 :: *)))
                    y_afWK5)
                 `cast` (Data.Functor.Utils.N:Min[0] <a_afX12>_N
                         :: (Data.Functor.Utils.Min a_afX12 :: *) ~R# (Maybe a_afX12 :: *))
            of {
              Nothing -> Data.Functor.Sum.$fFoldableSum4 @ a_afX12;
              Just v_ifzGp -> v_ifzGp
            }
        }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rfXP2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_rfXP2 = "maximum: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum5 :: forall a. a
[GblId, Str=x]
Data.Functor.Sum.$fFoldableSum5
  = \ (@ a_afX0S) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_afX0S
        (GHC.CString.unpackCString# lvl1_rfXP2)

-- RHS size: {terms: 34, types: 54, coercions: 14, joins: 0/1}
Data.Functor.Sum.$fFoldableSum_$cmaximum
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Ord a => Sum f g a -> a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,A,A,A,C(C1(U)),A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 200 60}]
Data.Functor.Sum.$fFoldableSum_$cmaximum
  = \ (@ (f_XfX1L :: * -> *))
      (@ (g_XfX1N :: * -> *))
      ($dFoldable_XfX1P :: Foldable f_XfX1L)
      ($dFoldable1_XfX1R :: Foldable g_XfX1N)
      (@ a_afX0S)
      ($dOrd_afX0U :: Ord a_afX0S) ->
      let {
        g1_sfXgo :: Monoid (Data.Functor.Utils.Max a_afX0S)
        [LclId]
        g1_sfXgo
          = Data.Functor.Utils.$fMonoidMax @ a_afX0S $dOrd_afX0U } in
      \ (x_ifzG6 :: Sum f_XfX1L g_XfX1N a_afX0S) ->
        case x_ifzG6 of {
          InL x1_afWK3 ->
            case (foldMap
                    @ f_XfX1L
                    $dFoldable_XfX1P
                    @ (Data.Functor.Utils.Max a_afX0S)
                    @ a_afX0S
                    g1_sfXgo
                    ((GHC.Base.Just @ a_afX0S)
                     `cast` (<a_afX0S>_R
                             ->_R Sym (Data.Functor.Utils.N:Max[0]) <a_afX0S>_N
                             :: (a_afX0S -> Maybe a_afX0S :: *)
                                ~R# (a_afX0S -> Data.Functor.Utils.Max a_afX0S :: *)))
                    x1_afWK3)
                 `cast` (Data.Functor.Utils.N:Max[0] <a_afX0S>_N
                         :: (Data.Functor.Utils.Max a_afX0S :: *) ~R# (Maybe a_afX0S :: *))
            of {
              Nothing -> Data.Functor.Sum.$fFoldableSum5 @ a_afX0S;
              Just v_ifzGb -> v_ifzGb
            };
          InR y_afWK5 ->
            case (foldMap
                    @ g_XfX1N
                    $dFoldable1_XfX1R
                    @ (Data.Functor.Utils.Max a_afX0S)
                    @ a_afX0S
                    g1_sfXgo
                    ((GHC.Base.Just @ a_afX0S)
                     `cast` (<a_afX0S>_R
                             ->_R Sym (Data.Functor.Utils.N:Max[0]) <a_afX0S>_N
                             :: (a_afX0S -> Maybe a_afX0S :: *)
                                ~R# (a_afX0S -> Data.Functor.Utils.Max a_afX0S :: *)))
                    y_afWK5)
                 `cast` (Data.Functor.Utils.N:Max[0] <a_afX0S>_N
                         :: (Data.Functor.Utils.Max a_afX0S :: *) ~R# (Maybe a_afX0S :: *))
            of {
              Nothing -> Data.Functor.Sum.$fFoldableSum5 @ a_afX0S;
              Just v_ifzGb -> v_ifzGb
            }
        }

-- RHS size: {terms: 26, types: 42, coercions: 16, joins: 0/1}
Data.Functor.Sum.$fFoldableSum_$celem
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Eq a => a -> Sum f g a -> Bool
[GblId,
 Arity=4,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(1*C1(U),A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 0] 170 60}]
Data.Functor.Sum.$fFoldableSum_$celem
  = \ (@ (f_XfX1K :: * -> *))
      (@ (g_XfX1M :: * -> *))
      ($dFoldable_XfX1O :: Foldable f_XfX1K)
      ($dFoldable1_XfX1Q :: Foldable g_XfX1M)
      (@ a_afX0I)
      ($dEq_afX0K :: Eq a_afX0I)
      (eta_B1 :: a_afX0I) ->
      let {
        f1_sfXgl :: a_afX0I -> Bool
        [LclId]
        f1_sfXgl = == @ a_afX0I $dEq_afX0K eta_B1 } in
      (\ (ds_dfX9E :: Sum f_XfX1K g_XfX1M a_afX0I) ->
         case ds_dfX9E of {
           InL x_afWK3 ->
             foldMap
               @ f_XfX1K
               $dFoldable_XfX1O
               @ Data.Semigroup.Internal.Any
               @ a_afX0I
               Data.Semigroup.Internal.$fMonoidAny
               (f1_sfXgl
                `cast` (<a_afX0I>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                        :: (a_afX0I -> Bool :: *)
                           ~R# (a_afX0I -> Data.Semigroup.Internal.Any :: *)))
               x_afWK3;
           InR y_afWK5 ->
             foldMap
               @ g_XfX1M
               $dFoldable1_XfX1Q
               @ Data.Semigroup.Internal.Any
               @ a_afX0I
               Data.Semigroup.Internal.$fMonoidAny
               (f1_sfXgl
                `cast` (<a_afX0I>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                        :: (a_afX0I -> Bool :: *)
                           ~R# (a_afX0I -> Data.Semigroup.Internal.Any :: *)))
               y_afWK5
         })
      `cast` (<Sum f_XfX1K g_XfX1M a_afX0I>_R
              ->_R Data.Semigroup.Internal.N:Any[0]
              :: (Sum f_XfX1K g_XfX1M a_afX0I
                  -> Data.Semigroup.Internal.Any :: *)
                 ~R# (Sum f_XfX1K g_XfX1M a_afX0I -> Bool :: *))

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum10
  :: forall b.
     Monoid
       (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$fFoldableSum10
  = \ (@ b_afWZK) ->
      Data.Semigroup.Internal.$fMonoidDual
        @ (Data.Semigroup.Internal.Endo b_afWZK)
        (Data.Semigroup.Internal.$fMonoidEndo @ b_afWZK)

-- RHS size: {terms: 31, types: 53, coercions: 18, joins: 0/1}
Data.Functor.Sum.$fFoldableSum_$cfoldl
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall b a. (b -> a -> b) -> b -> Sum f g a -> b
[GblId,
 Arity=5,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0 90] 200 0}]
Data.Functor.Sum.$fFoldableSum_$cfoldl
  = \ (@ (f_XfX1E :: * -> *))
      (@ (g_XfX1G :: * -> *))
      ($dFoldable_XfX1I :: Foldable f_XfX1E)
      ($dFoldable1_XfX1K :: Foldable g_XfX1G)
      (@ b_afWZK)
      (@ a_afWZL)
      (f1_ifzEG :: b_afWZK -> a_afWZL -> b_afWZK)
      (z_ifzEH :: b_afWZK)
      (t1_ifzEI :: Sum f_XfX1E g_XfX1G a_afWZL) ->
      let {
        f2_sfXgj :: a_afWZL -> b_afWZK -> b_afWZK
        [LclId,
         Arity=2,
         Str=<L,U><L,U>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
                 Tmpl= \ (x_ifzEJ [Occ=Once] :: a_afWZL)
                         (y_ifzEK [Occ=Once] :: b_afWZK) ->
                         f1_ifzEG y_ifzEK x_ifzEJ}]
        f2_sfXgj
          = \ (x_ifzEJ :: a_afWZL) (y_ifzEK :: b_afWZK) ->
              f1_ifzEG y_ifzEK x_ifzEJ } in
      case t1_ifzEI of {
        InL x_afWK3 ->
          ((foldMap
              @ f_XfX1E
              $dFoldable_XfX1I
              @ (Data.Semigroup.Internal.Dual
                   (Data.Semigroup.Internal.Endo b_afWZK))
              @ a_afWZL
              (Data.Functor.Sum.$fFoldableSum10 @ b_afWZK)
              (f2_sfXgj
               `cast` (<a_afWZL>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                     (Data.Semigroup.Internal.N:Endo[0] <b_afWZK>_R))
                       :: (a_afWZL -> b_afWZK -> b_afWZK :: *)
                          ~R# (a_afWZL
                               -> Data.Semigroup.Internal.Dual
                                    (Data.Semigroup.Internal.Endo b_afWZK) :: *)))
              x_afWK3)
           `cast` (Data.Semigroup.Internal.N:Dual[0]
                       (Data.Semigroup.Internal.N:Endo[0] <b_afWZK>_R)
                   :: (Data.Semigroup.Internal.Dual
                         (Data.Semigroup.Internal.Endo b_afWZK) :: *)
                      ~R# (b_afWZK -> b_afWZK :: *)))
            z_ifzEH;
        InR y_afWK5 ->
          ((foldMap
              @ g_XfX1G
              $dFoldable1_XfX1K
              @ (Data.Semigroup.Internal.Dual
                   (Data.Semigroup.Internal.Endo b_afWZK))
              @ a_afWZL
              (Data.Functor.Sum.$fFoldableSum10 @ b_afWZK)
              (f2_sfXgj
               `cast` (<a_afWZL>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                     (Data.Semigroup.Internal.N:Endo[0] <b_afWZK>_R))
                       :: (a_afWZL -> b_afWZK -> b_afWZK :: *)
                          ~R# (a_afWZL
                               -> Data.Semigroup.Internal.Dual
                                    (Data.Semigroup.Internal.Endo b_afWZK) :: *)))
              y_afWK5)
           `cast` (Data.Semigroup.Internal.N:Dual[0]
                       (Data.Semigroup.Internal.N:Endo[0] <b_afWZK>_R)
                   :: (Data.Semigroup.Internal.Dual
                         (Data.Semigroup.Internal.Endo b_afWZK) :: *)
                      ~R# (b_afWZK -> b_afWZK :: *)))
            z_ifzEH
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rfXP3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rfXP3 = "foldl1: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum9 :: forall a. a
[GblId, Str=x]
Data.Functor.Sum.$fFoldableSum9
  = \ (@ a_afX0c) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_afX0c
        (GHC.CString.unpackCString# lvl2_rfXP3)

-- RHS size: {terms: 53, types: 73, coercions: 22, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cfoldl1
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. (a -> a -> a) -> Sum f g a -> a
[GblId,
 Arity=4,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 190] 340 0}]
Data.Functor.Sum.$fFoldableSum_$cfoldl1
  = \ (@ (f_XfX1H :: * -> *))
      (@ (g_XfX1J :: * -> *))
      ($dFoldable_XfX1L :: Foldable f_XfX1H)
      ($dFoldable1_XfX1N :: Foldable g_XfX1J)
      (@ a_afX0c)
      (f1_ifzFi :: a_afX0c -> a_afX0c -> a_afX0c)
      (xs_ifzFj :: Sum f_XfX1H g_XfX1J a_afX0c) ->
      case xs_ifzFj of {
        InL x_afWK3 ->
          case ((foldMap
                   @ f_XfX1H
                   $dFoldable_XfX1L
                   @ (Data.Semigroup.Internal.Dual
                        (Data.Semigroup.Internal.Endo (Maybe a_afX0c)))
                   @ a_afX0c
                   (Data.Functor.Sum.$fFoldableSum10 @ (Maybe a_afX0c))
                   ((\ (x1_ifzEJ :: a_afX0c) (y_ifzEK :: Maybe a_afX0c) ->
                       GHC.Base.Just
                         @ a_afX0c
                         (case y_ifzEK of {
                            Nothing -> x1_ifzEJ;
                            Just x2_ifzFq -> f1_ifzFi x2_ifzFq x1_ifzEJ
                          }))
                    `cast` (<a_afX0c>_R
                            ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                          (Data.Semigroup.Internal.N:Endo[0] <Maybe a_afX0c>_R))
                            :: (a_afX0c -> Maybe a_afX0c -> Maybe a_afX0c :: *)
                               ~R# (a_afX0c
                                    -> Data.Semigroup.Internal.Dual
                                         (Data.Semigroup.Internal.Endo (Maybe a_afX0c)) :: *)))
                   x_afWK3)
                `cast` (Data.Semigroup.Internal.N:Dual[0]
                            (Data.Semigroup.Internal.N:Endo[0] <Maybe a_afX0c>_R)
                        :: (Data.Semigroup.Internal.Dual
                              (Data.Semigroup.Internal.Endo (Maybe a_afX0c)) :: *)
                           ~R# (Maybe a_afX0c -> Maybe a_afX0c :: *)))
                 (GHC.Base.Nothing @ a_afX0c)
          of {
            Nothing -> Data.Functor.Sum.$fFoldableSum9 @ a_afX0c;
            Just v_ifzFw -> v_ifzFw
          };
        InR y_afWK5 ->
          case ((foldMap
                   @ g_XfX1J
                   $dFoldable1_XfX1N
                   @ (Data.Semigroup.Internal.Dual
                        (Data.Semigroup.Internal.Endo (Maybe a_afX0c)))
                   @ a_afX0c
                   (Data.Functor.Sum.$fFoldableSum10 @ (Maybe a_afX0c))
                   ((\ (x_ifzEJ :: a_afX0c) (y1_ifzEK :: Maybe a_afX0c) ->
                       GHC.Base.Just
                         @ a_afX0c
                         (case y1_ifzEK of {
                            Nothing -> x_ifzEJ;
                            Just x1_ifzFq -> f1_ifzFi x1_ifzFq x_ifzEJ
                          }))
                    `cast` (<a_afX0c>_R
                            ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                          (Data.Semigroup.Internal.N:Endo[0] <Maybe a_afX0c>_R))
                            :: (a_afX0c -> Maybe a_afX0c -> Maybe a_afX0c :: *)
                               ~R# (a_afX0c
                                    -> Data.Semigroup.Internal.Dual
                                         (Data.Semigroup.Internal.Endo (Maybe a_afX0c)) :: *)))
                   y_afWK5)
                `cast` (Data.Semigroup.Internal.N:Dual[0]
                            (Data.Semigroup.Internal.N:Endo[0] <Maybe a_afX0c>_R)
                        :: (Data.Semigroup.Internal.Dual
                              (Data.Semigroup.Internal.Endo (Maybe a_afX0c)) :: *)
                           ~R# (Maybe a_afX0c -> Maybe a_afX0c :: *)))
                 (GHC.Base.Nothing @ a_afX0c)
          of {
            Nothing -> Data.Functor.Sum.$fFoldableSum9 @ a_afX0c;
            Just v_ifzFw -> v_ifzFw
          }
      }

-- RHS size: {terms: 45, types: 64, coercions: 22, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cfoldr'
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a b. (a -> b -> b) -> b -> Sum f g a -> b
[GblId,
 Arity=5,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0 190] 340 0}]
Data.Functor.Sum.$fFoldableSum_$cfoldr'
  = \ (@ (f_XfX1D :: * -> *))
      (@ (g_XfX1F :: * -> *))
      ($dFoldable_XfX1H :: Foldable f_XfX1D)
      ($dFoldable1_XfX1J :: Foldable g_XfX1F)
      (@ a_afWZA)
      (@ b_afWZB)
      (f1_ifzEu :: a_afWZA -> b_afWZB -> b_afWZB)
      (z0_ifzEv :: b_afWZB)
      (xs_ifzEw :: Sum f_XfX1D g_XfX1F a_afWZA) ->
      case xs_ifzEw of {
        InL x_afWK3 ->
          ((foldMap
              @ f_XfX1D
              $dFoldable_XfX1H
              @ (Data.Semigroup.Internal.Dual
                   (Data.Semigroup.Internal.Endo (b_afWZB -> b_afWZB)))
              @ a_afWZA
              (Data.Functor.Sum.$fFoldableSum10 @ (b_afWZB -> b_afWZB))
              ((\ (x1_ifzEJ :: a_afWZA)
                  (y_ifzEK :: b_afWZB -> b_afWZB)
                  (z_ifzEz :: b_afWZB) ->
                  case f1_ifzEu x1_ifzEJ z_ifzEz of vx_ifzEA { __DEFAULT ->
                  y_ifzEK vx_ifzEA
                  })
               `cast` (<a_afWZA>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                     (Data.Semigroup.Internal.N:Endo[0] <b_afWZB -> b_afWZB>_R))
                       :: (a_afWZA -> (b_afWZB -> b_afWZB) -> b_afWZB -> b_afWZB :: *)
                          ~R# (a_afWZA
                               -> Data.Semigroup.Internal.Dual
                                    (Data.Semigroup.Internal.Endo (b_afWZB -> b_afWZB)) :: *)))
              x_afWK3)
           `cast` (Data.Semigroup.Internal.N:Dual[0]
                       (Data.Semigroup.Internal.N:Endo[0] <b_afWZB -> b_afWZB>_R)
                   :: (Data.Semigroup.Internal.Dual
                         (Data.Semigroup.Internal.Endo (b_afWZB -> b_afWZB)) :: *)
                      ~R# ((b_afWZB -> b_afWZB) -> b_afWZB -> b_afWZB :: *)))
            (id @ b_afWZB) z0_ifzEv;
        InR y_afWK5 ->
          ((foldMap
              @ g_XfX1F
              $dFoldable1_XfX1J
              @ (Data.Semigroup.Internal.Dual
                   (Data.Semigroup.Internal.Endo (b_afWZB -> b_afWZB)))
              @ a_afWZA
              (Data.Functor.Sum.$fFoldableSum10 @ (b_afWZB -> b_afWZB))
              ((\ (x_ifzEJ :: a_afWZA)
                  (y1_ifzEK :: b_afWZB -> b_afWZB)
                  (z_ifzEz :: b_afWZB) ->
                  case f1_ifzEu x_ifzEJ z_ifzEz of vx_ifzEA { __DEFAULT ->
                  y1_ifzEK vx_ifzEA
                  })
               `cast` (<a_afWZA>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                     (Data.Semigroup.Internal.N:Endo[0] <b_afWZB -> b_afWZB>_R))
                       :: (a_afWZA -> (b_afWZB -> b_afWZB) -> b_afWZB -> b_afWZB :: *)
                          ~R# (a_afWZA
                               -> Data.Semigroup.Internal.Dual
                                    (Data.Semigroup.Internal.Endo (b_afWZB -> b_afWZB)) :: *)))
              y_afWK5)
           `cast` (Data.Semigroup.Internal.N:Dual[0]
                       (Data.Semigroup.Internal.N:Endo[0] <b_afWZB -> b_afWZB>_R)
                   :: (Data.Semigroup.Internal.Dual
                         (Data.Semigroup.Internal.Endo (b_afWZB -> b_afWZB)) :: *)
                      ~R# ((b_afWZB -> b_afWZB) -> b_afWZB -> b_afWZB :: *)))
            (id @ b_afWZB) z0_ifzEv
      }

-- RHS size: {terms: 25, types: 46, coercions: 14, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cfoldr
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a b. (a -> b -> b) -> b -> Sum f g a -> b
[GblId,
 Arity=5,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 0 90] 140 0}]
Data.Functor.Sum.$fFoldableSum_$cfoldr
  = \ (@ (f_XfX1C :: * -> *))
      (@ (g_XfX1E :: * -> *))
      ($dFoldable_XfX1G :: Foldable f_XfX1C)
      ($dFoldable1_XfX1I :: Foldable g_XfX1E)
      (@ a_afWZq)
      (@ b_afWZr)
      (f1_ifzEn :: a_afWZq -> b_afWZr -> b_afWZr)
      (z_ifzEo :: b_afWZr)
      (t1_ifzEp :: Sum f_XfX1C g_XfX1E a_afWZq) ->
      case t1_ifzEp of {
        InL x_afWK3 ->
          ((foldMap
              @ f_XfX1C
              $dFoldable_XfX1G
              @ (Data.Semigroup.Internal.Endo b_afWZr)
              @ a_afWZq
              (Data.Semigroup.Internal.$fMonoidEndo @ b_afWZr)
              (f1_ifzEn
               `cast` (<a_afWZq>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <b_afWZr>_R)
                       :: (a_afWZq -> b_afWZr -> b_afWZr :: *)
                          ~R# (a_afWZq -> Data.Semigroup.Internal.Endo b_afWZr :: *)))
              x_afWK3)
           `cast` (Data.Semigroup.Internal.N:Endo[0] <b_afWZr>_R
                   :: (Data.Semigroup.Internal.Endo b_afWZr :: *)
                      ~R# (b_afWZr -> b_afWZr :: *)))
            z_ifzEo;
        InR y_afWK5 ->
          ((foldMap
              @ g_XfX1E
              $dFoldable1_XfX1I
              @ (Data.Semigroup.Internal.Endo b_afWZr)
              @ a_afWZq
              (Data.Semigroup.Internal.$fMonoidEndo @ b_afWZr)
              (f1_ifzEn
               `cast` (<a_afWZq>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <b_afWZr>_R)
                       :: (a_afWZq -> b_afWZr -> b_afWZr :: *)
                          ~R# (a_afWZq -> Data.Semigroup.Internal.Endo b_afWZr :: *)))
              y_afWK5)
           `cast` (Data.Semigroup.Internal.N:Endo[0] <b_afWZr>_R
                   :: (Data.Semigroup.Internal.Endo b_afWZr :: *)
                      ~R# (b_afWZr -> b_afWZr :: *)))
            z_ifzEo
      }

-- RHS size: {terms: 25, types: 37, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cfoldl'
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall b a. (b -> a -> b) -> b -> Sum f g a -> b
[GblId,
 Arity=5,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 60 0 0] 160 0}]
Data.Functor.Sum.$fFoldableSum_$cfoldl'
  = \ (@ (f_XfX1F :: * -> *))
      (@ (g_XfX1H :: * -> *))
      ($dFoldable_XfX1J :: Foldable f_XfX1F)
      ($dFoldable1_XfX1L :: Foldable g_XfX1H)
      (@ b_afWZU)
      (@ a_afWZV)
      (f1_ifzEP :: b_afWZU -> a_afWZV -> b_afWZU)
      (z0_ifzEQ :: b_afWZU)
      (xs_ifzER :: Sum f_XfX1F g_XfX1H a_afWZV) ->
      Data.Functor.Sum.$fFoldableSum_$cfoldr
        @ f_XfX1F
        @ g_XfX1H
        $dFoldable_XfX1J
        $dFoldable1_XfX1L
        @ a_afWZV
        @ (b_afWZU -> b_afWZU)
        (\ (x_ifzES :: a_afWZV)
           (k_ifzET :: b_afWZU -> b_afWZU)
           (z_ifzEU :: b_afWZU) ->
           case f1_ifzEP z_ifzEU x_ifzES of vx_ifzEV { __DEFAULT ->
           k_ifzET vx_ifzEV
           })
        (id @ b_afWZU)
        xs_ifzER
        z0_ifzEQ

-- RHS size: {terms: 12, types: 8, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum7
  :: forall a. a -> (Int -> Int) -> Int -> Int
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U(U))><S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_afX0A)
                 _ [Occ=Dead]
                 (k_ifzET [Occ=Once!] :: Int -> Int)
                 (z_ifzEU [Occ=Once!] :: Int) ->
                 case z_ifzEU of { GHC.Types.I# x1_ifzFR [Occ=Once] ->
                 k_ifzET (GHC.Types.I# (GHC.Prim.+# x1_ifzFR 1#))
                 }}]
Data.Functor.Sum.$fFoldableSum7
  = \ (@ a_afX0A)
      _ [Occ=Dead]
      (k_ifzET :: Int -> Int)
      (z_ifzEU :: Int) ->
      case z_ifzEU of { GHC.Types.I# x1_ifzFR ->
      k_ifzET (GHC.Types.I# (GHC.Prim.+# x1_ifzFR 1#))
      }

-- RHS size: {terms: 13, types: 27, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$clength
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Sum f g a -> Int
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XfX1J :: * -> *))
                 (@ (g_XfX1L :: * -> *))
                 ($dFoldable_XfX1N [Occ=Once] :: Foldable f_XfX1J)
                 ($dFoldable1_XfX1P [Occ=Once] :: Foldable g_XfX1L)
                 (@ a_afX0A)
                 (eta_B1 [Occ=Once] :: Sum f_XfX1J g_XfX1L a_afX0A) ->
                 Data.Functor.Sum.$fFoldableSum_$cfoldr
                   @ f_XfX1J
                   @ g_XfX1L
                   $dFoldable_XfX1N
                   $dFoldable1_XfX1P
                   @ a_afX0A
                   @ (Int -> Int)
                   (Data.Functor.Sum.$fFoldableSum7 @ a_afX0A)
                   (id @ Int)
                   eta_B1
                   Data.Functor.Sum.$fFoldableSum6}]
Data.Functor.Sum.$fFoldableSum_$clength
  = \ (@ (f_XfX1J :: * -> *))
      (@ (g_XfX1L :: * -> *))
      ($dFoldable_XfX1N :: Foldable f_XfX1J)
      ($dFoldable1_XfX1P :: Foldable g_XfX1L)
      (@ a_afX0A)
      (eta_B1 :: Sum f_XfX1J g_XfX1L a_afX0A) ->
      Data.Functor.Sum.$fFoldableSum_$cfoldr
        @ f_XfX1J
        @ g_XfX1L
        $dFoldable_XfX1N
        $dFoldable1_XfX1P
        @ a_afX0A
        @ (Int -> Int)
        (Data.Functor.Sum.$fFoldableSum7 @ a_afX0A)
        (id @ Int)
        eta_B1
        Data.Functor.Sum.$fFoldableSum6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_rfXP4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_rfXP4 = "foldr1: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum11 :: forall a. a
[GblId, Str=x]
Data.Functor.Sum.$fFoldableSum11
  = \ (@ a_afX04) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_afX04
        (GHC.CString.unpackCString# lvl3_rfXP4)

-- RHS size: {terms: 28, types: 40, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cfoldr1
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. (a -> a -> a) -> Sum f g a -> a
[GblId,
 Arity=4,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 60 0] 160 0}]
Data.Functor.Sum.$fFoldableSum_$cfoldr1
  = \ (@ (f_XfX1G :: * -> *))
      (@ (g_XfX1I :: * -> *))
      ($dFoldable_XfX1K :: Foldable f_XfX1G)
      ($dFoldable1_XfX1M :: Foldable g_XfX1I)
      (@ a_afX04)
      (f1_ifzEZ :: a_afX04 -> a_afX04 -> a_afX04)
      (xs_ifzF0 :: Sum f_XfX1G g_XfX1I a_afX04) ->
      case Data.Functor.Sum.$fFoldableSum_$cfoldr
             @ f_XfX1G
             @ g_XfX1I
             $dFoldable_XfX1K
             $dFoldable1_XfX1M
             @ a_afX04
             @ (Maybe a_afX04)
             (\ (x_ifzF1 :: a_afX04) (m_ifzF2 :: Maybe a_afX04) ->
                GHC.Base.Just
                  @ a_afX04
                  (case m_ifzF2 of {
                     Nothing -> x_ifzF1;
                     Just y_ifzF7 -> f1_ifzEZ x_ifzF1 y_ifzF7
                   }))
             (GHC.Base.Nothing @ a_afX04)
             xs_ifzF0
      of {
        Nothing -> Data.Functor.Sum.$fFoldableSum11 @ a_afX04;
        Just v_ifzFd -> v_ifzFd
      }

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum8 :: forall a. a -> Bool -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_afX0s) _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False}]
Data.Functor.Sum.$fFoldableSum8
  = \ (@ a_afX0s) _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False

-- RHS size: {terms: 12, types: 25, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$cnull
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Sum f g a -> Bool
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XfX1I :: * -> *))
                 (@ (g_XfX1K :: * -> *))
                 ($dFoldable_XfX1M [Occ=Once] :: Foldable f_XfX1I)
                 ($dFoldable1_XfX1O [Occ=Once] :: Foldable g_XfX1K)
                 (@ a_afX0s)
                 (eta_B1 [Occ=Once] :: Sum f_XfX1I g_XfX1K a_afX0s) ->
                 Data.Functor.Sum.$fFoldableSum_$cfoldr
                   @ f_XfX1I
                   @ g_XfX1K
                   $dFoldable_XfX1M
                   $dFoldable1_XfX1O
                   @ a_afX0s
                   @ Bool
                   (Data.Functor.Sum.$fFoldableSum8 @ a_afX0s)
                   GHC.Types.True
                   eta_B1}]
Data.Functor.Sum.$fFoldableSum_$cnull
  = \ (@ (f_XfX1I :: * -> *))
      (@ (g_XfX1K :: * -> *))
      ($dFoldable_XfX1M :: Foldable f_XfX1I)
      ($dFoldable1_XfX1O :: Foldable g_XfX1K)
      (@ a_afX0s)
      (eta_B1 :: Sum f_XfX1I g_XfX1K a_afX0s) ->
      Data.Functor.Sum.$fFoldableSum_$cfoldr
        @ f_XfX1I
        @ g_XfX1K
        $dFoldable_XfX1M
        $dFoldable1_XfX1O
        @ a_afX0s
        @ Bool
        (Data.Functor.Sum.$fFoldableSum8 @ a_afX0s)
        GHC.Types.True
        eta_B1

-- RHS size: {terms: 24, types: 46, coercions: 10, joins: 0/1}
Data.Functor.Sum.$fFoldableSum1
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Num a => Sum f g a -> Data.Semigroup.Internal.Product a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,U,A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afWYR :: * -> *))
                 (@ (g_afWYS :: * -> *))
                 ($dFoldable_afWYT [Occ=OnceL] :: Foldable f_afWYR)
                 ($dFoldable1_afWYU [Occ=OnceL] :: Foldable g_afWYS)
                 (@ a_afX1m)
                 ($dNum_afX1o [Occ=OnceL] :: Num a_afX1m) ->
                 let {
                   $dMonoid_afWZb [Occ=OnceL*]
                     :: Monoid (Data.Semigroup.Internal.Product a_afX1m)
                   [LclId]
                   $dMonoid_afWZb
                     = Data.Semigroup.Internal.$fMonoidProduct
                         @ a_afX1m $dNum_afX1o } in
                 \ (ds_dfX9E [Occ=Once!] :: Sum f_afWYR g_afWYS a_afX1m) ->
                   case ds_dfX9E of {
                     InL x_afWK3 [Occ=Once] ->
                       foldMap
                         @ f_afWYR
                         $dFoldable_afWYT
                         @ (Data.Semigroup.Internal.Product a_afX1m)
                         @ a_afX1m
                         $dMonoid_afWZb
                         ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1m)
                          `cast` (<a_afX1m>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_afX1m>_R)
                                  :: (a_afX1m -> a_afX1m :: *)
                                     ~R# (a_afX1m -> Data.Semigroup.Internal.Product a_afX1m :: *)))
                         x_afWK3;
                     InR y_afWK5 [Occ=Once] ->
                       foldMap
                         @ g_afWYS
                         $dFoldable1_afWYU
                         @ (Data.Semigroup.Internal.Product a_afX1m)
                         @ a_afX1m
                         $dMonoid_afWZb
                         ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1m)
                          `cast` (<a_afX1m>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_afX1m>_R)
                                  :: (a_afX1m -> a_afX1m :: *)
                                     ~R# (a_afX1m -> Data.Semigroup.Internal.Product a_afX1m :: *)))
                         y_afWK5
                   }}]
Data.Functor.Sum.$fFoldableSum1
  = \ (@ (f_afWYR :: * -> *))
      (@ (g_afWYS :: * -> *))
      ($dFoldable_afWYT :: Foldable f_afWYR)
      ($dFoldable1_afWYU :: Foldable g_afWYS)
      (@ a_afX1m)
      ($dNum_afX1o :: Num a_afX1m) ->
      let {
        $dMonoid_afWZb :: Monoid (Data.Semigroup.Internal.Product a_afX1m)
        [LclId]
        $dMonoid_afWZb
          = Data.Semigroup.Internal.$fMonoidProduct
              @ a_afX1m $dNum_afX1o } in
      \ (ds_dfX9E :: Sum f_afWYR g_afWYS a_afX1m) ->
        case ds_dfX9E of {
          InL x_afWK3 ->
            foldMap
              @ f_afWYR
              $dFoldable_afWYT
              @ (Data.Semigroup.Internal.Product a_afX1m)
              @ a_afX1m
              $dMonoid_afWZb
              ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1m)
               `cast` (<a_afX1m>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_afX1m>_R)
                       :: (a_afX1m -> a_afX1m :: *)
                          ~R# (a_afX1m -> Data.Semigroup.Internal.Product a_afX1m :: *)))
              x_afWK3;
          InR y_afWK5 ->
            foldMap
              @ g_afWYS
              $dFoldable1_afWYU
              @ (Data.Semigroup.Internal.Product a_afX1m)
              @ a_afX1m
              $dMonoid_afWZb
              ((Data.Functor.Sum.$fFoldableSum2 @ a_afX1m)
               `cast` (<a_afX1m>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_afX1m>_R)
                       :: (a_afX1m -> a_afX1m :: *)
                          ~R# (a_afX1m -> Data.Semigroup.Internal.Product a_afX1m :: *)))
              y_afWK5
        }

-- RHS size: {terms: 12, types: 27, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fFoldableSum_$ctoList [InlPrag=INLINE (sat-args=1)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Sum f g a -> [a]
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_afWYR :: * -> *))
                 (@ (g_afWYS :: * -> *))
                 ($dFoldable_afWYT [Occ=Once] :: Foldable f_afWYR)
                 ($dFoldable1_afWYU [Occ=Once] :: Foldable g_afWYS)
                 (@ a_afX0k)
                 (t1_ifzFB [Occ=Once] :: Sum f_afWYR g_afWYS a_afX0k) ->
                 GHC.Base.build
                   @ a_afX0k
                   (\ (@ b_ifzFC)
                      (c_ifzFD [Occ=Once, OS=OneShot] :: a_afX0k -> b_ifzFC -> b_ifzFC)
                      (n_ifzFE [Occ=Once, OS=OneShot] :: b_ifzFC) ->
                      Data.Functor.Sum.$fFoldableSum_$cfoldr
                        @ f_afWYR
                        @ g_afWYS
                        $dFoldable_afWYT
                        $dFoldable1_afWYU
                        @ a_afX0k
                        @ b_ifzFC
                        c_ifzFD
                        n_ifzFE
                        t1_ifzFB)}]
Data.Functor.Sum.$fFoldableSum_$ctoList
  = \ (@ (f_afWYR :: * -> *))
      (@ (g_afWYS :: * -> *))
      ($dFoldable_afWYT :: Foldable f_afWYR)
      ($dFoldable1_afWYU :: Foldable g_afWYS)
      (@ a_afX0k)
      (eta_B1 :: Sum f_afWYR g_afWYS a_afX0k) ->
      Data.Functor.Sum.$fFoldableSum_$cfoldr
        @ f_afWYR
        @ g_afWYS
        $dFoldable_afWYT
        $dFoldable1_afWYU
        @ a_afX0k
        @ [a_afX0k]
        (GHC.Types.: @ a_afX0k)
        (GHC.Types.[] @ a_afX0k)
        eta_B1

-- RHS size: {terms: 53, types: 49, coercions: 30, joins: 0/0}
Data.Functor.Sum.$fFoldableSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     Foldable (Sum f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=DFun: \ (@ (f_afWK0 :: * -> *))
             (@ (g_afWK1 :: * -> *))
             (v_B1 :: Foldable f_afWK0)
             (v1_B2 :: Foldable g_afWK1) ->
       Data.Foldable.C:Foldable TYPE: Sum f_afWK0 g_afWK1
                                Data.Functor.Sum.$fFoldableSum_$cfold
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cfoldMap
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cfoldr
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cfoldr'
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cfoldl
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cfoldl'
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cfoldr1
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cfoldl1
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$ctoList
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cnull
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$clength
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$celem
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cmaximum
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                Data.Functor.Sum.$fFoldableSum_$cminimum
                                  @ f_afWK0 @ g_afWK1 v_B1 v1_B2
                                (Data.Functor.Sum.$fFoldableSum3 @ f_afWK0 @ g_afWK1 v_B1 v1_B2)
                                `cast` (forall (a :: <*>_N).
                                        <Num a>_R
                                        ->_R <Sum f_afWK0 g_afWK1 a>_R
                                        ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R
                                        :: (forall a.
                                            Num a =>
                                            Sum f_afWK0 g_afWK1 a
                                            -> Data.Semigroup.Internal.Sum a :: *)
                                           ~R# (forall a. Num a => Sum f_afWK0 g_afWK1 a -> a :: *))
                                (Data.Functor.Sum.$fFoldableSum1 @ f_afWK0 @ g_afWK1 v_B1 v1_B2)
                                `cast` (forall (a :: <*>_N).
                                        <Num a>_R
                                        ->_R <Sum f_afWK0 g_afWK1 a>_R
                                        ->_R Data.Semigroup.Internal.N:Product[0] <a>_R
                                        :: (forall a.
                                            Num a =>
                                            Sum f_afWK0 g_afWK1 a
                                            -> Data.Semigroup.Internal.Product a :: *)
                                           ~R# (forall a.
                                                Num a =>
                                                Sum f_afWK0 g_afWK1 a -> a :: *))]
Data.Functor.Sum.$fFoldableSum
  = \ (@ (f_afWYR :: * -> *))
      (@ (g_afWYS :: * -> *))
      ($dFoldable_afWYT :: Foldable f_afWYR)
      ($dFoldable1_afWYU :: Foldable g_afWYS) ->
      Data.Foldable.C:Foldable
        @ (Sum f_afWYR g_afWYS)
        (Data.Functor.Sum.$fFoldableSum_$cfold
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cfoldMap
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cfoldr
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cfoldr'
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cfoldl
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cfoldl'
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cfoldr1
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cfoldl1
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$ctoList
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cnull
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$clength
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$celem
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cmaximum
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        (Data.Functor.Sum.$fFoldableSum_$cminimum
           @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
        ((Data.Functor.Sum.$fFoldableSum3
            @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
         `cast` (forall (a :: <*>_N).
                 <Num a>_R
                 ->_R <Sum f_afWYR g_afWYS a>_R
                 ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R
                 :: (forall a.
                     Num a =>
                     Sum f_afWYR g_afWYS a -> Data.Semigroup.Internal.Sum a :: *)
                    ~R# (forall a. Num a => Sum f_afWYR g_afWYS a -> a :: *)))
        ((Data.Functor.Sum.$fFoldableSum1
            @ f_afWYR @ g_afWYS $dFoldable_afWYT $dFoldable1_afWYU)
         `cast` (forall (a :: <*>_N).
                 <Num a>_R
                 ->_R <Sum f_afWYR g_afWYS a>_R
                 ->_R Data.Semigroup.Internal.N:Product[0] <a>_R
                 :: (forall a.
                     Num a =>
                     Sum f_afWYR g_afWYS a -> Data.Semigroup.Internal.Product a :: *)
                    ~R# (forall a. Num a => Sum f_afWYR g_afWYS a -> a :: *)))

-- RHS size: {terms: 32, types: 79, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fTraversableSum_$ctraverse
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (f1 :: * -> *) a b.
     Applicative f1 =>
     (a -> f1 b) -> Sum f g a -> f1 (Sum f g b)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(S(C(C(S))L)LLLLL),U(U(U,U),U,U,U,U,U)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0 140] 240 0}]
Data.Functor.Sum.$fTraversableSum_$ctraverse
  = \ (@ (f_afWXq :: * -> *))
      (@ (g_afWXr :: * -> *))
      ($dTraversable_afWXs :: Traversable f_afWXq)
      ($dTraversable1_afWXt :: Traversable g_afWXr)
      (@ (f1_afWXF :: * -> *))
      (@ a_afWXG)
      (@ b_afWXH)
      ($dApplicative_afWXJ :: Applicative f1_afWXF)
      (eta_B2 :: a_afWXG -> f1_afWXF b_afWXH)
      (eta1_B1 :: Sum f_afWXq g_afWXr a_afWXG) ->
      case eta1_B1 of {
        InL x_afWJX ->
          fmap
            @ f1_afWXF
            (GHC.Base.$p1Applicative @ f1_afWXF $dApplicative_afWXJ)
            @ (f_afWXq b_afWXH)
            @ (Sum f_afWXq g_afWXr b_afWXH)
            (Data.Functor.Sum.InL @ * @ f_afWXq @ g_afWXr @ b_afWXH)
            (traverse
               @ f_afWXq
               $dTraversable_afWXs
               @ f1_afWXF
               @ a_afWXG
               @ b_afWXH
               $dApplicative_afWXJ
               eta_B2
               x_afWJX);
        InR y_afWJZ ->
          fmap
            @ f1_afWXF
            (GHC.Base.$p1Applicative @ f1_afWXF $dApplicative_afWXJ)
            @ (g_afWXr b_afWXH)
            @ (Sum f_afWXq g_afWXr b_afWXH)
            (Data.Functor.Sum.InR @ * @ f_afWXq @ g_afWXr @ b_afWXH)
            (traverse
               @ g_afWXr
               $dTraversable1_afWXt
               @ f1_afWXF
               @ a_afWXG
               @ b_afWXH
               $dApplicative_afWXJ
               eta_B2
               y_afWJZ)
      }

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fTraversableSum_$cp2Traversable
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     Foldable (Sum f g)
[GblId,
 Arity=2,
 Str=<L,1*U(A,1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A)><L,1*U(A,1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afWXq :: * -> *))
                 (@ (g_afWXr :: * -> *))
                 ($dTraversable_afWXs [Occ=Once] :: Traversable f_afWXq)
                 ($dTraversable1_afWXt [Occ=Once] :: Traversable g_afWXr) ->
                 Data.Functor.Sum.$fFoldableSum
                   @ f_afWXq
                   @ g_afWXr
                   (Data.Traversable.$p2Traversable @ f_afWXq $dTraversable_afWXs)
                   (Data.Traversable.$p2Traversable @ g_afWXr $dTraversable1_afWXt)}]
Data.Functor.Sum.$fTraversableSum_$cp2Traversable
  = \ (@ (f_afWXq :: * -> *))
      (@ (g_afWXr :: * -> *))
      ($dTraversable_afWXs :: Traversable f_afWXq)
      ($dTraversable1_afWXt :: Traversable g_afWXr) ->
      Data.Functor.Sum.$fFoldableSum
        @ f_afWXq
        @ g_afWXr
        (Data.Traversable.$p2Traversable @ f_afWXq $dTraversable_afWXs)
        (Data.Traversable.$p2Traversable @ g_afWXr $dTraversable1_afWXt)

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fTraversableSum_$cp1Traversable
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     Functor (Sum f g)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(C(C1(U)),A),A,A,A,A,A)><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_afWXq :: * -> *))
                 (@ (g_afWXr :: * -> *))
                 ($dTraversable_afWXs [Occ=Once] :: Traversable f_afWXq)
                 ($dTraversable1_afWXt [Occ=Once] :: Traversable g_afWXr) ->
                 Data.Functor.Sum.$fFunctorSum
                   @ f_afWXq
                   @ g_afWXr
                   (Data.Traversable.$p1Traversable @ f_afWXq $dTraversable_afWXs)
                   (Data.Traversable.$p1Traversable @ g_afWXr $dTraversable1_afWXt)}]
Data.Functor.Sum.$fTraversableSum_$cp1Traversable
  = \ (@ (f_afWXq :: * -> *))
      (@ (g_afWXr :: * -> *))
      ($dTraversable_afWXs :: Traversable f_afWXq)
      ($dTraversable1_afWXt :: Traversable g_afWXr) ->
      Data.Functor.Sum.$fFunctorSum
        @ f_afWXq
        @ g_afWXr
        (Data.Traversable.$p1Traversable @ f_afWXq $dTraversable_afWXs)
        (Data.Traversable.$p1Traversable @ g_afWXr $dTraversable1_afWXt)

-- RHS size: {terms: 12, types: 28, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fTraversableSum_$csequenceA [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (f1 :: * -> *) a.
     Applicative f1 =>
     Sum f g (f1 a) -> f1 (Sum f g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(C1(U))),A,A,A)><L,U(A,A,C(C1(C1(U))),A,A,A)><L,U(U(U,U),U,U,U,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_afWXq :: * -> *))
                 (@ (g_afWXr :: * -> *))
                 ($dTraversable_afWXs [Occ=Once] :: Traversable f_afWXq)
                 ($dTraversable1_afWXt [Occ=Once] :: Traversable g_afWXr)
                 (@ (f1_afWYg :: * -> *))
                 (@ a_afWYh)
                 ($dApplicative_afWYj [Occ=Once] :: Applicative f1_afWYg) ->
                 Data.Functor.Sum.$fTraversableSum_$ctraverse
                   @ f_afWXq
                   @ g_afWXr
                   $dTraversable_afWXs
                   $dTraversable1_afWXt
                   @ f1_afWYg
                   @ (f1_afWYg a_afWYh)
                   @ a_afWYh
                   $dApplicative_afWYj
                   (id @ (f1_afWYg a_afWYh))}]
Data.Functor.Sum.$fTraversableSum_$csequenceA
  = \ (@ (f_afWXq :: * -> *))
      (@ (g_afWXr :: * -> *))
      ($dTraversable_afWXs :: Traversable f_afWXq)
      ($dTraversable1_afWXt :: Traversable g_afWXr)
      (@ (f1_afWYg :: * -> *))
      (@ a_afWYh)
      ($dApplicative_afWYj :: Applicative f1_afWYg) ->
      Data.Functor.Sum.$fTraversableSum_$ctraverse
        @ f_afWXq
        @ g_afWXr
        $dTraversable_afWXs
        $dTraversable1_afWXt
        @ f1_afWYg
        @ (f1_afWYg a_afWYh)
        @ a_afWYh
        $dApplicative_afWYj
        (id @ (f1_afWYg a_afWYh))

-- RHS size: {terms: 17, types: 37, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fTraversableSum_$cmapM [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (m :: * -> *) a b.
     Monad m =>
     (a -> m b) -> Sum f g a -> m (Sum f g b)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(U,U),U,U,U,U,U),A,A,A,A)><L,U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_afWXq :: * -> *))
                 (@ (g_afWXr :: * -> *))
                 ($dTraversable_afWXs [Occ=Once] :: Traversable f_afWXq)
                 ($dTraversable1_afWXt [Occ=Once] :: Traversable g_afWXr)
                 (@ (m_afWYs :: * -> *))
                 (@ a_afWYt)
                 (@ b_afWYu)
                 ($dMonad_afWYw [Occ=Once] :: Monad m_afWYs) ->
                 Data.Functor.Sum.$fTraversableSum_$ctraverse
                   @ f_afWXq
                   @ g_afWXr
                   $dTraversable_afWXs
                   $dTraversable1_afWXt
                   @ m_afWYs
                   @ a_afWYt
                   @ b_afWYu
                   (GHC.Base.$p1Monad @ m_afWYs $dMonad_afWYw)}]
Data.Functor.Sum.$fTraversableSum_$cmapM
  = \ (@ (f_afWXq :: * -> *))
      (@ (g_afWXr :: * -> *))
      ($dTraversable_afWXs :: Traversable f_afWXq)
      ($dTraversable1_afWXt :: Traversable g_afWXr)
      (@ (m_afWYs :: * -> *))
      (@ a_afWYt)
      (@ b_afWYu)
      ($dMonad_afWYw :: Monad m_afWYs)
      (eta_B2 :: a_afWYt -> m_afWYs b_afWYu)
      (eta1_B1 :: Sum f_afWXq g_afWXr a_afWYt) ->
      Data.Functor.Sum.$fTraversableSum_$ctraverse
        @ f_afWXq
        @ g_afWXr
        $dTraversable_afWXs
        $dTraversable1_afWXt
        @ m_afWYs
        @ a_afWYt
        @ b_afWYu
        (GHC.Base.$p1Monad @ m_afWYs $dMonad_afWYw)
        eta_B2
        eta1_B1

-- RHS size: {terms: 15, types: 36, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fTraversableSum_$csequence [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (m :: * -> *) a. Monad m => Sum f g (m a) -> m (Sum f g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(U,U),U,U,U,U,U),A,A,A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_afWXq :: * -> *))
                 (@ (g_afWXr :: * -> *))
                 ($dTraversable_afWXs [Occ=Once] :: Traversable f_afWXq)
                 ($dTraversable1_afWXt [Occ=Once] :: Traversable g_afWXr)
                 (@ (m_afWYG :: * -> *))
                 (@ a_afWYH)
                 ($dMonad_afWYJ [Occ=Once] :: Monad m_afWYG) ->
                 Data.Functor.Sum.$fTraversableSum_$ctraverse
                   @ f_afWXq
                   @ g_afWXr
                   $dTraversable_afWXs
                   $dTraversable1_afWXt
                   @ m_afWYG
                   @ (m_afWYG a_afWYH)
                   @ a_afWYH
                   (GHC.Base.$p1Monad @ m_afWYG $dMonad_afWYJ)
                   (id @ (m_afWYG a_afWYH))}]
Data.Functor.Sum.$fTraversableSum_$csequence
  = \ (@ (f_afWXq :: * -> *))
      (@ (g_afWXr :: * -> *))
      ($dTraversable_afWXs :: Traversable f_afWXq)
      ($dTraversable1_afWXt :: Traversable g_afWXr)
      (@ (m_afWYG :: * -> *))
      (@ a_afWYH)
      ($dMonad_afWYJ :: Monad m_afWYG)
      (eta_B1 :: Sum f_afWXq g_afWXr (m_afWYG a_afWYH)) ->
      Data.Functor.Sum.$fTraversableSum_$ctraverse
        @ f_afWXq
        @ g_afWXr
        $dTraversable_afWXs
        $dTraversable1_afWXt
        @ m_afWYG
        @ (m_afWYG a_afWYH)
        @ a_afWYH
        (GHC.Base.$p1Monad @ m_afWYG $dMonad_afWYJ)
        (id @ (m_afWYG a_afWYH))
        eta_B1

-- RHS size: {terms: 23, types: 29, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fTraversableSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     Traversable (Sum f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(1*U(C(C1(U)),A),1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),C(C1(C1(U))),A,A,A)><L,U(1*U(C(C1(U)),A),1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),C(C1(C1(U))),A,A,A)>m,
 Unf=DFun: \ (@ (f_afWJU :: * -> *))
             (@ (g_afWJV :: * -> *))
             (v_B1 :: Traversable f_afWJU)
             (v1_B2 :: Traversable g_afWJV) ->
       Data.Traversable.C:Traversable TYPE: Sum f_afWJU g_afWJV
                                      Data.Functor.Sum.$fTraversableSum_$cp1Traversable
                                        @ f_afWJU @ g_afWJV v_B1 v1_B2
                                      Data.Functor.Sum.$fTraversableSum_$cp2Traversable
                                        @ f_afWJU @ g_afWJV v_B1 v1_B2
                                      Data.Functor.Sum.$fTraversableSum_$ctraverse
                                        @ f_afWJU @ g_afWJV v_B1 v1_B2
                                      Data.Functor.Sum.$fTraversableSum_$csequenceA
                                        @ f_afWJU @ g_afWJV v_B1 v1_B2
                                      Data.Functor.Sum.$fTraversableSum_$cmapM
                                        @ f_afWJU @ g_afWJV v_B1 v1_B2
                                      Data.Functor.Sum.$fTraversableSum_$csequence
                                        @ f_afWJU @ g_afWJV v_B1 v1_B2]
Data.Functor.Sum.$fTraversableSum
  = \ (@ (f_afWXq :: * -> *))
      (@ (g_afWXr :: * -> *))
      ($dTraversable_afWXs :: Traversable f_afWXq)
      ($dTraversable1_afWXt :: Traversable g_afWXr) ->
      Data.Traversable.C:Traversable
        @ (Sum f_afWXq g_afWXr)
        (Data.Functor.Sum.$fTraversableSum_$cp1Traversable
           @ f_afWXq @ g_afWXr $dTraversable_afWXs $dTraversable1_afWXt)
        (Data.Functor.Sum.$fTraversableSum_$cp2Traversable
           @ f_afWXq @ g_afWXr $dTraversable_afWXs $dTraversable1_afWXt)
        (Data.Functor.Sum.$fTraversableSum_$ctraverse
           @ f_afWXq @ g_afWXr $dTraversable_afWXs $dTraversable1_afWXt)
        (Data.Functor.Sum.$fTraversableSum_$csequenceA
           @ f_afWXq @ g_afWXr $dTraversable_afWXs $dTraversable1_afWXt)
        (Data.Functor.Sum.$fTraversableSum_$cmapM
           @ f_afWXq @ g_afWXr $dTraversable_afWXs $dTraversable1_afWXt)
        (Data.Functor.Sum.$fTraversableSum_$csequence
           @ f_afWXq @ g_afWXr $dTraversable_afWXs $dTraversable1_afWXt)

-- RHS size: {terms: 13, types: 105, coercions: 129, joins: 0/0}
Data.Functor.Sum.$fGeneric1Sum_$cto1
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     GHC.Generics.Rep1 (Sum f g) a -> Sum f g a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_afWVF)
                 (@ (f_afWVG :: k_afWVF -> *))
                 (@ (g_afWVH :: k_afWVF -> *))
                 (@ (a_afWWx :: k_afWVF))
                 (ds_dfX9m [Occ=Once]
                    :: GHC.Generics.Rep1 (Sum f_afWVG g_afWVH) a_afWWx) ->
                 case ds_dfX9m
                      `cast` ((Sub (Data.Functor.Sum.Rep1_Sum[0]
                                        <k_afWVF>_N <f_afWVG>_N <g_afWVH>_N) ; GHC.Generics.N:M1[0]
                                                                                   <k_afWVF>_N
                                                                                   <GHC.Generics.D>_P
                                                                                   <'GHC.Generics.MetaData
                                                                                      "Sum"
                                                                                      "Data.Functor.Sum"
                                                                                      "base"
                                                                                      'False>_P
                                                                                   <GHC.Generics.M1
                                                                                      GHC.Generics.C
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "InL"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'False)
                                                                                      (GHC.Generics.M1
                                                                                         GHC.Generics.S
                                                                                         ('GHC.Generics.MetaSel
                                                                                            'Nothing
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.Rec1
                                                                                            f_afWVG))
                                                                                    GHC.Generics.:+: GHC.Generics.M1
                                                                                                       GHC.Generics.C
                                                                                                       ('GHC.Generics.MetaCons
                                                                                                          "InR"
                                                                                                          'GHC.Generics.PrefixI
                                                                                                          'False)
                                                                                                       (GHC.Generics.M1
                                                                                                          GHC.Generics.S
                                                                                                          ('GHC.Generics.MetaSel
                                                                                                             'Nothing
                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                          (GHC.Generics.Rec1
                                                                                                             g_afWVH))>_R) <a_afWWx>_N
                              :: (GHC.Generics.Rep1 (Sum f_afWVG g_afWVH) a_afWWx :: *)
                                 ~R# ((GHC.Generics.:+:)
                                        (GHC.Generics.M1
                                           GHC.Generics.C
                                           ('GHC.Generics.MetaCons
                                              "InL" 'GHC.Generics.PrefixI 'False)
                                           (GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.Rec1 f_afWVG)))
                                        (GHC.Generics.M1
                                           GHC.Generics.C
                                           ('GHC.Generics.MetaCons
                                              "InR" 'GHC.Generics.PrefixI 'False)
                                           (GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.Rec1 g_afWVH)))
                                        a_afWWx :: *))
                 of {
                   GHC.Generics.L1 ds1_dfX9o [Occ=Once] ->
                     Data.Functor.Sum.InL
                       @ k_afWVF
                       @ f_afWVG
                       @ g_afWVH
                       @ a_afWWx
                       (ds1_dfX9o
                        `cast` ((GHC.Generics.N:M1[0]
                                     <k_afWVF>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec1 f_afWVG)>_R ; (GHC.Generics.N:M1[0]
                                                                              <k_afWVF>_N
                                                                              <GHC.Generics.S>_P
                                                                              <'GHC.Generics.MetaSel
                                                                                 'Nothing
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy>_P
                                                                              <GHC.Generics.Rec1
                                                                                 f_afWVG>_R ; GHC.Generics.N:Rec1[0]
                                                                                                  <k_afWVF>_N
                                                                                                  <f_afWVG>_R)) <a_afWWx>_N
                                :: (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec1 f_afWVG))
                                      a_afWWx :: *)
                                   ~R# (f_afWVG a_afWWx :: *)));
                   GHC.Generics.R1 ds1_dfX9q [Occ=Once] ->
                     Data.Functor.Sum.InR
                       @ k_afWVF
                       @ f_afWVG
                       @ g_afWVH
                       @ a_afWWx
                       (ds1_dfX9q
                        `cast` ((GHC.Generics.N:M1[0]
                                     <k_afWVF>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec1 g_afWVH)>_R ; (GHC.Generics.N:M1[0]
                                                                              <k_afWVF>_N
                                                                              <GHC.Generics.S>_P
                                                                              <'GHC.Generics.MetaSel
                                                                                 'Nothing
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy>_P
                                                                              <GHC.Generics.Rec1
                                                                                 g_afWVH>_R ; GHC.Generics.N:Rec1[0]
                                                                                                  <k_afWVF>_N
                                                                                                  <g_afWVH>_R)) <a_afWWx>_N
                                :: (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec1 g_afWVH))
                                      a_afWWx :: *)
                                   ~R# (g_afWVH a_afWWx :: *)))
                 }}]
Data.Functor.Sum.$fGeneric1Sum_$cto1
  = \ (@ k_afWVF)
      (@ (f_afWVG :: k_afWVF -> *))
      (@ (g_afWVH :: k_afWVF -> *))
      (@ (a_afWWx :: k_afWVF))
      (ds_dfX9m :: GHC.Generics.Rep1 (Sum f_afWVG g_afWVH) a_afWWx) ->
      case ds_dfX9m
           `cast` ((Sub (Data.Functor.Sum.Rep1_Sum[0]
                             <k_afWVF>_N <f_afWVG>_N <g_afWVH>_N) ; GHC.Generics.N:M1[0]
                                                                        <k_afWVF>_N
                                                                        <GHC.Generics.D>_P
                                                                        <'GHC.Generics.MetaData
                                                                           "Sum"
                                                                           "Data.Functor.Sum"
                                                                           "base"
                                                                           'False>_P
                                                                        <GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "InL"
                                                                              'GHC.Generics.PrefixI
                                                                              'False)
                                                                           (GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 'Nothing
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.Rec1
                                                                                 f_afWVG))
                                                                         GHC.Generics.:+: GHC.Generics.M1
                                                                                            GHC.Generics.C
                                                                                            ('GHC.Generics.MetaCons
                                                                                               "InR"
                                                                                               'GHC.Generics.PrefixI
                                                                                               'False)
                                                                                            (GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  'Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (GHC.Generics.Rec1
                                                                                                  g_afWVH))>_R) <a_afWWx>_N
                   :: (GHC.Generics.Rep1 (Sum f_afWVG g_afWVH) a_afWWx :: *)
                      ~R# ((GHC.Generics.:+:)
                             (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec1 f_afWVG)))
                             (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec1 g_afWVH)))
                             a_afWWx :: *))
      of {
        GHC.Generics.L1 ds1_dfX9o ->
          Data.Functor.Sum.InL
            @ k_afWVF
            @ f_afWVG
            @ g_afWVH
            @ a_afWWx
            (ds1_dfX9o
             `cast` ((GHC.Generics.N:M1[0]
                          <k_afWVF>_N
                          <GHC.Generics.C>_P
                          <'GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False>_P
                          <GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec1 f_afWVG)>_R ; (GHC.Generics.N:M1[0]
                                                                   <k_afWVF>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.Rec1
                                                                      f_afWVG>_R ; GHC.Generics.N:Rec1[0]
                                                                                       <k_afWVF>_N
                                                                                       <f_afWVG>_R)) <a_afWWx>_N
                     :: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                           (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec1 f_afWVG))
                           a_afWWx :: *)
                        ~R# (f_afWVG a_afWWx :: *)));
        GHC.Generics.R1 ds1_dfX9q ->
          Data.Functor.Sum.InR
            @ k_afWVF
            @ f_afWVG
            @ g_afWVH
            @ a_afWWx
            (ds1_dfX9q
             `cast` ((GHC.Generics.N:M1[0]
                          <k_afWVF>_N
                          <GHC.Generics.C>_P
                          <'GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False>_P
                          <GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec1 g_afWVH)>_R ; (GHC.Generics.N:M1[0]
                                                                   <k_afWVF>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.Rec1
                                                                      g_afWVH>_R ; GHC.Generics.N:Rec1[0]
                                                                                       <k_afWVF>_N
                                                                                       <g_afWVH>_R)) <a_afWWx>_N
                     :: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                           (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec1 g_afWVH))
                           a_afWWx :: *)
                        ~R# (g_afWVH a_afWWx :: *)))
      }

-- RHS size: {terms: 13, types: 103, coercions: 80, joins: 0/0}
Data.Functor.Sum.$fGeneric1Sum1
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     Sum f g a
     -> (GHC.Generics.:+:)
          (GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.Rec1 f)))
          (GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.Rec1 g)))
          a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_afWVF)
                 (@ (f_afWVG :: k_afWVF -> *))
                 (@ (g_afWVH :: k_afWVF -> *))
                 (@ (a_afWVL :: k_afWVF))
                 (x_afWPG [Occ=Once!] :: Sum f_afWVG g_afWVH a_afWVL) ->
                 case x_afWPG of {
                   InL g1_afWPH [Occ=Once] ->
                     GHC.Generics.L1
                       @ k_afWVF
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec1 f_afWVG)))
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec1 g_afWVH)))
                       @ a_afWVL
                       (g1_afWPH
                        `cast` ((Sym (GHC.Generics.N:Rec1[0]
                                          <k_afWVF>_N <f_afWVG>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                               <k_afWVF>_N
                                                                               <GHC.Generics.S>_P
                                                                               <'GHC.Generics.MetaSel
                                                                                  'Nothing
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                               <GHC.Generics.Rec1
                                                                                  f_afWVG>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                         <k_afWVF>_N
                                                                                                         <GHC.Generics.C>_P
                                                                                                         <'GHC.Generics.MetaCons
                                                                                                            "InL"
                                                                                                            'GHC.Generics.PrefixI
                                                                                                            'False>_P
                                                                                                         <GHC.Generics.M1
                                                                                                            GHC.Generics.S
                                                                                                            ('GHC.Generics.MetaSel
                                                                                                               'Nothing
                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                            (GHC.Generics.Rec1
                                                                                                               f_afWVG)>_R))) <a_afWVL>_N
                                :: (f_afWVG a_afWVL :: *)
                                   ~R# (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "InL" 'GHC.Generics.PrefixI 'False)
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec1 f_afWVG))
                                          a_afWVL :: *)));
                   InR g1_afWPI [Occ=Once] ->
                     GHC.Generics.R1
                       @ k_afWVF
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec1 f_afWVG)))
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec1 g_afWVH)))
                       @ a_afWVL
                       (g1_afWPI
                        `cast` ((Sym (GHC.Generics.N:Rec1[0]
                                          <k_afWVF>_N <g_afWVH>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                               <k_afWVF>_N
                                                                               <GHC.Generics.S>_P
                                                                               <'GHC.Generics.MetaSel
                                                                                  'Nothing
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                               <GHC.Generics.Rec1
                                                                                  g_afWVH>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                         <k_afWVF>_N
                                                                                                         <GHC.Generics.C>_P
                                                                                                         <'GHC.Generics.MetaCons
                                                                                                            "InR"
                                                                                                            'GHC.Generics.PrefixI
                                                                                                            'False>_P
                                                                                                         <GHC.Generics.M1
                                                                                                            GHC.Generics.S
                                                                                                            ('GHC.Generics.MetaSel
                                                                                                               'Nothing
                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                            (GHC.Generics.Rec1
                                                                                                               g_afWVH)>_R))) <a_afWVL>_N
                                :: (g_afWVH a_afWVL :: *)
                                   ~R# (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "InR" 'GHC.Generics.PrefixI 'False)
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec1 g_afWVH))
                                          a_afWVL :: *)))
                 }}]
Data.Functor.Sum.$fGeneric1Sum1
  = \ (@ k_afWVF)
      (@ (f_afWVG :: k_afWVF -> *))
      (@ (g_afWVH :: k_afWVF -> *))
      (@ (a_afWVL :: k_afWVF))
      (x_afWPG :: Sum f_afWVG g_afWVH a_afWVL) ->
      case x_afWPG of {
        InL g1_afWPH ->
          GHC.Generics.L1
            @ k_afWVF
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec1 f_afWVG)))
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec1 g_afWVH)))
            @ a_afWVL
            (g1_afWPH
             `cast` ((Sym (GHC.Generics.N:Rec1[0]
                               <k_afWVF>_N <f_afWVG>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                    <k_afWVF>_N
                                                                    <GHC.Generics.S>_P
                                                                    <'GHC.Generics.MetaSel
                                                                       'Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy>_P
                                                                    <GHC.Generics.Rec1
                                                                       f_afWVG>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                              <k_afWVF>_N
                                                                                              <GHC.Generics.C>_P
                                                                                              <'GHC.Generics.MetaCons
                                                                                                 "InL"
                                                                                                 'GHC.Generics.PrefixI
                                                                                                 'False>_P
                                                                                              <GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    'Nothing
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.Rec1
                                                                                                    f_afWVG)>_R))) <a_afWVL>_N
                     :: (f_afWVG a_afWVL :: *)
                        ~R# (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                               (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     'Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec1 f_afWVG))
                               a_afWVL :: *)));
        InR g1_afWPI ->
          GHC.Generics.R1
            @ k_afWVF
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec1 f_afWVG)))
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec1 g_afWVH)))
            @ a_afWVL
            (g1_afWPI
             `cast` ((Sym (GHC.Generics.N:Rec1[0]
                               <k_afWVF>_N <g_afWVH>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                    <k_afWVF>_N
                                                                    <GHC.Generics.S>_P
                                                                    <'GHC.Generics.MetaSel
                                                                       'Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy>_P
                                                                    <GHC.Generics.Rec1
                                                                       g_afWVH>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                              <k_afWVF>_N
                                                                                              <GHC.Generics.C>_P
                                                                                              <'GHC.Generics.MetaCons
                                                                                                 "InR"
                                                                                                 'GHC.Generics.PrefixI
                                                                                                 'False>_P
                                                                                              <GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    'Nothing
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.Rec1
                                                                                                    g_afWVH)>_R))) <a_afWVL>_N
                     :: (g_afWVH a_afWVL :: *)
                        ~R# (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                               (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     'Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec1 g_afWVH))
                               a_afWVL :: *)))
      }

-- RHS size: {terms: 6, types: 19, coercions: 65, joins: 0/0}
Data.Functor.Sum.$fGeneric1Sum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (g :: k -> *). Generic1 (Sum f g)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_afWNo)
             (@ (f_afWJR :: k_afWNo -> *))
             (@ (g_afWJS :: k_afWNo -> *)) ->
       GHC.Generics.C:Generic1 TYPE: k_afWNo
                               TYPE: Sum f_afWJR g_afWJS
                               (Data.Functor.Sum.$fGeneric1Sum1 @ k_afWNo @ f_afWJR @ g_afWJS)
                               `cast` (forall (a :: <k_afWNo>_N).
                                       <Sum f_afWJR g_afWJS a>_R
                                       ->_R (Sym (GHC.Generics.N:M1[0]
                                                      <k_afWNo>_N
                                                      <GHC.Generics.D>_P
                                                      <'GHC.Generics.MetaData
                                                         "Sum" "Data.Functor.Sum" "base" 'False>_P
                                                      <GHC.Generics.M1
                                                         GHC.Generics.C
                                                         ('GHC.Generics.MetaCons
                                                            "InL" 'GHC.Generics.PrefixI 'False)
                                                         (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.Rec1 f_afWJR))
                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                          GHC.Generics.C
                                                                          ('GHC.Generics.MetaCons
                                                                             "InR"
                                                                             'GHC.Generics.PrefixI
                                                                             'False)
                                                                          (GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                'Nothing
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.Rec1
                                                                                g_afWJS))>_R) ; Sub (Sym (Data.Functor.Sum.Rep1_Sum[0]
                                                                                                              <k_afWNo>_N
                                                                                                              <f_afWJR>_N
                                                                                                              <g_afWJS>_N))) <a>_N
                                       :: (forall (a :: k).
                                           Sum f_afWJR g_afWJS a
                                           -> (GHC.Generics.:+:)
                                                (GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "InL" 'GHC.Generics.PrefixI 'False)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec1 f_afWJR)))
                                                (GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "InR" 'GHC.Generics.PrefixI 'False)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec1 g_afWJS)))
                                                a :: *)
                                          ~R# (forall (a :: k).
                                               Sum f_afWJR g_afWJS a
                                               -> GHC.Generics.Rep1 (Sum f_afWJR g_afWJS) a :: *))
                               Data.Functor.Sum.$fGeneric1Sum_$cto1 @ k_afWNo @ f_afWJR @ g_afWJS]
Data.Functor.Sum.$fGeneric1Sum
  = \ (@ k_XfWYZ)
      (@ (f_XfWZ1 :: k_XfWYZ -> *))
      (@ (g_XfWZ3 :: k_XfWYZ -> *)) ->
      GHC.Generics.C:Generic1
        @ k_XfWYZ
        @ (Sum f_XfWZ1 g_XfWZ3)
        ((Data.Functor.Sum.$fGeneric1Sum1 @ k_XfWYZ @ f_XfWZ1 @ g_XfWZ3)
         `cast` (forall (a :: <k_XfWYZ>_N).
                 <Sum f_XfWZ1 g_XfWZ3 a>_R
                 ->_R (Sym (GHC.Generics.N:M1[0]
                                <k_XfWYZ>_N
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData "Sum" "Data.Functor.Sum" "base" 'False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec1 f_XfWZ1))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "InR" 'GHC.Generics.PrefixI 'False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.Rec1
                                                          g_XfWZ3))>_R) ; Sub (Sym (Data.Functor.Sum.Rep1_Sum[0]
                                                                                        <k_XfWYZ>_N
                                                                                        <f_XfWZ1>_N
                                                                                        <g_XfWZ3>_N))) <a>_N
                 :: (forall (a :: k).
                     Sum f_XfWZ1 g_XfWZ3 a
                     -> (GHC.Generics.:+:)
                          (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec1 f_XfWZ1)))
                          (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec1 g_XfWZ3)))
                          a :: *)
                    ~R# (forall (a :: k).
                         Sum f_XfWZ1 g_XfWZ3 a
                         -> GHC.Generics.Rep1 (Sum f_XfWZ1 g_XfWZ3) a :: *)))
        (Data.Functor.Sum.$fGeneric1Sum_$cto1
           @ k_XfWYZ @ f_XfWZ1 @ g_XfWZ3)

-- RHS size: {terms: 14, types: 127, coercions: 168, joins: 0/0}
Data.Functor.Sum.$fGenericSum_$cto
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k) x.
     GHC.Generics.Rep (Sum f g a) x -> Sum f g a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_afWTP)
                 (@ (f_afWTQ :: k_afWTP -> *))
                 (@ (g_afWTR :: k_afWTP -> *))
                 (@ (a_afWTS :: k_afWTP))
                 (@ x_afWUK)
                 (ds_dfX9c [Occ=Once]
                    :: GHC.Generics.Rep (Sum f_afWTQ g_afWTR a_afWTS) x_afWUK) ->
                 case ds_dfX9c
                      `cast` ((Sub (Data.Functor.Sum.Rep_Sum[0]
                                        <k_afWTP>_N
                                        <f_afWTQ>_N
                                        <g_afWTR>_N
                                        <a_afWTS>_N) ; GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.D>_P
                                                           <'GHC.Generics.MetaData
                                                              "Sum"
                                                              "Data.Functor.Sum"
                                                              "base"
                                                              'False>_P
                                                           <GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "InL" 'GHC.Generics.PrefixI 'False)
                                                              (GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    'Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (f_afWTQ a_afWTS)))
                                                            GHC.Generics.:+: GHC.Generics.M1
                                                                               GHC.Generics.C
                                                                               ('GHC.Generics.MetaCons
                                                                                  "InR"
                                                                                  'GHC.Generics.PrefixI
                                                                                  'False)
                                                                               (GHC.Generics.M1
                                                                                  GHC.Generics.S
                                                                                  ('GHC.Generics.MetaSel
                                                                                     'Nothing
                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                     'GHC.Generics.DecidedLazy)
                                                                                  (GHC.Generics.K1
                                                                                     GHC.Generics.R
                                                                                     (g_afWTR a_afWTS)))>_R) <x_afWUK>_N
                              :: (GHC.Generics.Rep (Sum f_afWTQ g_afWTR a_afWTS) x_afWUK :: *)
                                 ~R# ((GHC.Generics.:+:)
                                        (GHC.Generics.M1
                                           GHC.Generics.C
                                           ('GHC.Generics.MetaCons
                                              "InL" 'GHC.Generics.PrefixI 'False)
                                           (GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS))))
                                        (GHC.Generics.M1
                                           GHC.Generics.C
                                           ('GHC.Generics.MetaCons
                                              "InR" 'GHC.Generics.PrefixI 'False)
                                           (GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS))))
                                        x_afWUK :: *))
                 of {
                   GHC.Generics.L1 ds1_dfX9e [Occ=Once] ->
                     Data.Functor.Sum.InL
                       @ k_afWTP
                       @ f_afWTQ
                       @ g_afWTR
                       @ a_afWTS
                       (ds1_dfX9e
                        `cast` ((GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (f_afWTQ a_afWTS))>_R ; GHC.Generics.N:M1[0]
                                                                       <*>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          (f_afWTQ a_afWTS)>_R) <x_afWUK>_N ; GHC.Generics.N:K1[0]
                                                                                                                  <*>_N
                                                                                                                  <GHC.Generics.R>_P
                                                                                                                  <f_afWTQ a_afWTS>_R
                                                                                                                  <x_afWUK>_P
                                :: (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS)))
                                      x_afWUK :: *)
                                   ~R# (f_afWTQ a_afWTS :: *)));
                   GHC.Generics.R1 ds1_dfX9h [Occ=Once] ->
                     Data.Functor.Sum.InR
                       @ k_afWTP
                       @ f_afWTQ
                       @ g_afWTR
                       @ a_afWTS
                       (ds1_dfX9h
                        `cast` ((GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (g_afWTR a_afWTS))>_R ; GHC.Generics.N:M1[0]
                                                                       <*>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          (g_afWTR a_afWTS)>_R) <x_afWUK>_N ; GHC.Generics.N:K1[0]
                                                                                                                  <*>_N
                                                                                                                  <GHC.Generics.R>_P
                                                                                                                  <g_afWTR a_afWTS>_R
                                                                                                                  <x_afWUK>_P
                                :: (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS)))
                                      x_afWUK :: *)
                                   ~R# (g_afWTR a_afWTS :: *)))
                 }}]
Data.Functor.Sum.$fGenericSum_$cto
  = \ (@ k_afWTP)
      (@ (f_afWTQ :: k_afWTP -> *))
      (@ (g_afWTR :: k_afWTP -> *))
      (@ (a_afWTS :: k_afWTP))
      (@ x_afWUK)
      (ds_dfX9c
         :: GHC.Generics.Rep (Sum f_afWTQ g_afWTR a_afWTS) x_afWUK) ->
      case ds_dfX9c
           `cast` ((Sub (Data.Functor.Sum.Rep_Sum[0]
                             <k_afWTP>_N
                             <f_afWTQ>_N
                             <g_afWTR>_N
                             <a_afWTS>_N) ; GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.D>_P
                                                <'GHC.Generics.MetaData
                                                   "Sum" "Data.Functor.Sum" "base" 'False>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "InL" 'GHC.Generics.PrefixI 'False)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.K1
                                                         GHC.Generics.R (f_afWTQ a_afWTS)))
                                                 GHC.Generics.:+: GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "InR"
                                                                       'GHC.Generics.PrefixI
                                                                       'False)
                                                                    (GHC.Generics.M1
                                                                       GHC.Generics.S
                                                                       ('GHC.Generics.MetaSel
                                                                          'Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          (g_afWTR a_afWTS)))>_R) <x_afWUK>_N
                   :: (GHC.Generics.Rep (Sum f_afWTQ g_afWTR a_afWTS) x_afWUK :: *)
                      ~R# ((GHC.Generics.:+:)
                             (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS))))
                             (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS))))
                             x_afWUK :: *))
      of {
        GHC.Generics.L1 ds1_dfX9e ->
          Data.Functor.Sum.InL
            @ k_afWTP
            @ f_afWTQ
            @ g_afWTR
            @ a_afWTS
            (ds1_dfX9e
             `cast` ((GHC.Generics.N:M1[0]
                          <*>_N
                          <GHC.Generics.C>_P
                          <'GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False>_P
                          <GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R (f_afWTQ a_afWTS))>_R ; GHC.Generics.N:M1[0]
                                                                           <*>_N
                                                                           <GHC.Generics.S>_P
                                                                           <'GHC.Generics.MetaSel
                                                                              'Nothing
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy>_P
                                                                           <GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (f_afWTQ a_afWTS)>_R) <x_afWUK>_N ; GHC.Generics.N:K1[0]
                                                                                                                      <*>_N
                                                                                                                      <GHC.Generics.R>_P
                                                                                                                      <f_afWTQ a_afWTS>_R
                                                                                                                      <x_afWUK>_P
                     :: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                           (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS)))
                           x_afWUK :: *)
                        ~R# (f_afWTQ a_afWTS :: *)));
        GHC.Generics.R1 ds1_dfX9h ->
          Data.Functor.Sum.InR
            @ k_afWTP
            @ f_afWTQ
            @ g_afWTR
            @ a_afWTS
            (ds1_dfX9h
             `cast` ((GHC.Generics.N:M1[0]
                          <*>_N
                          <GHC.Generics.C>_P
                          <'GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False>_P
                          <GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R (g_afWTR a_afWTS))>_R ; GHC.Generics.N:M1[0]
                                                                           <*>_N
                                                                           <GHC.Generics.S>_P
                                                                           <'GHC.Generics.MetaSel
                                                                              'Nothing
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy>_P
                                                                           <GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (g_afWTR a_afWTS)>_R) <x_afWUK>_N ; GHC.Generics.N:K1[0]
                                                                                                                      <*>_N
                                                                                                                      <GHC.Generics.R>_P
                                                                                                                      <g_afWTR a_afWTS>_R
                                                                                                                      <x_afWUK>_P
                     :: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                           (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS)))
                           x_afWUK :: *)
                        ~R# (g_afWTR a_afWTS :: *)))
      }

-- RHS size: {terms: 14, types: 126, coercions: 106, joins: 0/0}
Data.Functor.Sum.$fGenericSum1
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k) x.
     Sum f g a
     -> (GHC.Generics.:+:)
          (GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1 GHC.Generics.R (f a))))
          (GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1 GHC.Generics.R (g a))))
          x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_afWTP)
                 (@ (f_afWTQ :: k_afWTP -> *))
                 (@ (g_afWTR :: k_afWTP -> *))
                 (@ (a_afWTS :: k_afWTP))
                 (@ x_afWTW)
                 (x1_afWPA [Occ=Once!] :: Sum f_afWTQ g_afWTR a_afWTS) ->
                 case x1_afWPA of {
                   InL g1_afWPB [Occ=Once] ->
                     GHC.Generics.L1
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS))))
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS))))
                       @ x_afWTW
                       (g1_afWPB
                        `cast` (Sym (GHC.Generics.N:K1[0]
                                         <*>_N
                                         <GHC.Generics.R>_P
                                         <f_afWTQ a_afWTS>_R
                                         <x_afWTW>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                  <*>_N
                                                                  <GHC.Generics.S>_P
                                                                  <'GHC.Generics.MetaSel
                                                                     'Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy>_P
                                                                  <GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (f_afWTQ a_afWTS)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.C>_P
                                                                                                      <'GHC.Generics.MetaCons
                                                                                                         "InL"
                                                                                                         'GHC.Generics.PrefixI
                                                                                                         'False>_P
                                                                                                      <GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            (f_afWTQ a_afWTS))>_R)) <x_afWTW>_N
                                :: (f_afWTQ a_afWTS :: *)
                                   ~R# (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "InL" 'GHC.Generics.PrefixI 'False)
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS)))
                                          x_afWTW :: *)));
                   InR g1_afWPC [Occ=Once] ->
                     GHC.Generics.R1
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS))))
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS))))
                       @ x_afWTW
                       (g1_afWPC
                        `cast` (Sym (GHC.Generics.N:K1[0]
                                         <*>_N
                                         <GHC.Generics.R>_P
                                         <g_afWTR a_afWTS>_R
                                         <x_afWTW>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                  <*>_N
                                                                  <GHC.Generics.S>_P
                                                                  <'GHC.Generics.MetaSel
                                                                     'Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy>_P
                                                                  <GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (g_afWTR a_afWTS)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.C>_P
                                                                                                      <'GHC.Generics.MetaCons
                                                                                                         "InR"
                                                                                                         'GHC.Generics.PrefixI
                                                                                                         'False>_P
                                                                                                      <GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            (g_afWTR a_afWTS))>_R)) <x_afWTW>_N
                                :: (g_afWTR a_afWTS :: *)
                                   ~R# (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "InR" 'GHC.Generics.PrefixI 'False)
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS)))
                                          x_afWTW :: *)))
                 }}]
Data.Functor.Sum.$fGenericSum1
  = \ (@ k_afWTP)
      (@ (f_afWTQ :: k_afWTP -> *))
      (@ (g_afWTR :: k_afWTP -> *))
      (@ (a_afWTS :: k_afWTP))
      (@ x_afWTW)
      (x1_afWPA :: Sum f_afWTQ g_afWTR a_afWTS) ->
      case x1_afWPA of {
        InL g1_afWPB ->
          GHC.Generics.L1
            @ *
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS))))
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS))))
            @ x_afWTW
            (g1_afWPB
             `cast` (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <f_afWTQ a_afWTS>_R
                              <x_afWTW>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.S>_P
                                                       <'GHC.Generics.MetaSel
                                                          'Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy>_P
                                                       <GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (f_afWTQ a_afWTS)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                           <*>_N
                                                                                           <GHC.Generics.C>_P
                                                                                           <'GHC.Generics.MetaCons
                                                                                              "InL"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'False>_P
                                                                                           <GHC.Generics.M1
                                                                                              GHC.Generics.S
                                                                                              ('GHC.Generics.MetaSel
                                                                                                 'Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                              (GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 (f_afWTQ a_afWTS))>_R)) <x_afWTW>_N
                     :: (f_afWTQ a_afWTS :: *)
                        ~R# (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                               (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     'Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS)))
                               x_afWTW :: *)));
        InR g1_afWPC ->
          GHC.Generics.R1
            @ *
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.K1 GHC.Generics.R (f_afWTQ a_afWTS))))
            @ (GHC.Generics.M1
                 GHC.Generics.C
                 ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                 (GHC.Generics.M1
                    GHC.Generics.S
                    ('GHC.Generics.MetaSel
                       'Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS))))
            @ x_afWTW
            (g1_afWPC
             `cast` (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <g_afWTR a_afWTS>_R
                              <x_afWTW>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.S>_P
                                                       <'GHC.Generics.MetaSel
                                                          'Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy>_P
                                                       <GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (g_afWTR a_afWTS)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                           <*>_N
                                                                                           <GHC.Generics.C>_P
                                                                                           <'GHC.Generics.MetaCons
                                                                                              "InR"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'False>_P
                                                                                           <GHC.Generics.M1
                                                                                              GHC.Generics.S
                                                                                              ('GHC.Generics.MetaSel
                                                                                                 'Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                              (GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 (g_afWTR a_afWTS))>_R)) <x_afWTW>_N
                     :: (g_afWTR a_afWTS :: *)
                        ~R# (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                               (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     'Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.K1 GHC.Generics.R (g_afWTR a_afWTS)))
                               x_afWTW :: *)))
      }

-- RHS size: {terms: 7, types: 22, coercions: 78, joins: 0/0}
Data.Functor.Sum.$fGenericSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     Generic (Sum f g a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_afWKZ)
             (@ (f_afWJR :: k_afWKZ -> *))
             (@ (g_afWJS :: k_afWKZ -> *))
             (@ (a_afWJT :: k_afWKZ)) ->
       GHC.Generics.C:Generic TYPE: Sum f_afWJR g_afWJS a_afWJT
                              (Data.Functor.Sum.$fGenericSum1
                                 @ k_afWKZ @ f_afWJR @ g_afWJS @ a_afWJT)
                              `cast` (forall (x :: <*>_N).
                                      <Sum f_afWJR g_afWJS a_afWJT>_R
                                      ->_R (Sym (GHC.Generics.N:M1[0]
                                                     <*>_N
                                                     <GHC.Generics.D>_P
                                                     <'GHC.Generics.MetaData
                                                        "Sum" "Data.Functor.Sum" "base" 'False>_P
                                                     <GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "InL" 'GHC.Generics.PrefixI 'False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R (f_afWJR a_afWJT)))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "InR"
                                                                            'GHC.Generics.PrefixI
                                                                            'False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (g_afWJS a_afWJT)))>_R) ; Sub (Sym (Data.Functor.Sum.Rep_Sum[0]
                                                                                                                       <k_afWKZ>_N
                                                                                                                       <f_afWJR>_N
                                                                                                                       <g_afWJS>_N
                                                                                                                       <a_afWJT>_N))) <x>_N
                                      :: (forall x.
                                          Sum f_afWJR g_afWJS a_afWJT
                                          -> (GHC.Generics.:+:)
                                               (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "InL" 'GHC.Generics.PrefixI 'False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R (f_afWJR a_afWJT))))
                                               (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "InR" 'GHC.Generics.PrefixI 'False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R (g_afWJS a_afWJT))))
                                               x :: *)
                                         ~R# (forall x.
                                              Sum f_afWJR g_afWJS a_afWJT
                                              -> GHC.Generics.Rep
                                                   (Sum f_afWJR g_afWJS a_afWJT) x :: *))
                              Data.Functor.Sum.$fGenericSum_$cto
                                @ k_afWKZ @ f_afWJR @ g_afWJS @ a_afWJT]
Data.Functor.Sum.$fGenericSum
  = \ (@ k_XfWXj)
      (@ (f_XfWXl :: k_XfWXj -> *))
      (@ (g_XfWXn :: k_XfWXj -> *))
      (@ (a_XfWXp :: k_XfWXj)) ->
      GHC.Generics.C:Generic
        @ (Sum f_XfWXl g_XfWXn a_XfWXp)
        ((Data.Functor.Sum.$fGenericSum1
            @ k_XfWXj @ f_XfWXl @ g_XfWXn @ a_XfWXp)
         `cast` (forall (x :: <*>_N).
                 <Sum f_XfWXl g_XfWXn a_XfWXp>_R
                 ->_R (Sym (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData "Sum" "Data.Functor.Sum" "base" 'False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1 GHC.Generics.R (f_XfWXl a_XfWXp)))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "InR" 'GHC.Generics.PrefixI 'False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (g_XfWXn a_XfWXp)))>_R) ; Sub (Sym (Data.Functor.Sum.Rep_Sum[0]
                                                                                                  <k_XfWXj>_N
                                                                                                  <f_XfWXl>_N
                                                                                                  <g_XfWXn>_N
                                                                                                  <a_XfWXp>_N))) <x>_N
                 :: (forall x.
                     Sum f_XfWXl g_XfWXn a_XfWXp
                     -> (GHC.Generics.:+:)
                          (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons "InL" 'GHC.Generics.PrefixI 'False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R (f_XfWXl a_XfWXp))))
                          (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons "InR" 'GHC.Generics.PrefixI 'False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R (g_XfWXn a_XfWXp))))
                          x :: *)
                    ~R# (forall x.
                         Sum f_XfWXl g_XfWXn a_XfWXp
                         -> GHC.Generics.Rep (Sum f_XfWXl g_XfWXn a_XfWXp) x :: *)))
        (Data.Functor.Sum.$fGenericSum_$cto
           @ k_XfWXj @ f_XfWXl @ g_XfWXn @ a_XfWXp)

-- RHS size: {terms: 36, types: 82, coercions: 0, joins: 0/0}
Data.Functor.Sum.$w$cgunfold [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data (f a), Data (g a)) =>
     forall (c :: * -> *).
     (forall b r. Data b => c (b -> r) -> c r)
     -> (forall r. r -> c r)
     -> Data.Data.ConstrRep
     -> Data.Data.DataType
     -> c (Sum f g a)
[GblId,
 Arity=6,
 Str=<L,U><L,U><C(C(S)),1*C1(C1(U))><L,1*C1(U)><S,1*U><L,1*U(1*U,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 120 120 60 20] 180 0}]
Data.Functor.Sum.$w$cgunfold
  = \ (@ k_sfXCa)
      (@ (f_sfXCb :: k_sfXCa -> *))
      (@ (g_sfXCc :: k_sfXCa -> *))
      (@ (a_sfXCd :: k_sfXCa))
      (w_sfXCi :: Data (f_sfXCb a_sfXCd))
      (w1_sfXCj :: Data (g_sfXCc a_sfXCd))
      (@ (c_sfXCk :: * -> *))
      (w2_sfXCl :: forall b r. Data b => c_sfXCk (b -> r) -> c_sfXCk r)
      (w3_sfXCm :: forall r. r -> c_sfXCk r)
      (ww_sfXCq :: Data.Data.ConstrRep)
      (ww1_sfXCu :: Data.Data.DataType) ->
      case ww_sfXCq of {
        __DEFAULT ->
          case ww1_sfXCu of { Data.Data.DataType ww7_sefV0 ww8_sefV1 ->
          case Data.Data.$wlvl ww7_sefV0 of wild_00 { }
          };
        Data.Data.AlgConstr idx_ae1Ws ->
          case idx_ae1Ws of { GHC.Types.I# ds_dfX8P ->
          case ds_dfX8P of {
            __DEFAULT ->
              w2_sfXCl
                @ (g_sfXCc a_sfXCd)
                @ (Sum f_sfXCb g_sfXCc a_sfXCd)
                w1_sfXCj
                (w3_sfXCm
                   @ (g_sfXCc a_sfXCd -> Sum f_sfXCb g_sfXCc a_sfXCd)
                   (Data.Functor.Sum.InR @ k_sfXCa @ f_sfXCb @ g_sfXCc @ a_sfXCd));
            1# ->
              w2_sfXCl
                @ (f_sfXCb a_sfXCd)
                @ (Sum f_sfXCb g_sfXCc a_sfXCd)
                w_sfXCi
                (w3_sfXCm
                   @ (f_sfXCb a_sfXCd -> Sum f_sfXCb g_sfXCc a_sfXCd)
                   (Data.Functor.Sum.InL @ k_sfXCa @ f_sfXCb @ g_sfXCc @ a_sfXCd))
          }
          }
      }

-- RHS size: {terms: 24, types: 65, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgunfold [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall (c :: * -> *).
     (forall b r. Data b => c (b -> r) -> c r)
     -> (forall r. r -> c r) -> Data.Data.Constr -> c (Sum f g a)
[GblId,
 Arity=9,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><C(C(S)),1*C1(C1(U))><L,1*C1(U)><S(SLLLL),1*U(1*U,A,A,A,1*U(1*U,A))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_sfXCa)
                 (@ (f_sfXCb :: k_sfXCa -> *))
                 (@ (g_sfXCc :: k_sfXCa -> *))
                 (@ (a_sfXCd :: k_sfXCa))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (w4_sfXCi [Occ=Once] :: Data (f_sfXCb a_sfXCd))
                 (w5_sfXCj [Occ=Once] :: Data (g_sfXCc a_sfXCd))
                 (@ (c_sfXCk :: * -> *))
                 (w6_sfXCl [Occ=Once]
                    :: forall b r. Data b => c_sfXCk (b -> r) -> c_sfXCk r)
                 (w7_sfXCm [Occ=Once] :: forall r. r -> c_sfXCk r)
                 (w8_sfXCn [Occ=Once!] :: Data.Data.Constr) ->
                 case w8_sfXCn of
                 { Data.Data.Constr ww1_sfXCq [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] ww5_sfXCu [Occ=Once] ->
                 Data.Functor.Sum.$w$cgunfold
                   @ k_sfXCa
                   @ f_sfXCb
                   @ g_sfXCc
                   @ a_sfXCd
                   w4_sfXCi
                   w5_sfXCj
                   @ c_sfXCk
                   w6_sfXCl
                   w7_sfXCm
                   ww1_sfXCq
                   ww5_sfXCu
                 }}]
Data.Functor.Sum.$fDataSum_$cgunfold
  = \ (@ k_sfXCa)
      (@ (f_sfXCb :: k_sfXCa -> *))
      (@ (g_sfXCc :: k_sfXCa -> *))
      (@ (a_sfXCd :: k_sfXCa))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (w4_sfXCi :: Data (f_sfXCb a_sfXCd))
      (w5_sfXCj :: Data (g_sfXCc a_sfXCd))
      (@ (c_sfXCk :: * -> *))
      (w6_sfXCl :: forall b r. Data b => c_sfXCk (b -> r) -> c_sfXCk r)
      (w7_sfXCm :: forall r. r -> c_sfXCk r)
      (w8_sfXCn :: Data.Data.Constr) ->
      case w8_sfXCn of
      { Data.Data.Constr ww1_sfXCq ww2_sfXCr ww3_sfXCs ww4_sfXCt
                         ww5_sfXCu ->
      Data.Functor.Sum.$w$cgunfold
        @ k_sfXCa
        @ f_sfXCb
        @ g_sfXCc
        @ a_sfXCd
        w4_sfXCi
        w5_sfXCj
        @ c_sfXCk
        w6_sfXCl
        w7_sfXCm
        ww1_sfXCq
        ww5_sfXCu
      }

-- RHS size: {terms: 28, types: 103, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgfoldl
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall (c :: * -> *).
     (forall d b. Data d => c (d -> b) -> d -> c b)
     -> (forall g1. g1 -> c g1) -> Sum f g a -> c (Sum f g a)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_afWQ4)
                 (@ (f_afWQ5 :: k_afWQ4 -> *))
                 (@ (g_afWQ6 :: k_afWQ4 -> *))
                 (@ (a_afWQ7 :: k_afWQ4))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 ($dData_afWQc [Occ=Once] :: Data (f_afWQ5 a_afWQ7))
                 ($dData1_afWQd [Occ=Once] :: Data (g_afWQ6 a_afWQ7))
                 (@ (c_afWQl :: * -> *))
                 (k1_afWPr [Occ=Once*!]
                    :: forall d b. Data d => c_afWQl (d -> b) -> d -> c_afWQl b)
                 (z_afWPs [Occ=Once*!] :: forall g1. g1 -> c_afWQl g1)
                 (ds_dfX8M [Occ=Once!] :: Sum f_afWQ5 g_afWQ6 a_afWQ7) ->
                 case ds_dfX8M of {
                   InL a1_afWPt [Occ=Once] ->
                     k1_afWPr
                       @ (f_afWQ5 a_afWQ7)
                       @ (Sum f_afWQ5 g_afWQ6 a_afWQ7)
                       $dData_afWQc
                       (z_afWPs
                          @ (f_afWQ5 a_afWQ7 -> Sum f_afWQ5 g_afWQ6 a_afWQ7)
                          (Data.Functor.Sum.InL @ k_afWQ4 @ f_afWQ5 @ g_afWQ6 @ a_afWQ7))
                       a1_afWPt;
                   InR a1_afWPw [Occ=Once] ->
                     k1_afWPr
                       @ (g_afWQ6 a_afWQ7)
                       @ (Sum f_afWQ5 g_afWQ6 a_afWQ7)
                       $dData1_afWQd
                       (z_afWPs
                          @ (g_afWQ6 a_afWQ7 -> Sum f_afWQ5 g_afWQ6 a_afWQ7)
                          (Data.Functor.Sum.InR @ k_afWQ4 @ f_afWQ5 @ g_afWQ6 @ a_afWQ7))
                       a1_afWPw
                 }}]
Data.Functor.Sum.$fDataSum_$cgfoldl
  = \ (@ k_afWQ4)
      (@ (f_afWQ5 :: k_afWQ4 -> *))
      (@ (g_afWQ6 :: k_afWQ4 -> *))
      (@ (a_afWQ7 :: k_afWQ4))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      ($dData_afWQc :: Data (f_afWQ5 a_afWQ7))
      ($dData1_afWQd :: Data (g_afWQ6 a_afWQ7))
      (@ (c_afWQl :: * -> *))
      (k1_afWPr
         :: forall d b. Data d => c_afWQl (d -> b) -> d -> c_afWQl b)
      (z_afWPs :: forall g1. g1 -> c_afWQl g1)
      (ds_dfX8M :: Sum f_afWQ5 g_afWQ6 a_afWQ7) ->
      case ds_dfX8M of {
        InL a1_afWPt ->
          k1_afWPr
            @ (f_afWQ5 a_afWQ7)
            @ (Sum f_afWQ5 g_afWQ6 a_afWQ7)
            $dData_afWQc
            (z_afWPs
               @ (f_afWQ5 a_afWQ7 -> Sum f_afWQ5 g_afWQ6 a_afWQ7)
               (Data.Functor.Sum.InL @ k_afWQ4 @ f_afWQ5 @ g_afWQ6 @ a_afWQ7))
            a1_afWPt;
        InR a1_afWPw ->
          k1_afWPr
            @ (g_afWQ6 a_afWQ7)
            @ (Sum f_afWQ5 g_afWQ6 a_afWQ7)
            $dData1_afWQd
            (z_afWPs
               @ (g_afWQ6 a_afWQ7 -> Sum f_afWQ5 g_afWQ6 a_afWQ7)
               (Data.Functor.Sum.InR @ k_afWQ4 @ f_afWQ5 @ g_afWQ6 @ a_afWQ7))
            a1_afWPw
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum8 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$fDataSum8 = "Sum"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tSum1_rfXP5 :: [Char]
[GblId]
$tSum1_rfXP5
  = GHC.CString.unpackCString# Data.Functor.Sum.$fDataSum8

Rec {
-- RHS size: {terms: 25, types: 24, coercions: 0, joins: 0/0}
go61_rfXP6 :: [Data.Data.Constr] -> [Int] -> Data.Data.ConIndex
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []]
go61_rfXP6
  = \ (ds2_iaIB3 :: [Data.Data.Constr]) (_ys_iaIB4 :: [Int]) ->
      case ds2_iaIB3 of {
        [] -> GHC.List.badHead @ Int;
        : ipv_iaIB9 ipv1_iaIBa ->
          case _ys_iaIB4 of {
            [] -> GHC.List.badHead @ Int;
            : ipv2_iaIBg ipv3_iaIBh ->
              case ipv_iaIB9 of
              { Data.Data.Constr ds3_de7m3 ds4_de7m4 ds5_de7m5 ds6_de7m6
                                 ds7_de7m7 ->
              case GHC.Base.eqString ds4_de7m4 Data.Functor.Sum.$fRead1Sum7 of {
                False -> go61_rfXP6 ipv1_iaIBa ipv3_iaIBh;
                True -> ipv2_iaIBg
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 25, types: 24, coercions: 0, joins: 0/0}
go1_rfXP7 :: [Data.Data.Constr] -> [Int] -> Data.Data.ConIndex
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []]
go1_rfXP7
  = \ (ds2_iaIB3 :: [Data.Data.Constr]) (_ys_iaIB4 :: [Int]) ->
      case ds2_iaIB3 of {
        [] -> GHC.List.badHead @ Int;
        : ipv_iaIB9 ipv1_iaIBa ->
          case _ys_iaIB4 of {
            [] -> GHC.List.badHead @ Int;
            : ipv2_iaIBg ipv3_iaIBh ->
              case ipv_iaIB9 of
              { Data.Data.Constr ds3_de7m3 ds4_de7m4 ds5_de7m5 ds6_de7m6
                                 ds7_de7m7 ->
              case GHC.Base.eqString ds4_de7m4 Data.Functor.Sum.$fRead1Sum3 of {
                False -> go1_rfXP7 ipv1_iaIBa ipv3_iaIBh;
                True -> ipv2_iaIBg
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$cInL1_rfXP8 :: Data.Data.ConstrRep
[GblId, Str=m1, Unf=OtherCon []]
$cInL1_rfXP8 = Data.Data.AlgConstr $cInL2_rfXPe

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$cInR1_rfXP9 :: Data.Data.ConstrRep
[GblId, Str=m1, Unf=OtherCon []]
$cInR1_rfXP9 = Data.Data.AlgConstr $cInR2_rfXPd

-- RHS size: {terms: 6, types: 1, coercions: 0, joins: 0/0}
Data.Functor.Sum.$cInL [Occ=LoopBreaker] :: Data.Data.Constr
[GblId, Str=m, Unf=OtherCon []]
Data.Functor.Sum.$cInL
  = Data.Data.Constr
      $cInL1_rfXP8
      Data.Functor.Sum.$fRead1Sum7
      (GHC.Types.[] @ String)
      Data.Data.Prefix
      Data.Functor.Sum.$tSum

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$tSum2_rfXPa :: [Data.Data.Constr]
[GblId, Str=m2, Unf=OtherCon []]
$tSum2_rfXPa
  = GHC.Types.:
      @ Data.Data.Constr
      Data.Functor.Sum.$cInR
      (GHC.Types.[] @ Data.Data.Constr)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$tSum3_rfXPb :: [Data.Data.Constr]
[GblId, Str=m2, Unf=OtherCon []]
$tSum3_rfXPb
  = GHC.Types.:
      @ Data.Data.Constr Data.Functor.Sum.$cInL $tSum2_rfXPa

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tSum4_rfXPc :: Data.Data.DataRep
[GblId, Str=m1, Unf=OtherCon []]
$tSum4_rfXPc = Data.Data.AlgRep $tSum3_rfXPb

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tSum [Occ=LoopBreaker] :: Data.Data.DataType
[GblId, Str=m, Unf=OtherCon []]
Data.Functor.Sum.$tSum
  = Data.Data.DataType $tSum1_rfXP5 $tSum4_rfXPc

-- RHS size: {terms: 6, types: 1, coercions: 0, joins: 0/0}
Data.Functor.Sum.$cInR [Occ=LoopBreaker] :: Data.Data.Constr
[GblId, Str=m, Unf=OtherCon []]
Data.Functor.Sum.$cInR
  = Data.Data.Constr
      $cInR1_rfXP9
      Data.Functor.Sum.$fRead1Sum3
      (GHC.Types.[] @ String)
      Data.Data.Prefix
      Data.Functor.Sum.$tSum

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$cInR2_rfXPd :: Data.Data.ConIndex
[GblId]
$cInR2_rfXPd = go1_rfXP7 $tSum3_rfXPb Data.Data.mkConstr1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$cInL2_rfXPe :: Data.Data.ConIndex
[GblId]
$cInL2_rfXPe = go61_rfXP6 $tSum3_rfXPb Data.Data.mkConstr1
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$trModule3
  = GHC.Types.TrNameS Data.Functor.Sum.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Data.Functor.Sum.$trModule2 = "Data.Functor.Sum"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$trModule1
  = GHC.Types.TrNameS Data.Functor.Sum.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Functor.Sum.$trModule
  = GHC.Types.Module
      Data.Functor.Sum.$trModule3 Data.Functor.Sum.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_rfXPf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep_rfXPf = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep1_rfXPg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep1_rfXPg = GHC.Types.KindRepFun $krep_rfXPf GHC.Types.krep$*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_rfXPh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep2_rfXPh = GHC.Types.KindRepFun $krep1_rfXPg $krep1_rfXPg

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum6 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Functor.Sum.$fDataSum6
  = GHC.Types.KindRepFun $krep1_rfXPg $krep2_rfXPh

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3_rfXPi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_rfXPi = GHC.Types.KindRepVar 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep4_rfXPj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_rfXPj = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep5_rfXPk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_rfXPk = GHC.Types.KindRepVar 3#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_rfXPl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []]
$krep6_rfXPl = GHC.Types.KindRepApp $krep4_rfXPj $krep5_rfXPk

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_rfXPm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []]
$krep7_rfXPm = GHC.Types.KindRepApp $krep3_rfXPi $krep5_rfXPk

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum7 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$fDataSum7
  = GHC.Types.TrNameS Data.Functor.Sum.$fDataSum8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tcSum :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Functor.Sum.$tcSum
  = GHC.Types.TyCon
      6345190594862254730##
      1236278515871186010##
      Data.Functor.Sum.$trModule
      Data.Functor.Sum.$fDataSum7
      1#
      Data.Functor.Sum.$fDataSum6

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_rfXPn :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_rfXPn
  = GHC.Types.:
      @ GHC.Types.KindRep $krep5_rfXPk (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep9_rfXPo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_rfXPo
  = GHC.Types.: @ GHC.Types.KindRep $krep3_rfXPi $krep8_rfXPn

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_rfXPp :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep10_rfXPp
  = GHC.Types.: @ GHC.Types.KindRep $krep4_rfXPj $krep9_rfXPo

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_rfXPq :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep11_rfXPq
  = GHC.Types.: @ GHC.Types.KindRep $krep_rfXPf $krep10_rfXPp

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rfXPr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep12_rfXPr
  = GHC.Types.KindRepTyConApp Data.Functor.Sum.$tcSum $krep11_rfXPq

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InL1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Functor.Sum.$tc'InL1
  = GHC.Types.KindRepFun $krep6_rfXPl $krep12_rfXPr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InL3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$tc'InL3 = "'InL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InL2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$tc'InL2
  = GHC.Types.TrNameS Data.Functor.Sum.$tc'InL3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InL :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Functor.Sum.$tc'InL
  = GHC.Types.TyCon
      7951421854502432011##
      12303552236073891860##
      Data.Functor.Sum.$trModule
      Data.Functor.Sum.$tc'InL2
      4#
      Data.Functor.Sum.$tc'InL1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InR1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Functor.Sum.$tc'InR1
  = GHC.Types.KindRepFun $krep7_rfXPm $krep12_rfXPr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InR3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Sum.$tc'InR3 = "'InR"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InR2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Sum.$tc'InR2
  = GHC.Types.TrNameS Data.Functor.Sum.$tc'InR3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Sum.$tc'InR :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Functor.Sum.$tc'InR
  = GHC.Types.TyCon
      12078304815884238110##
      12377490770432979855##
      Data.Functor.Sum.$trModule
      Data.Functor.Sum.$tc'InR2
      4#
      Data.Functor.Sum.$tc'InR1

-- RHS size: {terms: 33, types: 123, coercions: 17, joins: 0/0}
Data.Functor.Sum.$w$cp1Data [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k) =>
     Data.Typeable.Internal.TypeRep (Sum f g a)
[GblId,
 Arity=4,
 Str=<S,U><S,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 210 0}]
Data.Functor.Sum.$w$cp1Data
  = \ (@ k_sfXCB)
      (@ (f_sfXCC :: k_sfXCB -> *))
      (@ (g_sfXCD :: k_sfXCB -> *))
      (@ (a_sfXCE :: k_sfXCB))
      (w_sfXCF :: Data.Typeable.Internal.Typeable a_sfXCE)
      (w1_sfXCG :: Data.Typeable.Internal.Typeable f_sfXCC)
      (w2_sfXCH :: Data.Typeable.Internal.Typeable g_sfXCD)
      (w3_sfXCI :: Data.Typeable.Internal.Typeable k_sfXCB) ->
      case Data.Typeable.Internal.$wmkTrCon
             @ ((k_sfXCB -> *) -> (k_sfXCB -> *) -> k_sfXCB -> *)
             @ Sum
             6345190594862254730##
             1236278515871186010##
             Data.Functor.Sum.$trModule
             Data.Functor.Sum.$fDataSum7
             1#
             Data.Functor.Sum.$fDataSum6
             (GHC.Types.:
                @ Data.Typeable.Internal.SomeTypeRep
                (Data.Typeable.Internal.SomeTypeRep
                   @ *
                   @ k_sfXCB
                   (w3_sfXCI
                    `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <k_sfXCB>_N
                            :: (Data.Typeable.Internal.Typeable k_sfXCB :: Constraint)
                               ~R# (Data.Typeable.Internal.TypeRep k_sfXCB :: *))))
                (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep))
      of
      { (# ww8_idPJm, ww9_idPJn, ww10_idPJo, ww11_idPJp, ww12_idPJq #) ->
      Data.Typeable.Internal.mkTrApp
        @ k_sfXCB
        @ *
        @ (Sum f_sfXCC g_sfXCD)
        @ a_sfXCE
        (Data.Typeable.Internal.mkTrApp
           @ (k_sfXCB -> *)
           @ (k_sfXCB -> *)
           @ (Sum f_sfXCC)
           @ g_sfXCD
           (Data.Typeable.Internal.mkTrApp
              @ (k_sfXCB -> *)
              @ ((k_sfXCB -> *) -> k_sfXCB -> *)
              @ Sum
              @ f_sfXCC
              (Data.Typeable.Internal.TrTyCon
                 @ ((k_sfXCB -> *) -> (k_sfXCB -> *) -> k_sfXCB -> *)
                 @ Sum
                 ww8_idPJm
                 ww9_idPJn
                 ww10_idPJo
                 ww11_idPJp
                 ww12_idPJq)
              (w1_sfXCG
               `cast` (Data.Typeable.Internal.N:Typeable[0] <k_sfXCB
                                                             -> *>_N <f_sfXCC>_N
                       :: (Data.Typeable.Internal.Typeable f_sfXCC :: Constraint)
                          ~R# (Data.Typeable.Internal.TypeRep f_sfXCC :: *))))
           (w2_sfXCH
            `cast` (Data.Typeable.Internal.N:Typeable[0] <k_sfXCB
                                                          -> *>_N <g_sfXCD>_N
                    :: (Data.Typeable.Internal.Typeable g_sfXCD :: Constraint)
                       ~R# (Data.Typeable.Internal.TypeRep g_sfXCD :: *))))
        (w_sfXCF
         `cast` (Data.Typeable.Internal.N:Typeable[0] <k_sfXCB>_N <a_sfXCE>_N
                 :: (Data.Typeable.Internal.Typeable a_sfXCE :: Constraint)
                    ~R# (Data.Typeable.Internal.TypeRep a_sfXCE :: *)))
      }

-- RHS size: {terms: 15, types: 36, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum5 [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     Data.Typeable.Internal.TypeRep (Sum f g a)
[GblId,
 Arity=6,
 Str=<S,U><S,U><S,U><L,U><L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sfXCB)
                 (@ (f_sfXCC :: k_sfXCB -> *))
                 (@ (g_sfXCD :: k_sfXCB -> *))
                 (@ (a_sfXCE :: k_sfXCB))
                 (w_sfXCF [Occ=Once] :: Data.Typeable.Internal.Typeable a_sfXCE)
                 (w1_sfXCG [Occ=Once] :: Data.Typeable.Internal.Typeable f_sfXCC)
                 (w2_sfXCH [Occ=Once] :: Data.Typeable.Internal.Typeable g_sfXCD)
                 (w3_sfXCI [Occ=Once] :: Data.Typeable.Internal.Typeable k_sfXCB)
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Functor.Sum.$w$cp1Data
                   @ k_sfXCB
                   @ f_sfXCC
                   @ g_sfXCD
                   @ a_sfXCE
                   w_sfXCF
                   w1_sfXCG
                   w2_sfXCH
                   w3_sfXCI}]
Data.Functor.Sum.$fDataSum5
  = \ (@ k_sfXCB)
      (@ (f_sfXCC :: k_sfXCB -> *))
      (@ (g_sfXCD :: k_sfXCB -> *))
      (@ (a_sfXCE :: k_sfXCB))
      (w_sfXCF :: Data.Typeable.Internal.Typeable a_sfXCE)
      (w1_sfXCG :: Data.Typeable.Internal.Typeable f_sfXCC)
      (w2_sfXCH :: Data.Typeable.Internal.Typeable g_sfXCD)
      (w3_sfXCI :: Data.Typeable.Internal.Typeable k_sfXCB)
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Functor.Sum.$w$cp1Data
        @ k_sfXCB
        @ f_sfXCC
        @ g_sfXCD
        @ a_sfXCE
        w_sfXCF
        w1_sfXCG
        w2_sfXCH
        w3_sfXCI

-- RHS size: {terms: 7, types: 21, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum2
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (f a -> Sum f g a, Bool)
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Functor.Sum.$fDataSum2
  = \ (@ k_XfWUy)
      (@ (f_XfWUA :: k_XfWUy -> *))
      (@ (g_XfWUC :: k_XfWUy -> *))
      (@ (a_XfWUE :: k_XfWUy)) ->
      (Data.Functor.Sum.InL @ k_XfWUy @ f_XfWUA @ g_XfWUC @ a_XfWUE,
       GHC.Types.False)

-- RHS size: {terms: 7, types: 21, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum1
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (g a -> Sum f g a, Bool)
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Functor.Sum.$fDataSum1
  = \ (@ k_XfWUy)
      (@ (f_XfWUA :: k_XfWUy -> *))
      (@ (g_XfWUC :: k_XfWUy -> *))
      (@ (a_XfWUE :: k_XfWUy)) ->
      (Data.Functor.Sum.InR @ k_XfWUy @ f_XfWUA @ g_XfWUC @ a_XfWUE,
       GHC.Types.False)

-- RHS size: {terms: 81, types: 209, coercions: 24, joins: 0/4}
Data.Functor.Sum.$w$cgmapMp [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data (f a), Data (g a)) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d) -> Sum f g a -> m (Sum f g a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 90 60 100] 680 0}]
Data.Functor.Sum.$w$cgmapMp
  = \ (@ k_sfXCR)
      (@ (f_sfXCS :: k_sfXCR -> *))
      (@ (g_sfXCT :: k_sfXCR -> *))
      (@ (a_sfXCU :: k_sfXCR))
      (w_sfXCZ :: Data (f_sfXCS a_sfXCU))
      (w1_sfXD0 :: Data (g_sfXCT a_sfXCU))
      (@ (m_sfXD1 :: * -> *))
      (w2_sfXD2 :: GHC.Base.MonadPlus m_sfXD1)
      (w3_sfXD3 :: forall d. Data d => d -> m_sfXD1 d)
      (w4_sfXD4 :: Sum f_sfXCS g_sfXCT a_sfXCU) ->
      let {
        lvl8_sfXhF :: m_sfXD1 (Sum f_sfXCS g_sfXCT a_sfXCU)
        [LclId]
        lvl8_sfXhF
          = GHC.Base.mzero
              @ m_sfXD1 w2_sfXD2 @ (Sum f_sfXCS g_sfXCT a_sfXCU) } in
      let {
        $dMonad_sfXgf [Dmd=<S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)>]
          :: Monad m_sfXD1
        [LclId]
        $dMonad_sfXgf = GHC.Base.$p2MonadPlus @ m_sfXD1 w2_sfXD2 } in
      >>=
        @ m_sfXD1
        $dMonad_sfXgf
        @ (Sum f_sfXCS g_sfXCT a_sfXCU, Bool)
        @ (Sum f_sfXCS g_sfXCT a_sfXCU)
        (let {
           k1_sfXge [Dmd=<C(C(C(S))),1*C1(C1(C1(U)))>]
             :: forall d b.
                Data d =>
                Data.Data.Mp m_sfXD1 (d -> b) -> d -> m_sfXD1 (b, Bool)
           [LclId, Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []]
           k1_sfXge
             = \ (@ d_ae2Ws)
                 (@ b_ae2Wt)
                 ($dData1_ae2Wv [OS=OneShot] :: Data d_ae2Ws)
                 (ds_de7oC [OS=OneShot]
                    :: Data.Data.Mp m_sfXD1 (d_ae2Ws -> b_ae2Wt))
                 (y_ae1Tz [OS=OneShot] :: d_ae2Ws) ->
                 let {
                   lvl9_sfXhC :: m_sfXD1 d_ae2Ws
                   [LclId]
                   lvl9_sfXhC = w3_sfXD3 @ d_ae2Ws $dData1_ae2Wv y_ae1Tz } in
                 >>=
                   @ m_sfXD1
                   $dMonad_sfXgf
                   @ (d_ae2Ws -> b_ae2Wt, Bool)
                   @ (b_ae2Wt, Bool)
                   (ds_de7oC
                    `cast` (Data.Data.N:Mp[0] <m_sfXD1>_R <d_ae2Ws -> b_ae2Wt>_N
                            :: (Data.Data.Mp m_sfXD1 (d_ae2Ws -> b_ae2Wt) :: *)
                               ~R# (m_sfXD1 (d_ae2Ws -> b_ae2Wt, Bool) :: *)))
                   (\ (ds1_de7oD :: (d_ae2Ws -> b_ae2Wt, Bool)) ->
                      case ds1_de7oD of { (h_ae1TA, b1_ae1TB) ->
                      GHC.Base.mplus
                        @ m_sfXD1
                        w2_sfXD2
                        @ (b_ae2Wt, Bool)
                        (>>=
                           @ m_sfXD1
                           $dMonad_sfXgf
                           @ d_ae2Ws
                           @ (b_ae2Wt, Bool)
                           lvl9_sfXhC
                           (\ (y'_ae1TC :: d_ae2Ws) ->
                              return
                                @ m_sfXD1
                                $dMonad_sfXgf
                                @ (b_ae2Wt, Bool)
                                (h_ae1TA y'_ae1TC, GHC.Types.True)))
                        (return
                           @ m_sfXD1
                           $dMonad_sfXgf
                           @ (b_ae2Wt, Bool)
                           (h_ae1TA y_ae1Tz, b1_ae1TB))
                      }) } in
         case w4_sfXD4 of {
           InL a1_afWPt ->
             k1_sfXge
               @ (f_sfXCS a_sfXCU)
               @ (Sum f_sfXCS g_sfXCT a_sfXCU)
               w_sfXCZ
               ((return
                   @ m_sfXD1
                   $dMonad_sfXgf
                   @ (f_sfXCS a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU, Bool)
                   (Data.Functor.Sum.$fDataSum2
                      @ k_sfXCR @ f_sfXCS @ g_sfXCT @ a_sfXCU))
                `cast` (Sym (Data.Data.N:Mp[0]
                                 <m_sfXD1>_R <f_sfXCS a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU>_N)
                        :: (m_sfXD1 (f_sfXCS a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU,
                                     Bool) :: *)
                           ~R# (Data.Data.Mp
                                  m_sfXD1 (f_sfXCS a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU) :: *)))
               a1_afWPt;
           InR a1_afWPw ->
             k1_sfXge
               @ (g_sfXCT a_sfXCU)
               @ (Sum f_sfXCS g_sfXCT a_sfXCU)
               w1_sfXD0
               ((return
                   @ m_sfXD1
                   $dMonad_sfXgf
                   @ (g_sfXCT a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU, Bool)
                   (Data.Functor.Sum.$fDataSum1
                      @ k_sfXCR @ f_sfXCS @ g_sfXCT @ a_sfXCU))
                `cast` (Sym (Data.Data.N:Mp[0]
                                 <m_sfXD1>_R <g_sfXCT a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU>_N)
                        :: (m_sfXD1 (g_sfXCT a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU,
                                     Bool) :: *)
                           ~R# (Data.Data.Mp
                                  m_sfXD1 (g_sfXCT a_sfXCU -> Sum f_sfXCS g_sfXCT a_sfXCU) :: *)))
               a1_afWPw
         })
        (\ (ds_de7oa :: (Sum f_sfXCS g_sfXCT a_sfXCU, Bool)) ->
           case ds_de7oa of { (x'_ae1TD, b_ae1TE) ->
           case b_ae1TE of {
             False -> lvl8_sfXhF;
             True ->
               return
                 @ m_sfXD1 $dMonad_sfXgf @ (Sum f_sfXCS g_sfXCT a_sfXCU) x'_ae1TD
           }
           })

-- RHS size: {terms: 20, types: 55, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgmapMp [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d) -> Sum f g a -> m (Sum f g a)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><S(LS(LC(C(S))LLL)LL),U(A,U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sfXCR)
                 (@ (f_sfXCS :: k_sfXCR -> *))
                 (@ (g_sfXCT :: k_sfXCR -> *))
                 (@ (a_sfXCU :: k_sfXCR))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (w4_sfXCZ [Occ=Once] :: Data (f_sfXCS a_sfXCU))
                 (w5_sfXD0 [Occ=Once] :: Data (g_sfXCT a_sfXCU))
                 (@ (m_sfXD1 :: * -> *))
                 (w6_sfXD2 [Occ=Once] :: GHC.Base.MonadPlus m_sfXD1)
                 (w7_sfXD3 [Occ=Once] :: forall d. Data d => d -> m_sfXD1 d)
                 (w8_sfXD4 [Occ=Once] :: Sum f_sfXCS g_sfXCT a_sfXCU) ->
                 Data.Functor.Sum.$w$cgmapMp
                   @ k_sfXCR
                   @ f_sfXCS
                   @ g_sfXCT
                   @ a_sfXCU
                   w4_sfXCZ
                   w5_sfXD0
                   @ m_sfXD1
                   w6_sfXD2
                   w7_sfXD3
                   w8_sfXD4}]
Data.Functor.Sum.$fDataSum_$cgmapMp
  = \ (@ k_sfXCR)
      (@ (f_sfXCS :: k_sfXCR -> *))
      (@ (g_sfXCT :: k_sfXCR -> *))
      (@ (a_sfXCU :: k_sfXCR))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (w4_sfXCZ :: Data (f_sfXCS a_sfXCU))
      (w5_sfXD0 :: Data (g_sfXCT a_sfXCU))
      (@ (m_sfXD1 :: * -> *))
      (w6_sfXD2 :: GHC.Base.MonadPlus m_sfXD1)
      (w7_sfXD3 :: forall d. Data d => d -> m_sfXD1 d)
      (w8_sfXD4 :: Sum f_sfXCS g_sfXCT a_sfXCU) ->
      Data.Functor.Sum.$w$cgmapMp
        @ k_sfXCR
        @ f_sfXCS
        @ g_sfXCT
        @ a_sfXCU
        w4_sfXCZ
        w5_sfXD0
        @ m_sfXD1
        w6_sfXD2
        w7_sfXD3
        w8_sfXD4

-- RHS size: {terms: 48, types: 117, coercions: 0, joins: 0/2}
Data.Functor.Sum.$w$cgmapM [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data (f a), Data (g a)) =>
     forall (m :: * -> *).
     Monad m =>
     (forall d. Data d => d -> m d) -> Sum f g a -> m (Sum f g a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 150 60 100] 390 0}]
Data.Functor.Sum.$w$cgmapM
  = \ (@ k_sfXDb)
      (@ (f_sfXDc :: k_sfXDb -> *))
      (@ (g_sfXDd :: k_sfXDb -> *))
      (@ (a_sfXDe :: k_sfXDb))
      (w_sfXDj :: Data (f_sfXDc a_sfXDe))
      (w1_sfXDk :: Data (g_sfXDd a_sfXDe))
      (@ (m_sfXDl :: * -> *))
      (w2_sfXDm :: Monad m_sfXDl)
      (w3_sfXDn :: forall d. Data d => d -> m_sfXDl d)
      (w4_sfXDo :: Sum f_sfXDc g_sfXDd a_sfXDe) ->
      let {
        k1_sfXgb [Dmd=<C(C(C(S))),1*C1(C1(C1(U)))>]
          :: forall d b. Data d => m_sfXDl (d -> b) -> d -> m_sfXDl b
        [LclId, Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []]
        k1_sfXgb
          = \ (@ d_ae2Vh)
              (@ b_ae2Vi)
              ($dData1_ae2Vk [OS=OneShot] :: Data d_ae2Vh)
              (c_ae1Tm [OS=OneShot] :: m_sfXDl (d_ae2Vh -> b_ae2Vi))
              (x_ae1Tn [OS=OneShot] :: d_ae2Vh) ->
              let {
                lvl8_sfXhG :: m_sfXDl d_ae2Vh
                [LclId]
                lvl8_sfXhG = w3_sfXDn @ d_ae2Vh $dData1_ae2Vk x_ae1Tn } in
              >>=
                @ m_sfXDl
                w2_sfXDm
                @ (d_ae2Vh -> b_ae2Vi)
                @ b_ae2Vi
                c_ae1Tm
                (\ (c'_ae1To :: d_ae2Vh -> b_ae2Vi) ->
                   >>=
                     @ m_sfXDl
                     w2_sfXDm
                     @ d_ae2Vh
                     @ b_ae2Vi
                     lvl8_sfXhG
                     (\ (x'_ae1Tp :: d_ae2Vh) ->
                        return @ m_sfXDl w2_sfXDm @ b_ae2Vi (c'_ae1To x'_ae1Tp))) } in
      case w4_sfXDo of {
        InL a1_afWPt ->
          k1_sfXgb
            @ (f_sfXDc a_sfXDe)
            @ (Sum f_sfXDc g_sfXDd a_sfXDe)
            w_sfXDj
            (return
               @ m_sfXDl
               w2_sfXDm
               @ (f_sfXDc a_sfXDe -> Sum f_sfXDc g_sfXDd a_sfXDe)
               (Data.Functor.Sum.InL @ k_sfXDb @ f_sfXDc @ g_sfXDd @ a_sfXDe))
            a1_afWPt;
        InR a1_afWPw ->
          k1_sfXgb
            @ (g_sfXDd a_sfXDe)
            @ (Sum f_sfXDc g_sfXDd a_sfXDe)
            w1_sfXDk
            (return
               @ m_sfXDl
               w2_sfXDm
               @ (g_sfXDd a_sfXDe -> Sum f_sfXDc g_sfXDd a_sfXDe)
               (Data.Functor.Sum.InR @ k_sfXDb @ f_sfXDc @ g_sfXDd @ a_sfXDe))
            a1_afWPw
      }

-- RHS size: {terms: 20, types: 55, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgmapM [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall (m :: * -> *).
     Monad m =>
     (forall d. Data d => d -> m d) -> Sum f g a -> m (Sum f g a)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sfXDb)
                 (@ (f_sfXDc :: k_sfXDb -> *))
                 (@ (g_sfXDd :: k_sfXDb -> *))
                 (@ (a_sfXDe :: k_sfXDb))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (w4_sfXDj [Occ=Once] :: Data (f_sfXDc a_sfXDe))
                 (w5_sfXDk [Occ=Once] :: Data (g_sfXDd a_sfXDe))
                 (@ (m_sfXDl :: * -> *))
                 (w6_sfXDm [Occ=Once] :: Monad m_sfXDl)
                 (w7_sfXDn [Occ=Once] :: forall d. Data d => d -> m_sfXDl d)
                 (w8_sfXDo [Occ=Once] :: Sum f_sfXDc g_sfXDd a_sfXDe) ->
                 Data.Functor.Sum.$w$cgmapM
                   @ k_sfXDb
                   @ f_sfXDc
                   @ g_sfXDd
                   @ a_sfXDe
                   w4_sfXDj
                   w5_sfXDk
                   @ m_sfXDl
                   w6_sfXDm
                   w7_sfXDn
                   w8_sfXDo}]
Data.Functor.Sum.$fDataSum_$cgmapM
  = \ (@ k_sfXDb)
      (@ (f_sfXDc :: k_sfXDb -> *))
      (@ (g_sfXDd :: k_sfXDb -> *))
      (@ (a_sfXDe :: k_sfXDb))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (w4_sfXDj :: Data (f_sfXDc a_sfXDe))
      (w5_sfXDk :: Data (g_sfXDd a_sfXDe))
      (@ (m_sfXDl :: * -> *))
      (w6_sfXDm :: Monad m_sfXDl)
      (w7_sfXDn :: forall d. Data d => d -> m_sfXDl d)
      (w8_sfXDo :: Sum f_sfXDc g_sfXDd a_sfXDe) ->
      Data.Functor.Sum.$w$cgmapM
        @ k_sfXDb
        @ f_sfXDc
        @ g_sfXDd
        @ a_sfXDe
        w4_sfXDj
        w5_sfXDk
        @ m_sfXDl
        w6_sfXDm
        w7_sfXDn
        w8_sfXDo

-- RHS size: {terms: 40, types: 67, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgmapQi
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall u. Int -> (forall d. Data d => d -> u) -> Sum f g a -> u
[GblId,
 Arity=9,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_XfWUw)
                 (@ (f_XfWUy :: k_XfWUw -> *))
                 (@ (g_XfWUA :: k_XfWUw -> *))
                 (@ (a_XfWUC :: k_XfWUw))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 ($dData_XfWUM [Occ=Once] :: Data (f_XfWUy a_XfWUC))
                 ($dData1_XfWUO [Occ=Once] :: Data (g_XfWUA a_XfWUC))
                 (@ u_afWSQ)
                 (ds_dfX96 [Occ=Once*!] :: Int)
                 (ds1_dfX97 [Occ=Once*!] :: forall d. Data d => d -> u_afWSQ)
                 (x_ae1T7 [Occ=Once!] :: Sum f_XfWUy g_XfWUA a_XfWUC) ->
                 case x_ae1T7 of {
                   InL a1_afWPt [Occ=Once] ->
                     case ds_dfX96 of { GHC.Types.I# x1_a22G [Occ=Once!] ->
                     case x1_a22G of {
                       __DEFAULT -> Data.Maybe.fromJust1 @ u_afWSQ;
                       0# -> ds1_dfX97 @ (f_XfWUy a_XfWUC) $dData_XfWUM a1_afWPt
                     }
                     };
                   InR a1_afWPw [Occ=Once] ->
                     case ds_dfX96 of { GHC.Types.I# x1_a22G [Occ=Once!] ->
                     case x1_a22G of {
                       __DEFAULT -> Data.Maybe.fromJust1 @ u_afWSQ;
                       0# -> ds1_dfX97 @ (g_XfWUA a_XfWUC) $dData1_XfWUO a1_afWPw
                     }
                     }
                 }}]
Data.Functor.Sum.$fDataSum_$cgmapQi
  = \ (@ k_XfWUw)
      (@ (f_XfWUy :: k_XfWUw -> *))
      (@ (g_XfWUA :: k_XfWUw -> *))
      (@ (a_XfWUC :: k_XfWUw))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      ($dData_XfWUM :: Data (f_XfWUy a_XfWUC))
      ($dData1_XfWUO :: Data (g_XfWUA a_XfWUC))
      (@ u_afWSQ)
      (ds_dfX96 :: Int)
      (ds1_dfX97 :: forall d. Data d => d -> u_afWSQ)
      (x_ae1T7 :: Sum f_XfWUy g_XfWUA a_XfWUC) ->
      case x_ae1T7 of {
        InL a1_afWPt ->
          case ds_dfX96 of { GHC.Types.I# x1_a22G ->
          case x1_a22G of {
            __DEFAULT -> Data.Maybe.fromJust1 @ u_afWSQ;
            0# -> ds1_dfX97 @ (f_XfWUy a_XfWUC) $dData_XfWUM a1_afWPt
          }
          };
        InR a1_afWPw ->
          case ds_dfX96 of { GHC.Types.I# x1_a22G ->
          case x1_a22G of {
            __DEFAULT -> Data.Maybe.fromJust1 @ u_afWSQ;
            0# -> ds1_dfX97 @ (g_XfWUA a_XfWUC) $dData1_XfWUO a1_afWPw
          }
          }
      }

-- RHS size: {terms: 30, types: 64, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgmapQr
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall r r'.
     (r' -> r -> r)
     -> r -> (forall d. Data d => d -> r') -> Sum f g a -> r
[GblId,
 Arity=10,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=10,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_XfWUu)
                 (@ (f_XfWUw :: k_XfWUu -> *))
                 (@ (g_XfWUy :: k_XfWUu -> *))
                 (@ (a_XfWUA :: k_XfWUu))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 ($dData_XfWUK [Occ=Once] :: Data (f_XfWUw a_XfWUA))
                 ($dData1_XfWUM [Occ=Once] :: Data (g_XfWUy a_XfWUA))
                 (@ r_afWSl)
                 (@ r'_afWSm)
                 (ds_dfX92 [Occ=Once*!] :: r'_afWSm -> r_afWSl -> r_afWSl)
                 (ds1_dfX93 [Occ=Once*] :: r_afWSl)
                 (ds2_dfX94 [Occ=Once*!] :: forall d. Data d => d -> r'_afWSm)
                 (x0_ae1SX [Occ=Once!] :: Sum f_XfWUw g_XfWUy a_XfWUA) ->
                 case x0_ae1SX of {
                   InL a1_afWPt [Occ=Once] ->
                     ds_dfX92
                       (ds2_dfX94 @ (f_XfWUw a_XfWUA) $dData_XfWUK a1_afWPt) ds1_dfX93;
                   InR a1_afWPw [Occ=Once] ->
                     ds_dfX92
                       (ds2_dfX94 @ (g_XfWUy a_XfWUA) $dData1_XfWUM a1_afWPw) ds1_dfX93
                 }}]
Data.Functor.Sum.$fDataSum_$cgmapQr
  = \ (@ k_XfWUu)
      (@ (f_XfWUw :: k_XfWUu -> *))
      (@ (g_XfWUy :: k_XfWUu -> *))
      (@ (a_XfWUA :: k_XfWUu))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      ($dData_XfWUK :: Data (f_XfWUw a_XfWUA))
      ($dData1_XfWUM :: Data (g_XfWUy a_XfWUA))
      (@ r_afWSl)
      (@ r'_afWSm)
      (ds_dfX92 :: r'_afWSm -> r_afWSl -> r_afWSl)
      (ds1_dfX93 :: r_afWSl)
      (ds2_dfX94 :: forall d. Data d => d -> r'_afWSm)
      (x0_ae1SX :: Sum f_XfWUw g_XfWUy a_XfWUA) ->
      case x0_ae1SX of {
        InL a1_afWPt ->
          ds_dfX92
            (ds2_dfX94 @ (f_XfWUw a_XfWUA) $dData_XfWUK a1_afWPt) ds1_dfX93;
        InR a1_afWPw ->
          ds_dfX92
            (ds2_dfX94 @ (g_XfWUy a_XfWUA) $dData1_XfWUM a1_afWPw) ds1_dfX93
      }

-- RHS size: {terms: 27, types: 62, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgmapQ
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall u. (forall d. Data d => d -> u) -> Sum f g a -> [u]
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><L,1*C1(C1(U))><S,1*U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=8,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_XfWUv)
                 (@ (f_XfWUx :: k_XfWUv -> *))
                 (@ (g_XfWUz :: k_XfWUv -> *))
                 (@ (a_XfWUB :: k_XfWUv))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 ($dData_XfWUL [Occ=Once] :: Data (f_XfWUx a_XfWUB))
                 ($dData1_XfWUN [Occ=Once] :: Data (g_XfWUz a_XfWUB))
                 (@ u_afWSC)
                 (ds_dfX95 [Occ=Once*!] :: forall d. Data d => d -> u_afWSC)
                 (x0_ae1SX [Occ=Once!] :: Sum f_XfWUx g_XfWUz a_XfWUB) ->
                 case x0_ae1SX of {
                   InL a1_afWPt [Occ=Once] ->
                     GHC.Types.:
                       @ u_afWSC
                       (ds_dfX95 @ (f_XfWUx a_XfWUB) $dData_XfWUL a1_afWPt)
                       (GHC.Types.[] @ u_afWSC);
                   InR a1_afWPw [Occ=Once] ->
                     GHC.Types.:
                       @ u_afWSC
                       (ds_dfX95 @ (g_XfWUz a_XfWUB) $dData1_XfWUN a1_afWPw)
                       (GHC.Types.[] @ u_afWSC)
                 }}]
Data.Functor.Sum.$fDataSum_$cgmapQ
  = \ (@ k_XfWUv)
      (@ (f_XfWUx :: k_XfWUv -> *))
      (@ (g_XfWUz :: k_XfWUv -> *))
      (@ (a_XfWUB :: k_XfWUv))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      ($dData_XfWUL :: Data (f_XfWUx a_XfWUB))
      ($dData1_XfWUN :: Data (g_XfWUz a_XfWUB))
      (@ u_afWSC)
      (ds_dfX95 :: forall d. Data d => d -> u_afWSC)
      (x0_ae1SX :: Sum f_XfWUx g_XfWUz a_XfWUB) ->
      case x0_ae1SX of {
        InL a1_afWPt ->
          GHC.Types.:
            @ u_afWSC
            (ds_dfX95 @ (f_XfWUx a_XfWUB) $dData_XfWUL a1_afWPt)
            (GHC.Types.[] @ u_afWSC);
        InR a1_afWPw ->
          GHC.Types.:
            @ u_afWSC
            (ds_dfX95 @ (g_XfWUz a_XfWUB) $dData1_XfWUN a1_afWPw)
            (GHC.Types.[] @ u_afWSC)
      }

-- RHS size: {terms: 30, types: 64, coercions: 20, joins: 0/0}
Data.Functor.Sum.$fDataSum3
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall r r'.
     (r -> r' -> r)
     -> r
     -> (forall d. Data d => d -> r')
     -> Sum f g a
     -> Data.Functor.Const.Const r (Sum f g a)
[GblId,
 Arity=10,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=10,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_XfWUt)
                 (@ (f_XfWUv :: k_XfWUt -> *))
                 (@ (g_XfWUx :: k_XfWUt -> *))
                 (@ (a_XfWUz :: k_XfWUt))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 ($dData_XfWUJ [Occ=Once] :: Data (f_XfWUv a_XfWUz))
                 ($dData1_XfWUL [Occ=Once] :: Data (g_XfWUx a_XfWUz))
                 (@ r_afWS4)
                 (@ r'_afWS5)
                 (ds_dfX8Z [Occ=Once*!] :: r_afWS4 -> r'_afWS5 -> r_afWS4)
                 (ds1_dfX90 [Occ=Once*] :: r_afWS4)
                 (ds2_dfX91 [Occ=Once*!] :: forall d. Data d => d -> r'_afWS5)
                 (eta_B1 [Occ=Once!] :: Sum f_XfWUv g_XfWUx a_XfWUz) ->
                 case eta_B1 of {
                   InL a1_afWPt [Occ=Once] ->
                     (ds_dfX8Z
                        ds1_dfX90 (ds2_dfX91 @ (f_XfWUv a_XfWUz) $dData_XfWUJ a1_afWPt))
                     `cast` (Sym (Data.Functor.Const.N:Const[0]
                                      <*>_N <r_afWS4>_R <Sum f_XfWUv g_XfWUx a_XfWUz>_P)
                             :: (r_afWS4 :: *)
                                ~R# (Data.Functor.Const.Const
                                       r_afWS4 (Sum f_XfWUv g_XfWUx a_XfWUz) :: *));
                   InR a1_afWPw [Occ=Once] ->
                     (ds_dfX8Z
                        ds1_dfX90 (ds2_dfX91 @ (g_XfWUx a_XfWUz) $dData1_XfWUL a1_afWPw))
                     `cast` (Sym (Data.Functor.Const.N:Const[0]
                                      <*>_N <r_afWS4>_R <Sum f_XfWUv g_XfWUx a_XfWUz>_P)
                             :: (r_afWS4 :: *)
                                ~R# (Data.Functor.Const.Const
                                       r_afWS4 (Sum f_XfWUv g_XfWUx a_XfWUz) :: *))
                 }}]
Data.Functor.Sum.$fDataSum3
  = \ (@ k_XfWUt)
      (@ (f_XfWUv :: k_XfWUt -> *))
      (@ (g_XfWUx :: k_XfWUt -> *))
      (@ (a_XfWUz :: k_XfWUt))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      ($dData_XfWUJ :: Data (f_XfWUv a_XfWUz))
      ($dData1_XfWUL :: Data (g_XfWUx a_XfWUz))
      (@ r_afWS4)
      (@ r'_afWS5)
      (ds_dfX8Z :: r_afWS4 -> r'_afWS5 -> r_afWS4)
      (ds1_dfX90 :: r_afWS4)
      (ds2_dfX91 :: forall d. Data d => d -> r'_afWS5)
      (eta_B1 :: Sum f_XfWUv g_XfWUx a_XfWUz) ->
      case eta_B1 of {
        InL a1_afWPt ->
          (ds_dfX8Z
             ds1_dfX90 (ds2_dfX91 @ (f_XfWUv a_XfWUz) $dData_XfWUJ a1_afWPt))
          `cast` (Sym (Data.Functor.Const.N:Const[0]
                           <*>_N <r_afWS4>_R <Sum f_XfWUv g_XfWUx a_XfWUz>_P)
                  :: (r_afWS4 :: *)
                     ~R# (Data.Functor.Const.Const
                            r_afWS4 (Sum f_XfWUv g_XfWUx a_XfWUz) :: *));
        InR a1_afWPw ->
          (ds_dfX8Z
             ds1_dfX90 (ds2_dfX91 @ (g_XfWUx a_XfWUz) $dData1_XfWUL a1_afWPw))
          `cast` (Sym (Data.Functor.Const.N:Const[0]
                           <*>_N <r_afWS4>_R <Sum f_XfWUv g_XfWUx a_XfWUz>_P)
                  :: (r_afWS4 :: *)
                     ~R# (Data.Functor.Const.Const
                            r_afWS4 (Sum f_XfWUv g_XfWUx a_XfWUz) :: *))
      }

-- RHS size: {terms: 24, types: 64, coercions: 14, joins: 0/0}
Data.Functor.Sum.$fDataSum4
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     (forall b. Data b => b -> b)
     -> Sum f g a -> Data.Functor.Identity.Identity (Sum f g a)
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><L,1*C1(C1(U))><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=8,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_XfWUs)
                 (@ (f_XfWUu :: k_XfWUs -> *))
                 (@ (g_XfWUw :: k_XfWUs -> *))
                 (@ (a_XfWUy :: k_XfWUs))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 ($dData_XfWUI [Occ=Once] :: Data (f_XfWUu a_XfWUy))
                 ($dData1_XfWUK [Occ=Once] :: Data (g_XfWUw a_XfWUy))
                 (ds_dfX8Y [Occ=Once*!] :: forall b. Data b => b -> b)
                 (x0_Xe2jm [Occ=Once!] :: Sum f_XfWUu g_XfWUw a_XfWUy) ->
                 case x0_Xe2jm of {
                   InL a1_afWPt [Occ=Once] ->
                     (Data.Functor.Sum.InL
                        @ k_XfWUs
                        @ f_XfWUu
                        @ g_XfWUw
                        @ a_XfWUy
                        (ds_dfX8Y @ (f_XfWUu a_XfWUy) $dData_XfWUI a1_afWPt))
                     `cast` (Sym (Data.Functor.Identity.N:Identity[0]
                                      <Sum f_XfWUu g_XfWUw a_XfWUy>_R)
                             :: (Sum f_XfWUu g_XfWUw a_XfWUy :: *)
                                ~R# (Data.Functor.Identity.Identity
                                       (Sum f_XfWUu g_XfWUw a_XfWUy) :: *));
                   InR a1_afWPw [Occ=Once] ->
                     (Data.Functor.Sum.InR
                        @ k_XfWUs
                        @ f_XfWUu
                        @ g_XfWUw
                        @ a_XfWUy
                        (ds_dfX8Y @ (g_XfWUw a_XfWUy) $dData1_XfWUK a1_afWPw))
                     `cast` (Sym (Data.Functor.Identity.N:Identity[0]
                                      <Sum f_XfWUu g_XfWUw a_XfWUy>_R)
                             :: (Sum f_XfWUu g_XfWUw a_XfWUy :: *)
                                ~R# (Data.Functor.Identity.Identity
                                       (Sum f_XfWUu g_XfWUw a_XfWUy) :: *))
                 }}]
Data.Functor.Sum.$fDataSum4
  = \ (@ k_XfWUs)
      (@ (f_XfWUu :: k_XfWUs -> *))
      (@ (g_XfWUw :: k_XfWUs -> *))
      (@ (a_XfWUy :: k_XfWUs))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      ($dData_XfWUI :: Data (f_XfWUu a_XfWUy))
      ($dData1_XfWUK :: Data (g_XfWUw a_XfWUy))
      (ds_dfX8Y :: forall b. Data b => b -> b)
      (x0_Xe2jm :: Sum f_XfWUu g_XfWUw a_XfWUy) ->
      case x0_Xe2jm of {
        InL a1_afWPt ->
          (Data.Functor.Sum.InL
             @ k_XfWUs
             @ f_XfWUu
             @ g_XfWUw
             @ a_XfWUy
             (ds_dfX8Y @ (f_XfWUu a_XfWUy) $dData_XfWUI a1_afWPt))
          `cast` (Sym (Data.Functor.Identity.N:Identity[0]
                           <Sum f_XfWUu g_XfWUw a_XfWUy>_R)
                  :: (Sum f_XfWUu g_XfWUw a_XfWUy :: *)
                     ~R# (Data.Functor.Identity.Identity
                            (Sum f_XfWUu g_XfWUw a_XfWUy) :: *));
        InR a1_afWPw ->
          (Data.Functor.Sum.InR
             @ k_XfWUs
             @ f_XfWUu
             @ g_XfWUw
             @ a_XfWUy
             (ds_dfX8Y @ (g_XfWUw a_XfWUy) $dData1_XfWUK a1_afWPw))
          `cast` (Sym (Data.Functor.Identity.N:Identity[0]
                           <Sum f_XfWUu g_XfWUw a_XfWUy>_R)
                  :: (Sum f_XfWUu g_XfWUw a_XfWUy :: *)
                     ~R# (Data.Functor.Identity.Identity
                            (Sum f_XfWUu g_XfWUw a_XfWUy) :: *))
      }

-- RHS size: {terms: 91, types: 216, coercions: 24, joins: 0/4}
Data.Functor.Sum.$w$cgmapMo [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data (f a), Data (g a)) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d) -> Sum f g a -> m (Sum f g a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
 Unf=OtherCon []]
Data.Functor.Sum.$w$cgmapMo
  = \ (@ k_sfXDv)
      (@ (f_sfXDw :: k_sfXDv -> *))
      (@ (g_sfXDx :: k_sfXDv -> *))
      (@ (a_sfXDy :: k_sfXDv))
      (w_sfXDD :: Data (f_sfXDw a_sfXDy))
      (w1_sfXDE :: Data (g_sfXDx a_sfXDy))
      (@ (m_sfXDF :: * -> *))
      (w2_sfXDG :: GHC.Base.MonadPlus m_sfXDF)
      (w3_sfXDH :: forall d. Data d => d -> m_sfXDF d)
      (w4_sfXDI :: Sum f_sfXDw g_sfXDx a_sfXDy) ->
      let {
        lvl8_sfXhO :: m_sfXDF (Sum f_sfXDw g_sfXDx a_sfXDy)
        [LclId]
        lvl8_sfXhO
          = GHC.Base.mzero
              @ m_sfXDF w2_sfXDG @ (Sum f_sfXDw g_sfXDx a_sfXDy) } in
      let {
        $dMonad_sfXg7 [Dmd=<S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)>]
          :: Monad m_sfXDF
        [LclId]
        $dMonad_sfXg7 = GHC.Base.$p2MonadPlus @ m_sfXDF w2_sfXDG } in
      >>=
        @ m_sfXDF
        $dMonad_sfXg7
        @ (Sum f_sfXDw g_sfXDx a_sfXDy, Bool)
        @ (Sum f_sfXDw g_sfXDx a_sfXDy)
        (let {
           k1_sfXg6 [Dmd=<C(C(C(S))),1*C1(C1(C1(U)))>]
             :: forall d b.
                Data d =>
                Data.Data.Mp m_sfXDF (d -> b) -> d -> m_sfXDF (b, Bool)
           [LclId, Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []]
           k1_sfXg6
             = \ (@ d_ae2Ya)
                 (@ b_ae2Yb)
                 ($dData1_ae2Yd [OS=OneShot] :: Data d_ae2Ya)
                 (ds_de7pC [OS=OneShot]
                    :: Data.Data.Mp m_sfXDF (d_ae2Ya -> b_ae2Yb))
                 (y_ae1TO [OS=OneShot] :: d_ae2Ya) ->
                 let {
                   lvl9_sfXhL :: m_sfXDF d_ae2Ya
                   [LclId]
                   lvl9_sfXhL = w3_sfXDH @ d_ae2Ya $dData1_ae2Yd y_ae1TO } in
                 >>=
                   @ m_sfXDF
                   $dMonad_sfXg7
                   @ (d_ae2Ya -> b_ae2Yb, Bool)
                   @ (b_ae2Yb, Bool)
                   (ds_de7pC
                    `cast` (Data.Data.N:Mp[0] <m_sfXDF>_R <d_ae2Ya -> b_ae2Yb>_N
                            :: (Data.Data.Mp m_sfXDF (d_ae2Ya -> b_ae2Yb) :: *)
                               ~R# (m_sfXDF (d_ae2Ya -> b_ae2Yb, Bool) :: *)))
                   (\ (ds1_de7pD :: (d_ae2Ya -> b_ae2Yb, Bool)) ->
                      case ds1_de7pD of { (h_ae1TP, b1_ae1TQ) ->
                      case b1_ae1TQ of {
                        False ->
                          GHC.Base.mplus
                            @ m_sfXDF
                            w2_sfXDG
                            @ (b_ae2Yb, Bool)
                            (>>=
                               @ m_sfXDF
                               $dMonad_sfXg7
                               @ d_ae2Ya
                               @ (b_ae2Yb, Bool)
                               lvl9_sfXhL
                               (\ (y'_ae1TR :: d_ae2Ya) ->
                                  return
                                    @ m_sfXDF
                                    $dMonad_sfXg7
                                    @ (b_ae2Yb, Bool)
                                    (h_ae1TP y'_ae1TR, GHC.Types.True)))
                            (return
                               @ m_sfXDF
                               $dMonad_sfXg7
                               @ (b_ae2Yb, Bool)
                               (h_ae1TP y_ae1TO, GHC.Types.False));
                        True ->
                          return
                            @ m_sfXDF
                            $dMonad_sfXg7
                            @ (b_ae2Yb, Bool)
                            (h_ae1TP y_ae1TO, GHC.Types.True)
                      }
                      }) } in
         case w4_sfXDI of {
           InL a1_afWPt ->
             k1_sfXg6
               @ (f_sfXDw a_sfXDy)
               @ (Sum f_sfXDw g_sfXDx a_sfXDy)
               w_sfXDD
               ((return
                   @ m_sfXDF
                   $dMonad_sfXg7
                   @ (f_sfXDw a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy, Bool)
                   (Data.Functor.Sum.$fDataSum2
                      @ k_sfXDv @ f_sfXDw @ g_sfXDx @ a_sfXDy))
                `cast` (Sym (Data.Data.N:Mp[0]
                                 <m_sfXDF>_R <f_sfXDw a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy>_N)
                        :: (m_sfXDF (f_sfXDw a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy,
                                     Bool) :: *)
                           ~R# (Data.Data.Mp
                                  m_sfXDF (f_sfXDw a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy) :: *)))
               a1_afWPt;
           InR a1_afWPw ->
             k1_sfXg6
               @ (g_sfXDx a_sfXDy)
               @ (Sum f_sfXDw g_sfXDx a_sfXDy)
               w1_sfXDE
               ((return
                   @ m_sfXDF
                   $dMonad_sfXg7
                   @ (g_sfXDx a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy, Bool)
                   (Data.Functor.Sum.$fDataSum1
                      @ k_sfXDv @ f_sfXDw @ g_sfXDx @ a_sfXDy))
                `cast` (Sym (Data.Data.N:Mp[0]
                                 <m_sfXDF>_R <g_sfXDx a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy>_N)
                        :: (m_sfXDF (g_sfXDx a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy,
                                     Bool) :: *)
                           ~R# (Data.Data.Mp
                                  m_sfXDF (g_sfXDx a_sfXDy -> Sum f_sfXDw g_sfXDx a_sfXDy) :: *)))
               a1_afWPw
         })
        (\ (ds_de7pa :: (Sum f_sfXDw g_sfXDx a_sfXDy, Bool)) ->
           case ds_de7pa of { (x'_ae1TS, b_ae1TT) ->
           case b_ae1TT of {
             False -> lvl8_sfXhO;
             True ->
               return
                 @ m_sfXDF $dMonad_sfXg7 @ (Sum f_sfXDw g_sfXDx a_sfXDy) x'_ae1TS
           }
           })

-- RHS size: {terms: 20, types: 55, coercions: 0, joins: 0/0}
Data.Functor.Sum.$fDataSum_$cgmapMo [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d) -> Sum f g a -> m (Sum f g a)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,U><L,U><S(LS(LC(C(S))LLL)LL),U(A,U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sfXDv)
                 (@ (f_sfXDw :: k_sfXDv -> *))
                 (@ (g_sfXDx :: k_sfXDv -> *))
                 (@ (a_sfXDy :: k_sfXDv))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (w4_sfXDD [Occ=Once] :: Data (f_sfXDw a_sfXDy))
                 (w5_sfXDE [Occ=Once] :: Data (g_sfXDx a_sfXDy))
                 (@ (m_sfXDF :: * -> *))
                 (w6_sfXDG [Occ=Once] :: GHC.Base.MonadPlus m_sfXDF)
                 (w7_sfXDH [Occ=Once] :: forall d. Data d => d -> m_sfXDF d)
                 (w8_sfXDI [Occ=Once] :: Sum f_sfXDw g_sfXDx a_sfXDy) ->
                 Data.Functor.Sum.$w$cgmapMo
                   @ k_sfXDv
                   @ f_sfXDw
                   @ g_sfXDx
                   @ a_sfXDy
                   w4_sfXDD
                   w5_sfXDE
                   @ m_sfXDF
                   w6_sfXDG
                   w7_sfXDH
                   w8_sfXDI}]
Data.Functor.Sum.$fDataSum_$cgmapMo
  = \ (@ k_sfXDv)
      (@ (f_sfXDw :: k_sfXDv -> *))
      (@ (g_sfXDx :: k_sfXDv -> *))
      (@ (a_sfXDy :: k_sfXDv))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (w4_sfXDD :: Data (f_sfXDw a_sfXDy))
      (w5_sfXDE :: Data (g_sfXDx a_sfXDy))
      (@ (m_sfXDF :: * -> *))
      (w6_sfXDG :: GHC.Base.MonadPlus m_sfXDF)
      (w7_sfXDH :: forall d. Data d => d -> m_sfXDF d)
      (w8_sfXDI :: Sum f_sfXDw g_sfXDx a_sfXDy) ->
      Data.Functor.Sum.$w$cgmapMo
        @ k_sfXDv
        @ f_sfXDw
        @ g_sfXDx
        @ a_sfXDy
        w4_sfXDD
        w5_sfXDE
        @ m_sfXDF
        w6_sfXDG
        w7_sfXDH
        w8_sfXDI

-- RHS size: {terms: 11, types: 23, coercions: 0, joins: 0/0}
lvl4_rfXPs
  :: forall k (g :: k -> *) (a :: k) (f :: k -> *).
     Sum f g a -> Data.Data.Constr
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []]
lvl4_rfXPs
  = \ (@ k_XfWUp)
      (@ (g_XfWYN :: k_XfWUp -> *))
      (@ (a_XfWYQ :: k_XfWUp))
      (@ (f_XfWUr :: k_XfWUp -> *))
      (ds_dfX8S :: Sum f_XfWUr g_XfWYN a_XfWYQ) ->
      case ds_dfX8S of {
        InL ds1_dfX8T -> Data.Functor.Sum.$cInL;
        InR ds1_dfX8U -> Data.Functor.Sum.$cInR
      }

-- RHS size: {terms: 6, types: 14, coercions: 0, joins: 0/0}
lvl5_rfXPt
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     Sum f g a -> Data.Data.DataType
[GblId, Arity=1, Str=<L,A>m, Unf=OtherCon []]
lvl5_rfXPt
  = \ (@ k_XfWUp)
      (@ (f_XfWUr :: k_XfWUp -> *))
      (@ (g_XfWYN :: k_XfWUp -> *))
      (@ (a_XfWYQ :: k_XfWUp))
      _ [Occ=Dead] ->
      Data.Functor.Sum.$tSum

-- RHS size: {terms: 9, types: 36, coercions: 0, joins: 0/0}
lvl6_rfXPu
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k) (t :: *
                                                         -> *) (c :: * -> *).
     Data.Typeable.Internal.Typeable t =>
     (forall d. Data d => c (t d)) -> Maybe (c (Sum f g a))
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []]
lvl6_rfXPu
  = \ (@ k_XfWUp)
      (@ (f_XfWUr :: k_XfWUp -> *))
      (@ (g_XfWYN :: k_XfWUp -> *))
      (@ (a_XfWYQ :: k_XfWUp))
      (@ (t_afWRd :: * -> *))
      (@ (c_afWRe :: * -> *))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Base.Nothing @ (c_afWRe (Sum f_XfWUr g_XfWYN a_XfWYQ))

-- RHS size: {terms: 9, types: 45, coercions: 0, joins: 0/0}
lvl7_rfXPv
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k) (t :: *
                                                         -> * -> *) (c :: * -> *).
     Data.Typeable.Internal.Typeable t =>
     (forall d e. (Data d, Data e) => c (t d e))
     -> Maybe (c (Sum f g a))
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []]
lvl7_rfXPv
  = \ (@ k_XfWUp)
      (@ (f_XfWUr :: k_XfWUp -> *))
      (@ (g_XfWYN :: k_XfWUp -> *))
      (@ (a_XfWYQ :: k_XfWUp))
      (@ (t_afWRw :: * -> * -> *))
      (@ (c_afWRx :: * -> *))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Base.Nothing @ (c_afWRx (Sum f_XfWUr g_XfWYN a_XfWYQ))

-- RHS size: {terms: 99, types: 154, coercions: 62, joins: 0/0}
Data.Functor.Sum.$fDataSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (g :: k -> *) (a :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k, Data (f a), Data (g a)) =>
     Data (Sum f g a)
[GblId[DFunId],
 Arity=6,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=DFun: \ (@ k_afWKZ)
             (@ (f_afWJR :: k_afWKZ -> *))
             (@ (g_afWJS :: k_afWKZ -> *))
             (@ (a_afWJT :: k_afWKZ))
             (v_X4n :: Data.Typeable.Internal.Typeable a_afWJT)
             (v1_B2 :: Data.Typeable.Internal.Typeable f_afWJR)
             (v2_B3 :: Data.Typeable.Internal.Typeable g_afWJS)
             (v3_B4 :: Data.Typeable.Internal.Typeable k_afWKZ)
             (v4_B5 :: Data (f_afWJR a_afWJT))
             (v5_B6 :: Data (g_afWJS a_afWJT)) ->
       Data.Data.C:Data TYPE: Sum f_afWJR g_afWJS a_afWJT
                        (Data.Functor.Sum.$fDataSum5
                           @ k_afWKZ
                           @ f_afWJR
                           @ g_afWJS
                           @ a_afWJT
                           v_X4n
                           v1_B2
                           v2_B3
                           v3_B4
                           v4_B5
                           v5_B6)
                        `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Sum
                                                                                    f_afWJR
                                                                                    g_afWJS
                                                                                    a_afWJT>_N
                                :: (Data.Typeable.Internal.TypeRep
                                      (Sum f_afWJR g_afWJS a_afWJT) :: *)
                                   ~R# (Data.Typeable.Internal.Typeable
                                          (Sum f_afWJR g_afWJS a_afWJT) :: Constraint))
                        Data.Functor.Sum.$fDataSum_$cgfoldl
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Sum.$fDataSum_$cgunfold
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        \ (ds_dfX8S [Occ=Once!] :: Sum f_afWJR g_afWJS a_afWJT) ->
                          case ds_dfX8S of {
                            InL _ [Occ=Dead] -> Data.Functor.Sum.$cInL;
                            InR _ [Occ=Dead] -> Data.Functor.Sum.$cInR
                          }
                        \ _ [Occ=Dead] -> Data.Functor.Sum.$tSum
                        \ (@ (t_afWRd :: * -> *))
                          (@ (c_afWRe :: * -> *))
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
                          GHC.Base.Nothing @ (c_afWRe (Sum f_afWJR g_afWJS a_afWJT))
                        \ (@ (t_afWRw :: * -> * -> *))
                          (@ (c_afWRx :: * -> *))
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
                          GHC.Base.Nothing @ (c_afWRx (Sum f_afWJR g_afWJS a_afWJT))
                        (Data.Functor.Sum.$fDataSum4
                           @ k_afWKZ
                           @ f_afWJR
                           @ g_afWJS
                           @ a_afWJT
                           v_X4n
                           v1_B2
                           v2_B3
                           v3_B4
                           v4_B5
                           v5_B6)
                        `cast` (<forall b. Data b => b -> b>_R
                                ->_R <Sum f_afWJR g_afWJS a_afWJT>_R
                                ->_R Data.Functor.Identity.N:Identity[0]
                                         <Sum f_afWJR g_afWJS a_afWJT>_R
                                :: ((forall b. Data b => b -> b)
                                    -> Sum f_afWJR g_afWJS a_afWJT
                                    -> Data.Functor.Identity.Identity
                                         (Sum f_afWJR g_afWJS a_afWJT) :: *)
                                   ~R# ((forall b. Data b => b -> b)
                                        -> Sum f_afWJR g_afWJS a_afWJT
                                        -> Sum f_afWJR g_afWJS a_afWJT :: *))
                        (Data.Functor.Sum.$fDataSum3
                           @ k_afWKZ
                           @ f_afWJR
                           @ g_afWJS
                           @ a_afWJT
                           v_X4n
                           v1_B2
                           v2_B3
                           v3_B4
                           v4_B5
                           v5_B6)
                        `cast` (forall (r :: <*>_N) (r' :: <*>_N).
                                <r -> r' -> r>_R
                                ->_R <r>_R
                                ->_R <forall d. Data d => d -> r'>_R
                                ->_R <Sum f_afWJR g_afWJS a_afWJT>_R
                                ->_R Data.Functor.Const.N:Const[0]
                                         <*>_N <r>_R <Sum f_afWJR g_afWJS a_afWJT>_P
                                :: (forall r r'.
                                    (r -> r' -> r)
                                    -> r
                                    -> (forall d. Data d => d -> r')
                                    -> Sum f_afWJR g_afWJS a_afWJT
                                    -> Data.Functor.Const.Const
                                         r (Sum f_afWJR g_afWJS a_afWJT) :: *)
                                   ~R# (forall r r'.
                                        (r -> r' -> r)
                                        -> r
                                        -> (forall d. Data d => d -> r')
                                        -> Sum f_afWJR g_afWJS a_afWJT
                                        -> r :: *))
                        Data.Functor.Sum.$fDataSum_$cgmapQr
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Sum.$fDataSum_$cgmapQ
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Sum.$fDataSum_$cgmapQi
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Sum.$fDataSum_$cgmapM
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Sum.$fDataSum_$cgmapMp
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Sum.$fDataSum_$cgmapMo
                          @ k_afWKZ
                          @ f_afWJR
                          @ g_afWJS
                          @ a_afWJT
                          v_X4n
                          v1_B2
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6]
Data.Functor.Sum.$fDataSum
  = \ (@ k_XfWUp)
      (@ (f_XfWUr :: k_XfWUp -> *))
      (@ (g_XfWYN :: k_XfWUp -> *))
      (@ (a_XfWYQ :: k_XfWUp))
      ($dTypeable_XfWYT :: Data.Typeable.Internal.Typeable a_XfWYQ)
      ($dTypeable1_XfWYW :: Data.Typeable.Internal.Typeable f_XfWUr)
      ($dTypeable2_XfWYZ :: Data.Typeable.Internal.Typeable g_XfWYN)
      ($dTypeable3_XfWZ2 :: Data.Typeable.Internal.Typeable k_XfWUp)
      ($dData_XfWZ5 :: Data (f_XfWUr a_XfWYQ))
      ($dData1_XfWZ8 :: Data (g_XfWYN a_XfWYQ)) ->
      Data.Data.C:Data
        @ (Sum f_XfWUr g_XfWYN a_XfWYQ)
        ((Data.Functor.Sum.$w$cp1Data
            @ k_XfWUp
            @ f_XfWUr
            @ g_XfWYN
            @ a_XfWYQ
            $dTypeable_XfWYT
            $dTypeable1_XfWYW
            $dTypeable2_XfWYZ
            $dTypeable3_XfWZ2)
         `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Sum
                                                                     f_XfWUr g_XfWYN a_XfWYQ>_N
                 :: (Data.Typeable.Internal.TypeRep
                       (Sum f_XfWUr g_XfWYN a_XfWYQ) :: *)
                    ~R# (Data.Typeable.Internal.Typeable
                           (Sum f_XfWUr g_XfWYN a_XfWYQ) :: Constraint)))
        (Data.Functor.Sum.$fDataSum_$cgfoldl
           @ k_XfWUp
           @ f_XfWUr
           @ g_XfWYN
           @ a_XfWYQ
           $dTypeable_XfWYT
           $dTypeable1_XfWYW
           $dTypeable2_XfWYZ
           $dTypeable3_XfWZ2
           $dData_XfWZ5
           $dData1_XfWZ8)
        (Data.Functor.Sum.$fDataSum_$cgunfold
           @ k_XfWUp
           @ f_XfWUr
           @ g_XfWYN
           @ a_XfWYQ
           $dTypeable_XfWYT
           $dTypeable1_XfWYW
           $dTypeable2_XfWYZ
           $dTypeable3_XfWZ2
           $dData_XfWZ5
           $dData1_XfWZ8)
        (lvl4_rfXPs @ k_XfWUp @ g_XfWYN @ a_XfWYQ @ f_XfWUr)
        (lvl5_rfXPt @ k_XfWUp @ f_XfWUr @ g_XfWYN @ a_XfWYQ)
        (lvl6_rfXPu @ k_XfWUp @ f_XfWUr @ g_XfWYN @ a_XfWYQ)
        (lvl7_rfXPv @ k_XfWUp @ f_XfWUr @ g_XfWYN @ a_XfWYQ)
        ((Data.Functor.Sum.$fDataSum4
            @ k_XfWUp
            @ f_XfWUr
            @ g_XfWYN
            @ a_XfWYQ
            $dTypeable_XfWYT
            $dTypeable1_XfWYW
            $dTypeable2_XfWYZ
            $dTypeable3_XfWZ2
            $dData_XfWZ5
            $dData1_XfWZ8)
         `cast` (<forall b. Data b => b -> b>_R
                 ->_R <Sum f_XfWUr g_XfWYN a_XfWYQ>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Sum f_XfWUr g_XfWYN a_XfWYQ>_R
                 :: ((forall b. Data b => b -> b)
                     -> Sum f_XfWUr g_XfWYN a_XfWYQ
                     -> Data.Functor.Identity.Identity
                          (Sum f_XfWUr g_XfWYN a_XfWYQ) :: *)
                    ~R# ((forall b. Data b => b -> b)
                         -> Sum f_XfWUr g_XfWYN a_XfWYQ
                         -> Sum f_XfWUr g_XfWYN a_XfWYQ :: *)))
        ((Data.Functor.Sum.$fDataSum3
            @ k_XfWUp
            @ f_XfWUr
            @ g_XfWYN
            @ a_XfWYQ
            $dTypeable_XfWYT
            $dTypeable1_XfWYW
            $dTypeable2_XfWYZ
            $dTypeable3_XfWZ2
            $dData_XfWZ5
            $dData1_XfWZ8)
         `cast` (forall (r :: <*>_N) (r' :: <*>_N).
                 <r -> r' -> r>_R
                 ->_R <r>_R
                 ->_R <forall d. Data d => d -> r'>_R
                 ->_R <Sum f_XfWUr g_XfWYN a_XfWYQ>_R
                 ->_R Data.Functor.Const.N:Const[0]
                          <*>_N <r>_R <Sum f_XfWUr g_XfWYN a_XfWYQ>_P
                 :: (forall r r'.
                     (r -> r' -> r)
                     -> r
                     -> (forall d. Data d => d -> r')
                     -> Sum f_XfWUr g_XfWYN a_XfWYQ
                     -> Data.Functor.Const.Const r (Sum f_XfWUr g_XfWYN a_XfWYQ) :: *)
                    ~R# (forall r r'.
                         (r -> r' -> r)
                         -> r
                         -> (forall d. Data d => d -> r')
                         -> Sum f_XfWUr g_XfWYN a_XfWYQ
                         -> r :: *)))
        (Data.Functor.Sum.$fDataSum_$cgmapQr
           @ k_XfWUp
           @ f_XfWUr
           @ g_XfWYN
           @ a_XfWYQ
           $dTypeable_XfWYT
           $dTypeable1_XfWYW
           $dTypeable2_XfWYZ
           $dTypeable3_XfWZ2
           $dData_XfWZ5
           $dData1_XfWZ8)
        (Data.Functor.Sum.$fDataSum_$cgmapQ
           @ k_XfWUp
           @ f_XfWUr
           @ g_XfWYN
           @ a_XfWYQ
           $dTypeable_XfWYT
           $dTypeable1_XfWYW
           $dTypeable2_XfWYZ
           $dTypeable3_XfWZ2
           $dData_XfWZ5
           $dData1_XfWZ8)
        (Data.Functor.Sum.$fDataSum_$cgmapQi
           @ k_XfWUp
           @ f_XfWUr
           @ g_XfWYN
           @ a_XfWYQ
           $dTypeable_XfWYT
           $dTypeable1_XfWYW
           $dTypeable2_XfWYZ
           $dTypeable3_XfWZ2
           $dData_XfWZ5
           $dData1_XfWZ8)
        (\ (@ (m_sfXDl :: * -> *))
           (w_sfXDm :: Monad m_sfXDl)
           (w1_sfXDn :: forall d. Data d => d -> m_sfXDl d)
           (w2_sfXDo :: Sum f_XfWUr g_XfWYN a_XfWYQ) ->
           Data.Functor.Sum.$w$cgmapM
             @ k_XfWUp
             @ f_XfWUr
             @ g_XfWYN
             @ a_XfWYQ
             $dData_XfWZ5
             $dData1_XfWZ8
             @ m_sfXDl
             w_sfXDm
             w1_sfXDn
             w2_sfXDo)
        (\ (@ (m_sfXD1 :: * -> *))
           (w_sfXD2 :: GHC.Base.MonadPlus m_sfXD1)
           (w1_sfXD3 :: forall d. Data d => d -> m_sfXD1 d)
           (w2_sfXD4 :: Sum f_XfWUr g_XfWYN a_XfWYQ) ->
           Data.Functor.Sum.$w$cgmapMp
             @ k_XfWUp
             @ f_XfWUr
             @ g_XfWYN
             @ a_XfWYQ
             $dData_XfWZ5
             $dData1_XfWZ8
             @ m_sfXD1
             w_sfXD2
             w1_sfXD3
             w2_sfXD4)
        (\ (@ (m_sfXDF :: * -> *))
           (w_sfXDG :: GHC.Base.MonadPlus m_sfXDF)
           (w1_sfXDH :: forall d. Data d => d -> m_sfXDF d)
           (w2_sfXDI :: Sum f_XfWUr g_XfWYN a_XfWYQ) ->
           Data.Functor.Sum.$w$cgmapMo
             @ k_XfWUp
             @ f_XfWUr
             @ g_XfWYN
             @ a_XfWYQ
             $dData_XfWZ5
             $dData1_XfWZ8
             @ m_sfXDF
             w_sfXDG
             w1_sfXDH
             w2_sfXDI)


