
==================== Raw Cmm ====================
2018-03-16 15:56:20.253444193 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:20.257468124 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMax_$c<>_closure" {
     Data.Functor.Utils.$fMonoidMax_$c<>_closure:
         const Data.Functor.Utils.$fMonoidMax_$c<>_info;
 },
 Data.Functor.Utils.$fMonoidMax_$c<>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1z0f: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1z0g; else goto c1z0h;
       c1z0g: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMax_$c<>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z0h: // global
           I64[Sp - 24] = block_c1z08_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1z0Q; else goto c1z09;
       u1z0Q: // global
           call _c1z08(R1) args: 0, res: 0, upd: 0;
       c1z09: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMax_$c<>_info" {
     Data.Functor.Utils.$fMonoidMax_$c<>_info:
         const Data.Functor.Utils.$fMonoidMax_$c<>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1z08() //  [R1]
         { []
         }
     {offset
       c1z08: // global
           _s1yob::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1z0c; else goto c1z0d;
       c1z0c: // global
           R1 = _s1yob::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1z0d: // global
           I64[Sp - 8] = block_c1z0n_info;
           _s1yod::P64 = R1;
           _s1yoe::P64 = P64[R1 + 6];
           R1 = _s1yob::P64;
           P64[Sp] = _s1yoe::P64;
           P64[Sp + 16] = _s1yod::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1z0P; else goto c1z0p;
       u1z0P: // global
           call _c1z0n(R1) args: 0, res: 0, upd: 0;
       c1z0p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z08_info" {
     block_c1z08_info:
         const _c1z08;
         const 2;
         const 30;
 },
 _c1z0n() //  [R1]
         { []
         }
     {offset
       c1z0n: // global
           if (R1 & 7 == 1) goto u1z0N; else goto c1z0A;
       u1z0N: // global
           Sp = Sp + 24;
           call _c1z0G() args: 0, res: 0, upd: 0;
       c1z0A: // global
           _s1yoe::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1z0y_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1yoe::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z0n_info" {
     block_c1z0n_info:
         const _c1z0n;
         const 3;
         const 30;
 },
 _c1z0y() //  [R1]
         { []
         }
     {offset
       c1z0y: // global
           if (R1 & 7 == 1) goto u1z0O; else goto c1z0K;
       u1z0O: // global
           Sp = Sp + 16;
           call _c1z0G() args: 0, res: 0, upd: 0;
       c1z0K: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z0y_info" {
     block_c1z0y_info:
         const _c1z0y;
         const 2;
         const 30;
 },
 _c1z0G() //  []
         { []
         }
     {offset
       c1z0G: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.270572449 UTC

[section ""data" . Data.Functor.Utils.$w$csconcat_closure" {
     Data.Functor.Utils.$w$csconcat_closure:
         const Data.Functor.Utils.$w$csconcat_info;
 },
 go_s1yol_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1z1E: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1z1F; else goto c1z1G;
       c1z1F: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z1G: // global
           I64[Sp - 32] = block_c1z1x_info;
           _s1yol::P64 = R1;
           _s1yoi::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s1yoi::P64;
           P64[Sp - 16] = _s1yol::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1z2t; else goto c1z1y;
       u1z2t: // global
           call _c1z1x(R1) args: 0, res: 0, upd: 0;
       c1z1y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1yol_info" {
     go_s1yol_info:
         const go_s1yol_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c1z1x() //  [R1]
         { []
         }
     {offset
       c1z1x: // global
           if (R1 & 7 == 1) goto u1z2o; else goto c1z1C;
       u1z2o: // global
           Sp = Sp + 24;
           call _c1z1T() args: 0, res: 0, upd: 0;
       c1z1C: // global
           I64[Sp] = block_c1z1M_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           call go_s1yol_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z1x_info" {
     block_c1z1x_info:
         const _c1z1x;
         const 3;
         const 30;
 },
 _c1z1M() //  [R1]
         { []
         }
     {offset
       c1z1M: // global
           if (R1 & 7 == 1) goto u1z2p; else goto c1z1Y;
       u1z2p: // global
           Sp = Sp + 24;
           call _c1z1T() args: 0, res: 0, upd: 0;
       c1z1Y: // global
           I64[Sp] = block_c1z1W_info;
           _s1yor::P64 = R1;
           _s1yos::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s1yos::P64;
           P64[Sp + 24] = _s1yor::P64;
           if (R1 & 7 != 0) goto u1z2u; else goto c1z1Z;
       u1z2u: // global
           call _c1z1W(R1) args: 0, res: 0, upd: 0;
       c1z1Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z1M_info" {
     block_c1z1M_info:
         const _c1z1M;
         const 131;
         const 30;
 },
 _c1z1T() //  []
         { []
         }
     {offset
       c1z1T: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1z1W() //  [R1]
         { []
         }
     {offset
       c1z1W: // global
           if (R1 & 7 == 1) goto u1z2q; else goto c1z2a;
       u1z2q: // global
           Sp = Sp + 24;
           call _c1z2g() args: 0, res: 0, upd: 0;
       c1z2a: // global
           _s1yoi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1z28_info;
           R2 = _s1yoi::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z1W_info" {
     block_c1z1W_info:
         const _c1z1W;
         const 3;
         const 30;
 },
 _c1z28() //  [R1]
         { []
         }
     {offset
       c1z28: // global
           if (R1 & 7 == 1) goto u1z2r; else goto c1z2k;
       u1z2r: // global
           Sp = Sp + 16;
           call _c1z2g() args: 0, res: 0, upd: 0;
       c1z2k: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z28_info" {
     block_c1z28_info:
         const _c1z28;
         const 2;
         const 30;
 },
 _c1z2g() //  []
         { []
         }
     {offset
       c1z2g: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1z2y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1z2C; else goto c1z2B;
       c1z2C: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z2B: // global
           I64[Hp - 8] = go_s1yol_info;
           P64[Hp] = R2;
           _s1yoj::P64 = R3;
           R3 = R4;
           R2 = _s1yoj::P64;
           R1 = Hp - 6;
           call go_s1yol_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$w$csconcat_info" {
     Data.Functor.Utils.$w$csconcat_info:
         const Data.Functor.Utils.$w$csconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.28558567 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMax_$csconcat_closure" {
     Data.Functor.Utils.$fSemigroupMax_$csconcat_closure:
         const Data.Functor.Utils.$fSemigroupMax_$csconcat_info;
 },
 Data.Functor.Utils.$fSemigroupMax_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1z3q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1z3r; else goto c1z3s;
       c1z3r: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMax_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z3s: // global
           I64[Sp - 16] = block_c1z3n_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1z3w; else goto c1z3o;
       u1z3w: // global
           call _c1z3n(R1) args: 0, res: 0, upd: 0;
       c1z3o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMax_$csconcat_info" {
     Data.Functor.Utils.$fSemigroupMax_$csconcat_info:
         const Data.Functor.Utils.$fSemigroupMax_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1z3n() //  [R1]
         { []
         }
     {offset
       c1z3n: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Functor.Utils.$w$csconcat_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z3n_info" {
     block_c1z3n_info:
         const _c1z3n;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.292578559 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMax_closure" {
     Data.Functor.Utils.$fSemigroupMax_closure:
         const Data.Functor.Utils.$fSemigroupMax_info;
         const 0;
 },
 sat_s1yoE_entry() //  [R1, R2]
         { []
         }
     {offset
       c1z3P: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMax_$cstimes_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1yoE_info" {
     sat_s1yoE_info:
         const sat_s1yoE_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1yw7_srt;
 },
 sat_s1yoD_entry() //  [R1, R2]
         { []
         }
     {offset
       c1z3X: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMax_$csconcat_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1yoD_info" {
     sat_s1yoD_info:
         const sat_s1yoD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1yoC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1z45: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMax_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1yoC_info" {
     sat_s1yoC_info:
         const sat_s1yoC_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Utils.$fSemigroupMax_entry() //  [R2]
         { []
         }
     {offset
       c1z49: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1z4d; else goto c1z4c;
       c1z4d: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1z4c: // global
           I64[Hp - 72] = sat_s1yoE_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1yoD_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1yoC_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMax_info" {
     Data.Functor.Utils.$fSemigroupMax_info:
         const Data.Functor.Utils.$fSemigroupMax_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1yw7_srt;
 },
 section ""data" . Data.Functor.Utils.$fSemigroupMax_$cstimes_closure" {
     Data.Functor.Utils.$fSemigroupMax_$cstimes_closure:
         const Data.Functor.Utils.$fSemigroupMax_$cstimes_info;
         const 0;
 },
 sat_s1yoH_entry() //  [R1]
         { []
         }
     {offset
       c1z4m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1z4n; else goto c1z4o;
       c1z4n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1z4o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yoH_info" {
     sat_s1yoH_info:
         const sat_s1yoH_entry;
         const 1;
         const 4294967312;
         const S1yw7_srt+8;
 },
 Data.Functor.Utils.$fSemigroupMax_$cstimes_entry() //  [R2, R3]
         { []
         }
     {offset
       c1z4p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1z4t; else goto c1z4s;
       c1z4t: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMax_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z4s: // global
           I64[Hp - 16] = sat_s1yoH_info;
           P64[Hp] = R2;
           _s1yoG::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1yoG::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMax_$cstimes_info" {
     Data.Functor.Utils.$fSemigroupMax_$cstimes_info:
         const Data.Functor.Utils.$fSemigroupMax_$cstimes_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1yw7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.308310601 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMax_$cmconcat_closure" {
     Data.Functor.Utils.$fMonoidMax_$cmconcat_closure:
         const Data.Functor.Utils.$fMonoidMax_$cmconcat_info;
 },
 go_s1yoK_entry() //  [R1, R2]
         { []
         }
     {offset
       c1z59: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1z5a; else goto c1z5b;
       c1z5a: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1z5b: // global
           I64[Sp - 24] = block_c1z52_info;
           _s1yoK::P64 = R1;
           _s1yoI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s1yoI::P64;
           P64[Sp - 8] = _s1yoK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1z5V; else goto c1z53;
       u1z5V: // global
           call _c1z52(R1) args: 0, res: 0, upd: 0;
       c1z53: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1yoK_info" {
     go_s1yoK_info:
         const go_s1yoK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c1z52() //  [R1]
         { []
         }
     {offset
       c1z52: // global
           if (R1 & 7 == 1) goto c1z56; else goto c1z57;
       c1z56: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1z57: // global
           I64[Sp] = block_c1z5h_info;
           R2 = P64[R1 + 14];
           _s1yoN::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1yoN::P64;
           call go_s1yoK_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z52_info" {
     block_c1z52_info:
         const _c1z52;
         const 2;
         const 30;
 },
 _c1z5h() //  [R1]
         { []
         }
     {offset
       c1z5h: // global
           _s1yoN::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1z5o; else goto c1z5t;
       c1z5o: // global
           R1 = _s1yoN::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1z5t: // global
           I64[Sp - 8] = block_c1z5r_info;
           _s1yoP::P64 = R1;
           _s1yoQ::P64 = P64[R1 + 6];
           R1 = _s1yoN::P64;
           P64[Sp] = _s1yoQ::P64;
           P64[Sp + 16] = _s1yoP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1z5W; else goto c1z5u;
       u1z5W: // global
           call _c1z5r(R1) args: 0, res: 0, upd: 0;
       c1z5u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z5h_info" {
     block_c1z5h_info:
         const _c1z5h;
         const 2;
         const 30;
 },
 _c1z5r() //  [R1]
         { []
         }
     {offset
       c1z5r: // global
           if (R1 & 7 == 1) goto u1z5T; else goto c1z5F;
       u1z5T: // global
           Sp = Sp + 24;
           call _c1z5L() args: 0, res: 0, upd: 0;
       c1z5F: // global
           _s1yoQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1z5D_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1yoQ::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z5r_info" {
     block_c1z5r_info:
         const _c1z5r;
         const 3;
         const 30;
 },
 _c1z5D() //  [R1]
         { []
         }
     {offset
       c1z5D: // global
           if (R1 & 7 == 1) goto u1z5U; else goto c1z5P;
       u1z5U: // global
           Sp = Sp + 16;
           call _c1z5L() args: 0, res: 0, upd: 0;
       c1z5P: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z5D_info" {
     block_c1z5D_info:
         const _c1z5D;
         const 2;
         const 30;
 },
 _c1z5L() //  []
         { []
         }
     {offset
       c1z5L: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$fMonoidMax_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1z5Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1z63; else goto c1z62;
       c1z63: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMax_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z62: // global
           I64[Hp - 8] = go_s1yoK_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s1yoK_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMax_$cmconcat_info" {
     Data.Functor.Utils.$fMonoidMax_$cmconcat_info:
         const Data.Functor.Utils.$fMonoidMax_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.322534679 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMax_closure" {
     Data.Functor.Utils.$fMonoidMax_closure:
         const Data.Functor.Utils.$fMonoidMax_info;
         const 0;
 },
 sat_s1yoX_entry() //  [R1, R2]
         { []
         }
     {offset
       c1z6R: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fMonoidMax_$cmconcat_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1yoX_info" {
     sat_s1yoX_info:
         const sat_s1yoX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1yoW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1z6Z: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMax_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1yoW_info" {
     sat_s1yoW_info:
         const sat_s1yoW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1yoV_entry() //  [R1]
         { []
         }
     {offset
       c1z76: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1z77; else goto c1z78;
       c1z77: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1z78: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yoV_info" {
     sat_s1yoV_info:
         const sat_s1yoV_entry;
         const 1;
         const 4294967312;
         const S1yw7_srt+8;
 },
 Data.Functor.Utils.$fMonoidMax_entry() //  [R2]
         { []
         }
     {offset
       c1z7a: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1z7e; else goto c1z7d;
       c1z7e: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1z7d: // global
           I64[Hp - 88] = sat_s1yoX_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1yoW_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1yoV_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = Hp - 70;
           P64[Hp] = Hp - 87;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMax_info" {
     Data.Functor.Utils.$fMonoidMax_info:
         const Data.Functor.Utils.$fMonoidMax_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S1yw7_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.332947866 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMin_$c<>_closure" {
     Data.Functor.Utils.$fMonoidMin_$c<>_closure:
         const Data.Functor.Utils.$fMonoidMin_$c<>_info;
 },
 Data.Functor.Utils.$fMonoidMin_$c<>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1z7I: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1z7J; else goto c1z7K;
       c1z7J: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMin_$c<>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z7K: // global
           I64[Sp - 24] = block_c1z7B_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1z8j; else goto c1z7C;
       u1z8j: // global
           call _c1z7B(R1) args: 0, res: 0, upd: 0;
       c1z7C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMin_$c<>_info" {
     Data.Functor.Utils.$fMonoidMin_$c<>_info:
         const Data.Functor.Utils.$fMonoidMin_$c<>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1z7B() //  [R1]
         { []
         }
     {offset
       c1z7B: // global
           _s1yoZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1z7F; else goto c1z7G;
       c1z7F: // global
           R1 = _s1yoZ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1z7G: // global
           I64[Sp - 8] = block_c1z7Q_info;
           _s1yp1::P64 = R1;
           _s1yp2::P64 = P64[R1 + 6];
           R1 = _s1yoZ::P64;
           P64[Sp] = _s1yp2::P64;
           P64[Sp + 16] = _s1yp1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1z8i; else goto c1z7S;
       u1z8i: // global
           call _c1z7Q(R1) args: 0, res: 0, upd: 0;
       c1z7S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z7B_info" {
     block_c1z7B_info:
         const _c1z7B;
         const 2;
         const 30;
 },
 _c1z7Q() //  [R1]
         { []
         }
     {offset
       c1z7Q: // global
           if (R1 & 7 == 1) goto u1z8g; else goto c1z83;
       u1z8g: // global
           Sp = Sp + 24;
           call _c1z89() args: 0, res: 0, upd: 0;
       c1z83: // global
           _s1yp2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1z81_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1yp2::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z7Q_info" {
     block_c1z7Q_info:
         const _c1z7Q;
         const 3;
         const 30;
 },
 _c1z81() //  [R1]
         { []
         }
     {offset
       c1z81: // global
           if (R1 & 7 == 1) goto u1z8h; else goto c1z8d;
       u1z8h: // global
           Sp = Sp + 16;
           call _c1z89() args: 0, res: 0, upd: 0;
       c1z8d: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z81_info" {
     block_c1z81_info:
         const _c1z81;
         const 2;
         const 30;
 },
 _c1z89() //  []
         { []
         }
     {offset
       c1z89: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.345909699 UTC

[section ""data" . Data.Functor.Utils.$w$csconcat1_closure" {
     Data.Functor.Utils.$w$csconcat1_closure:
         const Data.Functor.Utils.$w$csconcat1_info;
 },
 go_s1yp9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1z97: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1z98; else goto c1z99;
       c1z98: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1z99: // global
           I64[Sp - 32] = block_c1z90_info;
           _s1yp9::P64 = R1;
           _s1yp6::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s1yp6::P64;
           P64[Sp - 16] = _s1yp9::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1z9W; else goto c1z91;
       u1z9W: // global
           call _c1z90(R1) args: 0, res: 0, upd: 0;
       c1z91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1yp9_info" {
     go_s1yp9_info:
         const go_s1yp9_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c1z90() //  [R1]
         { []
         }
     {offset
       c1z90: // global
           if (R1 & 7 == 1) goto u1z9R; else goto c1z95;
       u1z9R: // global
           Sp = Sp + 24;
           call _c1z9m() args: 0, res: 0, upd: 0;
       c1z95: // global
           I64[Sp] = block_c1z9f_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           call go_s1yp9_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z90_info" {
     block_c1z90_info:
         const _c1z90;
         const 3;
         const 30;
 },
 _c1z9f() //  [R1]
         { []
         }
     {offset
       c1z9f: // global
           if (R1 & 7 == 1) goto u1z9S; else goto c1z9r;
       u1z9S: // global
           Sp = Sp + 24;
           call _c1z9m() args: 0, res: 0, upd: 0;
       c1z9r: // global
           I64[Sp] = block_c1z9p_info;
           _s1ypf::P64 = R1;
           _s1ypg::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s1ypg::P64;
           P64[Sp + 24] = _s1ypf::P64;
           if (R1 & 7 != 0) goto u1z9X; else goto c1z9s;
       u1z9X: // global
           call _c1z9p(R1) args: 0, res: 0, upd: 0;
       c1z9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z9f_info" {
     block_c1z9f_info:
         const _c1z9f;
         const 131;
         const 30;
 },
 _c1z9m() //  []
         { []
         }
     {offset
       c1z9m: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1z9p() //  [R1]
         { []
         }
     {offset
       c1z9p: // global
           if (R1 & 7 == 1) goto u1z9T; else goto c1z9D;
       u1z9T: // global
           Sp = Sp + 24;
           call _c1z9J() args: 0, res: 0, upd: 0;
       c1z9D: // global
           _s1yp6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1z9B_info;
           R2 = _s1yp6::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z9p_info" {
     block_c1z9p_info:
         const _c1z9p;
         const 3;
         const 30;
 },
 _c1z9B() //  [R1]
         { []
         }
     {offset
       c1z9B: // global
           if (R1 & 7 == 1) goto u1z9U; else goto c1z9N;
       u1z9U: // global
           Sp = Sp + 16;
           call _c1z9J() args: 0, res: 0, upd: 0;
       c1z9N: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1z9B_info" {
     block_c1z9B_info:
         const _c1z9B;
         const 2;
         const 30;
 },
 _c1z9J() //  []
         { []
         }
     {offset
       c1z9J: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$w$csconcat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1za1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1za5; else goto c1za4;
       c1za5: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$w$csconcat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1za4: // global
           I64[Hp - 8] = go_s1yp9_info;
           P64[Hp] = R2;
           _s1yp7::P64 = R3;
           R3 = R4;
           R2 = _s1yp7::P64;
           R1 = Hp - 6;
           call go_s1yp9_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$w$csconcat1_info" {
     Data.Functor.Utils.$w$csconcat1_info:
         const Data.Functor.Utils.$w$csconcat1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.359989353 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMin_$csconcat_closure" {
     Data.Functor.Utils.$fSemigroupMin_$csconcat_closure:
         const Data.Functor.Utils.$fSemigroupMin_$csconcat_info;
 },
 Data.Functor.Utils.$fSemigroupMin_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zaT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zaU; else goto c1zaV;
       c1zaU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMin_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zaV: // global
           I64[Sp - 16] = block_c1zaQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1zaZ; else goto c1zaR;
       u1zaZ: // global
           call _c1zaQ(R1) args: 0, res: 0, upd: 0;
       c1zaR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMin_$csconcat_info" {
     Data.Functor.Utils.$fSemigroupMin_$csconcat_info:
         const Data.Functor.Utils.$fSemigroupMin_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1zaQ() //  [R1]
         { []
         }
     {offset
       c1zaQ: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Functor.Utils.$w$csconcat1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zaQ_info" {
     block_c1zaQ_info:
         const _c1zaQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.368930189 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMin_closure" {
     Data.Functor.Utils.$fSemigroupMin_closure:
         const Data.Functor.Utils.$fSemigroupMin_info;
         const 0;
 },
 sat_s1yps_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zbi: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMin_$cstimes_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1yps_info" {
     sat_s1yps_info:
         const sat_s1yps_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1yw7_srt+32;
 },
 sat_s1ypr_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zbq: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMin_$csconcat_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1ypr_info" {
     sat_s1ypr_info:
         const sat_s1ypr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1ypq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zby: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMin_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1ypq_info" {
     sat_s1ypq_info:
         const sat_s1ypq_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Utils.$fSemigroupMin_entry() //  [R2]
         { []
         }
     {offset
       c1zbC: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1zbG; else goto c1zbF;
       c1zbG: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zbF: // global
           I64[Hp - 72] = sat_s1yps_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1ypr_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1ypq_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMin_info" {
     Data.Functor.Utils.$fSemigroupMin_info:
         const Data.Functor.Utils.$fSemigroupMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1yw7_srt+32;
 },
 section ""data" . Data.Functor.Utils.$fSemigroupMin_$cstimes_closure" {
     Data.Functor.Utils.$fSemigroupMin_$cstimes_closure:
         const Data.Functor.Utils.$fSemigroupMin_$cstimes_info;
         const 0;
 },
 sat_s1ypv_entry() //  [R1]
         { []
         }
     {offset
       c1zbP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zbQ; else goto c1zbR;
       c1zbQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zbR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ypv_info" {
     sat_s1ypv_info:
         const sat_s1ypv_entry;
         const 1;
         const 4294967312;
         const S1yw7_srt+40;
 },
 Data.Functor.Utils.$fSemigroupMin_$cstimes_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zbS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zbW; else goto c1zbV;
       c1zbW: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMin_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zbV: // global
           I64[Hp - 16] = sat_s1ypv_info;
           P64[Hp] = R2;
           _s1ypu::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1ypu::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMin_$cstimes_info" {
     Data.Functor.Utils.$fSemigroupMin_$cstimes_info:
         const Data.Functor.Utils.$fSemigroupMin_$cstimes_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const S1yw7_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.383785482 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMin_$cmconcat_closure" {
     Data.Functor.Utils.$fMonoidMin_$cmconcat_closure:
         const Data.Functor.Utils.$fMonoidMin_$cmconcat_info;
 },
 go_s1ypy_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zcC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1zcD; else goto c1zcE;
       c1zcD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zcE: // global
           I64[Sp - 24] = block_c1zcv_info;
           _s1ypy::P64 = R1;
           _s1ypw::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s1ypw::P64;
           P64[Sp - 8] = _s1ypy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1zdo; else goto c1zcw;
       u1zdo: // global
           call _c1zcv(R1) args: 0, res: 0, upd: 0;
       c1zcw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1ypy_info" {
     go_s1ypy_info:
         const go_s1ypy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c1zcv() //  [R1]
         { []
         }
     {offset
       c1zcv: // global
           if (R1 & 7 == 1) goto c1zcz; else goto c1zcA;
       c1zcz: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1zcA: // global
           I64[Sp] = block_c1zcK_info;
           R2 = P64[R1 + 14];
           _s1ypB::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1ypB::P64;
           call go_s1ypy_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zcv_info" {
     block_c1zcv_info:
         const _c1zcv;
         const 2;
         const 30;
 },
 _c1zcK() //  [R1]
         { []
         }
     {offset
       c1zcK: // global
           _s1ypB::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1zcR; else goto c1zcW;
       c1zcR: // global
           R1 = _s1ypB::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1zcW: // global
           I64[Sp - 8] = block_c1zcU_info;
           _s1ypD::P64 = R1;
           _s1ypE::P64 = P64[R1 + 6];
           R1 = _s1ypB::P64;
           P64[Sp] = _s1ypE::P64;
           P64[Sp + 16] = _s1ypD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1zdp; else goto c1zcX;
       u1zdp: // global
           call _c1zcU(R1) args: 0, res: 0, upd: 0;
       c1zcX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zcK_info" {
     block_c1zcK_info:
         const _c1zcK;
         const 2;
         const 30;
 },
 _c1zcU() //  [R1]
         { []
         }
     {offset
       c1zcU: // global
           if (R1 & 7 == 1) goto u1zdm; else goto c1zd8;
       u1zdm: // global
           Sp = Sp + 24;
           call _c1zde() args: 0, res: 0, upd: 0;
       c1zd8: // global
           _s1ypE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1zd6_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1ypE::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zcU_info" {
     block_c1zcU_info:
         const _c1zcU;
         const 3;
         const 30;
 },
 _c1zd6() //  [R1]
         { []
         }
     {offset
       c1zd6: // global
           if (R1 & 7 == 1) goto u1zdn; else goto c1zdi;
       u1zdn: // global
           Sp = Sp + 16;
           call _c1zde() args: 0, res: 0, upd: 0;
       c1zdi: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zd6_info" {
     block_c1zd6_info:
         const _c1zd6;
         const 2;
         const 30;
 },
 _c1zde() //  []
         { []
         }
     {offset
       c1zde: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$fMonoidMin_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zds: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1zdw; else goto c1zdv;
       c1zdw: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMin_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zdv: // global
           I64[Hp - 8] = go_s1ypy_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s1ypy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMin_$cmconcat_info" {
     Data.Functor.Utils.$fMonoidMin_$cmconcat_info:
         const Data.Functor.Utils.$fMonoidMin_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.39871684 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMin_closure" {
     Data.Functor.Utils.$fMonoidMin_closure:
         const Data.Functor.Utils.$fMonoidMin_info;
         const 0;
 },
 sat_s1ypL_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zek: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fMonoidMin_$cmconcat_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1ypL_info" {
     sat_s1ypL_info:
         const sat_s1ypL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1ypK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zes: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMin_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1ypK_info" {
     sat_s1ypK_info:
         const sat_s1ypK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1ypJ_entry() //  [R1]
         { []
         }
     {offset
       c1zez: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zeA; else goto c1zeB;
       c1zeA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zeB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ypJ_info" {
     sat_s1ypJ_info:
         const sat_s1ypJ_entry;
         const 1;
         const 4294967312;
         const S1yw7_srt+40;
 },
 Data.Functor.Utils.$fMonoidMin_entry() //  [R2]
         { []
         }
     {offset
       c1zeD: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1zeH; else goto c1zeG;
       c1zeH: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zeG: // global
           I64[Hp - 88] = sat_s1ypL_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1ypK_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1ypJ_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = Hp - 70;
           P64[Hp] = Hp - 87;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMin_info" {
     Data.Functor.Utils.$fMonoidMin_info:
         const Data.Functor.Utils.$fMonoidMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1yw7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.407957466 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateL2_closure" {
     Data.Functor.Utils.$fFunctorStateL2_closure:
         const Data.Functor.Utils.$fFunctorStateL2_info;
 },
 sat_s1ypY_entry() //  [R1]
         { []
         }
     {offset
       c1zfa: // global
           _s1ypY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zfb; else goto c1zfc;
       c1zfc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zfe; else goto c1zfd;
       c1zfe: // global
           HpAlloc = 24;
           goto c1zfb;
       c1zfb: // global
           R1 = _s1ypY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zfd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ypY::P64;
           _s1ypM::P64 = P64[_s1ypY::P64 + 16];
           _s1ypP::P64 = P64[_s1ypY::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1ypP::P64;
           R2 = Hp - 16;
           R1 = _s1ypM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ypY_info" {
     sat_s1ypY_info:
         const sat_s1ypY_entry;
         const 2;
         const 18;
 },
 Data.Functor.Utils.$fFunctorStateL2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zfh: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zfl; else goto c1zfk;
       c1zfl: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateL2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zfk: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_s1ypY_info;
           P64[Hp - 56] = R2;
           _c1zf4::P64 = Hp - 104;
           P64[Hp - 48] = _c1zf4::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zf4::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateL2_info" {
     Data.Functor.Utils.$fFunctorStateL2_info:
         const Data.Functor.Utils.$fFunctorStateL2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.415048306 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateL1_closure" {
     Data.Functor.Utils.$fFunctorStateL1_closure:
         const Data.Functor.Utils.$fFunctorStateL1_info;
 },
 sat_s1yq5_entry() //  [R1]
         { []
         }
     {offset
       c1zfH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1zfI; else goto c1zfJ;
       c1zfI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zfJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1zfF_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yq5_info" {
     sat_s1yq5_info:
         const sat_s1yq5_entry;
         const 2;
         const 18;
 },
 _c1zfF() //  [R1]
         { []
         }
     {offset
       c1zfF: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zfF_info" {
     block_c1zfF_info:
         const _c1zfF;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fFunctorStateL1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zfO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1zfS; else goto c1zfR;
       c1zfS: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateL1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zfR: // global
           I64[Hp - 48] = sat_s1yq5_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateL1_info" {
     Data.Functor.Utils.$fFunctorStateL1_info:
         const Data.Functor.Utils.$fFunctorStateL1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.421657318 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateL_closure" {
     Data.Functor.Utils.$fFunctorStateL_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Utils.$fFunctorStateL2_closure+3;
         const Data.Functor.Utils.$fFunctorStateL1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.425402202 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL3_closure" {
     Data.Functor.Utils.$fApplicativeStateL3_closure:
         const Data.Functor.Utils.$fApplicativeStateL3_info;
 },
 ds1_s1yqb_entry() //  [R1]
         { []
         }
     {offset
       c1zgh: // global
           _s1yqb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zgi; else goto c1zgj;
       c1zgj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zgl; else goto c1zgk;
       c1zgl: // global
           HpAlloc = 24;
           goto c1zgi;
       c1zgi: // global
           R1 = _s1yqb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zgk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1yqb::P64;
           _s1yq8::P64 = P64[_s1yqb::P64 + 16];
           _s1yqa::P64 = P64[_s1yqb::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1yqa::P64;
           R2 = Hp - 16;
           R1 = _s1yq8::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1yqb_info" {
     ds1_s1yqb_info:
         const ds1_s1yqb_entry;
         const 2;
         const 18;
 },
 sat_s1yqs_entry() //  [R1]
         { []
         }
     {offset
       c1zgs: // global
           _s1yqs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zgt; else goto c1zgu;
       c1zgu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1zgw; else goto c1zgv;
       c1zgw: // global
           HpAlloc = 48;
           goto c1zgt;
       c1zgt: // global
           R1 = _s1yqs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zgv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1yqs::P64;
           _s1yq6::P64 = P64[_s1yqs::P64 + 16];
           _s1yqa::P64 = P64[_s1yqs::P64 + 24];
           _s1yqb::P64 = P64[_s1yqs::P64 + 32];
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _s1yqb::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1yqa::P64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = _s1yq6::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yqs_info" {
     sat_s1yqs_info:
         const sat_s1yqs_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateL3_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       c1zgz: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c1zgD; else goto c1zgC;
       c1zgD: // global
           HpAlloc = 152;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zgC: // global
           I64[Hp - 144] = stg_ap_2_upd_info;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = ds1_s1yqb_info;
           P64[Hp - 96] = R4;
           _c1zgb::P64 = Hp - 144;
           P64[Hp - 88] = _c1zgb::P64;
           I64[Hp - 80] = sat_s1yqs_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = _c1zgb::P64;
           _c1zgc::P64 = Hp - 112;
           P64[Hp - 48] = _c1zgc::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zgc::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL3_info" {
     Data.Functor.Utils.$fApplicativeStateL3_info:
         const Data.Functor.Utils.$fApplicativeStateL3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.435676539 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL4_closure" {
     Data.Functor.Utils.$fApplicativeStateL4_closure:
         const Data.Functor.Utils.$fApplicativeStateL4_info;
 },
 ds1_s1yqx_entry() //  [R1]
         { []
         }
     {offset
       c1zh3: // global
           _s1yqx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zh4; else goto c1zh5;
       c1zh5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zh7; else goto c1zh6;
       c1zh7: // global
           HpAlloc = 24;
           goto c1zh4;
       c1zh4: // global
           R1 = _s1yqx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zh6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1yqx::P64;
           _s1yqu::P64 = P64[_s1yqx::P64 + 16];
           _s1yqw::P64 = P64[_s1yqx::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1yqw::P64;
           R2 = Hp - 16;
           R1 = _s1yqu::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1yqx_info" {
     ds1_s1yqx_info:
         const ds1_s1yqx_entry;
         const 2;
         const 18;
 },
 sat_s1yqN_entry() //  [R1]
         { []
         }
     {offset
       c1zhf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1zhj; else goto c1zhk;
       c1zhj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zhk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1zhc_info;
           _s1yqx::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s1yqx::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1zho; else goto c1zhd;
       u1zho: // global
           call _c1zhc(R1) args: 0, res: 0, upd: 0;
       c1zhd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yqN_info" {
     sat_s1yqN_info:
         const sat_s1yqN_entry;
         const 2;
         const 18;
 },
 _c1zhc() //  [R1]
         { []
         }
     {offset
       c1zhc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zhn; else goto c1zhm;
       c1zhn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1zhm: // global
           _s1yqI::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = _s1yqI::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zhc_info" {
     block_c1zhc_info:
         const _c1zhc;
         const 1;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateL4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zhr: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1zhv; else goto c1zhu;
       c1zhv: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zhu: // global
           I64[Hp - 136] = stg_ap_2_upd_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = ds1_s1yqx_info;
           P64[Hp - 88] = R3;
           _c1zgX::P64 = Hp - 136;
           P64[Hp - 80] = _c1zgX::P64;
           I64[Hp - 72] = sat_s1yqN_info;
           P64[Hp - 56] = _c1zgX::P64;
           _c1zgY::P64 = Hp - 104;
           P64[Hp - 48] = _c1zgY::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zgY::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL4_info" {
     Data.Functor.Utils.$fApplicativeStateL4_info:
         const Data.Functor.Utils.$fApplicativeStateL4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.447053612 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL5_closure" {
     Data.Functor.Utils.$fApplicativeStateL5_closure:
         const Data.Functor.Utils.$fApplicativeStateL5_info;
 },
 Data.Functor.Utils.$fApplicativeStateL5_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zhV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zhZ; else goto c1zhY;
       c1zhZ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zhY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL5_info" {
     Data.Functor.Utils.$fApplicativeStateL5_info:
         const Data.Functor.Utils.$fApplicativeStateL5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.452204194 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL2_closure" {
     Data.Functor.Utils.$fApplicativeStateL2_closure:
         const Data.Functor.Utils.$fApplicativeStateL2_info;
 },
 sat_s1yqX_entry() //  [R1]
         { []
         }
     {offset
       c1zij: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1zik; else goto c1zil;
       c1zik: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zil: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1zih_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yqX_info" {
     sat_s1yqX_info:
         const sat_s1yqX_entry;
         const 2;
         const 18;
 },
 _c1zih() //  [R1]
         { []
         }
     {offset
       c1zih: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zih_info" {
     block_c1zih_info:
         const _c1zih;
         const 0;
         const 30;
 },
 ds_s1yqT_entry() //  [R1]
         { []
         }
     {offset
       c1zip: // global
           _s1yqT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1ziq; else goto c1zir;
       c1zir: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1zit; else goto c1zis;
       c1zit: // global
           HpAlloc = 32;
           goto c1ziq;
       c1ziq: // global
           R1 = _s1yqT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zis: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1yqT::P64;
           _s1yqQ::P64 = P64[_s1yqT::P64 + 16];
           _s1yqR::P64 = P64[_s1yqT::P64 + 24];
           _s1yqS::P64 = P64[_s1yqT::P64 + 32];
           I64[Hp - 24] = sat_s1yqX_info;
           P64[Hp - 8] = _s1yqQ::P64;
           P64[Hp] = _s1yqS::P64;
           R2 = Hp - 24;
           R1 = _s1yqR::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1yqT_info" {
     ds_s1yqT_info:
         const ds_s1yqT_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateL2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zix: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1ziB; else goto c1ziA;
       c1ziB: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ziA: // global
           I64[Hp - 104] = ds_s1yqT_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c1zi9::P64 = Hp - 104;
           P64[Hp - 48] = _c1zi9::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zi9::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL2_info" {
     Data.Functor.Utils.$fApplicativeStateL2_info:
         const Data.Functor.Utils.$fApplicativeStateL2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.463237588 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL1_closure" {
     Data.Functor.Utils.$fApplicativeStateL1_closure:
         const Data.Functor.Utils.$fApplicativeStateL1_info;
 },
 sat_s1yrh_entry() //  [R1]
         { []
         }
     {offset
       c1zj7: // global
           _s1yrh::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1zj8; else goto c1zj9;
       c1zj9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zjb; else goto c1zja;
       c1zjb: // global
           HpAlloc = 24;
           goto c1zj8;
       c1zj8: // global
           R1 = _s1yrh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zja: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1yrh::P64;
           _s1yr7::P64 = P64[_s1yrh::P64 + 16];
           _s1yr9::P64 = P64[_s1yrh::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1yr9::P64;
           I64[Sp - 24] = block_c1zj5_info;
           R2 = Hp - 16;
           R1 = _s1yr7::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yrh_info" {
     sat_s1yrh_info:
         const sat_s1yrh_entry;
         const 2;
         const 18;
 },
 _c1zj5() //  [R1]
         { []
         }
     {offset
       c1zj5: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zj5_info" {
     block_c1zj5_info:
         const _c1zj5;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateL1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zjg: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zjk; else goto c1zjj;
       c1zjk: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zjj: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = stg_sel_1_upd_info;
           _c1ziY::P64 = Hp - 104;
           P64[Hp - 56] = _c1ziY::P64;
           I64[Hp - 48] = sat_s1yrh_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = _c1ziY::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL1_info" {
     Data.Functor.Utils.$fApplicativeStateL1_info:
         const Data.Functor.Utils.$fApplicativeStateL1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.470538026 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL_closure" {
     Data.Functor.Utils.$fApplicativeStateL_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Functor.Utils.$fFunctorStateL_closure+1;
         const Data.Functor.Utils.$fApplicativeStateL5_closure+2;
         const Data.Functor.Utils.$fApplicativeStateL4_closure+3;
         const Data.Functor.Utils.$fApplicativeStateL3_closure+4;
         const Data.Functor.Utils.$fApplicativeStateL2_closure+3;
         const Data.Functor.Utils.$fApplicativeStateL1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.473606161 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateR2_closure" {
     Data.Functor.Utils.$fFunctorStateR2_closure:
         const Data.Functor.Utils.$fFunctorStateR2_info;
 },
 sat_s1yry_entry() //  [R1]
         { []
         }
     {offset
       c1zjK: // global
           _s1yry::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zjL; else goto c1zjM;
       c1zjM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zjO; else goto c1zjN;
       c1zjO: // global
           HpAlloc = 24;
           goto c1zjL;
       c1zjL: // global
           R1 = _s1yry::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zjN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1yry::P64;
           _s1yrm::P64 = P64[_s1yry::P64 + 16];
           _s1yrp::P64 = P64[_s1yry::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1yrp::P64;
           R2 = Hp - 16;
           R1 = _s1yrm::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yry_info" {
     sat_s1yry_info:
         const sat_s1yry_entry;
         const 2;
         const 18;
 },
 Data.Functor.Utils.$fFunctorStateR2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zjR: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zjV; else goto c1zjU;
       c1zjV: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateR2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zjU: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_s1yry_info;
           P64[Hp - 56] = R2;
           _c1zjE::P64 = Hp - 104;
           P64[Hp - 48] = _c1zjE::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zjE::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateR2_info" {
     Data.Functor.Utils.$fFunctorStateR2_info:
         const Data.Functor.Utils.$fFunctorStateR2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.480601034 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateR1_closure" {
     Data.Functor.Utils.$fFunctorStateR1_closure:
         const Data.Functor.Utils.$fFunctorStateR1_info;
 },
 sat_s1yrF_entry() //  [R1]
         { []
         }
     {offset
       c1zkh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1zki; else goto c1zkj;
       c1zki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zkj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1zkf_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1yrF_info" {
     sat_s1yrF_info:
         const sat_s1yrF_entry;
         const 2;
         const 18;
 },
 _c1zkf() //  [R1]
         { []
         }
     {offset
       c1zkf: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zkf_info" {
     block_c1zkf_info:
         const _c1zkf;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fFunctorStateR1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zko: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1zks; else goto c1zkr;
       c1zks: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateR1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zkr: // global
           I64[Hp - 48] = sat_s1yrF_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateR1_info" {
     Data.Functor.Utils.$fFunctorStateR1_info:
         const Data.Functor.Utils.$fFunctorStateR1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.487125207 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateR_closure" {
     Data.Functor.Utils.$fFunctorStateR_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Utils.$fFunctorStateR2_closure+3;
         const Data.Functor.Utils.$fFunctorStateR1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.491664991 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR3_closure" {
     Data.Functor.Utils.$fApplicativeStateR3_closure:
         const Data.Functor.Utils.$fApplicativeStateR3_info;
 },
 ds1_s1yrL_entry() //  [R1]
         { []
         }
     {offset
       c1zkR: // global
           _s1yrL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zkS; else goto c1zkT;
       c1zkT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zkV; else goto c1zkU;
       c1zkV: // global
           HpAlloc = 24;
           goto c1zkS;
       c1zkS: // global
           R1 = _s1yrL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zkU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1yrL::P64;
           _s1yrH::P64 = P64[_s1yrL::P64 + 16];
           _s1yrK::P64 = P64[_s1yrL::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1yrK::P64;
           R2 = Hp - 16;
           R1 = _s1yrH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1yrL_info" {
     ds1_s1yrL_info:
         const ds1_s1yrL_entry;
         const 2;
         const 18;
 },
 sat_s1ys2_entry() //  [R1]
         { []
         }
     {offset
       c1zl2: // global
           _s1ys2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zl3; else goto c1zl4;
       c1zl4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1zl6; else goto c1zl5;
       c1zl6: // global
           HpAlloc = 48;
           goto c1zl3;
       c1zl3: // global
           R1 = _s1ys2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zl5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ys2::P64;
           _s1yrG::P64 = P64[_s1ys2::P64 + 16];
           _s1yrK::P64 = P64[_s1ys2::P64 + 24];
           _s1yrL::P64 = P64[_s1ys2::P64 + 32];
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _s1yrK::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1yrL::P64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = _s1yrG::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ys2_info" {
     sat_s1ys2_info:
         const sat_s1ys2_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateR3_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       c1zl9: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c1zld; else goto c1zlc;
       c1zld: // global
           HpAlloc = 152;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zlc: // global
           I64[Hp - 144] = stg_ap_2_upd_info;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = ds1_s1yrL_info;
           P64[Hp - 96] = R3;
           _c1zkL::P64 = Hp - 144;
           P64[Hp - 88] = _c1zkL::P64;
           I64[Hp - 80] = sat_s1ys2_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = _c1zkL::P64;
           _c1zkM::P64 = Hp - 112;
           P64[Hp - 48] = _c1zkM::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zkM::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR3_info" {
     Data.Functor.Utils.$fApplicativeStateR3_info:
         const Data.Functor.Utils.$fApplicativeStateR3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.501530734 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR4_closure" {
     Data.Functor.Utils.$fApplicativeStateR4_closure:
         const Data.Functor.Utils.$fApplicativeStateR4_info;
 },
 ds1_s1ys7_entry() //  [R1]
         { []
         }
     {offset
       c1zlD: // global
           _s1ys7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zlE; else goto c1zlF;
       c1zlF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zlH; else goto c1zlG;
       c1zlH: // global
           HpAlloc = 24;
           goto c1zlE;
       c1zlE: // global
           R1 = _s1ys7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zlG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ys7::P64;
           _s1ys3::P64 = P64[_s1ys7::P64 + 16];
           _s1ys6::P64 = P64[_s1ys7::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1ys6::P64;
           R2 = Hp - 16;
           R1 = _s1ys3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1ys7_info" {
     ds1_s1ys7_info:
         const ds1_s1ys7_entry;
         const 2;
         const 18;
 },
 sat_s1ysn_entry() //  [R1]
         { []
         }
     {offset
       c1zlP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1zlT; else goto c1zlU;
       c1zlT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zlU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1zlM_info;
           _s1ys6::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s1ys6::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1zlY; else goto c1zlN;
       u1zlY: // global
           call _c1zlM(R1) args: 0, res: 0, upd: 0;
       c1zlN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ysn_info" {
     sat_s1ysn_info:
         const sat_s1ysn_entry;
         const 2;
         const 18;
 },
 _c1zlM() //  [R1]
         { []
         }
     {offset
       c1zlM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zlX; else goto c1zlW;
       c1zlX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1zlW: // global
           _s1ysi::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = _s1ysi::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zlM_info" {
     block_c1zlM_info:
         const _c1zlM;
         const 1;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateR4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zm1: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1zm5; else goto c1zm4;
       c1zm5: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zm4: // global
           I64[Hp - 136] = stg_ap_2_upd_info;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = ds1_s1ys7_info;
           P64[Hp - 88] = R2;
           _c1zlx::P64 = Hp - 136;
           P64[Hp - 80] = _c1zlx::P64;
           I64[Hp - 72] = sat_s1ysn_info;
           P64[Hp - 56] = _c1zlx::P64;
           _c1zly::P64 = Hp - 104;
           P64[Hp - 48] = _c1zly::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zly::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR4_info" {
     Data.Functor.Utils.$fApplicativeStateR4_info:
         const Data.Functor.Utils.$fApplicativeStateR4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.512090342 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR2_closure" {
     Data.Functor.Utils.$fApplicativeStateR2_closure:
         const Data.Functor.Utils.$fApplicativeStateR2_info;
 },
 sat_s1ysz_entry() //  [R1]
         { []
         }
     {offset
       c1zmD: // global
           _s1ysz::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1zmE; else goto c1zmF;
       c1zmF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zmH; else goto c1zmG;
       c1zmH: // global
           HpAlloc = 24;
           goto c1zmE;
       c1zmE: // global
           R1 = _s1ysz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zmG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ysz::P64;
           _s1yso::P64 = P64[_s1ysz::P64 + 16];
           _s1ysr::P64 = P64[_s1ysz::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1ysr::P64;
           I64[Sp - 24] = block_c1zmB_info;
           R2 = Hp - 16;
           R1 = _s1yso::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ysz_info" {
     sat_s1ysz_info:
         const sat_s1ysz_entry;
         const 2;
         const 18;
 },
 _c1zmB() //  [R1]
         { []
         }
     {offset
       c1zmB: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zmB_info" {
     block_c1zmB_info:
         const _c1zmB;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateR2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zmM: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zmQ; else goto c1zmP;
       c1zmQ: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zmP: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = stg_sel_1_upd_info;
           _c1zmu::P64 = Hp - 104;
           P64[Hp - 56] = _c1zmu::P64;
           I64[Hp - 48] = sat_s1ysz_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = _c1zmu::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR2_info" {
     Data.Functor.Utils.$fApplicativeStateR2_info:
         const Data.Functor.Utils.$fApplicativeStateR2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.521746651 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR1_closure" {
     Data.Functor.Utils.$fApplicativeStateR1_closure:
         const Data.Functor.Utils.$fApplicativeStateR1_info;
 },
 sat_s1ysL_entry() //  [R1]
         { []
         }
     {offset
       c1znj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1znk; else goto c1znl;
       c1znk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1znl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1znh_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ysL_info" {
     sat_s1ysL_info:
         const sat_s1ysL_entry;
         const 2;
         const 18;
 },
 _c1znh() //  [R1]
         { []
         }
     {offset
       c1znh: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1znh_info" {
     block_c1znh_info:
         const _c1znh;
         const 0;
         const 30;
 },
 ds2_s1ysH_entry() //  [R1]
         { []
         }
     {offset
       c1znp: // global
           _s1ysH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1znq; else goto c1znr;
       c1znr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1znt; else goto c1zns;
       c1znt: // global
           HpAlloc = 32;
           goto c1znq;
       c1znq: // global
           R1 = _s1ysH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zns: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ysH::P64;
           _s1ysE::P64 = P64[_s1ysH::P64 + 16];
           _s1ysF::P64 = P64[_s1ysH::P64 + 24];
           _s1ysG::P64 = P64[_s1ysH::P64 + 32];
           I64[Hp - 24] = sat_s1ysL_info;
           P64[Hp - 8] = _s1ysF::P64;
           P64[Hp] = _s1ysG::P64;
           R2 = Hp - 24;
           R1 = _s1ysE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s1ysH_info" {
     ds2_s1ysH_info:
         const ds2_s1ysH_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateR1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1znx: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1znB; else goto c1znA;
       c1znB: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1znA: // global
           I64[Hp - 104] = ds2_s1ysH_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c1zn9::P64 = Hp - 104;
           P64[Hp - 48] = _c1zn9::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zn9::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR1_info" {
     Data.Functor.Utils.$fApplicativeStateR1_info:
         const Data.Functor.Utils.$fApplicativeStateR1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.530271785 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR_closure" {
     Data.Functor.Utils.$fApplicativeStateR_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Functor.Utils.$fFunctorStateR_closure+1;
         const Data.Functor.Utils.$fApplicativeStateL5_closure+2;
         const Data.Functor.Utils.$fApplicativeStateR4_closure+3;
         const Data.Functor.Utils.$fApplicativeStateR3_closure+4;
         const Data.Functor.Utils.$fApplicativeStateR2_closure+3;
         const Data.Functor.Utils.$fApplicativeStateR1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.532485228 UTC

[section ""data" . Data.Functor.Utils.getMax1_closure" {
     Data.Functor.Utils.getMax1_closure:
         const Data.Functor.Utils.getMax1_info;
 },
 Data.Functor.Utils.getMax1_entry() //  [R2]
         { []
         }
     {offset
       c1znZ: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMax1_info" {
     Data.Functor.Utils.getMax1_info:
         const Data.Functor.Utils.getMax1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.535888925 UTC

[section ""data" . Data.Functor.Utils.getMax_closure" {
     Data.Functor.Utils.getMax_closure:
         const Data.Functor.Utils.getMax_info;
 },
 Data.Functor.Utils.getMax_entry() //  [R2]
         { []
         }
     {offset
       c1zoc: // global
           R2 = R2;
           call Data.Functor.Utils.getMax1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMax_info" {
     Data.Functor.Utils.getMax_info:
         const Data.Functor.Utils.getMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.539627573 UTC

[section ""data" . Data.Functor.Utils.getMin1_closure" {
     Data.Functor.Utils.getMin1_closure:
         const Data.Functor.Utils.getMin1_info;
 },
 Data.Functor.Utils.getMin1_entry() //  [R2]
         { []
         }
     {offset
       c1zon: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMin1_info" {
     Data.Functor.Utils.getMin1_info:
         const Data.Functor.Utils.getMin1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.543086342 UTC

[section ""data" . Data.Functor.Utils.getMin_closure" {
     Data.Functor.Utils.getMin_closure:
         const Data.Functor.Utils.getMin_info;
 },
 Data.Functor.Utils.getMin_entry() //  [R2]
         { []
         }
     {offset
       c1zoA: // global
           R2 = R2;
           call Data.Functor.Utils.getMin1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMin_info" {
     Data.Functor.Utils.getMin_info:
         const Data.Functor.Utils.getMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.546619299 UTC

[section ""data" . Data.Functor.Utils.runStateL1_closure" {
     Data.Functor.Utils.runStateL1_closure:
         const Data.Functor.Utils.runStateL1_info;
 },
 Data.Functor.Utils.runStateL1_entry() //  [R2]
         { []
         }
     {offset
       c1zoL: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateL1_info" {
     Data.Functor.Utils.runStateL1_info:
         const Data.Functor.Utils.runStateL1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.550906763 UTC

[section ""data" . Data.Functor.Utils.runStateL_closure" {
     Data.Functor.Utils.runStateL_closure:
         const Data.Functor.Utils.runStateL_info;
 },
 Data.Functor.Utils.runStateL_entry() //  [R2]
         { []
         }
     {offset
       c1zoW: // global
           R2 = R2;
           call Data.Functor.Utils.runStateL1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateL_info" {
     Data.Functor.Utils.runStateL_info:
         const Data.Functor.Utils.runStateL_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.554443478 UTC

[section ""data" . Data.Functor.Utils.runStateR1_closure" {
     Data.Functor.Utils.runStateR1_closure:
         const Data.Functor.Utils.runStateR1_info;
 },
 Data.Functor.Utils.runStateR1_entry() //  [R2]
         { []
         }
     {offset
       c1zp7: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateR1_info" {
     Data.Functor.Utils.runStateR1_info:
         const Data.Functor.Utils.runStateR1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.557742026 UTC

[section ""data" . Data.Functor.Utils.runStateR_closure" {
     Data.Functor.Utils.runStateR_closure:
         const Data.Functor.Utils.runStateR_info;
 },
 Data.Functor.Utils.runStateR_entry() //  [R2]
         { []
         }
     {offset
       c1zpi: // global
           R2 = R2;
           call Data.Functor.Utils.runStateR1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateR_info" {
     Data.Functor.Utils.runStateR_info:
         const Data.Functor.Utils.runStateR_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.561386738 UTC

[section ""data" . Data.Functor.Utils.#._closure" {
     Data.Functor.Utils.#._closure:
         const Data.Functor.Utils.#._info;
 },
 Data.Functor.Utils.#._entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zpv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zpw; else goto c1zpx;
       c1zpw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.#._closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zpx: // global
           I64[Sp - 16] = block_c1zpt_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Types.coercible_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.#._info" {
     Data.Functor.Utils.#._info:
         const Data.Functor.Utils.#._entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1zpt() //  []
         { []
         }
     {offset
       c1zpt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zpt_info" {
     block_c1zpt_info:
         const _c1zpt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.566184304 UTC

[section ""cstring" . Data.Functor.Utils.$trModule4_bytes" {
     Data.Functor.Utils.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.567870043 UTC

[section ""data" . Data.Functor.Utils.$trModule3_closure" {
     Data.Functor.Utils.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.569598778 UTC

[section ""cstring" . Data.Functor.Utils.$trModule2_bytes" {
     Data.Functor.Utils.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,85,116,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.571259666 UTC

[section ""data" . Data.Functor.Utils.$trModule1_closure" {
     Data.Functor.Utils.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.572963002 UTC

[section ""data" . Data.Functor.Utils.$trModule_closure" {
     Data.Functor.Utils.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Utils.$trModule3_closure+1;
         const Data.Functor.Utils.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.575413922 UTC

[section ""data" . $krep_r1ynX_closure" {
     $krep_r1ynX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.577171691 UTC

[section ""data" . $krep1_r1ynY_closure" {
     $krep1_r1ynY_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.579304161 UTC

[section ""data" . $krep2_r1ynZ_closure" {
     $krep2_r1ynZ_closure:
         const :_con_info;
         const $krep_r1ynX_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.581012178 UTC

[section ""data" . $krep3_r1yo0_closure" {
     $krep3_r1yo0_closure:
         const :_con_info;
         const $krep1_r1ynY_closure+2;
         const $krep2_r1ynZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.582854642 UTC

[section ""data" . $krep4_r1yo1_closure" {
     $krep4_r1yo1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep3_r1yo0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.58458302 UTC

[section ""data" . $krep5_r1yo2_closure" {
     $krep5_r1yo2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r1ynY_closure+2;
         const $krep4_r1yo1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.586416833 UTC

[section ""data" . $krep6_r1yo3_closure" {
     $krep6_r1yo3_closure:
         const :_con_info;
         const $krep1_r1ynY_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.588160722 UTC

[section ""data" . $krep7_r1yo4_closure" {
     $krep7_r1yo4_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r1yo3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.590238151 UTC

[section ""cstring" . Data.Functor.Utils.$tcMax2_bytes" {
     Data.Functor.Utils.$tcMax2_bytes:
         I8[] [77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.591974178 UTC

[section ""data" . Data.Functor.Utils.$tcMax1_closure" {
     Data.Functor.Utils.$tcMax1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcMax2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.593847005 UTC

[section ""data" . Data.Functor.Utils.$tcMax_closure" {
     Data.Functor.Utils.$tcMax_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcMax1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17055998897267803697;
         const 13070619747111935994;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.595685538 UTC

[section ""data" . $krep8_r1yo5_closure" {
     $krep8_r1yo5_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcMax_closure+1;
         const $krep6_r1yo3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.597509942 UTC

[section ""data" . Data.Functor.Utils.$tc'Max1_closure" {
     Data.Functor.Utils.$tc'Max1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1yo4_closure+1;
         const $krep8_r1yo5_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.599237071 UTC

[section ""cstring" . Data.Functor.Utils.$tc'Max3_bytes" {
     Data.Functor.Utils.$tc'Max3_bytes:
         I8[] [39,77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.601537435 UTC

[section ""data" . Data.Functor.Utils.$tc'Max2_closure" {
     Data.Functor.Utils.$tc'Max2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'Max3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.603305068 UTC

[section ""data" . Data.Functor.Utils.$tc'Max_closure" {
     Data.Functor.Utils.$tc'Max_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'Max2_closure+1;
         const Data.Functor.Utils.$tc'Max1_closure+4;
         const 16178335003924091205;
         const 10384293407056089504;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.605149047 UTC

[section ""cstring" . Data.Functor.Utils.$tcMin2_bytes" {
     Data.Functor.Utils.$tcMin2_bytes:
         I8[] [77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.607698822 UTC

[section ""data" . Data.Functor.Utils.$tcMin1_closure" {
     Data.Functor.Utils.$tcMin1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcMin2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.609578489 UTC

[section ""data" . Data.Functor.Utils.$tcMin_closure" {
     Data.Functor.Utils.$tcMin_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcMin1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13719831963261617173;
         const 12509304105097421826;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.611483401 UTC

[section ""data" . $krep9_r1yo6_closure" {
     $krep9_r1yo6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcMin_closure+1;
         const $krep6_r1yo3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.613307875 UTC

[section ""data" . Data.Functor.Utils.$tc'Min1_closure" {
     Data.Functor.Utils.$tc'Min1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1yo4_closure+1;
         const $krep9_r1yo6_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.615020317 UTC

[section ""cstring" . Data.Functor.Utils.$tc'Min3_bytes" {
     Data.Functor.Utils.$tc'Min3_bytes:
         I8[] [39,77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.616723413 UTC

[section ""data" . Data.Functor.Utils.$tc'Min2_closure" {
     Data.Functor.Utils.$tc'Min2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'Min3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.618601576 UTC

[section ""data" . Data.Functor.Utils.$tc'Min_closure" {
     Data.Functor.Utils.$tc'Min_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'Min2_closure+1;
         const Data.Functor.Utils.$tc'Min1_closure+4;
         const 3497961960072019520;
         const 14191657227527039212;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.62036828 UTC

[section ""cstring" . Data.Functor.Utils.$tcStateL2_bytes" {
     Data.Functor.Utils.$tcStateL2_bytes:
         I8[] [83,116,97,116,101,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.622836696 UTC

[section ""data" . Data.Functor.Utils.$tcStateL1_closure" {
     Data.Functor.Utils.$tcStateL1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcStateL2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.624591459 UTC

[section ""data" . Data.Functor.Utils.$tcStateL_closure" {
     Data.Functor.Utils.$tcStateL_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcStateL1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 8498227433031831307;
         const 6442648285908986693;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.626484987 UTC

[section ""data" . $krep10_r1yo7_closure" {
     $krep10_r1yo7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcStateL_closure+1;
         const $krep3_r1yo0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.628831406 UTC

[section ""data" . Data.Functor.Utils.$tc'StateL1_closure" {
     Data.Functor.Utils.$tc'StateL1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1yo2_closure+4;
         const $krep10_r1yo7_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.630706297 UTC

[section ""cstring" . Data.Functor.Utils.$tc'StateL3_bytes" {
     Data.Functor.Utils.$tc'StateL3_bytes:
         I8[] [39,83,116,97,116,101,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.632334287 UTC

[section ""data" . Data.Functor.Utils.$tc'StateL2_closure" {
     Data.Functor.Utils.$tc'StateL2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'StateL3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.634148626 UTC

[section ""data" . Data.Functor.Utils.$tc'StateL_closure" {
     Data.Functor.Utils.$tc'StateL_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'StateL2_closure+1;
         const Data.Functor.Utils.$tc'StateL1_closure+4;
         const 8965240648136302046;
         const 8498113279827793106;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.635897939 UTC

[section ""cstring" . Data.Functor.Utils.$tcStateR2_bytes" {
     Data.Functor.Utils.$tcStateR2_bytes:
         I8[] [83,116,97,116,101,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.637612583 UTC

[section ""data" . Data.Functor.Utils.$tcStateR1_closure" {
     Data.Functor.Utils.$tcStateR1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcStateR2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.639395984 UTC

[section ""data" . Data.Functor.Utils.$tcStateR_closure" {
     Data.Functor.Utils.$tcStateR_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcStateR1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10049146831422350196;
         const 16883721947448934294;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.64119519 UTC

[section ""data" . $krep11_r1yo8_closure" {
     $krep11_r1yo8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcStateR_closure+1;
         const $krep3_r1yo0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.643030443 UTC

[section ""data" . Data.Functor.Utils.$tc'StateR1_closure" {
     Data.Functor.Utils.$tc'StateR1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1yo2_closure+4;
         const $krep11_r1yo8_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.644754188 UTC

[section ""cstring" . Data.Functor.Utils.$tc'StateR3_bytes" {
     Data.Functor.Utils.$tc'StateR3_bytes:
         I8[] [39,83,116,97,116,101,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.646502101 UTC

[section ""data" . Data.Functor.Utils.$tc'StateR2_closure" {
     Data.Functor.Utils.$tc'StateR2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'StateR3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.648308087 UTC

[section ""data" . Data.Functor.Utils.$tc'StateR_closure" {
     Data.Functor.Utils.$tc'StateR_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'StateR2_closure+1;
         const Data.Functor.Utils.$tc'StateR1_closure+4;
         const 13798701525568783897;
         const 17913645303573466967;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:20.650351166 UTC

[section ""relreadonly" . S1yw7_srt" {
     S1yw7_srt:
         const Data.Functor.Utils.$fSemigroupMax_$cstimes_closure;
         const Data.Functor.Utils.$fSemigroupMax_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Utils.$fSemigroupMin_$cstimes_closure;
         const Data.Functor.Utils.$fSemigroupMin_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.597152623 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:21.603326071 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMax_$c<>_closure" {
     Data.Functor.Utils.$fMonoidMax_$c<>_closure:
         const Data.Functor.Utils.$fMonoidMax_$c<>_info;
 },
 Data.Functor.Utils.$fMonoidMax_$c<>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zvt: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1zvu; else goto c1zvv;
       c1zvu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMax_$c<>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zvv: // global
           I64[Sp - 24] = block_c1zvm_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1zw4; else goto c1zvn;
       u1zw4: // global
           call _c1zvm(R1) args: 0, res: 0, upd: 0;
       c1zvn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMax_$c<>_info" {
     Data.Functor.Utils.$fMonoidMax_$c<>_info:
         const Data.Functor.Utils.$fMonoidMax_$c<>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1zvm() //  [R1]
         { []
         }
     {offset
       c1zvm: // global
           _s1zqs::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1zvq; else goto c1zvr;
       c1zvq: // global
           R1 = _s1zqs::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1zvr: // global
           I64[Sp - 8] = block_c1zvB_info;
           _s1zqu::P64 = R1;
           _s1zqv::P64 = P64[R1 + 6];
           R1 = _s1zqs::P64;
           P64[Sp] = _s1zqv::P64;
           P64[Sp + 16] = _s1zqu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1zw3; else goto c1zvD;
       u1zw3: // global
           call _c1zvB(R1) args: 0, res: 0, upd: 0;
       c1zvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zvm_info" {
     block_c1zvm_info:
         const _c1zvm;
         const 2;
         const 30;
 },
 _c1zvB() //  [R1]
         { []
         }
     {offset
       c1zvB: // global
           if (R1 & 7 == 1) goto u1zw1; else goto c1zvO;
       u1zw1: // global
           Sp = Sp + 24;
           call _c1zvU() args: 0, res: 0, upd: 0;
       c1zvO: // global
           _s1zqv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1zvM_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1zqv::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zvB_info" {
     block_c1zvB_info:
         const _c1zvB;
         const 3;
         const 30;
 },
 _c1zvM() //  [R1]
         { []
         }
     {offset
       c1zvM: // global
           if (R1 & 7 == 1) goto u1zw2; else goto c1zvY;
       u1zw2: // global
           Sp = Sp + 16;
           call _c1zvU() args: 0, res: 0, upd: 0;
       c1zvY: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zvM_info" {
     block_c1zvM_info:
         const _c1zvM;
         const 2;
         const 30;
 },
 _c1zvU() //  []
         { []
         }
     {offset
       c1zvU: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.616532086 UTC

[section ""data" . Data.Functor.Utils.$w$csconcat_closure" {
     Data.Functor.Utils.$w$csconcat_closure:
         const Data.Functor.Utils.$w$csconcat_info;
 },
 go_s1zqC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zwW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1zwX; else goto c1zwY;
       c1zwX: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zwY: // global
           I64[Sp - 32] = block_c1zwP_info;
           _s1zqC::P64 = R1;
           _s1zqz::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s1zqz::P64;
           P64[Sp - 16] = _s1zqC::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1zxL; else goto c1zwQ;
       u1zxL: // global
           call _c1zwP(R1) args: 0, res: 0, upd: 0;
       c1zwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1zqC_info" {
     go_s1zqC_info:
         const go_s1zqC_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c1zwP() //  [R1]
         { []
         }
     {offset
       c1zwP: // global
           if (R1 & 7 == 1) goto u1zxG; else goto c1zwU;
       u1zxG: // global
           Sp = Sp + 24;
           call _c1zxb() args: 0, res: 0, upd: 0;
       c1zwU: // global
           I64[Sp] = block_c1zx4_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           call go_s1zqC_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zwP_info" {
     block_c1zwP_info:
         const _c1zwP;
         const 3;
         const 30;
 },
 _c1zx4() //  [R1]
         { []
         }
     {offset
       c1zx4: // global
           if (R1 & 7 == 1) goto u1zxH; else goto c1zxg;
       u1zxH: // global
           Sp = Sp + 24;
           call _c1zxb() args: 0, res: 0, upd: 0;
       c1zxg: // global
           I64[Sp] = block_c1zxe_info;
           _s1zqI::P64 = R1;
           _s1zqJ::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s1zqJ::P64;
           P64[Sp + 24] = _s1zqI::P64;
           if (R1 & 7 != 0) goto u1zxM; else goto c1zxh;
       u1zxM: // global
           call _c1zxe(R1) args: 0, res: 0, upd: 0;
       c1zxh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zx4_info" {
     block_c1zx4_info:
         const _c1zx4;
         const 131;
         const 30;
 },
 _c1zxb() //  []
         { []
         }
     {offset
       c1zxb: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1zxe() //  [R1]
         { []
         }
     {offset
       c1zxe: // global
           if (R1 & 7 == 1) goto u1zxI; else goto c1zxs;
       u1zxI: // global
           Sp = Sp + 24;
           call _c1zxy() args: 0, res: 0, upd: 0;
       c1zxs: // global
           _s1zqz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1zxq_info;
           R2 = _s1zqz::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zxe_info" {
     block_c1zxe_info:
         const _c1zxe;
         const 3;
         const 30;
 },
 _c1zxq() //  [R1]
         { []
         }
     {offset
       c1zxq: // global
           if (R1 & 7 == 1) goto u1zxJ; else goto c1zxC;
       u1zxJ: // global
           Sp = Sp + 16;
           call _c1zxy() args: 0, res: 0, upd: 0;
       c1zxC: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zxq_info" {
     block_c1zxq_info:
         const _c1zxq;
         const 2;
         const 30;
 },
 _c1zxy() //  []
         { []
         }
     {offset
       c1zxy: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zxQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1zxU; else goto c1zxT;
       c1zxU: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zxT: // global
           I64[Hp - 8] = go_s1zqC_info;
           P64[Hp] = R2;
           _s1zqA::P64 = R3;
           R3 = R4;
           R2 = _s1zqA::P64;
           R1 = Hp - 6;
           call go_s1zqC_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$w$csconcat_info" {
     Data.Functor.Utils.$w$csconcat_info:
         const Data.Functor.Utils.$w$csconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.631560909 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMax_$csconcat_closure" {
     Data.Functor.Utils.$fSemigroupMax_$csconcat_closure:
         const Data.Functor.Utils.$fSemigroupMax_$csconcat_info;
 },
 Data.Functor.Utils.$fSemigroupMax_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zyO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zyP; else goto c1zyQ;
       c1zyP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMax_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zyQ: // global
           I64[Sp - 16] = block_c1zyL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1zyU; else goto c1zyM;
       u1zyU: // global
           call _c1zyL(R1) args: 0, res: 0, upd: 0;
       c1zyM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMax_$csconcat_info" {
     Data.Functor.Utils.$fSemigroupMax_$csconcat_info:
         const Data.Functor.Utils.$fSemigroupMax_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1zyL() //  [R1]
         { []
         }
     {offset
       c1zyL: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Functor.Utils.$w$csconcat_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zyL_info" {
     block_c1zyL_info:
         const _c1zyL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.639506709 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMax_closure" {
     Data.Functor.Utils.$fSemigroupMax_closure:
         const Data.Functor.Utils.$fSemigroupMax_info;
         const 0;
 },
 sat_s1zqV_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zze: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMax_$cstimes_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zqV_info" {
     sat_s1zqV_info:
         const sat_s1zqV_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1zzT_srt;
 },
 sat_s1zqU_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zzm: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMax_$csconcat_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zqU_info" {
     sat_s1zqU_info:
         const sat_s1zqU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1zqT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zzu: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMax_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zqT_info" {
     sat_s1zqT_info:
         const sat_s1zqT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Utils.$fSemigroupMax_entry() //  [R2]
         { []
         }
     {offset
       c1zzy: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1zzC; else goto c1zzB;
       c1zzC: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zzB: // global
           I64[Hp - 72] = sat_s1zqV_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1zqU_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1zqT_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMax_info" {
     Data.Functor.Utils.$fSemigroupMax_info:
         const Data.Functor.Utils.$fSemigroupMax_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1zzT_srt;
 },
 section ""data" . Data.Functor.Utils.$fSemigroupMax_$cstimes_closure" {
     Data.Functor.Utils.$fSemigroupMax_$cstimes_closure:
         const Data.Functor.Utils.$fSemigroupMax_$cstimes_info;
         const 0;
 },
 sat_s1zqY_entry() //  [R1]
         { []
         }
     {offset
       c1zzL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zzM; else goto c1zzN;
       c1zzM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zzN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zqY_info" {
     sat_s1zqY_info:
         const sat_s1zqY_entry;
         const 1;
         const 4294967312;
         const S1zzT_srt+8;
 },
 Data.Functor.Utils.$fSemigroupMax_$cstimes_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zzO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zzS; else goto c1zzR;
       c1zzS: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMax_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zzR: // global
           I64[Hp - 16] = sat_s1zqY_info;
           P64[Hp] = R2;
           _s1zqX::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1zqX::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMax_$cstimes_info" {
     Data.Functor.Utils.$fSemigroupMax_$cstimes_info:
         const Data.Functor.Utils.$fSemigroupMax_$cstimes_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1zzT_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.655917208 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMax_$cmconcat_closure" {
     Data.Functor.Utils.$fMonoidMax_$cmconcat_closure:
         const Data.Functor.Utils.$fMonoidMax_$cmconcat_info;
 },
 go_s1zr1_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zAF: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1zAG; else goto c1zAH;
       c1zAG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zAH: // global
           I64[Sp - 24] = block_c1zAy_info;
           _s1zr1::P64 = R1;
           _s1zqZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s1zqZ::P64;
           P64[Sp - 8] = _s1zr1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1zBr; else goto c1zAz;
       u1zBr: // global
           call _c1zAy(R1) args: 0, res: 0, upd: 0;
       c1zAz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1zr1_info" {
     go_s1zr1_info:
         const go_s1zr1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c1zAy() //  [R1]
         { []
         }
     {offset
       c1zAy: // global
           if (R1 & 7 == 1) goto c1zAC; else goto c1zAD;
       c1zAC: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1zAD: // global
           I64[Sp] = block_c1zAN_info;
           R2 = P64[R1 + 14];
           _s1zr4::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1zr4::P64;
           call go_s1zr1_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zAy_info" {
     block_c1zAy_info:
         const _c1zAy;
         const 2;
         const 30;
 },
 _c1zAN() //  [R1]
         { []
         }
     {offset
       c1zAN: // global
           _s1zr4::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1zAU; else goto c1zAZ;
       c1zAU: // global
           R1 = _s1zr4::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1zAZ: // global
           I64[Sp - 8] = block_c1zAX_info;
           _s1zr6::P64 = R1;
           _s1zr7::P64 = P64[R1 + 6];
           R1 = _s1zr4::P64;
           P64[Sp] = _s1zr7::P64;
           P64[Sp + 16] = _s1zr6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1zBs; else goto c1zB0;
       u1zBs: // global
           call _c1zAX(R1) args: 0, res: 0, upd: 0;
       c1zB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zAN_info" {
     block_c1zAN_info:
         const _c1zAN;
         const 2;
         const 30;
 },
 _c1zAX() //  [R1]
         { []
         }
     {offset
       c1zAX: // global
           if (R1 & 7 == 1) goto u1zBp; else goto c1zBb;
       u1zBp: // global
           Sp = Sp + 24;
           call _c1zBh() args: 0, res: 0, upd: 0;
       c1zBb: // global
           _s1zr7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1zB9_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1zr7::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zAX_info" {
     block_c1zAX_info:
         const _c1zAX;
         const 3;
         const 30;
 },
 _c1zB9() //  [R1]
         { []
         }
     {offset
       c1zB9: // global
           if (R1 & 7 == 1) goto u1zBq; else goto c1zBl;
       u1zBq: // global
           Sp = Sp + 16;
           call _c1zBh() args: 0, res: 0, upd: 0;
       c1zBl: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zB9_info" {
     block_c1zB9_info:
         const _c1zB9;
         const 2;
         const 30;
 },
 _c1zBh() //  []
         { []
         }
     {offset
       c1zBh: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$fMonoidMax_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zBv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1zBz; else goto c1zBy;
       c1zBz: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMax_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zBy: // global
           I64[Hp - 8] = go_s1zr1_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s1zr1_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMax_$cmconcat_info" {
     Data.Functor.Utils.$fMonoidMax_$cmconcat_info:
         const Data.Functor.Utils.$fMonoidMax_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.671215813 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMax_closure" {
     Data.Functor.Utils.$fMonoidMax_closure:
         const Data.Functor.Utils.$fMonoidMax_info;
         const 0;
 },
 sat_s1zre_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zCu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fMonoidMax_$cmconcat_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zre_info" {
     sat_s1zre_info:
         const sat_s1zre_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1zrd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zCC: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMax_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zrd_info" {
     sat_s1zrd_info:
         const sat_s1zrd_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1zrc_entry() //  [R1]
         { []
         }
     {offset
       c1zCJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zCK; else goto c1zCL;
       c1zCK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zCL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zrc_info" {
     sat_s1zrc_info:
         const sat_s1zrc_entry;
         const 1;
         const 4294967312;
         const S1zzT_srt+8;
 },
 Data.Functor.Utils.$fMonoidMax_entry() //  [R2]
         { []
         }
     {offset
       c1zCN: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1zCR; else goto c1zCQ;
       c1zCR: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zCQ: // global
           I64[Hp - 88] = sat_s1zre_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1zrd_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1zrc_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = Hp - 70;
           P64[Hp] = Hp - 87;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMax_info" {
     Data.Functor.Utils.$fMonoidMax_info:
         const Data.Functor.Utils.$fMonoidMax_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S1zzT_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.682285819 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMin_$c<>_closure" {
     Data.Functor.Utils.$fMonoidMin_$c<>_closure:
         const Data.Functor.Utils.$fMonoidMin_$c<>_info;
 },
 Data.Functor.Utils.$fMonoidMin_$c<>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zDs: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1zDt; else goto c1zDu;
       c1zDt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMin_$c<>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zDu: // global
           I64[Sp - 24] = block_c1zDl_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1zE3; else goto c1zDm;
       u1zE3: // global
           call _c1zDl(R1) args: 0, res: 0, upd: 0;
       c1zDm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMin_$c<>_info" {
     Data.Functor.Utils.$fMonoidMin_$c<>_info:
         const Data.Functor.Utils.$fMonoidMin_$c<>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1zDl() //  [R1]
         { []
         }
     {offset
       c1zDl: // global
           _s1zrg::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1zDp; else goto c1zDq;
       c1zDp: // global
           R1 = _s1zrg::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1zDq: // global
           I64[Sp - 8] = block_c1zDA_info;
           _s1zri::P64 = R1;
           _s1zrj::P64 = P64[R1 + 6];
           R1 = _s1zrg::P64;
           P64[Sp] = _s1zrj::P64;
           P64[Sp + 16] = _s1zri::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1zE2; else goto c1zDC;
       u1zE2: // global
           call _c1zDA(R1) args: 0, res: 0, upd: 0;
       c1zDC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zDl_info" {
     block_c1zDl_info:
         const _c1zDl;
         const 2;
         const 30;
 },
 _c1zDA() //  [R1]
         { []
         }
     {offset
       c1zDA: // global
           if (R1 & 7 == 1) goto u1zE0; else goto c1zDN;
       u1zE0: // global
           Sp = Sp + 24;
           call _c1zDT() args: 0, res: 0, upd: 0;
       c1zDN: // global
           _s1zrj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1zDL_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1zrj::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zDA_info" {
     block_c1zDA_info:
         const _c1zDA;
         const 3;
         const 30;
 },
 _c1zDL() //  [R1]
         { []
         }
     {offset
       c1zDL: // global
           if (R1 & 7 == 1) goto u1zE1; else goto c1zDX;
       u1zE1: // global
           Sp = Sp + 16;
           call _c1zDT() args: 0, res: 0, upd: 0;
       c1zDX: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zDL_info" {
     block_c1zDL_info:
         const _c1zDL;
         const 2;
         const 30;
 },
 _c1zDT() //  []
         { []
         }
     {offset
       c1zDT: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.695422931 UTC

[section ""data" . Data.Functor.Utils.$w$csconcat1_closure" {
     Data.Functor.Utils.$w$csconcat1_closure:
         const Data.Functor.Utils.$w$csconcat1_info;
 },
 go_s1zrq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zEV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1zEW; else goto c1zEX;
       c1zEW: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zEX: // global
           I64[Sp - 32] = block_c1zEO_info;
           _s1zrq::P64 = R1;
           _s1zrn::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s1zrn::P64;
           P64[Sp - 16] = _s1zrq::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1zFK; else goto c1zEP;
       u1zFK: // global
           call _c1zEO(R1) args: 0, res: 0, upd: 0;
       c1zEP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1zrq_info" {
     go_s1zrq_info:
         const go_s1zrq_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c1zEO() //  [R1]
         { []
         }
     {offset
       c1zEO: // global
           if (R1 & 7 == 1) goto u1zFF; else goto c1zET;
       u1zFF: // global
           Sp = Sp + 24;
           call _c1zFa() args: 0, res: 0, upd: 0;
       c1zET: // global
           I64[Sp] = block_c1zF3_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           call go_s1zrq_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zEO_info" {
     block_c1zEO_info:
         const _c1zEO;
         const 3;
         const 30;
 },
 _c1zF3() //  [R1]
         { []
         }
     {offset
       c1zF3: // global
           if (R1 & 7 == 1) goto u1zFG; else goto c1zFf;
       u1zFG: // global
           Sp = Sp + 24;
           call _c1zFa() args: 0, res: 0, upd: 0;
       c1zFf: // global
           I64[Sp] = block_c1zFd_info;
           _s1zrw::P64 = R1;
           _s1zrx::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s1zrx::P64;
           P64[Sp + 24] = _s1zrw::P64;
           if (R1 & 7 != 0) goto u1zFL; else goto c1zFg;
       u1zFL: // global
           call _c1zFd(R1) args: 0, res: 0, upd: 0;
       c1zFg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zF3_info" {
     block_c1zF3_info:
         const _c1zF3;
         const 131;
         const 30;
 },
 _c1zFa() //  []
         { []
         }
     {offset
       c1zFa: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1zFd() //  [R1]
         { []
         }
     {offset
       c1zFd: // global
           if (R1 & 7 == 1) goto u1zFH; else goto c1zFr;
       u1zFH: // global
           Sp = Sp + 24;
           call _c1zFx() args: 0, res: 0, upd: 0;
       c1zFr: // global
           _s1zrn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1zFp_info;
           R2 = _s1zrn::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zFd_info" {
     block_c1zFd_info:
         const _c1zFd;
         const 3;
         const 30;
 },
 _c1zFp() //  [R1]
         { []
         }
     {offset
       c1zFp: // global
           if (R1 & 7 == 1) goto u1zFI; else goto c1zFB;
       u1zFI: // global
           Sp = Sp + 16;
           call _c1zFx() args: 0, res: 0, upd: 0;
       c1zFB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zFp_info" {
     block_c1zFp_info:
         const _c1zFp;
         const 2;
         const 30;
 },
 _c1zFx() //  []
         { []
         }
     {offset
       c1zFx: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$w$csconcat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zFP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1zFT; else goto c1zFS;
       c1zFT: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$w$csconcat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zFS: // global
           I64[Hp - 8] = go_s1zrq_info;
           P64[Hp] = R2;
           _s1zro::P64 = R3;
           R3 = R4;
           R2 = _s1zro::P64;
           R1 = Hp - 6;
           call go_s1zrq_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$w$csconcat1_info" {
     Data.Functor.Utils.$w$csconcat1_info:
         const Data.Functor.Utils.$w$csconcat1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.710708858 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMin_$csconcat_closure" {
     Data.Functor.Utils.$fSemigroupMin_$csconcat_closure:
         const Data.Functor.Utils.$fSemigroupMin_$csconcat_info;
 },
 Data.Functor.Utils.$fSemigroupMin_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zGN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zGO; else goto c1zGP;
       c1zGO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMin_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zGP: // global
           I64[Sp - 16] = block_c1zGK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1zGT; else goto c1zGL;
       u1zGT: // global
           call _c1zGK(R1) args: 0, res: 0, upd: 0;
       c1zGL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMin_$csconcat_info" {
     Data.Functor.Utils.$fSemigroupMin_$csconcat_info:
         const Data.Functor.Utils.$fSemigroupMin_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1zGK() //  [R1]
         { []
         }
     {offset
       c1zGK: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Functor.Utils.$w$csconcat1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zGK_info" {
     block_c1zGK_info:
         const _c1zGK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.718238738 UTC

[section ""data" . Data.Functor.Utils.$fSemigroupMin_closure" {
     Data.Functor.Utils.$fSemigroupMin_closure:
         const Data.Functor.Utils.$fSemigroupMin_info;
         const 0;
 },
 sat_s1zrJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zHd: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMin_$cstimes_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zrJ_info" {
     sat_s1zrJ_info:
         const sat_s1zrJ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1zzT_srt+32;
 },
 sat_s1zrI_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zHl: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fSemigroupMin_$csconcat_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zrI_info" {
     sat_s1zrI_info:
         const sat_s1zrI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1zrH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zHt: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMin_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zrH_info" {
     sat_s1zrH_info:
         const sat_s1zrH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Utils.$fSemigroupMin_entry() //  [R2]
         { []
         }
     {offset
       c1zHx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1zHB; else goto c1zHA;
       c1zHB: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zHA: // global
           I64[Hp - 72] = sat_s1zrJ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1zrI_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1zrH_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMin_info" {
     Data.Functor.Utils.$fSemigroupMin_info:
         const Data.Functor.Utils.$fSemigroupMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1zzT_srt+32;
 },
 section ""data" . Data.Functor.Utils.$fSemigroupMin_$cstimes_closure" {
     Data.Functor.Utils.$fSemigroupMin_$cstimes_closure:
         const Data.Functor.Utils.$fSemigroupMin_$cstimes_info;
         const 0;
 },
 sat_s1zrM_entry() //  [R1]
         { []
         }
     {offset
       c1zHK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zHL; else goto c1zHM;
       c1zHL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zHM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zrM_info" {
     sat_s1zrM_info:
         const sat_s1zrM_entry;
         const 1;
         const 4294967312;
         const S1zzT_srt+40;
 },
 Data.Functor.Utils.$fSemigroupMin_$cstimes_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zHN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zHR; else goto c1zHQ;
       c1zHR: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fSemigroupMin_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zHQ: // global
           I64[Hp - 16] = sat_s1zrM_info;
           P64[Hp] = R2;
           _s1zrL::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1zrL::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fSemigroupMin_$cstimes_info" {
     Data.Functor.Utils.$fSemigroupMin_$cstimes_info:
         const Data.Functor.Utils.$fSemigroupMin_$cstimes_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const S1zzT_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.732921581 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMin_$cmconcat_closure" {
     Data.Functor.Utils.$fMonoidMin_$cmconcat_closure:
         const Data.Functor.Utils.$fMonoidMin_$cmconcat_info;
 },
 go_s1zrP_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zID: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1zIE; else goto c1zIF;
       c1zIE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zIF: // global
           I64[Sp - 24] = block_c1zIw_info;
           _s1zrP::P64 = R1;
           _s1zrN::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s1zrN::P64;
           P64[Sp - 8] = _s1zrP::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1zJp; else goto c1zIx;
       u1zJp: // global
           call _c1zIw(R1) args: 0, res: 0, upd: 0;
       c1zIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1zrP_info" {
     go_s1zrP_info:
         const go_s1zrP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c1zIw() //  [R1]
         { []
         }
     {offset
       c1zIw: // global
           if (R1 & 7 == 1) goto c1zIA; else goto c1zIB;
       c1zIA: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1zIB: // global
           I64[Sp] = block_c1zIL_info;
           R2 = P64[R1 + 14];
           _s1zrS::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1zrS::P64;
           call go_s1zrP_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zIw_info" {
     block_c1zIw_info:
         const _c1zIw;
         const 2;
         const 30;
 },
 _c1zIL() //  [R1]
         { []
         }
     {offset
       c1zIL: // global
           _s1zrS::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1zIS; else goto c1zIX;
       c1zIS: // global
           R1 = _s1zrS::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1zIX: // global
           I64[Sp - 8] = block_c1zIV_info;
           _s1zrU::P64 = R1;
           _s1zrV::P64 = P64[R1 + 6];
           R1 = _s1zrS::P64;
           P64[Sp] = _s1zrV::P64;
           P64[Sp + 16] = _s1zrU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1zJq; else goto c1zIY;
       u1zJq: // global
           call _c1zIV(R1) args: 0, res: 0, upd: 0;
       c1zIY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zIL_info" {
     block_c1zIL_info:
         const _c1zIL;
         const 2;
         const 30;
 },
 _c1zIV() //  [R1]
         { []
         }
     {offset
       c1zIV: // global
           if (R1 & 7 == 1) goto u1zJn; else goto c1zJ9;
       u1zJn: // global
           Sp = Sp + 24;
           call _c1zJf() args: 0, res: 0, upd: 0;
       c1zJ9: // global
           _s1zrV::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1zJ7_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = _s1zrV::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zIV_info" {
     block_c1zIV_info:
         const _c1zIV;
         const 3;
         const 30;
 },
 _c1zJ7() //  [R1]
         { []
         }
     {offset
       c1zJ7: // global
           if (R1 & 7 == 1) goto u1zJo; else goto c1zJj;
       u1zJo: // global
           Sp = Sp + 16;
           call _c1zJf() args: 0, res: 0, upd: 0;
       c1zJj: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zJ7_info" {
     block_c1zJ7_info:
         const _c1zJ7;
         const 2;
         const 30;
 },
 _c1zJf() //  []
         { []
         }
     {offset
       c1zJf: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Utils.$fMonoidMin_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zJt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1zJx; else goto c1zJw;
       c1zJx: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMin_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zJw: // global
           I64[Hp - 8] = go_s1zrP_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s1zrP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMin_$cmconcat_info" {
     Data.Functor.Utils.$fMonoidMin_$cmconcat_info:
         const Data.Functor.Utils.$fMonoidMin_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.748496647 UTC

[section ""data" . Data.Functor.Utils.$fMonoidMin_closure" {
     Data.Functor.Utils.$fMonoidMin_closure:
         const Data.Functor.Utils.$fMonoidMin_info;
         const 0;
 },
 sat_s1zs2_entry() //  [R1, R2]
         { []
         }
     {offset
       c1zKs: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Utils.$fMonoidMin_$cmconcat_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zs2_info" {
     sat_s1zs2_info:
         const sat_s1zs2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1zs1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1zKA: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Utils.$fMonoidMin_$c<>_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1zs1_info" {
     sat_s1zs1_info:
         const sat_s1zs1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1zs0_entry() //  [R1]
         { []
         }
     {offset
       c1zKH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zKI; else goto c1zKJ;
       c1zKI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zKJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fSemigroupMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zs0_info" {
     sat_s1zs0_info:
         const sat_s1zs0_entry;
         const 1;
         const 4294967312;
         const S1zzT_srt+40;
 },
 Data.Functor.Utils.$fMonoidMin_entry() //  [R2]
         { []
         }
     {offset
       c1zKL: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1zKP; else goto c1zKO;
       c1zKP: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Functor.Utils.$fMonoidMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1zKO: // global
           I64[Hp - 88] = sat_s1zs2_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1zs1_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1zs0_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = Hp - 70;
           P64[Hp] = Hp - 87;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fMonoidMin_info" {
     Data.Functor.Utils.$fMonoidMin_info:
         const Data.Functor.Utils.$fMonoidMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1zzT_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.758653245 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateL2_closure" {
     Data.Functor.Utils.$fFunctorStateL2_closure:
         const Data.Functor.Utils.$fFunctorStateL2_info;
 },
 sat_s1zsf_entry() //  [R1]
         { []
         }
     {offset
       c1zLp: // global
           _s1zsf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zLq; else goto c1zLr;
       c1zLr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zLt; else goto c1zLs;
       c1zLt: // global
           HpAlloc = 24;
           goto c1zLq;
       c1zLq: // global
           R1 = _s1zsf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zLs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zsf::P64;
           _s1zs3::P64 = P64[_s1zsf::P64 + 16];
           _s1zs6::P64 = P64[_s1zsf::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1zs6::P64;
           R2 = Hp - 16;
           R1 = _s1zs3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zsf_info" {
     sat_s1zsf_info:
         const sat_s1zsf_entry;
         const 2;
         const 18;
 },
 Data.Functor.Utils.$fFunctorStateL2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zLw: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zLA; else goto c1zLz;
       c1zLA: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateL2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zLz: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_s1zsf_info;
           P64[Hp - 56] = R2;
           _c1zLj::P64 = Hp - 104;
           P64[Hp - 48] = _c1zLj::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zLj::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateL2_info" {
     Data.Functor.Utils.$fFunctorStateL2_info:
         const Data.Functor.Utils.$fFunctorStateL2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.765631227 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateL1_closure" {
     Data.Functor.Utils.$fFunctorStateL1_closure:
         const Data.Functor.Utils.$fFunctorStateL1_info;
 },
 sat_s1zsm_entry() //  [R1]
         { []
         }
     {offset
       c1zM2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1zM3; else goto c1zM4;
       c1zM3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zM4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1zM0_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zsm_info" {
     sat_s1zsm_info:
         const sat_s1zsm_entry;
         const 2;
         const 18;
 },
 _c1zM0() //  [R1]
         { []
         }
     {offset
       c1zM0: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zM0_info" {
     block_c1zM0_info:
         const _c1zM0;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fFunctorStateL1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zM9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1zMd; else goto c1zMc;
       c1zMd: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateL1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zMc: // global
           I64[Hp - 48] = sat_s1zsm_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateL1_info" {
     Data.Functor.Utils.$fFunctorStateL1_info:
         const Data.Functor.Utils.$fFunctorStateL1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.772635223 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateL_closure" {
     Data.Functor.Utils.$fFunctorStateL_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Utils.$fFunctorStateL2_closure+3;
         const Data.Functor.Utils.$fFunctorStateL1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.776455015 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL3_closure" {
     Data.Functor.Utils.$fApplicativeStateL3_closure:
         const Data.Functor.Utils.$fApplicativeStateL3_info;
 },
 ds1_s1zss_entry() //  [R1]
         { []
         }
     {offset
       c1zMG: // global
           _s1zss::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zMH; else goto c1zMI;
       c1zMI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zMK; else goto c1zMJ;
       c1zMK: // global
           HpAlloc = 24;
           goto c1zMH;
       c1zMH: // global
           R1 = _s1zss::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zMJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zss::P64;
           _s1zsp::P64 = P64[_s1zss::P64 + 16];
           _s1zsr::P64 = P64[_s1zss::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1zsr::P64;
           R2 = Hp - 16;
           R1 = _s1zsp::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1zss_info" {
     ds1_s1zss_info:
         const ds1_s1zss_entry;
         const 2;
         const 18;
 },
 sat_s1zsJ_entry() //  [R1]
         { []
         }
     {offset
       c1zMR: // global
           _s1zsJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zMS; else goto c1zMT;
       c1zMT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1zMV; else goto c1zMU;
       c1zMV: // global
           HpAlloc = 48;
           goto c1zMS;
       c1zMS: // global
           R1 = _s1zsJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zMU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zsJ::P64;
           _s1zsn::P64 = P64[_s1zsJ::P64 + 16];
           _s1zsr::P64 = P64[_s1zsJ::P64 + 24];
           _s1zss::P64 = P64[_s1zsJ::P64 + 32];
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _s1zss::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1zsr::P64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = _s1zsn::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zsJ_info" {
     sat_s1zsJ_info:
         const sat_s1zsJ_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateL3_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       c1zMY: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c1zN2; else goto c1zN1;
       c1zN2: // global
           HpAlloc = 152;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zN1: // global
           I64[Hp - 144] = stg_ap_2_upd_info;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = ds1_s1zss_info;
           P64[Hp - 96] = R4;
           _c1zMA::P64 = Hp - 144;
           P64[Hp - 88] = _c1zMA::P64;
           I64[Hp - 80] = sat_s1zsJ_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = _c1zMA::P64;
           _c1zMB::P64 = Hp - 112;
           P64[Hp - 48] = _c1zMB::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zMB::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL3_info" {
     Data.Functor.Utils.$fApplicativeStateL3_info:
         const Data.Functor.Utils.$fApplicativeStateL3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.787301384 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL4_closure" {
     Data.Functor.Utils.$fApplicativeStateL4_closure:
         const Data.Functor.Utils.$fApplicativeStateL4_info;
 },
 ds1_s1zsO_entry() //  [R1]
         { []
         }
     {offset
       c1zNC: // global
           _s1zsO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zND; else goto c1zNE;
       c1zNE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zNG; else goto c1zNF;
       c1zNG: // global
           HpAlloc = 24;
           goto c1zND;
       c1zND: // global
           R1 = _s1zsO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zNF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zsO::P64;
           _s1zsL::P64 = P64[_s1zsO::P64 + 16];
           _s1zsN::P64 = P64[_s1zsO::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1zsN::P64;
           R2 = Hp - 16;
           R1 = _s1zsL::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1zsO_info" {
     ds1_s1zsO_info:
         const ds1_s1zsO_entry;
         const 2;
         const 18;
 },
 sat_s1zt4_entry() //  [R1]
         { []
         }
     {offset
       c1zNO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1zNS; else goto c1zNT;
       c1zNS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zNT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1zNL_info;
           _s1zsO::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s1zsO::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1zNX; else goto c1zNM;
       u1zNX: // global
           call _c1zNL(R1) args: 0, res: 0, upd: 0;
       c1zNM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zt4_info" {
     sat_s1zt4_info:
         const sat_s1zt4_entry;
         const 2;
         const 18;
 },
 _c1zNL() //  [R1]
         { []
         }
     {offset
       c1zNL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zNW; else goto c1zNV;
       c1zNW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1zNV: // global
           _s1zsZ::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = _s1zsZ::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zNL_info" {
     block_c1zNL_info:
         const _c1zNL;
         const 1;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateL4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zO0: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1zO4; else goto c1zO3;
       c1zO4: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zO3: // global
           I64[Hp - 136] = stg_ap_2_upd_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = ds1_s1zsO_info;
           P64[Hp - 88] = R3;
           _c1zNw::P64 = Hp - 136;
           P64[Hp - 80] = _c1zNw::P64;
           I64[Hp - 72] = sat_s1zt4_info;
           P64[Hp - 56] = _c1zNw::P64;
           _c1zNx::P64 = Hp - 104;
           P64[Hp - 48] = _c1zNx::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zNx::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL4_info" {
     Data.Functor.Utils.$fApplicativeStateL4_info:
         const Data.Functor.Utils.$fApplicativeStateL4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.797180888 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL5_closure" {
     Data.Functor.Utils.$fApplicativeStateL5_closure:
         const Data.Functor.Utils.$fApplicativeStateL5_info;
 },
 Data.Functor.Utils.$fApplicativeStateL5_entry() //  [R2, R3]
         { []
         }
     {offset
       c1zOE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zOI; else goto c1zOH;
       c1zOI: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zOH: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL5_info" {
     Data.Functor.Utils.$fApplicativeStateL5_info:
         const Data.Functor.Utils.$fApplicativeStateL5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.802793918 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL2_closure" {
     Data.Functor.Utils.$fApplicativeStateL2_closure:
         const Data.Functor.Utils.$fApplicativeStateL2_info;
 },
 sat_s1zte_entry() //  [R1]
         { []
         }
     {offset
       c1zP3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1zP4; else goto c1zP5;
       c1zP4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zP5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1zP1_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zte_info" {
     sat_s1zte_info:
         const sat_s1zte_entry;
         const 2;
         const 18;
 },
 _c1zP1() //  [R1]
         { []
         }
     {offset
       c1zP1: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zP1_info" {
     block_c1zP1_info:
         const _c1zP1;
         const 0;
         const 30;
 },
 ds_s1zta_entry() //  [R1]
         { []
         }
     {offset
       c1zP9: // global
           _s1zta::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zPa; else goto c1zPb;
       c1zPb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1zPd; else goto c1zPc;
       c1zPd: // global
           HpAlloc = 32;
           goto c1zPa;
       c1zPa: // global
           R1 = _s1zta::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zPc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zta::P64;
           _s1zt7::P64 = P64[_s1zta::P64 + 16];
           _s1zt8::P64 = P64[_s1zta::P64 + 24];
           _s1zt9::P64 = P64[_s1zta::P64 + 32];
           I64[Hp - 24] = sat_s1zte_info;
           P64[Hp - 8] = _s1zt7::P64;
           P64[Hp] = _s1zt9::P64;
           R2 = Hp - 24;
           R1 = _s1zt8::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1zta_info" {
     ds_s1zta_info:
         const ds_s1zta_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateL2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zPh: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zPl; else goto c1zPk;
       c1zPl: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zPk: // global
           I64[Hp - 104] = ds_s1zta_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c1zOT::P64 = Hp - 104;
           P64[Hp - 48] = _c1zOT::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zOT::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL2_info" {
     Data.Functor.Utils.$fApplicativeStateL2_info:
         const Data.Functor.Utils.$fApplicativeStateL2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.814142181 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL1_closure" {
     Data.Functor.Utils.$fApplicativeStateL1_closure:
         const Data.Functor.Utils.$fApplicativeStateL1_info;
 },
 sat_s1zty_entry() //  [R1]
         { []
         }
     {offset
       c1zPZ: // global
           _s1zty::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1zQ0; else goto c1zQ1;
       c1zQ1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zQ3; else goto c1zQ2;
       c1zQ3: // global
           HpAlloc = 24;
           goto c1zQ0;
       c1zQ0: // global
           R1 = _s1zty::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zQ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zty::P64;
           _s1zto::P64 = P64[_s1zty::P64 + 16];
           _s1ztq::P64 = P64[_s1zty::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1ztq::P64;
           I64[Sp - 24] = block_c1zPX_info;
           R2 = Hp - 16;
           R1 = _s1zto::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zty_info" {
     sat_s1zty_info:
         const sat_s1zty_entry;
         const 2;
         const 18;
 },
 _c1zPX() //  [R1]
         { []
         }
     {offset
       c1zPX: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zPX_info" {
     block_c1zPX_info:
         const _c1zPX;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateL1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zQ8: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zQc; else goto c1zQb;
       c1zQc: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateL1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zQb: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = stg_sel_1_upd_info;
           _c1zPQ::P64 = Hp - 104;
           P64[Hp - 56] = _c1zPQ::P64;
           I64[Hp - 48] = sat_s1zty_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = _c1zPQ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateL1_info" {
     Data.Functor.Utils.$fApplicativeStateL1_info:
         const Data.Functor.Utils.$fApplicativeStateL1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.821504967 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateL_closure" {
     Data.Functor.Utils.$fApplicativeStateL_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Functor.Utils.$fFunctorStateL_closure+1;
         const Data.Functor.Utils.$fApplicativeStateL5_closure+2;
         const Data.Functor.Utils.$fApplicativeStateL4_closure+3;
         const Data.Functor.Utils.$fApplicativeStateL3_closure+4;
         const Data.Functor.Utils.$fApplicativeStateL2_closure+3;
         const Data.Functor.Utils.$fApplicativeStateL1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.824473839 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateR2_closure" {
     Data.Functor.Utils.$fFunctorStateR2_closure:
         const Data.Functor.Utils.$fFunctorStateR2_info;
 },
 sat_s1ztP_entry() //  [R1]
         { []
         }
     {offset
       c1zQJ: // global
           _s1ztP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zQK; else goto c1zQL;
       c1zQL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zQN; else goto c1zQM;
       c1zQN: // global
           HpAlloc = 24;
           goto c1zQK;
       c1zQK: // global
           R1 = _s1ztP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zQM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ztP::P64;
           _s1ztD::P64 = P64[_s1ztP::P64 + 16];
           _s1ztG::P64 = P64[_s1ztP::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1ztG::P64;
           R2 = Hp - 16;
           R1 = _s1ztD::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ztP_info" {
     sat_s1ztP_info:
         const sat_s1ztP_entry;
         const 2;
         const 18;
 },
 Data.Functor.Utils.$fFunctorStateR2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zQQ: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zQU; else goto c1zQT;
       c1zQU: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateR2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zQT: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_s1ztP_info;
           P64[Hp - 56] = R2;
           _c1zQD::P64 = Hp - 104;
           P64[Hp - 48] = _c1zQD::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zQD::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateR2_info" {
     Data.Functor.Utils.$fFunctorStateR2_info:
         const Data.Functor.Utils.$fFunctorStateR2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.832060854 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateR1_closure" {
     Data.Functor.Utils.$fFunctorStateR1_closure:
         const Data.Functor.Utils.$fFunctorStateR1_info;
 },
 sat_s1ztW_entry() //  [R1]
         { []
         }
     {offset
       c1zRm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1zRn; else goto c1zRo;
       c1zRn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zRo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1zRk_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ztW_info" {
     sat_s1ztW_info:
         const sat_s1ztW_entry;
         const 2;
         const 18;
 },
 _c1zRk() //  [R1]
         { []
         }
     {offset
       c1zRk: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zRk_info" {
     block_c1zRk_info:
         const _c1zRk;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fFunctorStateR1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zRt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1zRx; else goto c1zRw;
       c1zRx: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fFunctorStateR1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zRw: // global
           I64[Hp - 48] = sat_s1ztW_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fFunctorStateR1_info" {
     Data.Functor.Utils.$fFunctorStateR1_info:
         const Data.Functor.Utils.$fFunctorStateR1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.839245544 UTC

[section ""data" . Data.Functor.Utils.$fFunctorStateR_closure" {
     Data.Functor.Utils.$fFunctorStateR_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Utils.$fFunctorStateR2_closure+3;
         const Data.Functor.Utils.$fFunctorStateR1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.84291319 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR3_closure" {
     Data.Functor.Utils.$fApplicativeStateR3_closure:
         const Data.Functor.Utils.$fApplicativeStateR3_info;
 },
 ds1_s1zu2_entry() //  [R1]
         { []
         }
     {offset
       c1zS0: // global
           _s1zu2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zS1; else goto c1zS2;
       c1zS2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zS4; else goto c1zS3;
       c1zS4: // global
           HpAlloc = 24;
           goto c1zS1;
       c1zS1: // global
           R1 = _s1zu2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zS3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zu2::P64;
           _s1ztY::P64 = P64[_s1zu2::P64 + 16];
           _s1zu1::P64 = P64[_s1zu2::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1zu1::P64;
           R2 = Hp - 16;
           R1 = _s1ztY::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1zu2_info" {
     ds1_s1zu2_info:
         const ds1_s1zu2_entry;
         const 2;
         const 18;
 },
 sat_s1zuj_entry() //  [R1]
         { []
         }
     {offset
       c1zSb: // global
           _s1zuj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zSc; else goto c1zSd;
       c1zSd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1zSf; else goto c1zSe;
       c1zSf: // global
           HpAlloc = 48;
           goto c1zSc;
       c1zSc: // global
           R1 = _s1zuj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zSe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zuj::P64;
           _s1ztX::P64 = P64[_s1zuj::P64 + 16];
           _s1zu1::P64 = P64[_s1zuj::P64 + 24];
           _s1zu2::P64 = P64[_s1zuj::P64 + 32];
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _s1zu1::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1zu2::P64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = _s1ztX::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zuj_info" {
     sat_s1zuj_info:
         const sat_s1zuj_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateR3_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       c1zSi: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c1zSm; else goto c1zSl;
       c1zSm: // global
           HpAlloc = 152;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zSl: // global
           I64[Hp - 144] = stg_ap_2_upd_info;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = ds1_s1zu2_info;
           P64[Hp - 96] = R3;
           _c1zRU::P64 = Hp - 144;
           P64[Hp - 88] = _c1zRU::P64;
           I64[Hp - 80] = sat_s1zuj_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = _c1zRU::P64;
           _c1zRV::P64 = Hp - 112;
           P64[Hp - 48] = _c1zRV::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zRV::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR3_info" {
     Data.Functor.Utils.$fApplicativeStateR3_info:
         const Data.Functor.Utils.$fApplicativeStateR3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.853404038 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR4_closure" {
     Data.Functor.Utils.$fApplicativeStateR4_closure:
         const Data.Functor.Utils.$fApplicativeStateR4_info;
 },
 ds1_s1zuo_entry() //  [R1]
         { []
         }
     {offset
       c1zSW: // global
           _s1zuo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zSX; else goto c1zSY;
       c1zSY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zT0; else goto c1zSZ;
       c1zT0: // global
           HpAlloc = 24;
           goto c1zSX;
       c1zSX: // global
           R1 = _s1zuo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zSZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zuo::P64;
           _s1zuk::P64 = P64[_s1zuo::P64 + 16];
           _s1zun::P64 = P64[_s1zuo::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1zun::P64;
           R2 = Hp - 16;
           R1 = _s1zuk::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1zuo_info" {
     ds1_s1zuo_info:
         const ds1_s1zuo_entry;
         const 2;
         const 18;
 },
 sat_s1zuE_entry() //  [R1]
         { []
         }
     {offset
       c1zT8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1zTc; else goto c1zTd;
       c1zTc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zTd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1zT5_info;
           _s1zun::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s1zun::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1zTh; else goto c1zT6;
       u1zTh: // global
           call _c1zT5(R1) args: 0, res: 0, upd: 0;
       c1zT6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zuE_info" {
     sat_s1zuE_info:
         const sat_s1zuE_entry;
         const 2;
         const 18;
 },
 _c1zT5() //  [R1]
         { []
         }
     {offset
       c1zT5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zTg; else goto c1zTf;
       c1zTg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1zTf: // global
           _s1zuz::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = _s1zuz::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zT5_info" {
     block_c1zT5_info:
         const _c1zT5;
         const 1;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateR4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zTk: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1zTo; else goto c1zTn;
       c1zTo: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zTn: // global
           I64[Hp - 136] = stg_ap_2_upd_info;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = ds1_s1zuo_info;
           P64[Hp - 88] = R2;
           _c1zSQ::P64 = Hp - 136;
           P64[Hp - 80] = _c1zSQ::P64;
           I64[Hp - 72] = sat_s1zuE_info;
           P64[Hp - 56] = _c1zSQ::P64;
           _c1zSR::P64 = Hp - 104;
           P64[Hp - 48] = _c1zSR::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zSR::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR4_info" {
     Data.Functor.Utils.$fApplicativeStateR4_info:
         const Data.Functor.Utils.$fApplicativeStateR4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.864564276 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR2_closure" {
     Data.Functor.Utils.$fApplicativeStateR2_closure:
         const Data.Functor.Utils.$fApplicativeStateR2_info;
 },
 sat_s1zuQ_entry() //  [R1]
         { []
         }
     {offset
       c1zU6: // global
           _s1zuQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1zU7; else goto c1zU8;
       c1zU8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1zUa; else goto c1zU9;
       c1zUa: // global
           HpAlloc = 24;
           goto c1zU7;
       c1zU7: // global
           R1 = _s1zuQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zU9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zuQ::P64;
           _s1zuF::P64 = P64[_s1zuQ::P64 + 16];
           _s1zuI::P64 = P64[_s1zuQ::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1zuI::P64;
           I64[Sp - 24] = block_c1zU4_info;
           R2 = Hp - 16;
           R1 = _s1zuF::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zuQ_info" {
     sat_s1zuQ_info:
         const sat_s1zuQ_entry;
         const 2;
         const 18;
 },
 _c1zU4() //  [R1]
         { []
         }
     {offset
       c1zU4: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zU4_info" {
     block_c1zU4_info:
         const _c1zU4;
         const 0;
         const 30;
 },
 Data.Functor.Utils.$fApplicativeStateR2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zUf: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zUj; else goto c1zUi;
       c1zUj: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zUi: // global
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = stg_sel_1_upd_info;
           _c1zTX::P64 = Hp - 104;
           P64[Hp - 56] = _c1zTX::P64;
           I64[Hp - 48] = sat_s1zuQ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = _c1zTX::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR2_info" {
     Data.Functor.Utils.$fApplicativeStateR2_info:
         const Data.Functor.Utils.$fApplicativeStateR2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.87392572 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR1_closure" {
     Data.Functor.Utils.$fApplicativeStateR1_closure:
         const Data.Functor.Utils.$fApplicativeStateR1_info;
 },
 sat_s1zv2_entry() //  [R1]
         { []
         }
     {offset
       c1zUT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1zUU; else goto c1zUV;
       c1zUU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zUV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1zUR_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1zv2_info" {
     sat_s1zv2_info:
         const sat_s1zv2_entry;
         const 2;
         const 18;
 },
 _c1zUR() //  [R1]
         { []
         }
     {offset
       c1zUR: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1zUR_info" {
     block_c1zUR_info:
         const _c1zUR;
         const 0;
         const 30;
 },
 ds2_s1zuY_entry() //  [R1]
         { []
         }
     {offset
       c1zUZ: // global
           _s1zuY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1zV0; else goto c1zV1;
       c1zV1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1zV3; else goto c1zV2;
       c1zV3: // global
           HpAlloc = 32;
           goto c1zV0;
       c1zV0: // global
           R1 = _s1zuY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1zV2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1zuY::P64;
           _s1zuV::P64 = P64[_s1zuY::P64 + 16];
           _s1zuW::P64 = P64[_s1zuY::P64 + 24];
           _s1zuX::P64 = P64[_s1zuY::P64 + 32];
           I64[Hp - 24] = sat_s1zv2_info;
           P64[Hp - 8] = _s1zuW::P64;
           P64[Hp] = _s1zuX::P64;
           R2 = Hp - 24;
           R1 = _s1zuV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s1zuY_info" {
     ds2_s1zuY_info:
         const ds2_s1zuY_entry;
         const 3;
         const 15;
 },
 Data.Functor.Utils.$fApplicativeStateR1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zV7: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1zVb; else goto c1zVa;
       c1zVb: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.$fApplicativeStateR1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zVa: // global
           I64[Hp - 104] = ds2_s1zuY_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c1zUJ::P64 = Hp - 104;
           P64[Hp - 48] = _c1zUJ::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1zUJ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.$fApplicativeStateR1_info" {
     Data.Functor.Utils.$fApplicativeStateR1_info:
         const Data.Functor.Utils.$fApplicativeStateR1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.882835482 UTC

[section ""data" . Data.Functor.Utils.$fApplicativeStateR_closure" {
     Data.Functor.Utils.$fApplicativeStateR_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Functor.Utils.$fFunctorStateR_closure+1;
         const Data.Functor.Utils.$fApplicativeStateL5_closure+2;
         const Data.Functor.Utils.$fApplicativeStateR4_closure+3;
         const Data.Functor.Utils.$fApplicativeStateR3_closure+4;
         const Data.Functor.Utils.$fApplicativeStateR2_closure+3;
         const Data.Functor.Utils.$fApplicativeStateR1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.885236496 UTC

[section ""data" . Data.Functor.Utils.getMax1_closure" {
     Data.Functor.Utils.getMax1_closure:
         const Data.Functor.Utils.getMax1_info;
 },
 Data.Functor.Utils.getMax1_entry() //  [R2]
         { []
         }
     {offset
       c1zVH: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMax1_info" {
     Data.Functor.Utils.getMax1_info:
         const Data.Functor.Utils.getMax1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.888755982 UTC

[section ""data" . Data.Functor.Utils.getMax_closure" {
     Data.Functor.Utils.getMax_closure:
         const Data.Functor.Utils.getMax_info;
 },
 Data.Functor.Utils.getMax_entry() //  [R2]
         { []
         }
     {offset
       c1zVU: // global
           R2 = R2;
           call Data.Functor.Utils.getMax1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMax_info" {
     Data.Functor.Utils.getMax_info:
         const Data.Functor.Utils.getMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.892339218 UTC

[section ""data" . Data.Functor.Utils.getMin1_closure" {
     Data.Functor.Utils.getMin1_closure:
         const Data.Functor.Utils.getMin1_info;
 },
 Data.Functor.Utils.getMin1_entry() //  [R2]
         { []
         }
     {offset
       c1zW5: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMin1_info" {
     Data.Functor.Utils.getMin1_info:
         const Data.Functor.Utils.getMin1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.895796053 UTC

[section ""data" . Data.Functor.Utils.getMin_closure" {
     Data.Functor.Utils.getMin_closure:
         const Data.Functor.Utils.getMin_info;
 },
 Data.Functor.Utils.getMin_entry() //  [R2]
         { []
         }
     {offset
       c1zWi: // global
           R2 = R2;
           call Data.Functor.Utils.getMin1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.getMin_info" {
     Data.Functor.Utils.getMin_info:
         const Data.Functor.Utils.getMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.899388489 UTC

[section ""data" . Data.Functor.Utils.runStateL1_closure" {
     Data.Functor.Utils.runStateL1_closure:
         const Data.Functor.Utils.runStateL1_info;
 },
 Data.Functor.Utils.runStateL1_entry() //  [R2]
         { []
         }
     {offset
       c1zWt: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateL1_info" {
     Data.Functor.Utils.runStateL1_info:
         const Data.Functor.Utils.runStateL1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.903326857 UTC

[section ""data" . Data.Functor.Utils.runStateL_closure" {
     Data.Functor.Utils.runStateL_closure:
         const Data.Functor.Utils.runStateL_info;
 },
 Data.Functor.Utils.runStateL_entry() //  [R2]
         { []
         }
     {offset
       c1zWE: // global
           R2 = R2;
           call Data.Functor.Utils.runStateL1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateL_info" {
     Data.Functor.Utils.runStateL_info:
         const Data.Functor.Utils.runStateL_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.906611648 UTC

[section ""data" . Data.Functor.Utils.runStateR1_closure" {
     Data.Functor.Utils.runStateR1_closure:
         const Data.Functor.Utils.runStateR1_info;
 },
 Data.Functor.Utils.runStateR1_entry() //  [R2]
         { []
         }
     {offset
       c1zWP: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateR1_info" {
     Data.Functor.Utils.runStateR1_info:
         const Data.Functor.Utils.runStateR1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.910286402 UTC

[section ""data" . Data.Functor.Utils.runStateR_closure" {
     Data.Functor.Utils.runStateR_closure:
         const Data.Functor.Utils.runStateR_info;
 },
 Data.Functor.Utils.runStateR_entry() //  [R2]
         { []
         }
     {offset
       c1zX0: // global
           R2 = R2;
           call Data.Functor.Utils.runStateR1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.runStateR_info" {
     Data.Functor.Utils.runStateR_info:
         const Data.Functor.Utils.runStateR_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.914525638 UTC

[section ""data" . Data.Functor.Utils.#._closure" {
     Data.Functor.Utils.#._closure:
         const Data.Functor.Utils.#._info;
 },
 Data.Functor.Utils.#._entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1zXd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1zXe; else goto c1zXf;
       c1zXe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Utils.#._closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1zXf: // global
           I64[Sp - 16] = block_c1zXb_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Types.coercible_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Utils.#._info" {
     Data.Functor.Utils.#._info:
         const Data.Functor.Utils.#._entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1zXb() //  []
         { []
         }
     {offset
       c1zXb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1zXb_info" {
     block_c1zXb_info:
         const _c1zXb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.919487893 UTC

[section ""cstring" . Data.Functor.Utils.$trModule4_bytes" {
     Data.Functor.Utils.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.921542505 UTC

[section ""data" . Data.Functor.Utils.$trModule3_closure" {
     Data.Functor.Utils.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.923193567 UTC

[section ""cstring" . Data.Functor.Utils.$trModule2_bytes" {
     Data.Functor.Utils.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,85,116,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.924869216 UTC

[section ""data" . Data.Functor.Utils.$trModule1_closure" {
     Data.Functor.Utils.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.927250733 UTC

[section ""data" . Data.Functor.Utils.$trModule_closure" {
     Data.Functor.Utils.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Utils.$trModule3_closure+1;
         const Data.Functor.Utils.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.92921907 UTC

[section ""data" . $krep_r1ynX_closure" {
     $krep_r1ynX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.9309424 UTC

[section ""data" . $krep1_r1ynY_closure" {
     $krep1_r1ynY_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.932983498 UTC

[section ""data" . $krep2_r1ynZ_closure" {
     $krep2_r1ynZ_closure:
         const :_con_info;
         const $krep_r1ynX_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.934800892 UTC

[section ""data" . $krep3_r1yo0_closure" {
     $krep3_r1yo0_closure:
         const :_con_info;
         const $krep1_r1ynY_closure+2;
         const $krep2_r1ynZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.936553177 UTC

[section ""data" . $krep4_r1yo1_closure" {
     $krep4_r1yo1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep3_r1yo0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.938514146 UTC

[section ""data" . $krep5_r1yo2_closure" {
     $krep5_r1yo2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r1ynY_closure+2;
         const $krep4_r1yo1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.940173514 UTC

[section ""data" . $krep6_r1yo3_closure" {
     $krep6_r1yo3_closure:
         const :_con_info;
         const $krep1_r1ynY_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.941933232 UTC

[section ""data" . $krep7_r1yo4_closure" {
     $krep7_r1yo4_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r1yo3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.943882872 UTC

[section ""cstring" . Data.Functor.Utils.$tcMax2_bytes" {
     Data.Functor.Utils.$tcMax2_bytes:
         I8[] [77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.945533366 UTC

[section ""data" . Data.Functor.Utils.$tcMax1_closure" {
     Data.Functor.Utils.$tcMax1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcMax2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.947290715 UTC

[section ""data" . Data.Functor.Utils.$tcMax_closure" {
     Data.Functor.Utils.$tcMax_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcMax1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17055998897267803697;
         const 13070619747111935994;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.949996028 UTC

[section ""data" . $krep8_r1yo5_closure" {
     $krep8_r1yo5_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcMax_closure+1;
         const $krep6_r1yo3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.951637755 UTC

[section ""data" . Data.Functor.Utils.$tc'Max1_closure" {
     Data.Functor.Utils.$tc'Max1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1yo4_closure+1;
         const $krep8_r1yo5_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.953383032 UTC

[section ""cstring" . Data.Functor.Utils.$tc'Max3_bytes" {
     Data.Functor.Utils.$tc'Max3_bytes:
         I8[] [39,77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.955308106 UTC

[section ""data" . Data.Functor.Utils.$tc'Max2_closure" {
     Data.Functor.Utils.$tc'Max2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'Max3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.957019786 UTC

[section ""data" . Data.Functor.Utils.$tc'Max_closure" {
     Data.Functor.Utils.$tc'Max_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'Max2_closure+1;
         const Data.Functor.Utils.$tc'Max1_closure+4;
         const 16178335003924091205;
         const 10384293407056089504;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.958775225 UTC

[section ""cstring" . Data.Functor.Utils.$tcMin2_bytes" {
     Data.Functor.Utils.$tcMin2_bytes:
         I8[] [77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.960684172 UTC

[section ""data" . Data.Functor.Utils.$tcMin1_closure" {
     Data.Functor.Utils.$tcMin1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcMin2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.962510962 UTC

[section ""data" . Data.Functor.Utils.$tcMin_closure" {
     Data.Functor.Utils.$tcMin_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcMin1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13719831963261617173;
         const 12509304105097421826;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.964342029 UTC

[section ""data" . $krep9_r1yo6_closure" {
     $krep9_r1yo6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcMin_closure+1;
         const $krep6_r1yo3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.966494818 UTC

[section ""data" . Data.Functor.Utils.$tc'Min1_closure" {
     Data.Functor.Utils.$tc'Min1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1yo4_closure+1;
         const $krep9_r1yo6_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.968185177 UTC

[section ""cstring" . Data.Functor.Utils.$tc'Min3_bytes" {
     Data.Functor.Utils.$tc'Min3_bytes:
         I8[] [39,77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.970752578 UTC

[section ""data" . Data.Functor.Utils.$tc'Min2_closure" {
     Data.Functor.Utils.$tc'Min2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'Min3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.972840742 UTC

[section ""data" . Data.Functor.Utils.$tc'Min_closure" {
     Data.Functor.Utils.$tc'Min_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'Min2_closure+1;
         const Data.Functor.Utils.$tc'Min1_closure+4;
         const 3497961960072019520;
         const 14191657227527039212;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.974725105 UTC

[section ""cstring" . Data.Functor.Utils.$tcStateL2_bytes" {
     Data.Functor.Utils.$tcStateL2_bytes:
         I8[] [83,116,97,116,101,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.976454947 UTC

[section ""data" . Data.Functor.Utils.$tcStateL1_closure" {
     Data.Functor.Utils.$tcStateL1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcStateL2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.978471641 UTC

[section ""data" . Data.Functor.Utils.$tcStateL_closure" {
     Data.Functor.Utils.$tcStateL_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcStateL1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 8498227433031831307;
         const 6442648285908986693;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.98022922 UTC

[section ""data" . $krep10_r1yo7_closure" {
     $krep10_r1yo7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcStateL_closure+1;
         const $krep3_r1yo0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.982330834 UTC

[section ""data" . Data.Functor.Utils.$tc'StateL1_closure" {
     Data.Functor.Utils.$tc'StateL1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1yo2_closure+4;
         const $krep10_r1yo7_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.984295177 UTC

[section ""cstring" . Data.Functor.Utils.$tc'StateL3_bytes" {
     Data.Functor.Utils.$tc'StateL3_bytes:
         I8[] [39,83,116,97,116,101,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.9860282 UTC

[section ""data" . Data.Functor.Utils.$tc'StateL2_closure" {
     Data.Functor.Utils.$tc'StateL2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'StateL3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.987775686 UTC

[section ""data" . Data.Functor.Utils.$tc'StateL_closure" {
     Data.Functor.Utils.$tc'StateL_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'StateL2_closure+1;
         const Data.Functor.Utils.$tc'StateL1_closure+4;
         const 8965240648136302046;
         const 8498113279827793106;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.98985732 UTC

[section ""cstring" . Data.Functor.Utils.$tcStateR2_bytes" {
     Data.Functor.Utils.$tcStateR2_bytes:
         I8[] [83,116,97,116,101,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.991525118 UTC

[section ""data" . Data.Functor.Utils.$tcStateR1_closure" {
     Data.Functor.Utils.$tcStateR1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tcStateR2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.993228657 UTC

[section ""data" . Data.Functor.Utils.$tcStateR_closure" {
     Data.Functor.Utils.$tcStateR_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tcStateR1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10049146831422350196;
         const 16883721947448934294;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.995268105 UTC

[section ""data" . $krep11_r1yo8_closure" {
     $krep11_r1yo8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Utils.$tcStateR_closure+1;
         const $krep3_r1yo0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.996979138 UTC

[section ""data" . Data.Functor.Utils.$tc'StateR1_closure" {
     Data.Functor.Utils.$tc'StateR1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1yo2_closure+4;
         const $krep11_r1yo8_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:21.99892107 UTC

[section ""cstring" . Data.Functor.Utils.$tc'StateR3_bytes" {
     Data.Functor.Utils.$tc'StateR3_bytes:
         I8[] [39,83,116,97,116,101,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:22.000758897 UTC

[section ""data" . Data.Functor.Utils.$tc'StateR2_closure" {
     Data.Functor.Utils.$tc'StateR2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Utils.$tc'StateR3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:22.002486617 UTC

[section ""data" . Data.Functor.Utils.$tc'StateR_closure" {
     Data.Functor.Utils.$tc'StateR_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Utils.$trModule_closure+1;
         const Data.Functor.Utils.$tc'StateR2_closure+1;
         const Data.Functor.Utils.$tc'StateR1_closure+4;
         const 13798701525568783897;
         const 17913645303573466967;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:22.004262117 UTC

[section ""relreadonly" . S1zzT_srt" {
     S1zzT_srt:
         const Data.Functor.Utils.$fSemigroupMax_$cstimes_closure;
         const Data.Functor.Utils.$fSemigroupMax_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Utils.$fSemigroupMin_$cstimes_closure;
         const Data.Functor.Utils.$fSemigroupMin_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
 }]

