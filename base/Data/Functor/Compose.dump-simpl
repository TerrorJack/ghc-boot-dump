
==================== Tidy Core ====================
2018-03-16 16:12:06.104329239 UTC

Result size of Tidy Core
  = {terms: 2,260, types: 7,478, coercions: 1,737, joins: 0/29}

-- RHS size: {terms: 14, types: 41, coercions: 20, joins: 0/0}
$fEq1Compose1_rgdPP
  :: forall (f :: * -> *) (g :: * -> *).
     (Eq1 f, Eq1 g) =>
     forall a b.
     (a -> b -> Bool) -> Compose f g a -> Compose f g b -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><L,U><L,U><L,U>,
 Unf=OtherCon []]
$fEq1Compose1_rgdPP
  = \ (@ (f_agdsI :: * -> *))
      (@ (g_agdsJ :: * -> *))
      ($dEq1_agdsK :: Eq1 f_agdsI)
      ($dEq2_agdsL :: Eq1 g_agdsJ)
      (@ a_agdsP)
      (@ b_agdsQ)
      (eq_agd59 :: a_agdsP -> b_agdsQ -> Bool)
      (ds_dgdxc :: Compose f_agdsI g_agdsJ a_agdsP)
      (ds1_dgdxd :: Compose f_agdsI g_agdsJ b_agdsQ) ->
      ($dEq1_agdsK
       `cast` (Data.Functor.Classes.N:Eq1[0] <f_agdsI>_N
               :: (Eq1 f_agdsI :: Constraint)
                  ~R# (forall a b.
                       (a -> b -> Bool) -> f_agdsI a -> f_agdsI b -> Bool :: *)))
        @ (g_agdsJ a_agdsP)
        @ (g_agdsJ b_agdsQ)
        (($dEq2_agdsL
          `cast` (Data.Functor.Classes.N:Eq1[0] <g_agdsJ>_N
                  :: (Eq1 g_agdsJ :: Constraint)
                     ~R# (forall a b.
                          (a -> b -> Bool) -> g_agdsJ a -> g_agdsJ b -> Bool :: *)))
           @ a_agdsP @ b_agdsQ eq_agd59)
        (ds_dgdxc
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdsI>_R <g_agdsJ>_N <a_agdsP>_N
                 :: (Compose f_agdsI g_agdsJ a_agdsP :: *)
                    ~R# (f_agdsI (g_agdsJ a_agdsP) :: *)))
        (ds1_dgdxd
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdsI>_R <g_agdsJ>_N <b_agdsQ>_N
                 :: (Compose f_agdsI g_agdsJ b_agdsQ :: *)
                    ~R# (f_agdsI (g_agdsJ b_agdsQ) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 25, joins: 0/0}
Data.Functor.Compose.$fEq1Compose [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Eq1 f, Eq1 g) =>
     Eq1 (Compose f g)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (@ (f_XgduH :: * -> *))
                  (@ (g_XgduJ :: * -> *))
                  ($dEq1_XgduL [Occ=Once] :: Eq1 f_XgduH)
                  ($dEq2_XgduN [Occ=Once] :: Eq1 g_XgduJ)
                  (@ a_agdsP)
                  (@ b_agdsQ)
                  (eq_agd59 [Occ=Once] :: a_agdsP -> b_agdsQ -> Bool)
                  (ds_dgdxc [Occ=Once] :: Compose f_XgduH g_XgduJ a_agdsP)
                  (ds1_dgdxd [Occ=Once] :: Compose f_XgduH g_XgduJ b_agdsQ) ->
                  ($dEq1_XgduL
                   `cast` (Data.Functor.Classes.N:Eq1[0] <f_XgduH>_N
                           :: (Eq1 f_XgduH :: Constraint)
                              ~R# (forall a b.
                                   (a -> b -> Bool) -> f_XgduH a -> f_XgduH b -> Bool :: *)))
                    @ (g_XgduJ a_agdsP)
                    @ (g_XgduJ b_agdsQ)
                    (($dEq2_XgduN
                      `cast` (Data.Functor.Classes.N:Eq1[0] <g_XgduJ>_N
                              :: (Eq1 g_XgduJ :: Constraint)
                                 ~R# (forall a b.
                                      (a -> b -> Bool) -> g_XgduJ a -> g_XgduJ b -> Bool :: *)))
                       @ a_agdsP @ b_agdsQ eq_agd59)
                    (ds_dgdxc
                     `cast` (Data.Functor.Compose.N:Compose[0]
                                 <*>_N <*>_N <f_XgduH>_R <g_XgduJ>_N <a_agdsP>_N
                             :: (Compose f_XgduH g_XgduJ a_agdsP :: *)
                                ~R# (f_XgduH (g_XgduJ a_agdsP) :: *)))
                    (ds1_dgdxd
                     `cast` (Data.Functor.Compose.N:Compose[0]
                                 <*>_N <*>_N <f_XgduH>_R <g_XgduJ>_N <b_agdsQ>_N
                             :: (Compose f_XgduH g_XgduJ b_agdsQ :: *)
                                ~R# (f_XgduH (g_XgduJ b_agdsQ) :: *))))
               `cast` (forall (f :: <* -> *>_N) (g :: <* -> *>_N).
                       <Eq1 f>_R
                       ->_R <Eq1 g>_R
                       ->_R Sym (Data.Functor.Classes.N:Eq1[0] <Compose f g>_N)
                       :: (forall (f :: * -> *) (g :: * -> *).
                           (Eq1 f, Eq1 g) =>
                           forall a b.
                           (a -> b -> Bool) -> Compose f g a -> Compose f g b -> Bool :: *)
                          ~R# (forall (f :: * -> *) (g :: * -> *).
                               (Eq1 f, Eq1 g) =>
                               Eq1 (Compose f g) :: *))}]
Data.Functor.Compose.$fEq1Compose
  = $fEq1Compose1_rgdPP
    `cast` (forall (f :: <* -> *>_N) (g :: <* -> *>_N).
            <Eq1 f>_R
            ->_R <Eq1 g>_R
            ->_R Sym (Data.Functor.Classes.N:Eq1[0] <Compose f g>_N)
            :: (forall (f :: * -> *) (g :: * -> *).
                (Eq1 f, Eq1 g) =>
                forall a b.
                (a -> b -> Bool) -> Compose f g a -> Compose f g b -> Bool :: *)
               ~R# (forall (f :: * -> *) (g :: * -> *).
                    (Eq1 f, Eq1 g) =>
                    Eq1 (Compose f g) :: *))

-- RHS size: {terms: 16, types: 43, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrd1Compose_$cliftCompare
  :: forall (f :: * -> *) (g :: * -> *).
     (Ord1 f, Ord1 g) =>
     forall a b.
     (a -> b -> Ordering) -> Compose f g a -> Compose f g b -> Ordering
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdsj :: * -> *))
                 (@ (g_agdsk :: * -> *))
                 ($dOrd1_agdsl [Occ=Once] :: Ord1 f_agdsj)
                 ($dOrd2_agdsm [Occ=Once] :: Ord1 g_agdsk)
                 (@ a_agdsu)
                 (@ b_agdsv)
                 (comp_agd54 [Occ=Once] :: a_agdsu -> b_agdsv -> Ordering)
                 (ds_dgdx3 [Occ=Once] :: Compose f_agdsj g_agdsk a_agdsu)
                 (ds1_dgdx4 [Occ=Once] :: Compose f_agdsj g_agdsk b_agdsv) ->
                 liftCompare
                   @ f_agdsj
                   $dOrd1_agdsl
                   @ (g_agdsk a_agdsu)
                   @ (g_agdsk b_agdsv)
                   (liftCompare @ g_agdsk $dOrd2_agdsm @ a_agdsu @ b_agdsv comp_agd54)
                   (ds_dgdx3
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <a_agdsu>_N
                            :: (Compose f_agdsj g_agdsk a_agdsu :: *)
                               ~R# (f_agdsj (g_agdsk a_agdsu) :: *)))
                   (ds1_dgdx4
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <b_agdsv>_N
                            :: (Compose f_agdsj g_agdsk b_agdsv :: *)
                               ~R# (f_agdsj (g_agdsk b_agdsv) :: *)))}]
Data.Functor.Compose.$fOrd1Compose_$cliftCompare
  = \ (@ (f_agdsj :: * -> *))
      (@ (g_agdsk :: * -> *))
      ($dOrd1_agdsl :: Ord1 f_agdsj)
      ($dOrd2_agdsm :: Ord1 g_agdsk)
      (@ a_agdsu)
      (@ b_agdsv)
      (comp_agd54 :: a_agdsu -> b_agdsv -> Ordering)
      (ds_dgdx3 :: Compose f_agdsj g_agdsk a_agdsu)
      (ds1_dgdx4 :: Compose f_agdsj g_agdsk b_agdsv) ->
      liftCompare
        @ f_agdsj
        $dOrd1_agdsl
        @ (g_agdsk a_agdsu)
        @ (g_agdsk b_agdsv)
        (liftCompare @ g_agdsk $dOrd2_agdsm @ a_agdsu @ b_agdsv comp_agd54)
        (ds_dgdx3
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <a_agdsu>_N
                 :: (Compose f_agdsj g_agdsk a_agdsu :: *)
                    ~R# (f_agdsj (g_agdsk a_agdsu) :: *)))
        (ds1_dgdx4
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <b_agdsv>_N
                 :: (Compose f_agdsj g_agdsk b_agdsv :: *)
                    ~R# (f_agdsj (g_agdsk b_agdsv) :: *)))

-- RHS size: {terms: 16, types: 43, coercions: 20, joins: 0/0}
Data.Functor.Compose.$fOrd1Compose1
  :: forall (f :: * -> *) (g :: * -> *).
     (Ord1 f, Ord1 g) =>
     forall a b.
     (a -> b -> Bool) -> Compose f g a -> Compose f g b -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))L),1*U(1*C1(C1(C1(U))),A)><L,1*U(1*C1(U),A)><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdsj :: * -> *))
                 (@ (g_agdsk :: * -> *))
                 ($dOrd1_agdsl [Occ=Once] :: Ord1 f_agdsj)
                 ($dOrd2_agdsm [Occ=Once] :: Ord1 g_agdsk)
                 (@ a_adwad)
                 (@ b_adwae)
                 (eta_B3 [Occ=Once] :: a_adwad -> b_adwae -> Bool)
                 (eta1_B2 [Occ=Once] :: Compose f_agdsj g_agdsk a_adwad)
                 (eta2_B1 [Occ=Once] :: Compose f_agdsj g_agdsk b_adwae) ->
                 ((Data.Functor.Classes.$p1Ord1 @ f_agdsj $dOrd1_agdsl)
                  `cast` (Data.Functor.Classes.N:Eq1[0] <f_agdsj>_N
                          :: (Eq1 f_agdsj :: Constraint)
                             ~R# (forall a b.
                                  (a -> b -> Bool) -> f_agdsj a -> f_agdsj b -> Bool :: *)))
                   @ (g_agdsk a_adwad)
                   @ (g_agdsk b_adwae)
                   (((Data.Functor.Classes.$p1Ord1 @ g_agdsk $dOrd2_agdsm)
                     `cast` (Data.Functor.Classes.N:Eq1[0] <g_agdsk>_N
                             :: (Eq1 g_agdsk :: Constraint)
                                ~R# (forall a b.
                                     (a -> b -> Bool) -> g_agdsk a -> g_agdsk b -> Bool :: *)))
                      @ a_adwad @ b_adwae eta_B3)
                   (eta1_B2
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <a_adwad>_N
                            :: (Compose f_agdsj g_agdsk a_adwad :: *)
                               ~R# (f_agdsj (g_agdsk a_adwad) :: *)))
                   (eta2_B1
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <b_adwae>_N
                            :: (Compose f_agdsj g_agdsk b_adwae :: *)
                               ~R# (f_agdsj (g_agdsk b_adwae) :: *)))}]
Data.Functor.Compose.$fOrd1Compose1
  = \ (@ (f_agdsj :: * -> *))
      (@ (g_agdsk :: * -> *))
      ($dOrd1_agdsl :: Ord1 f_agdsj)
      ($dOrd2_agdsm :: Ord1 g_agdsk)
      (@ a_adwad)
      (@ b_adwae)
      (eta_B3 :: a_adwad -> b_adwae -> Bool)
      (eta1_B2 :: Compose f_agdsj g_agdsk a_adwad)
      (eta2_B1 :: Compose f_agdsj g_agdsk b_adwae) ->
      ((Data.Functor.Classes.$p1Ord1 @ f_agdsj $dOrd1_agdsl)
       `cast` (Data.Functor.Classes.N:Eq1[0] <f_agdsj>_N
               :: (Eq1 f_agdsj :: Constraint)
                  ~R# (forall a b.
                       (a -> b -> Bool) -> f_agdsj a -> f_agdsj b -> Bool :: *)))
        @ (g_agdsk a_adwad)
        @ (g_agdsk b_adwae)
        (((Data.Functor.Classes.$p1Ord1 @ g_agdsk $dOrd2_agdsm)
          `cast` (Data.Functor.Classes.N:Eq1[0] <g_agdsk>_N
                  :: (Eq1 g_agdsk :: Constraint)
                     ~R# (forall a b.
                          (a -> b -> Bool) -> g_agdsk a -> g_agdsk b -> Bool :: *)))
           @ a_adwad @ b_adwae eta_B3)
        (eta1_B2
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <a_adwad>_N
                 :: (Compose f_agdsj g_agdsk a_adwad :: *)
                    ~R# (f_agdsj (g_agdsk a_adwad) :: *)))
        (eta2_B1
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdsj>_R <g_agdsk>_N <b_adwae>_N
                 :: (Compose f_agdsj g_agdsk b_adwae :: *)
                    ~R# (f_agdsj (g_agdsk b_adwae) :: *)))

-- RHS size: {terms: 11, types: 23, coercions: 9, joins: 0/0}
Data.Functor.Compose.$fOrd1Compose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Ord1 f, Ord1 g) =>
     Ord1 (Compose f g)
[GblId[DFunId],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C1(U))),C(C1(C1(U))))><L,U(C(U),C(U))>m,
 Unf=DFun: \ (@ (f_agd52 :: * -> *))
             (@ (g_agd53 :: * -> *))
             (v_B1 :: Ord1 f_agd52)
             (v1_B2 :: Ord1 g_agd53) ->
       Data.Functor.Classes.C:Ord1 TYPE: Compose f_agd52 g_agd53
                                   (Data.Functor.Compose.$fOrd1Compose1
                                      @ f_agd52 @ g_agd53 v_B1 v1_B2)
                                   `cast` (Sym (Data.Functor.Classes.N:Eq1[0]
                                                    <Compose f_agd52 g_agd53>_N)
                                           :: (forall a b.
                                               (a -> b -> Bool)
                                               -> Compose f_agd52 g_agd53 a
                                               -> Compose f_agd52 g_agd53 b
                                               -> Bool :: *)
                                              ~R# (Eq1 (Compose f_agd52 g_agd53) :: Constraint))
                                   Data.Functor.Compose.$fOrd1Compose_$cliftCompare
                                     @ f_agd52 @ g_agd53 v_B1 v1_B2]
Data.Functor.Compose.$fOrd1Compose
  = \ (@ (f_Xgdux :: * -> *))
      (@ (g_Xgduz :: * -> *))
      ($dOrd1_XgduB :: Ord1 f_Xgdux)
      ($dOrd2_XgduD :: Ord1 g_Xgduz) ->
      Data.Functor.Classes.C:Ord1
        @ (Compose f_Xgdux g_Xgduz)
        ((Data.Functor.Compose.$fOrd1Compose1
            @ f_Xgdux @ g_Xgduz $dOrd1_XgduB $dOrd2_XgduD)
         `cast` (Sym (Data.Functor.Classes.N:Eq1[0]
                          <Compose f_Xgdux g_Xgduz>_N)
                 :: (forall a b.
                     (a -> b -> Bool)
                     -> Compose f_Xgdux g_Xgduz a
                     -> Compose f_Xgdux g_Xgduz b
                     -> Bool :: *)
                    ~R# (Eq1 (Compose f_Xgdux g_Xgduz) :: Constraint)))
        (Data.Functor.Compose.$fOrd1Compose_$cliftCompare
           @ f_Xgdux @ g_Xgduz $dOrd1_XgduB $dOrd2_XgduD)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose7 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Functor.Compose.$fDataCompose7 = "Compose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Compose.$fDataCompose6
  = GHC.CString.unpackCString# Data.Functor.Compose.$fDataCompose7

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fRead1Compose2 :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$fRead1Compose2
  = Text.Read.Lex.Ident Data.Functor.Compose.$fDataCompose6

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fRead1Compose1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$fRead1Compose1 = GHC.Types.I# 11#

-- RHS size: {terms: 58, types: 128, coercions: 63, joins: 0/3}
Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> Text.ParserCombinators.ReadPrec.ReadPrec (Compose f g a)
[GblId,
 Arity=4,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,1*C1(C1(U)),1*C1(C1(U)))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 60 0 0] 431 60}]
Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
  = \ (@ (f_agdr6 :: * -> *))
      (@ (g_agdr7 :: * -> *))
      ($dRead1_agdr8 :: Read1 f_agdr6)
      ($dRead2_agdr9 :: Read1 g_agdr7)
      (@ a_agdru)
      (rp_agd4Y :: Text.ParserCombinators.ReadPrec.ReadPrec a_agdru)
      (rl_agd4Z :: Text.ParserCombinators.ReadPrec.ReadPrec [a_agdru]) ->
      let {
        reader_sgdAQ [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.ReadPrec
               (f_agdr6 (g_agdr7 a_agdru))
        [LclId]
        reader_sgdAQ
          = liftReadPrec
              @ f_agdr6
              $dRead1_agdr8
              @ (g_agdr7 a_agdru)
              (liftReadPrec @ g_agdr7 $dRead2_agdr9 @ a_agdru rp_agd4Y rl_agd4Z)
              (liftReadListPrec
                 @ g_agdr7 $dRead2_agdr9 @ a_agdru rp_agd4Y rl_agd4Z) } in
      let {
        $wlvl_sgdH9 [InlPrag=NOUSERINLINE[0], Dmd=<L,C(C1(U))>]
          :: GHC.Prim.Int#
             -> forall b.
                (Compose f_agdr6 g_agdr7 a_agdru
                 -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []]
        $wlvl_sgdH9
          = \ (ww_sgdH7 :: GHC.Prim.Int#)
              (@ b_sgdH3)
              (w_sgdH4
                 :: Compose f_agdr6 g_agdr7 a_agdru
                    -> Text.ParserCombinators.ReadP.P b_sgdH3) ->
              case GHC.Prim.<=# ww_sgdH7 10# of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_sgdH3;
                1# ->
                  case Text.Read.Lex.$wexpect
                         Data.Functor.Compose.$fRead1Compose2
                         @ b_sgdH3
                         (\ _ [Occ=Dead, OS=OneShot] ->
                            (((reader_sgdAQ
                               `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                           <f_agdr6 (g_agdr7 a_agdru)>_R
                                       :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                             (f_agdr6 (g_agdr7 a_agdru)) :: *)
                                          ~R# (Text.ParserCombinators.ReadPrec.Prec
                                               -> Text.ParserCombinators.ReadP.ReadP
                                                    (f_agdr6 (g_agdr7 a_agdru)) :: *)))
                                Data.Functor.Compose.$fRead1Compose1)
                             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <f_agdr6 (g_agdr7 a_agdru)>_R
                                     :: (Text.ParserCombinators.ReadP.ReadP
                                           (f_agdr6 (g_agdr7 a_agdru)) :: *)
                                        ~R# (forall b.
                                             (f_agdr6 (g_agdr7 a_agdru)
                                              -> Text.ParserCombinators.ReadP.P b)
                                             -> Text.ParserCombinators.ReadP.P b :: *)))
                              @ b_sgdH3
                              (\ (a2_i88WJ :: f_agdr6 (g_agdr7 a_agdru)) ->
                                 w_sgdH4
                                   (a2_i88WJ
                                    `cast` (Sym (Data.Functor.Compose.N:Compose[0]
                                                     <*>_N
                                                     <*>_N
                                                     <f_agdr6>_R
                                                     <g_agdr7>_N
                                                     <a_agdru>_N)
                                            :: (f_agdr6 (g_agdr7 a_agdru) :: *)
                                               ~R# (Compose f_agdr6 g_agdr7 a_agdru :: *)))))
                  of
                  { (# ww2_sdy4c #) ->
                  Text.ParserCombinators.ReadP.Look @ b_sgdH3 ww2_sdy4c
                  }
              } } in
      let {
        lvl8_sgdAY [InlPrag=NOUSERINLINE[0], Dmd=<L,C(C(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Compose f_agdr6 g_agdr7 a_agdru
                 -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId,
         Arity=2,
         Str=<S(S),1*U(U)><L,C(U)>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (w_sgdH2 [Occ=Once!]
                            :: Text.ParserCombinators.ReadPrec.Prec)
                         (@ b_sgdH3)
                         (w1_sgdH4 [Occ=Once]
                            :: Compose f_agdr6 g_agdr7 a_agdru
                               -> Text.ParserCombinators.ReadP.P b_sgdH3) ->
                         case w_sgdH2 of { GHC.Types.I# ww1_sgdH7 [Occ=Once] ->
                         $wlvl_sgdH9 ww1_sgdH7 @ b_sgdH3 w1_sgdH4
                         }}]
        lvl8_sgdAY
          = \ (w_sgdH2 :: Text.ParserCombinators.ReadPrec.Prec)
              (@ b_sgdH3)
              (w1_sgdH4
                 :: Compose f_agdr6 g_agdr7 a_agdru
                    -> Text.ParserCombinators.ReadP.P b_sgdH3) ->
              case w_sgdH2 of { GHC.Types.I# ww1_sgdH7 ->
              $wlvl_sgdH9 ww1_sgdH7 @ b_sgdH3 w1_sgdH4
              } } in
      (\ (eta_B2 :: Text.ParserCombinators.ReadPrec.Prec)
         (@ b_i815e)
         (eta1_B1
            :: Compose f_agdr6 g_agdr7 a_agdru
               -> Text.ParserCombinators.ReadP.P b_i815e) ->
         GHC.Read.list3
           @ (Compose f_agdr6 g_agdr7 a_agdru)
           (lvl8_sgdAY
            `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Compose
                                      f_agdr6
                                      g_agdr7
                                      a_agdru>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <Compose f_agdr6 g_agdr7 a_agdru>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> forall b.
                           (Compose f_agdr6 g_agdr7 a_agdru
                            -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                              (Compose f_agdr6 g_agdr7 a_agdru) :: *)))
           eta_B2
           @ b_i815e
           eta1_B1)
      `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
               ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                             <Compose
                                f_agdr6
                                g_agdr7
                                a_agdru>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Compose f_agdr6 g_agdr7 a_agdru>_R)
              :: (Text.ParserCombinators.ReadPrec.Prec
                  -> forall b.
                     (Compose f_agdr6 g_agdr7 a_agdru
                      -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                        (Compose f_agdr6 g_agdr7 a_agdru) :: *))

-- RHS size: {terms: 28, types: 77, coercions: 38, joins: 0/1}
Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a.
     (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (Compose f g a)
[GblId,
 Arity=4,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))><L,C(C(U))><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 210 60}]
Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec
  = \ (@ (f_agdr6 :: * -> *))
      (@ (g_agdr7 :: * -> *))
      ($dRead1_agdr8 :: Read1 f_agdr6)
      ($dRead2_agdr9 :: Read1 g_agdr7)
      (@ a_agdrd)
      (rp_adwa1 :: Int -> ReadS a_agdrd)
      (rl_adwa2 :: ReadS [a_agdrd]) ->
      let {
        ds_sgdAK [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.ReadPrec
               (Compose f_agdr6 g_agdr7 a_agdrd)
        [LclId]
        ds_sgdAK
          = Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
              @ f_agdr6
              @ g_agdr7
              $dRead1_agdr8
              $dRead2_agdr9
              @ a_agdrd
              ((Text.ParserCombinators.ReadPrec.readS_to_Prec1
                  @ a_agdrd rp_adwa1)
               `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <a_agdrd>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                               <a_agdrd>_R)
                       :: (Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (a_agdrd -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (Text.ParserCombinators.ReadPrec.ReadPrec a_agdrd :: *)))
              ((\ _ [Occ=Dead]
                  (@ b_idxi2)
                  (w1_idxi3
                     :: [a_agdrd] -> Text.ParserCombinators.ReadP.P b_idxi2) ->
                  case Text.ParserCombinators.ReadP.$wreadS_to_P
                         @ [a_agdrd] rl_adwa2 @ b_idxi2 w1_idxi3
                  of
                  { (# ww1_idxi6 #) ->
                  Text.ParserCombinators.ReadP.Look @ b_idxi2 ww1_idxi6
                  })
               `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <[a_agdrd]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <[a_agdrd]>_R)
                       :: (Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              ([a_agdrd] -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                 [a_agdrd] :: *))) } in
      \ (n_idx7Z :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Compose f_agdr6 g_agdr7 a_agdrd)
          ((((ds_sgdAK
              `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Compose f_agdr6 g_agdr7 a_agdrd>_R
                      :: (Text.ParserCombinators.ReadPrec.ReadPrec
                            (Compose f_agdr6 g_agdr7 a_agdrd) :: *)
                         ~R# (Text.ParserCombinators.ReadPrec.Prec
                              -> Text.ParserCombinators.ReadP.ReadP
                                   (Compose f_agdr6 g_agdr7 a_agdrd) :: *)))
               n_idx7Z)
            `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                        <Compose f_agdr6 g_agdr7 a_agdrd>_R
                    :: (Text.ParserCombinators.ReadP.ReadP
                          (Compose f_agdr6 g_agdr7 a_agdrd) :: *)
                       ~R# (forall b.
                            (Compose f_agdr6 g_agdr7 a_agdrd
                             -> Text.ParserCombinators.ReadP.P b)
                            -> Text.ParserCombinators.ReadP.P b :: *)))
             @ (Compose f_agdr6 g_agdr7 a_agdrd)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Compose f_agdr6 g_agdr7 a_agdrd)))

-- RHS size: {terms: 13, types: 30, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> Text.ParserCombinators.ReadPrec.ReadPrec [Compose f g a]
[GblId,
 Arity=4,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdr6 :: * -> *))
                 (@ (g_agdr7 :: * -> *))
                 ($dRead1_agdr8 [Occ=Once] :: Read1 f_agdr6)
                 ($dRead2_agdr9 [Occ=Once] :: Read1 g_agdr7)
                 (@ a_agdsb)
                 (rp_adwdf [Occ=Once]
                    :: Text.ParserCombinators.ReadPrec.ReadPrec a_agdsb)
                 (rl_adwdg [Occ=Once]
                    :: Text.ParserCombinators.ReadPrec.ReadPrec [a_agdsb]) ->
                 GHC.Read.list
                   @ (Compose f_agdr6 g_agdr7 a_agdsb)
                   (Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
                      @ f_agdr6
                      @ g_agdr7
                      $dRead1_agdr8
                      $dRead2_agdr9
                      @ a_agdsb
                      rp_adwdf
                      rl_adwdg)}]
Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec
  = \ (@ (f_agdr6 :: * -> *))
      (@ (g_agdr7 :: * -> *))
      ($dRead1_agdr8 :: Read1 f_agdr6)
      ($dRead2_agdr9 :: Read1 g_agdr7)
      (@ a_agdsb)
      (rp_adwdf :: Text.ParserCombinators.ReadPrec.ReadPrec a_agdsb)
      (rl_adwdg :: Text.ParserCombinators.ReadPrec.ReadPrec [a_agdsb]) ->
      GHC.Read.list
        @ (Compose f_agdr6 g_agdr7 a_agdsb)
        (Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
           @ f_agdr6
           @ g_agdr7
           $dRead1_agdr8
           $dRead2_agdr9
           @ a_agdsb
           rp_adwdf
           rl_adwdg)

Rec {
-- RHS size: {terms: 17, types: 27, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fRead1Compose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     Read1 (Compose f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,A,C(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))>m,
 Unf=DFun: \ (@ (f_agd4W :: * -> *))
             (@ (g_agd4X :: * -> *))
             (v_B1 :: Read1 f_agd4W)
             (v1_B2 :: Read1 g_agd4X) ->
       Data.Functor.Classes.C:Read1 TYPE: Compose f_agd4W g_agd4X
                                    Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec
                                      @ f_agd4W @ g_agd4X v_B1 v1_B2
                                    Data.Functor.Compose.$fRead1Compose_$cliftReadList
                                      @ f_agd4W @ g_agd4X v_B1 v1_B2
                                    Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
                                      @ f_agd4W @ g_agd4X v_B1 v1_B2
                                    Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec
                                      @ f_agd4W @ g_agd4X v_B1 v1_B2]
Data.Functor.Compose.$fRead1Compose
  = \ (@ (f_agdr6 :: * -> *))
      (@ (g_agdr7 :: * -> *))
      ($dRead1_agdr8 :: Read1 f_agdr6)
      ($dRead2_agdr9 :: Read1 g_agdr7) ->
      Data.Functor.Classes.C:Read1
        @ (Compose f_agdr6 g_agdr7)
        (Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec
           @ f_agdr6 @ g_agdr7 $dRead1_agdr8 $dRead2_agdr9)
        (Data.Functor.Compose.$fRead1Compose_$cliftReadList
           @ f_agdr6 @ g_agdr7 $dRead1_agdr8 $dRead2_agdr9)
        (Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
           @ f_agdr6 @ g_agdr7 $dRead1_agdr8 $dRead2_agdr9)
        (Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec
           @ f_agdr6 @ g_agdr7 $dRead1_agdr8 $dRead2_agdr9)

-- RHS size: {terms: 9, types: 24, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fRead1Compose_$cliftReadList [Occ=LoopBreaker]
  :: forall (f :: * -> *) (g :: * -> *).
     (Read1 f, Read1 g) =>
     forall a. (Int -> ReadS a) -> ReadS [a] -> ReadS [Compose f g a]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))>,
 Unf=OtherCon []]
Data.Functor.Compose.$fRead1Compose_$cliftReadList
  = \ (@ (f_agdr6 :: * -> *))
      (@ (g_agdr7 :: * -> *))
      ($dRead1_agdr8 :: Read1 f_agdr6)
      ($dRead2_agdr9 :: Read1 g_agdr7)
      (@ a_agdrl) ->
      liftReadListDefault
        @ (Compose f_agdr6 g_agdr7)
        @ a_agdrl
        (Data.Functor.Compose.$fRead1Compose
           @ f_agdr6 @ g_agdr7 $dRead1_agdr8 $dRead2_agdr9)
end Rec }

-- RHS size: {terms: 23, types: 39, coercions: 8, joins: 0/0}
Data.Functor.Compose.$w$cliftShowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     forall a.
     (Int -> a -> ShowS)
     -> ([a] -> ShowS) -> GHC.Prim.Int# -> Compose f g a -> ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,U(1*C1(C1(U)),1*C1(C1(U)))><L,U><L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 60 0 0 0 0] 170 0}]
Data.Functor.Compose.$w$cliftShowsPrec
  = \ (@ (f_sgdHs :: * -> *))
      (@ (g_sgdHt :: * -> *))
      (w_sgdHu :: Show1 f_sgdHs)
      (w1_sgdHv :: Show1 g_sgdHt)
      (@ a_sgdHw)
      (w2_sgdHx :: Int -> a_sgdHw -> ShowS)
      (w3_sgdHy :: [a_sgdHw] -> ShowS)
      (ww_sgdHD :: GHC.Prim.Int#)
      (w4_sgdHA :: Compose f_sgdHs g_sgdHt a_sgdHw) ->
      Data.Functor.Classes.$wshowsUnaryWith
        @ (f_sgdHs (g_sgdHt a_sgdHw))
        (liftShowsPrec
           @ f_sgdHs
           w_sgdHu
           @ (g_sgdHt a_sgdHw)
           (liftShowsPrec @ g_sgdHt w1_sgdHv @ a_sgdHw w2_sgdHx w3_sgdHy)
           (liftShowList @ g_sgdHt w1_sgdHv @ a_sgdHw w2_sgdHx w3_sgdHy))
        Data.Functor.Compose.$fDataCompose6
        ww_sgdHD
        (w4_sgdHA
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_sgdHs>_R <g_sgdHt>_N <a_sgdHw>_N
                 :: (Compose f_sgdHs g_sgdHt a_sgdHw :: *)
                    ~R# (f_sgdHs (g_sgdHt a_sgdHw) :: *)))

-- RHS size: {terms: 19, types: 34, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     forall a.
     (Int -> a -> ShowS)
     -> ([a] -> ShowS) -> Int -> Compose f g a -> ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,U(C(C1(U)),C(C1(U)))><L,U><L,U><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_sgdHs :: * -> *))
                 (@ (g_sgdHt :: * -> *))
                 (w_sgdHu [Occ=Once] :: Show1 f_sgdHs)
                 (w1_sgdHv [Occ=Once] :: Show1 g_sgdHt)
                 (@ a_sgdHw)
                 (w2_sgdHx [Occ=Once] :: Int -> a_sgdHw -> ShowS)
                 (w3_sgdHy [Occ=Once] :: [a_sgdHw] -> ShowS)
                 (w4_sgdHz [Occ=Once!] :: Int)
                 (w5_sgdHA [Occ=Once] :: Compose f_sgdHs g_sgdHt a_sgdHw) ->
                 case w4_sgdHz of { GHC.Types.I# ww1_sgdHD [Occ=Once] ->
                 Data.Functor.Compose.$w$cliftShowsPrec
                   @ f_sgdHs
                   @ g_sgdHt
                   w_sgdHu
                   w1_sgdHv
                   @ a_sgdHw
                   w2_sgdHx
                   w3_sgdHy
                   ww1_sgdHD
                   w5_sgdHA
                 }}]
Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec
  = \ (@ (f_sgdHs :: * -> *))
      (@ (g_sgdHt :: * -> *))
      (w_sgdHu :: Show1 f_sgdHs)
      (w1_sgdHv :: Show1 g_sgdHt)
      (@ a_sgdHw)
      (w2_sgdHx :: Int -> a_sgdHw -> ShowS)
      (w3_sgdHy :: [a_sgdHw] -> ShowS)
      (w4_sgdHz :: Int)
      (w5_sgdHA :: Compose f_sgdHs g_sgdHt a_sgdHw) ->
      case w4_sgdHz of { GHC.Types.I# ww1_sgdHD ->
      Data.Functor.Compose.$w$cliftShowsPrec
        @ f_sgdHs
        @ g_sgdHt
        w_sgdHu
        w1_sgdHv
        @ a_sgdHw
        w2_sgdHx
        w3_sgdHy
        ww1_sgdHD
        w5_sgdHA
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose3 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$fDataCompose3 = GHC.Types.I# 0#

-- RHS size: {terms: 20, types: 49, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fShow1Compose_$cliftShowList
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     forall a.
     (Int -> a -> ShowS) -> ([a] -> ShowS) -> [Compose f g a] -> ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(U)),C(C1(U)))><L,U><L,U><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdqk :: * -> *))
                 (@ (g_agdql :: * -> *))
                 ($dShow1_agdqm [Occ=Once] :: Show1 f_agdqk)
                 ($dShow2_agdqn [Occ=Once] :: Show1 g_agdql)
                 (@ a_agdqZ)
                 (sp_adw9U [Occ=Once] :: Int -> a_agdqZ -> ShowS)
                 (sl_adw9V [Occ=Once] :: [a_agdqZ] -> ShowS)
                 (eta_B2 [Occ=Once] :: [Compose f_agdqk g_agdql a_agdqZ])
                 (eta1_B1 [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ (Compose f_agdqk g_agdql a_agdqZ)
                   (Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec
                      @ f_agdqk
                      @ g_agdql
                      $dShow1_agdqm
                      $dShow2_agdqn
                      @ a_agdqZ
                      sp_adw9U
                      sl_adw9V
                      Data.Functor.Compose.$fDataCompose3)
                   eta_B2
                   eta1_B1}]
Data.Functor.Compose.$fShow1Compose_$cliftShowList
  = \ (@ (f_agdqk :: * -> *))
      (@ (g_agdql :: * -> *))
      ($dShow1_agdqm :: Show1 f_agdqk)
      ($dShow2_agdqn :: Show1 g_agdql)
      (@ a_agdqZ)
      (sp_adw9U :: Int -> a_agdqZ -> ShowS)
      (sl_adw9V :: [a_agdqZ] -> ShowS)
      (eta_B2 :: [Compose f_agdqk g_agdql a_agdqZ])
      (eta1_B1 :: String) ->
      GHC.Show.showList__
        @ (Compose f_agdqk g_agdql a_agdqZ)
        (\ (w_sgdHA :: Compose f_agdqk g_agdql a_agdqZ) ->
           Data.Functor.Compose.$w$cliftShowsPrec
             @ f_agdqk
             @ g_agdql
             $dShow1_agdqm
             $dShow2_agdqn
             @ a_agdqZ
             sp_adw9U
             sl_adw9V
             0#
             w_sgdHA)
        eta_B2
        eta1_B1

-- RHS size: {terms: 11, types: 23, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fShow1Compose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Show1 f, Show1 g) =>
     Show1 (Compose f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(U)),C(C1(U)))>m,
 Unf=DFun: \ (@ (f_agd4O :: * -> *))
             (@ (g_agd4P :: * -> *))
             (v_B1 :: Show1 f_agd4O)
             (v1_B2 :: Show1 g_agd4P) ->
       Data.Functor.Classes.C:Show1 TYPE: Compose f_agd4O g_agd4P
                                    Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec
                                      @ f_agd4O @ g_agd4P v_B1 v1_B2
                                    Data.Functor.Compose.$fShow1Compose_$cliftShowList
                                      @ f_agd4O @ g_agd4P v_B1 v1_B2]
Data.Functor.Compose.$fShow1Compose
  = \ (@ (f_agdqk :: * -> *))
      (@ (g_agdql :: * -> *))
      ($dShow1_agdqm :: Show1 f_agdqk)
      ($dShow2_agdqn :: Show1 g_agdql) ->
      Data.Functor.Classes.C:Show1
        @ (Compose f_agdqk g_agdql)
        (Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec
           @ f_agdqk @ g_agdql $dShow1_agdqm $dShow2_agdqn)
        (Data.Functor.Compose.$fShow1Compose_$cliftShowList
           @ f_agdqk @ g_agdql $dShow1_agdqm $dShow2_agdqn)

-- RHS size: {terms: 14, types: 39, coercions: 20, joins: 0/0}
Data.Functor.Compose.$fEqCompose_$c==
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Eq1 f, Eq1 g, Eq a) =>
     Compose f g a -> Compose f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><L,1*U(1*U,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpZ :: * -> *))
                 (@ (g_agdq0 :: * -> *))
                 (@ a_agdq1)
                 ($dEq1_agdq2 [Occ=Once] :: Eq1 f_agdpZ)
                 ($dEq2_agdq3 [Occ=Once] :: Eq1 g_agdq0)
                 ($dEq_agdq4 [Occ=Once] :: Eq a_agdq1)
                 (eta_B2 [Occ=Once] :: Compose f_agdpZ g_agdq0 a_agdq1)
                 (eta1_B1 [Occ=Once] :: Compose f_agdpZ g_agdq0 a_agdq1) ->
                 ($dEq1_agdq2
                  `cast` (Data.Functor.Classes.N:Eq1[0] <f_agdpZ>_N
                          :: (Eq1 f_agdpZ :: Constraint)
                             ~R# (forall a b.
                                  (a -> b -> Bool) -> f_agdpZ a -> f_agdpZ b -> Bool :: *)))
                   @ (g_agdq0 a_agdq1)
                   @ (g_agdq0 a_agdq1)
                   (($dEq2_agdq3
                     `cast` (Data.Functor.Classes.N:Eq1[0] <g_agdq0>_N
                             :: (Eq1 g_agdq0 :: Constraint)
                                ~R# (forall a b.
                                     (a -> b -> Bool) -> g_agdq0 a -> g_agdq0 b -> Bool :: *)))
                      @ a_agdq1 @ a_agdq1 (== @ a_agdq1 $dEq_agdq4))
                   (eta_B2
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                            :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                               ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))
                   (eta1_B1
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                            :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                               ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))}]
Data.Functor.Compose.$fEqCompose_$c==
  = \ (@ (f_agdpZ :: * -> *))
      (@ (g_agdq0 :: * -> *))
      (@ a_agdq1)
      ($dEq1_agdq2 :: Eq1 f_agdpZ)
      ($dEq2_agdq3 :: Eq1 g_agdq0)
      ($dEq_agdq4 :: Eq a_agdq1)
      (eta_B2 :: Compose f_agdpZ g_agdq0 a_agdq1)
      (eta1_B1 :: Compose f_agdpZ g_agdq0 a_agdq1) ->
      ($dEq1_agdq2
       `cast` (Data.Functor.Classes.N:Eq1[0] <f_agdpZ>_N
               :: (Eq1 f_agdpZ :: Constraint)
                  ~R# (forall a b.
                       (a -> b -> Bool) -> f_agdpZ a -> f_agdpZ b -> Bool :: *)))
        @ (g_agdq0 a_agdq1)
        @ (g_agdq0 a_agdq1)
        (($dEq2_agdq3
          `cast` (Data.Functor.Classes.N:Eq1[0] <g_agdq0>_N
                  :: (Eq1 g_agdq0 :: Constraint)
                     ~R# (forall a b.
                          (a -> b -> Bool) -> g_agdq0 a -> g_agdq0 b -> Bool :: *)))
           @ a_agdq1 @ a_agdq1 (== @ a_agdq1 $dEq_agdq4))
        (eta_B2
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                 :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                    ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))
        (eta1_B1
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                 :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                    ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))

-- RHS size: {terms: 19, types: 40, coercions: 20, joins: 0/0}
Data.Functor.Compose.$fEqCompose_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Eq1 f, Eq1 g, Eq a) =>
     Compose f g a -> Compose f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><L,1*U(1*U,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_agdpZ :: * -> *))
                 (@ (g_agdq0 :: * -> *))
                 (@ a_agdq1)
                 ($dEq1_agdq2 [Occ=Once] :: Eq1 f_agdpZ)
                 ($dEq2_agdq3 [Occ=Once] :: Eq1 g_agdq0)
                 ($dEq_agdq4 [Occ=Once] :: Eq a_agdq1)
                 (x_a22b [Occ=Once] :: Compose f_agdpZ g_agdq0 a_agdq1)
                 (y_a22c [Occ=Once] :: Compose f_agdpZ g_agdq0 a_agdq1) ->
                 case ($dEq1_agdq2
                       `cast` (Data.Functor.Classes.N:Eq1[0] <f_agdpZ>_N
                               :: (Eq1 f_agdpZ :: Constraint)
                                  ~R# (forall a b.
                                       (a -> b -> Bool) -> f_agdpZ a -> f_agdpZ b -> Bool :: *)))
                        @ (g_agdq0 a_agdq1)
                        @ (g_agdq0 a_agdq1)
                        (($dEq2_agdq3
                          `cast` (Data.Functor.Classes.N:Eq1[0] <g_agdq0>_N
                                  :: (Eq1 g_agdq0 :: Constraint)
                                     ~R# (forall a b.
                                          (a -> b -> Bool) -> g_agdq0 a -> g_agdq0 b -> Bool :: *)))
                           @ a_agdq1 @ a_agdq1 (== @ a_agdq1 $dEq_agdq4))
                        (x_a22b
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                                 :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                                    ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))
                        (y_a22c
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                                 :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                                    ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))
                 of {
                   False -> GHC.Types.True;
                   True -> GHC.Types.False
                 }}]
Data.Functor.Compose.$fEqCompose_$c/=
  = \ (@ (f_agdpZ :: * -> *))
      (@ (g_agdq0 :: * -> *))
      (@ a_agdq1)
      ($dEq1_agdq2 :: Eq1 f_agdpZ)
      ($dEq2_agdq3 :: Eq1 g_agdq0)
      ($dEq_agdq4 :: Eq a_agdq1)
      (eta_B2 :: Compose f_agdpZ g_agdq0 a_agdq1)
      (eta1_B1 :: Compose f_agdpZ g_agdq0 a_agdq1) ->
      case ($dEq1_agdq2
            `cast` (Data.Functor.Classes.N:Eq1[0] <f_agdpZ>_N
                    :: (Eq1 f_agdpZ :: Constraint)
                       ~R# (forall a b.
                            (a -> b -> Bool) -> f_agdpZ a -> f_agdpZ b -> Bool :: *)))
             @ (g_agdq0 a_agdq1)
             @ (g_agdq0 a_agdq1)
             (($dEq2_agdq3
               `cast` (Data.Functor.Classes.N:Eq1[0] <g_agdq0>_N
                       :: (Eq1 g_agdq0 :: Constraint)
                          ~R# (forall a b.
                               (a -> b -> Bool) -> g_agdq0 a -> g_agdq0 b -> Bool :: *)))
                @ a_agdq1 @ a_agdq1 (== @ a_agdq1 $dEq_agdq4))
             (eta_B2
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                      :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                         ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))
             (eta1_B1
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpZ>_R <g_agdq0>_N <a_agdq1>_N
                      :: (Compose f_agdpZ g_agdq0 a_agdq1 :: *)
                         ~R# (f_agdpZ (g_agdq0 a_agdq1) :: *)))
      of {
        False -> GHC.Types.True;
        True -> GHC.Types.False
      }

-- RHS size: {terms: 15, types: 30, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fEqCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Eq1 f, Eq1 g, Eq a) =>
     Eq (Compose f g a)
[GblId[DFunId],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(U)))><L,C(U)><L,U(U,A)>m,
 Unf=DFun: \ (@ (f_agd4L :: * -> *))
             (@ (g_agd4M :: * -> *))
             (@ a_agd4N)
             (v_B1 :: Eq1 f_agd4L)
             (v1_B2 :: Eq1 g_agd4M)
             (v2_B3 :: Eq a_agd4N) ->
       GHC.Classes.C:Eq TYPE: Compose f_agd4L g_agd4M a_agd4N
                        Data.Functor.Compose.$fEqCompose_$c==
                          @ f_agd4L @ g_agd4M @ a_agd4N v_B1 v1_B2 v2_B3
                        Data.Functor.Compose.$fEqCompose_$c/=
                          @ f_agd4L @ g_agd4M @ a_agd4N v_B1 v1_B2 v2_B3]
Data.Functor.Compose.$fEqCompose
  = \ (@ (f_agdpZ :: * -> *))
      (@ (g_agdq0 :: * -> *))
      (@ a_agdq1)
      ($dEq1_agdq2 :: Eq1 f_agdpZ)
      ($dEq2_agdq3 :: Eq1 g_agdq0)
      ($dEq_agdq4 :: Eq a_agdq1) ->
      GHC.Classes.C:Eq
        @ (Compose f_agdpZ g_agdq0 a_agdq1)
        (Data.Functor.Compose.$fEqCompose_$c==
           @ f_agdpZ @ g_agdq0 @ a_agdq1 $dEq1_agdq2 $dEq2_agdq3 $dEq_agdq4)
        (Data.Functor.Compose.$fEqCompose_$c/=
           @ f_agdpZ @ g_agdq0 @ a_agdq1 $dEq1_agdq2 $dEq2_agdq3 $dEq_agdq4)

-- RHS size: {terms: 16, types: 41, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$ccompare
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Compose f g a -> Compose f g a -> Ordering
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,1*U(A,1*U,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd)
                 (eta_B2 [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd)
                 (eta1_B1 [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd) ->
                 liftCompare
                   @ f_agdpb
                   $dOrd1_agdpe
                   @ (g_agdpc a_agdpd)
                   @ (g_agdpc a_agdpd)
                   (liftCompare
                      @ g_agdpc
                      $dOrd2_agdpf
                      @ a_agdpd
                      @ a_agdpd
                      (compare @ a_agdpd $dOrd_agdpg))
                   (eta_B2
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                            :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                               ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                   (eta1_B1
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                            :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                               ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))}]
Data.Functor.Compose.$fOrdCompose_$ccompare
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd)
      (eta_B2 :: Compose f_agdpb g_agdpc a_agdpd)
      (eta1_B1 :: Compose f_agdpb g_agdpc a_agdpd) ->
      liftCompare
        @ f_agdpb
        $dOrd1_agdpe
        @ (g_agdpc a_agdpd)
        @ (g_agdpc a_agdpd)
        (liftCompare
           @ g_agdpc
           $dOrd2_agdpf
           @ a_agdpd
           @ a_agdpd
           (compare @ a_agdpd $dOrd_agdpg))
        (eta_B2
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
        (eta1_B1
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$cp1Ord
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Eq (Compose f g a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(C1(U))),A)><L,1*U(1*C(U),A)><L,1*U(1*U(U,A),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd) ->
                 Data.Functor.Compose.$fEqCompose
                   @ f_agdpb
                   @ g_agdpc
                   @ a_agdpd
                   (Data.Functor.Classes.$p1Ord1 @ f_agdpb $dOrd1_agdpe)
                   (Data.Functor.Classes.$p1Ord1 @ g_agdpc $dOrd2_agdpf)
                   (GHC.Classes.$p1Ord @ a_agdpd $dOrd_agdpg)}]
Data.Functor.Compose.$fOrdCompose_$cp1Ord
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd) ->
      Data.Functor.Compose.$fEqCompose
        @ f_agdpb
        @ g_agdpc
        @ a_agdpd
        (Data.Functor.Classes.$p1Ord1 @ f_agdpb $dOrd1_agdpe)
        (Data.Functor.Classes.$p1Ord1 @ g_agdpc $dOrd2_agdpf)
        (GHC.Classes.$p1Ord @ a_agdpd $dOrd_agdpg)

-- RHS size: {terms: 21, types: 42, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$c<
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Compose f g a -> Compose f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,1*U(A,1*U,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd)
                 (x_a1MiF [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd)
                 (y_a1MiG [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd) ->
                 case liftCompare
                        @ f_agdpb
                        $dOrd1_agdpe
                        @ (g_agdpc a_agdpd)
                        @ (g_agdpc a_agdpd)
                        (liftCompare
                           @ g_agdpc
                           $dOrd2_agdpf
                           @ a_agdpd
                           @ a_agdpd
                           (compare @ a_agdpd $dOrd_agdpg))
                        (x_a1MiF
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                        (y_a1MiG
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                 of {
                   __DEFAULT -> GHC.Types.False;
                   LT -> GHC.Types.True
                 }}]
Data.Functor.Compose.$fOrdCompose_$c<
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd)
      (x_a1MiF :: Compose f_agdpb g_agdpc a_agdpd)
      (y_a1MiG :: Compose f_agdpb g_agdpc a_agdpd) ->
      case liftCompare
             @ f_agdpb
             $dOrd1_agdpe
             @ (g_agdpc a_agdpd)
             @ (g_agdpc a_agdpd)
             (liftCompare
                @ g_agdpc
                $dOrd2_agdpf
                @ a_agdpd
                @ a_agdpd
                (compare @ a_agdpd $dOrd_agdpg))
             (x_a1MiF
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
             (y_a1MiG
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
      of {
        __DEFAULT -> GHC.Types.False;
        LT -> GHC.Types.True
      }

-- RHS size: {terms: 21, types: 42, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$c>=
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Compose f g a -> Compose f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,1*U(A,1*U,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd)
                 (x_a1fiT [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd)
                 (y_a1fiU [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd) ->
                 case liftCompare
                        @ f_agdpb
                        $dOrd1_agdpe
                        @ (g_agdpc a_agdpd)
                        @ (g_agdpc a_agdpd)
                        (liftCompare
                           @ g_agdpc
                           $dOrd2_agdpf
                           @ a_agdpd
                           @ a_agdpd
                           (compare @ a_agdpd $dOrd_agdpg))
                        (x_a1fiT
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                        (y_a1fiU
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                 of {
                   __DEFAULT -> GHC.Types.True;
                   LT -> GHC.Types.False
                 }}]
Data.Functor.Compose.$fOrdCompose_$c>=
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd)
      (x_a1fiT :: Compose f_agdpb g_agdpc a_agdpd)
      (y_a1fiU :: Compose f_agdpb g_agdpc a_agdpd) ->
      case liftCompare
             @ f_agdpb
             $dOrd1_agdpe
             @ (g_agdpc a_agdpd)
             @ (g_agdpc a_agdpd)
             (liftCompare
                @ g_agdpc
                $dOrd2_agdpf
                @ a_agdpd
                @ a_agdpd
                (compare @ a_agdpd $dOrd_agdpg))
             (x_a1fiT
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
             (y_a1fiU
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
      of {
        __DEFAULT -> GHC.Types.True;
        LT -> GHC.Types.False
      }

-- RHS size: {terms: 21, types: 42, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$c>
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Compose f g a -> Compose f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,1*U(A,1*U,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd)
                 (x_a1fiM [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd)
                 (y_a1fiN [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd) ->
                 case liftCompare
                        @ f_agdpb
                        $dOrd1_agdpe
                        @ (g_agdpc a_agdpd)
                        @ (g_agdpc a_agdpd)
                        (liftCompare
                           @ g_agdpc
                           $dOrd2_agdpf
                           @ a_agdpd
                           @ a_agdpd
                           (compare @ a_agdpd $dOrd_agdpg))
                        (x_a1fiM
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                        (y_a1fiN
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                 of {
                   __DEFAULT -> GHC.Types.False;
                   GT -> GHC.Types.True
                 }}]
Data.Functor.Compose.$fOrdCompose_$c>
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd)
      (x_a1fiM :: Compose f_agdpb g_agdpc a_agdpd)
      (y_a1fiN :: Compose f_agdpb g_agdpc a_agdpd) ->
      case liftCompare
             @ f_agdpb
             $dOrd1_agdpe
             @ (g_agdpc a_agdpd)
             @ (g_agdpc a_agdpd)
             (liftCompare
                @ g_agdpc
                $dOrd2_agdpf
                @ a_agdpd
                @ a_agdpd
                (compare @ a_agdpd $dOrd_agdpg))
             (x_a1fiM
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
             (y_a1fiN
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
      of {
        __DEFAULT -> GHC.Types.False;
        GT -> GHC.Types.True
      }

-- RHS size: {terms: 21, types: 42, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$c<=
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Compose f g a -> Compose f g a -> Bool
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,1*U(A,1*U,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd)
                 (x_a1MiL [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd)
                 (y_a1MiM [Occ=Once] :: Compose f_agdpb g_agdpc a_agdpd) ->
                 case liftCompare
                        @ f_agdpb
                        $dOrd1_agdpe
                        @ (g_agdpc a_agdpd)
                        @ (g_agdpc a_agdpd)
                        (liftCompare
                           @ g_agdpc
                           $dOrd2_agdpf
                           @ a_agdpd
                           @ a_agdpd
                           (compare @ a_agdpd $dOrd_agdpg))
                        (x_a1MiL
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                        (y_a1MiM
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                 of {
                   __DEFAULT -> GHC.Types.True;
                   GT -> GHC.Types.False
                 }}]
Data.Functor.Compose.$fOrdCompose_$c<=
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd)
      (x_a1MiL :: Compose f_agdpb g_agdpc a_agdpd)
      (y_a1MiM :: Compose f_agdpb g_agdpc a_agdpd) ->
      case liftCompare
             @ f_agdpb
             $dOrd1_agdpe
             @ (g_agdpc a_agdpd)
             @ (g_agdpc a_agdpd)
             (liftCompare
                @ g_agdpc
                $dOrd2_agdpf
                @ a_agdpd
                @ a_agdpd
                (compare @ a_agdpd $dOrd_agdpg))
             (x_a1MiL
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
             (y_a1MiM
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
      of {
        __DEFAULT -> GHC.Types.True;
        GT -> GHC.Types.False
      }

-- RHS size: {terms: 21, types: 42, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$cmax
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Compose f g a -> Compose f g a -> Compose f g a
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,1*U(A,1*U,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd)
                 (x_a55d :: Compose f_agdpb g_agdpc a_agdpd)
                 (y_a55e :: Compose f_agdpb g_agdpc a_agdpd) ->
                 case liftCompare
                        @ f_agdpb
                        $dOrd1_agdpe
                        @ (g_agdpc a_agdpd)
                        @ (g_agdpc a_agdpd)
                        (liftCompare
                           @ g_agdpc
                           $dOrd2_agdpf
                           @ a_agdpd
                           @ a_agdpd
                           (compare @ a_agdpd $dOrd_agdpg))
                        (x_a55d
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                        (y_a55e
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                 of {
                   __DEFAULT -> y_a55e;
                   GT -> x_a55d
                 }}]
Data.Functor.Compose.$fOrdCompose_$cmax
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd)
      (x_a55d :: Compose f_agdpb g_agdpc a_agdpd)
      (y_a55e :: Compose f_agdpb g_agdpc a_agdpd) ->
      case liftCompare
             @ f_agdpb
             $dOrd1_agdpe
             @ (g_agdpc a_agdpd)
             @ (g_agdpc a_agdpd)
             (liftCompare
                @ g_agdpc
                $dOrd2_agdpf
                @ a_agdpd
                @ a_agdpd
                (compare @ a_agdpd $dOrd_agdpg))
             (x_a55d
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
             (y_a55e
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
      of {
        __DEFAULT -> y_a55e;
        GT -> x_a55d
      }

-- RHS size: {terms: 21, types: 42, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fOrdCompose_$cmin
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Compose f g a -> Compose f g a -> Compose f g a
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))),1*U(A,1*C1(C1(C1(U))))><L,1*U(A,1*C1(U))><L,1*U(A,1*U,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdpb :: * -> *))
                 (@ (g_agdpc :: * -> *))
                 (@ a_agdpd)
                 ($dOrd1_agdpe [Occ=Once] :: Ord1 f_agdpb)
                 ($dOrd2_agdpf [Occ=Once] :: Ord1 g_agdpc)
                 ($dOrd_agdpg [Occ=Once] :: Ord a_agdpd)
                 (x_a55m :: Compose f_agdpb g_agdpc a_agdpd)
                 (y_a55n :: Compose f_agdpb g_agdpc a_agdpd) ->
                 case liftCompare
                        @ f_agdpb
                        $dOrd1_agdpe
                        @ (g_agdpc a_agdpd)
                        @ (g_agdpc a_agdpd)
                        (liftCompare
                           @ g_agdpc
                           $dOrd2_agdpf
                           @ a_agdpd
                           @ a_agdpd
                           (compare @ a_agdpd $dOrd_agdpg))
                        (x_a55m
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                        (y_a55n
                         `cast` (Data.Functor.Compose.N:Compose[0]
                                     <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                                 :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                                    ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
                 of {
                   __DEFAULT -> x_a55m;
                   GT -> y_a55n
                 }}]
Data.Functor.Compose.$fOrdCompose_$cmin
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd)
      (x_a55m :: Compose f_agdpb g_agdpc a_agdpd)
      (y_a55n :: Compose f_agdpb g_agdpc a_agdpd) ->
      case liftCompare
             @ f_agdpb
             $dOrd1_agdpe
             @ (g_agdpc a_agdpd)
             @ (g_agdpc a_agdpd)
             (liftCompare
                @ g_agdpc
                $dOrd2_agdpf
                @ a_agdpd
                @ a_agdpd
                (compare @ a_agdpd $dOrd_agdpg))
             (x_a55m
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
             (y_a55n
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_agdpb>_R <g_agdpc>_N <a_agdpd>_N
                      :: (Compose f_agdpb g_agdpc a_agdpd :: *)
                         ~R# (f_agdpb (g_agdpc a_agdpd) :: *)))
      of {
        __DEFAULT -> x_a55m;
        GT -> y_a55n
      }

-- RHS size: {terms: 39, types: 48, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fOrdCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Ord1 f, Ord1 g, Ord a) =>
     Ord (Compose f g a)
[GblId[DFunId],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(1*C(C1(C1(U))),C(C1(C1(U))))><L,U(1*C(U),C(U))><L,U(1*U(U,A),U,A,A,A,A,A,A)>m,
 Unf=DFun: \ (@ (f_agd4I :: * -> *))
             (@ (g_agd4J :: * -> *))
             (@ a_agd4K)
             (v_B1 :: Ord1 f_agd4I)
             (v1_B2 :: Ord1 g_agd4J)
             (v2_B3 :: Ord a_agd4K) ->
       GHC.Classes.C:Ord TYPE: Compose f_agd4I g_agd4J a_agd4K
                         Data.Functor.Compose.$fOrdCompose_$cp1Ord
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3
                         Data.Functor.Compose.$fOrdCompose_$ccompare
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3
                         Data.Functor.Compose.$fOrdCompose_$c<
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3
                         Data.Functor.Compose.$fOrdCompose_$c<=
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3
                         Data.Functor.Compose.$fOrdCompose_$c>
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3
                         Data.Functor.Compose.$fOrdCompose_$c>=
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3
                         Data.Functor.Compose.$fOrdCompose_$cmax
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3
                         Data.Functor.Compose.$fOrdCompose_$cmin
                           @ f_agd4I @ g_agd4J @ a_agd4K v_B1 v1_B2 v2_B3]
Data.Functor.Compose.$fOrdCompose
  = \ (@ (f_agdpb :: * -> *))
      (@ (g_agdpc :: * -> *))
      (@ a_agdpd)
      ($dOrd1_agdpe :: Ord1 f_agdpb)
      ($dOrd2_agdpf :: Ord1 g_agdpc)
      ($dOrd_agdpg :: Ord a_agdpd) ->
      GHC.Classes.C:Ord
        @ (Compose f_agdpb g_agdpc a_agdpd)
        (Data.Functor.Compose.$fOrdCompose_$cp1Ord
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)
        (Data.Functor.Compose.$fOrdCompose_$ccompare
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)
        (Data.Functor.Compose.$fOrdCompose_$c<
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)
        (Data.Functor.Compose.$fOrdCompose_$c<=
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)
        (Data.Functor.Compose.$fOrdCompose_$c>
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)
        (Data.Functor.Compose.$fOrdCompose_$c>=
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)
        (Data.Functor.Compose.$fOrdCompose_$cmax
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)
        (Data.Functor.Compose.$fOrdCompose_$cmin
           @ f_agdpb
           @ g_agdpc
           @ a_agdpd
           $dOrd1_agdpe
           $dOrd2_agdpf
           $dOrd_agdpg)

-- RHS size: {terms: 13, types: 21, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fReadCompose_$creadPrec
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec (Compose f g a)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))><L,U(A,A,1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdoE :: * -> *))
                 (@ (g_agdoF :: * -> *))
                 (@ a_agdoG)
                 ($dRead1_agdoH [Occ=Once] :: Read1 f_agdoE)
                 ($dRead2_agdoI [Occ=Once] :: Read1 g_agdoF)
                 ($dRead_agdoJ :: Read a_agdoG) ->
                 Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
                   @ f_agdoE
                   @ g_agdoF
                   $dRead1_agdoH
                   $dRead2_agdoI
                   @ a_agdoG
                   (readPrec @ a_agdoG $dRead_agdoJ)
                   (readListPrec @ a_agdoG $dRead_agdoJ)}]
Data.Functor.Compose.$fReadCompose_$creadPrec
  = \ (@ (f_agdoE :: * -> *))
      (@ (g_agdoF :: * -> *))
      (@ a_agdoG)
      ($dRead1_agdoH :: Read1 f_agdoE)
      ($dRead2_agdoI :: Read1 g_agdoF)
      ($dRead_agdoJ :: Read a_agdoG) ->
      Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
        @ f_agdoE
        @ g_agdoF
        $dRead1_agdoH
        $dRead2_agdoI
        @ a_agdoG
        (readPrec @ a_agdoG $dRead_agdoJ)
        (readListPrec @ a_agdoG $dRead_agdoJ)

-- RHS size: {terms: 19, types: 55, coercions: 18, joins: 0/1}
Data.Functor.Compose.$fReadCompose_$creadsPrec
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Int -> ReadS (Compose f g a)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))><L,U(A,A,1*U,1*U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 60] 160 60}]
Data.Functor.Compose.$fReadCompose_$creadsPrec
  = \ (@ (f_agdoE :: * -> *))
      (@ (g_agdoF :: * -> *))
      (@ a_agdoG)
      ($dRead1_agdoH :: Read1 f_agdoE)
      ($dRead2_agdoI :: Read1 g_agdoF)
      ($dRead_agdoJ :: Read a_agdoG) ->
      let {
        ds_sgdAI [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.ReadPrec
               (Compose f_agdoE g_agdoF a_agdoG)
        [LclId]
        ds_sgdAI
          = Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
              @ f_agdoE
              @ g_agdoF
              $dRead1_agdoH
              $dRead2_agdoI
              @ a_agdoG
              (readPrec @ a_agdoG $dRead_agdoJ)
              (readListPrec @ a_agdoG $dRead_agdoJ) } in
      \ (n_i8156 :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Compose f_agdoE g_agdoF a_agdoG)
          ((((ds_sgdAI
              `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Compose f_agdoE g_agdoF a_agdoG>_R
                      :: (Text.ParserCombinators.ReadPrec.ReadPrec
                            (Compose f_agdoE g_agdoF a_agdoG) :: *)
                         ~R# (Text.ParserCombinators.ReadPrec.Prec
                              -> Text.ParserCombinators.ReadP.ReadP
                                   (Compose f_agdoE g_agdoF a_agdoG) :: *)))
               n_i8156)
            `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                        <Compose f_agdoE g_agdoF a_agdoG>_R
                    :: (Text.ParserCombinators.ReadP.ReadP
                          (Compose f_agdoE g_agdoF a_agdoG) :: *)
                       ~R# (forall b.
                            (Compose f_agdoE g_agdoF a_agdoG
                             -> Text.ParserCombinators.ReadP.P b)
                            -> Text.ParserCombinators.ReadP.P b :: *)))
             @ (Compose f_agdoE g_agdoF a_agdoG)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Compose f_agdoE g_agdoF a_agdoG)))

-- RHS size: {terms: 14, types: 29, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fReadCompose_$creadListPrec
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Compose f g a]
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))><L,U(A,A,1*U,1*U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 60] 110 0}]
Data.Functor.Compose.$fReadCompose_$creadListPrec
  = \ (@ (f_agdoE :: * -> *))
      (@ (g_agdoF :: * -> *))
      (@ a_agdoG)
      ($dRead1_agdoH :: Read1 f_agdoE)
      ($dRead2_agdoI :: Read1 g_agdoF)
      ($dRead_agdoJ :: Read a_agdoG) ->
      GHC.Read.list
        @ (Compose f_agdoE g_agdoF a_agdoG)
        (Data.Functor.Compose.$fRead1Compose_$cliftReadPrec
           @ f_agdoE
           @ g_agdoF
           $dRead1_agdoH
           $dRead2_agdoI
           @ a_agdoG
           (readPrec @ a_agdoG $dRead_agdoJ)
           (readListPrec @ a_agdoG $dRead_agdoJ))

-- RHS size: {terms: 13, types: 46, coercions: 20, joins: 0/0}
Data.Functor.Compose.$fReadCompose_$creadList
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     ReadS [Compose f g a]
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))><L,U(A,A,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdoE :: * -> *))
                 (@ (g_agdoF :: * -> *))
                 (@ a_agdoG)
                 ($dRead1_agdoH [Occ=Once] :: Read1 f_agdoE)
                 ($dRead2_agdoI [Occ=Once] :: Read1 g_agdoF)
                 ($dRead_agdoJ [Occ=Once] :: Read a_agdoG) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Compose f_agdoE g_agdoF a_agdoG]
                   (((((Data.Functor.Compose.$fReadCompose_$creadListPrec
                          @ f_agdoE
                          @ g_agdoF
                          @ a_agdoG
                          $dRead1_agdoH
                          $dRead2_agdoI
                          $dRead_agdoJ)
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Compose f_agdoE g_agdoF a_agdoG]>_R
                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                     [Compose f_agdoE g_agdoF a_agdoG] :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                       -> Text.ParserCombinators.ReadP.ReadP
                                            [Compose f_agdoE g_agdoF a_agdoG] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[Compose f_agdoE g_agdoF a_agdoG]>_R
                             :: (Text.ParserCombinators.ReadP.ReadP
                                   [Compose f_agdoE g_agdoF a_agdoG] :: *)
                                ~R# (forall b.
                                     ([Compose f_agdoE g_agdoF a_agdoG]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Compose f_agdoE g_agdoF a_agdoG]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Compose f_agdoE g_agdoF a_agdoG]))}]
Data.Functor.Compose.$fReadCompose_$creadList
  = \ (@ (f_agdoE :: * -> *))
      (@ (g_agdoF :: * -> *))
      (@ a_agdoG)
      ($dRead1_agdoH :: Read1 f_agdoE)
      ($dRead2_agdoI :: Read1 g_agdoF)
      ($dRead_agdoJ :: Read a_agdoG) ->
      Text.ParserCombinators.ReadP.run
        @ [Compose f_agdoE g_agdoF a_agdoG]
        (((((Data.Functor.Compose.$fReadCompose_$creadListPrec
               @ f_agdoE
               @ g_agdoF
               @ a_agdoG
               $dRead1_agdoH
               $dRead2_agdoI
               $dRead_agdoJ)
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Compose f_agdoE g_agdoF a_agdoG]>_R
                    :: (Text.ParserCombinators.ReadPrec.ReadPrec
                          [Compose f_agdoE g_agdoF a_agdoG] :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.Prec
                            -> Text.ParserCombinators.ReadP.ReadP
                                 [Compose f_agdoE g_agdoF a_agdoG] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[Compose f_agdoE g_agdoF a_agdoG]>_R
                  :: (Text.ParserCombinators.ReadP.ReadP
                        [Compose f_agdoE g_agdoF a_agdoG] :: *)
                     ~R# (forall b.
                          ([Compose f_agdoE g_agdoF a_agdoG]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Compose f_agdoE g_agdoF a_agdoG]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Compose f_agdoE g_agdoF a_agdoG]))

-- RHS size: {terms: 23, types: 36, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fReadCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Read1 f, Read1 g, Read a) =>
     Read (Compose f g a)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C1(C(C1(U)))),A)><L,U(A,A,C(C1(U)),C(C1(U)))><L,U(A,A,U,U)>m,
 Unf=DFun: \ (@ (f_agd4F :: * -> *))
             (@ (g_agd4G :: * -> *))
             (@ a_agd4H)
             (v_B1 :: Read1 f_agd4F)
             (v1_B2 :: Read1 g_agd4G)
             (v2_B3 :: Read a_agd4H) ->
       GHC.Read.C:Read TYPE: Compose f_agd4F g_agd4G a_agd4H
                       Data.Functor.Compose.$fReadCompose_$creadsPrec
                         @ f_agd4F @ g_agd4G @ a_agd4H v_B1 v1_B2 v2_B3
                       Data.Functor.Compose.$fReadCompose_$creadList
                         @ f_agd4F @ g_agd4G @ a_agd4H v_B1 v1_B2 v2_B3
                       Data.Functor.Compose.$fReadCompose_$creadPrec
                         @ f_agd4F @ g_agd4G @ a_agd4H v_B1 v1_B2 v2_B3
                       Data.Functor.Compose.$fReadCompose_$creadListPrec
                         @ f_agd4F @ g_agd4G @ a_agd4H v_B1 v1_B2 v2_B3]
Data.Functor.Compose.$fReadCompose
  = \ (@ (f_agdoE :: * -> *))
      (@ (g_agdoF :: * -> *))
      (@ a_agdoG)
      ($dRead1_agdoH :: Read1 f_agdoE)
      ($dRead2_agdoI :: Read1 g_agdoF)
      ($dRead_agdoJ :: Read a_agdoG) ->
      GHC.Read.C:Read
        @ (Compose f_agdoE g_agdoF a_agdoG)
        (Data.Functor.Compose.$fReadCompose_$creadsPrec
           @ f_agdoE
           @ g_agdoF
           @ a_agdoG
           $dRead1_agdoH
           $dRead2_agdoI
           $dRead_agdoJ)
        (Data.Functor.Compose.$fReadCompose_$creadList
           @ f_agdoE
           @ g_agdoF
           @ a_agdoG
           $dRead1_agdoH
           $dRead2_agdoI
           $dRead_agdoJ)
        (Data.Functor.Compose.$fReadCompose_$creadPrec
           @ f_agdoE
           @ g_agdoF
           @ a_agdoG
           $dRead1_agdoH
           $dRead2_agdoI
           $dRead_agdoJ)
        (Data.Functor.Compose.$fReadCompose_$creadListPrec
           @ f_agdoE
           @ g_agdoF
           @ a_agdoG
           $dRead1_agdoH
           $dRead2_agdoI
           $dRead_agdoJ)

-- RHS size: {terms: 20, types: 32, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fShowCompose_$cshowsPrec
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     Int -> Compose f g a -> ShowS
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(C1(C1(C(U))))),A)><L,U(C(C1(U)),C(C1(U)))><L,U(1*U,A,1*U)><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdoe :: * -> *))
                 (@ (g_agdof :: * -> *))
                 (@ a_agdog)
                 ($dShow1_agdoh [Occ=Once] :: Show1 f_agdoe)
                 ($dShow2_agdoi [Occ=Once] :: Show1 g_agdof)
                 ($dShow_agdoj :: Show a_agdog)
                 (eta_B2 [Occ=Once] :: Int)
                 (eta1_B1 [Occ=Once] :: Compose f_agdoe g_agdof a_agdog) ->
                 Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec
                   @ f_agdoe
                   @ g_agdof
                   $dShow1_agdoh
                   $dShow2_agdoi
                   @ a_agdog
                   (showsPrec @ a_agdog $dShow_agdoj)
                   (showList @ a_agdog $dShow_agdoj)
                   eta_B2
                   eta1_B1}]
Data.Functor.Compose.$fShowCompose_$cshowsPrec
  = \ (@ (f_agdoe :: * -> *))
      (@ (g_agdof :: * -> *))
      (@ a_agdog)
      ($dShow1_agdoh :: Show1 f_agdoe)
      ($dShow2_agdoi :: Show1 g_agdof)
      ($dShow_agdoj :: Show a_agdog)
      (eta_B2 :: Int)
      (eta1_B1 :: Compose f_agdoe g_agdof a_agdog) ->
      case eta_B2 of { GHC.Types.I# ww1_sgdHD ->
      Data.Functor.Compose.$w$cliftShowsPrec
        @ f_agdoe
        @ g_agdof
        $dShow1_agdoh
        $dShow2_agdoi
        @ a_agdog
        (showsPrec @ a_agdog $dShow_agdoj)
        (showList @ a_agdog $dShow_agdoj)
        ww1_sgdHD
        eta1_B1
      }

-- RHS size: {terms: 30, types: 42, coercions: 8, joins: 0/2}
Data.Functor.Compose.$fShowCompose_$cshow
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     Compose f g a -> String
[GblId,
 Arity=4,
 Str=<L,1*U(1*C1(C1(C1(C1(C1(U))))),A)><L,U(1*C1(C1(U)),1*C1(C1(U)))><L,U(1*U,A,1*U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 60 60 0] 250 0}]
Data.Functor.Compose.$fShowCompose_$cshow
  = \ (@ (f_agdoe :: * -> *))
      (@ (g_agdof :: * -> *))
      (@ a_agdog)
      ($dShow1_agdoh :: Show1 f_agdoe)
      ($dShow2_agdoi :: Show1 g_agdof)
      ($dShow_agdoj :: Show a_agdog)
      (x_i7Jay :: Compose f_agdoe g_agdof a_agdog) ->
      let {
        sp_agd4Q :: Int -> a_agdog -> ShowS
        [LclId]
        sp_agd4Q = showsPrec @ a_agdog $dShow_agdoj } in
      let {
        sl_agd4R :: [a_agdog] -> ShowS
        [LclId]
        sl_agd4R = showList @ a_agdog $dShow_agdoj } in
      ++
        @ Char
        Data.Functor.Compose.$fDataCompose6
        (GHC.Types.:
           @ Char
           Data.Functor.Classes.showsUnaryWith1
           (liftShowsPrec
              @ f_agdoe
              $dShow1_agdoh
              @ (g_agdof a_agdog)
              (liftShowsPrec @ g_agdof $dShow2_agdoi @ a_agdog sp_agd4Q sl_agd4R)
              (liftShowList @ g_agdof $dShow2_agdoi @ a_agdog sp_agd4Q sl_agd4R)
              Data.Functor.Classes.$fRead1Const1
              (x_i7Jay
               `cast` (Data.Functor.Compose.N:Compose[0]
                           <*>_N <*>_N <f_agdoe>_R <g_agdof>_N <a_agdog>_N
                       :: (Compose f_agdoe g_agdof a_agdog :: *)
                          ~R# (f_agdoe (g_agdof a_agdog) :: *)))
              (GHC.Types.[] @ Char)))

-- RHS size: {terms: 25, types: 53, coercions: 0, joins: 0/2}
Data.Functor.Compose.$fShowCompose_$cshowList
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     [Compose f g a] -> ShowS
[GblId,
 Arity=5,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(U)),C(C1(U)))><L,U(1*U,A,1*U)><S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 60 0 0] 180 0}]
Data.Functor.Compose.$fShowCompose_$cshowList
  = \ (@ (f_agdoe :: * -> *))
      (@ (g_agdof :: * -> *))
      (@ a_agdog)
      ($dShow1_agdoh :: Show1 f_agdoe)
      ($dShow2_agdoi :: Show1 g_agdof)
      ($dShow_agdoj :: Show a_agdog)
      (ls_i7JaB :: [Compose f_agdoe g_agdof a_agdog])
      (s_i7JaC :: String) ->
      let {
        lvl8_sgdB6 :: Int -> a_agdog -> ShowS
        [LclId]
        lvl8_sgdB6 = showsPrec @ a_agdog $dShow_agdoj } in
      let {
        lvl9_sgdB7 :: [a_agdog] -> ShowS
        [LclId]
        lvl9_sgdB7 = showList @ a_agdog $dShow_agdoj } in
      GHC.Show.showList__
        @ (Compose f_agdoe g_agdof a_agdog)
        (\ (eta_B1 :: Compose f_agdoe g_agdof a_agdog) ->
           Data.Functor.Compose.$w$cliftShowsPrec
             @ f_agdoe
             @ g_agdof
             $dShow1_agdoh
             $dShow2_agdoi
             @ a_agdog
             lvl8_sgdB6
             lvl9_sgdB7
             0#
             eta_B1)
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 19, types: 33, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fShowCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *) a.
     (Show1 f, Show1 g, Show a) =>
     Show (Compose f g a)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(C(C1(C1(C1(C(U))))),A)><L,U(C(C1(U)),C(C1(U)))><L,U(U,A,U)>m,
 Unf=DFun: \ (@ (f_agd4C :: * -> *))
             (@ (g_agd4D :: * -> *))
             (@ a_agd4E)
             (v_B1 :: Show1 f_agd4C)
             (v1_B2 :: Show1 g_agd4D)
             (v2_B3 :: Show a_agd4E) ->
       GHC.Show.C:Show TYPE: Compose f_agd4C g_agd4D a_agd4E
                       Data.Functor.Compose.$fShowCompose_$cshowsPrec
                         @ f_agd4C @ g_agd4D @ a_agd4E v_B1 v1_B2 v2_B3
                       Data.Functor.Compose.$fShowCompose_$cshow
                         @ f_agd4C @ g_agd4D @ a_agd4E v_B1 v1_B2 v2_B3
                       Data.Functor.Compose.$fShowCompose_$cshowList
                         @ f_agd4C @ g_agd4D @ a_agd4E v_B1 v1_B2 v2_B3]
Data.Functor.Compose.$fShowCompose
  = \ (@ (f_agdoe :: * -> *))
      (@ (g_agdof :: * -> *))
      (@ a_agdog)
      ($dShow1_agdoh :: Show1 f_agdoe)
      ($dShow2_agdoi :: Show1 g_agdof)
      ($dShow_agdoj :: Show a_agdog) ->
      GHC.Show.C:Show
        @ (Compose f_agdoe g_agdof a_agdog)
        (Data.Functor.Compose.$fShowCompose_$cshowsPrec
           @ f_agdoe
           @ g_agdof
           @ a_agdog
           $dShow1_agdoh
           $dShow2_agdoi
           $dShow_agdoj)
        (Data.Functor.Compose.$fShowCompose_$cshow
           @ f_agdoe
           @ g_agdof
           @ a_agdog
           $dShow1_agdoh
           $dShow2_agdoi
           $dShow_agdoj)
        (Data.Functor.Compose.$fShowCompose_$cshowList
           @ f_agdoe
           @ g_agdof
           @ a_agdog
           $dShow1_agdoh
           $dShow2_agdoi
           $dShow_agdoj)

-- RHS size: {terms: 14, types: 34, coercions: 8, joins: 0/0}
Data.Functor.Compose.$fFunctorCompose2
  :: forall (f :: * -> *) (g :: * -> *).
     (Functor f, Functor g) =>
     forall a b. (a -> b) -> Compose f g a -> f (g b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(U),A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdnE :: * -> *))
                 (@ (g_agdnF :: * -> *))
                 ($dFunctor_agdnG [Occ=Once] :: Functor f_agdnE)
                 ($dFunctor1_agdnH [Occ=Once] :: Functor g_agdnF)
                 (@ a_agdnL)
                 (@ b_agdnM)
                 (f1_agd4A [Occ=Once] :: a_agdnL -> b_agdnM)
                 (ds_dgdwF [Occ=Once] :: Compose f_agdnE g_agdnF a_agdnL) ->
                 fmap
                   @ f_agdnE
                   $dFunctor_agdnG
                   @ (g_agdnF a_agdnL)
                   @ (g_agdnF b_agdnM)
                   (fmap @ g_agdnF $dFunctor1_agdnH @ a_agdnL @ b_agdnM f1_agd4A)
                   (ds_dgdwF
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdnE>_R <g_agdnF>_N <a_agdnL>_N
                            :: (Compose f_agdnE g_agdnF a_agdnL :: *)
                               ~R# (f_agdnE (g_agdnF a_agdnL) :: *)))}]
Data.Functor.Compose.$fFunctorCompose2
  = \ (@ (f_agdnE :: * -> *))
      (@ (g_agdnF :: * -> *))
      ($dFunctor_agdnG :: Functor f_agdnE)
      ($dFunctor1_agdnH :: Functor g_agdnF)
      (@ a_agdnL)
      (@ b_agdnM)
      (f1_agd4A :: a_agdnL -> b_agdnM)
      (ds_dgdwF :: Compose f_agdnE g_agdnF a_agdnL) ->
      fmap
        @ f_agdnE
        $dFunctor_agdnG
        @ (g_agdnF a_agdnL)
        @ (g_agdnF b_agdnM)
        (fmap @ g_agdnF $dFunctor1_agdnH @ a_agdnL @ b_agdnM f1_agd4A)
        (ds_dgdwF
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdnE>_R <g_agdnF>_N <a_agdnL>_N
                 :: (Compose f_agdnE g_agdnF a_agdnL :: *)
                    ~R# (f_agdnE (g_agdnF a_agdnL) :: *)))

-- RHS size: {terms: 15, types: 34, coercions: 8, joins: 0/0}
Data.Functor.Compose.$fFunctorCompose1
  :: forall (f :: * -> *) (g :: * -> *).
     (Functor f, Functor g) =>
     forall a b. a -> Compose f g b -> f (g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(U),A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_Xgdql :: * -> *))
                 (@ (g_Xgdqn :: * -> *))
                 ($dFunctor_Xgdqp [Occ=Once] :: Functor f_Xgdql)
                 ($dFunctor1_Xgdqr [Occ=Once] :: Functor g_Xgdqn)
                 (@ a_agdo5)
                 (@ b_agdo6)
                 (x_i9DkS [Occ=OnceL] :: a_agdo5)
                 (eta_B1 [Occ=Once] :: Compose f_Xgdql g_Xgdqn b_agdo6) ->
                 fmap
                   @ f_Xgdql
                   $dFunctor_Xgdqp
                   @ (g_Xgdqn b_agdo6)
                   @ (g_Xgdqn a_agdo5)
                   (fmap
                      @ g_Xgdqn
                      $dFunctor1_Xgdqr
                      @ b_agdo6
                      @ a_agdo5
                      (\ _ [Occ=Dead] -> x_i9DkS))
                   (eta_B1
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_Xgdql>_R <g_Xgdqn>_N <b_agdo6>_N
                            :: (Compose f_Xgdql g_Xgdqn b_agdo6 :: *)
                               ~R# (f_Xgdql (g_Xgdqn b_agdo6) :: *)))}]
Data.Functor.Compose.$fFunctorCompose1
  = \ (@ (f_Xgdql :: * -> *))
      (@ (g_Xgdqn :: * -> *))
      ($dFunctor_Xgdqp :: Functor f_Xgdql)
      ($dFunctor1_Xgdqr :: Functor g_Xgdqn)
      (@ a_agdo5)
      (@ b_agdo6)
      (x_i9DkS :: a_agdo5)
      (eta_B1 :: Compose f_Xgdql g_Xgdqn b_agdo6) ->
      fmap
        @ f_Xgdql
        $dFunctor_Xgdqp
        @ (g_Xgdqn b_agdo6)
        @ (g_Xgdqn a_agdo5)
        (fmap
           @ g_Xgdqn
           $dFunctor1_Xgdqr
           @ b_agdo6
           @ a_agdo5
           (\ _ [Occ=Dead] -> x_i9DkS))
        (eta_B1
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_Xgdql>_R <g_Xgdqn>_N <b_agdo6>_N
                 :: (Compose f_Xgdql g_Xgdqn b_agdo6 :: *)
                    ~R# (f_Xgdql (g_Xgdqn b_agdo6) :: *)))

-- RHS size: {terms: 11, types: 23, coercions: 53, joins: 0/0}
Data.Functor.Compose.$fFunctorCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Functor f, Functor g) =>
     Functor (Compose f g)
[GblId[DFunId],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><L,U(C(U),A)>m,
 Unf=DFun: \ (@ (f_agd4y :: * -> *))
             (@ (g_agd4z :: * -> *))
             (v_X2W :: Functor f_agd4y)
             (v1_B2 :: Functor g_agd4z) ->
       GHC.Base.C:Functor TYPE: Compose f_agd4y g_agd4z
                          (Data.Functor.Compose.$fFunctorCompose2
                             @ f_agd4y @ g_agd4z v_X2W v1_B2)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R
                                  ->_R <Compose f_agd4y g_agd4z a>_R
                                  ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                <*>_N <*>_N <f_agd4y>_R <g_agd4z>_N <b>_N)
                                  :: (forall a b.
                                      (a -> b)
                                      -> Compose f_agd4y g_agd4z a -> f_agd4y (g_agd4z b) :: *)
                                     ~R# (forall a b.
                                          (a -> b)
                                          -> Compose f_agd4y g_agd4z a
                                          -> Compose f_agd4y g_agd4z b :: *))
                          (Data.Functor.Compose.$fFunctorCompose1
                             @ f_agd4y @ g_agd4z v_X2W v1_B2)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R
                                  ->_R <Compose f_agd4y g_agd4z b>_R
                                  ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                <*>_N <*>_N <f_agd4y>_R <g_agd4z>_N <a>_N)
                                  :: (forall a b.
                                      a -> Compose f_agd4y g_agd4z b -> f_agd4y (g_agd4z a) :: *)
                                     ~R# (forall a b.
                                          a
                                          -> Compose f_agd4y g_agd4z b
                                          -> Compose f_agd4y g_agd4z a :: *))]
Data.Functor.Compose.$fFunctorCompose
  = \ (@ (f_Xgdqk :: * -> *))
      (@ (g_Xgdqm :: * -> *))
      ($dFunctor_Xgdqo :: Functor f_Xgdqk)
      ($dFunctor1_Xgdqq :: Functor g_Xgdqm) ->
      GHC.Base.C:Functor
        @ (Compose f_Xgdqk g_Xgdqm)
        ((Data.Functor.Compose.$fFunctorCompose2
            @ f_Xgdqk @ g_Xgdqm $dFunctor_Xgdqo $dFunctor1_Xgdqq)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Compose f_Xgdqk g_Xgdqm a>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_Xgdqk>_R <g_Xgdqm>_N <b>_N)
                 :: (forall a b.
                     (a -> b) -> Compose f_Xgdqk g_Xgdqm a -> f_Xgdqk (g_Xgdqm b) :: *)
                    ~R# (forall a b.
                         (a -> b)
                         -> Compose f_Xgdqk g_Xgdqm a -> Compose f_Xgdqk g_Xgdqm b :: *)))
        ((Data.Functor.Compose.$fFunctorCompose1
            @ f_Xgdqk @ g_Xgdqm $dFunctor_Xgdqo $dFunctor1_Xgdqq)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Compose f_Xgdqk g_Xgdqm b>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_Xgdqk>_R <g_Xgdqm>_N <a>_N)
                 :: (forall a b.
                     a -> Compose f_Xgdqk g_Xgdqm b -> f_Xgdqk (g_Xgdqm a) :: *)
                    ~R# (forall a b.
                         a -> Compose f_Xgdqk g_Xgdqm b -> Compose f_Xgdqk g_Xgdqm a :: *)))

-- RHS size: {terms: 17, types: 35, coercions: 8, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfoldMap
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall m a. Monoid m => (a -> m) -> Compose f g a -> m
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdl0 :: * -> *))
                 (@ (g_agdl1 :: * -> *))
                 ($dFoldable_agdl2 [Occ=Once] :: Foldable f_agdl0)
                 ($dFoldable1_agdl3 [Occ=Once] :: Foldable g_agdl1)
                 (@ m_agdlh)
                 (@ a_agdli)
                 ($dMonoid_agdlk :: Monoid m_agdlh)
                 (f1_agd4w [Occ=Once] :: a_agdli -> m_agdlh)
                 (ds_dgdwA [Occ=Once] :: Compose f_agdl0 g_agdl1 a_agdli) ->
                 foldMap
                   @ f_agdl0
                   $dFoldable_agdl2
                   @ m_agdlh
                   @ (g_agdl1 a_agdli)
                   $dMonoid_agdlk
                   (foldMap
                      @ g_agdl1
                      $dFoldable1_agdl3
                      @ m_agdlh
                      @ a_agdli
                      $dMonoid_agdlk
                      f1_agd4w)
                   (ds_dgdwA
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdli>_N
                            :: (Compose f_agdl0 g_agdl1 a_agdli :: *)
                               ~R# (f_agdl0 (g_agdl1 a_agdli) :: *)))}]
Data.Functor.Compose.$fFoldableCompose_$cfoldMap
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ m_agdlh)
      (@ a_agdli)
      ($dMonoid_agdlk :: Monoid m_agdlh)
      (f1_agd4w :: a_agdli -> m_agdlh)
      (ds_dgdwA :: Compose f_agdl0 g_agdl1 a_agdli) ->
      foldMap
        @ f_agdl0
        $dFoldable_agdl2
        @ m_agdlh
        @ (g_agdl1 a_agdli)
        $dMonoid_agdlk
        (foldMap
           @ g_agdl1
           $dFoldable1_agdl3
           @ m_agdlh
           @ a_agdli
           $dMonoid_agdlk
           f1_agd4w)
        (ds_dgdwA
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdli>_N
                 :: (Compose f_agdl0 g_agdl1 a_agdli :: *)
                    ~R# (f_agdl0 (g_agdl1 a_agdli) :: *)))

-- RHS size: {terms: 15, types: 32, coercions: 8, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfold
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall m. Monoid m => Compose f g m -> m
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdl0 :: * -> *))
                 (@ (g_agdl1 :: * -> *))
                 ($dFoldable_agdl2 [Occ=Once] :: Foldable f_agdl0)
                 ($dFoldable1_agdl3 [Occ=Once] :: Foldable g_agdl1)
                 (@ m_agdl7)
                 ($dMonoid_agdl9 :: Monoid m_agdl7)
                 (ds_dgdwA [Occ=Once] :: Compose f_agdl0 g_agdl1 m_agdl7) ->
                 foldMap
                   @ f_agdl0
                   $dFoldable_agdl2
                   @ m_agdl7
                   @ (g_agdl1 m_agdl7)
                   $dMonoid_agdl9
                   (foldMap
                      @ g_agdl1
                      $dFoldable1_agdl3
                      @ m_agdl7
                      @ m_agdl7
                      $dMonoid_agdl9
                      (id @ m_agdl7))
                   (ds_dgdwA
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <m_agdl7>_N
                            :: (Compose f_agdl0 g_agdl1 m_agdl7 :: *)
                               ~R# (f_agdl0 (g_agdl1 m_agdl7) :: *)))}]
Data.Functor.Compose.$fFoldableCompose_$cfold
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ m_agdl7)
      ($dMonoid_agdl9 :: Monoid m_agdl7)
      (ds_dgdwA :: Compose f_agdl0 g_agdl1 m_agdl7) ->
      foldMap
        @ f_agdl0
        $dFoldable_agdl2
        @ m_agdl7
        @ (g_agdl1 m_agdl7)
        $dMonoid_agdl9
        (foldMap
           @ g_agdl1
           $dFoldable1_agdl3
           @ m_agdl7
           @ m_agdl7
           $dMonoid_agdl9
           (id @ m_agdl7))
        (ds_dgdwA
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <m_agdl7>_N
                 :: (Compose f_agdl0 g_agdl1 m_agdl7 :: *)
                    ~R# (f_agdl0 (g_agdl1 m_agdl7) :: *)))

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose1 :: forall a. a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_agdnl) (v_ifzGv [Occ=Once] :: a_agdnl) -> v_ifzGv}]
Data.Functor.Compose.$fFoldableCompose1
  = \ (@ a_agdnl) (v_ifzGv :: a_agdnl) -> v_ifzGv

-- RHS size: {terms: 20, types: 42, coercions: 24, joins: 0/2}
Data.Functor.Compose.$fFoldableCompose_$csum
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Num a => Compose f g a -> a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U,A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 140 60}]
Data.Functor.Compose.$fFoldableCompose_$csum
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdnl)
      ($dNum_agdnn :: Num a_agdnl) ->
      let {
        $dMonoid_sgdAE :: Monoid (Data.Semigroup.Internal.Sum a_agdnl)
        [LclId]
        $dMonoid_sgdAE
          = Data.Semigroup.Internal.$fMonoidSum @ a_agdnl $dNum_agdnn } in
      let {
        lvl8_sgdBa
          :: g_agdl1 a_agdnl -> Data.Semigroup.Internal.Sum a_agdnl
        [LclId]
        lvl8_sgdBa
          = foldMap
              @ g_agdl1
              $dFoldable1_agdl3
              @ (Data.Semigroup.Internal.Sum a_agdnl)
              @ a_agdnl
              $dMonoid_sgdAE
              ((Data.Functor.Compose.$fFoldableCompose1 @ a_agdnl)
               `cast` (<a_agdnl>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_agdnl>_R)
                       :: (a_agdnl -> a_agdnl :: *)
                          ~R# (a_agdnl -> Data.Semigroup.Internal.Sum a_agdnl :: *))) } in
      (\ (ds_dgdwA :: Compose f_agdl0 g_agdl1 a_agdnl) ->
         foldMap
           @ f_agdl0
           $dFoldable_agdl2
           @ (Data.Semigroup.Internal.Sum a_agdnl)
           @ (g_agdl1 a_agdnl)
           $dMonoid_sgdAE
           lvl8_sgdBa
           (ds_dgdwA
            `cast` (Data.Functor.Compose.N:Compose[0]
                        <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdnl>_N
                    :: (Compose f_agdl0 g_agdl1 a_agdnl :: *)
                       ~R# (f_agdl0 (g_agdl1 a_agdnl) :: *))))
      `cast` (<Compose f_agdl0 g_agdl1 a_agdnl>_R
              ->_R Data.Semigroup.Internal.N:Sum[0] <a_agdnl>_R
              :: (Compose f_agdl0 g_agdl1 a_agdnl
                  -> Data.Semigroup.Internal.Sum a_agdnl :: *)
                 ~R# (Compose f_agdl0 g_agdl1 a_agdnl -> a_agdnl :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rgdPQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rgdPQ = "minimum: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose2 :: forall a. a
[GblId, Str=x]
Data.Functor.Compose.$fFoldableCompose2
  = \ (@ a_agdnb) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_agdnb
        (GHC.CString.unpackCString# lvl_rgdPQ)

-- RHS size: {terms: 25, types: 46, coercions: 15, joins: 0/2}
Data.Functor.Compose.$fFoldableCompose_$cminimum
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Ord a => Compose f g a -> a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,A,C(C1(U)),A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 160 60}]
Data.Functor.Compose.$fFoldableCompose_$cminimum
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdnb)
      ($dOrd_agdnd :: Ord a_agdnb) ->
      let {
        $dMonoid_sgdAz :: Monoid (Data.Functor.Utils.Min a_agdnb)
        [LclId]
        $dMonoid_sgdAz
          = Data.Functor.Utils.$fMonoidMin @ a_agdnb $dOrd_agdnd } in
      let {
        lvl8_sgdBf :: g_agdl1 a_agdnb -> Data.Functor.Utils.Min a_agdnb
        [LclId]
        lvl8_sgdBf
          = foldMap
              @ g_agdl1
              $dFoldable1_agdl3
              @ (Data.Functor.Utils.Min a_agdnb)
              @ a_agdnb
              $dMonoid_sgdAz
              ((GHC.Base.Just @ a_agdnb)
               `cast` (<a_agdnb>_R
                       ->_R Sym (Data.Functor.Utils.N:Min[0]) <a_agdnb>_N
                       :: (a_agdnb -> Maybe a_agdnb :: *)
                          ~R# (a_agdnb -> Data.Functor.Utils.Min a_agdnb :: *))) } in
      \ (x_ifzGk :: Compose f_agdl0 g_agdl1 a_agdnb) ->
        case (foldMap
                @ f_agdl0
                $dFoldable_agdl2
                @ (Data.Functor.Utils.Min a_agdnb)
                @ (g_agdl1 a_agdnb)
                $dMonoid_sgdAz
                lvl8_sgdBf
                (x_ifzGk
                 `cast` (Data.Functor.Compose.N:Compose[0]
                             <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdnb>_N
                         :: (Compose f_agdl0 g_agdl1 a_agdnb :: *)
                            ~R# (f_agdl0 (g_agdl1 a_agdnb) :: *))))
             `cast` (Data.Functor.Utils.N:Min[0] <a_agdnb>_N
                     :: (Data.Functor.Utils.Min a_agdnb :: *) ~R# (Maybe a_agdnb :: *))
        of {
          Nothing -> Data.Functor.Compose.$fFoldableCompose2 @ a_agdnb;
          Just v_ifzGp -> v_ifzGp
        }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rgdPR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_rgdPR = "maximum: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose3 :: forall a. a
[GblId, Str=x]
Data.Functor.Compose.$fFoldableCompose3
  = \ (@ a_agdn1) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_agdn1
        (GHC.CString.unpackCString# lvl1_rgdPR)

-- RHS size: {terms: 25, types: 46, coercions: 15, joins: 0/2}
Data.Functor.Compose.$fFoldableCompose_$cmaximum
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Ord a => Compose f g a -> a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,A,A,A,C(C1(U)),A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 160 60}]
Data.Functor.Compose.$fFoldableCompose_$cmaximum
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdn1)
      ($dOrd_agdn3 :: Ord a_agdn1) ->
      let {
        $dMonoid_sgdAv :: Monoid (Data.Functor.Utils.Max a_agdn1)
        [LclId]
        $dMonoid_sgdAv
          = Data.Functor.Utils.$fMonoidMax @ a_agdn1 $dOrd_agdn3 } in
      let {
        lvl8_sgdBk :: g_agdl1 a_agdn1 -> Data.Functor.Utils.Max a_agdn1
        [LclId]
        lvl8_sgdBk
          = foldMap
              @ g_agdl1
              $dFoldable1_agdl3
              @ (Data.Functor.Utils.Max a_agdn1)
              @ a_agdn1
              $dMonoid_sgdAv
              ((GHC.Base.Just @ a_agdn1)
               `cast` (<a_agdn1>_R
                       ->_R Sym (Data.Functor.Utils.N:Max[0]) <a_agdn1>_N
                       :: (a_agdn1 -> Maybe a_agdn1 :: *)
                          ~R# (a_agdn1 -> Data.Functor.Utils.Max a_agdn1 :: *))) } in
      \ (x_ifzG6 :: Compose f_agdl0 g_agdl1 a_agdn1) ->
        case (foldMap
                @ f_agdl0
                $dFoldable_agdl2
                @ (Data.Functor.Utils.Max a_agdn1)
                @ (g_agdl1 a_agdn1)
                $dMonoid_sgdAv
                lvl8_sgdBk
                (x_ifzG6
                 `cast` (Data.Functor.Compose.N:Compose[0]
                             <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdn1>_N
                         :: (Compose f_agdl0 g_agdl1 a_agdn1 :: *)
                            ~R# (f_agdl0 (g_agdl1 a_agdn1) :: *))))
             `cast` (Data.Functor.Utils.N:Max[0] <a_agdn1>_N
                     :: (Data.Functor.Utils.Max a_agdn1 :: *) ~R# (Maybe a_agdn1 :: *))
        of {
          Nothing -> Data.Functor.Compose.$fFoldableCompose3 @ a_agdn1;
          Just v_ifzGb -> v_ifzGb
        }

-- RHS size: {terms: 20, types: 36, coercions: 22, joins: 0/1}
Data.Functor.Compose.$fFoldableCompose_$celem
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Eq a => a -> Compose f g a -> Bool
[GblId,
 Arity=4,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(1*C1(U),A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 0] 140 60}]
Data.Functor.Compose.$fFoldableCompose_$celem
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdmR)
      ($dEq_agdmT :: Eq a_agdmR)
      (eta_B1 :: a_agdmR) ->
      let {
        lvl8_sgdBl :: g_agdl1 a_agdmR -> Data.Semigroup.Internal.Any
        [LclId]
        lvl8_sgdBl
          = foldMap
              @ g_agdl1
              $dFoldable1_agdl3
              @ Data.Semigroup.Internal.Any
              @ a_agdmR
              Data.Semigroup.Internal.$fMonoidAny
              ((== @ a_agdmR $dEq_agdmT eta_B1)
               `cast` (<a_agdmR>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                       :: (a_agdmR -> Bool :: *)
                          ~R# (a_agdmR -> Data.Semigroup.Internal.Any :: *))) } in
      (\ (ds_dgdwA :: Compose f_agdl0 g_agdl1 a_agdmR) ->
         foldMap
           @ f_agdl0
           $dFoldable_agdl2
           @ Data.Semigroup.Internal.Any
           @ (g_agdl1 a_agdmR)
           Data.Semigroup.Internal.$fMonoidAny
           lvl8_sgdBl
           (ds_dgdwA
            `cast` (Data.Functor.Compose.N:Compose[0]
                        <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdmR>_N
                    :: (Compose f_agdl0 g_agdl1 a_agdmR :: *)
                       ~R# (f_agdl0 (g_agdl1 a_agdmR) :: *))))
      `cast` (<Compose f_agdl0 g_agdl1 a_agdmR>_R
              ->_R Data.Semigroup.Internal.N:Any[0]
              :: (Compose f_agdl0 g_agdl1 a_agdmR
                  -> Data.Semigroup.Internal.Any :: *)
                 ~R# (Compose f_agdl0 g_agdl1 a_agdmR -> Bool :: *))

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose7
  :: forall b.
     Monoid
       (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Compose.$fFoldableCompose7
  = \ (@ b_agdlT) ->
      Data.Semigroup.Internal.$fMonoidDual
        @ (Data.Semigroup.Internal.Endo b_agdlT)
        (Data.Semigroup.Internal.$fMonoidEndo @ b_agdlT)

-- RHS size: {terms: 22, types: 43, coercions: 17, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfoldl
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall b a. (b -> a -> b) -> b -> Compose f g a -> b
[GblId,
 Arity=5,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0 0] 150 0}]
Data.Functor.Compose.$fFoldableCompose_$cfoldl
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ b_agdlT)
      (@ a_agdlU)
      (f1_ifzEG :: b_agdlT -> a_agdlU -> b_agdlT)
      (z_ifzEH :: b_agdlT)
      (t1_ifzEI :: Compose f_agdl0 g_agdl1 a_agdlU) ->
      ((foldMap
          @ f_agdl0
          $dFoldable_agdl2
          @ (Data.Semigroup.Internal.Dual
               (Data.Semigroup.Internal.Endo b_agdlT))
          @ (g_agdl1 a_agdlU)
          (Data.Functor.Compose.$fFoldableCompose7 @ b_agdlT)
          (foldMap
             @ g_agdl1
             $dFoldable1_agdl3
             @ (Data.Semigroup.Internal.Dual
                  (Data.Semigroup.Internal.Endo b_agdlT))
             @ a_agdlU
             (Data.Functor.Compose.$fFoldableCompose7 @ b_agdlT)
             ((\ (x_ifzEJ :: a_agdlU) (y_ifzEK :: b_agdlT) ->
                 f1_ifzEG y_ifzEK x_ifzEJ)
              `cast` (<a_agdlU>_R
                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                    (Data.Semigroup.Internal.N:Endo[0] <b_agdlT>_R))
                      :: (a_agdlU -> b_agdlT -> b_agdlT :: *)
                         ~R# (a_agdlU
                              -> Data.Semigroup.Internal.Dual
                                   (Data.Semigroup.Internal.Endo b_agdlT) :: *))))
          (t1_ifzEI
           `cast` (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdlU>_N
                   :: (Compose f_agdl0 g_agdl1 a_agdlU :: *)
                      ~R# (f_agdl0 (g_agdl1 a_agdlU) :: *))))
       `cast` (Data.Semigroup.Internal.N:Dual[0]
                   (Data.Semigroup.Internal.N:Endo[0] <b_agdlT>_R)
               :: (Data.Semigroup.Internal.Dual
                     (Data.Semigroup.Internal.Endo b_agdlT) :: *)
                  ~R# (b_agdlT -> b_agdlT :: *)))
        z_ifzEH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rgdPS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rgdPS = "foldl1: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose6 :: forall a. a
[GblId, Str=x]
Data.Functor.Compose.$fFoldableCompose6
  = \ (@ a_agdml) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_agdml
        (GHC.CString.unpackCString# lvl2_rgdPS)

-- RHS size: {terms: 31, types: 54, coercions: 19, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfoldl1
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. (a -> a -> a) -> Compose f g a -> a
[GblId,
 Arity=4,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0] 200 0}]
Data.Functor.Compose.$fFoldableCompose_$cfoldl1
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdml)
      (f1_ifzFi :: a_agdml -> a_agdml -> a_agdml)
      (xs_ifzFj :: Compose f_agdl0 g_agdl1 a_agdml) ->
      case ((foldMap
               @ f_agdl0
               $dFoldable_agdl2
               @ (Data.Semigroup.Internal.Dual
                    (Data.Semigroup.Internal.Endo (Maybe a_agdml)))
               @ (g_agdl1 a_agdml)
               (Data.Functor.Compose.$fFoldableCompose7 @ (Maybe a_agdml))
               (foldMap
                  @ g_agdl1
                  $dFoldable1_agdl3
                  @ (Data.Semigroup.Internal.Dual
                       (Data.Semigroup.Internal.Endo (Maybe a_agdml)))
                  @ a_agdml
                  (Data.Functor.Compose.$fFoldableCompose7 @ (Maybe a_agdml))
                  ((\ (x_ifzEJ :: a_agdml) (y_ifzEK :: Maybe a_agdml) ->
                      GHC.Base.Just
                        @ a_agdml
                        (case y_ifzEK of {
                           Nothing -> x_ifzEJ;
                           Just x1_ifzFq -> f1_ifzFi x1_ifzFq x_ifzEJ
                         }))
                   `cast` (<a_agdml>_R
                           ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                         (Data.Semigroup.Internal.N:Endo[0] <Maybe a_agdml>_R))
                           :: (a_agdml -> Maybe a_agdml -> Maybe a_agdml :: *)
                              ~R# (a_agdml
                                   -> Data.Semigroup.Internal.Dual
                                        (Data.Semigroup.Internal.Endo (Maybe a_agdml)) :: *))))
               (xs_ifzFj
                `cast` (Data.Functor.Compose.N:Compose[0]
                            <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdml>_N
                        :: (Compose f_agdl0 g_agdl1 a_agdml :: *)
                           ~R# (f_agdl0 (g_agdl1 a_agdml) :: *))))
            `cast` (Data.Semigroup.Internal.N:Dual[0]
                        (Data.Semigroup.Internal.N:Endo[0] <Maybe a_agdml>_R)
                    :: (Data.Semigroup.Internal.Dual
                          (Data.Semigroup.Internal.Endo (Maybe a_agdml)) :: *)
                       ~R# (Maybe a_agdml -> Maybe a_agdml :: *)))
             (GHC.Base.Nothing @ a_agdml)
      of {
        Nothing -> Data.Functor.Compose.$fFoldableCompose6 @ a_agdml;
        Just v_ifzFw -> v_ifzFw
      }

-- RHS size: {terms: 28, types: 51, coercions: 19, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfoldr'
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a b. (a -> b -> b) -> b -> Compose f g a -> b
[GblId,
 Arity=5,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0 0] 200 0}]
Data.Functor.Compose.$fFoldableCompose_$cfoldr'
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdlJ)
      (@ b_agdlK)
      (f1_ifzEu :: a_agdlJ -> b_agdlK -> b_agdlK)
      (z0_ifzEv :: b_agdlK)
      (xs_ifzEw :: Compose f_agdl0 g_agdl1 a_agdlJ) ->
      ((foldMap
          @ f_agdl0
          $dFoldable_agdl2
          @ (Data.Semigroup.Internal.Dual
               (Data.Semigroup.Internal.Endo (b_agdlK -> b_agdlK)))
          @ (g_agdl1 a_agdlJ)
          (Data.Functor.Compose.$fFoldableCompose7 @ (b_agdlK -> b_agdlK))
          (foldMap
             @ g_agdl1
             $dFoldable1_agdl3
             @ (Data.Semigroup.Internal.Dual
                  (Data.Semigroup.Internal.Endo (b_agdlK -> b_agdlK)))
             @ a_agdlJ
             (Data.Functor.Compose.$fFoldableCompose7 @ (b_agdlK -> b_agdlK))
             ((\ (x_ifzEJ :: a_agdlJ)
                 (y_ifzEK :: b_agdlK -> b_agdlK)
                 (z_ifzEz :: b_agdlK) ->
                 case f1_ifzEu x_ifzEJ z_ifzEz of vx_ifzEA { __DEFAULT ->
                 y_ifzEK vx_ifzEA
                 })
              `cast` (<a_agdlJ>_R
                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                    (Data.Semigroup.Internal.N:Endo[0] <b_agdlK -> b_agdlK>_R))
                      :: (a_agdlJ -> (b_agdlK -> b_agdlK) -> b_agdlK -> b_agdlK :: *)
                         ~R# (a_agdlJ
                              -> Data.Semigroup.Internal.Dual
                                   (Data.Semigroup.Internal.Endo (b_agdlK -> b_agdlK)) :: *))))
          (xs_ifzEw
           `cast` (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdlJ>_N
                   :: (Compose f_agdl0 g_agdl1 a_agdlJ :: *)
                      ~R# (f_agdl0 (g_agdl1 a_agdlJ) :: *))))
       `cast` (Data.Semigroup.Internal.N:Dual[0]
                   (Data.Semigroup.Internal.N:Endo[0] <b_agdlK -> b_agdlK>_R)
               :: (Data.Semigroup.Internal.Dual
                     (Data.Semigroup.Internal.Endo (b_agdlK -> b_agdlK)) :: *)
                  ~R# ((b_agdlK -> b_agdlK) -> b_agdlK -> b_agdlK :: *)))
        (id @ b_agdlK) z0_ifzEv

-- RHS size: {terms: 18, types: 39, coercions: 15, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfoldr
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a b. (a -> b -> b) -> b -> Compose f g a -> b
[GblId,
 Arity=5,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdl0 :: * -> *))
                 (@ (g_agdl1 :: * -> *))
                 ($dFoldable_agdl2 [Occ=Once] :: Foldable f_agdl0)
                 ($dFoldable1_agdl3 [Occ=Once] :: Foldable g_agdl1)
                 (@ a_agdlz)
                 (@ b_agdlA)
                 (f1_ifzEn [Occ=Once] :: a_agdlz -> b_agdlA -> b_agdlA)
                 (z_ifzEo [Occ=Once] :: b_agdlA)
                 (t1_ifzEp [Occ=Once] :: Compose f_agdl0 g_agdl1 a_agdlz) ->
                 ((foldMap
                     @ f_agdl0
                     $dFoldable_agdl2
                     @ (Data.Semigroup.Internal.Endo b_agdlA)
                     @ (g_agdl1 a_agdlz)
                     (Data.Semigroup.Internal.$fMonoidEndo @ b_agdlA)
                     (foldMap
                        @ g_agdl1
                        $dFoldable1_agdl3
                        @ (Data.Semigroup.Internal.Endo b_agdlA)
                        @ a_agdlz
                        (Data.Semigroup.Internal.$fMonoidEndo @ b_agdlA)
                        (f1_ifzEn
                         `cast` (<a_agdlz>_R
                                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <b_agdlA>_R)
                                 :: (a_agdlz -> b_agdlA -> b_agdlA :: *)
                                    ~R# (a_agdlz -> Data.Semigroup.Internal.Endo b_agdlA :: *))))
                     (t1_ifzEp
                      `cast` (Data.Functor.Compose.N:Compose[0]
                                  <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdlz>_N
                              :: (Compose f_agdl0 g_agdl1 a_agdlz :: *)
                                 ~R# (f_agdl0 (g_agdl1 a_agdlz) :: *))))
                  `cast` (Data.Semigroup.Internal.N:Endo[0] <b_agdlA>_R
                          :: (Data.Semigroup.Internal.Endo b_agdlA :: *)
                             ~R# (b_agdlA -> b_agdlA :: *)))
                   z_ifzEo}]
Data.Functor.Compose.$fFoldableCompose_$cfoldr
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdlz)
      (@ b_agdlA)
      (f1_ifzEn :: a_agdlz -> b_agdlA -> b_agdlA)
      (z_ifzEo :: b_agdlA)
      (t1_ifzEp :: Compose f_agdl0 g_agdl1 a_agdlz) ->
      ((foldMap
          @ f_agdl0
          $dFoldable_agdl2
          @ (Data.Semigroup.Internal.Endo b_agdlA)
          @ (g_agdl1 a_agdlz)
          (Data.Semigroup.Internal.$fMonoidEndo @ b_agdlA)
          (foldMap
             @ g_agdl1
             $dFoldable1_agdl3
             @ (Data.Semigroup.Internal.Endo b_agdlA)
             @ a_agdlz
             (Data.Semigroup.Internal.$fMonoidEndo @ b_agdlA)
             (f1_ifzEn
              `cast` (<a_agdlz>_R
                      ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <b_agdlA>_R)
                      :: (a_agdlz -> b_agdlA -> b_agdlA :: *)
                         ~R# (a_agdlz -> Data.Semigroup.Internal.Endo b_agdlA :: *))))
          (t1_ifzEp
           `cast` (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdlz>_N
                   :: (Compose f_agdl0 g_agdl1 a_agdlz :: *)
                      ~R# (f_agdl0 (g_agdl1 a_agdlz) :: *))))
       `cast` (Data.Semigroup.Internal.N:Endo[0] <b_agdlA>_R
               :: (Data.Semigroup.Internal.Endo b_agdlA :: *)
                  ~R# (b_agdlA -> b_agdlA :: *)))
        z_ifzEo

-- RHS size: {terms: 28, types: 49, coercions: 17, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfoldl'
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall b a. (b -> a -> b) -> b -> Compose f g a -> b
[GblId,
 Arity=5,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0 0] 200 0}]
Data.Functor.Compose.$fFoldableCompose_$cfoldl'
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ b_agdm3)
      (@ a_agdm4)
      (f1_ifzEP :: b_agdm3 -> a_agdm4 -> b_agdm3)
      (z0_ifzEQ :: b_agdm3)
      (xs_ifzER :: Compose f_agdl0 g_agdl1 a_agdm4) ->
      ((foldMap
          @ f_agdl0
          $dFoldable_agdl2
          @ (Data.Semigroup.Internal.Endo (b_agdm3 -> b_agdm3))
          @ (g_agdl1 a_agdm4)
          (Data.Semigroup.Internal.$fMonoidEndo @ (b_agdm3 -> b_agdm3))
          (foldMap
             @ g_agdl1
             $dFoldable1_agdl3
             @ (Data.Semigroup.Internal.Endo (b_agdm3 -> b_agdm3))
             @ a_agdm4
             (Data.Semigroup.Internal.$fMonoidEndo @ (b_agdm3 -> b_agdm3))
             ((\ (x_ifzES :: a_agdm4)
                 (k_ifzET :: b_agdm3 -> b_agdm3)
                 (z_ifzEU :: b_agdm3) ->
                 case f1_ifzEP z_ifzEU x_ifzES of vx_ifzEV { __DEFAULT ->
                 k_ifzET vx_ifzEV
                 })
              `cast` (<a_agdm4>_R
                      ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <b_agdm3 -> b_agdm3>_R)
                      :: (a_agdm4 -> (b_agdm3 -> b_agdm3) -> b_agdm3 -> b_agdm3 :: *)
                         ~R# (a_agdm4
                              -> Data.Semigroup.Internal.Endo (b_agdm3 -> b_agdm3) :: *))))
          (xs_ifzER
           `cast` (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdm4>_N
                   :: (Compose f_agdl0 g_agdl1 a_agdm4 :: *)
                      ~R# (f_agdl0 (g_agdl1 a_agdm4) :: *))))
       `cast` (Data.Semigroup.Internal.N:Endo[0] <b_agdm3 -> b_agdm3>_R
               :: (Data.Semigroup.Internal.Endo (b_agdm3 -> b_agdm3) :: *)
                  ~R# ((b_agdm3 -> b_agdm3) -> b_agdm3 -> b_agdm3 :: *)))
        (id @ b_agdm3) z0_ifzEQ

-- RHS size: {terms: 12, types: 8, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose4
  :: forall a. a -> (Int -> Int) -> Int -> Int
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U(U))><S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_agdmJ)
                 _ [Occ=Dead]
                 (k_ifzET [Occ=Once!] :: Int -> Int)
                 (z_ifzEU [Occ=Once!] :: Int) ->
                 case z_ifzEU of { GHC.Types.I# x1_ifzFR [Occ=Once] ->
                 k_ifzET (GHC.Types.I# (GHC.Prim.+# x1_ifzFR 1#))
                 }}]
Data.Functor.Compose.$fFoldableCompose4
  = \ (@ a_agdmJ)
      _ [Occ=Dead]
      (k_ifzET :: Int -> Int)
      (z_ifzEU :: Int) ->
      case z_ifzEU of { GHC.Types.I# x1_ifzFR ->
      k_ifzET (GHC.Types.I# (GHC.Prim.+# x1_ifzFR 1#))
      }

-- RHS size: {terms: 16, types: 39, coercions: 17, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$clength
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Compose f g a -> Int
[GblId,
 Arity=3,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 110 0}]
Data.Functor.Compose.$fFoldableCompose_$clength
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdmJ)
      (eta_B1 :: Compose f_agdl0 g_agdl1 a_agdmJ) ->
      ((foldMap
          @ f_agdl0
          $dFoldable_agdl2
          @ (Data.Semigroup.Internal.Endo (Int -> Int))
          @ (g_agdl1 a_agdmJ)
          (Data.Semigroup.Internal.$fMonoidEndo @ (Int -> Int))
          (foldMap
             @ g_agdl1
             $dFoldable1_agdl3
             @ (Data.Semigroup.Internal.Endo (Int -> Int))
             @ a_agdmJ
             (Data.Semigroup.Internal.$fMonoidEndo @ (Int -> Int))
             ((Data.Functor.Compose.$fFoldableCompose4 @ a_agdmJ)
              `cast` (<a_agdmJ>_R
                      ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <Int -> Int>_R)
                      :: (a_agdmJ -> (Int -> Int) -> Int -> Int :: *)
                         ~R# (a_agdmJ -> Data.Semigroup.Internal.Endo (Int -> Int) :: *))))
          (eta_B1
           `cast` (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdmJ>_N
                   :: (Compose f_agdl0 g_agdl1 a_agdmJ :: *)
                      ~R# (f_agdl0 (g_agdl1 a_agdmJ) :: *))))
       `cast` (Data.Semigroup.Internal.N:Endo[0] <Int -> Int>_R
               :: (Data.Semigroup.Internal.Endo (Int -> Int) :: *)
                  ~R# ((Int -> Int) -> Int -> Int :: *)))
        (id @ Int) Data.Functor.Compose.$fDataCompose3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_rgdPT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_rgdPT = "foldr1: empty structure"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose8 :: forall a. a
[GblId, Str=x]
Data.Functor.Compose.$fFoldableCompose8
  = \ (@ a_agdmd) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_agdmd
        (GHC.CString.unpackCString# lvl3_rgdPT)

-- RHS size: {terms: 31, types: 52, coercions: 17, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cfoldr1
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. (a -> a -> a) -> Compose f g a -> a
[GblId,
 Arity=4,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 60 0] 200 0}]
Data.Functor.Compose.$fFoldableCompose_$cfoldr1
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdmd)
      (f1_ifzEZ :: a_agdmd -> a_agdmd -> a_agdmd)
      (xs_ifzF0 :: Compose f_agdl0 g_agdl1 a_agdmd) ->
      case ((foldMap
               @ f_agdl0
               $dFoldable_agdl2
               @ (Data.Semigroup.Internal.Endo (Maybe a_agdmd))
               @ (g_agdl1 a_agdmd)
               (Data.Semigroup.Internal.$fMonoidEndo @ (Maybe a_agdmd))
               (foldMap
                  @ g_agdl1
                  $dFoldable1_agdl3
                  @ (Data.Semigroup.Internal.Endo (Maybe a_agdmd))
                  @ a_agdmd
                  (Data.Semigroup.Internal.$fMonoidEndo @ (Maybe a_agdmd))
                  ((\ (x_ifzF1 :: a_agdmd) (m_ifzF2 :: Maybe a_agdmd) ->
                      GHC.Base.Just
                        @ a_agdmd
                        (case m_ifzF2 of {
                           Nothing -> x_ifzF1;
                           Just y_ifzF7 -> f1_ifzEZ x_ifzF1 y_ifzF7
                         }))
                   `cast` (<a_agdmd>_R
                           ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <Maybe a_agdmd>_R)
                           :: (a_agdmd -> Maybe a_agdmd -> Maybe a_agdmd :: *)
                              ~R# (a_agdmd
                                   -> Data.Semigroup.Internal.Endo (Maybe a_agdmd) :: *))))
               (xs_ifzF0
                `cast` (Data.Functor.Compose.N:Compose[0]
                            <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdmd>_N
                        :: (Compose f_agdl0 g_agdl1 a_agdmd :: *)
                           ~R# (f_agdl0 (g_agdl1 a_agdmd) :: *))))
            `cast` (Data.Semigroup.Internal.N:Endo[0] <Maybe a_agdmd>_R
                    :: (Data.Semigroup.Internal.Endo (Maybe a_agdmd) :: *)
                       ~R# (Maybe a_agdmd -> Maybe a_agdmd :: *)))
             (GHC.Base.Nothing @ a_agdmd)
      of {
        Nothing -> Data.Functor.Compose.$fFoldableCompose8 @ a_agdmd;
        Just v_ifzFd -> v_ifzFd
      }

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose5
  :: forall a. a -> Bool -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_agdmB) _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False}]
Data.Functor.Compose.$fFoldableCompose5
  = \ (@ a_agdmB) _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False

-- RHS size: {terms: 15, types: 34, coercions: 15, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$cnull
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Compose f g a -> Bool
[GblId,
 Arity=3,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdl0 :: * -> *))
                 (@ (g_agdl1 :: * -> *))
                 ($dFoldable_agdl2 [Occ=Once] :: Foldable f_agdl0)
                 ($dFoldable1_agdl3 [Occ=Once] :: Foldable g_agdl1)
                 (@ a_agdmB)
                 (eta_B1 [Occ=Once] :: Compose f_agdl0 g_agdl1 a_agdmB) ->
                 ((foldMap
                     @ f_agdl0
                     $dFoldable_agdl2
                     @ (Data.Semigroup.Internal.Endo Bool)
                     @ (g_agdl1 a_agdmB)
                     (Data.Semigroup.Internal.$fMonoidEndo @ Bool)
                     (foldMap
                        @ g_agdl1
                        $dFoldable1_agdl3
                        @ (Data.Semigroup.Internal.Endo Bool)
                        @ a_agdmB
                        (Data.Semigroup.Internal.$fMonoidEndo @ Bool)
                        ((Data.Functor.Compose.$fFoldableCompose5 @ a_agdmB)
                         `cast` (<a_agdmB>_R
                                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <Bool>_R)
                                 :: (a_agdmB -> Bool -> Bool :: *)
                                    ~R# (a_agdmB -> Data.Semigroup.Internal.Endo Bool :: *))))
                     (eta_B1
                      `cast` (Data.Functor.Compose.N:Compose[0]
                                  <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdmB>_N
                              :: (Compose f_agdl0 g_agdl1 a_agdmB :: *)
                                 ~R# (f_agdl0 (g_agdl1 a_agdmB) :: *))))
                  `cast` (Data.Semigroup.Internal.N:Endo[0] <Bool>_R
                          :: (Data.Semigroup.Internal.Endo Bool :: *)
                             ~R# (Bool -> Bool :: *)))
                   GHC.Types.True}]
Data.Functor.Compose.$fFoldableCompose_$cnull
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdmB)
      (eta_B1 :: Compose f_agdl0 g_agdl1 a_agdmB) ->
      ((foldMap
          @ f_agdl0
          $dFoldable_agdl2
          @ (Data.Semigroup.Internal.Endo Bool)
          @ (g_agdl1 a_agdmB)
          (Data.Semigroup.Internal.$fMonoidEndo @ Bool)
          (foldMap
             @ g_agdl1
             $dFoldable1_agdl3
             @ (Data.Semigroup.Internal.Endo Bool)
             @ a_agdmB
             (Data.Semigroup.Internal.$fMonoidEndo @ Bool)
             ((Data.Functor.Compose.$fFoldableCompose5 @ a_agdmB)
              `cast` (<a_agdmB>_R
                      ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <Bool>_R)
                      :: (a_agdmB -> Bool -> Bool :: *)
                         ~R# (a_agdmB -> Data.Semigroup.Internal.Endo Bool :: *))))
          (eta_B1
           `cast` (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdmB>_N
                   :: (Compose f_agdl0 g_agdl1 a_agdmB :: *)
                      ~R# (f_agdl0 (g_agdl1 a_agdmB) :: *))))
       `cast` (Data.Semigroup.Internal.N:Endo[0] <Bool>_R
               :: (Data.Semigroup.Internal.Endo Bool :: *)
                  ~R# (Bool -> Bool :: *)))
        GHC.Types.True

-- RHS size: {terms: 20, types: 42, coercions: 24, joins: 0/2}
Data.Functor.Compose.$fFoldableCompose_$cproduct
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Num a => Compose f g a -> a
[GblId,
 Arity=3,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,U,A,A,A,C(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 140 60}]
Data.Functor.Compose.$fFoldableCompose_$cproduct
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdnv)
      ($dNum_agdnx :: Num a_agdnv) ->
      let {
        $dMonoid_sgdAo :: Monoid (Data.Semigroup.Internal.Product a_agdnv)
        [LclId]
        $dMonoid_sgdAo
          = Data.Semigroup.Internal.$fMonoidProduct
              @ a_agdnv $dNum_agdnx } in
      let {
        lvl8_sgdBz
          :: g_agdl1 a_agdnv -> Data.Semigroup.Internal.Product a_agdnv
        [LclId]
        lvl8_sgdBz
          = foldMap
              @ g_agdl1
              $dFoldable1_agdl3
              @ (Data.Semigroup.Internal.Product a_agdnv)
              @ a_agdnv
              $dMonoid_sgdAo
              ((Data.Functor.Compose.$fFoldableCompose1 @ a_agdnv)
               `cast` (<a_agdnv>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_agdnv>_R)
                       :: (a_agdnv -> a_agdnv :: *)
                          ~R# (a_agdnv
                               -> Data.Semigroup.Internal.Product a_agdnv :: *))) } in
      (\ (ds_dgdwA :: Compose f_agdl0 g_agdl1 a_agdnv) ->
         foldMap
           @ f_agdl0
           $dFoldable_agdl2
           @ (Data.Semigroup.Internal.Product a_agdnv)
           @ (g_agdl1 a_agdnv)
           $dMonoid_sgdAo
           lvl8_sgdBz
           (ds_dgdwA
            `cast` (Data.Functor.Compose.N:Compose[0]
                        <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdnv>_N
                    :: (Compose f_agdl0 g_agdl1 a_agdnv :: *)
                       ~R# (f_agdl0 (g_agdl1 a_agdnv) :: *))))
      `cast` (<Compose f_agdl0 g_agdl1 a_agdnv>_R
              ->_R Data.Semigroup.Internal.N:Product[0] <a_agdnv>_R
              :: (Compose f_agdl0 g_agdl1 a_agdnv
                  -> Data.Semigroup.Internal.Product a_agdnv :: *)
                 ~R# (Compose f_agdl0 g_agdl1 a_agdnv -> a_agdnv :: *))

-- RHS size: {terms: 15, types: 39, coercions: 17, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose_$ctoList [InlPrag=INLINE (sat-args=1)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     forall a. Compose f g a -> [a]
[GblId,
 Arity=3,
 Str=<S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_agdl0 :: * -> *))
                 (@ (g_agdl1 :: * -> *))
                 ($dFoldable_agdl2 [Occ=Once] :: Foldable f_agdl0)
                 ($dFoldable1_agdl3 [Occ=Once] :: Foldable g_agdl1)
                 (@ a_agdmt)
                 (t1_ifzFB [Occ=Once] :: Compose f_agdl0 g_agdl1 a_agdmt) ->
                 GHC.Base.build
                   @ a_agdmt
                   (\ (@ b_ifzFC)
                      (c_ifzFD [Occ=Once, OS=OneShot] :: a_agdmt -> b_ifzFC -> b_ifzFC)
                      (n_ifzFE [Occ=Once, OS=OneShot] :: b_ifzFC) ->
                      Data.Functor.Compose.$fFoldableCompose_$cfoldr
                        @ f_agdl0
                        @ g_agdl1
                        $dFoldable_agdl2
                        $dFoldable1_agdl3
                        @ a_agdmt
                        @ b_ifzFC
                        c_ifzFD
                        n_ifzFE
                        t1_ifzFB)}]
Data.Functor.Compose.$fFoldableCompose_$ctoList
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1)
      (@ a_agdmt)
      (eta_X3f :: Compose f_agdl0 g_agdl1 a_agdmt) ->
      ((foldMap
          @ f_agdl0
          $dFoldable_agdl2
          @ (Data.Semigroup.Internal.Endo [a_agdmt])
          @ (g_agdl1 a_agdmt)
          (Data.Semigroup.Internal.$fMonoidEndo @ [a_agdmt])
          (foldMap
             @ g_agdl1
             $dFoldable1_agdl3
             @ (Data.Semigroup.Internal.Endo [a_agdmt])
             @ a_agdmt
             (Data.Semigroup.Internal.$fMonoidEndo @ [a_agdmt])
             ((GHC.Types.: @ a_agdmt)
              `cast` (<a_agdmt>_R
                      ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <[a_agdmt]>_R)
                      :: (a_agdmt -> [a_agdmt] -> [a_agdmt] :: *)
                         ~R# (a_agdmt -> Data.Semigroup.Internal.Endo [a_agdmt] :: *))))
          (eta_X3f
           `cast` (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_agdl0>_R <g_agdl1>_N <a_agdmt>_N
                   :: (Compose f_agdl0 g_agdl1 a_agdmt :: *)
                      ~R# (f_agdl0 (g_agdl1 a_agdmt) :: *))))
       `cast` (Data.Semigroup.Internal.N:Endo[0] <[a_agdmt]>_R
               :: (Data.Semigroup.Internal.Endo [a_agdmt] :: *)
                  ~R# ([a_agdmt] -> [a_agdmt] :: *)))
        (GHC.Types.[] @ a_agdmt)

-- RHS size: {terms: 53, types: 51, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fFoldableCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Foldable f, Foldable g) =>
     Foldable (Compose f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=DFun: \ (@ (f_agd4u :: * -> *))
             (@ (g_agd4v :: * -> *))
             (v_X3d :: Foldable f_agd4u)
             (v1_B2 :: Foldable g_agd4v) ->
       Data.Foldable.C:Foldable TYPE: Compose f_agd4u g_agd4v
                                Data.Functor.Compose.$fFoldableCompose_$cfold
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cfoldMap
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cfoldr
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cfoldr'
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cfoldl
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cfoldl'
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cfoldr1
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cfoldl1
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$ctoList
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cnull
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$clength
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$celem
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cmaximum
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cminimum
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$csum
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2
                                Data.Functor.Compose.$fFoldableCompose_$cproduct
                                  @ f_agd4u @ g_agd4v v_X3d v1_B2]
Data.Functor.Compose.$fFoldableCompose
  = \ (@ (f_agdl0 :: * -> *))
      (@ (g_agdl1 :: * -> *))
      ($dFoldable_agdl2 :: Foldable f_agdl0)
      ($dFoldable1_agdl3 :: Foldable g_agdl1) ->
      Data.Foldable.C:Foldable
        @ (Compose f_agdl0 g_agdl1)
        (Data.Functor.Compose.$fFoldableCompose_$cfold
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cfoldMap
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cfoldr
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cfoldr'
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cfoldl
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cfoldl'
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cfoldr1
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cfoldl1
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$ctoList
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cnull
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$clength
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$celem
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cmaximum
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cminimum
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$csum
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)
        (Data.Functor.Compose.$fFoldableCompose_$cproduct
           @ f_agdl0 @ g_agdl1 $dFoldable_agdl2 $dFoldable1_agdl3)

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose1
  :: forall (f :: * -> *) (g :: * -> *) b. f (g b) -> f (g b)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (f_agdjG :: * -> *))
                 (@ (g_agdjH :: * -> *))
                 (@ b_agdjX)
                 (v_X5 [Occ=Once] :: f_agdjG (g_agdjH b_agdjX)) ->
                 v_X5}]
Data.Functor.Compose.$fTraversableCompose1
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      (@ b_agdjX)
      (v_X5 :: f_agdjG (g_agdjH b_agdjX)) ->
      v_X5

-- RHS size: {terms: 22, types: 59, coercions: 21, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose_$ctraverse
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (f1 :: * -> *) a b.
     Applicative f1 =>
     (a -> f1 b) -> Compose f g a -> f1 (Compose f g b)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A)><S(S(C(C(S))L)LLLLL),U(U(U,U),U,U,U,U,U)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 0 0] 150 0}]
Data.Functor.Compose.$fTraversableCompose_$ctraverse
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      ($dTraversable_agdjI :: Traversable f_agdjG)
      ($dTraversable1_agdjJ :: Traversable g_agdjH)
      (@ (f1_agdjV :: * -> *))
      (@ a_agdjW)
      (@ b_agdjX)
      ($dApplicative_agdjZ :: Applicative f1_agdjV)
      (eta_B2 :: a_agdjW -> f1_agdjV b_agdjX)
      (eta1_X3l :: Compose f_agdjG g_agdjH a_agdjW) ->
      fmap
        @ f1_agdjV
        (GHC.Base.$p1Applicative @ f1_agdjV $dApplicative_agdjZ)
        @ (f_agdjG (g_agdjH b_agdjX))
        @ (Compose f_agdjG g_agdjH b_agdjX)
        ((Data.Functor.Compose.$fTraversableCompose1
            @ f_agdjG @ g_agdjH @ b_agdjX)
         `cast` (<f_agdjG (g_agdjH b_agdjX)>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_agdjG>_R <g_agdjH>_N <b_agdjX>_N)
                 :: (f_agdjG (g_agdjH b_agdjX) -> f_agdjG (g_agdjH b_agdjX) :: *)
                    ~R# (f_agdjG (g_agdjH b_agdjX)
                         -> Compose f_agdjG g_agdjH b_agdjX :: *)))
        (traverse
           @ f_agdjG
           $dTraversable_agdjI
           @ f1_agdjV
           @ (g_agdjH a_agdjW)
           @ (g_agdjH b_agdjX)
           $dApplicative_agdjZ
           (traverse
              @ g_agdjH
              $dTraversable1_agdjJ
              @ f1_agdjV
              @ a_agdjW
              @ b_agdjX
              $dApplicative_agdjZ
              eta_B2)
           (eta1_X3l
            `cast` (Data.Functor.Compose.N:Compose[0]
                        <*>_N <*>_N <f_agdjG>_R <g_agdjH>_N <a_agdjW>_N
                    :: (Compose f_agdjG g_agdjH a_agdjW :: *)
                       ~R# (f_agdjG (g_agdjH a_agdjW) :: *))))

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose_$cp2Traversable
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     Foldable (Compose f g)
[GblId,
 Arity=2,
 Str=<L,1*U(A,1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A)><L,1*U(A,1*U(A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdjG :: * -> *))
                 (@ (g_agdjH :: * -> *))
                 ($dTraversable_agdjI [Occ=Once] :: Traversable f_agdjG)
                 ($dTraversable1_agdjJ [Occ=Once] :: Traversable g_agdjH) ->
                 Data.Functor.Compose.$fFoldableCompose
                   @ f_agdjG
                   @ g_agdjH
                   (Data.Traversable.$p2Traversable @ f_agdjG $dTraversable_agdjI)
                   (Data.Traversable.$p2Traversable @ g_agdjH $dTraversable1_agdjJ)}]
Data.Functor.Compose.$fTraversableCompose_$cp2Traversable
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      ($dTraversable_agdjI :: Traversable f_agdjG)
      ($dTraversable1_agdjJ :: Traversable g_agdjH) ->
      Data.Functor.Compose.$fFoldableCompose
        @ f_agdjG
        @ g_agdjH
        (Data.Traversable.$p2Traversable @ f_agdjG $dTraversable_agdjI)
        (Data.Traversable.$p2Traversable @ g_agdjH $dTraversable1_agdjJ)

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose_$cp1Traversable
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     Functor (Compose f g)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(C(C1(U)),A),A,A,A,A,A)><L,1*U(1*U(C(U),A),A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdjG :: * -> *))
                 (@ (g_agdjH :: * -> *))
                 ($dTraversable_agdjI [Occ=Once] :: Traversable f_agdjG)
                 ($dTraversable1_agdjJ [Occ=Once] :: Traversable g_agdjH) ->
                 Data.Functor.Compose.$fFunctorCompose
                   @ f_agdjG
                   @ g_agdjH
                   (Data.Traversable.$p1Traversable @ f_agdjG $dTraversable_agdjI)
                   (Data.Traversable.$p1Traversable @ g_agdjH $dTraversable1_agdjJ)}]
Data.Functor.Compose.$fTraversableCompose_$cp1Traversable
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      ($dTraversable_agdjI :: Traversable f_agdjG)
      ($dTraversable1_agdjJ :: Traversable g_agdjH) ->
      Data.Functor.Compose.$fFunctorCompose
        @ f_agdjG
        @ g_agdjH
        (Data.Traversable.$p1Traversable @ f_agdjG $dTraversable_agdjI)
        (Data.Traversable.$p1Traversable @ g_agdjH $dTraversable1_agdjJ)

-- RHS size: {terms: 12, types: 28, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose_$csequenceA [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (f1 :: * -> *) a.
     Applicative f1 =>
     Compose f g (f1 a) -> f1 (Compose f g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(C1(U))),A,A,A)><L,U(A,A,C(C1(U)),A,A,A)><L,U(U(U,U),U,U,U,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_agdjG :: * -> *))
                 (@ (g_agdjH :: * -> *))
                 ($dTraversable_agdjI [Occ=Once] :: Traversable f_agdjG)
                 ($dTraversable1_agdjJ [Occ=Once] :: Traversable g_agdjH)
                 (@ (f1_agdkp :: * -> *))
                 (@ a_agdkq)
                 ($dApplicative_agdks [Occ=Once] :: Applicative f1_agdkp) ->
                 Data.Functor.Compose.$fTraversableCompose_$ctraverse
                   @ f_agdjG
                   @ g_agdjH
                   $dTraversable_agdjI
                   $dTraversable1_agdjJ
                   @ f1_agdkp
                   @ (f1_agdkp a_agdkq)
                   @ a_agdkq
                   $dApplicative_agdks
                   (id @ (f1_agdkp a_agdkq))}]
Data.Functor.Compose.$fTraversableCompose_$csequenceA
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      ($dTraversable_agdjI :: Traversable f_agdjG)
      ($dTraversable1_agdjJ :: Traversable g_agdjH)
      (@ (f1_agdkp :: * -> *))
      (@ a_agdkq)
      ($dApplicative_agdks :: Applicative f1_agdkp) ->
      Data.Functor.Compose.$fTraversableCompose_$ctraverse
        @ f_agdjG
        @ g_agdjH
        $dTraversable_agdjI
        $dTraversable1_agdjJ
        @ f1_agdkp
        @ (f1_agdkp a_agdkq)
        @ a_agdkq
        $dApplicative_agdks
        (id @ (f1_agdkp a_agdkq))

-- RHS size: {terms: 17, types: 39, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose_$cmapM [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (m :: * -> *) a b.
     Monad m =>
     (a -> m b) -> Compose f g a -> m (Compose f g b)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A)><S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(U,U),U,U,U,U,U),A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_agdjG :: * -> *))
                 (@ (g_agdjH :: * -> *))
                 ($dTraversable_agdjI [Occ=Once] :: Traversable f_agdjG)
                 ($dTraversable1_agdjJ [Occ=Once] :: Traversable g_agdjH)
                 (@ (m_agdkB :: * -> *))
                 (@ a_agdkC)
                 (@ b_agdkD)
                 ($dMonad_agdkF [Occ=Once] :: Monad m_agdkB) ->
                 Data.Functor.Compose.$fTraversableCompose_$ctraverse
                   @ f_agdjG
                   @ g_agdjH
                   $dTraversable_agdjI
                   $dTraversable1_agdjJ
                   @ m_agdkB
                   @ a_agdkC
                   @ b_agdkD
                   (GHC.Base.$p1Monad @ m_agdkB $dMonad_agdkF)}]
Data.Functor.Compose.$fTraversableCompose_$cmapM
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      ($dTraversable_agdjI :: Traversable f_agdjG)
      ($dTraversable1_agdjJ :: Traversable g_agdjH)
      (@ (m_agdkB :: * -> *))
      (@ a_agdkC)
      (@ b_agdkD)
      ($dMonad_agdkF :: Monad m_agdkB)
      (eta_B2 :: a_agdkC -> m_agdkB b_agdkD)
      (eta1_X3p :: Compose f_agdjG g_agdjH a_agdkC) ->
      Data.Functor.Compose.$fTraversableCompose_$ctraverse
        @ f_agdjG
        @ g_agdjH
        $dTraversable_agdjI
        $dTraversable1_agdjJ
        @ m_agdkB
        @ a_agdkC
        @ b_agdkD
        (GHC.Base.$p1Monad @ m_agdkB $dMonad_agdkF)
        eta_B2
        eta1_X3p

-- RHS size: {terms: 15, types: 38, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose_$csequence [InlPrag=INLINE (sat-args=0)]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     forall (m :: * -> *) a.
     Monad m =>
     Compose f g (m a) -> m (Compose f g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A)><S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(U,U),U,U,U,U,U),A,A,A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ (f_agdjG :: * -> *))
                 (@ (g_agdjH :: * -> *))
                 ($dTraversable_agdjI [Occ=Once] :: Traversable f_agdjG)
                 ($dTraversable1_agdjJ [Occ=Once] :: Traversable g_agdjH)
                 (@ (m_agdkP :: * -> *))
                 (@ a_agdkQ)
                 ($dMonad_agdkS [Occ=Once] :: Monad m_agdkP) ->
                 Data.Functor.Compose.$fTraversableCompose_$ctraverse
                   @ f_agdjG
                   @ g_agdjH
                   $dTraversable_agdjI
                   $dTraversable1_agdjJ
                   @ m_agdkP
                   @ (m_agdkP a_agdkQ)
                   @ a_agdkQ
                   (GHC.Base.$p1Monad @ m_agdkP $dMonad_agdkS)
                   (id @ (m_agdkP a_agdkQ))}]
Data.Functor.Compose.$fTraversableCompose_$csequence
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      ($dTraversable_agdjI :: Traversable f_agdjG)
      ($dTraversable1_agdjJ :: Traversable g_agdjH)
      (@ (m_agdkP :: * -> *))
      (@ a_agdkQ)
      ($dMonad_agdkS :: Monad m_agdkP)
      (eta_B1 :: Compose f_agdjG g_agdjH (m_agdkP a_agdkQ)) ->
      Data.Functor.Compose.$fTraversableCompose_$ctraverse
        @ f_agdjG
        @ g_agdjH
        $dTraversable_agdjI
        $dTraversable1_agdjJ
        @ m_agdkP
        @ (m_agdkP a_agdkQ)
        @ a_agdkQ
        (GHC.Base.$p1Monad @ m_agdkP $dMonad_agdkS)
        (id @ (m_agdkP a_agdkQ))
        eta_B1

-- RHS size: {terms: 23, types: 31, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fTraversableCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Traversable f, Traversable g) =>
     Traversable (Compose f g)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(1*U(C(C1(U)),A),1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),C(C1(C1(U))),A,A,A)><L,U(1*U(C(U),A),1*U(A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A),C(C1(U)),A,A,A)>m,
 Unf=DFun: \ (@ (f_agd4q :: * -> *))
             (@ (g_agd4r :: * -> *))
             (v_X3k :: Traversable f_agd4q)
             (v1_B2 :: Traversable g_agd4r) ->
       Data.Traversable.C:Traversable TYPE: Compose f_agd4q g_agd4r
                                      Data.Functor.Compose.$fTraversableCompose_$cp1Traversable
                                        @ f_agd4q @ g_agd4r v_X3k v1_B2
                                      Data.Functor.Compose.$fTraversableCompose_$cp2Traversable
                                        @ f_agd4q @ g_agd4r v_X3k v1_B2
                                      Data.Functor.Compose.$fTraversableCompose_$ctraverse
                                        @ f_agd4q @ g_agd4r v_X3k v1_B2
                                      Data.Functor.Compose.$fTraversableCompose_$csequenceA
                                        @ f_agd4q @ g_agd4r v_X3k v1_B2
                                      Data.Functor.Compose.$fTraversableCompose_$cmapM
                                        @ f_agd4q @ g_agd4r v_X3k v1_B2
                                      Data.Functor.Compose.$fTraversableCompose_$csequence
                                        @ f_agd4q @ g_agd4r v_X3k v1_B2]
Data.Functor.Compose.$fTraversableCompose
  = \ (@ (f_agdjG :: * -> *))
      (@ (g_agdjH :: * -> *))
      ($dTraversable_agdjI :: Traversable f_agdjG)
      ($dTraversable1_agdjJ :: Traversable g_agdjH) ->
      Data.Traversable.C:Traversable
        @ (Compose f_agdjG g_agdjH)
        (Data.Functor.Compose.$fTraversableCompose_$cp1Traversable
           @ f_agdjG @ g_agdjH $dTraversable_agdjI $dTraversable1_agdjJ)
        (Data.Functor.Compose.$fTraversableCompose_$cp2Traversable
           @ f_agdjG @ g_agdjH $dTraversable_agdjI $dTraversable1_agdjJ)
        (Data.Functor.Compose.$fTraversableCompose_$ctraverse
           @ f_agdjG @ g_agdjH $dTraversable_agdjI $dTraversable1_agdjJ)
        (Data.Functor.Compose.$fTraversableCompose_$csequenceA
           @ f_agdjG @ g_agdjH $dTraversable_agdjI $dTraversable1_agdjJ)
        (Data.Functor.Compose.$fTraversableCompose_$cmapM
           @ f_agdjG @ g_agdjH $dTraversable_agdjI $dTraversable1_agdjJ)
        (Data.Functor.Compose.$fTraversableCompose_$csequence
           @ f_agdjG @ g_agdjH $dTraversable_agdjI $dTraversable1_agdjJ)

-- RHS size: {terms: 17, types: 48, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose4
  :: forall (f :: * -> *) (g :: * -> *).
     (Applicative f, Applicative g) =>
     forall a b c.
     (a -> b -> c) -> Compose f g a -> Compose f g b -> f (g c)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(S)))LL),1*U(A,A,A,1*C1(C1(C1(U))),A,A)><L,1*U(A,A,A,1*C1(U),A,A)><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdid :: * -> *))
                 (@ (g_agdie :: * -> *))
                 ($dApplicative_agdif [Occ=Once] :: Applicative f_agdid)
                 ($dApplicative1_agdig [Occ=Once] :: Applicative g_agdie)
                 (@ a_agdj0)
                 (@ b_agdj1)
                 (@ c_agdj2)
                 (f1_agd4n [Occ=Once] :: a_agdj0 -> b_agdj1 -> c_agdj2)
                 (ds_dgdwi [Occ=Once] :: Compose f_agdid g_agdie a_agdj0)
                 (ds1_dgdwj [Occ=Once] :: Compose f_agdid g_agdie b_agdj1) ->
                 liftA2
                   @ f_agdid
                   $dApplicative_agdif
                   @ (g_agdie a_agdj0)
                   @ (g_agdie b_agdj1)
                   @ (g_agdie c_agdj2)
                   (liftA2
                      @ g_agdie
                      $dApplicative1_agdig
                      @ a_agdj0
                      @ b_agdj1
                      @ c_agdj2
                      f1_agd4n)
                   (ds_dgdwi
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdid>_R <g_agdie>_N <a_agdj0>_N
                            :: (Compose f_agdid g_agdie a_agdj0 :: *)
                               ~R# (f_agdid (g_agdie a_agdj0) :: *)))
                   (ds1_dgdwj
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_agdid>_R <g_agdie>_N <b_agdj1>_N
                            :: (Compose f_agdid g_agdie b_agdj1 :: *)
                               ~R# (f_agdid (g_agdie b_agdj1) :: *)))}]
Data.Functor.Compose.$fApplicativeCompose4
  = \ (@ (f_agdid :: * -> *))
      (@ (g_agdie :: * -> *))
      ($dApplicative_agdif :: Applicative f_agdid)
      ($dApplicative1_agdig :: Applicative g_agdie)
      (@ a_agdj0)
      (@ b_agdj1)
      (@ c_agdj2)
      (f1_agd4n :: a_agdj0 -> b_agdj1 -> c_agdj2)
      (ds_dgdwi :: Compose f_agdid g_agdie a_agdj0)
      (ds1_dgdwj :: Compose f_agdid g_agdie b_agdj1) ->
      liftA2
        @ f_agdid
        $dApplicative_agdif
        @ (g_agdie a_agdj0)
        @ (g_agdie b_agdj1)
        @ (g_agdie c_agdj2)
        (liftA2
           @ g_agdie
           $dApplicative1_agdig
           @ a_agdj0
           @ b_agdj1
           @ c_agdj2
           f1_agd4n)
        (ds_dgdwi
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdid>_R <g_agdie>_N <a_agdj0>_N
                 :: (Compose f_agdid g_agdie a_agdj0 :: *)
                    ~R# (f_agdid (g_agdie a_agdj0) :: *)))
        (ds1_dgdwj
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_agdid>_R <g_agdie>_N <b_agdj1>_N
                 :: (Compose f_agdid g_agdie b_agdj1 :: *)
                    ~R# (f_agdid (g_agdie b_agdj1) :: *)))

-- RHS size: {terms: 14, types: 44, coercions: 17, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose5
  :: forall (f :: * -> *) (g :: * -> *).
     (Applicative f, Applicative g) =>
     forall a b. Compose f g (a -> b) -> Compose f g a -> f (g b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(S)))LL),1*U(A,A,A,1*C1(C1(C1(U))),A,A)><L,1*U(A,A,1*U,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_Xgdlv :: * -> *))
                 (@ (g_Xgdlx :: * -> *))
                 ($dApplicative_Xgdlz [Occ=Once] :: Applicative f_Xgdlv)
                 ($dApplicative1_XgdlB [Occ=Once] :: Applicative g_Xgdlx)
                 (@ a_agdiF)
                 (@ b_agdiG)
                 (ds_dgdw9 [Occ=Once]
                    :: Compose f_Xgdlv g_Xgdlx (a_agdiF -> b_agdiG))
                 (ds1_dgdwa [Occ=Once] :: Compose f_Xgdlv g_Xgdlx a_agdiF) ->
                 liftA2
                   @ f_Xgdlv
                   $dApplicative_Xgdlz
                   @ (g_Xgdlx (a_agdiF -> b_agdiG))
                   @ (g_Xgdlx a_agdiF)
                   @ (g_Xgdlx b_agdiG)
                   (<*> @ g_Xgdlx $dApplicative1_XgdlB @ a_agdiF @ b_agdiG)
                   (ds_dgdw9
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_Xgdlv>_R <g_Xgdlx>_N <a_agdiF -> b_agdiG>_N
                            :: (Compose f_Xgdlv g_Xgdlx (a_agdiF -> b_agdiG) :: *)
                               ~R# (f_Xgdlv (g_Xgdlx (a_agdiF -> b_agdiG)) :: *)))
                   (ds1_dgdwa
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_Xgdlv>_R <g_Xgdlx>_N <a_agdiF>_N
                            :: (Compose f_Xgdlv g_Xgdlx a_agdiF :: *)
                               ~R# (f_Xgdlv (g_Xgdlx a_agdiF) :: *)))}]
Data.Functor.Compose.$fApplicativeCompose5
  = \ (@ (f_Xgdlv :: * -> *))
      (@ (g_Xgdlx :: * -> *))
      ($dApplicative_Xgdlz :: Applicative f_Xgdlv)
      ($dApplicative1_XgdlB :: Applicative g_Xgdlx)
      (@ a_agdiF)
      (@ b_agdiG)
      (ds_dgdw9 :: Compose f_Xgdlv g_Xgdlx (a_agdiF -> b_agdiG))
      (ds1_dgdwa :: Compose f_Xgdlv g_Xgdlx a_agdiF) ->
      liftA2
        @ f_Xgdlv
        $dApplicative_Xgdlz
        @ (g_Xgdlx (a_agdiF -> b_agdiG))
        @ (g_Xgdlx a_agdiF)
        @ (g_Xgdlx b_agdiG)
        (<*> @ g_Xgdlx $dApplicative1_XgdlB @ a_agdiF @ b_agdiG)
        (ds_dgdw9
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_Xgdlv>_R <g_Xgdlx>_N <a_agdiF -> b_agdiG>_N
                 :: (Compose f_Xgdlv g_Xgdlx (a_agdiF -> b_agdiG) :: *)
                    ~R# (f_Xgdlv (g_Xgdlx (a_agdiF -> b_agdiG)) :: *)))
        (ds1_dgdwa
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_Xgdlv>_R <g_Xgdlx>_N <a_agdiF>_N
                 :: (Compose f_Xgdlv g_Xgdlx a_agdiF :: *)
                    ~R# (f_Xgdlv (g_Xgdlx a_agdiF) :: *)))

-- RHS size: {terms: 11, types: 20, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose6
  :: forall (f :: * -> *) (g :: * -> *).
     (Applicative f, Applicative g) =>
     forall a. a -> f (g a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(S)LLLL),1*U(A,1*C1(U),A,A,A,A)><L,1*U(A,1*C1(U),A,A,A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XgdlF :: * -> *))
                 (@ (g_XgdlH :: * -> *))
                 ($dApplicative_XgdlJ [Occ=Once] :: Applicative f_XgdlF)
                 ($dApplicative1_XgdlL [Occ=Once] :: Applicative g_XgdlH)
                 (@ a_agdio)
                 (x_agd4k [Occ=Once] :: a_agdio) ->
                 pure
                   @ f_XgdlF
                   $dApplicative_XgdlJ
                   @ (g_XgdlH a_agdio)
                   (pure @ g_XgdlH $dApplicative1_XgdlL @ a_agdio x_agd4k)}]
Data.Functor.Compose.$fApplicativeCompose6
  = \ (@ (f_XgdlF :: * -> *))
      (@ (g_XgdlH :: * -> *))
      ($dApplicative_XgdlJ :: Applicative f_XgdlF)
      ($dApplicative1_XgdlL :: Applicative g_XgdlH)
      (@ a_agdio)
      (x_agd4k :: a_agdio) ->
      pure
        @ f_XgdlF
        $dApplicative_XgdlJ
        @ (g_XgdlH a_agdio)
        (pure @ g_XgdlH $dApplicative1_XgdlL @ a_agdio x_agd4k)

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative
  :: forall (f :: * -> *) (g :: * -> *).
     (Applicative f, Applicative g) =>
     Functor (Compose f g)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(C(C1(U)),A),A,A,A,A,A)><L,1*U(1*U(C(U),A),A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XgdlN :: * -> *))
                 (@ (g_XgdlP :: * -> *))
                 ($dApplicative_XgdlR [Occ=Once] :: Applicative f_XgdlN)
                 ($dApplicative1_XgdlT [Occ=Once] :: Applicative g_XgdlP) ->
                 Data.Functor.Compose.$fFunctorCompose
                   @ f_XgdlN
                   @ g_XgdlP
                   (GHC.Base.$p1Applicative @ f_XgdlN $dApplicative_XgdlR)
                   (GHC.Base.$p1Applicative @ g_XgdlP $dApplicative1_XgdlT)}]
Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative
  = \ (@ (f_XgdlN :: * -> *))
      (@ (g_XgdlP :: * -> *))
      ($dApplicative_XgdlR :: Applicative f_XgdlN)
      ($dApplicative1_XgdlT :: Applicative g_XgdlP) ->
      Data.Functor.Compose.$fFunctorCompose
        @ f_XgdlN
        @ g_XgdlP
        (GHC.Base.$p1Applicative @ f_XgdlN $dApplicative_XgdlR)
        (GHC.Base.$p1Applicative @ g_XgdlP $dApplicative1_XgdlT)

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose3
  :: forall b a. a -> b -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_agdjo)
                 (@ a_agdjn)
                 _ [Occ=Dead]
                 (eta_X9 [Occ=Once] :: b_agdjo) ->
                 eta_X9}]
Data.Functor.Compose.$fApplicativeCompose3
  = \ (@ b_agdjo) (@ a_agdjn) _ [Occ=Dead] (eta_X9 :: b_agdjo) ->
      eta_X9

-- RHS size: {terms: 21, types: 57, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose2
  :: forall (f :: * -> *) (g :: * -> *).
     (Applicative f, Applicative g) =>
     forall a b. Compose f g a -> Compose f g b -> f (g b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(S)))LL),U(1*U(1*C1(C1(U)),A),A,A,1*C1(C1(C1(U))),A,A)><L,U(1*U(1*C1(U),A),A,1*U,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 60 0 0] 180 0}]
Data.Functor.Compose.$fApplicativeCompose2
  = \ (@ (f_XgdlX :: * -> *))
      (@ (g_XgdlZ :: * -> *))
      ($dApplicative_Xgdm1 :: Applicative f_XgdlX)
      ($dApplicative1_Xgdm3 :: Applicative g_XgdlZ)
      (@ a_agdjn)
      (@ b_agdjo)
      (eta_B2 :: Compose f_XgdlX g_XgdlZ a_agdjn)
      (eta1_B1 :: Compose f_XgdlX g_XgdlZ b_agdjo) ->
      liftA2
        @ f_XgdlX
        $dApplicative_Xgdm1
        @ (g_XgdlZ (b_agdjo -> b_agdjo))
        @ (g_XgdlZ b_agdjo)
        @ (g_XgdlZ b_agdjo)
        (<*> @ g_XgdlZ $dApplicative1_Xgdm3 @ b_agdjo @ b_agdjo)
        (fmap
           @ f_XgdlX
           (GHC.Base.$p1Applicative @ f_XgdlX $dApplicative_Xgdm1)
           @ (g_XgdlZ a_agdjn)
           @ (g_XgdlZ (b_agdjo -> b_agdjo))
           (fmap
              @ g_XgdlZ
              (GHC.Base.$p1Applicative @ g_XgdlZ $dApplicative1_Xgdm3)
              @ a_agdjn
              @ (b_agdjo -> b_agdjo)
              (Data.Functor.Compose.$fApplicativeCompose3 @ b_agdjo @ a_agdjn))
           (eta_B2
            `cast` (Data.Functor.Compose.N:Compose[0]
                        <*>_N <*>_N <f_XgdlX>_R <g_XgdlZ>_N <a_agdjn>_N
                    :: (Compose f_XgdlX g_XgdlZ a_agdjn :: *)
                       ~R# (f_XgdlX (g_XgdlZ a_agdjn) :: *))))
        (eta1_B1
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_XgdlX>_R <g_XgdlZ>_N <b_agdjo>_N
                 :: (Compose f_XgdlX g_XgdlZ b_agdjo :: *)
                    ~R# (f_XgdlX (g_XgdlZ b_agdjo) :: *)))

-- RHS size: {terms: 15, types: 45, coercions: 16, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose1
  :: forall (f :: * -> *) (g :: * -> *).
     (Applicative f, Applicative g) =>
     forall a b. Compose f g a -> Compose f g b -> f (g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(S)))LL),1*U(A,A,A,1*C1(C1(C1(U))),A,A)><L,1*U(A,A,A,1*C1(U),A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XgdlP :: * -> *))
                 (@ (g_XgdlR :: * -> *))
                 ($dApplicative_XgdlT [Occ=Once] :: Applicative f_XgdlP)
                 ($dApplicative1_XgdlV [Occ=Once] :: Applicative g_XgdlR)
                 (@ a_agdjx)
                 (@ b_agdjy)
                 (ds_XgdA3 [Occ=Once] :: Compose f_XgdlP g_XgdlR a_agdjx)
                 (ds1_XgdA5 [Occ=Once] :: Compose f_XgdlP g_XgdlR b_agdjy) ->
                 liftA2
                   @ f_XgdlP
                   $dApplicative_XgdlT
                   @ (g_XgdlR a_agdjx)
                   @ (g_XgdlR b_agdjy)
                   @ (g_XgdlR a_agdjx)
                   (liftA2
                      @ g_XgdlR
                      $dApplicative1_XgdlV
                      @ a_agdjx
                      @ b_agdjy
                      @ a_agdjx
                      (const @ a_agdjx @ b_agdjy))
                   (ds_XgdA3
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_XgdlP>_R <g_XgdlR>_N <a_agdjx>_N
                            :: (Compose f_XgdlP g_XgdlR a_agdjx :: *)
                               ~R# (f_XgdlP (g_XgdlR a_agdjx) :: *)))
                   (ds1_XgdA5
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <*>_N <f_XgdlP>_R <g_XgdlR>_N <b_agdjy>_N
                            :: (Compose f_XgdlP g_XgdlR b_agdjy :: *)
                               ~R# (f_XgdlP (g_XgdlR b_agdjy) :: *)))}]
Data.Functor.Compose.$fApplicativeCompose1
  = \ (@ (f_XgdlP :: * -> *))
      (@ (g_XgdlR :: * -> *))
      ($dApplicative_XgdlT :: Applicative f_XgdlP)
      ($dApplicative1_XgdlV :: Applicative g_XgdlR)
      (@ a_agdjx)
      (@ b_agdjy)
      (ds_XgdA3 :: Compose f_XgdlP g_XgdlR a_agdjx)
      (ds1_XgdA5 :: Compose f_XgdlP g_XgdlR b_agdjy) ->
      liftA2
        @ f_XgdlP
        $dApplicative_XgdlT
        @ (g_XgdlR a_agdjx)
        @ (g_XgdlR b_agdjy)
        @ (g_XgdlR a_agdjx)
        (liftA2
           @ g_XgdlR
           $dApplicative1_XgdlV
           @ a_agdjx
           @ b_agdjy
           @ a_agdjx
           (const @ a_agdjx @ b_agdjy))
        (ds_XgdA3
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_XgdlP>_R <g_XgdlR>_N <a_agdjx>_N
                 :: (Compose f_XgdlP g_XgdlR a_agdjx :: *)
                    ~R# (f_XgdlP (g_XgdlR a_agdjx) :: *)))
        (ds1_XgdA5
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <*>_N <f_XgdlP>_R <g_XgdlR>_N <b_agdjy>_N
                 :: (Compose f_XgdlP g_XgdlR b_agdjy :: *)
                    ~R# (f_XgdlP (g_XgdlR b_agdjy) :: *)))

-- RHS size: {terms: 23, types: 31, coercions: 154, joins: 0/0}
Data.Functor.Compose.$fApplicativeCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Applicative f, Applicative g) =>
     Applicative (Compose f g)
[GblId[DFunId],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)><L,U(U(C(U),A),C(U),U,C(U),A,A)>m,
 Unf=DFun: \ (@ (f_agd4i :: * -> *))
             (@ (g_agd4j :: * -> *))
             (v_X3s :: Applicative f_agd4i)
             (v1_X3h :: Applicative g_agd4j) ->
       GHC.Base.C:Applicative TYPE: Compose f_agd4i g_agd4j
                              Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative
                                @ f_agd4i @ g_agd4j v_X3s v1_X3h
                              (Data.Functor.Compose.$fApplicativeCompose6
                                 @ f_agd4i @ g_agd4j v_X3s v1_X3h)
                              `cast` (forall (a :: <*>_N).
                                      <a>_R
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N <*>_N <f_agd4i>_R <g_agd4j>_N <a>_N)
                                      :: (forall a. a -> f_agd4i (g_agd4j a) :: *)
                                         ~R# (forall a. a -> Compose f_agd4i g_agd4j a :: *))
                              (Data.Functor.Compose.$fApplicativeCompose5
                                 @ f_agd4i @ g_agd4j v_X3s v1_X3h)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Compose f_agd4i g_agd4j (a -> b)>_R
                                      ->_R <Compose f_agd4i g_agd4j a>_R
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N <*>_N <f_agd4i>_R <g_agd4j>_N <b>_N)
                                      :: (forall a b.
                                          Compose f_agd4i g_agd4j (a -> b)
                                          -> Compose f_agd4i g_agd4j a -> f_agd4i (g_agd4j b) :: *)
                                         ~R# (forall a b.
                                              Compose f_agd4i g_agd4j (a -> b)
                                              -> Compose f_agd4i g_agd4j a
                                              -> Compose f_agd4i g_agd4j b :: *))
                              (Data.Functor.Compose.$fApplicativeCompose4
                                 @ f_agd4i @ g_agd4j v_X3s v1_X3h)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                      <a -> b -> c>_R
                                      ->_R <Compose f_agd4i g_agd4j a>_R
                                      ->_R <Compose f_agd4i g_agd4j b>_R
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N <*>_N <f_agd4i>_R <g_agd4j>_N <c>_N)
                                      :: (forall a b c.
                                          (a -> b -> c)
                                          -> Compose f_agd4i g_agd4j a
                                          -> Compose f_agd4i g_agd4j b
                                          -> f_agd4i (g_agd4j c) :: *)
                                         ~R# (forall a b c.
                                              (a -> b -> c)
                                              -> Compose f_agd4i g_agd4j a
                                              -> Compose f_agd4i g_agd4j b
                                              -> Compose f_agd4i g_agd4j c :: *))
                              (Data.Functor.Compose.$fApplicativeCompose2
                                 @ f_agd4i @ g_agd4j v_X3s v1_X3h)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Compose f_agd4i g_agd4j a>_R
                                      ->_R <Compose f_agd4i g_agd4j b>_R
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N <*>_N <f_agd4i>_R <g_agd4j>_N <b>_N)
                                      :: (forall a b.
                                          Compose f_agd4i g_agd4j a
                                          -> Compose f_agd4i g_agd4j b -> f_agd4i (g_agd4j b) :: *)
                                         ~R# (forall a b.
                                              Compose f_agd4i g_agd4j a
                                              -> Compose f_agd4i g_agd4j b
                                              -> Compose f_agd4i g_agd4j b :: *))
                              (Data.Functor.Compose.$fApplicativeCompose1
                                 @ f_agd4i @ g_agd4j v_X3s v1_X3h)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Compose f_agd4i g_agd4j a>_R
                                      ->_R <Compose f_agd4i g_agd4j b>_R
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N <*>_N <f_agd4i>_R <g_agd4j>_N <a>_N)
                                      :: (forall a b.
                                          Compose f_agd4i g_agd4j a
                                          -> Compose f_agd4i g_agd4j b -> f_agd4i (g_agd4j a) :: *)
                                         ~R# (forall a b.
                                              Compose f_agd4i g_agd4j a
                                              -> Compose f_agd4i g_agd4j b
                                              -> Compose f_agd4i g_agd4j a :: *))]
Data.Functor.Compose.$fApplicativeCompose
  = \ (@ (f_XgdlO :: * -> *))
      (@ (g_XgdlQ :: * -> *))
      ($dApplicative_XgdlS :: Applicative f_XgdlO)
      ($dApplicative1_XgdlU :: Applicative g_XgdlQ) ->
      GHC.Base.C:Applicative
        @ (Compose f_XgdlO g_XgdlQ)
        (Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative
           @ f_XgdlO @ g_XgdlQ $dApplicative_XgdlS $dApplicative1_XgdlU)
        ((Data.Functor.Compose.$fApplicativeCompose6
            @ f_XgdlO @ g_XgdlQ $dApplicative_XgdlS $dApplicative1_XgdlU)
         `cast` (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_XgdlO>_R <g_XgdlQ>_N <a>_N)
                 :: (forall a. a -> f_XgdlO (g_XgdlQ a) :: *)
                    ~R# (forall a. a -> Compose f_XgdlO g_XgdlQ a :: *)))
        ((Data.Functor.Compose.$fApplicativeCompose5
            @ f_XgdlO @ g_XgdlQ $dApplicative_XgdlS $dApplicative1_XgdlU)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 <Compose f_XgdlO g_XgdlQ (a -> b)>_R
                 ->_R <Compose f_XgdlO g_XgdlQ a>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_XgdlO>_R <g_XgdlQ>_N <b>_N)
                 :: (forall a b.
                     Compose f_XgdlO g_XgdlQ (a -> b)
                     -> Compose f_XgdlO g_XgdlQ a -> f_XgdlO (g_XgdlQ b) :: *)
                    ~R# (forall a b.
                         Compose f_XgdlO g_XgdlQ (a -> b)
                         -> Compose f_XgdlO g_XgdlQ a -> Compose f_XgdlO g_XgdlQ b :: *)))
        ((Data.Functor.Compose.$fApplicativeCompose4
            @ f_XgdlO @ g_XgdlQ $dApplicative_XgdlS $dApplicative1_XgdlU)
         `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <a -> b -> c>_R
                 ->_R <Compose f_XgdlO g_XgdlQ a>_R
                 ->_R <Compose f_XgdlO g_XgdlQ b>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_XgdlO>_R <g_XgdlQ>_N <c>_N)
                 :: (forall a b c.
                     (a -> b -> c)
                     -> Compose f_XgdlO g_XgdlQ a
                     -> Compose f_XgdlO g_XgdlQ b
                     -> f_XgdlO (g_XgdlQ c) :: *)
                    ~R# (forall a b c.
                         (a -> b -> c)
                         -> Compose f_XgdlO g_XgdlQ a
                         -> Compose f_XgdlO g_XgdlQ b
                         -> Compose f_XgdlO g_XgdlQ c :: *)))
        ((Data.Functor.Compose.$fApplicativeCompose2
            @ f_XgdlO @ g_XgdlQ $dApplicative_XgdlS $dApplicative1_XgdlU)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 <Compose f_XgdlO g_XgdlQ a>_R
                 ->_R <Compose f_XgdlO g_XgdlQ b>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_XgdlO>_R <g_XgdlQ>_N <b>_N)
                 :: (forall a b.
                     Compose f_XgdlO g_XgdlQ a
                     -> Compose f_XgdlO g_XgdlQ b -> f_XgdlO (g_XgdlQ b) :: *)
                    ~R# (forall a b.
                         Compose f_XgdlO g_XgdlQ a
                         -> Compose f_XgdlO g_XgdlQ b -> Compose f_XgdlO g_XgdlQ b :: *)))
        ((Data.Functor.Compose.$fApplicativeCompose1
            @ f_XgdlO @ g_XgdlQ $dApplicative_XgdlS $dApplicative1_XgdlU)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 <Compose f_XgdlO g_XgdlQ a>_R
                 ->_R <Compose f_XgdlO g_XgdlQ b>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_XgdlO>_R <g_XgdlQ>_N <a>_N)
                 :: (forall a b.
                     Compose f_XgdlO g_XgdlQ a
                     -> Compose f_XgdlO g_XgdlQ b -> f_XgdlO (g_XgdlQ a) :: *)
                    ~R# (forall a b.
                         Compose f_XgdlO g_XgdlQ a
                         -> Compose f_XgdlO g_XgdlQ b -> Compose f_XgdlO g_XgdlQ a :: *)))

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative
  :: forall (f :: * -> *) (g :: * -> *).
     (Alternative f, Applicative g) =>
     Applicative (Compose f g)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,U(U(C(U),A),C(U),U,C(U),A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_XgdkR :: * -> *))
                 (@ (g_XgdkT :: * -> *))
                 ($dAlternative_XgdkV [Occ=Once] :: Alternative f_XgdkR)
                 ($dApplicative_XgdkX [Occ=Once] :: Applicative g_XgdkT) ->
                 Data.Functor.Compose.$fApplicativeCompose
                   @ f_XgdkR
                   @ g_XgdkT
                   (GHC.Base.$p1Alternative @ f_XgdkR $dAlternative_XgdkV)
                   $dApplicative_XgdkX}]
Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative
  = \ (@ (f_XgdkR :: * -> *))
      (@ (g_XgdkT :: * -> *))
      ($dAlternative_XgdkV :: Alternative f_XgdkR)
      ($dApplicative_XgdkX :: Applicative g_XgdkT) ->
      Data.Functor.Compose.$fApplicativeCompose
        @ f_XgdkR
        @ g_XgdkT
        (GHC.Base.$p1Alternative @ f_XgdkR $dAlternative_XgdkV)
        $dApplicative_XgdkX

-- RHS size: {terms: 25, types: 57, coercions: 18, joins: 0/2}
Data.Functor.Compose.$fAlternativeCompose_$csome
  :: forall (f :: * -> *) (g :: * -> *).
     (Alternative f, Applicative g) =>
     forall a. Compose f g a -> Compose f g [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S(LLLC(C(C(S)))LL)LLLL),U(U(A,C(U),A,C(C1(C1(U))),A,A),A,C(C1(U)),A,A)><L,U(A,C(U),A,C(U),A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 220 0}]
Data.Functor.Compose.$fAlternativeCompose_$csome
  = \ (@ (f_XgdkU :: * -> *))
      (@ (g_XgdkW :: * -> *))
      ($dAlternative_XgdkY :: Alternative f_XgdkU)
      ($dApplicative_Xgdl0 :: Applicative g_XgdkW)
      (@ a_agdhY)
      (eta_X3k :: Compose f_XgdkU g_XgdkW a_agdhY) ->
      letrec {
        some_v_sgdAj [Occ=LoopBreaker] :: f_XgdkU (g_XgdkW [a_agdhY])
        [LclId]
        some_v_sgdAj
          = let {
              $dApplicative1_sgdAk [Dmd=<S(LLLC(C(C(S)))LL),U(A,1*C1(U),A,1*C1(C1(C1(U))),A,A)>]
                :: Applicative f_XgdkU
              [LclId]
              $dApplicative1_sgdAk
                = GHC.Base.$p1Alternative @ f_XgdkU $dAlternative_XgdkY } in
            liftA2
              @ f_XgdkU
              $dApplicative1_sgdAk
              @ (g_XgdkW a_agdhY)
              @ (g_XgdkW [a_agdhY])
              @ (g_XgdkW [a_agdhY])
              (liftA2
                 @ g_XgdkW
                 $dApplicative_Xgdl0
                 @ a_agdhY
                 @ [a_agdhY]
                 @ [a_agdhY]
                 (GHC.Types.: @ a_agdhY))
              (eta_X3k
               `cast` (Data.Functor.Compose.N:Compose[0]
                           <*>_N <*>_N <f_XgdkU>_R <g_XgdkW>_N <a_agdhY>_N
                       :: (Compose f_XgdkU g_XgdkW a_agdhY :: *)
                          ~R# (f_XgdkU (g_XgdkW a_agdhY) :: *)))
              (<|>
                 @ f_XgdkU
                 $dAlternative_XgdkY
                 @ (g_XgdkW [a_agdhY])
                 some_v_sgdAj
                 (pure
                    @ f_XgdkU
                    $dApplicative1_sgdAk
                    @ (g_XgdkW [a_agdhY])
                    (pure
                       @ g_XgdkW
                       $dApplicative_Xgdl0
                       @ [a_agdhY]
                       (GHC.Types.[] @ a_agdhY)))); } in
      some_v_sgdAj
      `cast` (Sym (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_XgdkU>_R <g_XgdkW>_N <[a_agdhY]>_N)
              :: (f_XgdkU (g_XgdkW [a_agdhY]) :: *)
                 ~R# (Compose f_XgdkU g_XgdkW [a_agdhY] :: *))

-- RHS size: {terms: 25, types: 57, coercions: 18, joins: 0/2}
Data.Functor.Compose.$fAlternativeCompose_$cmany
  :: forall (f :: * -> *) (g :: * -> *).
     (Alternative f, Applicative g) =>
     forall a. Compose f g a -> Compose f g [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLC(C(S))LL),U(U(A,C(U),A,C(C1(C1(U))),A,A),A,C(C1(U)),A,A)><L,U(A,C(U),A,C(U),A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 220 0}]
Data.Functor.Compose.$fAlternativeCompose_$cmany
  = \ (@ (f_XgdkT :: * -> *))
      (@ (g_XgdkV :: * -> *))
      ($dAlternative_XgdkX :: Alternative f_XgdkT)
      ($dApplicative_XgdkZ :: Applicative g_XgdkV)
      (@ a_agdi6)
      (eta_X3l :: Compose f_XgdkT g_XgdkV a_agdi6) ->
      letrec {
        many_v_sgdAf [Occ=LoopBreaker] :: f_XgdkT (g_XgdkV [a_agdi6])
        [LclId]
        many_v_sgdAf
          = let {
              $dApplicative1_sgdAg [Dmd=<L,U(A,1*C1(U),A,1*C1(C1(C1(U))),A,A)>]
                :: Applicative f_XgdkT
              [LclId]
              $dApplicative1_sgdAg
                = GHC.Base.$p1Alternative @ f_XgdkT $dAlternative_XgdkX } in
            <|>
              @ f_XgdkT
              $dAlternative_XgdkX
              @ (g_XgdkV [a_agdi6])
              (liftA2
                 @ f_XgdkT
                 $dApplicative1_sgdAg
                 @ (g_XgdkV a_agdi6)
                 @ (g_XgdkV [a_agdi6])
                 @ (g_XgdkV [a_agdi6])
                 (liftA2
                    @ g_XgdkV
                    $dApplicative_XgdkZ
                    @ a_agdi6
                    @ [a_agdi6]
                    @ [a_agdi6]
                    (GHC.Types.: @ a_agdi6))
                 (eta_X3l
                  `cast` (Data.Functor.Compose.N:Compose[0]
                              <*>_N <*>_N <f_XgdkT>_R <g_XgdkV>_N <a_agdi6>_N
                          :: (Compose f_XgdkT g_XgdkV a_agdi6 :: *)
                             ~R# (f_XgdkT (g_XgdkV a_agdi6) :: *)))
                 many_v_sgdAf)
              (pure
                 @ f_XgdkT
                 $dApplicative1_sgdAg
                 @ (g_XgdkV [a_agdi6])
                 (pure
                    @ g_XgdkV
                    $dApplicative_XgdkZ
                    @ [a_agdi6]
                    (GHC.Types.[] @ a_agdi6))); } in
      many_v_sgdAf
      `cast` (Sym (Data.Functor.Compose.N:Compose[0]
                       <*>_N <*>_N <f_XgdkT>_R <g_XgdkV>_N <[a_agdi6]>_N)
              :: (f_XgdkT (g_XgdkV [a_agdi6]) :: *)
                 ~R# (Compose f_XgdkT g_XgdkV [a_agdi6] :: *))

-- RHS size: {terms: 20, types: 35, coercions: 44, joins: 0/0}
Data.Functor.Compose.$fAlternativeCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) (g :: * -> *).
     (Alternative f, Applicative g) =>
     Alternative (Compose f g)
[GblId[DFunId],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),1*U,U,A,A)><L,U(U(C(U),A),C(U),U,C(U),A,A)>m,
 Unf=DFun: \ (@ (f_agd4f :: * -> *))
             (@ (g_agd4g :: * -> *))
             (v_X3w :: Alternative f_agd4f)
             (v1_X3l :: Applicative g_agd4g) ->
       GHC.Base.C:Alternative TYPE: Compose f_agd4f g_agd4g
                              Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative
                                @ f_agd4f @ g_agd4g v_X3w v1_X3l
                              (\ (@ a_Xgdl7) -> empty @ f_agd4f v_X3w @ (g_agd4g a_Xgdl7))
                              `cast` (forall (a :: <*>_N).
                                      Sym (Data.Functor.Compose.N:Compose[0]
                                               <*>_N <*>_N <f_agd4f>_R <g_agd4g>_N <a>_N)
                                      :: (forall a. f_agd4f (g_agd4g a) :: *)
                                         ~R# (forall a. Compose f_agd4f g_agd4g a :: *))
                              (\ (@ a_Xgdll) -> <|> @ f_agd4f v_X3w @ (g_agd4g a_Xgdll))
                              `cast` (forall (a :: <*>_N).
                                      Sym (Data.Functor.Compose.N:Compose[0]
                                               <*>_N <*>_N <f_agd4f>_R <g_agd4g>_N <a>_N)
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N <*>_N <f_agd4f>_R <g_agd4g>_N <a>_N)
                                      ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                    <*>_N <*>_N <f_agd4f>_R <g_agd4g>_N <a>_N)
                                      :: (forall a.
                                          f_agd4f (g_agd4g a)
                                          -> f_agd4f (g_agd4g a) -> f_agd4f (g_agd4g a) :: *)
                                         ~R# (forall a.
                                              Compose f_agd4f g_agd4g a
                                              -> Compose f_agd4f g_agd4g a
                                              -> Compose f_agd4f g_agd4g a :: *))
                              Data.Functor.Compose.$fAlternativeCompose_$csome
                                @ f_agd4f @ g_agd4g v_X3w v1_X3l
                              Data.Functor.Compose.$fAlternativeCompose_$cmany
                                @ f_agd4f @ g_agd4g v_X3w v1_X3l]
Data.Functor.Compose.$fAlternativeCompose
  = \ (@ (f_XgdkS :: * -> *))
      (@ (g_XgdkU :: * -> *))
      ($dAlternative_XgdkW :: Alternative f_XgdkS)
      ($dApplicative_XgdkY :: Applicative g_XgdkU) ->
      GHC.Base.C:Alternative
        @ (Compose f_XgdkS g_XgdkU)
        (Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative
           @ f_XgdkS @ g_XgdkU $dAlternative_XgdkW $dApplicative_XgdkY)
        ((\ (@ a_Xgdl7) ->
            empty @ f_XgdkS $dAlternative_XgdkW @ (g_XgdkU a_Xgdl7))
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_XgdkS>_R <g_XgdkU>_N <a>_N)
                 :: (forall a. f_XgdkS (g_XgdkU a) :: *)
                    ~R# (forall a. Compose f_XgdkS g_XgdkU a :: *)))
        ((\ (@ a_Xgdll) ->
            <|> @ f_XgdkS $dAlternative_XgdkW @ (g_XgdkU a_Xgdll))
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Functor.Compose.N:Compose[0]
                          <*>_N <*>_N <f_XgdkS>_R <g_XgdkU>_N <a>_N)
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_XgdkS>_R <g_XgdkU>_N <a>_N)
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <*>_N <f_XgdkS>_R <g_XgdkU>_N <a>_N)
                 :: (forall a.
                     f_XgdkS (g_XgdkU a)
                     -> f_XgdkS (g_XgdkU a) -> f_XgdkS (g_XgdkU a) :: *)
                    ~R# (forall a.
                         Compose f_XgdkS g_XgdkU a
                         -> Compose f_XgdkS g_XgdkU a -> Compose f_XgdkS g_XgdkU a :: *)))
        (Data.Functor.Compose.$fAlternativeCompose_$csome
           @ f_XgdkS @ g_XgdkU $dAlternative_XgdkW $dApplicative_XgdkY)
        (Data.Functor.Compose.$fAlternativeCompose_$cmany
           @ f_XgdkS @ g_XgdkU $dAlternative_XgdkW $dApplicative_XgdkY)

-- RHS size: {terms: 10, types: 31, coercions: 104, joins: 0/0}
Data.Functor.Compose.$fGeneric1Compose1
  :: forall (f :: * -> *) k (g :: k -> *).
     Functor f =>
     forall (a :: k). GHC.Generics.Rep1 (Compose f g) a -> f (g a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_agdfl :: * -> *))
                 (@ k_agdfm)
                 (@ (g_agdfn :: k_agdfm -> *))
                 ($dFunctor_agdfo [Occ=Once] :: Functor f_agdfl)
                 (@ (a_agdg5 :: k_agdfm))
                 (ds_dgdvJ [Occ=Once]
                    :: GHC.Generics.Rep1 (Compose f_agdfl g_agdfn) a_agdg5) ->
                 fmap
                   @ f_agdfl
                   $dFunctor_agdfo
                   @ (GHC.Generics.Rec1 g_agdfn a_agdg5)
                   @ (g_agdfn a_agdg5)
                   ((GHC.Generics.$fGeneric1:.:2 @ k_agdfm @ g_agdfn @ a_agdg5)
                    `cast` (<GHC.Generics.Rec1 g_agdfn a_agdg5>_R
                            ->_R GHC.Generics.N:Rec1[0] <k_agdfm>_N <g_agdfn>_R <a_agdg5>_N
                            :: (GHC.Generics.Rec1 g_agdfn a_agdg5
                                -> GHC.Generics.Rec1 g_agdfn a_agdg5 :: *)
                               ~R# (GHC.Generics.Rec1 g_agdfn a_agdg5 -> g_agdfn a_agdg5 :: *)))
                   (ds_dgdvJ
                    `cast` ((Sub (Data.Functor.Compose.Rep1_Compose[0]
                                      <f_agdfl>_N <k_agdfm>_N <g_agdfn>_N) ; (GHC.Generics.N:M1[0]
                                                                                  <k_agdfm>_N
                                                                                  <GHC.Generics.D>_P
                                                                                  <'GHC.Generics.MetaData
                                                                                     "Compose"
                                                                                     "Data.Functor.Compose"
                                                                                     "base"
                                                                                     'True>_P
                                                                                  <GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "Compose"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'True)
                                                                                     (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           ('Just
                                                                                              "getCompose")
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (f_agdfl
                                                                                         GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                            g_agdfn))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                                <k_agdfm>_N
                                                                                                                                <GHC.Generics.C>_P
                                                                                                                                <'GHC.Generics.MetaCons
                                                                                                                                   "Compose"
                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                   'True>_P
                                                                                                                                <GHC.Generics.M1
                                                                                                                                   GHC.Generics.S
                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                      ('Just
                                                                                                                                         "getCompose")
                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                   (f_agdfl
                                                                                                                                    GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                       g_agdfn)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                         <k_agdfm>_N
                                                                                                                                                                         <GHC.Generics.S>_P
                                                                                                                                                                         <'GHC.Generics.MetaSel
                                                                                                                                                                            ('Just
                                                                                                                                                                               "getCompose")
                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                            'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                         <f_agdfl
                                                                                                                                                                          GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                                             g_agdfn>_R))) <a_agdg5>_N ; GHC.Generics.N::.:[0]
                                                                                                                                                                                                                             <*>_N
                                                                                                                                                                                                                             <k_agdfm>_N
                                                                                                                                                                                                                             <f_agdfl>_R
                                                                                                                                                                                                                             <GHC.Generics.Rec1
                                                                                                                                                                                                                                g_agdfn>_N
                                                                                                                                                                                                                             <a_agdg5>_N
                            :: (GHC.Generics.Rep1 (Compose f_agdfl g_agdfn) a_agdg5 :: *)
                               ~R# (f_agdfl (GHC.Generics.Rec1 g_agdfn a_agdg5) :: *)))}]
Data.Functor.Compose.$fGeneric1Compose1
  = \ (@ (f_agdfl :: * -> *))
      (@ k_agdfm)
      (@ (g_agdfn :: k_agdfm -> *))
      ($dFunctor_agdfo :: Functor f_agdfl)
      (@ (a_agdg5 :: k_agdfm))
      (ds_dgdvJ
         :: GHC.Generics.Rep1 (Compose f_agdfl g_agdfn) a_agdg5) ->
      fmap
        @ f_agdfl
        $dFunctor_agdfo
        @ (GHC.Generics.Rec1 g_agdfn a_agdg5)
        @ (g_agdfn a_agdg5)
        ((GHC.Generics.$fGeneric1:.:2 @ k_agdfm @ g_agdfn @ a_agdg5)
         `cast` (<GHC.Generics.Rec1 g_agdfn a_agdg5>_R
                 ->_R GHC.Generics.N:Rec1[0] <k_agdfm>_N <g_agdfn>_R <a_agdg5>_N
                 :: (GHC.Generics.Rec1 g_agdfn a_agdg5
                     -> GHC.Generics.Rec1 g_agdfn a_agdg5 :: *)
                    ~R# (GHC.Generics.Rec1 g_agdfn a_agdg5 -> g_agdfn a_agdg5 :: *)))
        (ds_dgdvJ
         `cast` ((Sub (Data.Functor.Compose.Rep1_Compose[0]
                           <f_agdfl>_N <k_agdfm>_N <g_agdfn>_N) ; (GHC.Generics.N:M1[0]
                                                                       <k_agdfm>_N
                                                                       <GHC.Generics.D>_P
                                                                       <'GHC.Generics.MetaData
                                                                          "Compose"
                                                                          "Data.Functor.Compose"
                                                                          "base"
                                                                          'True>_P
                                                                       <GHC.Generics.M1
                                                                          GHC.Generics.C
                                                                          ('GHC.Generics.MetaCons
                                                                             "Compose"
                                                                             'GHC.Generics.PrefixI
                                                                             'True)
                                                                          (GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                ('Just "getCompose")
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (f_agdfl
                                                                              GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                 g_agdfn))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                     <k_agdfm>_N
                                                                                                                     <GHC.Generics.C>_P
                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                        "Compose"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'True>_P
                                                                                                                     <GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           ('Just
                                                                                                                              "getCompose")
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (f_agdfl
                                                                                                                         GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                            g_agdfn)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                              <k_agdfm>_N
                                                                                                                                                              <GHC.Generics.S>_P
                                                                                                                                                              <'GHC.Generics.MetaSel
                                                                                                                                                                 ('Just
                                                                                                                                                                    "getCompose")
                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                 'GHC.Generics.DecidedLazy>_P
                                                                                                                                                              <f_agdfl
                                                                                                                                                               GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                                  g_agdfn>_R))) <a_agdg5>_N ; GHC.Generics.N::.:[0]
                                                                                                                                                                                                                  <*>_N
                                                                                                                                                                                                                  <k_agdfm>_N
                                                                                                                                                                                                                  <f_agdfl>_R
                                                                                                                                                                                                                  <GHC.Generics.Rec1
                                                                                                                                                                                                                     g_agdfn>_N
                                                                                                                                                                                                                  <a_agdg5>_N
                 :: (GHC.Generics.Rep1 (Compose f_agdfl g_agdfn) a_agdg5 :: *)
                    ~R# (f_agdfl (GHC.Generics.Rec1 g_agdfn a_agdg5) :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fGeneric1Compose3
  :: forall k (g :: k -> *) (a :: k). g a -> g a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_Xgdjy)
                 (@ (g_XgdjA :: k_Xgdjy -> *))
                 (@ (a_agdfs :: k_Xgdjy))
                 (v_X3C [Occ=Once] :: g_XgdjA a_agdfs) ->
                 v_X3C}]
Data.Functor.Compose.$fGeneric1Compose3
  = \ (@ k_Xgdjy)
      (@ (g_XgdjA :: k_Xgdjy -> *))
      (@ (a_agdfs :: k_Xgdjy))
      (v_X3C :: g_XgdjA a_agdfs) ->
      v_X3C

-- RHS size: {terms: 10, types: 29, coercions: 15, joins: 0/0}
Data.Functor.Compose.$fGeneric1Compose2
  :: forall (f :: * -> *) k (g :: k -> *).
     Functor f =>
     forall (a :: k). Compose f g a -> f (GHC.Generics.Rec1 g a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_Xgdjw :: * -> *))
                 (@ k_Xgdjy)
                 (@ (g_XgdjA :: k_Xgdjy -> *))
                 ($dFunctor_XgdjC [Occ=Once] :: Functor f_Xgdjw)
                 (@ (a_agdfs :: k_Xgdjy))
                 (x_agdat [Occ=Once] :: Compose f_Xgdjw g_XgdjA a_agdfs) ->
                 fmap
                   @ f_Xgdjw
                   $dFunctor_XgdjC
                   @ (g_XgdjA a_agdfs)
                   @ (GHC.Generics.Rec1 g_XgdjA a_agdfs)
                   ((Data.Functor.Compose.$fGeneric1Compose3
                       @ k_Xgdjy @ g_XgdjA @ a_agdfs)
                    `cast` (<g_XgdjA a_agdfs>_R
                            ->_R Sym (GHC.Generics.N:Rec1[0]
                                          <k_Xgdjy>_N <g_XgdjA>_R) <a_agdfs>_N
                            :: (g_XgdjA a_agdfs -> g_XgdjA a_agdfs :: *)
                               ~R# (g_XgdjA a_agdfs -> GHC.Generics.Rec1 g_XgdjA a_agdfs :: *)))
                   (x_agdat
                    `cast` (Data.Functor.Compose.N:Compose[0]
                                <*>_N <k_Xgdjy>_N <f_Xgdjw>_R <g_XgdjA>_N <a_agdfs>_N
                            :: (Compose f_Xgdjw g_XgdjA a_agdfs :: *)
                               ~R# (f_Xgdjw (g_XgdjA a_agdfs) :: *)))}]
Data.Functor.Compose.$fGeneric1Compose2
  = \ (@ (f_Xgdjw :: * -> *))
      (@ k_Xgdjy)
      (@ (g_XgdjA :: k_Xgdjy -> *))
      ($dFunctor_XgdjC :: Functor f_Xgdjw)
      (@ (a_agdfs :: k_Xgdjy))
      (x_agdat :: Compose f_Xgdjw g_XgdjA a_agdfs) ->
      fmap
        @ f_Xgdjw
        $dFunctor_XgdjC
        @ (g_XgdjA a_agdfs)
        @ (GHC.Generics.Rec1 g_XgdjA a_agdfs)
        ((Data.Functor.Compose.$fGeneric1Compose3
            @ k_Xgdjy @ g_XgdjA @ a_agdfs)
         `cast` (<g_XgdjA a_agdfs>_R
                 ->_R Sym (GHC.Generics.N:Rec1[0]
                               <k_Xgdjy>_N <g_XgdjA>_R) <a_agdfs>_N
                 :: (g_XgdjA a_agdfs -> g_XgdjA a_agdfs :: *)
                    ~R# (g_XgdjA a_agdfs -> GHC.Generics.Rec1 g_XgdjA a_agdfs :: *)))
        (x_agdat
         `cast` (Data.Functor.Compose.N:Compose[0]
                     <*>_N <k_Xgdjy>_N <f_Xgdjw>_R <g_XgdjA>_N <a_agdfs>_N
                 :: (Compose f_Xgdjw g_XgdjA a_agdfs :: *)
                    ~R# (f_Xgdjw (g_XgdjA a_agdfs) :: *)))

-- RHS size: {terms: 9, types: 24, coercions: 130, joins: 0/0}
Data.Functor.Compose.$fGeneric1Compose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) k (g :: k -> *).
     Functor f =>
     Generic1 (Compose f g)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)>m,
 Unf=DFun: \ (@ (f_agd4c :: * -> *))
             (@ k_agd81)
             (@ (g_agd4d :: k_agd81 -> *))
             (v_X3A :: Functor f_agd4c) ->
       GHC.Generics.C:Generic1 TYPE: k_agd81
                               TYPE: Compose f_agd4c g_agd4d
                               (Data.Functor.Compose.$fGeneric1Compose2
                                  @ f_agd4c @ k_agd81 @ g_agd4d v_X3A)
                               `cast` (forall (a :: <k_agd81>_N).
                                       <Compose f_agd4c g_agd4d a>_R
                                       ->_R Sym (GHC.Generics.N::.:[0]
                                                     <*>_N
                                                     <k_agd81>_N
                                                     <f_agd4c>_R
                                                     <GHC.Generics.Rec1 g_agd4d>_N
                                                     <a>_N) ; (Sym (GHC.Generics.N:M1[0]
                                                                        <k_agd81>_N
                                                                        <GHC.Generics.S>_P
                                                                        <'GHC.Generics.MetaSel
                                                                           ('Just "getCompose")
                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                           'GHC.Generics.NoSourceStrictness
                                                                           'GHC.Generics.DecidedLazy>_P
                                                                        <f_agd4c
                                                                         GHC.Generics.:.: GHC.Generics.Rec1
                                                                                            g_agd4d>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                    <k_agd81>_N
                                                                                                                    <GHC.Generics.C>_P
                                                                                                                    <'GHC.Generics.MetaCons
                                                                                                                       "Compose"
                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                       'True>_P
                                                                                                                    <GHC.Generics.M1
                                                                                                                       GHC.Generics.S
                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                          ('Just
                                                                                                                             "getCompose")
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                       (f_agd4c
                                                                                                                        GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                           g_agd4d)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                    <k_agd81>_N
                                                                                                                                                                    <GHC.Generics.D>_P
                                                                                                                                                                    <'GHC.Generics.MetaData
                                                                                                                                                                       "Compose"
                                                                                                                                                                       "Data.Functor.Compose"
                                                                                                                                                                       "base"
                                                                                                                                                                       'True>_P
                                                                                                                                                                    <GHC.Generics.M1
                                                                                                                                                                       GHC.Generics.C
                                                                                                                                                                       ('GHC.Generics.MetaCons
                                                                                                                                                                          "Compose"
                                                                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                                                                          'True)
                                                                                                                                                                       (GHC.Generics.M1
                                                                                                                                                                          GHC.Generics.S
                                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                                             ('Just
                                                                                                                                                                                "getCompose")
                                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                                          (f_agd4c
                                                                                                                                                                           GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                                              g_agd4d))>_R) ; Sub (Sym (Data.Functor.Compose.Rep1_Compose[0]
                                                                                                                                                                                                                            <f_agd4c>_N
                                                                                                                                                                                                                            <k_agd81>_N
                                                                                                                                                                                                                            <g_agd4d>_N))))) <a>_N
                                       :: (forall (a :: k).
                                           Compose f_agd4c g_agd4d a
                                           -> f_agd4c (GHC.Generics.Rec1 g_agd4d a) :: *)
                                          ~R# (forall (a :: k).
                                               Compose f_agd4c g_agd4d a
                                               -> GHC.Generics.Rep1
                                                    (Compose f_agd4c g_agd4d) a :: *))
                               (Data.Functor.Compose.$fGeneric1Compose1
                                  @ f_agd4c @ k_agd81 @ g_agd4d v_X3A)
                               `cast` (forall (a :: <k_agd81>_N).
                                       <GHC.Generics.Rep1 (Compose f_agd4c g_agd4d) a>_R
                                       ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                     <*>_N
                                                     <k_agd81>_N
                                                     <f_agd4c>_R
                                                     <g_agd4d>_N
                                                     <a>_N)
                                       :: (forall (a :: k).
                                           GHC.Generics.Rep1 (Compose f_agd4c g_agd4d) a
                                           -> f_agd4c (g_agd4d a) :: *)
                                          ~R# (forall (a :: k).
                                               GHC.Generics.Rep1 (Compose f_agd4c g_agd4d) a
                                               -> Compose f_agd4c g_agd4d a :: *))]
Data.Functor.Compose.$fGeneric1Compose
  = \ (@ (f_XgdjE :: * -> *))
      (@ k_XgdjG)
      (@ (g_XgdjI :: k_XgdjG -> *))
      ($dFunctor_XgdjK :: Functor f_XgdjE) ->
      GHC.Generics.C:Generic1
        @ k_XgdjG
        @ (Compose f_XgdjE g_XgdjI)
        ((Data.Functor.Compose.$fGeneric1Compose2
            @ f_XgdjE @ k_XgdjG @ g_XgdjI $dFunctor_XgdjK)
         `cast` (forall (a :: <k_XgdjG>_N).
                 <Compose f_XgdjE g_XgdjI a>_R
                 ->_R Sym (GHC.Generics.N::.:[0]
                               <*>_N
                               <k_XgdjG>_N
                               <f_XgdjE>_R
                               <GHC.Generics.Rec1 g_XgdjI>_N
                               <a>_N) ; (Sym (GHC.Generics.N:M1[0]
                                                  <k_XgdjG>_N
                                                  <GHC.Generics.S>_P
                                                  <'GHC.Generics.MetaSel
                                                     ('Just "getCompose")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy>_P
                                                  <f_XgdjE
                                                   GHC.Generics.:.: GHC.Generics.Rec1
                                                                      g_XgdjI>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                              <k_XgdjG>_N
                                                                                              <GHC.Generics.C>_P
                                                                                              <'GHC.Generics.MetaCons
                                                                                                 "Compose"
                                                                                                 'GHC.Generics.PrefixI
                                                                                                 'True>_P
                                                                                              <GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    ('Just
                                                                                                       "getCompose")
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (f_XgdjE
                                                                                                  GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                     g_XgdjI)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                              <k_XgdjG>_N
                                                                                                                                              <GHC.Generics.D>_P
                                                                                                                                              <'GHC.Generics.MetaData
                                                                                                                                                 "Compose"
                                                                                                                                                 "Data.Functor.Compose"
                                                                                                                                                 "base"
                                                                                                                                                 'True>_P
                                                                                                                                              <GHC.Generics.M1
                                                                                                                                                 GHC.Generics.C
                                                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                                                    "Compose"
                                                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                                                    'True)
                                                                                                                                                 (GHC.Generics.M1
                                                                                                                                                    GHC.Generics.S
                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                       ('Just
                                                                                                                                                          "getCompose")
                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                    (f_XgdjE
                                                                                                                                                     GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                        g_XgdjI))>_R) ; Sub (Sym (Data.Functor.Compose.Rep1_Compose[0]
                                                                                                                                                                                                      <f_XgdjE>_N
                                                                                                                                                                                                      <k_XgdjG>_N
                                                                                                                                                                                                      <g_XgdjI>_N))))) <a>_N
                 :: (forall (a :: k).
                     Compose f_XgdjE g_XgdjI a
                     -> f_XgdjE (GHC.Generics.Rec1 g_XgdjI a) :: *)
                    ~R# (forall (a :: k).
                         Compose f_XgdjE g_XgdjI a
                         -> GHC.Generics.Rep1 (Compose f_XgdjE g_XgdjI) a :: *)))
        ((Data.Functor.Compose.$fGeneric1Compose1
            @ f_XgdjE @ k_XgdjG @ g_XgdjI $dFunctor_XgdjK)
         `cast` (forall (a :: <k_XgdjG>_N).
                 <GHC.Generics.Rep1 (Compose f_XgdjE g_XgdjI) a>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <*>_N <k_XgdjG>_N <f_XgdjE>_R <g_XgdjI>_N <a>_N)
                 :: (forall (a :: k).
                     GHC.Generics.Rep1 (Compose f_XgdjE g_XgdjI) a
                     -> f_XgdjE (g_XgdjI a) :: *)
                    ~R# (forall (a :: k).
                         GHC.Generics.Rep1 (Compose f_XgdjE g_XgdjI) a
                         -> Compose f_XgdjE g_XgdjI a :: *)))

-- RHS size: {terms: 8, types: 19, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fGenericCompose1
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2) x.
     GHC.Generics.Rep (Compose f g a) x
     -> GHC.Generics.Rep (Compose f g a) x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_agdef)
                 (@ (f_agdeg :: k_agdef -> *))
                 (@ k1_agdeh)
                 (@ (g_agdei :: k1_agdeh -> k_agdef))
                 (@ (a_agdej :: k1_agdeh))
                 (@ x_agdeP)
                 (ds_dgdvD [Occ=Once]
                    :: GHC.Generics.Rep (Compose f_agdeg g_agdei a_agdej) x_agdeP) ->
                 ds_dgdvD}]
Data.Functor.Compose.$fGenericCompose1
  = \ (@ k_agdef)
      (@ (f_agdeg :: k_agdef -> *))
      (@ k1_agdeh)
      (@ (g_agdei :: k1_agdeh -> k_agdef))
      (@ (a_agdej :: k1_agdeh))
      (@ x_agdeP)
      (ds_dgdvD
         :: GHC.Generics.Rep (Compose f_agdeg g_agdei a_agdej) x_agdeP) ->
      ds_dgdvD

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fGenericCompose2
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2) x.
     Compose f g a -> Compose f g a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_XgdiI)
                 (@ (f_XgdiK :: k_XgdiI -> *))
                 (@ k1_XgdiM)
                 (@ (g_XgdiO :: k1_XgdiM -> k_XgdiI))
                 (@ (a_XgdiQ :: k1_XgdiM))
                 (@ x_agden)
                 (x1_agdap [Occ=Once] :: Compose f_XgdiK g_XgdiO a_XgdiQ) ->
                 x1_agdap}]
Data.Functor.Compose.$fGenericCompose2
  = \ (@ k_XgdiI)
      (@ (f_XgdiK :: k_XgdiI -> *))
      (@ k1_XgdiM)
      (@ (g_XgdiO :: k1_XgdiM -> k_XgdiI))
      (@ (a_XgdiQ :: k1_XgdiM))
      (@ x_agden)
      (x1_agdap :: Compose f_XgdiK g_XgdiO a_XgdiQ) ->
      x1_agdap

-- RHS size: {terms: 8, types: 26, coercions: 238, joins: 0/0}
Data.Functor.Compose.$fGenericCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Generic (Compose f g a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_agd5g)
             (@ (f_agd4c :: k_agd5g -> *))
             (@ k1_agd5i)
             (@ (g_agd4d :: k1_agd5i -> k_agd5g))
             (@ (a_agd4e :: k1_agd5i)) ->
       GHC.Generics.C:Generic TYPE: Compose f_agd4c g_agd4d a_agd4e
                              (Data.Functor.Compose.$fGenericCompose2
                                 @ k_agd5g @ f_agd4c @ k1_agd5i @ g_agd4d @ a_agd4e)
                              `cast` (forall (x :: <*>_N).
                                      <Compose f_agd4c g_agd4d a_agd4e>_R
                                      ->_R Data.Functor.Compose.N:Compose[0]
                                               <k_agd5g>_N
                                               <k1_agd5i>_N
                                               <f_agd4c>_R
                                               <g_agd4d>_N
                                               <a_agd4e>_N ; (Sym (GHC.Generics.N:K1[0]
                                                                       <*>_N
                                                                       <GHC.Generics.R>_P
                                                                       <f_agd4c (g_agd4d a_agd4e)>_R
                                                                       <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.S>_P
                                                                                          <'GHC.Generics.MetaSel
                                                                                             ('Just
                                                                                                "getCompose")
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy>_P
                                                                                          <GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             (f_agd4c (g_agd4d a_agd4e))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                         <*>_N
                                                                                                                                         <GHC.Generics.C>_P
                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                            "Compose"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'True>_P
                                                                                                                                         <GHC.Generics.M1
                                                                                                                                            GHC.Generics.S
                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                               ('Just
                                                                                                                                                  "getCompose")
                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                            (GHC.Generics.K1
                                                                                                                                               GHC.Generics.R
                                                                                                                                               (f_agd4c (g_agd4d a_agd4e)))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                            <*>_N
                                                                                                                                                                                            <GHC.Generics.D>_P
                                                                                                                                                                                            <'GHC.Generics.MetaData
                                                                                                                                                                                               "Compose"
                                                                                                                                                                                               "Data.Functor.Compose"
                                                                                                                                                                                               "base"
                                                                                                                                                                                               'True>_P
                                                                                                                                                                                            <GHC.Generics.M1
                                                                                                                                                                                               GHC.Generics.C
                                                                                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                                                                                  "Compose"
                                                                                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                                                                                  'True)
                                                                                                                                                                                               (GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.S
                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                     ('Just
                                                                                                                                                                                                        "getCompose")
                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                     (f_agd4c (g_agd4d a_agd4e))))>_R) ; Sub (Sym (Data.Functor.Compose.Rep_Compose[0]
                                                                                                                                                                                                                                                       <k_agd5g>_N
                                                                                                                                                                                                                                                       <f_agd4c>_N
                                                                                                                                                                                                                                                       <k1_agd5i>_N
                                                                                                                                                                                                                                                       <g_agd4d>_N
                                                                                                                                                                                                                                                       <a_agd4e>_N))))) <x>_N)
                                      :: (forall x.
                                          Compose f_agd4c g_agd4d a_agd4e
                                          -> Compose f_agd4c g_agd4d a_agd4e :: *)
                                         ~R# (forall x.
                                              Compose f_agd4c g_agd4d a_agd4e
                                              -> GHC.Generics.Rep
                                                   (Compose f_agd4c g_agd4d a_agd4e) x :: *))
                              (Data.Functor.Compose.$fGenericCompose1
                                 @ k_agd5g @ f_agd4c @ k1_agd5i @ g_agd4d @ a_agd4e)
                              `cast` (forall (x :: <*>_N).
                                      <GHC.Generics.Rep (Compose f_agd4c g_agd4d a_agd4e) x>_R
                                      ->_R (Sub (Data.Functor.Compose.Rep_Compose[0]
                                                     <k_agd5g>_N
                                                     <f_agd4c>_N
                                                     <k1_agd5i>_N
                                                     <g_agd4d>_N
                                                     <a_agd4e>_N) ; (GHC.Generics.N:M1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.D>_P
                                                                         <'GHC.Generics.MetaData
                                                                            "Compose"
                                                                            "Data.Functor.Compose"
                                                                            "base"
                                                                            'True>_P
                                                                         <GHC.Generics.M1
                                                                            GHC.Generics.C
                                                                            ('GHC.Generics.MetaCons
                                                                               "Compose"
                                                                               'GHC.Generics.PrefixI
                                                                               'True)
                                                                            (GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('Just
                                                                                     "getCompose")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  (f_agd4c (g_agd4d a_agd4e))))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                          <*>_N
                                                                                                                          <GHC.Generics.C>_P
                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                             "Compose"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'True>_P
                                                                                                                          <GHC.Generics.M1
                                                                                                                             GHC.Generics.S
                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                ('Just
                                                                                                                                   "getCompose")
                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                             (GHC.Generics.K1
                                                                                                                                GHC.Generics.R
                                                                                                                                (f_agd4c (g_agd4d a_agd4e)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                      <*>_N
                                                                                                                                                                      <GHC.Generics.S>_P
                                                                                                                                                                      <'GHC.Generics.MetaSel
                                                                                                                                                                         ('Just
                                                                                                                                                                            "getCompose")
                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                                         'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                      <GHC.Generics.K1
                                                                                                                                                                         GHC.Generics.R
                                                                                                                                                                         (f_agd4c (g_agd4d a_agd4e))>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                                        <*>_N
                                                                                                                                                                                                                        <GHC.Generics.R>_P
                                                                                                                                                                                                                        <f_agd4c (g_agd4d a_agd4e)>_R
                                                                                                                                                                                                                        <x>_P ; Sym (Data.Functor.Compose.N:Compose[0]
                                                                                                                                                                                                                                         <k_agd5g>_N
                                                                                                                                                                                                                                         <k1_agd5i>_N
                                                                                                                                                                                                                                         <f_agd4c>_R
                                                                                                                                                                                                                                         <g_agd4d>_N
                                                                                                                                                                                                                                         <a_agd4e>_N))
                                      :: (forall x.
                                          GHC.Generics.Rep (Compose f_agd4c g_agd4d a_agd4e) x
                                          -> GHC.Generics.Rep
                                               (Compose f_agd4c g_agd4d a_agd4e) x :: *)
                                         ~R# (forall x.
                                              GHC.Generics.Rep (Compose f_agd4c g_agd4d a_agd4e) x
                                              -> Compose f_agd4c g_agd4d a_agd4e :: *))]
Data.Functor.Compose.$fGenericCompose
  = \ (@ k_XgdiR)
      (@ (f_XgdiT :: k_XgdiR -> *))
      (@ k1_XgdiV)
      (@ (g_XgdiX :: k1_XgdiV -> k_XgdiR))
      (@ (a_XgdiZ :: k1_XgdiV)) ->
      GHC.Generics.C:Generic
        @ (Compose f_XgdiT g_XgdiX a_XgdiZ)
        ((Data.Functor.Compose.$fGenericCompose2
            @ k_XgdiR @ f_XgdiT @ k1_XgdiV @ g_XgdiX @ a_XgdiZ)
         `cast` (forall (x :: <*>_N).
                 <Compose f_XgdiT g_XgdiX a_XgdiZ>_R
                 ->_R Data.Functor.Compose.N:Compose[0]
                          <k_XgdiR>_N
                          <k1_XgdiV>_N
                          <f_XgdiT>_R
                          <g_XgdiX>_N
                          <a_XgdiZ>_N ; (Sym (GHC.Generics.N:K1[0]
                                                  <*>_N
                                                  <GHC.Generics.R>_P
                                                  <f_XgdiT (g_XgdiX a_XgdiZ)>_R
                                                  <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                     <*>_N
                                                                     <GHC.Generics.S>_P
                                                                     <'GHC.Generics.MetaSel
                                                                        ('Just "getCompose")
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy>_P
                                                                     <GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (f_XgdiT (g_XgdiX a_XgdiZ))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                    <*>_N
                                                                                                                    <GHC.Generics.C>_P
                                                                                                                    <'GHC.Generics.MetaCons
                                                                                                                       "Compose"
                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                       'True>_P
                                                                                                                    <GHC.Generics.M1
                                                                                                                       GHC.Generics.S
                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                          ('Just
                                                                                                                             "getCompose")
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                       (GHC.Generics.K1
                                                                                                                          GHC.Generics.R
                                                                                                                          (f_XgdiT (g_XgdiX a_XgdiZ)))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                       <*>_N
                                                                                                                                                                       <GHC.Generics.D>_P
                                                                                                                                                                       <'GHC.Generics.MetaData
                                                                                                                                                                          "Compose"
                                                                                                                                                                          "Data.Functor.Compose"
                                                                                                                                                                          "base"
                                                                                                                                                                          'True>_P
                                                                                                                                                                       <GHC.Generics.M1
                                                                                                                                                                          GHC.Generics.C
                                                                                                                                                                          ('GHC.Generics.MetaCons
                                                                                                                                                                             "Compose"
                                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                                             'True)
                                                                                                                                                                          (GHC.Generics.M1
                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                ('Just
                                                                                                                                                                                   "getCompose")
                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                (f_XgdiT (g_XgdiX a_XgdiZ))))>_R) ; Sub (Sym (Data.Functor.Compose.Rep_Compose[0]
                                                                                                                                                                                                                                  <k_XgdiR>_N
                                                                                                                                                                                                                                  <f_XgdiT>_N
                                                                                                                                                                                                                                  <k1_XgdiV>_N
                                                                                                                                                                                                                                  <g_XgdiX>_N
                                                                                                                                                                                                                                  <a_XgdiZ>_N))))) <x>_N)
                 :: (forall x.
                     Compose f_XgdiT g_XgdiX a_XgdiZ
                     -> Compose f_XgdiT g_XgdiX a_XgdiZ :: *)
                    ~R# (forall x.
                         Compose f_XgdiT g_XgdiX a_XgdiZ
                         -> GHC.Generics.Rep (Compose f_XgdiT g_XgdiX a_XgdiZ) x :: *)))
        ((Data.Functor.Compose.$fGenericCompose1
            @ k_XgdiR @ f_XgdiT @ k1_XgdiV @ g_XgdiX @ a_XgdiZ)
         `cast` (forall (x :: <*>_N).
                 <GHC.Generics.Rep (Compose f_XgdiT g_XgdiX a_XgdiZ) x>_R
                 ->_R (Sub (Data.Functor.Compose.Rep_Compose[0]
                                <k_XgdiR>_N
                                <f_XgdiT>_N
                                <k1_XgdiV>_N
                                <g_XgdiX>_N
                                <a_XgdiZ>_N) ; (GHC.Generics.N:M1[0]
                                                    <*>_N
                                                    <GHC.Generics.D>_P
                                                    <'GHC.Generics.MetaData
                                                       "Compose"
                                                       "Data.Functor.Compose"
                                                       "base"
                                                       'True>_P
                                                    <GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "Compose" 'GHC.Generics.PrefixI 'True)
                                                       (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('Just "getCompose")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (f_XgdiT (g_XgdiX a_XgdiZ))))>_R ; (GHC.Generics.N:M1[0]
                                                                                                     <*>_N
                                                                                                     <GHC.Generics.C>_P
                                                                                                     <'GHC.Generics.MetaCons
                                                                                                        "Compose"
                                                                                                        'GHC.Generics.PrefixI
                                                                                                        'True>_P
                                                                                                     <GHC.Generics.M1
                                                                                                        GHC.Generics.S
                                                                                                        ('GHC.Generics.MetaSel
                                                                                                           ('Just
                                                                                                              "getCompose")
                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                        (GHC.Generics.K1
                                                                                                           GHC.Generics.R
                                                                                                           (f_XgdiT (g_XgdiX a_XgdiZ)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                 <*>_N
                                                                                                                                                 <GHC.Generics.S>_P
                                                                                                                                                 <'GHC.Generics.MetaSel
                                                                                                                                                    ('Just
                                                                                                                                                       "getCompose")
                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                    'GHC.Generics.DecidedLazy>_P
                                                                                                                                                 <GHC.Generics.K1
                                                                                                                                                    GHC.Generics.R
                                                                                                                                                    (f_XgdiT (g_XgdiX a_XgdiZ))>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                   <*>_N
                                                                                                                                                                                                   <GHC.Generics.R>_P
                                                                                                                                                                                                   <f_XgdiT (g_XgdiX a_XgdiZ)>_R
                                                                                                                                                                                                   <x>_P ; Sym (Data.Functor.Compose.N:Compose[0]
                                                                                                                                                                                                                    <k_XgdiR>_N
                                                                                                                                                                                                                    <k1_XgdiV>_N
                                                                                                                                                                                                                    <f_XgdiT>_R
                                                                                                                                                                                                                    <g_XgdiX>_N
                                                                                                                                                                                                                    <a_XgdiZ>_N))
                 :: (forall x.
                     GHC.Generics.Rep (Compose f_XgdiT g_XgdiX a_XgdiZ) x
                     -> GHC.Generics.Rep (Compose f_XgdiT g_XgdiX a_XgdiZ) x :: *)
                    ~R# (forall x.
                         GHC.Generics.Rep (Compose f_XgdiT g_XgdiX a_XgdiZ) x
                         -> Compose f_XgdiT g_XgdiX a_XgdiZ :: *)))

-- RHS size: {terms: 7, types: 16, coercions: 0, joins: 0/0}
Data.Functor.Compose.getCompose1
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Compose f g a -> Compose f g a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_agd5L)
                 (@ (f_agd5M :: k_agd5L -> *))
                 (@ k1_agd5N)
                 (@ (g_agd5O :: k1_agd5N -> k_agd5L))
                 (@ (a_agd5P :: k1_agd5N))
                 (ds_dgdvg [Occ=Once] :: Compose f_agd5M g_agd5O a_agd5P) ->
                 ds_dgdvg}]
Data.Functor.Compose.getCompose1
  = \ (@ k_agd5L)
      (@ (f_agd5M :: k_agd5L -> *))
      (@ k1_agd5N)
      (@ (g_agd5O :: k1_agd5N -> k_agd5L))
      (@ (a_agd5P :: k1_agd5N))
      (ds_dgdvg :: Compose f_agd5M g_agd5O a_agd5P) ->
      ds_dgdvg

-- RHS size: {terms: 1, types: 0, coercions: 28, joins: 0/0}
getCompose
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Compose f g a -> f (g a)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Functor.Compose.getCompose1
               `cast` (forall (k :: <*>_N) (f :: <k
                                                  -> *>_N) (k1 :: <*>_N) (g :: <k1
                                                                                -> k>_N) (a :: <k1>_N).
                       <Compose f g a>_R
                       ->_R Data.Functor.Compose.N:Compose[0]
                                <k>_N <k1>_N <f>_R <g>_N <a>_N
                       :: (forall k (f :: k -> *) k1 (g :: k1 -> k) (a :: k1).
                           Compose f g a -> Compose f g a :: *)
                          ~R# (forall k (f :: k -> *) k1 (g :: k1 -> k) (a :: k1).
                               Compose f g a -> f (g a) :: *))}]
getCompose
  = Data.Functor.Compose.getCompose1
    `cast` (forall (k :: <*>_N) (f :: <k
                                       -> *>_N) (k1 :: <*>_N) (g :: <k1 -> k>_N) (a :: <k1>_N).
            <Compose f g a>_R
            ->_R Data.Functor.Compose.N:Compose[0]
                     <k>_N <k1>_N <f>_R <g>_N <a>_N
            :: (forall k (f :: k -> *) k1 (g :: k1 -> k) (a :: k1).
                Compose f g a -> Compose f g a :: *)
               ~R# (forall k (f :: k -> *) k1 (g :: k1 -> k) (a :: k1).
                    Compose f g a -> f (g a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$cCompose1_rgdPU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$cCompose1_rgdPU = "getCompose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$cCompose2_rgdPV :: [Char]
[GblId]
$cCompose2_rgdPV = GHC.CString.unpackCString# $cCompose1_rgdPU

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$cCompose3_rgdPW :: [String]
[GblId, Str=m2, Unf=OtherCon []]
$cCompose3_rgdPW
  = GHC.Types.: @ String $cCompose2_rgdPV (GHC.Types.[] @ String)

Rec {
-- RHS size: {terms: 25, types: 24, coercions: 0, joins: 0/0}
go61_rgdPX :: [Data.Data.Constr] -> [Int] -> Data.Data.ConIndex
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []]
go61_rgdPX
  = \ (ds2_iaIB3 :: [Data.Data.Constr]) (_ys_iaIB4 :: [Int]) ->
      case ds2_iaIB3 of {
        [] -> GHC.List.badHead @ Int;
        : ipv_iaIB9 ipv1_iaIBa ->
          case _ys_iaIB4 of {
            [] -> GHC.List.badHead @ Int;
            : ipv2_iaIBg ipv3_iaIBh ->
              case ipv_iaIB9 of
              { Data.Data.Constr ds3_de7m3 ds4_de7m4 ds5_de7m5 ds6_de7m6
                                 ds7_de7m7 ->
              case GHC.Base.eqString
                     ds4_de7m4 Data.Functor.Compose.$fDataCompose6
              of {
                False -> go61_rgdPX ipv1_iaIBa ipv3_iaIBh;
                True -> ipv2_iaIBg
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$cCompose4_rgdPY :: Data.Data.ConstrRep
[GblId, Str=m1, Unf=OtherCon []]
$cCompose4_rgdPY = Data.Data.AlgConstr $cCompose5_rgdPZ

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose5 :: [Data.Data.Constr]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Functor.Compose.$fDataCompose5
  = GHC.Types.:
      @ Data.Data.Constr
      Data.Functor.Compose.$cCompose
      (GHC.Types.[] @ Data.Data.Constr)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose4 :: Data.Data.DataRep
[GblId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$fDataCompose4
  = Data.Data.AlgRep Data.Functor.Compose.$fDataCompose5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$tCompose :: Data.Data.DataType
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Functor.Compose.$tCompose
  = Data.Data.DataType
      Data.Functor.Compose.$fDataCompose6
      Data.Functor.Compose.$fDataCompose4

-- RHS size: {terms: 6, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$cCompose [Occ=LoopBreaker]
  :: Data.Data.Constr
[GblId, Str=m, Unf=OtherCon []]
Data.Functor.Compose.$cCompose
  = Data.Data.Constr
      $cCompose4_rgdPY
      Data.Functor.Compose.$fDataCompose6
      $cCompose3_rgdPW
      Data.Data.Prefix
      Data.Functor.Compose.$tCompose

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$cCompose5_rgdPZ :: Data.Data.ConIndex
[GblId]
$cCompose5_rgdPZ
  = go61_rgdPX
      Data.Functor.Compose.$fDataCompose5 Data.Data.mkConstr1
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Functor.Compose.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$trModule3
  = GHC.Types.TrNameS Data.Functor.Compose.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
Data.Functor.Compose.$trModule2 = "Data.Functor.Compose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$trModule1
  = GHC.Types.TrNameS Data.Functor.Compose.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Functor.Compose.$trModule
  = GHC.Types.Module
      Data.Functor.Compose.$trModule3 Data.Functor.Compose.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_rgdQ0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep_rgdQ0 = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep1_rgdQ1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep1_rgdQ1 = GHC.Types.KindRepFun $krep_rgdQ0 GHC.Types.krep$*

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep2_rgdQ2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep2_rgdQ2 = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rgdQ3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep3_rgdQ3 = GHC.Types.KindRepFun $krep2_rgdQ2 GHC.Types.krep$*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_rgdQ4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep4_rgdQ4 = GHC.Types.KindRepFun $krep_rgdQ0 $krep2_rgdQ2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_rgdQ5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep5_rgdQ5 = GHC.Types.KindRepFun $krep4_rgdQ4 $krep1_rgdQ1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose9 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Functor.Compose.$fDataCompose9
  = GHC.Types.KindRepFun $krep3_rgdQ3 $krep5_rgdQ5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep6_rgdQ6 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_rgdQ6 = GHC.Types.KindRepVar 3#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep7_rgdQ7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_rgdQ7 = GHC.Types.KindRepVar 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep8_rgdQ8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_rgdQ8 = GHC.Types.KindRepVar 4#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rgdQ9 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []]
$krep9_rgdQ9 = GHC.Types.KindRepApp $krep6_rgdQ6 $krep8_rgdQ8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_rgdQa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []]
$krep10_rgdQa = GHC.Types.KindRepApp $krep7_rgdQ7 $krep9_rgdQ9

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose10 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$fDataCompose10
  = GHC.Types.TrNameS Data.Functor.Compose.$fDataCompose7

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$tcCompose :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Functor.Compose.$tcCompose
  = GHC.Types.TyCon
      6729400645769595507##
      7487202375031942550##
      Data.Functor.Compose.$trModule
      Data.Functor.Compose.$fDataCompose10
      2#
      Data.Functor.Compose.$fDataCompose9

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep11_rgdQb :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep11_rgdQb
  = GHC.Types.:
      @ GHC.Types.KindRep $krep8_rgdQ8 (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep12_rgdQc :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep12_rgdQc
  = GHC.Types.: @ GHC.Types.KindRep $krep6_rgdQ6 $krep11_rgdQb

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep13_rgdQd :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep13_rgdQd
  = GHC.Types.: @ GHC.Types.KindRep $krep7_rgdQ7 $krep12_rgdQc

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep14_rgdQe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep14_rgdQe
  = GHC.Types.: @ GHC.Types.KindRep $krep_rgdQ0 $krep13_rgdQd

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_rgdQf :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep15_rgdQf
  = GHC.Types.: @ GHC.Types.KindRep $krep2_rgdQ2 $krep14_rgdQe

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_rgdQg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep16_rgdQg
  = GHC.Types.KindRepTyConApp
      Data.Functor.Compose.$tcCompose $krep15_rgdQf

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$tc'Compose1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Functor.Compose.$tc'Compose1
  = GHC.Types.KindRepFun $krep10_rgdQa $krep16_rgdQg

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$tc'Compose3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Functor.Compose.$tc'Compose3 = "'Compose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$tc'Compose2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Functor.Compose.$tc'Compose2
  = GHC.Types.TrNameS Data.Functor.Compose.$tc'Compose3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Functor.Compose.$tc'Compose :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Functor.Compose.$tc'Compose
  = GHC.Types.TyCon
      7236514282653524344##
      13791541438620948974##
      Data.Functor.Compose.$trModule
      Data.Functor.Compose.$tc'Compose2
      5#
      Data.Functor.Compose.$tc'Compose1

-- RHS size: {terms: 38, types: 130, coercions: 20, joins: 0/0}
Data.Functor.Compose.$w$cp1Data [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k1,
      Data.Typeable.Internal.Typeable k2) =>
     Data.Typeable.Internal.TypeRep (Compose f g a)
[GblId,
 Arity=5,
 Str=<S,U><S,U><S,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0] 230 0}]
Data.Functor.Compose.$w$cp1Data
  = \ (@ k_sgdJT)
      (@ (f_sgdJU :: k_sgdJT -> *))
      (@ k1_sgdJV)
      (@ (g_sgdJW :: k1_sgdJV -> k_sgdJT))
      (@ (a_sgdJX :: k1_sgdJV))
      (w_sgdJY :: Data.Typeable.Internal.Typeable a_sgdJX)
      (w1_sgdJZ :: Data.Typeable.Internal.Typeable f_sgdJU)
      (w2_sgdK0 :: Data.Typeable.Internal.Typeable g_sgdJW)
      (w3_sgdK1 :: Data.Typeable.Internal.Typeable k_sgdJT)
      (w4_sgdK2 :: Data.Typeable.Internal.Typeable k1_sgdJV) ->
      case Data.Typeable.Internal.$wmkTrCon
             @ ((k_sgdJT -> *) -> (k1_sgdJV -> k_sgdJT) -> k1_sgdJV -> *)
             @ Compose
             6729400645769595507##
             7487202375031942550##
             Data.Functor.Compose.$trModule
             Data.Functor.Compose.$fDataCompose10
             2#
             Data.Functor.Compose.$fDataCompose9
             (GHC.Types.:
                @ Data.Typeable.Internal.SomeTypeRep
                (Data.Typeable.Internal.SomeTypeRep
                   @ *
                   @ k_sgdJT
                   (w3_sgdK1
                    `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <k_sgdJT>_N
                            :: (Data.Typeable.Internal.Typeable k_sgdJT :: Constraint)
                               ~R# (Data.Typeable.Internal.TypeRep k_sgdJT :: *))))
                (GHC.Types.:
                   @ Data.Typeable.Internal.SomeTypeRep
                   (Data.Typeable.Internal.SomeTypeRep
                      @ *
                      @ k1_sgdJV
                      (w4_sgdK2
                       `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <k1_sgdJV>_N
                               :: (Data.Typeable.Internal.Typeable k1_sgdJV :: Constraint)
                                  ~R# (Data.Typeable.Internal.TypeRep k1_sgdJV :: *))))
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)))
      of
      { (# ww8_idPJm, ww9_idPJn, ww10_idPJo, ww11_idPJp, ww12_idPJq #) ->
      Data.Typeable.Internal.mkTrApp
        @ k1_sgdJV
        @ *
        @ (Compose f_sgdJU g_sgdJW)
        @ a_sgdJX
        (Data.Typeable.Internal.mkTrApp
           @ (k1_sgdJV -> k_sgdJT)
           @ (k1_sgdJV -> *)
           @ (Compose f_sgdJU)
           @ g_sgdJW
           (Data.Typeable.Internal.mkTrApp
              @ (k_sgdJT -> *)
              @ ((k1_sgdJV -> k_sgdJT) -> k1_sgdJV -> *)
              @ Compose
              @ f_sgdJU
              (Data.Typeable.Internal.TrTyCon
                 @ ((k_sgdJT -> *) -> (k1_sgdJV -> k_sgdJT) -> k1_sgdJV -> *)
                 @ Compose
                 ww8_idPJm
                 ww9_idPJn
                 ww10_idPJo
                 ww11_idPJp
                 ww12_idPJq)
              (w1_sgdJZ
               `cast` (Data.Typeable.Internal.N:Typeable[0] <k_sgdJT
                                                             -> *>_N <f_sgdJU>_N
                       :: (Data.Typeable.Internal.Typeable f_sgdJU :: Constraint)
                          ~R# (Data.Typeable.Internal.TypeRep f_sgdJU :: *))))
           (w2_sgdK0
            `cast` (Data.Typeable.Internal.N:Typeable[0] <k1_sgdJV
                                                          -> k_sgdJT>_N <g_sgdJW>_N
                    :: (Data.Typeable.Internal.Typeable g_sgdJW :: Constraint)
                       ~R# (Data.Typeable.Internal.TypeRep g_sgdJW :: *))))
        (w_sgdJY
         `cast` (Data.Typeable.Internal.N:Typeable[0] <k1_sgdJV>_N <a_sgdJX>_N
                 :: (Data.Typeable.Internal.Typeable a_sgdJX :: Constraint)
                    ~R# (Data.Typeable.Internal.TypeRep a_sgdJX :: *)))
      }

-- RHS size: {terms: 17, types: 39, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose8 [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k1,
      Data.Typeable.Internal.Typeable k2, Data (f (g a))) =>
     Data.Typeable.Internal.TypeRep (Compose f g a)
[GblId,
 Arity=6,
 Str=<S,U><S,U><S,U><L,U><L,U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sgdJT)
                 (@ (f_sgdJU :: k_sgdJT -> *))
                 (@ k1_sgdJV)
                 (@ (g_sgdJW :: k1_sgdJV -> k_sgdJT))
                 (@ (a_sgdJX :: k1_sgdJV))
                 (w_sgdJY [Occ=Once] :: Data.Typeable.Internal.Typeable a_sgdJX)
                 (w1_sgdJZ [Occ=Once] :: Data.Typeable.Internal.Typeable f_sgdJU)
                 (w2_sgdK0 [Occ=Once] :: Data.Typeable.Internal.Typeable g_sgdJW)
                 (w3_sgdK1 [Occ=Once] :: Data.Typeable.Internal.Typeable k_sgdJT)
                 (w4_sgdK2 [Occ=Once] :: Data.Typeable.Internal.Typeable k1_sgdJV)
                 _ [Occ=Dead] ->
                 Data.Functor.Compose.$w$cp1Data
                   @ k_sgdJT
                   @ f_sgdJU
                   @ k1_sgdJV
                   @ g_sgdJW
                   @ a_sgdJX
                   w_sgdJY
                   w1_sgdJZ
                   w2_sgdK0
                   w3_sgdK1
                   w4_sgdK2}]
Data.Functor.Compose.$fDataCompose8
  = \ (@ k_sgdJT)
      (@ (f_sgdJU :: k_sgdJT -> *))
      (@ k1_sgdJV)
      (@ (g_sgdJW :: k1_sgdJV -> k_sgdJT))
      (@ (a_sgdJX :: k1_sgdJV))
      (w_sgdJY :: Data.Typeable.Internal.Typeable a_sgdJX)
      (w1_sgdJZ :: Data.Typeable.Internal.Typeable f_sgdJU)
      (w2_sgdK0 :: Data.Typeable.Internal.Typeable g_sgdJW)
      (w3_sgdK1 :: Data.Typeable.Internal.Typeable k_sgdJT)
      (w4_sgdK2 :: Data.Typeable.Internal.Typeable k1_sgdJV)
      _ [Occ=Dead] ->
      Data.Functor.Compose.$w$cp1Data
        @ k_sgdJT
        @ f_sgdJU
        @ k1_sgdJV
        @ g_sgdJW
        @ a_sgdJX
        w_sgdJY
        w1_sgdJZ
        w2_sgdK0
        w3_sgdK1
        w4_sgdK2

-- RHS size: {terms: 7, types: 13, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose2
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     f (g a) -> f (g a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_Xgdgt)
                 (@ (f_Xgdgv :: k_Xgdgt -> *))
                 (@ k1_Xgdgx)
                 (@ (g_Xgdgz :: k1_Xgdgx -> k_Xgdgt))
                 (@ (a_XgdgB :: k1_Xgdgx))
                 (v_X5S [Occ=Once] :: f_Xgdgv (g_Xgdgz a_XgdgB)) ->
                 v_X5S}]
Data.Functor.Compose.$fDataCompose2
  = \ (@ k_Xgdgt)
      (@ (f_Xgdgv :: k_Xgdgt -> *))
      (@ k1_Xgdgx)
      (@ (g_Xgdgz :: k1_Xgdgx -> k_Xgdgt))
      (@ (a_XgdgB :: k1_Xgdgx))
      (v_X5S :: f_Xgdgv (g_Xgdgz a_XgdgB)) ->
      v_X5S

-- RHS size: {terms: 8, types: 25, coercions: 11, joins: 0/0}
Data.Functor.Compose.$fDataCompose1
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     (f (g a) -> Compose f g a, Bool)
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Functor.Compose.$fDataCompose1
  = \ (@ k_Xgdgt)
      (@ (f_Xgdgv :: k_Xgdgt -> *))
      (@ k1_Xgdgx)
      (@ (g_Xgdgz :: k1_Xgdgx -> k_Xgdgt))
      (@ (a_XgdgB :: k1_Xgdgx)) ->
      ((Data.Functor.Compose.$fDataCompose2
          @ k_Xgdgt @ f_Xgdgv @ k1_Xgdgx @ g_Xgdgz @ a_XgdgB)
       `cast` (<f_Xgdgv (g_Xgdgz a_XgdgB)>_R
               ->_R Sym (Data.Functor.Compose.N:Compose[0]
                             <k_Xgdgt>_N <k1_Xgdgx>_N <f_Xgdgv>_R <g_Xgdgz>_N <a_XgdgB>_N)
               :: (f_Xgdgv (g_Xgdgz a_XgdgB) -> f_Xgdgv (g_Xgdgz a_XgdgB) :: *)
                  ~R# (f_Xgdgv (g_Xgdgz a_XgdgB)
                       -> Compose f_Xgdgv g_Xgdgz a_XgdgB :: *)),
       GHC.Types.False)

-- RHS size: {terms: 61, types: 228, coercions: 12, joins: 0/3}
Data.Functor.Compose.$w$cgmapMp [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Data (f (g a)) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d)
     -> Compose f g a -> m (Compose f g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 90 60 0] 510 0}]
Data.Functor.Compose.$w$cgmapMp
  = \ (@ k_sgdK5)
      (@ (f_sgdK6 :: k_sgdK5 -> *))
      (@ k1_sgdK7)
      (@ (g_sgdK8 :: k1_sgdK7 -> k_sgdK5))
      (@ (a_sgdK9 :: k1_sgdK7))
      (w_sgdKf :: Data (f_sgdK6 (g_sgdK8 a_sgdK9)))
      (@ (m_sgdKg :: * -> *))
      (w1_sgdKh :: GHC.Base.MonadPlus m_sgdKg)
      (w2_sgdKi :: forall d. Data d => d -> m_sgdKg d)
      (w3_sgdKj :: Compose f_sgdK6 g_sgdK8 a_sgdK9) ->
      let {
        lvl8_sgdBW :: m_sgdKg (Compose f_sgdK6 g_sgdK8 a_sgdK9)
        [LclId]
        lvl8_sgdBW
          = GHC.Base.mzero
              @ m_sgdKg w1_sgdKh @ (Compose f_sgdK6 g_sgdK8 a_sgdK9) } in
      let {
        $dMonad_sgdAc [Dmd=<S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)>]
          :: Monad m_sgdKg
        [LclId]
        $dMonad_sgdAc = GHC.Base.$p2MonadPlus @ m_sgdKg w1_sgdKh } in
      >>=
        @ m_sgdKg
        $dMonad_sgdAc
        @ (Compose f_sgdK6 g_sgdK8 a_sgdK9, Bool)
        @ (Compose f_sgdK6 g_sgdK8 a_sgdK9)
        (let {
           lvl9_sgdBV :: m_sgdKg (f_sgdK6 (g_sgdK8 a_sgdK9))
           [LclId]
           lvl9_sgdBV
             = w2_sgdKi
                 @ (f_sgdK6 (g_sgdK8 a_sgdK9))
                 w_sgdKf
                 (w3_sgdKj
                  `cast` (Data.Functor.Compose.N:Compose[0]
                              <k_sgdK5>_N <k1_sgdK7>_N <f_sgdK6>_R <g_sgdK8>_N <a_sgdK9>_N
                          :: (Compose f_sgdK6 g_sgdK8 a_sgdK9 :: *)
                             ~R# (f_sgdK6 (g_sgdK8 a_sgdK9) :: *))) } in
         >>=
           @ m_sgdKg
           $dMonad_sgdAc
           @ (f_sgdK6 (g_sgdK8 a_sgdK9) -> Compose f_sgdK6 g_sgdK8 a_sgdK9,
              Bool)
           @ (Compose f_sgdK6 g_sgdK8 a_sgdK9, Bool)
           (return
              @ m_sgdKg
              $dMonad_sgdAc
              @ (f_sgdK6 (g_sgdK8 a_sgdK9) -> Compose f_sgdK6 g_sgdK8 a_sgdK9,
                 Bool)
              (Data.Functor.Compose.$fDataCompose1
                 @ k_sgdK5 @ f_sgdK6 @ k1_sgdK7 @ g_sgdK8 @ a_sgdK9))
           (\ (ds1_de7oD
                 :: (f_sgdK6 (g_sgdK8 a_sgdK9) -> Compose f_sgdK6 g_sgdK8 a_sgdK9,
                     Bool)) ->
              case ds1_de7oD of { (h_ae1TA, b1_ae1TB) ->
              GHC.Base.mplus
                @ m_sgdKg
                w1_sgdKh
                @ (Compose f_sgdK6 g_sgdK8 a_sgdK9, Bool)
                (>>=
                   @ m_sgdKg
                   $dMonad_sgdAc
                   @ (f_sgdK6 (g_sgdK8 a_sgdK9))
                   @ (Compose f_sgdK6 g_sgdK8 a_sgdK9, Bool)
                   lvl9_sgdBV
                   (\ (y'_ae1TC :: f_sgdK6 (g_sgdK8 a_sgdK9)) ->
                      return
                        @ m_sgdKg
                        $dMonad_sgdAc
                        @ (Compose f_sgdK6 g_sgdK8 a_sgdK9, Bool)
                        (h_ae1TA y'_ae1TC, GHC.Types.True)))
                (return
                   @ m_sgdKg
                   $dMonad_sgdAc
                   @ (Compose f_sgdK6 g_sgdK8 a_sgdK9, Bool)
                   (h_ae1TA
                      (w3_sgdKj
                       `cast` (Data.Functor.Compose.N:Compose[0]
                                   <k_sgdK5>_N <k1_sgdK7>_N <f_sgdK6>_R <g_sgdK8>_N <a_sgdK9>_N
                               :: (Compose f_sgdK6 g_sgdK8 a_sgdK9 :: *)
                                  ~R# (f_sgdK6 (g_sgdK8 a_sgdK9) :: *))),
                    b1_ae1TB))
              }))
        (\ (ds_de7oa :: (Compose f_sgdK6 g_sgdK8 a_sgdK9, Bool)) ->
           case ds_de7oa of { (x'_ae1TD, b_ae1TE) ->
           case b_ae1TE of {
             False -> lvl8_sgdBW;
             True ->
               return
                 @ m_sgdKg
                 $dMonad_sgdAc
                 @ (Compose f_sgdK6 g_sgdK8 a_sgdK9)
                 x'_ae1TD
           }
           })

-- RHS size: {terms: 20, types: 59, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose_$cgmapMp [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k1,
      Data.Typeable.Internal.Typeable k2, Data (f (g a))) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d)
     -> Compose f g a -> m (Compose f g a)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,A><L,U><S(LS(LC(C(S))LLL)LL),U(A,U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sgdK5)
                 (@ (f_sgdK6 :: k_sgdK5 -> *))
                 (@ k1_sgdK7)
                 (@ (g_sgdK8 :: k1_sgdK7 -> k_sgdK5))
                 (@ (a_sgdK9 :: k1_sgdK7))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (w5_sgdKf [Occ=Once] :: Data (f_sgdK6 (g_sgdK8 a_sgdK9)))
                 (@ (m_sgdKg :: * -> *))
                 (w6_sgdKh [Occ=Once] :: GHC.Base.MonadPlus m_sgdKg)
                 (w7_sgdKi [Occ=Once] :: forall d. Data d => d -> m_sgdKg d)
                 (w8_sgdKj [Occ=Once] :: Compose f_sgdK6 g_sgdK8 a_sgdK9) ->
                 Data.Functor.Compose.$w$cgmapMp
                   @ k_sgdK5
                   @ f_sgdK6
                   @ k1_sgdK7
                   @ g_sgdK8
                   @ a_sgdK9
                   w5_sgdKf
                   @ m_sgdKg
                   w6_sgdKh
                   w7_sgdKi
                   w8_sgdKj}]
Data.Functor.Compose.$fDataCompose_$cgmapMp
  = \ (@ k_sgdK5)
      (@ (f_sgdK6 :: k_sgdK5 -> *))
      (@ k1_sgdK7)
      (@ (g_sgdK8 :: k1_sgdK7 -> k_sgdK5))
      (@ (a_sgdK9 :: k1_sgdK7))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (w5_sgdKf :: Data (f_sgdK6 (g_sgdK8 a_sgdK9)))
      (@ (m_sgdKg :: * -> *))
      (w6_sgdKh :: GHC.Base.MonadPlus m_sgdKg)
      (w7_sgdKi :: forall d. Data d => d -> m_sgdKg d)
      (w8_sgdKj :: Compose f_sgdK6 g_sgdK8 a_sgdK9) ->
      Data.Functor.Compose.$w$cgmapMp
        @ k_sgdK5
        @ f_sgdK6
        @ k1_sgdK7
        @ g_sgdK8
        @ a_sgdK9
        w5_sgdKf
        @ m_sgdKg
        w6_sgdKh
        w7_sgdKi
        w8_sgdKj

-- RHS size: {terms: 28, types: 100, coercions: 17, joins: 0/1}
Data.Functor.Compose.$w$cgmapM [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Data (f (g a)) =>
     forall (m :: * -> *).
     Monad m =>
     (forall d. Data d => d -> m d)
     -> Compose f g a -> m (Compose f g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 120 60 0] 220 0}]
Data.Functor.Compose.$w$cgmapM
  = \ (@ k_sgdKl)
      (@ (f_sgdKm :: k_sgdKl -> *))
      (@ k1_sgdKn)
      (@ (g_sgdKo :: k1_sgdKn -> k_sgdKl))
      (@ (a_sgdKp :: k1_sgdKn))
      (w_sgdKv :: Data (f_sgdKm (g_sgdKo a_sgdKp)))
      (@ (m_sgdKw :: * -> *))
      (w1_sgdKx :: Monad m_sgdKw)
      (w2_sgdKy :: forall d. Data d => d -> m_sgdKw d)
      (w3_sgdKz :: Compose f_sgdKm g_sgdKo a_sgdKp) ->
      let {
        lvl8_sgdBY :: m_sgdKw (f_sgdKm (g_sgdKo a_sgdKp))
        [LclId]
        lvl8_sgdBY
          = w2_sgdKy
              @ (f_sgdKm (g_sgdKo a_sgdKp))
              w_sgdKv
              (w3_sgdKz
               `cast` (Data.Functor.Compose.N:Compose[0]
                           <k_sgdKl>_N <k1_sgdKn>_N <f_sgdKm>_R <g_sgdKo>_N <a_sgdKp>_N
                       :: (Compose f_sgdKm g_sgdKo a_sgdKp :: *)
                          ~R# (f_sgdKm (g_sgdKo a_sgdKp) :: *))) } in
      >>=
        @ m_sgdKw
        w1_sgdKx
        @ (f_sgdKm (g_sgdKo a_sgdKp) -> Compose f_sgdKm g_sgdKo a_sgdKp)
        @ (Compose f_sgdKm g_sgdKo a_sgdKp)
        (return
           @ m_sgdKw
           w1_sgdKx
           @ (f_sgdKm (g_sgdKo a_sgdKp) -> Compose f_sgdKm g_sgdKo a_sgdKp)
           ((Data.Functor.Compose.$fDataCompose2
               @ k_sgdKl @ f_sgdKm @ k1_sgdKn @ g_sgdKo @ a_sgdKp)
            `cast` (<f_sgdKm (g_sgdKo a_sgdKp)>_R
                    ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                  <k_sgdKl>_N <k1_sgdKn>_N <f_sgdKm>_R <g_sgdKo>_N <a_sgdKp>_N)
                    :: (f_sgdKm (g_sgdKo a_sgdKp) -> f_sgdKm (g_sgdKo a_sgdKp) :: *)
                       ~R# (f_sgdKm (g_sgdKo a_sgdKp)
                            -> Compose f_sgdKm g_sgdKo a_sgdKp :: *))))
        (\ (c'_ae1To
              :: f_sgdKm (g_sgdKo a_sgdKp) -> Compose f_sgdKm g_sgdKo a_sgdKp) ->
           >>=
             @ m_sgdKw
             w1_sgdKx
             @ (f_sgdKm (g_sgdKo a_sgdKp))
             @ (Compose f_sgdKm g_sgdKo a_sgdKp)
             lvl8_sgdBY
             (\ (x'_ae1Tp :: f_sgdKm (g_sgdKo a_sgdKp)) ->
                return
                  @ m_sgdKw
                  w1_sgdKx
                  @ (Compose f_sgdKm g_sgdKo a_sgdKp)
                  (c'_ae1To x'_ae1Tp)))

-- RHS size: {terms: 20, types: 59, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose_$cgmapM [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k1,
      Data.Typeable.Internal.Typeable k2, Data (f (g a))) =>
     forall (m :: * -> *).
     Monad m =>
     (forall d. Data d => d -> m d)
     -> Compose f g a -> m (Compose f g a)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,A><L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sgdKl)
                 (@ (f_sgdKm :: k_sgdKl -> *))
                 (@ k1_sgdKn)
                 (@ (g_sgdKo :: k1_sgdKn -> k_sgdKl))
                 (@ (a_sgdKp :: k1_sgdKn))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (w5_sgdKv [Occ=Once] :: Data (f_sgdKm (g_sgdKo a_sgdKp)))
                 (@ (m_sgdKw :: * -> *))
                 (w6_sgdKx [Occ=Once] :: Monad m_sgdKw)
                 (w7_sgdKy [Occ=Once] :: forall d. Data d => d -> m_sgdKw d)
                 (w8_sgdKz [Occ=Once] :: Compose f_sgdKm g_sgdKo a_sgdKp) ->
                 Data.Functor.Compose.$w$cgmapM
                   @ k_sgdKl
                   @ f_sgdKm
                   @ k1_sgdKn
                   @ g_sgdKo
                   @ a_sgdKp
                   w5_sgdKv
                   @ m_sgdKw
                   w6_sgdKx
                   w7_sgdKy
                   w8_sgdKz}]
Data.Functor.Compose.$fDataCompose_$cgmapM
  = \ (@ k_sgdKl)
      (@ (f_sgdKm :: k_sgdKl -> *))
      (@ k1_sgdKn)
      (@ (g_sgdKo :: k1_sgdKn -> k_sgdKl))
      (@ (a_sgdKp :: k1_sgdKn))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (w5_sgdKv :: Data (f_sgdKm (g_sgdKo a_sgdKp)))
      (@ (m_sgdKw :: * -> *))
      (w6_sgdKx :: Monad m_sgdKw)
      (w7_sgdKy :: forall d. Data d => d -> m_sgdKw d)
      (w8_sgdKz :: Compose f_sgdKm g_sgdKo a_sgdKp) ->
      Data.Functor.Compose.$w$cgmapM
        @ k_sgdKl
        @ f_sgdKm
        @ k1_sgdKn
        @ g_sgdKo
        @ a_sgdKp
        w5_sgdKv
        @ m_sgdKw
        w6_sgdKx
        w7_sgdKy
        w8_sgdKz

-- RHS size: {terms: 71, types: 245, coercions: 18, joins: 0/3}
Data.Functor.Compose.$w$cgmapMo [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Data (f (g a)) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d)
     -> Compose f g a -> m (Compose f g a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 90 60 0] 590 0}]
Data.Functor.Compose.$w$cgmapMo
  = \ (@ k_sgdKB)
      (@ (f_sgdKC :: k_sgdKB -> *))
      (@ k1_sgdKD)
      (@ (g_sgdKE :: k1_sgdKD -> k_sgdKB))
      (@ (a_sgdKF :: k1_sgdKD))
      (w_sgdKL :: Data (f_sgdKC (g_sgdKE a_sgdKF)))
      (@ (m_sgdKM :: * -> *))
      (w1_sgdKN :: GHC.Base.MonadPlus m_sgdKM)
      (w2_sgdKO :: forall d. Data d => d -> m_sgdKM d)
      (w3_sgdKP :: Compose f_sgdKC g_sgdKE a_sgdKF) ->
      let {
        lvl8_sgdC3 :: m_sgdKM (Compose f_sgdKC g_sgdKE a_sgdKF)
        [LclId]
        lvl8_sgdC3
          = GHC.Base.mzero
              @ m_sgdKM w1_sgdKN @ (Compose f_sgdKC g_sgdKE a_sgdKF) } in
      let {
        $dMonad_sgdAa [Dmd=<S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)>]
          :: Monad m_sgdKM
        [LclId]
        $dMonad_sgdAa = GHC.Base.$p2MonadPlus @ m_sgdKM w1_sgdKN } in
      >>=
        @ m_sgdKM
        $dMonad_sgdAa
        @ (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)
        @ (Compose f_sgdKC g_sgdKE a_sgdKF)
        (let {
           lvl9_sgdC2 :: m_sgdKM (f_sgdKC (g_sgdKE a_sgdKF))
           [LclId]
           lvl9_sgdC2
             = w2_sgdKO
                 @ (f_sgdKC (g_sgdKE a_sgdKF))
                 w_sgdKL
                 (w3_sgdKP
                  `cast` (Data.Functor.Compose.N:Compose[0]
                              <k_sgdKB>_N <k1_sgdKD>_N <f_sgdKC>_R <g_sgdKE>_N <a_sgdKF>_N
                          :: (Compose f_sgdKC g_sgdKE a_sgdKF :: *)
                             ~R# (f_sgdKC (g_sgdKE a_sgdKF) :: *))) } in
         >>=
           @ m_sgdKM
           $dMonad_sgdAa
           @ (f_sgdKC (g_sgdKE a_sgdKF) -> Compose f_sgdKC g_sgdKE a_sgdKF,
              Bool)
           @ (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)
           (return
              @ m_sgdKM
              $dMonad_sgdAa
              @ (f_sgdKC (g_sgdKE a_sgdKF) -> Compose f_sgdKC g_sgdKE a_sgdKF,
                 Bool)
              (Data.Functor.Compose.$fDataCompose1
                 @ k_sgdKB @ f_sgdKC @ k1_sgdKD @ g_sgdKE @ a_sgdKF))
           (\ (ds1_de7pD
                 :: (f_sgdKC (g_sgdKE a_sgdKF) -> Compose f_sgdKC g_sgdKE a_sgdKF,
                     Bool)) ->
              case ds1_de7pD of { (h_ae1TP, b1_ae1TQ) ->
              case b1_ae1TQ of {
                False ->
                  GHC.Base.mplus
                    @ m_sgdKM
                    w1_sgdKN
                    @ (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)
                    (>>=
                       @ m_sgdKM
                       $dMonad_sgdAa
                       @ (f_sgdKC (g_sgdKE a_sgdKF))
                       @ (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)
                       lvl9_sgdC2
                       (\ (y'_ae1TR :: f_sgdKC (g_sgdKE a_sgdKF)) ->
                          return
                            @ m_sgdKM
                            $dMonad_sgdAa
                            @ (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)
                            (h_ae1TP y'_ae1TR, GHC.Types.True)))
                    (return
                       @ m_sgdKM
                       $dMonad_sgdAa
                       @ (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)
                       (h_ae1TP
                          (w3_sgdKP
                           `cast` (Data.Functor.Compose.N:Compose[0]
                                       <k_sgdKB>_N <k1_sgdKD>_N <f_sgdKC>_R <g_sgdKE>_N <a_sgdKF>_N
                                   :: (Compose f_sgdKC g_sgdKE a_sgdKF :: *)
                                      ~R# (f_sgdKC (g_sgdKE a_sgdKF) :: *))),
                        GHC.Types.False));
                True ->
                  return
                    @ m_sgdKM
                    $dMonad_sgdAa
                    @ (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)
                    (h_ae1TP
                       (w3_sgdKP
                        `cast` (Data.Functor.Compose.N:Compose[0]
                                    <k_sgdKB>_N <k1_sgdKD>_N <f_sgdKC>_R <g_sgdKE>_N <a_sgdKF>_N
                                :: (Compose f_sgdKC g_sgdKE a_sgdKF :: *)
                                   ~R# (f_sgdKC (g_sgdKE a_sgdKF) :: *))),
                     GHC.Types.True)
              }
              }))
        (\ (ds_de7pa :: (Compose f_sgdKC g_sgdKE a_sgdKF, Bool)) ->
           case ds_de7pa of { (x'_ae1TS, b_ae1TT) ->
           case b_ae1TT of {
             False -> lvl8_sgdC3;
             True ->
               return
                 @ m_sgdKM
                 $dMonad_sgdAa
                 @ (Compose f_sgdKC g_sgdKE a_sgdKF)
                 x'_ae1TS
           }
           })

-- RHS size: {terms: 20, types: 59, coercions: 0, joins: 0/0}
Data.Functor.Compose.$fDataCompose_$cgmapMo [InlPrag=NOUSERINLINE[0]]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k1,
      Data.Typeable.Internal.Typeable k2, Data (f (g a))) =>
     forall (m :: * -> *).
     GHC.Base.MonadPlus m =>
     (forall d. Data d => d -> m d)
     -> Compose f g a -> m (Compose f g a)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A><L,A><L,A><L,U><S(LS(LC(C(S))LLL)LL),U(A,U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_sgdKB)
                 (@ (f_sgdKC :: k_sgdKB -> *))
                 (@ k1_sgdKD)
                 (@ (g_sgdKE :: k1_sgdKD -> k_sgdKB))
                 (@ (a_sgdKF :: k1_sgdKD))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (w5_sgdKL [Occ=Once] :: Data (f_sgdKC (g_sgdKE a_sgdKF)))
                 (@ (m_sgdKM :: * -> *))
                 (w6_sgdKN [Occ=Once] :: GHC.Base.MonadPlus m_sgdKM)
                 (w7_sgdKO [Occ=Once] :: forall d. Data d => d -> m_sgdKM d)
                 (w8_sgdKP [Occ=Once] :: Compose f_sgdKC g_sgdKE a_sgdKF) ->
                 Data.Functor.Compose.$w$cgmapMo
                   @ k_sgdKB
                   @ f_sgdKC
                   @ k1_sgdKD
                   @ g_sgdKE
                   @ a_sgdKF
                   w5_sgdKL
                   @ m_sgdKM
                   w6_sgdKN
                   w7_sgdKO
                   w8_sgdKP}]
Data.Functor.Compose.$fDataCompose_$cgmapMo
  = \ (@ k_sgdKB)
      (@ (f_sgdKC :: k_sgdKB -> *))
      (@ k1_sgdKD)
      (@ (g_sgdKE :: k1_sgdKD -> k_sgdKB))
      (@ (a_sgdKF :: k1_sgdKD))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (w5_sgdKL :: Data (f_sgdKC (g_sgdKE a_sgdKF)))
      (@ (m_sgdKM :: * -> *))
      (w6_sgdKN :: GHC.Base.MonadPlus m_sgdKM)
      (w7_sgdKO :: forall d. Data d => d -> m_sgdKM d)
      (w8_sgdKP :: Compose f_sgdKC g_sgdKE a_sgdKF) ->
      Data.Functor.Compose.$w$cgmapMo
        @ k_sgdKB
        @ f_sgdKC
        @ k1_sgdKD
        @ g_sgdKE
        @ a_sgdKF
        w5_sgdKL
        @ m_sgdKM
        w6_sgdKN
        w7_sgdKO
        w8_sgdKP

-- RHS size: {terms: 7, types: 16, coercions: 0, joins: 0/0}
lvl4_rgdQh
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Compose f g a -> Data.Data.Constr
[GblId, Arity=1, Str=<L,A>m, Unf=OtherCon []]
lvl4_rgdQh
  = \ (@ k_Xgdgk)
      (@ (f_Xgdgm :: k_Xgdgk -> *))
      (@ k1_Xgdgo)
      (@ (g_Xgdgq :: k1_Xgdgo -> k_Xgdgk))
      (@ (a_Xgdgs :: k1_Xgdgo))
      _ [Occ=Dead] ->
      Data.Functor.Compose.$cCompose

-- RHS size: {terms: 7, types: 16, coercions: 0, joins: 0/0}
lvl5_rgdQi
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     Compose f g a -> Data.Data.DataType
[GblId, Arity=1, Str=<L,A>m, Unf=OtherCon []]
lvl5_rgdQi
  = \ (@ k_Xgdgk)
      (@ (f_Xgdgm :: k_Xgdgk -> *))
      (@ k1_Xgdgo)
      (@ (g_Xgdgq :: k1_Xgdgo -> k_Xgdgk))
      (@ (a_Xgdgs :: k1_Xgdgo))
      _ [Occ=Dead] ->
      Data.Functor.Compose.$tCompose

-- RHS size: {terms: 10, types: 38, coercions: 0, joins: 0/0}
lvl6_rgdQj
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2) (t :: *
                                                                 -> *) (c :: * -> *).
     Data.Typeable.Internal.Typeable t =>
     (forall d. Data d => c (t d)) -> Maybe (c (Compose f g a))
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []]
lvl6_rgdQj
  = \ (@ k_Xgdgk)
      (@ (f_Xgdgm :: k_Xgdgk -> *))
      (@ k1_Xgdgo)
      (@ (g_Xgdgq :: k1_Xgdgo -> k_Xgdgk))
      (@ (a_Xgdgs :: k1_Xgdgo))
      (@ (t_agdbD :: * -> *))
      (@ (c_agdbE :: * -> *))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Base.Nothing @ (c_agdbE (Compose f_Xgdgm g_Xgdgq a_Xgdgs))

-- RHS size: {terms: 10, types: 47, coercions: 0, joins: 0/0}
lvl7_rgdQk
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2) (t :: *
                                                                 -> * -> *) (c :: * -> *).
     Data.Typeable.Internal.Typeable t =>
     (forall d e. (Data d, Data e) => c (t d e))
     -> Maybe (c (Compose f g a))
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []]
lvl7_rgdQk
  = \ (@ k_Xgdgk)
      (@ (f_Xgdgm :: k_Xgdgk -> *))
      (@ k1_Xgdgo)
      (@ (g_Xgdgq :: k1_Xgdgo -> k_Xgdgk))
      (@ (a_Xgdgs :: k1_Xgdgo))
      (@ (t_agdbW :: * -> * -> *))
      (@ (c_agdbX :: * -> *))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Base.Nothing @ (c_agdbX (Compose f_Xgdgm g_Xgdgq a_Xgdgs))

-- RHS size: {terms: 116, types: 336, coercions: 89, joins: 0/0}
Data.Functor.Compose.$fDataCompose [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k1 (f :: k1 -> *) k2 (g :: k2 -> k1) (a :: k2).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable f,
      Data.Typeable.Internal.Typeable g,
      Data.Typeable.Internal.Typeable k1,
      Data.Typeable.Internal.Typeable k2, Data (f (g a))) =>
     Data (Compose f g a)
[GblId[DFunId],
 Arity=6,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=DFun: \ (@ k_agd5g)
             (@ (f_agd4c :: k_agd5g -> *))
             (@ k1_agd5i)
             (@ (g_agd4d :: k1_agd5i -> k_agd5g))
             (@ (a_agd4e :: k1_agd5i))
             (v_X4E :: Data.Typeable.Internal.Typeable a_agd4e)
             (v1_X4b :: Data.Typeable.Internal.Typeable f_agd4c)
             (v2_B3 :: Data.Typeable.Internal.Typeable g_agd4d)
             (v3_B4 :: Data.Typeable.Internal.Typeable k_agd5g)
             (v4_B5 :: Data.Typeable.Internal.Typeable k1_agd5i)
             (v5_B6 :: Data (f_agd4c (g_agd4d a_agd4e))) ->
       Data.Data.C:Data TYPE: Compose f_agd4c g_agd4d a_agd4e
                        (Data.Functor.Compose.$fDataCompose8
                           @ k_agd5g
                           @ f_agd4c
                           @ k1_agd5i
                           @ g_agd4d
                           @ a_agd4e
                           v_X4E
                           v1_X4b
                           v2_B3
                           v3_B4
                           v4_B5
                           v5_B6)
                        `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Compose
                                                                                    f_agd4c
                                                                                    g_agd4d
                                                                                    a_agd4e>_N
                                :: (Data.Typeable.Internal.TypeRep
                                      (Compose f_agd4c g_agd4d a_agd4e) :: *)
                                   ~R# (Data.Typeable.Internal.Typeable
                                          (Compose f_agd4c g_agd4d a_agd4e) :: Constraint))
                        \ (@ (c_agdb1 :: * -> *))
                          (k2_agdak [Occ=Once!]
                             :: forall d b. Data d => c_agdb1 (d -> b) -> d -> c_agdb1 b)
                          (z_agdal [Occ=Once!] :: forall g1. g1 -> c_agdb1 g1)
                          (ds_dgdvi [Occ=Once] :: Compose f_agd4c g_agd4d a_agd4e) ->
                          k2_agdak
                            @ (f_agd4c (g_agd4d a_agd4e))
                            @ (Compose f_agd4c g_agd4d a_agd4e)
                            v5_B6
                            (z_agdal
                               @ (f_agd4c (g_agd4d a_agd4e) -> Compose f_agd4c g_agd4d a_agd4e)
                               ((\ (v6_X5S [Occ=Once] :: f_agd4c (g_agd4d a_agd4e)) -> v6_X5S)
                                `cast` (<f_agd4c (g_agd4d a_agd4e)>_R
                                        ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                      <k_agd5g>_N
                                                      <k1_agd5i>_N
                                                      <f_agd4c>_R
                                                      <g_agd4d>_N
                                                      <a_agd4e>_N)
                                        :: (f_agd4c (g_agd4d a_agd4e)
                                            -> f_agd4c (g_agd4d a_agd4e) :: *)
                                           ~R# (f_agd4c (g_agd4d a_agd4e)
                                                -> Compose f_agd4c g_agd4d a_agd4e :: *))))
                            (ds_dgdvi
                             `cast` (Data.Functor.Compose.N:Compose[0]
                                         <k_agd5g>_N
                                         <k1_agd5i>_N
                                         <f_agd4c>_R
                                         <g_agd4d>_N
                                         <a_agd4e>_N
                                     :: (Compose f_agd4c g_agd4d a_agd4e :: *)
                                        ~R# (f_agd4c (g_agd4d a_agd4e) :: *)))
                        \ (@ (c_agdbg :: * -> *))
                          (k2_agdan [Occ=Once!]
                             :: forall b r. Data b => c_agdbg (b -> r) -> c_agdbg r)
                          (z_agdao [Occ=Once!] :: forall r. r -> c_agdbg r)
                          _ [Occ=Dead] ->
                          k2_agdan
                            @ (f_agd4c (g_agd4d a_agd4e))
                            @ (Compose f_agd4c g_agd4d a_agd4e)
                            v5_B6
                            (z_agdao
                               @ (f_agd4c (g_agd4d a_agd4e) -> Compose f_agd4c g_agd4d a_agd4e)
                               ((\ (v6_X5S [Occ=Once] :: f_agd4c (g_agd4d a_agd4e)) -> v6_X5S)
                                `cast` (<f_agd4c (g_agd4d a_agd4e)>_R
                                        ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                                      <k_agd5g>_N
                                                      <k1_agd5i>_N
                                                      <f_agd4c>_R
                                                      <g_agd4d>_N
                                                      <a_agd4e>_N)
                                        :: (f_agd4c (g_agd4d a_agd4e)
                                            -> f_agd4c (g_agd4d a_agd4e) :: *)
                                           ~R# (f_agd4c (g_agd4d a_agd4e)
                                                -> Compose f_agd4c g_agd4d a_agd4e :: *))))
                        \ _ [Occ=Dead] -> Data.Functor.Compose.$cCompose
                        \ _ [Occ=Dead] -> Data.Functor.Compose.$tCompose
                        \ (@ (t_agdbD :: * -> *))
                          (@ (c_agdbE :: * -> *))
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
                          GHC.Base.Nothing @ (c_agdbE (Compose f_agd4c g_agd4d a_agd4e))
                        \ (@ (t_agdbW :: * -> * -> *))
                          (@ (c_agdbX :: * -> *))
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
                          GHC.Base.Nothing @ (c_agdbX (Compose f_agd4c g_agd4d a_agd4e))
                        (\ (ds_dgdvp [Occ=Once!] :: forall b. Data b => b -> b)
                           (x0_Xe2jm [Occ=Once] :: Compose f_agd4c g_agd4d a_agd4e) ->
                           ds_dgdvp
                             @ (f_agd4c (g_agd4d a_agd4e))
                             v5_B6
                             (x0_Xe2jm
                              `cast` (Data.Functor.Compose.N:Compose[0]
                                          <k_agd5g>_N
                                          <k1_agd5i>_N
                                          <f_agd4c>_R
                                          <g_agd4d>_N
                                          <a_agd4e>_N
                                      :: (Compose f_agd4c g_agd4d a_agd4e :: *)
                                         ~R# (f_agd4c (g_agd4d a_agd4e) :: *))))
                        `cast` (<forall b. Data b => b -> b>_R
                                ->_R <Compose f_agd4c g_agd4d a_agd4e>_R
                                ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                              <k_agd5g>_N
                                              <k1_agd5i>_N
                                              <f_agd4c>_R
                                              <g_agd4d>_N
                                              <a_agd4e>_N)
                                :: ((forall b. Data b => b -> b)
                                    -> Compose f_agd4c g_agd4d a_agd4e
                                    -> f_agd4c (g_agd4d a_agd4e) :: *)
                                   ~R# ((forall b. Data b => b -> b)
                                        -> Compose f_agd4c g_agd4d a_agd4e
                                        -> Compose f_agd4c g_agd4d a_agd4e :: *))
                        \ (@ r_agdcu)
                          (@ r'_agdcv)
                          (ds_dgdvq [Occ=Once!] :: r_agdcu -> r'_agdcv -> r_agdcu)
                          (ds1_dgdvr [Occ=Once] :: r_agdcu)
                          (ds2_dgdvs [Occ=Once!] :: forall d. Data d => d -> r'_agdcv)
                          (eta_X4z [Occ=Once] :: Compose f_agd4c g_agd4d a_agd4e) ->
                          ds_dgdvq
                            ds1_dgdvr
                            (ds2_dgdvs
                               @ (f_agd4c (g_agd4d a_agd4e))
                               v5_B6
                               (eta_X4z
                                `cast` (Data.Functor.Compose.N:Compose[0]
                                            <k_agd5g>_N
                                            <k1_agd5i>_N
                                            <f_agd4c>_R
                                            <g_agd4d>_N
                                            <a_agd4e>_N
                                        :: (Compose f_agd4c g_agd4d a_agd4e :: *)
                                           ~R# (f_agd4c (g_agd4d a_agd4e) :: *))))
                        \ (@ r_agdcL)
                          (@ r'_agdcM)
                          (ds_dgdvt [Occ=Once!] :: r'_agdcM -> r_agdcL -> r_agdcL)
                          (ds1_dgdvu [Occ=Once] :: r_agdcL)
                          (ds2_dgdvv [Occ=Once!] :: forall d. Data d => d -> r'_agdcM)
                          (x0_ae1SX [Occ=Once] :: Compose f_agd4c g_agd4d a_agd4e) ->
                          ds_dgdvt
                            (ds2_dgdvv
                               @ (f_agd4c (g_agd4d a_agd4e))
                               v5_B6
                               (x0_ae1SX
                                `cast` (Data.Functor.Compose.N:Compose[0]
                                            <k_agd5g>_N
                                            <k1_agd5i>_N
                                            <f_agd4c>_R
                                            <g_agd4d>_N
                                            <a_agd4e>_N
                                        :: (Compose f_agd4c g_agd4d a_agd4e :: *)
                                           ~R# (f_agd4c (g_agd4d a_agd4e) :: *))))
                            ds1_dgdvu
                        \ (@ u_agdd2)
                          (ds_dgdvw [Occ=Once!] :: forall d. Data d => d -> u_agdd2)
                          (x0_ae1SX [Occ=Once] :: Compose f_agd4c g_agd4d a_agd4e) ->
                          GHC.Types.:
                            @ u_agdd2
                            (ds_dgdvw
                               @ (f_agd4c (g_agd4d a_agd4e))
                               v5_B6
                               (x0_ae1SX
                                `cast` (Data.Functor.Compose.N:Compose[0]
                                            <k_agd5g>_N
                                            <k1_agd5i>_N
                                            <f_agd4c>_R
                                            <g_agd4d>_N
                                            <a_agd4e>_N
                                        :: (Compose f_agd4c g_agd4d a_agd4e :: *)
                                           ~R# (f_agd4c (g_agd4d a_agd4e) :: *))))
                            (GHC.Types.[] @ u_agdd2)
                        \ (@ u_agddg)
                          (ds_dgdvx [Occ=Once] :: Int)
                          (ds1_dgdvy [Occ=Once!] :: forall d. Data d => d -> u_agddg)
                          (x_ae1T7 [Occ=Once] :: Compose f_agd4c g_agd4d a_agd4e) ->
                          case GHC.Classes.eqInt ds_dgdvx Data.Functor.Compose.$fDataCompose3
                          of {
                            False -> Data.Maybe.fromJust1 @ u_agddg;
                            True ->
                              ds1_dgdvy
                                @ (f_agd4c (g_agd4d a_agd4e))
                                v5_B6
                                (x_ae1T7
                                 `cast` (Data.Functor.Compose.N:Compose[0]
                                             <k_agd5g>_N
                                             <k1_agd5i>_N
                                             <f_agd4c>_R
                                             <g_agd4d>_N
                                             <a_agd4e>_N
                                         :: (Compose f_agd4c g_agd4d a_agd4e :: *)
                                            ~R# (f_agd4c (g_agd4d a_agd4e) :: *)))
                          }
                        Data.Functor.Compose.$fDataCompose_$cgmapM
                          @ k_agd5g
                          @ f_agd4c
                          @ k1_agd5i
                          @ g_agd4d
                          @ a_agd4e
                          v_X4E
                          v1_X4b
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Compose.$fDataCompose_$cgmapMp
                          @ k_agd5g
                          @ f_agd4c
                          @ k1_agd5i
                          @ g_agd4d
                          @ a_agd4e
                          v_X4E
                          v1_X4b
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                        Data.Functor.Compose.$fDataCompose_$cgmapMo
                          @ k_agd5g
                          @ f_agd4c
                          @ k1_agd5i
                          @ g_agd4d
                          @ a_agd4e
                          v_X4E
                          v1_X4b
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6]
Data.Functor.Compose.$fDataCompose
  = \ (@ k_Xgdgk)
      (@ (f_Xgdgm :: k_Xgdgk -> *))
      (@ k1_Xgdgo)
      (@ (g_Xgdgq :: k1_Xgdgo -> k_Xgdgk))
      (@ (a_Xgdgs :: k1_Xgdgo))
      ($dTypeable_Xgdgu :: Data.Typeable.Internal.Typeable a_Xgdgs)
      ($dTypeable1_Xgdgw :: Data.Typeable.Internal.Typeable f_Xgdgm)
      ($dTypeable2_Xgdgy :: Data.Typeable.Internal.Typeable g_Xgdgq)
      ($dTypeable3_XgdgA :: Data.Typeable.Internal.Typeable k_Xgdgk)
      ($dTypeable4_XgdgC :: Data.Typeable.Internal.Typeable k1_Xgdgo)
      ($dData_XgdgE :: Data (f_Xgdgm (g_Xgdgq a_Xgdgs))) ->
      Data.Data.C:Data
        @ (Compose f_Xgdgm g_Xgdgq a_Xgdgs)
        ((Data.Functor.Compose.$w$cp1Data
            @ k_Xgdgk
            @ f_Xgdgm
            @ k1_Xgdgo
            @ g_Xgdgq
            @ a_Xgdgs
            $dTypeable_Xgdgu
            $dTypeable1_Xgdgw
            $dTypeable2_Xgdgy
            $dTypeable3_XgdgA
            $dTypeable4_XgdgC)
         `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Compose
                                                                     f_Xgdgm g_Xgdgq a_Xgdgs>_N
                 :: (Data.Typeable.Internal.TypeRep
                       (Compose f_Xgdgm g_Xgdgq a_Xgdgs) :: *)
                    ~R# (Data.Typeable.Internal.Typeable
                           (Compose f_Xgdgm g_Xgdgq a_Xgdgs) :: Constraint)))
        (\ (@ (c_agdb1 :: * -> *))
           (k2_agdak
              :: forall d b. Data d => c_agdb1 (d -> b) -> d -> c_agdb1 b)
           (z_agdal :: forall g1. g1 -> c_agdb1 g1)
           (ds_dgdvi :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           k2_agdak
             @ (f_Xgdgm (g_Xgdgq a_Xgdgs))
             @ (Compose f_Xgdgm g_Xgdgq a_Xgdgs)
             $dData_XgdgE
             (z_agdal
                @ (f_Xgdgm (g_Xgdgq a_Xgdgs) -> Compose f_Xgdgm g_Xgdgq a_Xgdgs)
                ((Data.Functor.Compose.$fDataCompose2
                    @ k_Xgdgk @ f_Xgdgm @ k1_Xgdgo @ g_Xgdgq @ a_Xgdgs)
                 `cast` (<f_Xgdgm (g_Xgdgq a_Xgdgs)>_R
                         ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                       <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N)
                         :: (f_Xgdgm (g_Xgdgq a_Xgdgs) -> f_Xgdgm (g_Xgdgq a_Xgdgs) :: *)
                            ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs)
                                 -> Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *))))
             (ds_dgdvi
              `cast` (Data.Functor.Compose.N:Compose[0]
                          <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N
                      :: (Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)
                         ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs) :: *))))
        (\ (@ (c_agdbg :: * -> *))
           (k2_agdan :: forall b r. Data b => c_agdbg (b -> r) -> c_agdbg r)
           (z_agdao :: forall r. r -> c_agdbg r)
           _ [Occ=Dead] ->
           k2_agdan
             @ (f_Xgdgm (g_Xgdgq a_Xgdgs))
             @ (Compose f_Xgdgm g_Xgdgq a_Xgdgs)
             $dData_XgdgE
             (z_agdao
                @ (f_Xgdgm (g_Xgdgq a_Xgdgs) -> Compose f_Xgdgm g_Xgdgq a_Xgdgs)
                ((Data.Functor.Compose.$fDataCompose2
                    @ k_Xgdgk @ f_Xgdgm @ k1_Xgdgo @ g_Xgdgq @ a_Xgdgs)
                 `cast` (<f_Xgdgm (g_Xgdgq a_Xgdgs)>_R
                         ->_R Sym (Data.Functor.Compose.N:Compose[0]
                                       <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N)
                         :: (f_Xgdgm (g_Xgdgq a_Xgdgs) -> f_Xgdgm (g_Xgdgq a_Xgdgs) :: *)
                            ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs)
                                 -> Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)))))
        (lvl4_rgdQh @ k_Xgdgk @ f_Xgdgm @ k1_Xgdgo @ g_Xgdgq @ a_Xgdgs)
        (lvl5_rgdQi @ k_Xgdgk @ f_Xgdgm @ k1_Xgdgo @ g_Xgdgq @ a_Xgdgs)
        (lvl6_rgdQj @ k_Xgdgk @ f_Xgdgm @ k1_Xgdgo @ g_Xgdgq @ a_Xgdgs)
        (lvl7_rgdQk @ k_Xgdgk @ f_Xgdgm @ k1_Xgdgo @ g_Xgdgq @ a_Xgdgs)
        ((\ (ds_dgdvp :: forall b. Data b => b -> b)
            (x0_Xe2jm :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
            ds_dgdvp
              @ (f_Xgdgm (g_Xgdgq a_Xgdgs))
              $dData_XgdgE
              (x0_Xe2jm
               `cast` (Data.Functor.Compose.N:Compose[0]
                           <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N
                       :: (Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)
                          ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs) :: *))))
         `cast` (<forall b. Data b => b -> b>_R
                 ->_R <Compose f_Xgdgm g_Xgdgq a_Xgdgs>_R
                 ->_R Sym (Data.Functor.Compose.N:Compose[0]
                               <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N)
                 :: ((forall b. Data b => b -> b)
                     -> Compose f_Xgdgm g_Xgdgq a_Xgdgs
                     -> f_Xgdgm (g_Xgdgq a_Xgdgs) :: *)
                    ~R# ((forall b. Data b => b -> b)
                         -> Compose f_Xgdgm g_Xgdgq a_Xgdgs
                         -> Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)))
        (\ (@ r_agdcu)
           (@ r'_agdcv)
           (ds_dgdvq :: r_agdcu -> r'_agdcv -> r_agdcu)
           (ds1_dgdvr :: r_agdcu)
           (ds2_dgdvs :: forall d. Data d => d -> r'_agdcv)
           (eta_X4z :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           ds_dgdvq
             ds1_dgdvr
             (ds2_dgdvs
                @ (f_Xgdgm (g_Xgdgq a_Xgdgs))
                $dData_XgdgE
                (eta_X4z
                 `cast` (Data.Functor.Compose.N:Compose[0]
                             <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N
                         :: (Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)
                            ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs) :: *)))))
        (\ (@ r_agdcL)
           (@ r'_agdcM)
           (ds_dgdvt :: r'_agdcM -> r_agdcL -> r_agdcL)
           (ds1_dgdvu :: r_agdcL)
           (ds2_dgdvv :: forall d. Data d => d -> r'_agdcM)
           (x0_ae1SX :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           ds_dgdvt
             (ds2_dgdvv
                @ (f_Xgdgm (g_Xgdgq a_Xgdgs))
                $dData_XgdgE
                (x0_ae1SX
                 `cast` (Data.Functor.Compose.N:Compose[0]
                             <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N
                         :: (Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)
                            ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs) :: *))))
             ds1_dgdvu)
        (\ (@ u_agdd2)
           (ds_dgdvw :: forall d. Data d => d -> u_agdd2)
           (x0_ae1SX :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           GHC.Types.:
             @ u_agdd2
             (ds_dgdvw
                @ (f_Xgdgm (g_Xgdgq a_Xgdgs))
                $dData_XgdgE
                (x0_ae1SX
                 `cast` (Data.Functor.Compose.N:Compose[0]
                             <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N
                         :: (Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)
                            ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs) :: *))))
             (GHC.Types.[] @ u_agdd2))
        (\ (@ u_agddg)
           (ds_dgdvx :: Int)
           (ds1_dgdvy :: forall d. Data d => d -> u_agddg)
           (x_ae1T7 :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           case ds_dgdvx of { GHC.Types.I# x1_a22G ->
           case x1_a22G of {
             __DEFAULT -> Data.Maybe.fromJust1 @ u_agddg;
             0# ->
               ds1_dgdvy
                 @ (f_Xgdgm (g_Xgdgq a_Xgdgs))
                 $dData_XgdgE
                 (x_ae1T7
                  `cast` (Data.Functor.Compose.N:Compose[0]
                              <k_Xgdgk>_N <k1_Xgdgo>_N <f_Xgdgm>_R <g_Xgdgq>_N <a_Xgdgs>_N
                          :: (Compose f_Xgdgm g_Xgdgq a_Xgdgs :: *)
                             ~R# (f_Xgdgm (g_Xgdgq a_Xgdgs) :: *)))
           }
           })
        (\ (@ (m_sgdKw :: * -> *))
           (w_sgdKx :: Monad m_sgdKw)
           (w1_sgdKy :: forall d. Data d => d -> m_sgdKw d)
           (w2_sgdKz :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           Data.Functor.Compose.$w$cgmapM
             @ k_Xgdgk
             @ f_Xgdgm
             @ k1_Xgdgo
             @ g_Xgdgq
             @ a_Xgdgs
             $dData_XgdgE
             @ m_sgdKw
             w_sgdKx
             w1_sgdKy
             w2_sgdKz)
        (\ (@ (m_sgdKg :: * -> *))
           (w_sgdKh :: GHC.Base.MonadPlus m_sgdKg)
           (w1_sgdKi :: forall d. Data d => d -> m_sgdKg d)
           (w2_sgdKj :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           Data.Functor.Compose.$w$cgmapMp
             @ k_Xgdgk
             @ f_Xgdgm
             @ k1_Xgdgo
             @ g_Xgdgq
             @ a_Xgdgs
             $dData_XgdgE
             @ m_sgdKg
             w_sgdKh
             w1_sgdKi
             w2_sgdKj)
        (\ (@ (m_sgdKM :: * -> *))
           (w_sgdKN :: GHC.Base.MonadPlus m_sgdKM)
           (w1_sgdKO :: forall d. Data d => d -> m_sgdKM d)
           (w2_sgdKP :: Compose f_Xgdgm g_Xgdgq a_Xgdgs) ->
           Data.Functor.Compose.$w$cgmapMo
             @ k_Xgdgk
             @ f_Xgdgm
             @ k1_Xgdgo
             @ g_Xgdgq
             @ a_Xgdgs
             $dData_XgdgE
             @ m_sgdKM
             w_sgdKN
             w1_sgdKO
             w2_sgdKP)


