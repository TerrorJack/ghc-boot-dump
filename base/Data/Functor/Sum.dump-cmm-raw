
==================== Raw Cmm ====================
2018-03-16 16:11:47.515810724 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:47.5191058 UTC

[section ""data" . Data.Functor.Sum.$fEq1Sum_$cliftEq_closure" {
     Data.Functor.Sum.$fEq1Sum_$cliftEq_closure:
         const Data.Functor.Sum.$fEq1Sum_$cliftEq_info;
 },
 Data.Functor.Sum.$fEq1Sum_$cliftEq_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg05n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg05o; else goto cg05p;
       cg05o: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEq1Sum_$cliftEq_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg05p: // global
           I64[Sp - 40] = block_cg05g_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug060; else goto cg05h;
       ug060: // global
           call _cg05g(R1) args: 0, res: 0, upd: 0;
       cg05h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEq1Sum_$cliftEq_info" {
     Data.Functor.Sum.$fEq1Sum_$cliftEq_info:
         const Data.Functor.Sum.$fEq1Sum_$cliftEq_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg05g() //  [R1]
         { []
         }
     {offset
       cg05g: // global
           _sfXPB::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg05k; else goto cg05l;
       cg05k: // global
           I64[Sp] = block_cg05s_info;
           _sfXPD::P64 = P64[R1 + 7];
           R1 = _sfXPB::P64;
           P64[Sp + 32] = _sfXPD::P64;
           if (R1 & 7 != 0) goto ug05Y; else goto cg05u;
       ug05Y: // global
           call _cg05s(R1) args: 0, res: 0, upd: 0;
       cg05u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg05l: // global
           I64[Sp + 8] = block_cg05H_info;
           _sfXPH::P64 = P64[R1 + 6];
           R1 = _sfXPB::P64;
           P64[Sp + 32] = _sfXPH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug05Z; else goto cg05J;
       ug05Z: // global
           call _cg05H(R1) args: 0, res: 0, upd: 0;
       cg05J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg05g_info" {
     block_cg05g_info:
         const _cg05g;
         const 4;
         const 30;
 },
 _cg05s() //  [R1]
         { []
         }
     {offset
       cg05s: // global
           if (R1 & 7 == 1) goto cg05A; else goto ug05X;
       cg05A: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ug05X: // global
           Sp = Sp + 40;
           call _cg05P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg05s_info" {
     block_cg05s_info:
         const _cg05s;
         const 132;
         const 30;
 },
 _cg05H() //  [R1]
         { []
         }
     {offset
       cg05H: // global
           if (R1 & 7 == 1) goto ug05W; else goto cg05T;
       ug05W: // global
           Sp = Sp + 32;
           call _cg05P() args: 0, res: 0, upd: 0;
       cg05T: // global
           R4 = P64[R1 + 6];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg05H_info" {
     block_cg05H_info:
         const _cg05H;
         const 3;
         const 30;
 },
 _cg05P() //  []
         { []
         }
     {offset
       cg05P: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.52975687 UTC

[section ""data" . Data.Functor.Sum.$fEq1Sum_closure" {
     Data.Functor.Sum.$fEq1Sum_closure:
         const Data.Functor.Sum.$fEq1Sum_info;
 },
 Data.Functor.Sum.$fEq1Sum_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg06x: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fEq1Sum_$cliftEq_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEq1Sum_info" {
     Data.Functor.Sum.$fEq1Sum_info:
         const Data.Functor.Sum.$fEq1Sum_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.534918303 UTC

[section ""data" . Data.Functor.Sum.$fOrd1Sum_$cliftCompare_closure" {
     Data.Functor.Sum.$fOrd1Sum_$cliftCompare_closure:
         const Data.Functor.Sum.$fOrd1Sum_$cliftCompare_info;
 },
 Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cg06P: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg06Q; else goto cg06R;
       cg06Q: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrd1Sum_$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg06R: // global
           I64[Sp - 40] = block_cg06I_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug07q; else goto cg06J;
       ug07q: // global
           call _cg06I(R1) args: 0, res: 0, upd: 0;
       cg06J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrd1Sum_$cliftCompare_info" {
     Data.Functor.Sum.$fOrd1Sum_$cliftCompare_info:
         const Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg06I() //  [R1]
         { []
         }
     {offset
       cg06I: // global
           _sfXPP::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg06M; else goto cg06N;
       cg06M: // global
           I64[Sp] = block_cg06U_info;
           _sfXPR::P64 = P64[R1 + 7];
           R1 = _sfXPP::P64;
           P64[Sp + 32] = _sfXPR::P64;
           if (R1 & 7 != 0) goto ug07o; else goto cg06W;
       ug07o: // global
           call _cg06U(R1) args: 0, res: 0, upd: 0;
       cg06W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg06N: // global
           I64[Sp + 8] = block_cg079_info;
           _sfXPV::P64 = P64[R1 + 6];
           R1 = _sfXPP::P64;
           P64[Sp + 32] = _sfXPV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug07p; else goto cg07b;
       ug07p: // global
           call _cg079(R1) args: 0, res: 0, upd: 0;
       cg07b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg06I_info" {
     block_cg06I_info:
         const _cg06I;
         const 4;
         const 30;
 },
 _cg06U() //  [R1]
         { []
         }
     {offset
       cg06U: // global
           if (R1 & 7 == 1) goto cg072; else goto cg076;
       cg072: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
       cg076: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg06U_info" {
     block_cg06U_info:
         const _cg06U;
         const 132;
         const 30;
 },
 _cg079() //  [R1]
         { []
         }
     {offset
       cg079: // global
           if (R1 & 7 == 1) goto cg07h; else goto cg07l;
       cg07h: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg07l: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg079_info" {
     block_cg079_info:
         const _cg079;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.54596601 UTC

[section ""data" . Data.Functor.Sum.$fOrd1Sum1_closure" {
     Data.Functor.Sum.$fOrd1Sum1_closure:
         const Data.Functor.Sum.$fOrd1Sum1_info;
 },
 Data.Functor.Sum.$fOrd1Sum1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg087: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg088; else goto cg089;
       cg088: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrd1Sum1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg089: // global
           I64[Sp - 40] = block_cg080_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug08K; else goto cg081;
       ug08K: // global
           call _cg080(R1) args: 0, res: 0, upd: 0;
       cg081: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrd1Sum1_info" {
     Data.Functor.Sum.$fOrd1Sum1_info:
         const Data.Functor.Sum.$fOrd1Sum1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg080() //  [R1]
         { []
         }
     {offset
       cg080: // global
           _sfXQ3::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg084; else goto cg085;
       cg084: // global
           I64[Sp] = block_cg08c_info;
           _sfXQ5::P64 = P64[R1 + 7];
           R1 = _sfXQ3::P64;
           P64[Sp + 32] = _sfXQ5::P64;
           if (R1 & 7 != 0) goto ug08I; else goto cg08e;
       ug08I: // global
           call _cg08c(R1) args: 0, res: 0, upd: 0;
       cg08e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg085: // global
           I64[Sp + 8] = block_cg08r_info;
           _sfXQ9::P64 = P64[R1 + 6];
           R1 = _sfXQ3::P64;
           P64[Sp + 32] = _sfXQ9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug08J; else goto cg08t;
       ug08J: // global
           call _cg08r(R1) args: 0, res: 0, upd: 0;
       cg08t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg080_info" {
     block_cg080_info:
         const _cg080;
         const 4;
         const 30;
 },
 _cg08c() //  [R1]
         { []
         }
     {offset
       cg08c: // global
           if (R1 & 7 == 1) goto cg08k; else goto ug08H;
       cg08k: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
       ug08H: // global
           Sp = Sp + 40;
           call _cg08z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg08c_info" {
     block_cg08c_info:
         const _cg08c;
         const 132;
         const 30;
 },
 _cg08r() //  [R1]
         { []
         }
     {offset
       cg08r: // global
           if (R1 & 7 == 1) goto ug08G; else goto cg08D;
       ug08G: // global
           Sp = Sp + 32;
           call _cg08z() args: 0, res: 0, upd: 0;
       cg08D: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg08r_info" {
     block_cg08r_info:
         const _cg08r;
         const 3;
         const 30;
 },
 _cg08z() //  []
         { []
         }
     {offset
       cg08z: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.558596062 UTC

[section ""data" . Data.Functor.Sum.$fOrd1Sum_closure" {
     Data.Functor.Sum.$fOrd1Sum_closure:
         const Data.Functor.Sum.$fOrd1Sum_info;
 },
 sat_sfXQg_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg09s: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQg_info" {
     sat_sfXQg_info:
         const sat_sfXQg_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfXQf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg09A: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fOrd1Sum1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQf_info" {
     sat_sfXQf_info:
         const sat_sfXQf_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Functor.Sum.$fOrd1Sum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg09E: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg09I; else goto cg09H;
       cg09I: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrd1Sum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg09H: // global
           I64[Hp - 64] = sat_sfXQg_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sfXQf_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 37;
           P64[Hp] = Hp - 61;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrd1Sum_info" {
     Data.Functor.Sum.$fOrd1Sum_info:
         const Data.Functor.Sum.$fOrd1Sum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.565329292 UTC

[section ""cstring" . Data.Functor.Sum.$fRead1Sum8_bytes" {
     Data.Functor.Sum.$fRead1Sum8_bytes:
         I8[] [73,110,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.5676341 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum7_closure" {
     Data.Functor.Sum.$fRead1Sum7_closure:
         const Data.Functor.Sum.$fRead1Sum7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fRead1Sum7_entry() //  [R1]
         { []
         }
     {offset
       cg0a3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0a4; else goto cg0a5;
       cg0a4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0a5: // global
           (_cg0a0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg0a0::I64 == 0) goto cg0a2; else goto cg0a1;
       cg0a2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg0a1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg0a0::I64;
           R2 = Data.Functor.Sum.$fRead1Sum8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum7_info" {
     Data.Functor.Sum.$fRead1Sum7_info:
         const Data.Functor.Sum.$fRead1Sum7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.571890208 UTC

[section ""cstring" . Data.Functor.Sum.$fRead1Sum4_bytes" {
     Data.Functor.Sum.$fRead1Sum4_bytes:
         I8[] [73,110,82]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.574207508 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum3_closure" {
     Data.Functor.Sum.$fRead1Sum3_closure:
         const Data.Functor.Sum.$fRead1Sum3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fRead1Sum3_entry() //  [R1]
         { []
         }
     {offset
       cg0ak: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0al; else goto cg0am;
       cg0al: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0am: // global
           (_cg0ah::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg0ah::I64 == 0) goto cg0aj; else goto cg0ai;
       cg0aj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg0ai: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg0ah::I64;
           R2 = Data.Functor.Sum.$fRead1Sum4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum3_info" {
     Data.Functor.Sum.$fRead1Sum3_info:
         const Data.Functor.Sum.$fRead1Sum3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.577930361 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum2_closure" {
     Data.Functor.Sum.$fRead1Sum2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Sum.$fRead1Sum3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.579721181 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum5_closure" {
     Data.Functor.Sum.$fRead1Sum5_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.581513435 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum6_closure" {
     Data.Functor.Sum.$fRead1Sum6_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.589953398 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum1_closure" {
     Data.Functor.Sum.$fRead1Sum1_closure:
         const Data.Functor.Sum.$fRead1Sum1_info;
         const 0;
 },
 ds_sfXQl_entry() //  [R1]
         { []
         }
     {offset
       cg0aF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0aG; else goto cg0aH;
       cg0aG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0aH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfXQl_info" {
     ds_sfXQl_info:
         const ds_sfXQl_entry;
         const 3;
         const 15;
 },
 ds1_sfXQm_entry() //  [R1]
         { []
         }
     {offset
       cg0aM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0aN; else goto cg0aO;
       cg0aN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0aO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sfXQm_info" {
     ds1_sfXQm_info:
         const ds1_sfXQm_entry;
         const 3;
         const 15;
 },
 sat_sfXQu_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0b9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0bd; else goto cg0bc;
       cg0bd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0bc: // global
           _sfXQp::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _sfXQp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQu_info" {
     sat_sfXQu_info:
         const sat_sfXQu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfXQv_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0be: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0bi; else goto cg0bh;
       cg0bi: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0bh: // global
           _sfXQl::P64 = P64[R1 + 7];
           _sfXQp::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfXQu_info;
           P64[Hp] = _sfXQp::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Sum.$fRead1Sum5_closure+1;
           R1 = _sfXQl::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQv_info" {
     sat_sfXQv_info:
         const sat_sfXQv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfXQC_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0bA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0bE; else goto cg0bD;
       cg0bE: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0bD: // global
           _sfXQp::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _sfXQp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQC_info" {
     sat_sfXQC_info:
         const sat_sfXQC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfXQD_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0bF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0bJ; else goto cg0bI;
       cg0bJ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0bI: // global
           _sfXQm::P64 = P64[R1 + 7];
           _sfXQp::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfXQC_info;
           P64[Hp] = _sfXQp::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Sum.$fRead1Sum5_closure+1;
           R1 = _sfXQm::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQD_info" {
     sat_sfXQD_info:
         const sat_sfXQD_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfXQG_entry() //  [R1]
         { []
         }
     {offset
       cg0bN: // global
           _sfXQG::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg0bO; else goto cg0bP;
       cg0bP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0bR; else goto cg0bQ;
       cg0bR: // global
           HpAlloc = 24;
           goto cg0bO;
       cg0bO: // global
           R1 = _sfXQG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0bQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfXQG::P64;
           _sfXQm::P64 = P64[_sfXQG::P64 + 16];
           _sfXQp::P64 = P64[_sfXQG::P64 + 24];
           I64[Hp - 16] = sat_sfXQD_info;
           P64[Hp - 8] = _sfXQm::P64;
           P64[Hp] = _sfXQp::P64;
           I64[Sp - 24] = block_cg0bK_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Sum.$fRead1Sum2_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXQG_info" {
     sat_sfXQG_info:
         const sat_sfXQG_entry;
         const 2;
         const 12884901906;
         const SfYa7_srt;
 },
 _cg0bK() //  [R1]
         { []
         }
     {offset
       cg0bK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0bU; else goto cg0bT;
       cg0bU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg0bT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0bK_info" {
     block_cg0bK_info:
         const _cg0bK;
         const 0;
         const 30;
 },
 $wlvl_sfXQn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0bY: // global
           _sfXQp::P64 = R3;
           _sfXQo::I64 = R2;
           _sfXQn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg0bZ; else goto cg0c0;
       cg0c0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0c2; else goto cg0c1;
       cg0c2: // global
           HpAlloc = 24;
           goto cg0bZ;
       cg0bZ: // global
           R3 = _sfXQp::P64;
           R2 = _sfXQo::I64;
           R1 = _sfXQn::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0c1: // global
           if (%MO_S_Gt_W64(_sfXQo::I64, 10)) goto cg0bW; else goto cg0bX;
       cg0bW: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg0bX: // global
           _sfXQl::P64 = P64[_sfXQn::P64 + 6];
           _sfXQm::P64 = P64[_sfXQn::P64 + 14];
           I64[Hp - 16] = sat_sfXQv_info;
           P64[Hp - 8] = _sfXQl::P64;
           P64[Hp] = _sfXQp::P64;
           I64[Sp - 24] = block_cg0bj_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Sum.$fRead1Sum6_closure+4;
           P64[Sp - 16] = _sfXQm::P64;
           P64[Sp - 8] = _sfXQp::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_sfXQn_info" {
     $wlvl_sfXQn_info:
         const $wlvl_sfXQn_entry;
         const 2;
         const 64424509451;
         const 8589934605;
         const SfYa7_srt;
 },
 _cg0bj() //  [R1]
         { []
         }
     {offset
       cg0bj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0c6; else goto cg0c5;
       cg0c6: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0c5: // global
           I64[Hp - 40] = sat_sfXQG_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 40;
           R2 = Hp - 6;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0bj_info" {
     block_cg0bj_info:
         const _cg0bj;
         const 2;
         const 30064771102;
         const SfYa7_srt;
 },
 lvl8_sfXQH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0cf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0cg; else goto cg0ch;
       cg0cg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0ch: // global
           I64[Sp - 24] = block_cg0cc_info;
           _sfXQn::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfXQn::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug0cl; else goto cg0cd;
       ug0cl: // global
           call _cg0cc(R1) args: 0, res: 0, upd: 0;
       cg0cd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_sfXQH_info" {
     lvl8_sfXQH_info:
         const lvl8_sfXQH_entry;
         const 1;
         const 64424509449;
         const 8589934607;
         const SfYa7_srt;
 },
 _cg0cc() //  [R1]
         { []
         }
     {offset
       cg0cc: // global
           R3 = P64[Sp + 16];
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl_sfXQn_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0cc_info" {
     block_cg0cc_info:
         const _cg0cc;
         const 2;
         const 64424509470;
         const SfYa7_srt;
 },
 sat_sfXQO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0cr: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQO_info" {
     sat_sfXQO_info:
         const sat_sfXQO_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfYa7_srt+32;
 },
 Data.Functor.Sum.$fRead1Sum1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg0cu: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cg0cy; else goto cg0cx;
       cg0cy: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0cx: // global
           I64[Hp - 128] = ds_sfXQl_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           I64[Hp - 88] = ds1_sfXQm_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = $wlvl_sfXQn_info;
           P64[Hp - 40] = Hp - 128;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = lvl8_sfXQH_info;
           P64[Hp - 16] = Hp - 46;
           I64[Hp - 8] = sat_sfXQO_info;
           P64[Hp] = Hp - 22;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum1_info" {
     Data.Functor.Sum.$fRead1Sum1_info:
         const Data.Functor.Sum.$fRead1Sum1_entry;
         const 0;
         const 270582939662;
         const 17179869208;
         const SfYa7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.620103115 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_info;
         const 0;
 },
 sat_sfXQZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0dP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg0dQ; else goto cg0dR;
       cg0dQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0dR: // global
           I64[Sp - 8] = block_cg0dM_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQZ_info" {
     sat_sfXQZ_info:
         const sat_sfXQZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cg0dM() //  [R1]
         { []
         }
     {offset
       cg0dM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0dU; else goto cg0dT;
       cg0dU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0dT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0dM_info" {
     block_cg0dM_info:
         const _cg0dM;
         const 0;
         const 30;
 },
 sat_sfXQU_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0e0: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXQU_info" {
     sat_sfXQU_info:
         const sat_sfXQU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sfXQT_entry() //  [R1]
         { []
         }
     {offset
       cg0e3: // global
           _sfXQT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg0e4; else goto cg0e5;
       cg0e5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg0e7; else goto cg0e6;
       cg0e7: // global
           HpAlloc = 32;
           goto cg0e4;
       cg0e4: // global
           R1 = _sfXQT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0e6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfXQT::P64;
           _sfXQP::P64 = P64[_sfXQT::P64 + 16];
           _sfXQQ::P64 = P64[_sfXQT::P64 + 24];
           _sfXQR::P64 = P64[_sfXQT::P64 + 32];
           _sfXQS::P64 = P64[_sfXQT::P64 + 40];
           I64[Hp - 24] = sat_sfXQZ_info;
           P64[Hp - 16] = _sfXQS::P64;
           I64[Hp - 8] = sat_sfXQU_info;
           P64[Hp] = _sfXQR::P64;
           R5 = Hp - 22;
           R4 = Hp - 7;
           R3 = _sfXQQ::P64;
           R2 = _sfXQP::P64;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfXQT_info" {
     ds_sfXQT_info:
         const ds_sfXQT_entry;
         const 4;
         const 4294967311;
         const SfYa7_srt+40;
 },
 sat_sfXR1_entry() //  [R1]
         { []
         }
     {offset
       cg0eh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0ei; else goto cg0ej;
       cg0ei: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0ej: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXR1_info" {
     sat_sfXR1_info:
         const sat_sfXR1_entry;
         const 2;
         const 18;
 },
 sat_sfXR2_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0ek: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg0eo; else goto cg0en;
       cg0eo: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0en: // global
           _sfXQT::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfXR1_info;
           P64[Hp - 8] = _sfXQT::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXR2_info" {
     sat_sfXR2_info:
         const sat_sfXR2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cg0ep: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg0et; else goto cg0es;
       cg0et: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0es: // global
           I64[Hp - 56] = ds_sfXQT_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_sfXR2_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_info" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_info:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfYa7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.634969983 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_info;
         const 0;
 },
 sat_sfXR7_entry() //  [R1]
         { []
         }
     {offset
       cg0f4: // global
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXR7_info" {
     sat_sfXR7_info:
         const sat_sfXR7_entry;
         const 4;
         const 4294967311;
         const SfYa7_srt+40;
 },
 Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cg0f7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0fb; else goto cg0fa;
       cg0fb: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0fa: // global
           I64[Hp - 40] = sat_sfXR7_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_info" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_info:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const SfYa7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.643282074 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum_closure" {
     Data.Functor.Sum.$fRead1Sum_closure:
         const Data.Functor.Sum.$fRead1Sum_info;
         const 0;
 },
 sat_sfXRd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0fs: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRd_info" {
     sat_sfXRd_info:
         const sat_sfXRd_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfYa7_srt+64;
 },
 sat_sfXRc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0fA: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRc_info" {
     sat_sfXRc_info:
         const sat_sfXRc_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfYa7_srt+40;
 },
 sat_sfXRb_entry() //  [R1]
         { []
         }
     {offset
       cg0fH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0fI; else goto cg0fJ;
       cg0fI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0fJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum_$cliftReadList_entry(R3,
                                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXRb_info" {
     sat_sfXRb_info:
         const sat_sfXRb_entry;
         const 2;
         const 4294967314;
         const SfYa7_srt+72;
 },
 sat_sfXRa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0fP: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRa_info" {
     sat_sfXRa_info:
         const sat_sfXRa_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfYa7_srt+48;
 },
 Data.Functor.Sum.$fRead1Sum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg0fT: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cg0fX; else goto cg0fW;
       cg0fX: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0fW: // global
           I64[Hp - 136] = sat_sfXRd_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sfXRc_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sfXRb_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sfXRa_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 54;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 134;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_info" {
     Data.Functor.Sum.$fRead1Sum_info:
         const Data.Functor.Sum.$fRead1Sum_entry;
         const 0;
         const 253403070478;
         const 8589934607;
         const SfYa7_srt+40;
 },
 section ""data" . Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadList_info;
         const 0;
 },
 sat_sfXRg_entry() //  [R1]
         { []
         }
     {offset
       cg0g6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0g7; else goto cg0g8;
       cg0g7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0g8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXRg_info" {
     sat_sfXRg_info:
         const sat_sfXRg_entry;
         const 2;
         const 4294967314;
         const SfYa7_srt+80;
 },
 Data.Functor.Sum.$fRead1Sum_$cliftReadList_entry() //  [R2, R3]
         { []
         }
     {offset
       cg0g9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg0gd; else goto cg0gc;
       cg0gd: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0gc: // global
           I64[Hp - 24] = sat_sfXRg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_$cliftReadList_info" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadList_info:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfYa7_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.660582865 UTC

[section ""data" . Data.Functor.Sum.$w$cliftShowsPrec_closure" {
     Data.Functor.Sum.$w$cliftShowsPrec_closure:
         const Data.Functor.Sum.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Sum.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cg0gJ: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sfXRp_entry() //  [R1]
         { []
         }
     {offset
       cg0gW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0gX; else goto cg0gY;
       cg0gX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0gY: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRp_info" {
     sat_sfXRp_info:
         const sat_sfXRp_entry;
         const 3;
         const 15;
 },
 sat_sfXRr_entry() //  [R1]
         { []
         }
     {offset
       cg0h5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0h6; else goto cg0h7;
       cg0h6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0h7: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRr_info" {
     sat_sfXRr_info:
         const sat_sfXRr_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0hc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0hd; else goto cg0he;
       cg0hd: // global
           R1 = Data.Functor.Sum.$w$cliftShowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cg0he: // global
           I64[Sp - 40] = block_cg0gN_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0hl; else goto cg0gO;
       ug0hl: // global
           call _cg0gN(R1) args: 0, res: 0, upd: 0;
       cg0gO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cliftShowsPrec_info" {
     Data.Functor.Sum.$w$cliftShowsPrec_info:
         const Data.Functor.Sum.$w$cliftShowsPrec_entry;
         const 0;
         const 30064771086;
         const 25769803776;
         const SfYa7_srt+88;
         const 1030;
         const Data.Functor.Sum.$w$cliftShowsPrec_slow;
 },
 _cg0gN() //  [R1]
         { []
         }
     {offset
       cg0gN: // global
           _sfXRj::P64 = P64[Sp + 16];
           _sfXRk::P64 = P64[Sp + 24];
           _sfXRl::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cg0h9; else goto cg0ha;
       cg0h9: // global
           Hp = Hp + 40;
           _sfXRn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0hk; else goto cg0hg;
       cg0hg: // global
           _sfXRo::P64 = P64[_sfXRn::P64 + 7];
           I64[Hp - 32] = sat_sfXRp_info;
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = _sfXRj::P64;
           P64[Hp] = _sfXRk::P64;
           R5 = _sfXRo::P64;
           R4 = _sfXRl::I64;
           R3 = Data.Functor.Sum.$fRead1Sum7_closure;
           R2 = Hp - 32;
           Sp = Sp + 48;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cg0ha: // global
           Hp = Hp + 40;
           _sfXRn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0hk; else goto cg0hj;
       cg0hk: // global
           HpAlloc = 40;
           R1 = _sfXRn::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0hj: // global
           _sfXRq::P64 = P64[_sfXRn::P64 + 6];
           I64[Hp - 32] = sat_sfXRr_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sfXRj::P64;
           P64[Hp] = _sfXRk::P64;
           R5 = _sfXRq::P64;
           R4 = _sfXRl::I64;
           R3 = Data.Functor.Sum.$fRead1Sum3_closure;
           R2 = Hp - 32;
           Sp = Sp + 48;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0gN_info" {
     block_cg0gN_info:
         const _cg0gN;
         const 517;
         const 12884901918;
         const SfYa7_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.671605698 UTC

[section ""data" . Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cg0hU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0hV; else goto cg0hW;
       cg0hV: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg0hW: // global
           I64[Sp - 40] = block_cg0hR_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0i0; else goto cg0hS;
       ug0i0: // global
           call _cg0hR(R1) args: 0, res: 0, upd: 0;
       cg0hS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_info" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_info:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SfYa7_srt+104;
 },
 _cg0hR() //  [R1]
         { []
         }
     {offset
       cg0hR: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0hR_info" {
     block_cg0hR_info:
         const _cg0hR;
         const 5;
         const 4294967326;
         const SfYa7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.677478698 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum6_closure" {
     Data.Functor.Sum.$fFoldableSum6_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.680381321 UTC

[section ""data" . Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowList_info;
         const 0;
 },
 sat_sfXRH_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0ik: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg0il; else goto cg0im;
       cg0il: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0im: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sfXRG::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sfXRG::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRH_info" {
     sat_sfXRH_info:
         const sat_sfXRH_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SfYa7_srt+104;
 },
 Data.Functor.Sum.$fShow1Sum_$cliftShowList_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cg0in: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg0ir; else goto cg0iq;
       cg0ir: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg0iq: // global
           I64[Hp - 32] = sat_sfXRH_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 31;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShow1Sum_$cliftShowList_info" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowList_info:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const SfYa7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.687379254 UTC

[section ""data" . Data.Functor.Sum.$fShow1Sum_closure" {
     Data.Functor.Sum.$fShow1Sum_closure:
         const Data.Functor.Sum.$fShow1Sum_info;
         const 0;
 },
 sat_sfXRL_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg0iJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg0iK; else goto cg0iL;
       cg0iK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0iL: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$fShow1Sum_$cliftShowList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRL_info" {
     sat_sfXRL_info:
         const sat_sfXRL_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const SfYa7_srt+120;
 },
 sat_sfXRK_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg0iR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg0iS; else goto cg0iT;
       cg0iS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0iT: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXRK_info" {
     sat_sfXRK_info:
         const sat_sfXRK_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const SfYa7_srt+112;
 },
 Data.Functor.Sum.$fShow1Sum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg0iV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg0iZ; else goto cg0iY;
       cg0iZ: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShow1Sum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0iY: // global
           I64[Hp - 64] = sat_sfXRL_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sfXRK_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 36;
           P64[Hp] = Hp - 60;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShow1Sum_info" {
     Data.Functor.Sum.$fShow1Sum_info:
         const Data.Functor.Sum.$fShow1Sum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfYa7_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.695629068 UTC

[section ""data" . Data.Functor.Sum.$fEqSum_$c==_closure" {
     Data.Functor.Sum.$fEqSum_$c==_closure:
         const Data.Functor.Sum.$fEqSum_$c==_info;
 },
 sat_sfXRR_entry() //  [R1]
         { []
         }
     {offset
       cg0jn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0jo; else goto cg0jp;
       cg0jo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0jp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXRR_info" {
     sat_sfXRR_info:
         const sat_sfXRR_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fEqSum_$c==_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0jq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0ju; else goto cg0jt;
       cg0ju: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEqSum_$c==_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0jt: // global
           I64[Hp - 16] = sat_sfXRR_info;
           P64[Hp] = R4;
           R6 = R6;
           R5 = R5;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fEq1Sum_$cliftEq_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEqSum_$c==_info" {
     Data.Functor.Sum.$fEqSum_$c==_info:
         const Data.Functor.Sum.$fEqSum_$c==_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.704173106 UTC

[section ""data" . Data.Functor.Sum.$fEqSum_$c/=_closure" {
     Data.Functor.Sum.$fEqSum_$c/=_closure:
         const Data.Functor.Sum.$fEqSum_$c/=_info;
 },
 sat_sfXS1_entry() //  [R1]
         { []
         }
     {offset
       cg0jV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0jW; else goto cg0jX;
       cg0jW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0jX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXS1_info" {
     sat_sfXS1_info:
         const sat_sfXS1_entry;
         const 1;
         const 16;
 },
 sat_sfXS8_entry() //  [R1]
         { []
         }
     {offset
       cg0ka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0kb; else goto cg0kc;
       cg0kb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0kc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXS8_info" {
     sat_sfXS8_info:
         const sat_sfXS8_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fEqSum_$c/=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0kh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0ki; else goto cg0kj;
       cg0ki: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEqSum_$c/=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0kj: // global
           I64[Sp - 40] = block_cg0jH_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0ld; else goto cg0jI;
       ug0ld: // global
           call _cg0jH(R1) args: 0, res: 0, upd: 0;
       cg0jI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEqSum_$c/=_info" {
     Data.Functor.Sum.$fEqSum_$c/=_info:
         const Data.Functor.Sum.$fEqSum_$c/=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0jH() //  [R1]
         { []
         }
     {offset
       cg0jH: // global
           _sfXRW::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg0ke; else goto cg0kf;
       cg0ke: // global
           I64[Sp] = block_cg0jM_info;
           _sfXRY::P64 = P64[R1 + 7];
           R1 = _sfXRW::P64;
           P64[Sp + 32] = _sfXRY::P64;
           if (R1 & 7 != 0) goto ug0l9; else goto cg0jN;
       ug0l9: // global
           call _cg0jM(R1) args: 0, res: 0, upd: 0;
       cg0jN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg0kf: // global
           I64[Sp + 8] = block_cg0k0_info;
           _sfXS4::P64 = P64[R1 + 6];
           R1 = _sfXRW::P64;
           P64[Sp + 32] = _sfXS4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug0la; else goto cg0k1;
       ug0la: // global
           call _cg0k0(R1) args: 0, res: 0, upd: 0;
       cg0k1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0jH_info" {
     block_cg0jH_info:
         const _cg0jH;
         const 4;
         const 30;
 },
 _cg0jM() //  [R1]
         { []
         }
     {offset
       cg0jM: // global
           if (R1 & 7 == 1) goto cg0kn; else goto ug0l6;
       cg0kn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0kq; else goto cg0kp;
       cg0kq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0kp: // global
           _sfXS0::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sfXS1_info;
           P64[Hp] = P64[Sp + 24];
           _sfXRY::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg0kl_info;
           R4 = _sfXS0::P64;
           R3 = _sfXRY::P64;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ug0l6: // global
           Sp = Sp + 40;
           call _cg0kU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0jM_info" {
     block_cg0jM_info:
         const _cg0jM;
         const 132;
         const 30;
 },
 _cg0kl() //  [R1]
         { []
         }
     {offset
       cg0kl: // global
           if (R1 & 7 == 1) goto ug0l7; else goto ug0l8;
       ug0l7: // global
           Sp = Sp + 8;
           call _cg0kU() args: 0, res: 0, upd: 0;
       ug0l8: // global
           Sp = Sp + 8;
           call _cg0kY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0kl_info" {
     block_cg0kl_info:
         const _cg0kl;
         const 0;
         const 30;
 },
 _cg0k0() //  [R1]
         { []
         }
     {offset
       cg0k0: // global
           if (R1 & 7 == 1) goto ug0l3; else goto cg0kL;
       ug0l3: // global
           Sp = Sp + 32;
           call _cg0kU() args: 0, res: 0, upd: 0;
       cg0kL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0kO; else goto cg0kN;
       cg0kO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0kN: // global
           _sfXS7::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sfXS8_info;
           P64[Hp] = P64[Sp + 16];
           _sfXS4::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg0kK_info;
           R4 = _sfXS7::P64;
           R3 = _sfXS4::P64;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0k0_info" {
     block_cg0k0_info:
         const _cg0k0;
         const 3;
         const 30;
 },
 _cg0kK() //  [R1]
         { []
         }
     {offset
       cg0kK: // global
           if (R1 & 7 == 1) goto ug0l4; else goto ug0l5;
       ug0l4: // global
           Sp = Sp + 8;
           call _cg0kU() args: 0, res: 0, upd: 0;
       ug0l5: // global
           Sp = Sp + 8;
           call _cg0kY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0kK_info" {
     block_cg0kK_info:
         const _cg0kK;
         const 0;
         const 30;
 },
 _cg0kU() //  []
         { []
         }
     {offset
       cg0kU: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg0kY() //  []
         { []
         }
     {offset
       cg0kY: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.723089914 UTC

[section ""data" . Data.Functor.Sum.$fEqSum_closure" {
     Data.Functor.Sum.$fEqSum_closure:
         const Data.Functor.Sum.$fEqSum_info;
 },
 sat_sfXSe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0me: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fEqSum_$c/=_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXSe_info" {
     sat_sfXSe_info:
         const sat_sfXSe_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXSd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0mm: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fEqSum_$c==_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXSd_info" {
     sat_sfXSd_info:
         const sat_sfXSd_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Functor.Sum.$fEqSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0mq: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg0mu; else goto cg0mt;
       cg0mu: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEqSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0mt: // global
           I64[Hp - 80] = sat_sfXSe_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sfXSd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 78;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEqSum_info" {
     Data.Functor.Sum.$fEqSum_info:
         const Data.Functor.Sum.$fEqSum_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.731042002 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$ccompare_closure" {
     Data.Functor.Sum.$fOrdSum_$ccompare_closure:
         const Data.Functor.Sum.$fOrdSum_$ccompare_info;
 },
 sat_sfXSk_entry() //  [R1]
         { []
         }
     {offset
       cg0mQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0mR; else goto cg0mS;
       cg0mR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0mS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSk_info" {
     sat_sfXSk_info:
         const sat_sfXSk_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$ccompare_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg0mT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0mX; else goto cg0mW;
       cg0mX: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0mW: // global
           I64[Hp - 16] = sat_sfXSk_info;
           P64[Hp] = R4;
           R6 = R6;
           R5 = R5;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$ccompare_info" {
     Data.Functor.Sum.$fOrdSum_$ccompare_info:
         const Data.Functor.Sum.$fOrdSum_$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.737628013 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$cp1Ord_closure" {
     Data.Functor.Sum.$fOrdSum_$cp1Ord_closure:
         const Data.Functor.Sum.$fOrdSum_$cp1Ord_info;
 },
 sat_sfXSq_entry() //  [R1]
         { []
         }
     {offset
       cg0ne: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0nf; else goto cg0ng;
       cg0nf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0ng: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSq_info" {
     sat_sfXSq_info:
         const sat_sfXSq_entry;
         const 1;
         const 16;
 },
 sat_sfXSp_entry() //  [R1]
         { []
         }
     {offset
       cg0nl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0nm; else goto cg0nn;
       cg0nm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0nn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSp_info" {
     sat_sfXSp_info:
         const sat_sfXSp_entry;
         const 1;
         const 16;
 },
 sat_sfXSo_entry() //  [R1]
         { []
         }
     {offset
       cg0ns: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0nt; else goto cg0nu;
       cg0nt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0nu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSo_info" {
     sat_sfXSo_info:
         const sat_sfXSo_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$cp1Ord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0nv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg0nz; else goto cg0ny;
       cg0nz: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$cp1Ord_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0ny: // global
           I64[Hp - 64] = sat_sfXSq_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sfXSp_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfXSo_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Sum.$fEqSum_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$cp1Ord_info" {
     Data.Functor.Sum.$fOrdSum_$cp1Ord_info:
         const Data.Functor.Sum.$fOrdSum_$cp1Ord_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.750347998 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c<_closure" {
     Data.Functor.Sum.$fOrdSum_$c<_closure:
         const Data.Functor.Sum.$fOrdSum_$c<_info;
 },
 sat_sfXSA_entry() //  [R1]
         { []
         }
     {offset
       cg0o8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0o9; else goto cg0oa;
       cg0o9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0oa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSA_info" {
     sat_sfXSA_info:
         const sat_sfXSA_entry;
         const 1;
         const 16;
 },
 sat_sfXSH_entry() //  [R1]
         { []
         }
     {offset
       cg0on: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0oo; else goto cg0op;
       cg0oo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0op: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSH_info" {
     sat_sfXSH_info:
         const sat_sfXSH_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0ou: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0ov; else goto cg0ow;
       cg0ov: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0ow: // global
           I64[Sp - 40] = block_cg0nU_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0pq; else goto cg0nV;
       ug0pq: // global
           call _cg0nU(R1) args: 0, res: 0, upd: 0;
       cg0nV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c<_info" {
     Data.Functor.Sum.$fOrdSum_$c<_info:
         const Data.Functor.Sum.$fOrdSum_$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0nU() //  [R1]
         { []
         }
     {offset
       cg0nU: // global
           _sfXSv::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg0or; else goto cg0os;
       cg0or: // global
           I64[Sp] = block_cg0nZ_info;
           _sfXSx::P64 = P64[R1 + 7];
           R1 = _sfXSv::P64;
           P64[Sp + 32] = _sfXSx::P64;
           if (R1 & 7 != 0) goto ug0pm; else goto cg0o0;
       ug0pm: // global
           call _cg0nZ(R1) args: 0, res: 0, upd: 0;
       cg0o0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg0os: // global
           I64[Sp + 8] = block_cg0od_info;
           _sfXSD::P64 = P64[R1 + 6];
           R1 = _sfXSv::P64;
           P64[Sp + 32] = _sfXSD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug0pn; else goto cg0oe;
       ug0pn: // global
           call _cg0od(R1) args: 0, res: 0, upd: 0;
       cg0oe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0nU_info" {
     block_cg0nU_info:
         const _cg0nU;
         const 4;
         const 30;
 },
 _cg0nZ() //  [R1]
         { []
         }
     {offset
       cg0nZ: // global
           if (R1 & 7 == 1) goto cg0oA; else goto ug0pj;
       cg0oA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0oD; else goto cg0oC;
       cg0oD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0oC: // global
           _sfXSz::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sfXSA_info;
           P64[Hp] = P64[Sp + 24];
           _sfXSx::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg0oy_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sfXSx::P64;
           P64[Sp + 24] = _sfXSz::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug0pj: // global
           Sp = Sp + 40;
           call _cg0pb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0nZ_info" {
     block_cg0nZ_info:
         const _cg0nZ;
         const 132;
         const 30;
 },
 _cg0oy() //  [R1]
         { []
         }
     {offset
       cg0oy: // global
           if (R1 & 7 == 1) goto ug0pk; else goto ug0pl;
       ug0pk: // global
           Sp = Sp + 8;
           call _cg0pb() args: 0, res: 0, upd: 0;
       ug0pl: // global
           Sp = Sp + 8;
           call _cg0p7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0oy_info" {
     block_cg0oy_info:
         const _cg0oy;
         const 0;
         const 30;
 },
 _cg0od() //  [R1]
         { []
         }
     {offset
       cg0od: // global
           if (R1 & 7 == 1) goto ug0pg; else goto cg0oY;
       ug0pg: // global
           Sp = Sp + 32;
           call _cg0p7() args: 0, res: 0, upd: 0;
       cg0oY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0p1; else goto cg0p0;
       cg0p1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0p0: // global
           _sfXSG::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sfXSH_info;
           P64[Hp] = P64[Sp + 16];
           _sfXSD::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg0oX_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sfXSD::P64;
           P64[Sp + 16] = _sfXSG::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0od_info" {
     block_cg0od_info:
         const _cg0od;
         const 3;
         const 30;
 },
 _cg0oX() //  [R1]
         { []
         }
     {offset
       cg0oX: // global
           if (R1 & 7 == 1) goto ug0ph; else goto ug0pi;
       ug0ph: // global
           Sp = Sp + 8;
           call _cg0pb() args: 0, res: 0, upd: 0;
       ug0pi: // global
           Sp = Sp + 8;
           call _cg0p7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0oX_info" {
     block_cg0oX_info:
         const _cg0oX;
         const 0;
         const 30;
 },
 _cg0pb() //  []
         { []
         }
     {offset
       cg0pb: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg0p7() //  []
         { []
         }
     {offset
       cg0p7: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.772217871 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c>=_closure" {
     Data.Functor.Sum.$fOrdSum_$c>=_closure:
         const Data.Functor.Sum.$fOrdSum_$c>=_info;
 },
 sat_sfXSS_entry() //  [R1]
         { []
         }
     {offset
       cg0qC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0qD; else goto cg0qE;
       cg0qD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0qE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSS_info" {
     sat_sfXSS_info:
         const sat_sfXSS_entry;
         const 1;
         const 16;
 },
 sat_sfXSZ_entry() //  [R1]
         { []
         }
     {offset
       cg0qR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0qS; else goto cg0qT;
       cg0qS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0qT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXSZ_info" {
     sat_sfXSZ_info:
         const sat_sfXSZ_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c>=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0qY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0qZ; else goto cg0r0;
       cg0qZ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c>=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0r0: // global
           I64[Sp - 40] = block_cg0qo_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0rU; else goto cg0qp;
       ug0rU: // global
           call _cg0qo(R1) args: 0, res: 0, upd: 0;
       cg0qp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c>=_info" {
     Data.Functor.Sum.$fOrdSum_$c>=_info:
         const Data.Functor.Sum.$fOrdSum_$c>=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0qo() //  [R1]
         { []
         }
     {offset
       cg0qo: // global
           _sfXSN::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg0qV; else goto cg0qW;
       cg0qV: // global
           I64[Sp] = block_cg0qt_info;
           _sfXSP::P64 = P64[R1 + 7];
           R1 = _sfXSN::P64;
           P64[Sp + 32] = _sfXSP::P64;
           if (R1 & 7 != 0) goto ug0rQ; else goto cg0qu;
       ug0rQ: // global
           call _cg0qt(R1) args: 0, res: 0, upd: 0;
       cg0qu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg0qW: // global
           I64[Sp + 8] = block_cg0qH_info;
           _sfXSV::P64 = P64[R1 + 6];
           R1 = _sfXSN::P64;
           P64[Sp + 32] = _sfXSV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug0rR; else goto cg0qI;
       ug0rR: // global
           call _cg0qH(R1) args: 0, res: 0, upd: 0;
       cg0qI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0qo_info" {
     block_cg0qo_info:
         const _cg0qo;
         const 4;
         const 30;
 },
 _cg0qt() //  [R1]
         { []
         }
     {offset
       cg0qt: // global
           if (R1 & 7 == 1) goto cg0r4; else goto ug0rN;
       cg0r4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0r7; else goto cg0r6;
       cg0r7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0r6: // global
           _sfXSR::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sfXSS_info;
           P64[Hp] = P64[Sp + 24];
           _sfXSP::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg0r2_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sfXSP::P64;
           P64[Sp + 24] = _sfXSR::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug0rN: // global
           Sp = Sp + 40;
           call _cg0rF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0qt_info" {
     block_cg0qt_info:
         const _cg0qt;
         const 132;
         const 30;
 },
 _cg0r2() //  [R1]
         { []
         }
     {offset
       cg0r2: // global
           if (R1 & 7 == 1) goto ug0rO; else goto ug0rP;
       ug0rO: // global
           Sp = Sp + 8;
           call _cg0rF() args: 0, res: 0, upd: 0;
       ug0rP: // global
           Sp = Sp + 8;
           call _cg0rB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0r2_info" {
     block_cg0r2_info:
         const _cg0r2;
         const 0;
         const 30;
 },
 _cg0qH() //  [R1]
         { []
         }
     {offset
       cg0qH: // global
           if (R1 & 7 == 1) goto ug0rK; else goto cg0rs;
       ug0rK: // global
           Sp = Sp + 32;
           call _cg0rB() args: 0, res: 0, upd: 0;
       cg0rs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0rv; else goto cg0ru;
       cg0rv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0ru: // global
           _sfXSY::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sfXSZ_info;
           P64[Hp] = P64[Sp + 16];
           _sfXSV::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg0rr_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sfXSV::P64;
           P64[Sp + 16] = _sfXSY::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0qH_info" {
     block_cg0qH_info:
         const _cg0qH;
         const 3;
         const 30;
 },
 _cg0rr() //  [R1]
         { []
         }
     {offset
       cg0rr: // global
           if (R1 & 7 == 1) goto ug0rL; else goto ug0rM;
       ug0rL: // global
           Sp = Sp + 8;
           call _cg0rF() args: 0, res: 0, upd: 0;
       ug0rM: // global
           Sp = Sp + 8;
           call _cg0rB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0rr_info" {
     block_cg0rr_info:
         const _cg0rr;
         const 0;
         const 30;
 },
 _cg0rF() //  []
         { []
         }
     {offset
       cg0rF: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg0rB() //  []
         { []
         }
     {offset
       cg0rB: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.793026733 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c>_closure" {
     Data.Functor.Sum.$fOrdSum_$c>_closure:
         const Data.Functor.Sum.$fOrdSum_$c>_info;
 },
 sat_sfXTa_entry() //  [R1]
         { []
         }
     {offset
       cg0t6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0t7; else goto cg0t8;
       cg0t7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0t8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXTa_info" {
     sat_sfXTa_info:
         const sat_sfXTa_entry;
         const 1;
         const 16;
 },
 sat_sfXTh_entry() //  [R1]
         { []
         }
     {offset
       cg0tl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0tm; else goto cg0tn;
       cg0tm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0tn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXTh_info" {
     sat_sfXTh_info:
         const sat_sfXTh_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0ts: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0tt; else goto cg0tu;
       cg0tt: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0tu: // global
           I64[Sp - 40] = block_cg0sS_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0uo; else goto cg0sT;
       ug0uo: // global
           call _cg0sS(R1) args: 0, res: 0, upd: 0;
       cg0sT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c>_info" {
     Data.Functor.Sum.$fOrdSum_$c>_info:
         const Data.Functor.Sum.$fOrdSum_$c>_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0sS() //  [R1]
         { []
         }
     {offset
       cg0sS: // global
           _sfXT5::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg0tp; else goto cg0tq;
       cg0tp: // global
           I64[Sp] = block_cg0sX_info;
           _sfXT7::P64 = P64[R1 + 7];
           R1 = _sfXT5::P64;
           P64[Sp + 32] = _sfXT7::P64;
           if (R1 & 7 != 0) goto ug0uk; else goto cg0sY;
       ug0uk: // global
           call _cg0sX(R1) args: 0, res: 0, upd: 0;
       cg0sY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg0tq: // global
           I64[Sp + 8] = block_cg0tb_info;
           _sfXTd::P64 = P64[R1 + 6];
           R1 = _sfXT5::P64;
           P64[Sp + 32] = _sfXTd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug0ul; else goto cg0tc;
       ug0ul: // global
           call _cg0tb(R1) args: 0, res: 0, upd: 0;
       cg0tc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0sS_info" {
     block_cg0sS_info:
         const _cg0sS;
         const 4;
         const 30;
 },
 _cg0sX() //  [R1]
         { []
         }
     {offset
       cg0sX: // global
           if (R1 & 7 == 1) goto cg0ty; else goto ug0uh;
       cg0ty: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0tB; else goto cg0tA;
       cg0tB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0tA: // global
           _sfXT9::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sfXTa_info;
           P64[Hp] = P64[Sp + 24];
           _sfXT7::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg0tw_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sfXT7::P64;
           P64[Sp + 24] = _sfXT9::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug0uh: // global
           Sp = Sp + 40;
           call _cg0u5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0sX_info" {
     block_cg0sX_info:
         const _cg0sX;
         const 132;
         const 30;
 },
 _cg0tw() //  [R1]
         { []
         }
     {offset
       cg0tw: // global
           if (R1 & 7 == 3) goto ug0ui; else goto ug0uj;
       ug0ui: // global
           Sp = Sp + 8;
           call _cg0u9() args: 0, res: 0, upd: 0;
       ug0uj: // global
           Sp = Sp + 8;
           call _cg0u5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0tw_info" {
     block_cg0tw_info:
         const _cg0tw;
         const 0;
         const 30;
 },
 _cg0tb() //  [R1]
         { []
         }
     {offset
       cg0tb: // global
           if (R1 & 7 == 1) goto ug0ue; else goto cg0tW;
       ug0ue: // global
           Sp = Sp + 32;
           call _cg0u9() args: 0, res: 0, upd: 0;
       cg0tW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0tZ; else goto cg0tY;
       cg0tZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0tY: // global
           _sfXTg::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sfXTh_info;
           P64[Hp] = P64[Sp + 16];
           _sfXTd::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg0tV_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sfXTd::P64;
           P64[Sp + 16] = _sfXTg::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0tb_info" {
     block_cg0tb_info:
         const _cg0tb;
         const 3;
         const 30;
 },
 _cg0tV() //  [R1]
         { []
         }
     {offset
       cg0tV: // global
           if (R1 & 7 == 3) goto ug0uf; else goto ug0ug;
       ug0uf: // global
           Sp = Sp + 8;
           call _cg0u9() args: 0, res: 0, upd: 0;
       ug0ug: // global
           Sp = Sp + 8;
           call _cg0u5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0tV_info" {
     block_cg0tV_info:
         const _cg0tV;
         const 0;
         const 30;
 },
 _cg0u9() //  []
         { []
         }
     {offset
       cg0u9: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg0u5() //  []
         { []
         }
     {offset
       cg0u5: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.8146034 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c<=_closure" {
     Data.Functor.Sum.$fOrdSum_$c<=_closure:
         const Data.Functor.Sum.$fOrdSum_$c<=_info;
 },
 sat_sfXTs_entry() //  [R1]
         { []
         }
     {offset
       cg0vA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0vB; else goto cg0vC;
       cg0vB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0vC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXTs_info" {
     sat_sfXTs_info:
         const sat_sfXTs_entry;
         const 1;
         const 16;
 },
 sat_sfXTz_entry() //  [R1]
         { []
         }
     {offset
       cg0vP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0vQ; else goto cg0vR;
       cg0vQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0vR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXTz_info" {
     sat_sfXTz_info:
         const sat_sfXTz_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0vW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0vX; else goto cg0vY;
       cg0vX: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0vY: // global
           I64[Sp - 40] = block_cg0vm_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0wS; else goto cg0vn;
       ug0wS: // global
           call _cg0vm(R1) args: 0, res: 0, upd: 0;
       cg0vn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c<=_info" {
     Data.Functor.Sum.$fOrdSum_$c<=_info:
         const Data.Functor.Sum.$fOrdSum_$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0vm() //  [R1]
         { []
         }
     {offset
       cg0vm: // global
           _sfXTn::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg0vT; else goto cg0vU;
       cg0vT: // global
           I64[Sp] = block_cg0vr_info;
           _sfXTp::P64 = P64[R1 + 7];
           R1 = _sfXTn::P64;
           P64[Sp + 32] = _sfXTp::P64;
           if (R1 & 7 != 0) goto ug0wO; else goto cg0vs;
       ug0wO: // global
           call _cg0vr(R1) args: 0, res: 0, upd: 0;
       cg0vs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg0vU: // global
           I64[Sp + 8] = block_cg0vF_info;
           _sfXTv::P64 = P64[R1 + 6];
           R1 = _sfXTn::P64;
           P64[Sp + 32] = _sfXTv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug0wP; else goto cg0vG;
       ug0wP: // global
           call _cg0vF(R1) args: 0, res: 0, upd: 0;
       cg0vG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0vm_info" {
     block_cg0vm_info:
         const _cg0vm;
         const 4;
         const 30;
 },
 _cg0vr() //  [R1]
         { []
         }
     {offset
       cg0vr: // global
           if (R1 & 7 == 1) goto cg0w2; else goto ug0wL;
       cg0w2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0w5; else goto cg0w4;
       cg0w5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0w4: // global
           _sfXTr::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sfXTs_info;
           P64[Hp] = P64[Sp + 24];
           _sfXTp::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg0w0_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sfXTp::P64;
           P64[Sp + 24] = _sfXTr::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug0wL: // global
           Sp = Sp + 40;
           call _cg0wz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0vr_info" {
     block_cg0vr_info:
         const _cg0vr;
         const 132;
         const 30;
 },
 _cg0w0() //  [R1]
         { []
         }
     {offset
       cg0w0: // global
           if (R1 & 7 == 3) goto ug0wM; else goto ug0wN;
       ug0wM: // global
           Sp = Sp + 8;
           call _cg0wD() args: 0, res: 0, upd: 0;
       ug0wN: // global
           Sp = Sp + 8;
           call _cg0wz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0w0_info" {
     block_cg0w0_info:
         const _cg0w0;
         const 0;
         const 30;
 },
 _cg0vF() //  [R1]
         { []
         }
     {offset
       cg0vF: // global
           if (R1 & 7 == 1) goto ug0wI; else goto cg0wq;
       ug0wI: // global
           Sp = Sp + 32;
           call _cg0wD() args: 0, res: 0, upd: 0;
       cg0wq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg0wt; else goto cg0ws;
       cg0wt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0ws: // global
           _sfXTy::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sfXTz_info;
           P64[Hp] = P64[Sp + 16];
           _sfXTv::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg0wp_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sfXTv::P64;
           P64[Sp + 16] = _sfXTy::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0vF_info" {
     block_cg0vF_info:
         const _cg0vF;
         const 3;
         const 30;
 },
 _cg0wp() //  [R1]
         { []
         }
     {offset
       cg0wp: // global
           if (R1 & 7 == 3) goto ug0wJ; else goto ug0wK;
       ug0wJ: // global
           Sp = Sp + 8;
           call _cg0wD() args: 0, res: 0, upd: 0;
       ug0wK: // global
           Sp = Sp + 8;
           call _cg0wz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg0wp_info" {
     block_cg0wp_info:
         const _cg0wp;
         const 0;
         const 30;
 },
 _cg0wD() //  []
         { []
         }
     {offset
       cg0wD: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg0wz() //  []
         { []
         }
     {offset
       cg0wz: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.832705606 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$cmax_closure" {
     Data.Functor.Sum.$fOrdSum_$cmax_closure:
         const Data.Functor.Sum.$fOrdSum_$cmax_info;
 },
 Data.Functor.Sum.$fOrdSum_$cmax_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0xW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0xX; else goto cg0xY;
       cg0xX: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$cmax_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0xY: // global
           I64[Sp - 24] = block_cg0xQ_info;
           _sfXTF::P64 = R6;
           R6 = R6;
           _sfXTE::P64 = R5;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = _sfXTE::P64;
           P64[Sp - 8] = _sfXTF::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fOrdSum_$c<=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$cmax_info" {
     Data.Functor.Sum.$fOrdSum_$cmax_info:
         const Data.Functor.Sum.$fOrdSum_$cmax_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0xQ() //  [R1]
         { []
         }
     {offset
       cg0xQ: // global
           if (R1 & 7 == 1) goto cg0xT; else goto cg0xU;
       cg0xT: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cg0xU: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0xQ_info" {
     block_cg0xQ_info:
         const _cg0xQ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.839420468 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$cmin_closure" {
     Data.Functor.Sum.$fOrdSum_$cmin_closure:
         const Data.Functor.Sum.$fOrdSum_$cmin_info;
 },
 Data.Functor.Sum.$fOrdSum_$cmin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg0yt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0yu; else goto cg0yv;
       cg0yu: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$cmin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0yv: // global
           I64[Sp - 24] = block_cg0yn_info;
           _sfXTL::P64 = R6;
           R6 = R6;
           _sfXTK::P64 = R5;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = _sfXTK::P64;
           P64[Sp - 8] = _sfXTL::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fOrdSum_$c<=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$cmin_info" {
     Data.Functor.Sum.$fOrdSum_$cmin_info:
         const Data.Functor.Sum.$fOrdSum_$cmin_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0yn() //  [R1]
         { []
         }
     {offset
       cg0yn: // global
           if (R1 & 7 == 1) goto cg0yq; else goto cg0yr;
       cg0yq: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cg0yr: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0yn_info" {
     block_cg0yn_info:
         const _cg0yn;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.849277177 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_closure" {
     Data.Functor.Sum.$fOrdSum_closure:
         const Data.Functor.Sum.$fOrdSum_info;
 },
 sat_sfXTX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0yZ: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$cmin_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXTX_info" {
     sat_sfXTX_info:
         const sat_sfXTX_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXTW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0z7: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$cmax_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXTW_info" {
     sat_sfXTW_info:
         const sat_sfXTW_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXTV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0zf: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c>=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXTV_info" {
     sat_sfXTV_info:
         const sat_sfXTV_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXTU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0zn: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c>_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXTU_info" {
     sat_sfXTU_info:
         const sat_sfXTU_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXTT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0zv: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c<=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXTT_info" {
     sat_sfXTT_info:
         const sat_sfXTT_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXTS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0zD: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c<_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXTS_info" {
     sat_sfXTS_info:
         const sat_sfXTS_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXTR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0zL: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$ccompare_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXTR_info" {
     sat_sfXTR_info:
         const sat_sfXTR_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sfXTQ_entry() //  [R1]
         { []
         }
     {offset
       cg0zS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0zT; else goto cg0zU;
       cg0zT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0zU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fOrdSum_$cp1Ord_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXTQ_info" {
     sat_sfXTQ_info:
         const sat_sfXTQ_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$fOrdSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0zW: // global
           Hp = Hp + 336;
           if (Hp > HpLim) (likely: False) goto cg0A0; else goto cg0zZ;
       cg0A0: // global
           HpAlloc = 336;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0zZ: // global
           I64[Hp - 328] = sat_sfXTX_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           I64[Hp - 296] = sat_sfXTW_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           I64[Hp - 264] = sat_sfXTV_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           I64[Hp - 232] = sat_sfXTU_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           I64[Hp - 200] = sat_sfXTT_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sfXTS_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sfXTR_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sfXTQ_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 104;
           P64[Hp - 48] = Hp - 134;
           P64[Hp - 40] = Hp - 166;
           P64[Hp - 32] = Hp - 198;
           P64[Hp - 24] = Hp - 230;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 294;
           P64[Hp] = Hp - 326;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_info" {
     Data.Functor.Sum.$fOrdSum_info:
         const Data.Functor.Sum.$fOrdSum_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.866922804 UTC

[section ""data" . Data.Functor.Sum.$fReadSum1_closure" {
     Data.Functor.Sum.$fReadSum1_closure:
         const Data.Functor.Sum.$fReadSum1_info;
         const 0;
 },
 sat_sfXU2_entry() //  [R1]
         { []
         }
     {offset
       cg0AL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0AM; else goto cg0AN;
       cg0AM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0AN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXU2_info" {
     sat_sfXU2_info:
         const sat_sfXU2_entry;
         const 1;
         const 16;
 },
 sat_sfXU1_entry() //  [R1]
         { []
         }
     {offset
       cg0AS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0AT; else goto cg0AU;
       cg0AT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0AU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXU1_info" {
     sat_sfXU1_info:
         const sat_sfXU1_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fReadSum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0AV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0AZ; else goto cg0AY;
       cg0AZ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0AY: // global
           I64[Hp - 40] = sat_sfXU2_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sfXU1_info;
           P64[Hp] = R4;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum1_info" {
     Data.Functor.Sum.$fReadSum1_info:
         const Data.Functor.Sum.$fReadSum1_entry;
         const 0;
         const 17596481011726;
         const 12884901911;
         const SfYa7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.876608972 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_$creadsPrec_closure" {
     Data.Functor.Sum.$fReadSum_$creadsPrec_closure:
         const Data.Functor.Sum.$fReadSum_$creadsPrec_info;
         const 0;
 },
 sat_sfXU8_entry() //  [R1]
         { []
         }
     {offset
       cg0Bo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Bp; else goto cg0Bq;
       cg0Bp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Bq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXU8_info" {
     sat_sfXU8_info:
         const sat_sfXU8_entry;
         const 1;
         const 16;
 },
 sat_sfXU7_entry() //  [R1]
         { []
         }
     {offset
       cg0Bv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Bw; else goto cg0Bx;
       cg0Bw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Bx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXU7_info" {
     sat_sfXU7_info:
         const sat_sfXU7_entry;
         const 1;
         const 16;
 },
 ds_sfXU6_entry() //  [R1]
         { []
         }
     {offset
       cg0By: // global
           _sfXU6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Bz; else goto cg0BA;
       cg0BA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0BC; else goto cg0BB;
       cg0BC: // global
           HpAlloc = 48;
           goto cg0Bz;
       cg0Bz: // global
           R1 = _sfXU6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0BB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfXU6::P64;
           _sfXU3::P64 = P64[_sfXU6::P64 + 16];
           _sfXU4::P64 = P64[_sfXU6::P64 + 24];
           _sfXU5::P64 = P64[_sfXU6::P64 + 32];
           I64[Hp - 40] = sat_sfXU8_info;
           P64[Hp - 24] = _sfXU5::P64;
           I64[Hp - 16] = sat_sfXU7_info;
           P64[Hp] = _sfXU5::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sfXU4::P64;
           R2 = _sfXU3::P64;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfXU6_info" {
     ds_sfXU6_info:
         const ds_sfXU6_entry;
         const 3;
         const 4294967311;
         const SfYa7_srt+40;
 },
 sat_sfXUa_entry() //  [R1]
         { []
         }
     {offset
       cg0BM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0BN; else goto cg0BO;
       cg0BN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0BO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUa_info" {
     sat_sfXUa_info:
         const sat_sfXUa_entry;
         const 2;
         const 18;
 },
 sat_sfXUb_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0BP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg0BT; else goto cg0BS;
       cg0BT: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0BS: // global
           _sfXU6::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfXUa_info;
           P64[Hp - 8] = _sfXU6::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXUb_info" {
     sat_sfXUb_info:
         const sat_sfXUb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Sum.$fReadSum_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0BU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg0BY; else goto cg0BX;
       cg0BY: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0BX: // global
           I64[Hp - 48] = ds_sfXU6_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sfXUb_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_$creadsPrec_info" {
     Data.Functor.Sum.$fReadSum_$creadsPrec_info:
         const Data.Functor.Sum.$fReadSum_$creadsPrec_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const SfYa7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.891088812 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_$creadListPrec_closure" {
     Data.Functor.Sum.$fReadSum_$creadListPrec_closure:
         const Data.Functor.Sum.$fReadSum_$creadListPrec_info;
         const 0;
 },
 sat_sfXUg_entry() //  [R1]
         { []
         }
     {offset
       cg0CA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0CB; else goto cg0CC;
       cg0CB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0CC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUg_info" {
     sat_sfXUg_info:
         const sat_sfXUg_entry;
         const 1;
         const 16;
 },
 sat_sfXUf_entry() //  [R1]
         { []
         }
     {offset
       cg0CH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0CI; else goto cg0CJ;
       cg0CI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0CJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUf_info" {
     sat_sfXUf_info:
         const sat_sfXUf_entry;
         const 1;
         const 16;
 },
 sat_sfXUh_entry() //  [R1]
         { []
         }
     {offset
       cg0CK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0CO; else goto cg0CN;
       cg0CO: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0CN: // global
           _sfXUc::P64 = P64[R1 + 16];
           _sfXUd::P64 = P64[R1 + 24];
           _sfXUe::P64 = P64[R1 + 32];
           I64[Hp - 40] = sat_sfXUg_info;
           P64[Hp - 24] = _sfXUe::P64;
           I64[Hp - 16] = sat_sfXUf_info;
           P64[Hp] = _sfXUe::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sfXUd::P64;
           R2 = _sfXUc::P64;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXUh_info" {
     sat_sfXUh_info:
         const sat_sfXUh_entry;
         const 3;
         const 4294967311;
         const SfYa7_srt+40;
 },
 Data.Functor.Sum.$fReadSum_$creadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0CP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg0CT; else goto cg0CS;
       cg0CT: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0CS: // global
           I64[Hp - 32] = sat_sfXUh_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_$creadListPrec_info" {
     Data.Functor.Sum.$fReadSum_$creadListPrec_info:
         const Data.Functor.Sum.$fReadSum_$creadListPrec_entry;
         const 0;
         const 70390219014158;
         const 12884901911;
         const SfYa7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.900682134 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_$creadList_closure" {
     Data.Functor.Sum.$fReadSum_$creadList_closure:
         const Data.Functor.Sum.$fReadSum_$creadList_info;
         const 0;
 },
 sat_sfXUl_entry() //  [R1]
         { []
         }
     {offset
       cg0Dh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0Di; else goto cg0Dj;
       cg0Di: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Dj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call Data.Functor.Sum.$fReadSum_$creadListPrec_entry(R4,
                                                                R3,
                                                                R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUl_info" {
     sat_sfXUl_info:
         const sat_sfXUl_entry;
         const 3;
         const 4294967311;
         const SfYa7_srt+152;
 },
 Data.Functor.Sum.$fReadSum_$creadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0Dk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg0Do; else goto cg0Dn;
       cg0Do: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Dn: // global
           I64[Hp - 32] = sat_sfXUl_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_$creadList_info" {
     Data.Functor.Sum.$fReadSum_$creadList_info:
         const Data.Functor.Sum.$fReadSum_$creadList_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfYa7_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.908783736 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_closure" {
     Data.Functor.Sum.$fReadSum_closure:
         const Data.Functor.Sum.$fReadSum_info;
         const 0;
 },
 sat_sfXUs_entry() //  [R1]
         { []
         }
     {offset
       cg0DF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0DG; else goto cg0DH;
       cg0DG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0DH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum_$creadListPrec_entry(R4,
                                                                R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUs_info" {
     sat_sfXUs_info:
         const sat_sfXUs_entry;
         const 3;
         const 4294967311;
         const SfYa7_srt+152;
 },
 sat_sfXUr_entry() //  [R1]
         { []
         }
     {offset
       cg0DM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0DN; else goto cg0DO;
       cg0DN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0DO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum1_entry(R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUr_info" {
     sat_sfXUr_info:
         const sat_sfXUr_entry;
         const 3;
         const 4294967311;
         const SfYa7_srt+136;
 },
 sat_sfXUq_entry() //  [R1]
         { []
         }
     {offset
       cg0DT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0DU; else goto cg0DV;
       cg0DU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0DV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum_$creadList_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUq_info" {
     sat_sfXUq_info:
         const sat_sfXUq_entry;
         const 3;
         const 4294967311;
         const SfYa7_srt+160;
 },
 sat_sfXUp_entry() //  [R1]
         { []
         }
     {offset
       cg0E0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0E1; else goto cg0E2;
       cg0E1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0E2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum_$creadsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUp_info" {
     sat_sfXUp_info:
         const sat_sfXUp_entry;
         const 3;
         const 4294967311;
         const SfYa7_srt+144;
 },
 Data.Functor.Sum.$fReadSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0E4: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cg0E8; else goto cg0E7;
       cg0E8: // global
           HpAlloc = 200;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0E7: // global
           I64[Hp - 192] = sat_sfXUs_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sfXUr_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sfXUq_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sfXUp_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 192;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_info" {
     Data.Functor.Sum.$fReadSum_info:
         const Data.Functor.Sum.$fReadSum_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const SfYa7_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.921210398 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_$cshowsPrec_closure" {
     Data.Functor.Sum.$fShowSum_$cshowsPrec_closure:
         const Data.Functor.Sum.$fShowSum_$cshowsPrec_info;
         const 0;
 },
 sat_sfXUB_entry() //  [R1]
         { []
         }
     {offset
       cg0EL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0EM; else goto cg0EN;
       cg0EM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0EN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUB_info" {
     sat_sfXUB_info:
         const sat_sfXUB_entry;
         const 1;
         const 16;
 },
 sat_sfXUA_entry() //  [R1]
         { []
         }
     {offset
       cg0ES: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0ET; else goto cg0EU;
       cg0ET: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0EU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUA_info" {
     sat_sfXUA_info:
         const sat_sfXUA_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fShowSum_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg0EV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0EW; else goto cg0EX;
       cg0EW: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0EX: // global
           I64[Sp - 40] = block_cg0EC_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0F1; else goto cg0ED;
       ug0F1: // global
           call _cg0EC(R1) args: 0, res: 0, upd: 0;
       cg0ED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_$cshowsPrec_info" {
     Data.Functor.Sum.$fShowSum_$cshowsPrec_info:
         const Data.Functor.Sum.$fShowSum_$cshowsPrec_entry;
         const 0;
         const 2203318222862;
         const 21474836505;
         const SfYa7_srt+104;
 },
 _cg0EC() //  [R1]
         { []
         }
     {offset
       cg0EC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0F0; else goto cg0EZ;
       cg0F0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0EZ: // global
           _sfXUz::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sfXUB_info;
           _sfXUv::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sfXUv::P64;
           I64[Hp - 16] = sat_sfXUA_info;
           P64[Hp] = _sfXUv::P64;
           R6 = _sfXUz::I64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0EC_info" {
     block_cg0EC_info:
         const _cg0EC;
         const 4;
         const 4294967326;
         const SfYa7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.935109404 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_$cshow_closure" {
     Data.Functor.Sum.$fShowSum_$cshow_closure:
         const Data.Functor.Sum.$fShowSum_$cshow_info;
         const 0;
 },
 sat_sfXUJ_entry() //  [R1]
         { []
         }
     {offset
       cg0FA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0FB; else goto cg0FC;
       cg0FB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0FC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUJ_info" {
     sat_sfXUJ_info:
         const sat_sfXUJ_entry;
         const 1;
         const 16;
 },
 sat_sfXUI_entry() //  [R1]
         { []
         }
     {offset
       cg0FH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0FI; else goto cg0FJ;
       cg0FI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0FJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUI_info" {
     sat_sfXUI_info:
         const sat_sfXUI_entry;
         const 1;
         const 16;
 },
 sat_sfXUK_entry() //  [R1]
         { []
         }
     {offset
       cg0FK: // global
           _sfXUK::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cg0FL; else goto cg0FM;
       cg0FM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0FO; else goto cg0FN;
       cg0FO: // global
           HpAlloc = 48;
           goto cg0FL;
       cg0FL: // global
           R1 = _sfXUK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0FN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfXUK::P64;
           _sfXUC::P64 = P64[_sfXUK::P64 + 16];
           _sfXUE::P64 = P64[_sfXUK::P64 + 24];
           _sfXUH::P64 = P64[_sfXUK::P64 + 32];
           I64[Hp - 40] = sat_sfXUJ_info;
           P64[Hp - 24] = _sfXUE::P64;
           I64[Hp - 16] = sat_sfXUI_info;
           P64[Hp] = _sfXUE::P64;
           R2 = _sfXUC::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = Hp - 16;
           P64[Sp - 48] = Hp - 40;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sfXUH::P64;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUK_info" {
     sat_sfXUK_info:
         const sat_sfXUK_entry;
         const 3;
         const 15;
 },
 sat_sfXUO_entry() //  [R1]
         { []
         }
     {offset
       cg0FZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0G0; else goto cg0G1;
       cg0G0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0G1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUO_info" {
     sat_sfXUO_info:
         const sat_sfXUO_entry;
         const 1;
         const 16;
 },
 sat_sfXUN_entry() //  [R1]
         { []
         }
     {offset
       cg0G6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0G7; else goto cg0G8;
       cg0G7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0G8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUN_info" {
     sat_sfXUN_info:
         const sat_sfXUN_entry;
         const 1;
         const 16;
 },
 sat_sfXUP_entry() //  [R1]
         { []
         }
     {offset
       cg0G9: // global
           _sfXUP::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cg0Ga; else goto cg0Gb;
       cg0Gb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg0Gd; else goto cg0Gc;
       cg0Gd: // global
           HpAlloc = 48;
           goto cg0Ga;
       cg0Ga: // global
           R1 = _sfXUP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Gc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfXUP::P64;
           _sfXUD::P64 = P64[_sfXUP::P64 + 16];
           _sfXUE::P64 = P64[_sfXUP::P64 + 24];
           _sfXUM::P64 = P64[_sfXUP::P64 + 32];
           I64[Hp - 40] = sat_sfXUO_info;
           P64[Hp - 24] = _sfXUE::P64;
           I64[Hp - 16] = sat_sfXUN_info;
           P64[Hp] = _sfXUE::P64;
           R2 = _sfXUD::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = Hp - 16;
           P64[Sp - 48] = Hp - 40;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sfXUM::P64;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXUP_info" {
     sat_sfXUP_info:
         const sat_sfXUP_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$fShowSum_$cshow_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg0Gi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg0Gj; else goto cg0Gk;
       cg0Gj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Gk: // global
           I64[Sp - 32] = block_cg0Fn_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0Gt; else goto cg0Fo;
       ug0Gt: // global
           call _cg0Fn(R1) args: 0, res: 0, upd: 0;
       cg0Fo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_$cshow_info" {
     Data.Functor.Sum.$fShowSum_$cshow_info:
         const Data.Functor.Sum.$fShowSum_$cshow_entry;
         const 0;
         const 17605070946318;
         const 17179869208;
         const SfYa7_srt+88;
 },
 _cg0Fn() //  [R1]
         { []
         }
     {offset
       cg0Fn: // global
           _sfXUE::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0Gf; else goto cg0Gg;
       cg0Gf: // global
           Hp = Hp + 64;
           _sfXUG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0Gs; else goto cg0Gn;
       cg0Gn: // global
           _sfXUH::P64 = P64[_sfXUG::P64 + 7];
           I64[Hp - 56] = sat_sfXUK_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sfXUE::P64;
           P64[Hp - 24] = _sfXUH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = Data.Functor.Sum.$fRead1Sum7_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cg0Gg: // global
           Hp = Hp + 64;
           _sfXUG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0Gs; else goto cg0Gr;
       cg0Gs: // global
           HpAlloc = 64;
           R1 = _sfXUG::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0Gr: // global
           _sfXUM::P64 = P64[_sfXUG::P64 + 6];
           I64[Hp - 56] = sat_sfXUP_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sfXUE::P64;
           P64[Hp - 24] = _sfXUM::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = Data.Functor.Sum.$fRead1Sum3_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Fn_info" {
     block_cg0Fn_info:
         const _cg0Fn;
         const 3;
         const 12884901918;
         const SfYa7_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.953994374 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_$cshowList_closure" {
     Data.Functor.Sum.$fShowSum_$cshowList_closure:
         const Data.Functor.Sum.$fShowSum_$cshowList_info;
         const 0;
 },
 lvl8_sfXUW_entry() //  [R1]
         { []
         }
     {offset
       cg0Hj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Hk; else goto cg0Hl;
       cg0Hk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Hl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sfXUW_info" {
     lvl8_sfXUW_info:
         const lvl8_sfXUW_entry;
         const 1;
         const 16;
 },
 lvl9_sfXUX_entry() //  [R1]
         { []
         }
     {offset
       cg0Hq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Hr; else goto cg0Hs;
       cg0Hr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Hs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sfXUX_info" {
     lvl9_sfXUX_info:
         const lvl9_sfXUX_entry;
         const 1;
         const 16;
 },
 sat_sfXUZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0Hy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg0Hz; else goto cg0HA;
       cg0Hz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0HA: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sfXUY::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sfXUY::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXUZ_info" {
     sat_sfXUZ_info:
         const sat_sfXUZ_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SfYa7_srt+104;
 },
 Data.Functor.Sum.$fShowSum_$cshowList_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cg0HB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg0HF; else goto cg0HE;
       cg0HF: // global
           HpAlloc = 88;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0HE: // global
           I64[Hp - 80] = lvl8_sfXUW_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl9_sfXUX_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sfXUZ_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 31;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_$cshowList_info" {
     Data.Functor.Sum.$fShowSum_$cshowList_info:
         const Data.Functor.Sum.$fShowSum_$cshowList_entry;
         const 0;
         const 8800387989518;
         const 21474836505;
         const SfYa7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.964543603 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_closure" {
     Data.Functor.Sum.$fShowSum_closure:
         const Data.Functor.Sum.$fShowSum_info;
         const 0;
 },
 sat_sfXV5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0I7: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fShowSum_$cshowList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXV5_info" {
     sat_sfXV5_info:
         const sat_sfXV5_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SfYa7_srt+192;
 },
 sat_sfXV4_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0If: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fShowSum_$cshow_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXV4_info" {
     sat_sfXV4_info:
         const sat_sfXV4_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SfYa7_srt+184;
 },
 sat_sfXV3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0In: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fShowSum_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXV3_info" {
     sat_sfXV3_info:
         const sat_sfXV3_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SfYa7_srt+176;
 },
 Data.Functor.Sum.$fShowSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0Ir: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cg0Iv; else goto cg0Iu;
       cg0Iv: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Iu: // global
           I64[Hp - 120] = sat_sfXV5_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sfXV4_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sfXV3_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_info" {
     Data.Functor.Sum.$fShowSum_info:
         const Data.Functor.Sum.$fShowSum_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SfYa7_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.975801084 UTC

[section ""data" . Data.Functor.Sum.$fFunctorSum_$cfmap_closure" {
     Data.Functor.Sum.$fFunctorSum_$cfmap_closure:
         const Data.Functor.Sum.$fFunctorSum_$cfmap_info;
 },
 sat_sfXVc_entry() //  [R1]
         { []
         }
     {offset
       cg0J0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0J1; else goto cg0J2;
       cg0J1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0J2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXVc_info" {
     sat_sfXVc_info:
         const sat_sfXVc_entry;
         const 3;
         const 15;
 },
 sat_sfXVe_entry() //  [R1]
         { []
         }
     {offset
       cg0J9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0Ja; else goto cg0Jb;
       cg0Ja: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Jb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXVe_info" {
     sat_sfXVe_info:
         const sat_sfXVe_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$fFunctorSum_$cfmap_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg0Jg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg0Jh; else goto cg0Ji;
       cg0Jh: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFunctorSum_$cfmap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Ji: // global
           I64[Sp - 32] = block_cg0IR_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0Jr; else goto cg0IS;
       ug0Jr: // global
           call _cg0IR(R1) args: 0, res: 0, upd: 0;
       cg0IS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFunctorSum_$cfmap_info" {
     Data.Functor.Sum.$fFunctorSum_$cfmap_info:
         const Data.Functor.Sum.$fFunctorSum_$cfmap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg0IR() //  [R1]
         { []
         }
     {offset
       cg0IR: // global
           _sfXV8::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0Jd; else goto cg0Je;
       cg0Jd: // global
           Hp = Hp + 56;
           _sfXVa::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0Jq; else goto cg0Jl;
       cg0Jl: // global
           _sfXVb::P64 = P64[_sfXVa::P64 + 7];
           I64[Hp - 48] = sat_sfXVc_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfXV8::P64;
           P64[Hp - 16] = _sfXVb::P64;
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg0Je: // global
           Hp = Hp + 56;
           _sfXVa::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0Jq; else goto cg0Jp;
       cg0Jq: // global
           HpAlloc = 56;
           R1 = _sfXVa::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0Jp: // global
           _sfXVd::P64 = P64[_sfXVa::P64 + 6];
           I64[Hp - 48] = sat_sfXVe_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _sfXV8::P64;
           P64[Hp - 16] = _sfXVd::P64;
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0IR_info" {
     block_cg0IR_info:
         const _cg0IR;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.986860367 UTC

[section ""data" . Data.Functor.Sum.$fFunctorSum_$c<$_closure" {
     Data.Functor.Sum.$fFunctorSum_$c<$_closure:
         const Data.Functor.Sum.$fFunctorSum_$c<$_info;
 },
 sat_sfXVk_entry() //  [R1]
         { []
         }
     {offset
       cg0K4: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXVk_info" {
     sat_sfXVk_info:
         const sat_sfXVk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Sum.$fFunctorSum_$c<$_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg0K7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0Kb; else goto cg0Ka;
       cg0Kb: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFunctorSum_$c<$_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Ka: // global
           I64[Hp - 8] = sat_sfXVk_info;
           P64[Hp] = R4;
           R5 = R5;
           R4 = Hp - 7;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fFunctorSum_$cfmap_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFunctorSum_$c<$_info" {
     Data.Functor.Sum.$fFunctorSum_$c<$_info:
         const Data.Functor.Sum.$fFunctorSum_$c<$_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:47.994317362 UTC

[section ""data" . Data.Functor.Sum.$fFunctorSum_closure" {
     Data.Functor.Sum.$fFunctorSum_closure:
         const Data.Functor.Sum.$fFunctorSum_info;
 },
 sat_sfXVo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0Ks: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFunctorSum_$c<$_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXVo_info" {
     sat_sfXVo_info:
         const sat_sfXVo_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfXVn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0KA: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFunctorSum_$cfmap_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXVn_info" {
     sat_sfXVn_info:
         const sat_sfXVn_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Sum.$fFunctorSum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg0KE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg0KI; else goto cg0KH;
       cg0KI: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFunctorSum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0KH: // global
           I64[Hp - 64] = sat_sfXVo_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sfXVn_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFunctorSum_info" {
     Data.Functor.Sum.$fFunctorSum_info:
         const Data.Functor.Sum.$fFunctorSum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.003277763 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldMap_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldMap_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldMap_info;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldMap_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cg0L7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0L8; else goto cg0L9;
       cg0L8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0L9: // global
           I64[Sp - 40] = block_cg0L0_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0Lg; else goto cg0L1;
       ug0Lg: // global
           call _cg0L0(R1) args: 0, res: 0, upd: 0;
       cg0L1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldMap_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldMap_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg0L0() //  [R1]
         { []
         }
     {offset
       cg0L0: // global
           _sfXVr::P64 = P64[Sp + 24];
           _sfXVs::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg0L4; else goto cg0L5;
       cg0L4: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _sfXVr::P64;
           P64[Sp + 24] = _sfXVs::P64;
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg0L5: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _sfXVr::P64;
           P64[Sp + 24] = _sfXVs::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0L0_info" {
     block_cg0L0_info:
         const _cg0L0;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.010233399 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfold_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfold_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfold_info;
 },
 Data.Functor.Sum.$fFoldableSum_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg0LF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg0LG; else goto cg0LH;
       cg0LG: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0LH: // global
           I64[Sp - 32] = block_cg0Ly_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0LO; else goto cg0Lz;
       ug0LO: // global
           call _cg0Ly(R1) args: 0, res: 0, upd: 0;
       cg0Lz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfold_info" {
     Data.Functor.Sum.$fFoldableSum_$cfold_info:
         const Data.Functor.Sum.$fFoldableSum_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg0Ly() //  [R1]
         { []
         }
     {offset
       cg0Ly: // global
           _sfXVz::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0LC; else goto cg0LD;
       cg0LC: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sfXVz::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg0LD: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sfXVz::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Ly_info" {
     block_cg0Ly_info:
         const _cg0Ly;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.016465173 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum2_closure" {
     Data.Functor.Sum.$fFoldableSum2_closure:
         const Data.Functor.Sum.$fFoldableSum2_info;
 },
 Data.Functor.Sum.$fFoldableSum2_entry() //  [R2]
         { []
         }
     {offset
       cg0M6: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum2_info" {
     Data.Functor.Sum.$fFoldableSum2_info:
         const Data.Functor.Sum.$fFoldableSum2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.022330899 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum3_closure" {
     Data.Functor.Sum.$fFoldableSum3_closure:
         const Data.Functor.Sum.$fFoldableSum3_info;
         const 0;
 },
 $dMonoid_sfXVI_entry() //  [R1]
         { []
         }
     {offset
       cg0Ml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Mm; else goto cg0Mn;
       cg0Mm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Mn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sfXVI_info" {
     $dMonoid_sfXVI_info:
         const $dMonoid_sfXVI_entry;
         const 1;
         const 4294967312;
         const SfYa7_srt+208;
 },
 sat_sfXVN_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0MA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg0MB; else goto cg0MC;
       cg0MB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0MC: // global
           I64[Sp - 32] = block_cg0Mt_info;
           _sfXVF::P64 = P64[R1 + 7];
           _sfXVG::P64 = P64[R1 + 15];
           _sfXVI::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sfXVF::P64;
           P64[Sp - 16] = _sfXVG::P64;
           P64[Sp - 8] = _sfXVI::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0MJ; else goto cg0Mu;
       ug0MJ: // global
           call _cg0Mt(R1) args: 0, res: 0, upd: 0;
       cg0Mu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXVN_info" {
     sat_sfXVN_info:
         const sat_sfXVN_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cg0Mt() //  [R1]
         { []
         }
     {offset
       cg0Mt: // global
           _sfXVI::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0Mx; else goto cg0My;
       cg0Mx: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sfXVI::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg0My: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sfXVI::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Mt_info" {
     block_cg0Mt_info:
         const _cg0Mt;
         const 3;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0MK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg0MO; else goto cg0MN;
       cg0MO: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0MN: // global
           I64[Hp - 48] = $dMonoid_sfXVI_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sfXVN_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum3_info" {
     Data.Functor.Sum.$fFoldableSum3_info:
         const Data.Functor.Sum.$fFoldableSum3_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfYa7_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.03303008 UTC

[section ""cstring" . lvl_rfXP1_bytes" {
     lvl_rfXP1_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.036027261 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum4_closure" {
     Data.Functor.Sum.$fFoldableSum4_closure:
         const Data.Functor.Sum.$fFoldableSum4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum4_entry() //  [R1]
         { []
         }
     {offset
       cg0Nk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0Nl; else goto cg0Nm;
       cg0Nl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Nm: // global
           (_cg0Nf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg0Nf::I64 == 0) goto cg0Nh; else goto cg0Ng;
       cg0Nh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg0Ng: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg0Nf::I64;
           I64[Sp - 24] = block_cg0Ni_info;
           R2 = lvl_rfXP1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum4_info" {
     Data.Functor.Sum.$fFoldableSum4_info:
         const Data.Functor.Sum.$fFoldableSum4_entry;
         const 0;
         const 4294967317;
         const SfYa7_srt+224;
 },
 _cg0Ni() //  [R1]
         { []
         }
     {offset
       cg0Ni: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0Ni_info" {
     block_cg0Ni_info:
         const _cg0Ni;
         const 0;
         const 4294967326;
         const SfYa7_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.046225624 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cminimum_closure" {
     Data.Functor.Sum.$fFoldableSum_$cminimum_closure:
         const Data.Functor.Sum.$fFoldableSum_$cminimum_info;
         const 0;
 },
 g1_sfXVS_entry() //  [R1]
         { []
         }
     {offset
       cg0NI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0NJ; else goto cg0NK;
       cg0NJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0NK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_sfXVS_info" {
     g1_sfXVS_info:
         const g1_sfXVS_entry;
         const 1;
         const 4294967312;
         const SfYa7_srt+232;
 },
 sat_sfXW1_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0NX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0NY; else goto cg0NZ;
       cg0NY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0NZ: // global
           I64[Sp - 32] = block_cg0NQ_info;
           _sfXVP::P64 = P64[R1 + 7];
           _sfXVQ::P64 = P64[R1 + 15];
           _sfXVS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sfXVP::P64;
           P64[Sp - 16] = _sfXVQ::P64;
           P64[Sp - 8] = _sfXVS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0Ow; else goto cg0NR;
       ug0Ow: // global
           call _cg0NQ(R1) args: 0, res: 0, upd: 0;
       cg0NR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXW1_info" {
     sat_sfXW1_info:
         const sat_sfXW1_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SfYa7_srt+240;
 },
 _cg0NQ() //  [R1]
         { []
         }
     {offset
       cg0NQ: // global
           _sfXVS::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0NU; else goto cg0NV;
       cg0NU: // global
           I64[Sp + 24] = block_cg0O2_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sfXVS::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cg0NV: // global
           I64[Sp + 24] = block_cg0Og_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sfXVS::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0NQ_info" {
     block_cg0NQ_info:
         const _cg0NQ;
         const 3;
         const 4294967326;
         const SfYa7_srt+240;
 },
 _cg0O2() //  [R1]
         { []
         }
     {offset
       cg0O2: // global
           if (R1 & 7 == 1) goto ug0Ov; else goto cg0Od;
       ug0Ov: // global
           Sp = Sp + 8;
           call _cg0On() args: 0, res: 0, upd: 0;
       cg0Od: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0O2_info" {
     block_cg0O2_info:
         const _cg0O2;
         const 0;
         const 4294967326;
         const SfYa7_srt+240;
 },
 _cg0Og() //  [R1]
         { []
         }
     {offset
       cg0Og: // global
           if (R1 & 7 == 1) goto ug0Ou; else goto cg0Or;
       ug0Ou: // global
           Sp = Sp + 8;
           call _cg0On() args: 0, res: 0, upd: 0;
       cg0Or: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Og_info" {
     block_cg0Og_info:
         const _cg0Og;
         const 0;
         const 4294967326;
         const SfYa7_srt+240;
 },
 _cg0On() //  []
         { []
         }
     {offset
       cg0On: // global
           R1 = Data.Functor.Sum.$fFoldableSum4_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fFoldableSum_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0Oz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg0OD; else goto cg0OC;
       cg0OD: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0OC: // global
           I64[Hp - 48] = g1_sfXVS_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sfXW1_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cminimum_info" {
     Data.Functor.Sum.$fFoldableSum_$cminimum_info:
         const Data.Functor.Sum.$fFoldableSum_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SfYa7_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.060353942 UTC

[section ""cstring" . lvl1_rfXP2_bytes" {
     lvl1_rfXP2_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.063508979 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum5_closure" {
     Data.Functor.Sum.$fFoldableSum5_closure:
         const Data.Functor.Sum.$fFoldableSum5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum5_entry() //  [R1]
         { []
         }
     {offset
       cg0Pl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0Pm; else goto cg0Pn;
       cg0Pm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Pn: // global
           (_cg0Pg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg0Pg::I64 == 0) goto cg0Pi; else goto cg0Ph;
       cg0Pi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg0Ph: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg0Pg::I64;
           I64[Sp - 24] = block_cg0Pj_info;
           R2 = lvl1_rfXP2_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum5_info" {
     Data.Functor.Sum.$fFoldableSum5_info:
         const Data.Functor.Sum.$fFoldableSum5_entry;
         const 0;
         const 4294967317;
         const SfYa7_srt+224;
 },
 _cg0Pj() //  [R1]
         { []
         }
     {offset
       cg0Pj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0Pj_info" {
     block_cg0Pj_info:
         const _cg0Pj;
         const 0;
         const 4294967326;
         const SfYa7_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.071325693 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cmaximum_closure" {
     Data.Functor.Sum.$fFoldableSum_$cmaximum_closure:
         const Data.Functor.Sum.$fFoldableSum_$cmaximum_info;
         const 0;
 },
 g1_sfXW6_entry() //  [R1]
         { []
         }
     {offset
       cg0PJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0PK; else goto cg0PL;
       cg0PK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0PL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_sfXW6_info" {
     g1_sfXW6_info:
         const g1_sfXW6_entry;
         const 1;
         const 4294967312;
         const SfYa7_srt+256;
 },
 sat_sfXWf_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0PY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0PZ; else goto cg0Q0;
       cg0PZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0Q0: // global
           I64[Sp - 32] = block_cg0PR_info;
           _sfXW3::P64 = P64[R1 + 7];
           _sfXW4::P64 = P64[R1 + 15];
           _sfXW6::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sfXW3::P64;
           P64[Sp - 16] = _sfXW4::P64;
           P64[Sp - 8] = _sfXW6::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0Qx; else goto cg0PS;
       ug0Qx: // global
           call _cg0PR(R1) args: 0, res: 0, upd: 0;
       cg0PS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXWf_info" {
     sat_sfXWf_info:
         const sat_sfXWf_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SfYa7_srt+264;
 },
 _cg0PR() //  [R1]
         { []
         }
     {offset
       cg0PR: // global
           _sfXW6::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0PV; else goto cg0PW;
       cg0PV: // global
           I64[Sp + 24] = block_cg0Q3_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sfXW6::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cg0PW: // global
           I64[Sp + 24] = block_cg0Qh_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sfXW6::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0PR_info" {
     block_cg0PR_info:
         const _cg0PR;
         const 3;
         const 4294967326;
         const SfYa7_srt+264;
 },
 _cg0Q3() //  [R1]
         { []
         }
     {offset
       cg0Q3: // global
           if (R1 & 7 == 1) goto ug0Qw; else goto cg0Qe;
       ug0Qw: // global
           Sp = Sp + 8;
           call _cg0Qo() args: 0, res: 0, upd: 0;
       cg0Qe: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Q3_info" {
     block_cg0Q3_info:
         const _cg0Q3;
         const 0;
         const 4294967326;
         const SfYa7_srt+264;
 },
 _cg0Qh() //  [R1]
         { []
         }
     {offset
       cg0Qh: // global
           if (R1 & 7 == 1) goto ug0Qv; else goto cg0Qs;
       ug0Qv: // global
           Sp = Sp + 8;
           call _cg0Qo() args: 0, res: 0, upd: 0;
       cg0Qs: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Qh_info" {
     block_cg0Qh_info:
         const _cg0Qh;
         const 0;
         const 4294967326;
         const SfYa7_srt+264;
 },
 _cg0Qo() //  []
         { []
         }
     {offset
       cg0Qo: // global
           R1 = Data.Functor.Sum.$fFoldableSum5_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fFoldableSum_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0QA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg0QE; else goto cg0QD;
       cg0QE: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0QD: // global
           I64[Hp - 48] = g1_sfXW6_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sfXWf_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cmaximum_info" {
     Data.Functor.Sum.$fFoldableSum_$cmaximum_info:
         const Data.Functor.Sum.$fFoldableSum_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SfYa7_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.08656318 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$celem_closure" {
     Data.Functor.Sum.$fFoldableSum_$celem_closure:
         const Data.Functor.Sum.$fFoldableSum_$celem_info;
         const 0;
 },
 f1_sfXWk_entry() //  [R1]
         { []
         }
     {offset
       cg0Rl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg0Rm; else goto cg0Rn;
       cg0Rm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Rn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sfXWk_info" {
     f1_sfXWk_info:
         const f1_sfXWk_entry;
         const 2;
         const 18;
 },
 sat_sfXWp_entry() //  [R1, R2]
         { []
         }
     {offset
       cg0RA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg0RB; else goto cg0RC;
       cg0RB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg0RC: // global
           I64[Sp - 32] = block_cg0Rt_info;
           _sfXWg::P64 = P64[R1 + 7];
           _sfXWh::P64 = P64[R1 + 15];
           _sfXWk::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sfXWg::P64;
           P64[Sp - 16] = _sfXWh::P64;
           P64[Sp - 8] = _sfXWk::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0RJ; else goto cg0Ru;
       ug0RJ: // global
           call _cg0Rt(R1) args: 0, res: 0, upd: 0;
       cg0Ru: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXWp_info" {
     sat_sfXWp_info:
         const sat_sfXWp_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SfYa7_srt+280;
 },
 _cg0Rt() //  [R1]
         { []
         }
     {offset
       cg0Rt: // global
           _sfXWk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0Rx; else goto cg0Ry;
       cg0Rx: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _sfXWk::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg0Ry: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _sfXWk::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Rt_info" {
     block_cg0Rt_info:
         const _cg0Rt;
         const 3;
         const 4294967326;
         const SfYa7_srt+280;
 },
 Data.Functor.Sum.$fFoldableSum_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg0RK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg0RO; else goto cg0RN;
       cg0RO: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0RN: // global
           I64[Hp - 56] = f1_sfXWk_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_sfXWp_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$celem_info" {
     Data.Functor.Sum.$fFoldableSum_$celem_info:
         const Data.Functor.Sum.$fFoldableSum_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfYa7_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.096037617 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum10_closure" {
     Data.Functor.Sum.$fFoldableSum10_closure:
         const Data.Functor.Sum.$fFoldableSum10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum10_entry() //  [R1]
         { []
         }
     {offset
       cg0Si: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Sj; else goto cg0Sk;
       cg0Sj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Sk: // global
           (_cg0Sf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg0Sf::I64 == 0) goto cg0Sh; else goto cg0Sg;
       cg0Sh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg0Sg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg0Sf::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum10_info" {
     Data.Functor.Sum.$fFoldableSum10_info:
         const Data.Functor.Sum.$fFoldableSum10_entry;
         const 0;
         const 4294967317;
         const SfYa7_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.101216238 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldl_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl_info;
         const 0;
 },
 f2_sfXWv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0SB: // global
           _sfXWx::P64 = R3;
           R3 = R2;
           R2 = _sfXWx::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_sfXWv_info" {
     f2_sfXWv_info:
         const f2_sfXWv_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg0SL: // global
           _sfXWu::P64 = R6;
           _sfXWt::P64 = R5;
           _sfXWs::P64 = R4;
           _sfXWr::P64 = R3;
           _sfXWq::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cg0SM; else goto cg0SN;
       cg0SN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0SP; else goto cg0SO;
       cg0SP: // global
           HpAlloc = 16;
           goto cg0SM;
       cg0SM: // global
           R6 = _sfXWu::P64;
           R5 = _sfXWt::P64;
           R4 = _sfXWs::P64;
           R3 = _sfXWr::P64;
           R2 = _sfXWq::P64;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0SO: // global
           I64[Hp - 8] = f2_sfXWv_info;
           P64[Hp] = _sfXWs::P64;
           I64[Sp - 40] = block_cg0SE_info;
           R1 = _sfXWu::P64;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _sfXWq::P64;
           P64[Sp - 16] = _sfXWr::P64;
           P64[Sp - 8] = _sfXWt::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0SW; else goto cg0SF;
       ug0SW: // global
           call _cg0SE(R1) args: 0, res: 0, upd: 0;
       cg0SF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldl_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SfYa7_srt+304;
 },
 _cg0SE() //  [R1]
         { []
         }
     {offset
       cg0SE: // global
           _cg0Sw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cg0SI; else goto cg0SJ;
       cg0SI: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 16] = _cg0Sw::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
       cg0SJ: // global
           R2 = P64[Sp + 24];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 16] = _cg0Sw::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0SE_info" {
     block_cg0SE_info:
         const _cg0SE;
         const 4;
         const 4294967326;
         const SfYa7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.111136231 UTC

[section ""cstring" . lvl2_rfXP3_bytes" {
     lvl2_rfXP3_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.11394247 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum9_closure" {
     Data.Functor.Sum.$fFoldableSum9_closure:
         const Data.Functor.Sum.$fFoldableSum9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum9_entry() //  [R1]
         { []
         }
     {offset
       cg0Tn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0To; else goto cg0Tp;
       cg0To: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Tp: // global
           (_cg0Ti::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg0Ti::I64 == 0) goto cg0Tk; else goto cg0Tj;
       cg0Tk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg0Tj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg0Ti::I64;
           I64[Sp - 24] = block_cg0Tl_info;
           R2 = lvl2_rfXP3_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum9_info" {
     Data.Functor.Sum.$fFoldableSum9_info:
         const Data.Functor.Sum.$fFoldableSum9_entry;
         const 0;
         const 4294967317;
         const SfYa7_srt+224;
 },
 _cg0Tl() //  [R1]
         { []
         }
     {offset
       cg0Tl: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0Tl_info" {
     block_cg0Tl_info:
         const _cg0Tl;
         const 0;
         const 4294967326;
         const SfYa7_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.124471969 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl1_info;
         const 0;
 },
 sat_sfXWM_entry() //  [R1]
         { []
         }
     {offset
       cg0U2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0U3; else goto cg0U4;
       cg0U3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0U4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg0TV_info;
           _sfXWE::P64 = P64[R1 + 16];
           _sfXWI::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sfXWE::P64;
           P64[Sp - 24] = _sfXWI::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0Ub; else goto cg0TW;
       ug0Ub: // global
           call _cg0TV(R1) args: 0, res: 0, upd: 0;
       cg0TW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXWM_info" {
     sat_sfXWM_info:
         const sat_sfXWM_entry;
         const 3;
         const 15;
 },
 _cg0TV() //  [R1]
         { []
         }
     {offset
       cg0TV: // global
           _sfXWI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg0TZ; else goto cg0U0;
       cg0TZ: // global
           R1 = _sfXWI::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg0U0: // global
           R3 = _sfXWI::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0TV_info" {
     block_cg0TV_info:
         const _cg0TV;
         const 2;
         const 30;
 },
 sat_sfXWN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0Ud: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg0Uh; else goto cg0Ug;
       cg0Uh: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Ug: // global
           _sfXWE::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sfXWM_info;
           P64[Hp - 32] = _sfXWE::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXWN_info" {
     sat_sfXWN_info:
         const sat_sfXWN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfXWV_entry() //  [R1]
         { []
         }
     {offset
       cg0UA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0UB; else goto cg0UC;
       cg0UB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0UC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg0Ut_info;
           _sfXWE::P64 = P64[R1 + 16];
           _sfXWR::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sfXWE::P64;
           P64[Sp - 24] = _sfXWR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0UJ; else goto cg0Uu;
       ug0UJ: // global
           call _cg0Ut(R1) args: 0, res: 0, upd: 0;
       cg0Uu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXWV_info" {
     sat_sfXWV_info:
         const sat_sfXWV_entry;
         const 3;
         const 15;
 },
 _cg0Ut() //  [R1]
         { []
         }
     {offset
       cg0Ut: // global
           _sfXWR::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg0Ux; else goto cg0Uy;
       cg0Ux: // global
           R1 = _sfXWR::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg0Uy: // global
           R3 = _sfXWR::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0Ut_info" {
     block_cg0Ut_info:
         const _cg0Ut;
         const 2;
         const 30;
 },
 sat_sfXWW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg0UL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg0UP; else goto cg0UO;
       cg0UP: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0UO: // global
           _sfXWE::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sfXWV_info;
           P64[Hp - 32] = _sfXWE::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXWW_info" {
     sat_sfXWW_info:
         const sat_sfXWW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldl1_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cg0UU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg0UV; else goto cg0UW;
       cg0UV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0UW: // global
           I64[Sp - 32] = block_cg0TH_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug0Vt; else goto cg0TI;
       ug0Vt: // global
           call _cg0TH(R1) args: 0, res: 0, upd: 0;
       cg0TI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldl1_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl1_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl1_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const SfYa7_srt+304;
 },
 _cg0TH() //  [R1]
         { []
         }
     {offset
       cg0TH: // global
           _sfXWE::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0UR; else goto cg0US;
       cg0UR: // global
           Hp = Hp + 16;
           _sfXWG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0Ve; else goto cg0UZ;
       cg0UZ: // global
           _sfXWH::P64 = P64[_sfXWG::P64 + 7];
           I64[Hp - 8] = sat_sfXWN_info;
           P64[Hp] = _sfXWE::P64;
           I64[Sp + 24] = block_cg0UX_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _sfXWH::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
       cg0US: // global
           Hp = Hp + 16;
           _sfXWG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0Ve; else goto cg0Vd;
       cg0Ve: // global
           HpAlloc = 16;
           R1 = _sfXWG::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0Vd: // global
           _sfXWQ::P64 = P64[_sfXWG::P64 + 6];
           I64[Hp - 8] = sat_sfXWW_info;
           P64[Hp] = _sfXWE::P64;
           I64[Sp + 24] = block_cg0Vb_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _sfXWQ::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0TH_info" {
     block_cg0TH_info:
         const _cg0TH;
         const 3;
         const 38654705694;
         const SfYa7_srt+304;
 },
 _cg0UX() //  [R1]
         { []
         }
     {offset
       cg0UX: // global
           if (R1 & 7 == 1) goto ug0Vs; else goto cg0Va;
       ug0Vs: // global
           Sp = Sp + 8;
           call _cg0Vk() args: 0, res: 0, upd: 0;
       cg0Va: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0UX_info" {
     block_cg0UX_info:
         const _cg0UX;
         const 0;
         const 4294967326;
         const SfYa7_srt+328;
 },
 _cg0Vb() //  [R1]
         { []
         }
     {offset
       cg0Vb: // global
           if (R1 & 7 == 1) goto ug0Vr; else goto cg0Vo;
       ug0Vr: // global
           Sp = Sp + 8;
           call _cg0Vk() args: 0, res: 0, upd: 0;
       cg0Vo: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Vb_info" {
     block_cg0Vb_info:
         const _cg0Vb;
         const 0;
         const 4294967326;
         const SfYa7_srt+328;
 },
 _cg0Vk() //  []
         { []
         }
     {offset
       cg0Vk: // global
           R1 = Data.Functor.Sum.$fFoldableSum9_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.149235829 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr'_info;
         const 0;
 },
 sat_sfXXa_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg0WF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0WG; else goto cg0WH;
       cg0WG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0WH: // global
           I64[Sp - 16] = block_cg0WD_info;
           _sfXX7::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sfXX7::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXXa_info" {
     sat_sfXXa_info:
         const sat_sfXXa_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg0WD() //  [R1]
         { []
         }
     {offset
       cg0WD: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0WD_info" {
     block_cg0WD_info:
         const _cg0WD;
         const 1;
         const 30;
 },
 sat_sfXXg_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg0WS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0WT; else goto cg0WU;
       cg0WT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0WU: // global
           I64[Sp - 16] = block_cg0WQ_info;
           _sfXXd::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sfXXd::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXXg_info" {
     sat_sfXXg_info:
         const sat_sfXXg_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg0WQ() //  [R1]
         { []
         }
     {offset
       cg0WQ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0WQ_info" {
     block_cg0WQ_info:
         const _cg0WQ;
         const 1;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldr'_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cg0X0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg0X1; else goto cg0X2;
       cg0X1: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0X2: // global
           I64[Sp - 40] = block_cg0Wt_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0X9; else goto cg0Wu;
       ug0X9: // global
           call _cg0Wt(R1) args: 0, res: 0, upd: 0;
       cg0Wu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldr'_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr'_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr'_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const SfYa7_srt+304;
 },
 _cg0Wt() //  [R1]
         { []
         }
     {offset
       cg0Wt: // global
           _sfXX1::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0WX; else goto cg0WY;
       cg0WX: // global
           Hp = Hp + 16;
           _sfXX4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0X8; else goto cg0X4;
       cg0X4: // global
           _sfXX5::P64 = P64[_sfXX4::P64 + 7];
           I64[Hp - 8] = sat_sfXXa_info;
           P64[Hp] = _sfXX1::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _sfXX5::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
       cg0WY: // global
           Hp = Hp + 16;
           _sfXX4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg0X8; else goto cg0X7;
       cg0X8: // global
           HpAlloc = 16;
           R1 = _sfXX4::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0X7: // global
           _sfXXb::P64 = P64[_sfXX4::P64 + 6];
           I64[Hp - 8] = sat_sfXXg_info;
           P64[Hp] = _sfXX1::P64;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _sfXXb::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Wt_info" {
     block_cg0Wt_info:
         const _cg0Wt;
         const 4;
         const 4294967326;
         const SfYa7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.163492622 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldr_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg0XM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg0XN; else goto cg0XO;
       cg0XN: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0XO: // global
           I64[Sp - 40] = block_cg0XF_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug0XV; else goto cg0XG;
       ug0XV: // global
           call _cg0XF(R1) args: 0, res: 0, upd: 0;
       cg0XG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldr_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr_entry;
         const 0;
         const 279172874254;
         const 21474836505;
         const SfYa7_srt+296;
 },
 _cg0XF() //  [R1]
         { []
         }
     {offset
       cg0XF: // global
           _sfXXj::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg0XJ; else goto cg0XK;
       cg0XJ: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp + 16] = _sfXXj::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
       cg0XK: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp + 16] = _sfXXj::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0XF_info" {
     block_cg0XF_info:
         const _cg0XF;
         const 4;
         const 4294967326;
         const SfYa7_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.170193905 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl'_info;
         const 0;
 },
 sat_sfXXy_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg0Yk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Yl; else goto cg0Ym;
       cg0Yl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Ym: // global
           I64[Sp - 16] = block_cg0Yi_info;
           _sfXXv::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sfXXv::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXXy_info" {
     sat_sfXXy_info:
         const sat_sfXXy_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg0Yi() //  [R1]
         { []
         }
     {offset
       cg0Yi: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0Yi_info" {
     block_cg0Yi_info:
         const _cg0Yi;
         const 1;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldl'_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cg0Yo: // global
           _sfXXt::P64 = R6;
           _sfXXs::P64 = R5;
           _sfXXr::P64 = R4;
           _sfXXq::P64 = R3;
           _sfXXp::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Yp; else goto cg0Yq;
       cg0Yq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0Ys; else goto cg0Yr;
       cg0Ys: // global
           HpAlloc = 16;
           goto cg0Yp;
       cg0Yp: // global
           R6 = _sfXXt::P64;
           R5 = _sfXXs::P64;
           R4 = _sfXXr::P64;
           R3 = _sfXXq::P64;
           R2 = _sfXXp::P64;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Yr: // global
           I64[Hp - 8] = sat_sfXXy_info;
           P64[Hp] = _sfXXr::P64;
           R6 = _sfXXt::P64;
           R5 = GHC.Base.id_closure+1;
           R4 = Hp - 5;
           R3 = _sfXXq::P64;
           R2 = _sfXXp::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfXXs::P64;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldl'_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl'_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SfYa7_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.177962287 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum7_closure" {
     Data.Functor.Sum.$fFoldableSum7_closure:
         const Data.Functor.Sum.$fFoldableSum7_info;
 },
 Data.Functor.Sum.$fFoldableSum7_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0YM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0YT; else goto cg0YU;
       cg0YT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum7_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0YU: // global
           I64[Sp - 16] = block_cg0YJ_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ug0YY; else goto cg0YK;
       ug0YY: // global
           call _cg0YJ(R1) args: 0, res: 0, upd: 0;
       cg0YK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum7_info" {
     Data.Functor.Sum.$fFoldableSum7_info:
         const Data.Functor.Sum.$fFoldableSum7_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cg0YJ() //  [R1]
         { []
         }
     {offset
       cg0YJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg0YX; else goto cg0YW;
       cg0YX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg0YW: // global
           _sfXXE::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sfXXE::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg0YJ_info" {
     block_cg0YJ_info:
         const _cg0YJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.184015495 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$clength_closure" {
     Data.Functor.Sum.$fFoldableSum_$clength_closure:
         const Data.Functor.Sum.$fFoldableSum_$clength_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg0Zd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg0Ze; else goto cg0Zf;
       cg0Ze: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg0Zf: // global
           R6 = R4;
           R5 = GHC.Base.id_closure+1;
           R4 = Data.Functor.Sum.$fFoldableSum7_closure+3;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Functor.Sum.$fFoldableSum6_closure+1;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$clength_info" {
     Data.Functor.Sum.$fFoldableSum_$clength_info:
         const Data.Functor.Sum.$fFoldableSum_$clength_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SfYa7_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.188081552 UTC

[section ""cstring" . lvl3_rfXP4_bytes" {
     lvl3_rfXP4_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.190649873 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum11_closure" {
     Data.Functor.Sum.$fFoldableSum11_closure:
         const Data.Functor.Sum.$fFoldableSum11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum11_entry() //  [R1]
         { []
         }
     {offset
       cg0Zu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg0Zv; else goto cg0Zw;
       cg0Zv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg0Zw: // global
           (_cg0Zp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg0Zp::I64 == 0) goto cg0Zr; else goto cg0Zq;
       cg0Zr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg0Zq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg0Zp::I64;
           I64[Sp - 24] = block_cg0Zs_info;
           R2 = lvl3_rfXP4_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum11_info" {
     Data.Functor.Sum.$fFoldableSum11_info:
         const Data.Functor.Sum.$fFoldableSum11_entry;
         const 0;
         const 4294967317;
         const SfYa7_srt+224;
 },
 _cg0Zs() //  [R1]
         { []
         }
     {offset
       cg0Zs: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0Zs_info" {
     block_cg0Zs_info:
         const _cg0Zs;
         const 0;
         const 4294967326;
         const SfYa7_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.198508929 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr1_info;
         const 0;
 },
 sat_sfXXS_entry() //  [R1]
         { []
         }
     {offset
       cg104: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg105; else goto cg106;
       cg105: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg106: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg0ZX_info;
           _sfXXM::P64 = P64[R1 + 16];
           _sfXXO::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sfXXM::P64;
           P64[Sp - 24] = _sfXXO::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug10d; else goto cg0ZY;
       ug10d: // global
           call _cg0ZX(R1) args: 0, res: 0, upd: 0;
       cg0ZY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXXS_info" {
     sat_sfXXS_info:
         const sat_sfXXS_entry;
         const 3;
         const 15;
 },
 _cg0ZX() //  [R1]
         { []
         }
     {offset
       cg0ZX: // global
           _sfXXO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg101; else goto cg102;
       cg101: // global
           R1 = _sfXXO::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg102: // global
           R3 = P64[R1 + 6];
           R2 = _sfXXO::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg0ZX_info" {
     block_cg0ZX_info:
         const _cg0ZX;
         const 2;
         const 30;
 },
 sat_sfXXT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg10f: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg10j; else goto cg10i;
       cg10j: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg10i: // global
           _sfXXM::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sfXXS_info;
           P64[Hp - 32] = _sfXXM::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXXT_info" {
     sat_sfXXT_info:
         const sat_sfXXT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldr1_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cg10q: // global
           _sfXXN::P64 = R5;
           _sfXXM::P64 = R4;
           _sfXXL::P64 = R3;
           _sfXXK::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cg10r; else goto cg10s;
       cg10s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg10u; else goto cg10t;
       cg10u: // global
           HpAlloc = 16;
           goto cg10r;
       cg10r: // global
           R5 = _sfXXN::P64;
           R4 = _sfXXM::P64;
           R3 = _sfXXL::P64;
           R2 = _sfXXK::P64;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg10t: // global
           I64[Hp - 8] = sat_sfXXT_info;
           P64[Hp] = _sfXXM::P64;
           I64[Sp - 8] = block_cg10k_info;
           R6 = _sfXXN::P64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = Hp - 6;
           R3 = _sfXXL::P64;
           R2 = _sfXXK::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldr1_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr1_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr1_entry;
         const 0;
         const 107374182414;
         const 17179869208;
         const SfYa7_srt+344;
 },
 _cg10k() //  [R1]
         { []
         }
     {offset
       cg10k: // global
           if (R1 & 7 == 1) goto cg10n; else goto cg10o;
       cg10n: // global
           R1 = Data.Functor.Sum.$fFoldableSum11_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg10o: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg10k_info" {
     block_cg10k_info:
         const _cg10k;
         const 0;
         const 4294967326;
         const SfYa7_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.209432042 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum8_closure" {
     Data.Functor.Sum.$fFoldableSum8_closure:
         const Data.Functor.Sum.$fFoldableSum8_info;
 },
 Data.Functor.Sum.$fFoldableSum8_entry() //  []
         { []
         }
     {offset
       cg114: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum8_info" {
     Data.Functor.Sum.$fFoldableSum8_info:
         const Data.Functor.Sum.$fFoldableSum8_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.212922552 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cnull_closure" {
     Data.Functor.Sum.$fFoldableSum_$cnull_closure:
         const Data.Functor.Sum.$fFoldableSum_$cnull_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$cnull_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg11g: // global
           R6 = R4;
           R5 = GHC.Types.True_closure+2;
           R4 = Data.Functor.Sum.$fFoldableSum8_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cnull_info" {
     Data.Functor.Sum.$fFoldableSum_$cnull_info:
         const Data.Functor.Sum.$fFoldableSum_$cnull_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfYa7_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.218242619 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum1_closure" {
     Data.Functor.Sum.$fFoldableSum1_closure:
         const Data.Functor.Sum.$fFoldableSum1_info;
         const 0;
 },
 $dMonoid_sfXY4_entry() //  [R1]
         { []
         }
     {offset
       cg11v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg11w; else goto cg11x;
       cg11w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg11x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sfXY4_info" {
     $dMonoid_sfXY4_info:
         const $dMonoid_sfXY4_entry;
         const 1;
         const 4294967312;
         const SfYa7_srt+384;
 },
 sat_sfXY9_entry() //  [R1, R2]
         { []
         }
     {offset
       cg11K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg11L; else goto cg11M;
       cg11L: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg11M: // global
           I64[Sp - 32] = block_cg11D_info;
           _sfXY1::P64 = P64[R1 + 7];
           _sfXY2::P64 = P64[R1 + 15];
           _sfXY4::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sfXY1::P64;
           P64[Sp - 16] = _sfXY2::P64;
           P64[Sp - 8] = _sfXY4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug11T; else goto cg11E;
       ug11T: // global
           call _cg11D(R1) args: 0, res: 0, upd: 0;
       cg11E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXY9_info" {
     sat_sfXY9_info:
         const sat_sfXY9_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cg11D() //  [R1]
         { []
         }
     {offset
       cg11D: // global
           _sfXY4::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg11H; else goto cg11I;
       cg11H: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sfXY4::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg11I: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sfXY4::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg11D_info" {
     block_cg11D_info:
         const _cg11D;
         const 3;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg11U: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg11Y; else goto cg11X;
       cg11Y: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg11X: // global
           I64[Hp - 48] = $dMonoid_sfXY4_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sfXY9_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum1_info" {
     Data.Functor.Sum.$fFoldableSum1_info:
         const Data.Functor.Sum.$fFoldableSum1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfYa7_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.228138141 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$ctoList_closure" {
     Data.Functor.Sum.$fFoldableSum_$ctoList_closure:
         const Data.Functor.Sum.$fFoldableSum_$ctoList_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg12p: // global
           R6 = R4;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.:_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$ctoList_info" {
     Data.Functor.Sum.$fFoldableSum_$ctoList_info:
         const Data.Functor.Sum.$fFoldableSum_$ctoList_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfYa7_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.237889601 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_closure" {
     Data.Functor.Sum.$fFoldableSum_closure:
         const Data.Functor.Sum.$fFoldableSum_info;
         const 0;
 },
 sat_sfXYu_entry() //  [R1, R2]
         { []
         }
     {offset
       cg12F: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYu_info" {
     sat_sfXYu_info:
         const sat_sfXYu_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfYa7_srt+392;
 },
 sat_sfXYt_entry() //  [R1, R2]
         { []
         }
     {offset
       cg12N: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum3_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYt_info" {
     sat_sfXYt_info:
         const sat_sfXYt_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfYa7_srt+216;
 },
 sat_sfXYs_entry() //  [R1, R2]
         { []
         }
     {offset
       cg12V: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$cminimum_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYs_info" {
     sat_sfXYs_info:
         const sat_sfXYs_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfYa7_srt+248;
 },
 sat_sfXYr_entry() //  [R1, R2]
         { []
         }
     {offset
       cg133: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$cmaximum_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYr_info" {
     sat_sfXYr_info:
         const sat_sfXYr_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfYa7_srt+272;
 },
 sat_sfXYq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg13b: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$celem_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYq_info" {
     sat_sfXYq_info:
         const sat_sfXYq_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfYa7_srt+288;
 },
 sat_sfXYp_entry() //  [R1, R2]
         { []
         }
     {offset
       cg13j: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$clength_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYp_info" {
     sat_sfXYp_info:
         const sat_sfXYp_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfYa7_srt+360;
 },
 sat_sfXYo_entry() //  [R1, R2]
         { []
         }
     {offset
       cg13r: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$cnull_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYo_info" {
     sat_sfXYo_info:
         const sat_sfXYo_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfYa7_srt+400;
 },
 sat_sfXYn_entry() //  [R1, R2]
         { []
         }
     {offset
       cg13z: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$ctoList_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYn_info" {
     sat_sfXYn_info:
         const sat_sfXYn_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfYa7_srt+408;
 },
 sat_sfXYm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg13H: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$cfoldl1_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYm_info" {
     sat_sfXYm_info:
         const sat_sfXYm_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfYa7_srt+320;
 },
 sat_sfXYl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg13P: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$cfoldr1_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYl_info" {
     sat_sfXYl_info:
         const sat_sfXYl_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfYa7_srt+368;
 },
 sat_sfXYk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg13X: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldl'_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYk_info" {
     sat_sfXYk_info:
         const sat_sfXYk_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SfYa7_srt+352;
 },
 sat_sfXYj_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg145: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldl_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYj_info" {
     sat_sfXYj_info:
         const sat_sfXYj_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SfYa7_srt+312;
 },
 sat_sfXYi_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg14d: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldr'_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYi_info" {
     sat_sfXYi_info:
         const sat_sfXYi_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SfYa7_srt+336;
 },
 sat_sfXYh_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg14l: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYh_info" {
     sat_sfXYh_info:
         const sat_sfXYh_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SfYa7_srt+344;
 },
 sat_sfXYg_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg14t: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldMap_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYg_info" {
     sat_sfXYg_info:
         const sat_sfXYg_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfXYf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg14B: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$cfold_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXYf_info" {
     sat_sfXYf_info:
         const sat_sfXYf_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg14F: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cg14J; else goto cg14I;
       cg14J: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg14I: // global
           I64[Hp - 512] = sat_sfXYu_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_sfXYt_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_sfXYs_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_sfXYr_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_sfXYq_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sfXYp_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sfXYo_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sfXYn_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sfXYm_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sfXYl_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sfXYk_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sfXYj_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sfXYi_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sfXYh_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sfXYg_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sfXYf_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_info" {
     Data.Functor.Sum.$fFoldableSum_info:
         const Data.Functor.Sum.$fFoldableSum_entry;
         const 0;
         const 274634438132891662;
         const 8589934607;
         const SfYa7_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.269988702 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$ctraverse_closure" {
     Data.Functor.Sum.$fTraversableSum_$ctraverse_closure:
         const Data.Functor.Sum.$fTraversableSum_$ctraverse_info;
 },
 sat_sfXYD_entry() //  [R1]
         { []
         }
     {offset
       cg164: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg165; else goto cg166;
       cg165: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg166: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXYD_info" {
     sat_sfXYD_info:
         const sat_sfXYD_entry;
         const 4;
         const 15;
 },
 sat_sfXYG_entry() //  [R1]
         { []
         }
     {offset
       cg16d: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg16e; else goto cg16f;
       cg16e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg16f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXYG_info" {
     sat_sfXYG_info:
         const sat_sfXYG_entry;
         const 4;
         const 15;
 },
 Data.Functor.Sum.$fTraversableSum_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cg16k: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg16l; else goto cg16m;
       cg16l: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg16m: // global
           I64[Sp - 40] = block_cg15V_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug16D; else goto cg15W;
       ug16D: // global
           call _cg15V(R1) args: 0, res: 0, upd: 0;
       cg15W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$ctraverse_info" {
     Data.Functor.Sum.$fTraversableSum_$ctraverse_info:
         const Data.Functor.Sum.$fTraversableSum_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg15V() //  [R1]
         { []
         }
     {offset
       cg15V: // global
           _sfXYx::P64 = P64[Sp + 24];
           _sfXYy::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg16h; else goto cg16i;
       cg16h: // global
           Hp = Hp + 48;
           _sfXYA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg16y; else goto cg16p;
       cg16p: // global
           _sfXYB::P64 = P64[_sfXYA::P64 + 7];
           I64[Hp - 40] = sat_sfXYD_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfXYx::P64;
           P64[Hp - 8] = _sfXYy::P64;
           P64[Hp] = _sfXYB::P64;
           I64[Sp + 24] = block_cg16n_info;
           R2 = _sfXYx::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
       cg16i: // global
           Hp = Hp + 48;
           _sfXYA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg16y; else goto cg16x;
       cg16y: // global
           HpAlloc = 48;
           R1 = _sfXYA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg16x: // global
           _sfXYE::P64 = P64[_sfXYA::P64 + 6];
           I64[Hp - 40] = sat_sfXYG_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sfXYx::P64;
           P64[Hp - 8] = _sfXYy::P64;
           P64[Hp] = _sfXYE::P64;
           I64[Sp + 24] = block_cg16v_info;
           R2 = _sfXYx::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg15V_info" {
     block_cg15V_info:
         const _cg15V;
         const 4;
         const 30;
 },
 _cg16n() //  [R1]
         { []
         }
     {offset
       cg16n: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Sum.InL_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg16n_info" {
     block_cg16n_info:
         const _cg16n;
         const 1;
         const 30;
 },
 _cg16v() //  [R1]
         { []
         }
     {offset
       cg16v: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Sum.InR_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg16v_info" {
     block_cg16v_info:
         const _cg16v;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.283926496 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure" {
     Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure:
         const Data.Functor.Sum.$fTraversableSum_$cp2Traversable_info;
         const 0;
 },
 sat_sfXYK_entry() //  [R1]
         { []
         }
     {offset
       cg17l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg17m; else goto cg17n;
       cg17m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg17n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXYK_info" {
     sat_sfXYK_info:
         const sat_sfXYK_entry;
         const 1;
         const 16;
 },
 sat_sfXYJ_entry() //  [R1]
         { []
         }
     {offset
       cg17s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg17t; else goto cg17u;
       cg17t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg17u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXYJ_info" {
     sat_sfXYJ_info:
         const sat_sfXYJ_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fTraversableSum_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cg17v: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg17z; else goto cg17y;
       cg17z: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg17y: // global
           I64[Hp - 40] = sat_sfXYK_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfXYJ_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Sum.$fFoldableSum_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$cp2Traversable_info" {
     Data.Functor.Sum.$fTraversableSum_$cp2Traversable_info:
         const Data.Functor.Sum.$fTraversableSum_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfYa7_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.291743702 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$cp1Traversable_closure" {
     Data.Functor.Sum.$fTraversableSum_$cp1Traversable_closure:
         const Data.Functor.Sum.$fTraversableSum_$cp1Traversable_info;
 },
 sat_sfXYO_entry() //  [R1]
         { []
         }
     {offset
       cg17U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg17V; else goto cg17W;
       cg17V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg17W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXYO_info" {
     sat_sfXYO_info:
         const sat_sfXYO_entry;
         const 1;
         const 16;
 },
 sat_sfXYN_entry() //  [R1]
         { []
         }
     {offset
       cg181: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg182; else goto cg183;
       cg182: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg183: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXYN_info" {
     sat_sfXYN_info:
         const sat_sfXYN_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fTraversableSum_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cg184: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg188; else goto cg187;
       cg188: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg187: // global
           I64[Hp - 40] = sat_sfXYO_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfXYN_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Sum.$fFunctorSum_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$cp1Traversable_info" {
     Data.Functor.Sum.$fTraversableSum_$cp1Traversable_info:
         const Data.Functor.Sum.$fTraversableSum_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.298601013 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$csequenceA_closure" {
     Data.Functor.Sum.$fTraversableSum_$csequenceA_closure:
         const Data.Functor.Sum.$fTraversableSum_$csequenceA_info;
 },
 Data.Functor.Sum.$fTraversableSum_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cg18p: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$csequenceA_info" {
     Data.Functor.Sum.$fTraversableSum_$csequenceA_info:
         const Data.Functor.Sum.$fTraversableSum_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.30286174 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$cmapM_closure" {
     Data.Functor.Sum.$fTraversableSum_$cmapM_closure:
         const Data.Functor.Sum.$fTraversableSum_$cmapM_info;
 },
 Data.Functor.Sum.$fTraversableSum_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cg18C: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg18D; else goto cg18E;
       cg18D: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg18E: // global
           I64[Sp - 40] = block_cg18A_info;
           _sfXYS::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sfXYS::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$cmapM_info" {
     Data.Functor.Sum.$fTraversableSum_$cmapM_info:
         const Data.Functor.Sum.$fTraversableSum_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg18A() //  [R1]
         { []
         }
     {offset
       cg18A: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg18A_info" {
     block_cg18A_info:
         const _cg18A;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.30907317 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$csequence_closure" {
     Data.Functor.Sum.$fTraversableSum_$csequence_closure:
         const Data.Functor.Sum.$fTraversableSum_$csequence_info;
 },
 Data.Functor.Sum.$fTraversableSum_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cg18W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg18X; else goto cg18Y;
       cg18X: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg18Y: // global
           I64[Sp - 32] = block_cg18U_info;
           _sfXYY::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sfXYY::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$csequence_info" {
     Data.Functor.Sum.$fTraversableSum_$csequence_info:
         const Data.Functor.Sum.$fTraversableSum_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg18U() //  [R1]
         { []
         }
     {offset
       cg18U: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg18U_info" {
     block_cg18U_info:
         const _cg18U;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.316702503 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_closure" {
     Data.Functor.Sum.$fTraversableSum_closure:
         const Data.Functor.Sum.$fTraversableSum_info;
         const 0;
 },
 sat_sfXZa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg19j: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fTraversableSum_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXZa_info" {
     sat_sfXZa_info:
         const sat_sfXZa_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfXZ9_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg19r: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fTraversableSum_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXZ9_info" {
     sat_sfXZ9_info:
         const sat_sfXZ9_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfXZ8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg19z: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fTraversableSum_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXZ8_info" {
     sat_sfXZ8_info:
         const sat_sfXZ8_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfXZ7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg19H: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfXZ7_info" {
     sat_sfXZ7_info:
         const sat_sfXZ7_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfXZ6_entry() //  [R1]
         { []
         }
     {offset
       cg19O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg19P; else goto cg19Q;
       cg19P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg19Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fTraversableSum_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXZ6_info" {
     sat_sfXZ6_info:
         const sat_sfXZ6_entry;
         const 2;
         const 4294967314;
         const SfYa7_srt+424;
 },
 sat_sfXZ5_entry() //  [R1]
         { []
         }
     {offset
       cg19V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg19W; else goto cg19X;
       cg19W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg19X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fTraversableSum_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXZ5_info" {
     sat_sfXZ5_info:
         const sat_sfXZ5_entry;
         const 2;
         const 18;
 },
 Data.Functor.Sum.$fTraversableSum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg19Z: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cg1a3; else goto cg1a2;
       cg1a3: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1a2: // global
           I64[Hp - 208] = sat_sfXZa_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sfXZ9_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sfXZ8_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sfXZ7_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sfXZ6_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sfXZ5_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_info" {
     Data.Functor.Sum.$fTraversableSum_info:
         const Data.Functor.Sum.$fTraversableSum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfYa7_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.330679321 UTC

[section ""data" . Data.Functor.Sum.$fGeneric1Sum_$cto1_closure" {
     Data.Functor.Sum.$fGeneric1Sum_$cto1_closure:
         const Data.Functor.Sum.$fGeneric1Sum_$cto1_info;
 },
 Data.Functor.Sum.$fGeneric1Sum_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cg1aJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1aK; else goto cg1aL;
       cg1aK: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGeneric1Sum_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1aL: // global
           I64[Sp - 8] = block_cg1aD_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGeneric1Sum_$cto1_info" {
     Data.Functor.Sum.$fGeneric1Sum_$cto1_info:
         const Data.Functor.Sum.$fGeneric1Sum_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg1aD() //  [R1]
         { []
         }
     {offset
       cg1aD: // global
           if (R1 & 7 == 1) goto cg1aG; else goto cg1aH;
       cg1aG: // global
           Hp = Hp + 16;
           _sfXZc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1aX; else goto cg1aQ;
       cg1aQ: // global
           _sfXZd::P64 = P64[_sfXZc::P64 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = _sfXZd::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1aH: // global
           Hp = Hp + 16;
           _sfXZc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1aX; else goto cg1aW;
       cg1aX: // global
           HpAlloc = 16;
           R1 = _sfXZc::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1aW: // global
           _sfXZe::P64 = P64[_sfXZc::P64 + 6];
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = _sfXZe::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1aD_info" {
     block_cg1aD_info:
         const _cg1aD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.336849585 UTC

[section ""data" . Data.Functor.Sum.$fGeneric1Sum1_closure" {
     Data.Functor.Sum.$fGeneric1Sum1_closure:
         const Data.Functor.Sum.$fGeneric1Sum1_info;
 },
 Data.Functor.Sum.$fGeneric1Sum1_entry() //  [R2]
         { []
         }
     {offset
       cg1bl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1bm; else goto cg1bn;
       cg1bm: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGeneric1Sum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1bn: // global
           I64[Sp - 8] = block_cg1be_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1bA; else goto cg1bf;
       ug1bA: // global
           call _cg1be(R1) args: 0, res: 0, upd: 0;
       cg1bf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGeneric1Sum1_info" {
     Data.Functor.Sum.$fGeneric1Sum1_info:
         const Data.Functor.Sum.$fGeneric1Sum1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg1be() //  [R1]
         { []
         }
     {offset
       cg1be: // global
           if (R1 & 7 == 1) goto cg1bi; else goto cg1bj;
       cg1bi: // global
           Hp = Hp + 16;
           _sfXZg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1bz; else goto cg1bs;
       cg1bs: // global
           _sfXZh::P64 = P64[_sfXZg::P64 + 7];
           I64[Hp - 8] = GHC.Generics.L1_con_info;
           P64[Hp] = _sfXZh::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1bj: // global
           Hp = Hp + 16;
           _sfXZg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1bz; else goto cg1by;
       cg1bz: // global
           HpAlloc = 16;
           R1 = _sfXZg::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1by: // global
           _sfXZi::P64 = P64[_sfXZg::P64 + 6];
           I64[Hp - 8] = GHC.Generics.R1_con_info;
           P64[Hp] = _sfXZi::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1be_info" {
     block_cg1be_info:
         const _cg1be;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.342570758 UTC

[section ""data" . Data.Functor.Sum.$fGeneric1Sum_closure" {
     Data.Functor.Sum.$fGeneric1Sum_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Sum.$fGeneric1Sum1_closure+1;
         const Data.Functor.Sum.$fGeneric1Sum_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.346131917 UTC

[section ""data" . Data.Functor.Sum.$fGenericSum_$cto_closure" {
     Data.Functor.Sum.$fGenericSum_$cto_closure:
         const Data.Functor.Sum.$fGenericSum_$cto_info;
 },
 Data.Functor.Sum.$fGenericSum_$cto_entry() //  [R2]
         { []
         }
     {offset
       cg1bZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1c0; else goto cg1c1;
       cg1c0: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGenericSum_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1c1: // global
           I64[Sp - 8] = block_cg1bT_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGenericSum_$cto_info" {
     Data.Functor.Sum.$fGenericSum_$cto_info:
         const Data.Functor.Sum.$fGenericSum_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg1bT() //  [R1]
         { []
         }
     {offset
       cg1bT: // global
           if (R1 & 7 == 1) goto cg1bW; else goto cg1bX;
       cg1bW: // global
           Hp = Hp + 16;
           _sfXZk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1cd; else goto cg1c6;
       cg1c6: // global
           _sfXZl::P64 = P64[_sfXZk::P64 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = _sfXZl::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1bX: // global
           Hp = Hp + 16;
           _sfXZk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1cd; else goto cg1cc;
       cg1cd: // global
           HpAlloc = 16;
           R1 = _sfXZk::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1cc: // global
           _sfXZm::P64 = P64[_sfXZk::P64 + 6];
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = _sfXZm::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1bT_info" {
     block_cg1bT_info:
         const _cg1bT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.352642858 UTC

[section ""data" . Data.Functor.Sum.$fGenericSum1_closure" {
     Data.Functor.Sum.$fGenericSum1_closure:
         const Data.Functor.Sum.$fGenericSum1_info;
 },
 Data.Functor.Sum.$fGenericSum1_entry() //  [R2]
         { []
         }
     {offset
       cg1cB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1cC; else goto cg1cD;
       cg1cC: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGenericSum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1cD: // global
           I64[Sp - 8] = block_cg1cu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1cQ; else goto cg1cv;
       ug1cQ: // global
           call _cg1cu(R1) args: 0, res: 0, upd: 0;
       cg1cv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGenericSum1_info" {
     Data.Functor.Sum.$fGenericSum1_info:
         const Data.Functor.Sum.$fGenericSum1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg1cu() //  [R1]
         { []
         }
     {offset
       cg1cu: // global
           if (R1 & 7 == 1) goto cg1cy; else goto cg1cz;
       cg1cy: // global
           Hp = Hp + 16;
           _sfXZo::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1cP; else goto cg1cI;
       cg1cI: // global
           _sfXZp::P64 = P64[_sfXZo::P64 + 7];
           I64[Hp - 8] = GHC.Generics.L1_con_info;
           P64[Hp] = _sfXZp::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1cz: // global
           Hp = Hp + 16;
           _sfXZo::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1cP; else goto cg1cO;
       cg1cP: // global
           HpAlloc = 16;
           R1 = _sfXZo::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1cO: // global
           _sfXZq::P64 = P64[_sfXZo::P64 + 6];
           I64[Hp - 8] = GHC.Generics.R1_con_info;
           P64[Hp] = _sfXZq::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1cu_info" {
     block_cg1cu_info:
         const _cg1cu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.358315391 UTC

[section ""data" . Data.Functor.Sum.$fGenericSum_closure" {
     Data.Functor.Sum.$fGenericSum_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Sum.$fGenericSum1_closure+1;
         const Data.Functor.Sum.$fGenericSum_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.362707626 UTC

[section ""data" . Data.Functor.Sum.$w$cgunfold_closure" {
     Data.Functor.Sum.$w$cgunfold_closure:
         const Data.Functor.Sum.$w$cgunfold_info;
         const 0;
 },
 sat_sfXZG_entry() //  [R1]
         { []
         }
     {offset
       cg1dq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1dr; else goto cg1ds;
       cg1dr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1ds: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXZG_info" {
     sat_sfXZG_info:
         const sat_sfXZG_entry;
         const 1;
         const 16;
 },
 sat_sfXZH_entry() //  [R1]
         { []
         }
     {offset
       cg1dy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1dz; else goto cg1dA;
       cg1dz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1dA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfXZH_info" {
     sat_sfXZH_info:
         const sat_sfXZH_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$w$cgunfold_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1dF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1dG; else goto cg1dH;
       cg1dG: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$w$cgunfold_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg1dH: // global
           I64[Sp - 40] = block_cg1d9_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug1dZ; else goto cg1da;
       ug1dZ: // global
           call _cg1d9(R1) args: 0, res: 0, upd: 0;
       cg1da: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgunfold_info" {
     Data.Functor.Sum.$w$cgunfold_info:
         const Data.Functor.Sum.$w$cgunfold_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SfYa7_srt+440;
 },
 _cg1d9() //  [R1]
         { []
         }
     {offset
       cg1d9: // global
           if (R1 & 7 == 1) goto cg1dD; else goto cg1dC;
       cg1dD: // global
           I64[Sp] = block_cg1df_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto ug1dY; else goto cg1dg;
       ug1dY: // global
           call _cg1df(R1) args: 0, res: 0, upd: 0;
       cg1dg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg1dC: // global
           _sfXZw::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cg1dJ_info;
           R1 = _sfXZw::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto ug1dX; else goto cg1dL;
       ug1dX: // global
           call _cg1dJ(R1) args: 0, res: 0, upd: 0;
       cg1dL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1d9_info" {
     block_cg1d9_info:
         const _cg1d9;
         const 5;
         const 4294967326;
         const SfYa7_srt+440;
 },
 _cg1df() //  [R1]
         { []
         }
     {offset
       cg1df: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg1dT; else goto cg1dS;
       cg1dT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1dS: // global
           _sfXZt::P64 = P64[Sp + 24];
           _sfXZu::P64 = P64[Sp + 32];
           if (I64[R1 + 7] == 1) goto cg1dW; else goto cg1dV;
       cg1dW: // global
           I64[Hp - 16] = sat_sfXZH_info;
           P64[Hp] = _sfXZu::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           R1 = _sfXZt::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1dV: // global
           I64[Hp - 16] = sat_sfXZG_info;
           P64[Hp] = _sfXZu::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _sfXZt::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1df_info" {
     block_cg1df_info:
         const _cg1df;
         const 1029;
         const 30;
 },
 _cg1dJ() //  [R1]
         { []
         }
     {offset
       cg1dJ: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1dJ_info" {
     block_cg1dJ_info:
         const _cg1dJ;
         const 0;
         const 4294967326;
         const SfYa7_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.375997042 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgunfold_closure" {
     Data.Functor.Sum.$fDataSum_$cgunfold_closure:
         const Data.Functor.Sum.$fDataSum_$cgunfold_info;
         const 0;
 },
 Data.Functor.Sum.$fDataSum_$cgunfold_slow() //  [R1]
         { []
         }
     {offset
       cg1es: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgunfold_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgunfold_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cg1ez: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1eA; else goto cg1eB;
       cg1eA: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgunfold_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cg1eB: // global
           I64[Sp - 8] = block_cg1ew_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1eF; else goto cg1ex;
       ug1eF: // global
           call _cg1ew(R1) args: 0, res: 0, upd: 0;
       cg1ex: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgunfold_info" {
     Data.Functor.Sum.$fDataSum_$cgunfold_info:
         const Data.Functor.Sum.$fDataSum_$cgunfold_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SfYa7_srt+448;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgunfold_slow;
 },
 _cg1ew() //  [R1]
         { []
         }
     {offset
       cg1ew: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 39];
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgunfold_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1ew_info" {
     block_cg1ew_info:
         const _cg1ew;
         const 4;
         const 4294967326;
         const SfYa7_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.384935123 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgfoldl_closure" {
     Data.Functor.Sum.$fDataSum_$cgfoldl_closure:
         const Data.Functor.Sum.$fDataSum_$cgfoldl_info;
 },
 Data.Functor.Sum.$fDataSum_$cgfoldl_slow() //  [R1]
         { []
         }
     {offset
       cg1eT: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sfY08_entry() //  [R1]
         { []
         }
     {offset
       cg1f6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1f7; else goto cg1f8;
       cg1f7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1f8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY08_info" {
     sat_sfY08_info:
         const sat_sfY08_entry;
         const 1;
         const 16;
 },
 sat_sfY0a_entry() //  [R1]
         { []
         }
     {offset
       cg1ff: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1fg; else goto cg1fh;
       cg1fg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1fh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY0a_info" {
     sat_sfY0a_info:
         const sat_sfY0a_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fDataSum_$cgfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg1fm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1fn; else goto cg1fo;
       cg1fn: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgfoldl_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cg1fo: // global
           I64[Sp - 8] = block_cg1eX_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1fv; else goto cg1eY;
       ug1fv: // global
           call _cg1eX(R1) args: 0, res: 0, upd: 0;
       cg1eY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgfoldl_info" {
     Data.Functor.Sum.$fDataSum_$cgfoldl_info:
         const Data.Functor.Sum.$fDataSum_$cgfoldl_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgfoldl_slow;
 },
 _cg1eX() //  [R1]
         { []
         }
     {offset
       cg1eX: // global
           _sfY03::P64 = P64[Sp + 16];
           _sfY04::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg1fj; else goto cg1fk;
       cg1fj: // global
           Hp = Hp + 24;
           _sfY06::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1fu; else goto cg1fq;
       cg1fq: // global
           _sfY07::P64 = P64[_sfY06::P64 + 7];
           I64[Hp - 16] = sat_sfY08_info;
           P64[Hp] = _sfY04::P64;
           R4 = _sfY07::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 32];
           R1 = _sfY03::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1fk: // global
           Hp = Hp + 24;
           _sfY06::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1fu; else goto cg1ft;
       cg1fu: // global
           HpAlloc = 24;
           R1 = _sfY06::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1ft: // global
           _sfY09::P64 = P64[_sfY06::P64 + 6];
           I64[Hp - 16] = sat_sfY0a_info;
           P64[Hp] = _sfY04::P64;
           R4 = _sfY09::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           R1 = _sfY03::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1eX_info" {
     block_cg1eX_info:
         const _cg1eX;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.395843942 UTC

[section ""cstring" . Data.Functor.Sum.$fDataSum8_bytes" {
     Data.Functor.Sum.$fDataSum8_bytes:
         I8[] [83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.398362664 UTC

[section ""data" . $tSum1_rfXP5_closure" {
     $tSum1_rfXP5_closure:
         const $tSum1_rfXP5_info;
         const 0;
         const 0;
         const 0;
 },
 $tSum1_rfXP5_entry() //  [R1]
         { []
         }
     {offset
       cg1fY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1fZ; else goto cg1g0;
       cg1fZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1g0: // global
           (_cg1fV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg1fV::I64 == 0) goto cg1fX; else goto cg1fW;
       cg1fX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg1fW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg1fV::I64;
           R2 = Data.Functor.Sum.$fDataSum8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $tSum1_rfXP5_info" {
     $tSum1_rfXP5_info:
         const $tSum1_rfXP5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.404059659 UTC

[section ""data" . go61_rfXP6_closure" {
     go61_rfXP6_closure:
         const go61_rfXP6_info;
         const 0;
 },
 go61_rfXP6_entry() //  [R2, R3]
         { []
         }
     {offset
       cg1gj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1gk; else goto ug1gX;
       cg1gk: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rfXP6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug1gX: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cg1g9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rfXP6_info" {
     go61_rfXP6_info:
         const go61_rfXP6_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfYa7_srt+464;
 },
 _cg1g9() //  []
         { []
         }
     {offset
       cg1g9: // global
           _sfY0b::P64 = P64[Sp];
           I64[Sp] = block_cg1gc_info;
           R1 = _sfY0b::P64;
           if (R1 & 7 != 0) goto ug1h1; else goto cg1gd;
       ug1h1: // global
           call _cg1gc(R1) args: 0, res: 0, upd: 0;
       cg1gd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cg1gc() //  [R1]
         { []
         }
     {offset
       cg1gc: // global
           if (R1 & 7 == 1) goto ug1gY; else goto cg1gh;
       ug1gY: // global
           Sp = Sp + 16;
           call _cg1gz() args: 0, res: 0, upd: 0;
       cg1gh: // global
           I64[Sp - 8] = block_cg1gr_info;
           _sfY0e::P64 = P64[R1 + 6];
           _sfY0f::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfY0f::P64;
           P64[Sp + 8] = _sfY0e::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1h2; else goto cg1gt;
       ug1h2: // global
           call _cg1gr(R1) args: 0, res: 0, upd: 0;
       cg1gt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1gc_info" {
     block_cg1gc_info:
         const _cg1gc;
         const 1;
         const 21474836510;
         const SfYa7_srt+464;
 },
 _cg1gr() //  [R1]
         { []
         }
     {offset
       cg1gr: // global
           if (R1 & 7 == 1) goto ug1gZ; else goto cg1gE;
       ug1gZ: // global
           Sp = Sp + 24;
           call _cg1gz() args: 0, res: 0, upd: 0;
       cg1gE: // global
           I64[Sp - 8] = block_cg1gC_info;
           _sfY0h::P64 = P64[R1 + 6];
           _sfY0i::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfY0i::P64;
           P64[Sp + 16] = _sfY0h::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1h5; else goto cg1gF;
       ug1h5: // global
           call _cg1gC(R1) args: 0, res: 0, upd: 0;
       cg1gF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1gr_info" {
     block_cg1gr_info:
         const _cg1gr;
         const 2;
         const 21474836510;
         const SfYa7_srt+464;
 },
 _cg1gz() //  []
         { []
         }
     {offset
       cg1gz: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg1gC() //  [R1]
         { []
         }
     {offset
       cg1gC: // global
           I64[Sp] = block_cg1gJ_info;
           R3 = Data.Functor.Sum.$fRead1Sum7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1gC_info" {
     block_cg1gC_info:
         const _cg1gC;
         const 3;
         const 21474836510;
         const SfYa7_srt+464;
 },
 _cg1gJ() //  [R1]
         { []
         }
     {offset
       cg1gJ: // global
           if (R1 & 7 == 1) goto cg1gQ; else goto cg1gU;
       cg1gQ: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cg1g9() args: 0, res: 0, upd: 0;
       cg1gU: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1gJ_info" {
     block_cg1gJ_info:
         const _cg1gJ;
         const 3;
         const 21474836510;
         const SfYa7_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.417952648 UTC

[section ""data" . go1_rfXP7_closure" {
     go1_rfXP7_closure:
         const go1_rfXP7_info;
         const 0;
 },
 section ""relreadonly" . ug1iG_srtd" {
     ug1iG_srtd:
         const SfYa7_srt+88;
         const 51;
         const 1266637395197953;
 },
 go1_rfXP7_entry() //  [R2, R3]
         { []
         }
     {offset
       cg1hR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1hS; else goto ug1iv;
       cg1hS: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rfXP7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug1iv: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cg1hH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_rfXP7_info" {
     go1_rfXP7_info:
         const go1_rfXP7_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ug1iG_srtd;
 },
 _cg1hH() //  []
         { []
         }
     {offset
       cg1hH: // global
           _sfY0q::P64 = P64[Sp];
           I64[Sp] = block_cg1hK_info;
           R1 = _sfY0q::P64;
           if (R1 & 7 != 0) goto ug1iz; else goto cg1hL;
       ug1iz: // global
           call _cg1hK(R1) args: 0, res: 0, upd: 0;
       cg1hL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ug1iH_srtd" {
     ug1iH_srtd:
         const SfYa7_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg1hK() //  [R1]
         { []
         }
     {offset
       cg1hK: // global
           if (R1 & 7 == 1) goto ug1iw; else goto cg1hP;
       ug1iw: // global
           Sp = Sp + 16;
           call _cg1i7() args: 0, res: 0, upd: 0;
       cg1hP: // global
           I64[Sp - 8] = block_cg1hZ_info;
           _sfY0t::P64 = P64[R1 + 6];
           _sfY0u::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfY0u::P64;
           P64[Sp + 8] = _sfY0t::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1iA; else goto cg1i1;
       ug1iA: // global
           call _cg1hZ(R1) args: 0, res: 0, upd: 0;
       cg1i1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1hK_info" {
     block_cg1hK_info:
         const _cg1hK;
         const 1;
         const 18446744069414584350;
         const ug1iH_srtd;
 },
 section ""relreadonly" . ug1iI_srtd" {
     ug1iI_srtd:
         const SfYa7_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg1hZ() //  [R1]
         { []
         }
     {offset
       cg1hZ: // global
           if (R1 & 7 == 1) goto ug1ix; else goto cg1ic;
       ug1ix: // global
           Sp = Sp + 24;
           call _cg1i7() args: 0, res: 0, upd: 0;
       cg1ic: // global
           I64[Sp - 8] = block_cg1ia_info;
           _sfY0w::P64 = P64[R1 + 6];
           _sfY0x::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfY0x::P64;
           P64[Sp + 16] = _sfY0w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1iD; else goto cg1id;
       ug1iD: // global
           call _cg1ia(R1) args: 0, res: 0, upd: 0;
       cg1id: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1hZ_info" {
     block_cg1hZ_info:
         const _cg1hZ;
         const 2;
         const 18446744069414584350;
         const ug1iI_srtd;
 },
 _cg1i7() //  []
         { []
         }
     {offset
       cg1i7: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ug1iJ_srtd" {
     ug1iJ_srtd:
         const SfYa7_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg1ia() //  [R1]
         { []
         }
     {offset
       cg1ia: // global
           I64[Sp] = block_cg1ih_info;
           R3 = Data.Functor.Sum.$fRead1Sum3_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1ia_info" {
     block_cg1ia_info:
         const _cg1ia;
         const 3;
         const 18446744069414584350;
         const ug1iJ_srtd;
 },
 section ""relreadonly" . ug1iK_srtd" {
     ug1iK_srtd:
         const SfYa7_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg1ih() //  [R1]
         { []
         }
     {offset
       cg1ih: // global
           if (R1 & 7 == 1) goto cg1io; else goto cg1is;
       cg1io: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cg1hH() args: 0, res: 0, upd: 0;
       cg1is: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1ih_info" {
     block_cg1ih_info:
         const _cg1ih;
         const 3;
         const 18446744069414584350;
         const ug1iK_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.435014846 UTC

[section ""data" . $cInL1_rfXP8_closure" {
     $cInL1_rfXP8_closure:
         const Data.Data.AlgConstr_con_info;
         const $cInL2_rfXPe_closure;
         const 0;
 },
 section ""data" . $cInR1_rfXP9_closure" {
     $cInR1_rfXP9_closure:
         const Data.Data.AlgConstr_con_info;
         const $cInR2_rfXPd_closure;
         const 0;
 },
 section ""data" . Data.Functor.Sum.$cInL_closure" {
     Data.Functor.Sum.$cInL_closure:
         const Data.Data.Constr_con_info;
         const $cInL1_rfXP8_closure+1;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Sum.$tSum_closure+1;
         const 0;
 },
 section ""data" . $tSum2_rfXPa_closure" {
     $tSum2_rfXPa_closure:
         const :_con_info;
         const Data.Functor.Sum.$cInR_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSum3_rfXPb_closure" {
     $tSum3_rfXPb_closure:
         const :_con_info;
         const Data.Functor.Sum.$cInL_closure+1;
         const $tSum2_rfXPa_closure+2;
         const 0;
 },
 section ""data" . $tSum4_rfXPc_closure" {
     $tSum4_rfXPc_closure:
         const Data.Data.AlgRep_con_info;
         const $tSum3_rfXPb_closure+2;
         const 0;
 },
 section ""data" . Data.Functor.Sum.$tSum_closure" {
     Data.Functor.Sum.$tSum_closure:
         const Data.Data.DataType_con_info;
         const $tSum1_rfXP5_closure;
         const $tSum4_rfXPc_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Sum.$cInR_closure" {
     Data.Functor.Sum.$cInR_closure:
         const Data.Data.Constr_con_info;
         const $cInR1_rfXP9_closure+1;
         const Data.Functor.Sum.$fRead1Sum3_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Sum.$tSum_closure+1;
         const 0;
 },
 section ""data" . $cInR2_rfXPd_closure" {
     $cInR2_rfXPd_closure:
         const $cInR2_rfXPd_info;
         const 0;
         const 0;
         const 0;
 },
 $cInR2_rfXPd_entry() //  [R1]
         { []
         }
     {offset
       cg1ju: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1jv; else goto cg1jw;
       cg1jv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1jw: // global
           (_cg1jr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg1jr::I64 == 0) goto cg1jt; else goto cg1js;
       cg1jt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg1js: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg1jr::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSum3_rfXPb_closure+2;
           Sp = Sp - 16;
           call go1_rfXP7_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cInR2_rfXPd_info" {
     $cInR2_rfXPd_info:
         const $cInR2_rfXPd_entry;
         const 0;
         const 30064771093;
         const SfYa7_srt+488;
 },
 section ""data" . $cInL2_rfXPe_closure" {
     $cInL2_rfXPe_closure:
         const $cInL2_rfXPe_info;
         const 0;
         const 0;
         const 0;
 },
 $cInL2_rfXPe_entry() //  [R1]
         { []
         }
     {offset
       cg1jD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1jE; else goto cg1jF;
       cg1jE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1jF: // global
           (_cg1jA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg1jA::I64 == 0) goto cg1jC; else goto cg1jB;
       cg1jC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg1jB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg1jA::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSum3_rfXPb_closure+2;
           Sp = Sp - 16;
           call go61_rfXP6_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cInL2_rfXPe_info" {
     $cInL2_rfXPe_info:
         const $cInL2_rfXPe_entry;
         const 0;
         const 107374182421;
         const SfYa7_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.446635884 UTC

[section ""cstring" . Data.Functor.Sum.$trModule4_bytes" {
     Data.Functor.Sum.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.448280264 UTC

[section ""data" . Data.Functor.Sum.$trModule3_closure" {
     Data.Functor.Sum.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.450415402 UTC

[section ""cstring" . Data.Functor.Sum.$trModule2_bytes" {
     Data.Functor.Sum.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.452166623 UTC

[section ""data" . Data.Functor.Sum.$trModule1_closure" {
     Data.Functor.Sum.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.454044843 UTC

[section ""data" . Data.Functor.Sum.$trModule_closure" {
     Data.Functor.Sum.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Sum.$trModule3_closure+1;
         const Data.Functor.Sum.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.455809347 UTC

[section ""data" . $krep_rfXPf_closure" {
     $krep_rfXPf_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.458414127 UTC

[section ""data" . $krep1_rfXPg_closure" {
     $krep1_rfXPg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rfXPf_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.460127205 UTC

[section ""data" . $krep2_rfXPh_closure" {
     $krep2_rfXPh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfXPg_closure+4;
         const $krep1_rfXPg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.461863364 UTC

[section ""data" . Data.Functor.Sum.$fDataSum6_closure" {
     Data.Functor.Sum.$fDataSum6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfXPg_closure+4;
         const $krep2_rfXPh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.463544068 UTC

[section ""data" . $krep3_rfXPi_closure" {
     $krep3_rfXPi_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.465759073 UTC

[section ""data" . $krep4_rfXPj_closure" {
     $krep4_rfXPj_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.467419073 UTC

[section ""data" . $krep5_rfXPk_closure" {
     $krep5_rfXPk_closure:
         const GHC.Types.KindRepVar_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.469091172 UTC

[section ""data" . $krep6_rfXPl_closure" {
     $krep6_rfXPl_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep4_rfXPj_closure+2;
         const $krep5_rfXPk_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.470856723 UTC

[section ""data" . $krep7_rfXPm_closure" {
     $krep7_rfXPm_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep3_rfXPi_closure+2;
         const $krep5_rfXPk_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.472520601 UTC

[section ""data" . Data.Functor.Sum.$fDataSum7_closure" {
     Data.Functor.Sum.$fDataSum7_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$fDataSum8_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.474641839 UTC

[section ""data" . Data.Functor.Sum.$tcSum_closure" {
     Data.Functor.Sum.$tcSum_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Sum.$trModule_closure+1;
         const Data.Functor.Sum.$fDataSum7_closure+1;
         const Data.Functor.Sum.$fDataSum6_closure+4;
         const 6345190594862254730;
         const 1236278515871186010;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.476477178 UTC

[section ""data" . $krep8_rfXPn_closure" {
     $krep8_rfXPn_closure:
         const :_con_info;
         const $krep5_rfXPk_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.478267443 UTC

[section ""data" . $krep9_rfXPo_closure" {
     $krep9_rfXPo_closure:
         const :_con_info;
         const $krep3_rfXPi_closure+2;
         const $krep8_rfXPn_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.480043296 UTC

[section ""data" . $krep10_rfXPp_closure" {
     $krep10_rfXPp_closure:
         const :_con_info;
         const $krep4_rfXPj_closure+2;
         const $krep9_rfXPo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.481817411 UTC

[section ""data" . $krep11_rfXPq_closure" {
     $krep11_rfXPq_closure:
         const :_con_info;
         const $krep_rfXPf_closure+2;
         const $krep10_rfXPp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.484102352 UTC

[section ""data" . $krep12_rfXPr_closure" {
     $krep12_rfXPr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Sum.$tcSum_closure+1;
         const $krep11_rfXPq_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.486125945 UTC

[section ""data" . Data.Functor.Sum.$tc'InL1_closure" {
     Data.Functor.Sum.$tc'InL1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rfXPl_closure+3;
         const $krep12_rfXPr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.487812128 UTC

[section ""cstring" . Data.Functor.Sum.$tc'InL3_bytes" {
     Data.Functor.Sum.$tc'InL3_bytes:
         I8[] [39,73,110,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.489498058 UTC

[section ""data" . Data.Functor.Sum.$tc'InL2_closure" {
     Data.Functor.Sum.$tc'InL2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$tc'InL3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.491400654 UTC

[section ""data" . Data.Functor.Sum.$tc'InL_closure" {
     Data.Functor.Sum.$tc'InL_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Sum.$trModule_closure+1;
         const Data.Functor.Sum.$tc'InL2_closure+1;
         const Data.Functor.Sum.$tc'InL1_closure+4;
         const 7951421854502432011;
         const 12303552236073891860;
         const 4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.493209924 UTC

[section ""data" . Data.Functor.Sum.$tc'InR1_closure" {
     Data.Functor.Sum.$tc'InR1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rfXPm_closure+3;
         const $krep12_rfXPr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.494944837 UTC

[section ""cstring" . Data.Functor.Sum.$tc'InR3_bytes" {
     Data.Functor.Sum.$tc'InR3_bytes:
         I8[] [39,73,110,82]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.496620882 UTC

[section ""data" . Data.Functor.Sum.$tc'InR2_closure" {
     Data.Functor.Sum.$tc'InR2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$tc'InR3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.498414415 UTC

[section ""data" . Data.Functor.Sum.$tc'InR_closure" {
     Data.Functor.Sum.$tc'InR_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Sum.$trModule_closure+1;
         const Data.Functor.Sum.$tc'InR2_closure+1;
         const Data.Functor.Sum.$tc'InR1_closure+4;
         const 12078304815884238110;
         const 12377490770432979855;
         const 4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.502851403 UTC

[section ""data" . Data.Functor.Sum.$w$cp1Data_closure" {
     Data.Functor.Sum.$w$cp1Data_closure:
         const Data.Functor.Sum.$w$cp1Data_info;
         const 0;
 },
 Data.Functor.Sum.$w$cp1Data_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg1kI: // global
           _sfY0I::P64 = R5;
           _sfY0H::P64 = R4;
           _sfY0G::P64 = R3;
           _sfY0F::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cg1kM; else goto cg1kN;
       cg1kN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg1kP; else goto cg1kO;
       cg1kP: // global
           HpAlloc = 40;
           goto cg1kM;
       cg1kM: // global
           R5 = _sfY0I::P64;
           R4 = _sfY0H::P64;
           R3 = _sfY0G::P64;
           R2 = _sfY0F::P64;
           R1 = Data.Functor.Sum.$w$cp1Data_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1kO: // global
           I64[Hp - 32] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 24] = _sfY0I::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = block_cg1kB_info;
           R6 = 1;
           R5 = Data.Functor.Sum.$fDataSum7_closure+1;
           R4 = Data.Functor.Sum.$trModule_closure+1;
           R3 = 1236278515871186010;
           R2 = 6345190594862254730;
           P64[Sp - 48] = Data.Functor.Sum.$fDataSum6_closure+4;
           P64[Sp - 40] = Hp - 14;
           P64[Sp - 24] = _sfY0F::P64;
           P64[Sp - 16] = _sfY0G::P64;
           P64[Sp - 8] = _sfY0H::P64;
           Sp = Sp - 48;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cp1Data_info" {
     Data.Functor.Sum.$w$cp1Data_info:
         const Data.Functor.Sum.$w$cp1Data_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SfYa7_srt+512;
 },
 _cg1kB() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg1kB: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cg1kC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg1kB_info" {
     block_cg1kB_info:
         const _cg1kB;
         const 3;
         const 4294967326;
         const SfYa7_srt+512;
 },
 _cg1kC() //  []
         { []
         }
     {offset
       cg1kC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg1kS; else goto cg1kR;
       cg1kS: // global
           HpAlloc = 48;
           I64[Sp] = block_cg1kC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cg1kR: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 40] = block_cg1kG_info;
           R3 = P64[Sp + 56];
           R2 = Hp - 38;
           Sp = Sp + 40;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1kC_info" {
     block_cg1kC_info:
         const _cg1kC;
         const 1096;
         const 4294967326;
         const SfYa7_srt+512;
 },
 _cg1kG() //  [R1]
         { []
         }
     {offset
       cg1kG: // global
           I64[Sp] = block_cg1kL_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1kG_info" {
     block_cg1kG_info:
         const _cg1kG;
         const 131;
         const 4294967326;
         const SfYa7_srt+512;
 },
 _cg1kL() //  [R1]
         { []
         }
     {offset
       cg1kL: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1kL_info" {
     block_cg1kL_info:
         const _cg1kL;
         const 387;
         const 4294967326;
         const SfYa7_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.513203477 UTC

[section ""data" . Data.Functor.Sum.$fDataSum5_closure" {
     Data.Functor.Sum.$fDataSum5_closure:
         const Data.Functor.Sum.$fDataSum5_info;
         const 0;
 },
 Data.Functor.Sum.$fDataSum5_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg1ls: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Sum.$w$cp1Data_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum5_info" {
     Data.Functor.Sum.$fDataSum5_info:
         const Data.Functor.Sum.$fDataSum5_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SfYa7_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.517018128 UTC

[section ""data" . Data.Functor.Sum.$fDataSum2_closure" {
     Data.Functor.Sum.$fDataSum2_closure:
         const (,)_con_info;
         const Data.Functor.Sum.InL_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.519191654 UTC

[section ""data" . Data.Functor.Sum.$fDataSum1_closure" {
     Data.Functor.Sum.$fDataSum1_closure:
         const (,)_con_info;
         const Data.Functor.Sum.InR_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.529656316 UTC

[section ""data" . Data.Functor.Sum.$w$cgmapMp_closure" {
     Data.Functor.Sum.$w$cgmapMp_closure:
         const Data.Functor.Sum.$w$cgmapMp_info;
 },
 lvl8_sfY15_entry() //  [R1]
         { []
         }
     {offset
       cg1lJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1lK; else goto cg1lL;
       cg1lK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1lL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sfY15_info" {
     lvl8_sfY15_info:
         const lvl8_sfY15_entry;
         const 1;
         const 16;
 },
 sat_sfY1A_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1lY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1lZ; else goto cg1m0;
       cg1lZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1m0: // global
           I64[Sp - 24] = block_cg1lV_info;
           _sfY15::P64 = P64[R1 + 7];
           _sfY16::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfY15::P64;
           P64[Sp - 8] = _sfY16::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug1mi; else goto cg1lW;
       ug1mi: // global
           call _cg1lV(R1) args: 0, res: 0, upd: 0;
       cg1lW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY1A_info" {
     sat_sfY1A_info:
         const sat_sfY1A_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cg1lV() //  [R1]
         { []
         }
     {offset
       cg1lV: // global
           I64[Sp - 8] = block_cg1m3_info;
           _sfY1x::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfY1x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1mh; else goto cg1m5;
       ug1mh: // global
           call _cg1m3(R1) args: 0, res: 0, upd: 0;
       cg1m5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1lV_info" {
     block_cg1lV_info:
         const _cg1lV;
         const 2;
         const 30;
 },
 _cg1m3() //  [R1]
         { []
         }
     {offset
       cg1m3: // global
           if (R1 & 7 == 1) goto cg1mb; else goto cg1mf;
       cg1mb: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg1mf: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1m3_info" {
     block_cg1m3_info:
         const _cg1m3;
         const 3;
         const 30;
 },
 sat_sfY1n_entry() //  [R1]
         { []
         }
     {offset
       cg1mJ: // global
           _sfY1n::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cg1mK; else goto cg1mL;
       cg1mL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg1mN; else goto cg1mM;
       cg1mN: // global
           HpAlloc = 56;
           goto cg1mK;
       cg1mK: // global
           R1 = _sfY1n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1mM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfY1n::P64;
           _sfY16::P64 = P64[_sfY1n::P64 + 16];
           _sfY1a::P64 = P64[_sfY1n::P64 + 24];
           _sfY1e::P64 = P64[_sfY1n::P64 + 32];
           _sfY1f::P64 = P64[_sfY1n::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfY1e::P64;
           P64[Hp - 24] = _sfY1a::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfY1f::P64;
           R2 = _sfY16::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY1n_info" {
     sat_sfY1n_info:
         const sat_sfY1n_entry;
         const 4;
         const 15;
 },
 sat_sfY1j_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1mZ: // global
           _sfY1g::P64 = R2;
           _sfY1j::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg1n0; else goto cg1n1;
       cg1n1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg1n3; else goto cg1n2;
       cg1n3: // global
           HpAlloc = 56;
           goto cg1n0;
       cg1n0: // global
           R2 = _sfY1g::P64;
           R1 = _sfY1j::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1n2: // global
           _sfY16::P64 = P64[_sfY1j::P64 + 7];
           _sfY1e::P64 = P64[_sfY1j::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfY1e::P64;
           P64[Hp - 24] = _sfY1g::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfY16::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY1j_info" {
     sat_sfY1j_info:
         const sat_sfY1j_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfY1k_entry() //  [R1]
         { []
         }
     {offset
       cg1n4: // global
           _sfY1k::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg1n5; else goto cg1n6;
       cg1n6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg1n8; else goto cg1n7;
       cg1n8: // global
           HpAlloc = 24;
           goto cg1n5;
       cg1n5: // global
           R1 = _sfY1k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1n7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfY1k::P64;
           _sfY16::P64 = P64[_sfY1k::P64 + 16];
           _sfY1b::P64 = P64[_sfY1k::P64 + 24];
           _sfY1e::P64 = P64[_sfY1k::P64 + 32];
           I64[Hp - 16] = sat_sfY1j_info;
           P64[Hp - 8] = _sfY16::P64;
           P64[Hp] = _sfY1e::P64;
           R2 = _sfY16::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfY1b::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY1k_info" {
     sat_sfY1k_info:
         const sat_sfY1k_entry;
         const 3;
         const 15;
 },
 sat_sfY1o_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1n9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1na; else goto cg1nb;
       cg1na: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1nb: // global
           I64[Sp - 40] = block_cg1my_info;
           _sfY12::P64 = P64[R1 + 7];
           _sfY16::P64 = P64[R1 + 15];
           _sfY1a::P64 = P64[R1 + 23];
           _sfY1b::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfY12::P64;
           P64[Sp - 24] = _sfY16::P64;
           P64[Sp - 16] = _sfY1a::P64;
           P64[Sp - 8] = _sfY1b::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug1nf; else goto cg1mz;
       ug1nf: // global
           call _cg1my(R1) args: 0, res: 0, upd: 0;
       cg1mz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY1o_info" {
     sat_sfY1o_info:
         const sat_sfY1o_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cg1my() //  [R1]
         { []
         }
     {offset
       cg1my: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg1ne; else goto cg1nd;
       cg1ne: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1nd: // global
           _sfY1e::P64 = P64[R1 + 7];
           _sfY1f::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfY1n_info;
           _sfY16::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sfY16::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sfY1e::P64;
           P64[Hp - 40] = _sfY1f::P64;
           I64[Hp - 32] = sat_sfY1k_info;
           P64[Hp - 16] = _sfY16::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfY1e::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1my_info" {
     block_cg1my_info:
         const _cg1my;
         const 4;
         const 30;
 },
 k1_sfY17_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1ng: // global
           _sfY1a::P64 = R4;
           _sfY19::P64 = R3;
           _sfY18::P64 = R2;
           _sfY17::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg1nh; else goto cg1ni;
       cg1ni: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg1nk; else goto cg1nj;
       cg1nk: // global
           HpAlloc = 80;
           goto cg1nh;
       cg1nh: // global
           R4 = _sfY1a::P64;
           R3 = _sfY19::P64;
           R2 = _sfY18::P64;
           R1 = _sfY17::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1nj: // global
           _sfY12::P64 = P64[_sfY17::P64 + 5];
           _sfY13::P64 = P64[_sfY17::P64 + 13];
           _sfY16::P64 = P64[_sfY17::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sfY13::P64;
           P64[Hp - 48] = _sfY18::P64;
           P64[Hp - 40] = _sfY1a::P64;
           I64[Hp - 32] = sat_sfY1o_info;
           P64[Hp - 24] = _sfY12::P64;
           P64[Hp - 16] = _sfY16::P64;
           P64[Hp - 8] = _sfY1a::P64;
           P64[Hp] = Hp - 72;
           R2 = _sfY16::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfY19::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sfY17_info" {
     k1_sfY17_info:
         const k1_sfY17_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sfY1r_entry() //  [R1]
         { []
         }
     {offset
       cg1nu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1nv; else goto cg1nw;
       cg1nv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1nw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY1r_info" {
     sat_sfY1r_info:
         const sat_sfY1r_entry;
         const 1;
         const 16;
 },
 sat_sfY1t_entry() //  [R1]
         { []
         }
     {offset
       cg1nD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1nE; else goto cg1nF;
       cg1nE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1nF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY1t_info" {
     sat_sfY1t_info:
         const sat_sfY1t_entry;
         const 1;
         const 16;
 },
 sat_sfY1u_entry() //  [R1]
         { []
         }
     {offset
       cg1nK: // global
           _sfY1u::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cg1nL; else goto cg1nM;
       cg1nM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg1nO; else goto cg1nN;
       cg1nO: // global
           HpAlloc = 32;
           goto cg1nL;
       cg1nL: // global
           R1 = _sfY1u::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1nN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfY1u::P64;
           _sfY10::P64 = P64[_sfY1u::P64 + 16];
           _sfY11::P64 = P64[_sfY1u::P64 + 24];
           _sfY12::P64 = P64[_sfY1u::P64 + 32];
           _sfY13::P64 = P64[_sfY1u::P64 + 40];
           _sfY14::P64 = P64[_sfY1u::P64 + 48];
           _sfY16::P64 = P64[_sfY1u::P64 + 56];
           I64[Hp - 24] = k1_sfY17_info;
           P64[Hp - 16] = _sfY12::P64;
           P64[Hp - 8] = _sfY13::P64;
           P64[Hp] = _sfY16::P64;
           I64[Sp - 56] = block_cg1nl_info;
           R1 = _sfY14::P64;
           P64[Sp - 48] = Hp - 21;
           P64[Sp - 40] = _sfY10::P64;
           P64[Sp - 32] = _sfY11::P64;
           P64[Sp - 24] = _sfY16::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ug1nV; else goto cg1nm;
       ug1nV: // global
           call _cg1nl(R1) args: 0, res: 0, upd: 0;
       cg1nm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY1u_info" {
     sat_sfY1u_info:
         const sat_sfY1u_entry;
         const 6;
         const 15;
 },
 _cg1nl() //  [R1]
         { []
         }
     {offset
       cg1nl: // global
           _cg1mn::P64 = P64[Sp + 8];
           _sfY16::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1nH; else goto cg1nI;
       cg1nH: // global
           Hp = Hp + 24;
           _sfY1p::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1nU; else goto cg1nQ;
       cg1nQ: // global
           _sfY1q::P64 = P64[_sfY1p::P64 + 7];
           I64[Hp - 16] = sat_sfY1r_info;
           P64[Hp] = _sfY16::P64;
           R4 = _sfY1q::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _cg1mn::P64;
           Sp = Sp + 40;
           call k1_sfY17_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
       cg1nI: // global
           Hp = Hp + 24;
           _sfY1p::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1nU; else goto cg1nT;
       cg1nU: // global
           HpAlloc = 24;
           R1 = _sfY1p::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg1nT: // global
           _sfY1s::P64 = P64[_sfY1p::P64 + 6];
           I64[Hp - 16] = sat_sfY1t_info;
           P64[Hp] = _sfY16::P64;
           R4 = _sfY1s::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 24];
           R1 = _cg1mn::P64;
           Sp = Sp + 40;
           call k1_sfY17_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg1nl_info" {
     block_cg1nl_info:
         const _cg1nl;
         const 4;
         const 30;
 },
 Data.Functor.Sum.$w$cgmapMp_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1nW: // global
           _sfY14::P64 = R6;
           _sfY13::P64 = R5;
           _sfY12::P64 = R4;
           _sfY11::P64 = R3;
           _sfY10::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg1nX; else goto cg1nY;
       cg1nY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg1o0; else goto cg1nZ;
       cg1o0: // global
           HpAlloc = 24;
           goto cg1nX;
       cg1nX: // global
           R6 = _sfY14::P64;
           R5 = _sfY13::P64;
           R4 = _sfY12::P64;
           R3 = _sfY11::P64;
           R2 = _sfY10::P64;
           R1 = Data.Functor.Sum.$w$cgmapMp_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1nZ: // global
           I64[Hp - 16] = lvl8_sfY15_info;
           P64[Hp] = _sfY12::P64;
           I64[Sp - 56] = block_cg1lM_info;
           R2 = _sfY12::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sfY10::P64;
           P64[Sp - 32] = _sfY11::P64;
           P64[Sp - 24] = _sfY12::P64;
           P64[Sp - 16] = _sfY13::P64;
           P64[Sp - 8] = _sfY14::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgmapMp_info" {
     Data.Functor.Sum.$w$cgmapMp_info:
         const Data.Functor.Sum.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg1lM() //  [R1]
         { []
         }
     {offset
       cg1lM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg1o3; else goto cg1o2;
       cg1o3: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1o2: // global
           I64[Hp - 80] = sat_sfY1A_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sfY1u_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1lM_info" {
     block_cg1lM_info:
         const _cg1lM;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.563460029 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapMp_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapMp_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapMp_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapMp_slow() //  [R1]
         { []
         }
     {offset
       cg1px: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapMp_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapMp_entry() //  [R6]
         { []
         }
     {offset
       cg1pB: // global
           _sfY1F::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sfY1F::P64;
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgmapMp_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapMp_info" {
     Data.Functor.Sum.$fDataSum_$cgmapMp_info:
         const Data.Functor.Sum.$fDataSum_$cgmapMp_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapMp_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.572258177 UTC

[section ""data" . Data.Functor.Sum.$w$cgmapM_closure" {
     Data.Functor.Sum.$w$cgmapM_closure:
         const Data.Functor.Sum.$w$cgmapM_info;
 },
 sat_sfY1X_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1q5: // global
           _sfY1V::P64 = R2;
           _sfY1X::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg1q6; else goto cg1q7;
       cg1q7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg1q9; else goto cg1q8;
       cg1q9: // global
           HpAlloc = 32;
           goto cg1q6;
       cg1q6: // global
           R2 = _sfY1V::P64;
           R1 = _sfY1X::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1q8: // global
           _sfY1M::P64 = P64[_sfY1X::P64 + 7];
           _sfY1U::P64 = P64[_sfY1X::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfY1U::P64;
           P64[Hp] = _sfY1V::P64;
           R2 = _sfY1M::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY1X_info" {
     sat_sfY1X_info:
         const sat_sfY1X_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfY1Y_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1qa: // global
           _sfY1U::P64 = R2;
           _sfY1Y::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg1qb; else goto cg1qc;
       cg1qc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg1qe; else goto cg1qd;
       cg1qe: // global
           HpAlloc = 24;
           goto cg1qb;
       cg1qb: // global
           R2 = _sfY1U::P64;
           R1 = _sfY1Y::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1qd: // global
           _sfY1M::P64 = P64[_sfY1Y::P64 + 7];
           _sfY1T::P64 = P64[_sfY1Y::P64 + 15];
           I64[Hp - 16] = sat_sfY1X_info;
           P64[Hp - 8] = _sfY1M::P64;
           P64[Hp] = _sfY1U::P64;
           R2 = _sfY1M::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfY1T::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY1Y_info" {
     sat_sfY1Y_info:
         const sat_sfY1Y_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k1_sfY1P_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1qf: // global
           _sfY1S::P64 = R4;
           _sfY1R::P64 = R3;
           _sfY1Q::P64 = R2;
           _sfY1P::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg1qg; else goto cg1qh;
       cg1qh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg1qj; else goto cg1qi;
       cg1qj: // global
           HpAlloc = 64;
           goto cg1qg;
       cg1qg: // global
           R4 = _sfY1S::P64;
           R3 = _sfY1R::P64;
           R2 = _sfY1Q::P64;
           R1 = _sfY1P::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1qi: // global
           _sfY1M::P64 = P64[_sfY1P::P64 + 5];
           _sfY1N::P64 = P64[_sfY1P::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfY1N::P64;
           P64[Hp - 32] = _sfY1Q::P64;
           P64[Hp - 24] = _sfY1S::P64;
           I64[Hp - 16] = sat_sfY1Y_info;
           P64[Hp - 8] = _sfY1M::P64;
           P64[Hp] = Hp - 56;
           R2 = _sfY1M::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfY1R::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sfY1P_info" {
     k1_sfY1P_info:
         const k1_sfY1P_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfY21_entry() //  [R1]
         { []
         }
     {offset
       cg1qt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1qu; else goto cg1qv;
       cg1qu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1qv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.InL_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY21_info" {
     sat_sfY21_info:
         const sat_sfY21_entry;
         const 1;
         const 16;
 },
 sat_sfY23_entry() //  [R1]
         { []
         }
     {offset
       cg1qC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1qD; else goto cg1qE;
       cg1qD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1qE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.InR_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY23_info" {
     sat_sfY23_info:
         const sat_sfY23_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1qJ: // global
           _sfY1O::P64 = R6;
           _sfY1N::P64 = R5;
           _sfY1M::P64 = R4;
           _sfY1L::P64 = R3;
           _sfY1K::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cg1qK; else goto cg1qL;
       cg1qL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg1qN; else goto cg1qM;
       cg1qN: // global
           HpAlloc = 24;
           goto cg1qK;
       cg1qK: // global
           R6 = _sfY1O::P64;
           R5 = _sfY1N::P64;
           R4 = _sfY1M::P64;
           R3 = _sfY1L::P64;
           R2 = _sfY1K::P64;
           R1 = Data.Functor.Sum.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1qM: // global
           I64[Hp - 16] = k1_sfY1P_info;
           P64[Hp - 8] = _sfY1M::P64;
           P64[Hp] = _sfY1N::P64;
           I64[Sp - 40] = block_cg1qk_info;
           R1 = _sfY1O::P64;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = _sfY1K::P64;
           P64[Sp - 16] = _sfY1L::P64;
           P64[Sp - 8] = _sfY1M::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug1qU; else goto cg1ql;
       ug1qU: // global
           call _cg1qk(R1) args: 0, res: 0, upd: 0;
       cg1ql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgmapM_info" {
     Data.Functor.Sum.$w$cgmapM_info:
         const Data.Functor.Sum.$w$cgmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg1qk() //  [R1]
         { []
         }
     {offset
       cg1qk: // global
           _cg1pO::P64 = P64[Sp + 8];
           _sfY1M::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1qG; else goto cg1qH;
       cg1qG: // global
           Hp = Hp + 24;
           _sfY1Z::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1qT; else goto cg1qP;
       cg1qP: // global
           _sfY20::P64 = P64[_sfY1Z::P64 + 7];
           I64[Hp - 16] = sat_sfY21_info;
           P64[Hp] = _sfY1M::P64;
           R4 = _sfY20::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _cg1pO::P64;
           Sp = Sp + 40;
           call k1_sfY1P_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1qH: // global
           Hp = Hp + 24;
           _sfY1Z::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1qT; else goto cg1qS;
       cg1qT: // global
           HpAlloc = 24;
           R1 = _sfY1Z::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1qS: // global
           _sfY22::P64 = P64[_sfY1Z::P64 + 6];
           I64[Hp - 16] = sat_sfY23_info;
           P64[Hp] = _sfY1M::P64;
           R4 = _sfY22::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 24];
           R1 = _cg1pO::P64;
           Sp = Sp + 40;
           call k1_sfY1P_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1qk_info" {
     block_cg1qk_info:
         const _cg1qk;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.588167031 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapM_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapM_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapM_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapM_slow() //  [R1]
         { []
         }
     {offset
       cg1rw: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapM_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapM_entry() //  [R6]
         { []
         }
     {offset
       cg1rA: // global
           _sfY28::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sfY28::P64;
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgmapM_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapM_info" {
     Data.Functor.Sum.$fDataSum_$cgmapM_info:
         const Data.Functor.Sum.$fDataSum_$cgmapM_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapM_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.595037651 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapQi_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapQi_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapQi_info;
         const 0;
 },
 Data.Functor.Sum.$fDataSum_$cgmapQi_slow() //  [R1]
         { []
         }
     {offset
       cg1rK: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQi_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapQi_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg1rV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1rW; else goto cg1rX;
       cg1rW: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgmapQi_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cg1rX: // global
           I64[Sp - 8] = block_cg1rO_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1ss; else goto cg1rP;
       ug1ss: // global
           call _cg1rO(R1) args: 0, res: 0, upd: 0;
       cg1rP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapQi_info" {
     Data.Functor.Sum.$fDataSum_$cgmapQi_info:
         const Data.Functor.Sum.$fDataSum_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SfYa7_srt+536;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapQi_slow;
 },
 _cg1rO() //  [R1]
         { []
         }
     {offset
       cg1rO: // global
           _sfY2j::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg1rS; else goto cg1rT;
       cg1rS: // global
           I64[Sp + 8] = block_cg1s0_info;
           _sfY2n::P64 = P64[R1 + 7];
           R1 = _sfY2j::P64;
           P64[Sp + 16] = _sfY2n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug1sq; else goto cg1s2;
       ug1sq: // global
           call _cg1s0(R1) args: 0, res: 0, upd: 0;
       cg1s2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg1rT: // global
           I64[Sp] = block_cg1sd_info;
           _sfY2r::P64 = P64[R1 + 6];
           R1 = _sfY2j::P64;
           P64[Sp + 32] = _sfY2r::P64;
           if (R1 & 7 != 0) goto ug1sr; else goto cg1sf;
       ug1sr: // global
           call _cg1sd(R1) args: 0, res: 0, upd: 0;
       cg1sf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1rO_info" {
     block_cg1rO_info:
         const _cg1rO;
         const 4;
         const 4294967326;
         const SfYa7_srt+536;
 },
 _cg1s0() //  [R1]
         { []
         }
     {offset
       cg1s0: // global
           if (I64[R1 + 7] == 0) goto cg1sa; else goto ug1sp;
       cg1sa: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug1sp: // global
           Sp = Sp + 32;
           call _cg1sm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg1s0_info" {
     block_cg1s0_info:
         const _cg1s0;
         const 3;
         const 4294967326;
         const SfYa7_srt+536;
 },
 _cg1sd() //  [R1]
         { []
         }
     {offset
       cg1sd: // global
           if (I64[R1 + 7] == 0) goto cg1sn; else goto ug1so;
       cg1sn: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug1so: // global
           Sp = Sp + 40;
           call _cg1sm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg1sd_info" {
     block_cg1sd_info:
         const _cg1sd;
         const 132;
         const 4294967326;
         const SfYa7_srt+536;
 },
 _cg1sm() //  []
         { []
         }
     {offset
       cg1sm: // global
           R1 = Data.Maybe.fromJust1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.608018652 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapQr_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapQr_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapQr_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapQr_slow() //  [R1]
         { []
         }
     {offset
       cg1sT: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapQr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg1t4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1t5; else goto cg1t6;
       cg1t5: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgmapQr_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cg1t6: // global
           I64[Sp - 8] = block_cg1sX_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1tj; else goto cg1sY;
       ug1tj: // global
           call _cg1sX(R1) args: 0, res: 0, upd: 0;
       cg1sY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapQr_info" {
     Data.Functor.Sum.$fDataSum_$cgmapQr_info:
         const Data.Functor.Sum.$fDataSum_$cgmapQr_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Sum.$fDataSum_$cgmapQr_slow;
 },
 _cg1sX() //  [R1]
         { []
         }
     {offset
       cg1sX: // global
           _sfY2B::P64 = P64[Sp + 16];
           _sfY2C::P64 = P64[Sp + 24];
           _sfY2D::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1t1; else goto cg1t2;
       cg1t1: // global
           Hp = Hp + 40;
           _sfY2F::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1ti; else goto cg1tb;
       cg1tb: // global
           _sfY2G::P64 = P64[_sfY2F::P64 + 7];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfY2D::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfY2G::P64;
           R3 = _sfY2C::P64;
           R2 = Hp - 32;
           R1 = _sfY2B::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1t2: // global
           Hp = Hp + 40;
           _sfY2F::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1ti; else goto cg1th;
       cg1ti: // global
           HpAlloc = 40;
           R1 = _sfY2F::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1th: // global
           _sfY2I::P64 = P64[_sfY2F::P64 + 6];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfY2D::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfY2I::P64;
           R3 = _sfY2C::P64;
           R2 = Hp - 32;
           R1 = _sfY2B::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1sX_info" {
     block_cg1sX_info:
         const _cg1sX;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.61695617 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapQ_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapQ_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapQ_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapQ_slow() //  [R1]
         { []
         }
     {offset
       cg1tA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQ_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 32, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapQ_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1tL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1tM; else goto cg1tN;
       cg1tM: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgmapQ_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cg1tN: // global
           I64[Sp - 8] = block_cg1tE_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1u2; else goto cg1tF;
       ug1u2: // global
           call _cg1tE(R1) args: 0, res: 0, upd: 0;
       cg1tF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapQ_info" {
     Data.Functor.Sum.$fDataSum_$cgmapQ_info:
         const Data.Functor.Sum.$fDataSum_$cgmapQ_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const Data.Functor.Sum.$fDataSum_$cgmapQ_slow;
 },
 _cg1tE() //  [R1]
         { []
         }
     {offset
       cg1tE: // global
           _sfY2Q::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg1tI; else goto cg1tJ;
       cg1tI: // global
           Hp = Hp + 64;
           _sfY2S::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1u1; else goto cg1tT;
       cg1tT: // global
           _sfY2T::P64 = P64[_sfY2S::P64 + 7];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfY2Q::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _sfY2T::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1tJ: // global
           Hp = Hp + 64;
           _sfY2S::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1u1; else goto cg1u0;
       cg1u1: // global
           HpAlloc = 64;
           R1 = _sfY2S::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1u0: // global
           _sfY2V::P64 = P64[_sfY2S::P64 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfY2Q::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfY2V::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1tE_info" {
     block_cg1tE_info:
         const _cg1tE;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.625933755 UTC

[section ""data" . Data.Functor.Sum.$fDataSum3_closure" {
     Data.Functor.Sum.$fDataSum3_closure:
         const Data.Functor.Sum.$fDataSum3_info;
 },
 Data.Functor.Sum.$fDataSum3_slow() //  [R1]
         { []
         }
     {offset
       cg1un: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum3_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 48, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1uy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1uz; else goto cg1uA;
       cg1uz: // global
           R1 = Data.Functor.Sum.$fDataSum3_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cg1uA: // global
           I64[Sp - 8] = block_cg1ur_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1uN; else goto cg1us;
       ug1uN: // global
           call _cg1ur(R1) args: 0, res: 0, upd: 0;
       cg1us: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum3_info" {
     Data.Functor.Sum.$fDataSum3_info:
         const Data.Functor.Sum.$fDataSum3_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Sum.$fDataSum3_slow;
 },
 _cg1ur() //  [R1]
         { []
         }
     {offset
       cg1ur: // global
           _sfY33::P64 = P64[Sp + 16];
           _sfY34::P64 = P64[Sp + 24];
           _sfY35::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1uv; else goto cg1uw;
       cg1uv: // global
           Hp = Hp + 40;
           _sfY37::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1uM; else goto cg1uF;
       cg1uF: // global
           _sfY38::P64 = P64[_sfY37::P64 + 7];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfY35::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfY38::P64;
           R3 = Hp - 32;
           R2 = _sfY34::P64;
           R1 = _sfY33::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1uw: // global
           Hp = Hp + 40;
           _sfY37::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1uM; else goto cg1uL;
       cg1uM: // global
           HpAlloc = 40;
           R1 = _sfY37::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1uL: // global
           _sfY3a::P64 = P64[_sfY37::P64 + 6];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfY35::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfY3a::P64;
           R3 = Hp - 32;
           R2 = _sfY34::P64;
           R1 = _sfY33::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1ur_info" {
     block_cg1ur_info:
         const _cg1ur;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.634664707 UTC

[section ""data" . Data.Functor.Sum.$fDataSum4_closure" {
     Data.Functor.Sum.$fDataSum4_closure:
         const Data.Functor.Sum.$fDataSum4_info;
 },
 Data.Functor.Sum.$fDataSum4_slow() //  [R1]
         { []
         }
     {offset
       cg1v4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum4_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1vf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1vg; else goto cg1vh;
       cg1vg: // global
           R1 = Data.Functor.Sum.$fDataSum4_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cg1vh: // global
           I64[Sp - 8] = block_cg1v8_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1vw; else goto cg1v9;
       ug1vw: // global
           call _cg1v8(R1) args: 0, res: 0, upd: 0;
       cg1v9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum4_info" {
     Data.Functor.Sum.$fDataSum4_info:
         const Data.Functor.Sum.$fDataSum4_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const Data.Functor.Sum.$fDataSum4_slow;
 },
 _cg1v8() //  [R1]
         { []
         }
     {offset
       cg1v8: // global
           _sfY3i::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg1vc; else goto cg1vd;
       cg1vc: // global
           Hp = Hp + 56;
           _sfY3k::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1vv; else goto cg1vn;
       cg1vn: // global
           _sfY3l::P64 = P64[_sfY3k::P64 + 7];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _sfY3i::P64;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _sfY3l::P64;
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1vd: // global
           Hp = Hp + 56;
           _sfY3k::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1vv; else goto cg1vu;
       cg1vv: // global
           HpAlloc = 56;
           R1 = _sfY3k::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1vu: // global
           _sfY3n::P64 = P64[_sfY3k::P64 + 6];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _sfY3i::P64;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfY3n::P64;
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1v8_info" {
     block_cg1v8_info:
         const _cg1v8;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.650867645 UTC

[section ""data" . Data.Functor.Sum.$w$cgmapMo_closure" {
     Data.Functor.Sum.$w$cgmapMo_closure:
         const Data.Functor.Sum.$w$cgmapMo_info;
 },
 lvl8_sfY3u_entry() //  [R1]
         { []
         }
     {offset
       cg1vY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1vZ; else goto cg1w0;
       cg1vZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1w0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sfY3u_info" {
     lvl8_sfY3u_info:
         const lvl8_sfY3u_entry;
         const 1;
         const 16;
 },
 sat_sfY42_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1wd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1we; else goto cg1wf;
       cg1we: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1wf: // global
           I64[Sp - 24] = block_cg1wa_info;
           _sfY3u::P64 = P64[R1 + 7];
           _sfY3v::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfY3u::P64;
           P64[Sp - 8] = _sfY3v::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug1wx; else goto cg1wb;
       ug1wx: // global
           call _cg1wa(R1) args: 0, res: 0, upd: 0;
       cg1wb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY42_info" {
     sat_sfY42_info:
         const sat_sfY42_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cg1wa() //  [R1]
         { []
         }
     {offset
       cg1wa: // global
           I64[Sp - 8] = block_cg1wi_info;
           _sfY3Z::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfY3Z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1ww; else goto cg1wk;
       ug1ww: // global
           call _cg1wi(R1) args: 0, res: 0, upd: 0;
       cg1wk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1wa_info" {
     block_cg1wa_info:
         const _cg1wa;
         const 2;
         const 30;
 },
 _cg1wi() //  [R1]
         { []
         }
     {offset
       cg1wi: // global
           if (R1 & 7 == 1) goto cg1wq; else goto cg1wu;
       cg1wq: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg1wu: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1wi_info" {
     block_cg1wi_info:
         const _cg1wi;
         const 3;
         const 30;
 },
 sat_sfY3N_entry() //  [R1]
         { []
         }
     {offset
       cg1x3: // global
           _sfY3N::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cg1x4; else goto cg1x5;
       cg1x5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg1x7; else goto cg1x6;
       cg1x7: // global
           HpAlloc = 56;
           goto cg1x4;
       cg1x4: // global
           R1 = _sfY3N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1x6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfY3N::P64;
           _sfY3v::P64 = P64[_sfY3N::P64 + 16];
           _sfY3z::P64 = P64[_sfY3N::P64 + 24];
           _sfY3D::P64 = P64[_sfY3N::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfY3D::P64;
           P64[Hp - 24] = _sfY3z::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfY3v::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY3N_info" {
     sat_sfY3N_info:
         const sat_sfY3N_entry;
         const 3;
         const 15;
 },
 sat_sfY3J_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1xj: // global
           _sfY3G::P64 = R2;
           _sfY3J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg1xk; else goto cg1xl;
       cg1xl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg1xn; else goto cg1xm;
       cg1xn: // global
           HpAlloc = 56;
           goto cg1xk;
       cg1xk: // global
           R2 = _sfY3G::P64;
           R1 = _sfY3J::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1xm: // global
           _sfY3v::P64 = P64[_sfY3J::P64 + 7];
           _sfY3D::P64 = P64[_sfY3J::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfY3D::P64;
           P64[Hp - 24] = _sfY3G::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfY3v::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY3J_info" {
     sat_sfY3J_info:
         const sat_sfY3J_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfY3K_entry() //  [R1]
         { []
         }
     {offset
       cg1xo: // global
           _sfY3K::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg1xp; else goto cg1xq;
       cg1xq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg1xs; else goto cg1xr;
       cg1xs: // global
           HpAlloc = 24;
           goto cg1xp;
       cg1xp: // global
           R1 = _sfY3K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1xr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfY3K::P64;
           _sfY3v::P64 = P64[_sfY3K::P64 + 16];
           _sfY3A::P64 = P64[_sfY3K::P64 + 24];
           _sfY3D::P64 = P64[_sfY3K::P64 + 32];
           I64[Hp - 16] = sat_sfY3J_info;
           P64[Hp - 8] = _sfY3v::P64;
           P64[Hp] = _sfY3D::P64;
           R2 = _sfY3v::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfY3A::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY3K_info" {
     sat_sfY3K_info:
         const sat_sfY3K_entry;
         const 3;
         const 15;
 },
 sat_sfY3Q_entry() //  [R1, R2]
         { []
         }
     {offset
       cg1xt: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg1xu; else goto cg1xv;
       cg1xu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1xv: // global
           I64[Sp - 40] = block_cg1wN_info;
           _sfY3r::P64 = P64[R1 + 7];
           _sfY3v::P64 = P64[R1 + 15];
           _sfY3z::P64 = P64[R1 + 23];
           _sfY3A::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfY3r::P64;
           P64[Sp - 24] = _sfY3v::P64;
           P64[Sp - 16] = _sfY3z::P64;
           P64[Sp - 8] = _sfY3A::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug1xM; else goto cg1wO;
       ug1xM: // global
           call _cg1wN(R1) args: 0, res: 0, upd: 0;
       cg1wO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY3Q_info" {
     sat_sfY3Q_info:
         const sat_sfY3Q_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cg1wN() //  [R1]
         { []
         }
     {offset
       cg1wN: // global
           I64[Sp - 8] = block_cg1wS_info;
           _sfY3D::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfY3D::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1xL; else goto cg1wT;
       ug1xL: // global
           call _cg1wS(R1) args: 0, res: 0, upd: 0;
       cg1wT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1wN_info" {
     block_cg1wN_info:
         const _cg1wN;
         const 4;
         const 30;
 },
 _cg1wS() //  [R1]
         { []
         }
     {offset
       cg1wS: // global
           _sfY3v::P64 = P64[Sp + 24];
           _sfY3z::P64 = P64[Sp + 32];
           _sfY3D::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cg1xy; else goto cg1xC;
       cg1xy: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg1xB; else goto cg1xA;
       cg1xB: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1xA: // global
           I64[Hp - 72] = sat_sfY3N_info;
           P64[Hp - 56] = _sfY3v::P64;
           P64[Hp - 48] = _sfY3z::P64;
           P64[Hp - 40] = _sfY3D::P64;
           I64[Hp - 32] = sat_sfY3K_info;
           P64[Hp - 16] = _sfY3v::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfY3D::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cg1xC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg1xH; else goto cg1xG;
       cg1xH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1xG: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfY3D::P64;
           P64[Hp - 24] = _sfY3z::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfY3v::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1wS_info" {
     block_cg1wS_info:
         const _cg1wS;
         const 5;
         const 30;
 },
 k1_sfY3w_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1xN: // global
           _sfY3z::P64 = R4;
           _sfY3y::P64 = R3;
           _sfY3x::P64 = R2;
           _sfY3w::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg1xO; else goto cg1xP;
       cg1xP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg1xR; else goto cg1xQ;
       cg1xR: // global
           HpAlloc = 80;
           goto cg1xO;
       cg1xO: // global
           R4 = _sfY3z::P64;
           R3 = _sfY3y::P64;
           R2 = _sfY3x::P64;
           R1 = _sfY3w::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1xQ: // global
           _sfY3r::P64 = P64[_sfY3w::P64 + 5];
           _sfY3s::P64 = P64[_sfY3w::P64 + 13];
           _sfY3v::P64 = P64[_sfY3w::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sfY3s::P64;
           P64[Hp - 48] = _sfY3x::P64;
           P64[Hp - 40] = _sfY3z::P64;
           I64[Hp - 32] = sat_sfY3Q_info;
           P64[Hp - 24] = _sfY3r::P64;
           P64[Hp - 16] = _sfY3v::P64;
           P64[Hp - 8] = _sfY3z::P64;
           P64[Hp] = Hp - 72;
           R2 = _sfY3v::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfY3y::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sfY3w_info" {
     k1_sfY3w_info:
         const k1_sfY3w_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sfY3T_entry() //  [R1]
         { []
         }
     {offset
       cg1y1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1y2; else goto cg1y3;
       cg1y2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1y3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY3T_info" {
     sat_sfY3T_info:
         const sat_sfY3T_entry;
         const 1;
         const 16;
 },
 sat_sfY3V_entry() //  [R1]
         { []
         }
     {offset
       cg1ya: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1yb; else goto cg1yc;
       cg1yb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1yc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY3V_info" {
     sat_sfY3V_info:
         const sat_sfY3V_entry;
         const 1;
         const 16;
 },
 sat_sfY3W_entry() //  [R1]
         { []
         }
     {offset
       cg1yh: // global
           _sfY3W::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cg1yi; else goto cg1yj;
       cg1yj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg1yl; else goto cg1yk;
       cg1yl: // global
           HpAlloc = 32;
           goto cg1yi;
       cg1yi: // global
           R1 = _sfY3W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1yk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfY3W::P64;
           _sfY3p::P64 = P64[_sfY3W::P64 + 16];
           _sfY3q::P64 = P64[_sfY3W::P64 + 24];
           _sfY3r::P64 = P64[_sfY3W::P64 + 32];
           _sfY3s::P64 = P64[_sfY3W::P64 + 40];
           _sfY3t::P64 = P64[_sfY3W::P64 + 48];
           _sfY3v::P64 = P64[_sfY3W::P64 + 56];
           I64[Hp - 24] = k1_sfY3w_info;
           P64[Hp - 16] = _sfY3r::P64;
           P64[Hp - 8] = _sfY3s::P64;
           P64[Hp] = _sfY3v::P64;
           I64[Sp - 56] = block_cg1xS_info;
           R1 = _sfY3t::P64;
           P64[Sp - 48] = Hp - 21;
           P64[Sp - 40] = _sfY3p::P64;
           P64[Sp - 32] = _sfY3q::P64;
           P64[Sp - 24] = _sfY3v::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ug1ys; else goto cg1xT;
       ug1ys: // global
           call _cg1xS(R1) args: 0, res: 0, upd: 0;
       cg1xT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY3W_info" {
     sat_sfY3W_info:
         const sat_sfY3W_entry;
         const 6;
         const 15;
 },
 _cg1xS() //  [R1]
         { []
         }
     {offset
       cg1xS: // global
           _cg1wC::P64 = P64[Sp + 8];
           _sfY3v::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1ye; else goto cg1yf;
       cg1ye: // global
           Hp = Hp + 24;
           _sfY3R::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1yr; else goto cg1yn;
       cg1yn: // global
           _sfY3S::P64 = P64[_sfY3R::P64 + 7];
           I64[Hp - 16] = sat_sfY3T_info;
           P64[Hp] = _sfY3v::P64;
           R4 = _sfY3S::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _cg1wC::P64;
           Sp = Sp + 40;
           call k1_sfY3w_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
       cg1yf: // global
           Hp = Hp + 24;
           _sfY3R::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg1yr; else goto cg1yq;
       cg1yr: // global
           HpAlloc = 24;
           R1 = _sfY3R::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg1yq: // global
           _sfY3U::P64 = P64[_sfY3R::P64 + 6];
           I64[Hp - 16] = sat_sfY3V_info;
           P64[Hp] = _sfY3v::P64;
           R4 = _sfY3U::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 24];
           R1 = _cg1wC::P64;
           Sp = Sp + 40;
           call k1_sfY3w_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg1xS_info" {
     block_cg1xS_info:
         const _cg1xS;
         const 4;
         const 30;
 },
 Data.Functor.Sum.$w$cgmapMo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1yt: // global
           _sfY3t::P64 = R6;
           _sfY3s::P64 = R5;
           _sfY3r::P64 = R4;
           _sfY3q::P64 = R3;
           _sfY3p::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg1yu; else goto cg1yv;
       cg1yv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg1yx; else goto cg1yw;
       cg1yx: // global
           HpAlloc = 24;
           goto cg1yu;
       cg1yu: // global
           R6 = _sfY3t::P64;
           R5 = _sfY3s::P64;
           R4 = _sfY3r::P64;
           R3 = _sfY3q::P64;
           R2 = _sfY3p::P64;
           R1 = Data.Functor.Sum.$w$cgmapMo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1yw: // global
           I64[Hp - 16] = lvl8_sfY3u_info;
           P64[Hp] = _sfY3r::P64;
           I64[Sp - 56] = block_cg1w1_info;
           R2 = _sfY3r::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sfY3p::P64;
           P64[Sp - 32] = _sfY3q::P64;
           P64[Sp - 24] = _sfY3r::P64;
           P64[Sp - 16] = _sfY3s::P64;
           P64[Sp - 8] = _sfY3t::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgmapMo_info" {
     Data.Functor.Sum.$w$cgmapMo_info:
         const Data.Functor.Sum.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg1w1() //  [R1]
         { []
         }
     {offset
       cg1w1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg1yA; else goto cg1yz;
       cg1yA: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg1yz: // global
           I64[Hp - 80] = sat_sfY42_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sfY3W_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1w1_info" {
     block_cg1w1_info:
         const _cg1w1;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.688747382 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapMo_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapMo_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapMo_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapMo_slow() //  [R1]
         { []
         }
     {offset
       cg1Ab: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapMo_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapMo_entry() //  [R6]
         { []
         }
     {offset
       cg1Af: // global
           _sfY47::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sfY47::P64;
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgmapMo_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapMo_info" {
     Data.Functor.Sum.$fDataSum_$cgmapMo_info:
         const Data.Functor.Sum.$fDataSum_$cgmapMo_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapMo_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.693810549 UTC

[section ""data" . lvl4_rfXPs_closure" {
     lvl4_rfXPs_closure:
         const lvl4_rfXPs_info;
         const 0;
 },
 lvl4_rfXPs_entry() //  [R2]
         { []
         }
     {offset
       cg1Az: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg1AA; else goto cg1AB;
       cg1AA: // global
           R2 = R2;
           R1 = lvl4_rfXPs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1AB: // global
           I64[Sp - 8] = block_cg1As_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug1AI; else goto cg1At;
       ug1AI: // global
           call _cg1As(R1) args: 0, res: 0, upd: 0;
       cg1At: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rfXPs_info" {
     lvl4_rfXPs_info:
         const lvl4_rfXPs_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfYa7_srt+552;
 },
 _cg1As() //  [R1]
         { []
         }
     {offset
       cg1As: // global
           if (R1 & 7 == 1) goto cg1Aw; else goto cg1Ax;
       cg1Aw: // global
           R1 = Data.Functor.Sum.$cInL_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1Ax: // global
           R1 = Data.Functor.Sum.$cInR_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1As_info" {
     block_cg1As_info:
         const _cg1As;
         const 0;
         const 12884901918;
         const SfYa7_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.69906423 UTC

[section ""data" . lvl5_rfXPt_closure" {
     lvl5_rfXPt_closure:
         const lvl5_rfXPt_info;
         const 0;
 },
 lvl5_rfXPt_entry() //  []
         { []
         }
     {offset
       cg1B0: // global
           R1 = Data.Functor.Sum.$tSum_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rfXPt_info" {
     lvl5_rfXPt_info:
         const lvl5_rfXPt_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfYa7_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.702967569 UTC

[section ""data" . lvl6_rfXPu_closure" {
     lvl6_rfXPu_closure:
         const lvl6_rfXPu_info;
 },
 lvl6_rfXPu_entry() //  []
         { []
         }
     {offset
       cg1Bc: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rfXPu_info" {
     lvl6_rfXPu_info:
         const lvl6_rfXPu_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.706758478 UTC

[section ""data" . lvl7_rfXPv_closure" {
     lvl7_rfXPv_closure:
         const lvl7_rfXPv_info;
 },
 lvl7_rfXPv_entry() //  []
         { []
         }
     {offset
       cg1Bo: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rfXPv_info" {
     lvl7_rfXPv_info:
         const lvl7_rfXPv_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.716757789 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_closure" {
     Data.Functor.Sum.$fDataSum_closure:
         const Data.Functor.Sum.$fDataSum_info;
         const 0;
 },
 sat_sfY4K_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1BF: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$w$cgmapMo_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4K_info" {
     sat_sfY4K_info:
         const sat_sfY4K_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfY4G_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1BN: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$w$cgmapMp_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4G_info" {
     sat_sfY4G_info:
         const sat_sfY4G_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfY4C_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1BV: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$w$cgmapM_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4C_info" {
     sat_sfY4C_info:
         const sat_sfY4C_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfY4y_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1C3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1C4; else goto cg1C5;
       cg1C4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1C5: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Sum.$fDataSum_$cgmapQi_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4y_info" {
     sat_sfY4y_info:
         const sat_sfY4y_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const SfYa7_srt+544;
 },
 sat_sfY4x_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg1Cb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg1Cc; else goto cg1Cd;
       cg1Cc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1Cd: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fDataSum_$cgmapQ_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4x_info" {
     sat_sfY4x_info:
         const sat_sfY4x_entry;
         const 6;
         const 8;
         const 8589934607;
 },
 sat_sfY4w_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg1Cj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1Ck; else goto cg1Cl;
       cg1Ck: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1Cl: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4w_info" {
     sat_sfY4w_info:
         const sat_sfY4w_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sfY4v_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg1Cr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1Cs; else goto cg1Ct;
       cg1Cs: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1Ct: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Sum.$fDataSum3_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4v_info" {
     sat_sfY4v_info:
         const sat_sfY4v_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sfY4u_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg1Cz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg1CA; else goto cg1CB;
       cg1CA: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1CB: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fDataSum4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4u_info" {
     sat_sfY4u_info:
         const sat_sfY4u_entry;
         const 6;
         const 8;
         const 8589934607;
 },
 sat_sfY4t_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1CH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1CI; else goto cg1CJ;
       cg1CI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1CJ: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Sum.$fDataSum_$cgunfold_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4t_info" {
     sat_sfY4t_info:
         const sat_sfY4t_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const SfYa7_srt+456;
 },
 sat_sfY4s_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1CP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg1CQ; else goto cg1CR;
       cg1CQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1CR: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Sum.$fDataSum_$cgfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfY4s_info" {
     sat_sfY4s_info:
         const sat_sfY4s_entry;
         const 6;
         const 8;
         const 12884901911;
 },
 sat_sfY4r_entry() //  [R1]
         { []
         }
     {offset
       cg1CW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1CX; else goto cg1CY;
       cg1CX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1CY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$w$cp1Data_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfY4r_info" {
     sat_sfY4r_info:
         const sat_sfY4r_entry;
         const 4;
         const 4294967311;
         const SfYa7_srt+528;
 },
 Data.Functor.Sum.$fDataSum_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1D0: // global
           Hp = Hp + 640;
           if (Hp > HpLim) (likely: False) goto cg1D4; else goto cg1D3;
       cg1D4: // global
           HpAlloc = 640;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fDataSum_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg1D3: // global
           I64[Hp - 632] = sat_sfY4K_info;
           P64[Hp - 624] = R6;
           _sfY4q::P64 = P64[Sp];
           P64[Hp - 616] = _sfY4q::P64;
           I64[Hp - 608] = sat_sfY4G_info;
           P64[Hp - 600] = R6;
           P64[Hp - 592] = _sfY4q::P64;
           I64[Hp - 584] = sat_sfY4C_info;
           P64[Hp - 576] = R6;
           P64[Hp - 568] = _sfY4q::P64;
           I64[Hp - 560] = sat_sfY4y_info;
           P64[Hp - 552] = R2;
           P64[Hp - 544] = R3;
           P64[Hp - 536] = R4;
           P64[Hp - 528] = R5;
           P64[Hp - 520] = R6;
           P64[Hp - 512] = _sfY4q::P64;
           I64[Hp - 504] = sat_sfY4x_info;
           P64[Hp - 496] = R2;
           P64[Hp - 488] = R3;
           P64[Hp - 480] = R4;
           P64[Hp - 472] = R5;
           P64[Hp - 464] = R6;
           P64[Hp - 456] = _sfY4q::P64;
           I64[Hp - 448] = sat_sfY4w_info;
           P64[Hp - 440] = R2;
           P64[Hp - 432] = R3;
           P64[Hp - 424] = R4;
           P64[Hp - 416] = R5;
           P64[Hp - 408] = R6;
           P64[Hp - 400] = _sfY4q::P64;
           I64[Hp - 392] = sat_sfY4v_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           P64[Hp - 368] = R4;
           P64[Hp - 360] = R5;
           P64[Hp - 352] = R6;
           P64[Hp - 344] = _sfY4q::P64;
           I64[Hp - 336] = sat_sfY4u_info;
           P64[Hp - 328] = R2;
           P64[Hp - 320] = R3;
           P64[Hp - 312] = R4;
           P64[Hp - 304] = R5;
           P64[Hp - 296] = R6;
           P64[Hp - 288] = _sfY4q::P64;
           I64[Hp - 280] = sat_sfY4t_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _sfY4q::P64;
           I64[Hp - 224] = sat_sfY4s_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           P64[Hp - 184] = R6;
           P64[Hp - 176] = _sfY4q::P64;
           I64[Hp - 168] = sat_sfY4r_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 168;
           P64[Hp - 104] = Hp - 221;
           P64[Hp - 96] = Hp - 277;
           P64[Hp - 88] = lvl4_rfXPs_closure+1;
           P64[Hp - 80] = lvl5_rfXPt_closure+1;
           P64[Hp - 72] = lvl6_rfXPu_closure+2;
           P64[Hp - 64] = lvl7_rfXPv_closure+2;
           P64[Hp - 56] = Hp - 334;
           P64[Hp - 48] = Hp - 388;
           P64[Hp - 40] = Hp - 444;
           P64[Hp - 32] = Hp - 502;
           P64[Hp - 24] = Hp - 557;
           P64[Hp - 16] = Hp - 581;
           P64[Hp - 8] = Hp - 605;
           P64[Hp] = Hp - 629;
           R1 = Hp - 119;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_info" {
     Data.Functor.Sum.$fDataSum_info:
         const Data.Functor.Sum.$fDataSum_entry;
         const 0;
         const 925793085554702;
         const 25769803802;
         const SfYa7_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.741973809 UTC

[section ""data" . Data.Functor.Sum.InL_closure" {
     Data.Functor.Sum.InL_closure:
         const Data.Functor.Sum.InL_info;
 },
 Data.Functor.Sum.InL_entry() //  [R2]
         { []
         }
     {offset
       cg1Ec: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg1Eg; else goto cg1Ef;
       cg1Eg: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Functor.Sum.InL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1Ef: // global
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InL_info" {
     Data.Functor.Sum.InL_info:
         const Data.Functor.Sum.InL_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.746281448 UTC

[section ""data" . Data.Functor.Sum.InR_closure" {
     Data.Functor.Sum.InR_closure:
         const Data.Functor.Sum.InR_info;
 },
 Data.Functor.Sum.InR_entry() //  [R2]
         { []
         }
     {offset
       cg1Er: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg1Ev; else goto cg1Eu;
       cg1Ev: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Functor.Sum.InR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg1Eu: // global
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InR_info" {
     Data.Functor.Sum.InR_info:
         const Data.Functor.Sum.InR_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.749971564 UTC

[section ""cstring" . ig059_str" {
     ig059_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,83,117,109,46,73,110,76]
 },
 Data.Functor.Sum.InL_con_entry() //  [R1]
         { []
         }
     {offset
       cg1EB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InL_con_info" {
     Data.Functor.Sum.InL_con_info:
         const Data.Functor.Sum.InL_con_entry;
         const 1;
         const 2;
         const ig059_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.753164415 UTC

[section ""cstring" . ig05b_str" {
     ig05b_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,83,117,109,46,73,110,82]
 },
 Data.Functor.Sum.InR_con_entry() //  [R1]
         { []
         }
     {offset
       cg1EH: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InR_con_info" {
     Data.Functor.Sum.InR_con_info:
         const Data.Functor.Sum.InR_con_entry;
         const 1;
         const 4294967298;
         const ig05b_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:48.756648999 UTC

[section ""relreadonly" . SfYa7_srt" {
     SfYa7_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Sum.$fRead1Sum2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Functor.Sum.$fRead1Sum6_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Sum.$fRead1Sum1_closure;
         const Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure;
         const Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure;
         const Data.Functor.Sum.$fRead1Sum_closure;
         const Data.Functor.Sum.$fRead1Sum3_closure;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const Data.Functor.Sum.$w$cliftShowsPrec_closure;
         const Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure;
         const Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure;
         const Data.Functor.Sum.$fShow1Sum_closure;
         const Data.Functor.Sum.$fReadSum1_closure;
         const Data.Functor.Sum.$fReadSum_$creadsPrec_closure;
         const Data.Functor.Sum.$fReadSum_$creadListPrec_closure;
         const Data.Functor.Sum.$fReadSum_$creadList_closure;
         const Data.Functor.Sum.$fReadSum_closure;
         const Data.Functor.Sum.$fShowSum_$cshowsPrec_closure;
         const Data.Functor.Sum.$fShowSum_$cshow_closure;
         const Data.Functor.Sum.$fShowSum_$cshowList_closure;
         const Data.Functor.Sum.$fShowSum_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Functor.Sum.$fFoldableSum3_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Functor.Sum.$fFoldableSum4_closure;
         const Data.Functor.Sum.$fFoldableSum_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Sum.$fFoldableSum5_closure;
         const Data.Functor.Sum.$fFoldableSum_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Functor.Sum.$fFoldableSum_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Functor.Sum.$fFoldableSum10_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldl_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure;
         const Data.Functor.Sum.$fFoldableSum9_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldr_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure;
         const Data.Functor.Sum.$fFoldableSum_$clength_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure;
         const Data.Functor.Sum.$fFoldableSum11_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Functor.Sum.$fFoldableSum1_closure;
         const Data.Functor.Sum.$fFoldableSum_$cnull_closure;
         const Data.Functor.Sum.$fFoldableSum_$ctoList_closure;
         const Data.Functor.Sum.$fFoldableSum_closure;
         const Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure;
         const Data.Functor.Sum.$fTraversableSum_closure;
         const Data.Data.$wlvl_closure;
         const Data.Functor.Sum.$w$cgunfold_closure;
         const Data.Functor.Sum.$fDataSum_$cgunfold_closure;
         const GHC.List.badHead_closure;
         const go61_rfXP6_closure;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const go1_rfXP7_closure;
         const Data.Data.mkConstr1_closure;
         const $tSum3_rfXPb_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Functor.Sum.$w$cp1Data_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Functor.Sum.$fDataSum_$cgmapQi_closure;
         const Data.Functor.Sum.$cInL_closure;
         const Data.Functor.Sum.$cInR_closure;
         const lvl4_rfXPs_closure;
         const Data.Functor.Sum.$tSum_closure;
         const Data.Functor.Sum.$fDataSum_closure;
         const lvl5_rfXPt_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.544977178 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:52.548272315 UTC

[section ""data" . Data.Functor.Sum.$fEq1Sum_$cliftEq_closure" {
     Data.Functor.Sum.$fEq1Sum_$cliftEq_closure:
         const Data.Functor.Sum.$fEq1Sum_$cliftEq_info;
 },
 Data.Functor.Sum.$fEq1Sum_$cliftEq_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1Ud: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1Ue; else goto cg1Uf;
       cg1Ue: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEq1Sum_$cliftEq_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1Uf: // global
           I64[Sp - 40] = block_cg1U6_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug1UQ; else goto cg1U7;
       ug1UQ: // global
           call _cg1U6(R1) args: 0, res: 0, upd: 0;
       cg1U7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEq1Sum_$cliftEq_info" {
     Data.Functor.Sum.$fEq1Sum_$cliftEq_info:
         const Data.Functor.Sum.$fEq1Sum_$cliftEq_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg1U6() //  [R1]
         { []
         }
     {offset
       cg1U6: // global
           _sg1ES::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1Ua; else goto cg1Ub;
       cg1Ua: // global
           I64[Sp] = block_cg1Ui_info;
           _sg1EU::P64 = P64[R1 + 7];
           R1 = _sg1ES::P64;
           P64[Sp + 32] = _sg1EU::P64;
           if (R1 & 7 != 0) goto ug1UO; else goto cg1Uk;
       ug1UO: // global
           call _cg1Ui(R1) args: 0, res: 0, upd: 0;
       cg1Uk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg1Ub: // global
           I64[Sp + 8] = block_cg1Ux_info;
           _sg1EY::P64 = P64[R1 + 6];
           R1 = _sg1ES::P64;
           P64[Sp + 32] = _sg1EY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug1UP; else goto cg1Uz;
       ug1UP: // global
           call _cg1Ux(R1) args: 0, res: 0, upd: 0;
       cg1Uz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1U6_info" {
     block_cg1U6_info:
         const _cg1U6;
         const 4;
         const 30;
 },
 _cg1Ui() //  [R1]
         { []
         }
     {offset
       cg1Ui: // global
           if (R1 & 7 == 1) goto cg1Uq; else goto ug1UN;
       cg1Uq: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ug1UN: // global
           Sp = Sp + 40;
           call _cg1UF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg1Ui_info" {
     block_cg1Ui_info:
         const _cg1Ui;
         const 132;
         const 30;
 },
 _cg1Ux() //  [R1]
         { []
         }
     {offset
       cg1Ux: // global
           if (R1 & 7 == 1) goto ug1UM; else goto cg1UJ;
       ug1UM: // global
           Sp = Sp + 32;
           call _cg1UF() args: 0, res: 0, upd: 0;
       cg1UJ: // global
           R4 = P64[R1 + 6];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1Ux_info" {
     block_cg1Ux_info:
         const _cg1Ux;
         const 3;
         const 30;
 },
 _cg1UF() //  []
         { []
         }
     {offset
       cg1UF: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.558192286 UTC

[section ""data" . Data.Functor.Sum.$fEq1Sum_closure" {
     Data.Functor.Sum.$fEq1Sum_closure:
         const Data.Functor.Sum.$fEq1Sum_info;
 },
 Data.Functor.Sum.$fEq1Sum_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1Vr: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fEq1Sum_$cliftEq_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEq1Sum_info" {
     Data.Functor.Sum.$fEq1Sum_info:
         const Data.Functor.Sum.$fEq1Sum_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.563234889 UTC

[section ""data" . Data.Functor.Sum.$fOrd1Sum_$cliftCompare_closure" {
     Data.Functor.Sum.$fOrd1Sum_$cliftCompare_closure:
         const Data.Functor.Sum.$fOrd1Sum_$cliftCompare_info;
 },
 Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cg1VJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1VK; else goto cg1VL;
       cg1VK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrd1Sum_$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1VL: // global
           I64[Sp - 40] = block_cg1VC_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug1Wk; else goto cg1VD;
       ug1Wk: // global
           call _cg1VC(R1) args: 0, res: 0, upd: 0;
       cg1VD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrd1Sum_$cliftCompare_info" {
     Data.Functor.Sum.$fOrd1Sum_$cliftCompare_info:
         const Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg1VC() //  [R1]
         { []
         }
     {offset
       cg1VC: // global
           _sg1F6::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1VG; else goto cg1VH;
       cg1VG: // global
           I64[Sp] = block_cg1VO_info;
           _sg1F8::P64 = P64[R1 + 7];
           R1 = _sg1F6::P64;
           P64[Sp + 32] = _sg1F8::P64;
           if (R1 & 7 != 0) goto ug1Wi; else goto cg1VQ;
       ug1Wi: // global
           call _cg1VO(R1) args: 0, res: 0, upd: 0;
       cg1VQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg1VH: // global
           I64[Sp + 8] = block_cg1W3_info;
           _sg1Fc::P64 = P64[R1 + 6];
           R1 = _sg1F6::P64;
           P64[Sp + 32] = _sg1Fc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug1Wj; else goto cg1W5;
       ug1Wj: // global
           call _cg1W3(R1) args: 0, res: 0, upd: 0;
       cg1W5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1VC_info" {
     block_cg1VC_info:
         const _cg1VC;
         const 4;
         const 30;
 },
 _cg1VO() //  [R1]
         { []
         }
     {offset
       cg1VO: // global
           if (R1 & 7 == 1) goto cg1VW; else goto cg1W0;
       cg1VW: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
       cg1W0: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1VO_info" {
     block_cg1VO_info:
         const _cg1VO;
         const 132;
         const 30;
 },
 _cg1W3() //  [R1]
         { []
         }
     {offset
       cg1W3: // global
           if (R1 & 7 == 1) goto cg1Wb; else goto cg1Wf;
       cg1Wb: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg1Wf: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1W3_info" {
     block_cg1W3_info:
         const _cg1W3;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.574543135 UTC

[section ""data" . Data.Functor.Sum.$fOrd1Sum1_closure" {
     Data.Functor.Sum.$fOrd1Sum1_closure:
         const Data.Functor.Sum.$fOrd1Sum1_info;
 },
 Data.Functor.Sum.$fOrd1Sum1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg1X8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1X9; else goto cg1Xa;
       cg1X9: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrd1Sum1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1Xa: // global
           I64[Sp - 40] = block_cg1X1_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug1XL; else goto cg1X2;
       ug1XL: // global
           call _cg1X1(R1) args: 0, res: 0, upd: 0;
       cg1X2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrd1Sum1_info" {
     Data.Functor.Sum.$fOrd1Sum1_info:
         const Data.Functor.Sum.$fOrd1Sum1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg1X1() //  [R1]
         { []
         }
     {offset
       cg1X1: // global
           _sg1Fk::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg1X5; else goto cg1X6;
       cg1X5: // global
           I64[Sp] = block_cg1Xd_info;
           _sg1Fm::P64 = P64[R1 + 7];
           R1 = _sg1Fk::P64;
           P64[Sp + 32] = _sg1Fm::P64;
           if (R1 & 7 != 0) goto ug1XJ; else goto cg1Xf;
       ug1XJ: // global
           call _cg1Xd(R1) args: 0, res: 0, upd: 0;
       cg1Xf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg1X6: // global
           I64[Sp + 8] = block_cg1Xs_info;
           _sg1Fq::P64 = P64[R1 + 6];
           R1 = _sg1Fk::P64;
           P64[Sp + 32] = _sg1Fq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug1XK; else goto cg1Xu;
       ug1XK: // global
           call _cg1Xs(R1) args: 0, res: 0, upd: 0;
       cg1Xu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1X1_info" {
     block_cg1X1_info:
         const _cg1X1;
         const 4;
         const 30;
 },
 _cg1Xd() //  [R1]
         { []
         }
     {offset
       cg1Xd: // global
           if (R1 & 7 == 1) goto cg1Xl; else goto ug1XI;
       cg1Xl: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
       ug1XI: // global
           Sp = Sp + 40;
           call _cg1XA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg1Xd_info" {
     block_cg1Xd_info:
         const _cg1Xd;
         const 132;
         const 30;
 },
 _cg1Xs() //  [R1]
         { []
         }
     {offset
       cg1Xs: // global
           if (R1 & 7 == 1) goto ug1XH; else goto cg1XE;
       ug1XH: // global
           Sp = Sp + 32;
           call _cg1XA() args: 0, res: 0, upd: 0;
       cg1XE: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg1Xs_info" {
     block_cg1Xs_info:
         const _cg1Xs;
         const 3;
         const 30;
 },
 _cg1XA() //  []
         { []
         }
     {offset
       cg1XA: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.586282562 UTC

[section ""data" . Data.Functor.Sum.$fOrd1Sum_closure" {
     Data.Functor.Sum.$fOrd1Sum_closure:
         const Data.Functor.Sum.$fOrd1Sum_info;
 },
 sat_sg1Fx_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1Yz: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Fx_info" {
     sat_sg1Fx_info:
         const sat_sg1Fx_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1Fw_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg1YH: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fOrd1Sum1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Fw_info" {
     sat_sg1Fw_info:
         const sat_sg1Fw_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Functor.Sum.$fOrd1Sum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg1YL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg1YP; else goto cg1YO;
       cg1YP: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrd1Sum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg1YO: // global
           I64[Hp - 64] = sat_sg1Fx_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg1Fw_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 37;
           P64[Hp] = Hp - 61;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrd1Sum_info" {
     Data.Functor.Sum.$fOrd1Sum_info:
         const Data.Functor.Sum.$fOrd1Sum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.593188156 UTC

[section ""cstring" . Data.Functor.Sum.$fRead1Sum8_bytes" {
     Data.Functor.Sum.$fRead1Sum8_bytes:
         I8[] [73,110,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.595484427 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum7_closure" {
     Data.Functor.Sum.$fRead1Sum7_closure:
         const Data.Functor.Sum.$fRead1Sum7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fRead1Sum7_entry() //  [R1]
         { []
         }
     {offset
       cg1Zd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1Ze; else goto cg1Zf;
       cg1Ze: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1Zf: // global
           (_cg1Za::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg1Za::I64 == 0) goto cg1Zc; else goto cg1Zb;
       cg1Zc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg1Zb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg1Za::I64;
           R2 = Data.Functor.Sum.$fRead1Sum8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum7_info" {
     Data.Functor.Sum.$fRead1Sum7_info:
         const Data.Functor.Sum.$fRead1Sum7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.599055632 UTC

[section ""cstring" . Data.Functor.Sum.$fRead1Sum4_bytes" {
     Data.Functor.Sum.$fRead1Sum4_bytes:
         I8[] [73,110,82]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.601290254 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum3_closure" {
     Data.Functor.Sum.$fRead1Sum3_closure:
         const Data.Functor.Sum.$fRead1Sum3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fRead1Sum3_entry() //  [R1]
         { []
         }
     {offset
       cg1Zv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg1Zw; else goto cg1Zx;
       cg1Zw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1Zx: // global
           (_cg1Zs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg1Zs::I64 == 0) goto cg1Zu; else goto cg1Zt;
       cg1Zu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg1Zt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg1Zs::I64;
           R2 = Data.Functor.Sum.$fRead1Sum4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum3_info" {
     Data.Functor.Sum.$fRead1Sum3_info:
         const Data.Functor.Sum.$fRead1Sum3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.604866763 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum2_closure" {
     Data.Functor.Sum.$fRead1Sum2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Sum.$fRead1Sum3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.607003881 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum5_closure" {
     Data.Functor.Sum.$fRead1Sum5_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.60870655 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum6_closure" {
     Data.Functor.Sum.$fRead1Sum6_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.616952462 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum1_closure" {
     Data.Functor.Sum.$fRead1Sum1_closure:
         const Data.Functor.Sum.$fRead1Sum1_info;
         const 0;
 },
 ds_sg1FC_entry() //  [R1]
         { []
         }
     {offset
       cg1ZR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1ZS; else goto cg1ZT;
       cg1ZS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg1ZT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sg1FC_info" {
     ds_sg1FC_info:
         const ds_sg1FC_entry;
         const 3;
         const 15;
 },
 ds1_sg1FD_entry() //  [R1]
         { []
         }
     {offset
       cg1ZY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg1ZZ; else goto cg200;
       cg1ZZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg200: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sg1FD_info" {
     ds1_sg1FD_info:
         const ds1_sg1FD_entry;
         const 3;
         const 15;
 },
 sat_sg1FL_entry() //  [R1, R2]
         { []
         }
     {offset
       cg20l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg20p; else goto cg20o;
       cg20p: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg20o: // global
           _sg1FG::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _sg1FG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1FL_info" {
     sat_sg1FL_info:
         const sat_sg1FL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sg1FM_entry() //  [R1, R2]
         { []
         }
     {offset
       cg20q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg20u; else goto cg20t;
       cg20u: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg20t: // global
           _sg1FC::P64 = P64[R1 + 7];
           _sg1FG::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sg1FL_info;
           P64[Hp] = _sg1FG::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Sum.$fRead1Sum5_closure+1;
           R1 = _sg1FC::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1FM_info" {
     sat_sg1FM_info:
         const sat_sg1FM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg1FT_entry() //  [R1, R2]
         { []
         }
     {offset
       cg20M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg20Q; else goto cg20P;
       cg20Q: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg20P: // global
           _sg1FG::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _sg1FG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1FT_info" {
     sat_sg1FT_info:
         const sat_sg1FT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sg1FU_entry() //  [R1, R2]
         { []
         }
     {offset
       cg20R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg20V; else goto cg20U;
       cg20V: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg20U: // global
           _sg1FD::P64 = P64[R1 + 7];
           _sg1FG::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sg1FT_info;
           P64[Hp] = _sg1FG::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Sum.$fRead1Sum5_closure+1;
           R1 = _sg1FD::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1FU_info" {
     sat_sg1FU_info:
         const sat_sg1FU_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg1FX_entry() //  [R1]
         { []
         }
     {offset
       cg20Z: // global
           _sg1FX::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg210; else goto cg211;
       cg211: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg213; else goto cg212;
       cg213: // global
           HpAlloc = 24;
           goto cg210;
       cg210: // global
           R1 = _sg1FX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg212: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1FX::P64;
           _sg1FD::P64 = P64[_sg1FX::P64 + 16];
           _sg1FG::P64 = P64[_sg1FX::P64 + 24];
           I64[Hp - 16] = sat_sg1FU_info;
           P64[Hp - 8] = _sg1FD::P64;
           P64[Hp] = _sg1FG::P64;
           I64[Sp - 24] = block_cg20W_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Sum.$fRead1Sum2_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1FX_info" {
     sat_sg1FX_info:
         const sat_sg1FX_entry;
         const 2;
         const 12884901906;
         const Sg21L_srt;
 },
 _cg20W() //  [R1]
         { []
         }
     {offset
       cg20W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg216; else goto cg215;
       cg216: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg215: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg20W_info" {
     block_cg20W_info:
         const _cg20W;
         const 0;
         const 30;
 },
 $wlvl_sg1FE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg21a: // global
           _sg1FG::P64 = R3;
           _sg1FF::I64 = R2;
           _sg1FE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg21b; else goto cg21c;
       cg21c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg21e; else goto cg21d;
       cg21e: // global
           HpAlloc = 24;
           goto cg21b;
       cg21b: // global
           R3 = _sg1FG::P64;
           R2 = _sg1FF::I64;
           R1 = _sg1FE::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg21d: // global
           if (%MO_S_Gt_W64(_sg1FF::I64, 10)) goto cg218; else goto cg219;
       cg218: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg219: // global
           _sg1FC::P64 = P64[_sg1FE::P64 + 6];
           _sg1FD::P64 = P64[_sg1FE::P64 + 14];
           I64[Hp - 16] = sat_sg1FM_info;
           P64[Hp - 8] = _sg1FC::P64;
           P64[Hp] = _sg1FG::P64;
           I64[Sp - 24] = block_cg20v_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Sum.$fRead1Sum6_closure+4;
           P64[Sp - 16] = _sg1FD::P64;
           P64[Sp - 8] = _sg1FG::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_sg1FE_info" {
     $wlvl_sg1FE_info:
         const $wlvl_sg1FE_entry;
         const 2;
         const 64424509451;
         const 8589934605;
         const Sg21L_srt;
 },
 _cg20v() //  [R1]
         { []
         }
     {offset
       cg20v: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg21i; else goto cg21h;
       cg21i: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg21h: // global
           I64[Hp - 40] = sat_sg1FX_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 40;
           R2 = Hp - 6;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg20v_info" {
     block_cg20v_info:
         const _cg20v;
         const 2;
         const 30064771102;
         const Sg21L_srt;
 },
 lvl8_sg1FY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg21r: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg21s; else goto cg21t;
       cg21s: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg21t: // global
           I64[Sp - 24] = block_cg21o_info;
           _sg1FE::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sg1FE::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug21x; else goto cg21p;
       ug21x: // global
           call _cg21o(R1) args: 0, res: 0, upd: 0;
       cg21p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_sg1FY_info" {
     lvl8_sg1FY_info:
         const lvl8_sg1FY_entry;
         const 1;
         const 64424509449;
         const 8589934607;
         const Sg21L_srt;
 },
 _cg21o() //  [R1]
         { []
         }
     {offset
       cg21o: // global
           R3 = P64[Sp + 16];
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl_sg1FE_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg21o_info" {
     block_cg21o_info:
         const _cg21o;
         const 2;
         const 64424509470;
         const Sg21L_srt;
 },
 sat_sg1G5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg21D: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1G5_info" {
     sat_sg1G5_info:
         const sat_sg1G5_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sg21L_srt+32;
 },
 Data.Functor.Sum.$fRead1Sum1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg21G: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cg21K; else goto cg21J;
       cg21K: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg21J: // global
           I64[Hp - 128] = ds_sg1FC_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           I64[Hp - 88] = ds1_sg1FD_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = $wlvl_sg1FE_info;
           P64[Hp - 40] = Hp - 128;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = lvl8_sg1FY_info;
           P64[Hp - 16] = Hp - 46;
           I64[Hp - 8] = sat_sg1G5_info;
           P64[Hp] = Hp - 22;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum1_info" {
     Data.Functor.Sum.$fRead1Sum1_info:
         const Data.Functor.Sum.$fRead1Sum1_entry;
         const 0;
         const 270582939662;
         const 17179869208;
         const Sg21L_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.647878373 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_info;
         const 0;
 },
 sat_sg1Gg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg23p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg23q; else goto cg23r;
       cg23q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg23r: // global
           I64[Sp - 8] = block_cg23m_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Gg_info" {
     sat_sg1Gg_info:
         const sat_sg1Gg_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cg23m() //  [R1]
         { []
         }
     {offset
       cg23m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg23u; else goto cg23t;
       cg23u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg23t: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg23m_info" {
     block_cg23m_info:
         const _cg23m;
         const 0;
         const 30;
 },
 sat_sg1Gb_entry() //  [R1, R2]
         { []
         }
     {offset
       cg23A: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Gb_info" {
     sat_sg1Gb_info:
         const sat_sg1Gb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sg1Ga_entry() //  [R1]
         { []
         }
     {offset
       cg23D: // global
           _sg1Ga::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg23E; else goto cg23F;
       cg23F: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg23H; else goto cg23G;
       cg23H: // global
           HpAlloc = 32;
           goto cg23E;
       cg23E: // global
           R1 = _sg1Ga::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg23G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1Ga::P64;
           _sg1G6::P64 = P64[_sg1Ga::P64 + 16];
           _sg1G7::P64 = P64[_sg1Ga::P64 + 24];
           _sg1G8::P64 = P64[_sg1Ga::P64 + 32];
           _sg1G9::P64 = P64[_sg1Ga::P64 + 40];
           I64[Hp - 24] = sat_sg1Gg_info;
           P64[Hp - 16] = _sg1G9::P64;
           I64[Hp - 8] = sat_sg1Gb_info;
           P64[Hp] = _sg1G8::P64;
           R5 = Hp - 22;
           R4 = Hp - 7;
           R3 = _sg1G7::P64;
           R2 = _sg1G6::P64;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sg1Ga_info" {
     ds_sg1Ga_info:
         const ds_sg1Ga_entry;
         const 4;
         const 4294967311;
         const Sg21L_srt+40;
 },
 sat_sg1Gi_entry() //  [R1]
         { []
         }
     {offset
       cg23R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg23S; else goto cg23T;
       cg23S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg23T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Gi_info" {
     sat_sg1Gi_info:
         const sat_sg1Gi_entry;
         const 2;
         const 18;
 },
 sat_sg1Gj_entry() //  [R1, R2]
         { []
         }
     {offset
       cg23U: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg23Y; else goto cg23X;
       cg23Y: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg23X: // global
           _sg1Ga::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sg1Gi_info;
           P64[Hp - 8] = _sg1Ga::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Gj_info" {
     sat_sg1Gj_info:
         const sat_sg1Gj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cg23Z: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg243; else goto cg242;
       cg243: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg242: // global
           I64[Hp - 56] = ds_sg1Ga_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_sg1Gj_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_info" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_info:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sg21L_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.662968585 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_info;
         const 0;
 },
 sat_sg1Go_entry() //  [R1]
         { []
         }
     {offset
       cg24P: // global
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Go_info" {
     sat_sg1Go_info:
         const sat_sg1Go_entry;
         const 4;
         const 4294967311;
         const Sg21L_srt+40;
 },
 Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cg24S: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg24W; else goto cg24V;
       cg24W: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg24V: // global
           I64[Hp - 40] = sat_sg1Go_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_info" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_info:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const Sg21L_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.671430899 UTC

[section ""data" . Data.Functor.Sum.$fRead1Sum_closure" {
     Data.Functor.Sum.$fRead1Sum_closure:
         const Data.Functor.Sum.$fRead1Sum_info;
         const 0;
 },
 sat_sg1Gu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg25e: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Gu_info" {
     sat_sg1Gu_info:
         const sat_sg1Gu_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg21L_srt+64;
 },
 sat_sg1Gt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg25m: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Gt_info" {
     sat_sg1Gt_info:
         const sat_sg1Gt_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg21L_srt+40;
 },
 sat_sg1Gs_entry() //  [R1]
         { []
         }
     {offset
       cg25t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg25u; else goto cg25v;
       cg25u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg25v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum_$cliftReadList_entry(R3,
                                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Gs_info" {
     sat_sg1Gs_info:
         const sat_sg1Gs_entry;
         const 2;
         const 4294967314;
         const Sg21L_srt+72;
 },
 sat_sg1Gr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg25B: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Gr_info" {
     sat_sg1Gr_info:
         const sat_sg1Gr_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg21L_srt+48;
 },
 Data.Functor.Sum.$fRead1Sum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg25F: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cg25J; else goto cg25I;
       cg25J: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg25I: // global
           I64[Hp - 136] = sat_sg1Gu_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sg1Gt_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sg1Gs_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sg1Gr_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 54;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 134;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_info" {
     Data.Functor.Sum.$fRead1Sum_info:
         const Data.Functor.Sum.$fRead1Sum_entry;
         const 0;
         const 253403070478;
         const 8589934607;
         const Sg21L_srt+40;
 },
 section ""data" . Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadList_info;
         const 0;
 },
 sat_sg1Gx_entry() //  [R1]
         { []
         }
     {offset
       cg25S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg25T; else goto cg25U;
       cg25T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg25U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Gx_info" {
     sat_sg1Gx_info:
         const sat_sg1Gx_entry;
         const 2;
         const 4294967314;
         const Sg21L_srt+80;
 },
 Data.Functor.Sum.$fRead1Sum_$cliftReadList_entry() //  [R2, R3]
         { []
         }
     {offset
       cg25V: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg25Z; else goto cg25Y;
       cg25Z: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg25Y: // global
           I64[Hp - 24] = sat_sg1Gx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fRead1Sum_$cliftReadList_info" {
     Data.Functor.Sum.$fRead1Sum_$cliftReadList_info:
         const Data.Functor.Sum.$fRead1Sum_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg21L_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.68789982 UTC

[section ""data" . Data.Functor.Sum.$w$cliftShowsPrec_closure" {
     Data.Functor.Sum.$w$cliftShowsPrec_closure:
         const Data.Functor.Sum.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Sum.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cg26E: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sg1GG_entry() //  [R1]
         { []
         }
     {offset
       cg26R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg26S; else goto cg26T;
       cg26S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg26T: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1GG_info" {
     sat_sg1GG_info:
         const sat_sg1GG_entry;
         const 3;
         const 15;
 },
 sat_sg1GI_entry() //  [R1]
         { []
         }
     {offset
       cg270: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg271; else goto cg272;
       cg271: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg272: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1GI_info" {
     sat_sg1GI_info:
         const sat_sg1GI_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg277: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg278; else goto cg279;
       cg278: // global
           R1 = Data.Functor.Sum.$w$cliftShowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cg279: // global
           I64[Sp - 40] = block_cg26I_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug27g; else goto cg26J;
       ug27g: // global
           call _cg26I(R1) args: 0, res: 0, upd: 0;
       cg26J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cliftShowsPrec_info" {
     Data.Functor.Sum.$w$cliftShowsPrec_info:
         const Data.Functor.Sum.$w$cliftShowsPrec_entry;
         const 0;
         const 30064771086;
         const 25769803776;
         const Sg21L_srt+88;
         const 1030;
         const Data.Functor.Sum.$w$cliftShowsPrec_slow;
 },
 _cg26I() //  [R1]
         { []
         }
     {offset
       cg26I: // global
           _sg1GA::P64 = P64[Sp + 16];
           _sg1GB::P64 = P64[Sp + 24];
           _sg1GC::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cg274; else goto cg275;
       cg274: // global
           Hp = Hp + 40;
           _sg1GE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg27f; else goto cg27b;
       cg27b: // global
           _sg1GF::P64 = P64[_sg1GE::P64 + 7];
           I64[Hp - 32] = sat_sg1GG_info;
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = _sg1GA::P64;
           P64[Hp] = _sg1GB::P64;
           R5 = _sg1GF::P64;
           R4 = _sg1GC::I64;
           R3 = Data.Functor.Sum.$fRead1Sum7_closure;
           R2 = Hp - 32;
           Sp = Sp + 48;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cg275: // global
           Hp = Hp + 40;
           _sg1GE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg27f; else goto cg27e;
       cg27f: // global
           HpAlloc = 40;
           R1 = _sg1GE::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg27e: // global
           _sg1GH::P64 = P64[_sg1GE::P64 + 6];
           I64[Hp - 32] = sat_sg1GI_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sg1GA::P64;
           P64[Hp] = _sg1GB::P64;
           R5 = _sg1GH::P64;
           R4 = _sg1GC::I64;
           R3 = Data.Functor.Sum.$fRead1Sum3_closure;
           R2 = Hp - 32;
           Sp = Sp + 48;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg26I_info" {
     block_cg26I_info:
         const _cg26I;
         const 517;
         const 12884901918;
         const Sg21L_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.699654563 UTC

[section ""data" . Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cg27U: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg27V; else goto cg27W;
       cg27V: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg27W: // global
           I64[Sp - 40] = block_cg27R_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug280; else goto cg27S;
       ug280: // global
           call _cg27R(R1) args: 0, res: 0, upd: 0;
       cg27S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_info" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_info:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const Sg21L_srt+104;
 },
 _cg27R() //  [R1]
         { []
         }
     {offset
       cg27R: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg27R_info" {
     block_cg27R_info:
         const _cg27R;
         const 5;
         const 4294967326;
         const Sg21L_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.705045118 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum6_closure" {
     Data.Functor.Sum.$fFoldableSum6_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.70887165 UTC

[section ""data" . Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowList_info;
         const 0;
 },
 sat_sg1GY_entry() //  [R1, R2]
         { []
         }
     {offset
       cg28l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg28m; else goto cg28n;
       cg28m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg28n: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sg1GX::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sg1GX::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1GY_info" {
     sat_sg1GY_info:
         const sat_sg1GY_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sg21L_srt+104;
 },
 Data.Functor.Sum.$fShow1Sum_$cliftShowList_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cg28o: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg28s; else goto cg28r;
       cg28s: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg28r: // global
           I64[Hp - 32] = sat_sg1GY_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 31;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShow1Sum_$cliftShowList_info" {
     Data.Functor.Sum.$fShow1Sum_$cliftShowList_info:
         const Data.Functor.Sum.$fShow1Sum_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const Sg21L_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.715659683 UTC

[section ""data" . Data.Functor.Sum.$fShow1Sum_closure" {
     Data.Functor.Sum.$fShow1Sum_closure:
         const Data.Functor.Sum.$fShow1Sum_info;
         const 0;
 },
 sat_sg1H2_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg28L: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg28M; else goto cg28N;
       cg28M: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg28N: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$fShow1Sum_$cliftShowList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1H2_info" {
     sat_sg1H2_info:
         const sat_sg1H2_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sg21L_srt+120;
 },
 sat_sg1H1_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg28T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg28U; else goto cg28V;
       cg28U: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg28V: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1H1_info" {
     sat_sg1H1_info:
         const sat_sg1H1_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sg21L_srt+112;
 },
 Data.Functor.Sum.$fShow1Sum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg28X: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg291; else goto cg290;
       cg291: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShow1Sum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg290: // global
           I64[Hp - 64] = sat_sg1H2_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg1H1_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 36;
           P64[Hp] = Hp - 60;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShow1Sum_info" {
     Data.Functor.Sum.$fShow1Sum_info:
         const Data.Functor.Sum.$fShow1Sum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sg21L_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.723982387 UTC

[section ""data" . Data.Functor.Sum.$fEqSum_$c==_closure" {
     Data.Functor.Sum.$fEqSum_$c==_closure:
         const Data.Functor.Sum.$fEqSum_$c==_info;
 },
 sat_sg1H8_entry() //  [R1]
         { []
         }
     {offset
       cg29s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg29t; else goto cg29u;
       cg29t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg29u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1H8_info" {
     sat_sg1H8_info:
         const sat_sg1H8_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fEqSum_$c==_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg29v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg29z; else goto cg29y;
       cg29z: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEqSum_$c==_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg29y: // global
           I64[Hp - 16] = sat_sg1H8_info;
           P64[Hp] = R4;
           R6 = R6;
           R5 = R5;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fEq1Sum_$cliftEq_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEqSum_$c==_info" {
     Data.Functor.Sum.$fEqSum_$c==_info:
         const Data.Functor.Sum.$fEqSum_$c==_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.732629095 UTC

[section ""data" . Data.Functor.Sum.$fEqSum_$c/=_closure" {
     Data.Functor.Sum.$fEqSum_$c/=_closure:
         const Data.Functor.Sum.$fEqSum_$c/=_info;
 },
 sat_sg1Hi_entry() //  [R1]
         { []
         }
     {offset
       cg2a2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2a3; else goto cg2a4;
       cg2a3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2a4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Hi_info" {
     sat_sg1Hi_info:
         const sat_sg1Hi_entry;
         const 1;
         const 16;
 },
 sat_sg1Hp_entry() //  [R1]
         { []
         }
     {offset
       cg2ah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2ai; else goto cg2aj;
       cg2ai: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2aj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Hp_info" {
     sat_sg1Hp_info:
         const sat_sg1Hp_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fEqSum_$c/=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg2ao: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2ap; else goto cg2aq;
       cg2ap: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEqSum_$c/=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2aq: // global
           I64[Sp - 40] = block_cg29O_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2bk; else goto cg29P;
       ug2bk: // global
           call _cg29O(R1) args: 0, res: 0, upd: 0;
       cg29P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEqSum_$c/=_info" {
     Data.Functor.Sum.$fEqSum_$c/=_info:
         const Data.Functor.Sum.$fEqSum_$c/=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg29O() //  [R1]
         { []
         }
     {offset
       cg29O: // global
           _sg1Hd::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg2al; else goto cg2am;
       cg2al: // global
           I64[Sp] = block_cg29T_info;
           _sg1Hf::P64 = P64[R1 + 7];
           R1 = _sg1Hd::P64;
           P64[Sp + 32] = _sg1Hf::P64;
           if (R1 & 7 != 0) goto ug2bg; else goto cg29U;
       ug2bg: // global
           call _cg29T(R1) args: 0, res: 0, upd: 0;
       cg29U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg2am: // global
           I64[Sp + 8] = block_cg2a7_info;
           _sg1Hl::P64 = P64[R1 + 6];
           R1 = _sg1Hd::P64;
           P64[Sp + 32] = _sg1Hl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug2bh; else goto cg2a8;
       ug2bh: // global
           call _cg2a7(R1) args: 0, res: 0, upd: 0;
       cg2a8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg29O_info" {
     block_cg29O_info:
         const _cg29O;
         const 4;
         const 30;
 },
 _cg29T() //  [R1]
         { []
         }
     {offset
       cg29T: // global
           if (R1 & 7 == 1) goto cg2au; else goto ug2bd;
       cg2au: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2ax; else goto cg2aw;
       cg2ax: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2aw: // global
           _sg1Hh::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sg1Hi_info;
           P64[Hp] = P64[Sp + 24];
           _sg1Hf::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg2as_info;
           R4 = _sg1Hh::P64;
           R3 = _sg1Hf::P64;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ug2bd: // global
           Sp = Sp + 40;
           call _cg2b1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg29T_info" {
     block_cg29T_info:
         const _cg29T;
         const 132;
         const 30;
 },
 _cg2as() //  [R1]
         { []
         }
     {offset
       cg2as: // global
           if (R1 & 7 == 1) goto ug2be; else goto ug2bf;
       ug2be: // global
           Sp = Sp + 8;
           call _cg2b1() args: 0, res: 0, upd: 0;
       ug2bf: // global
           Sp = Sp + 8;
           call _cg2b5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2as_info" {
     block_cg2as_info:
         const _cg2as;
         const 0;
         const 30;
 },
 _cg2a7() //  [R1]
         { []
         }
     {offset
       cg2a7: // global
           if (R1 & 7 == 1) goto ug2ba; else goto cg2aS;
       ug2ba: // global
           Sp = Sp + 32;
           call _cg2b1() args: 0, res: 0, upd: 0;
       cg2aS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2aV; else goto cg2aU;
       cg2aV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2aU: // global
           _sg1Ho::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sg1Hp_info;
           P64[Hp] = P64[Sp + 16];
           _sg1Hl::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg2aR_info;
           R4 = _sg1Ho::P64;
           R3 = _sg1Hl::P64;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2a7_info" {
     block_cg2a7_info:
         const _cg2a7;
         const 3;
         const 30;
 },
 _cg2aR() //  [R1]
         { []
         }
     {offset
       cg2aR: // global
           if (R1 & 7 == 1) goto ug2bb; else goto ug2bc;
       ug2bb: // global
           Sp = Sp + 8;
           call _cg2b1() args: 0, res: 0, upd: 0;
       ug2bc: // global
           Sp = Sp + 8;
           call _cg2b5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2aR_info" {
     block_cg2aR_info:
         const _cg2aR;
         const 0;
         const 30;
 },
 _cg2b1() //  []
         { []
         }
     {offset
       cg2b1: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg2b5() //  []
         { []
         }
     {offset
       cg2b5: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.752487961 UTC

[section ""data" . Data.Functor.Sum.$fEqSum_closure" {
     Data.Functor.Sum.$fEqSum_closure:
         const Data.Functor.Sum.$fEqSum_info;
 },
 sat_sg1Hv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2cw: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fEqSum_$c/=_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Hv_info" {
     sat_sg1Hv_info:
         const sat_sg1Hv_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1Hu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2cE: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fEqSum_$c==_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Hu_info" {
     sat_sg1Hu_info:
         const sat_sg1Hu_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Functor.Sum.$fEqSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2cI: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg2cM; else goto cg2cL;
       cg2cM: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fEqSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2cL: // global
           I64[Hp - 80] = sat_sg1Hv_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sg1Hu_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 78;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fEqSum_info" {
     Data.Functor.Sum.$fEqSum_info:
         const Data.Functor.Sum.$fEqSum_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.759958066 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$ccompare_closure" {
     Data.Functor.Sum.$fOrdSum_$ccompare_closure:
         const Data.Functor.Sum.$fOrdSum_$ccompare_info;
 },
 sat_sg1HB_entry() //  [R1]
         { []
         }
     {offset
       cg2db: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2dc; else goto cg2dd;
       cg2dc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2dd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1HB_info" {
     sat_sg1HB_info:
         const sat_sg1HB_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$ccompare_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg2de: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2di; else goto cg2dh;
       cg2di: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2dh: // global
           I64[Hp - 16] = sat_sg1HB_info;
           P64[Hp] = R4;
           R6 = R6;
           R5 = R5;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fOrd1Sum_$cliftCompare_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$ccompare_info" {
     Data.Functor.Sum.$fOrdSum_$ccompare_info:
         const Data.Functor.Sum.$fOrdSum_$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.766940146 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$cp1Ord_closure" {
     Data.Functor.Sum.$fOrdSum_$cp1Ord_closure:
         const Data.Functor.Sum.$fOrdSum_$cp1Ord_info;
 },
 sat_sg1HH_entry() //  [R1]
         { []
         }
     {offset
       cg2dB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2dC; else goto cg2dD;
       cg2dC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2dD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1HH_info" {
     sat_sg1HH_info:
         const sat_sg1HH_entry;
         const 1;
         const 16;
 },
 sat_sg1HG_entry() //  [R1]
         { []
         }
     {offset
       cg2dI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2dJ; else goto cg2dK;
       cg2dJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2dK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1HG_info" {
     sat_sg1HG_info:
         const sat_sg1HG_entry;
         const 1;
         const 16;
 },
 sat_sg1HF_entry() //  [R1]
         { []
         }
     {offset
       cg2dP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2dQ; else goto cg2dR;
       cg2dQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2dR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1HF_info" {
     sat_sg1HF_info:
         const sat_sg1HF_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$cp1Ord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2dS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg2dW; else goto cg2dV;
       cg2dW: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$cp1Ord_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2dV: // global
           I64[Hp - 64] = sat_sg1HH_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sg1HG_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg1HF_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Sum.$fEqSum_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$cp1Ord_info" {
     Data.Functor.Sum.$fOrdSum_$cp1Ord_info:
         const Data.Functor.Sum.$fOrdSum_$cp1Ord_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.779284509 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c<_closure" {
     Data.Functor.Sum.$fOrdSum_$c<_closure:
         const Data.Functor.Sum.$fOrdSum_$c<_info;
 },
 sat_sg1HR_entry() //  [R1]
         { []
         }
     {offset
       cg2eB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2eC; else goto cg2eD;
       cg2eC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2eD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1HR_info" {
     sat_sg1HR_info:
         const sat_sg1HR_entry;
         const 1;
         const 16;
 },
 sat_sg1HY_entry() //  [R1]
         { []
         }
     {offset
       cg2eQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2eR; else goto cg2eS;
       cg2eR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2eS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1HY_info" {
     sat_sg1HY_info:
         const sat_sg1HY_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg2eX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2eY; else goto cg2eZ;
       cg2eY: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2eZ: // global
           I64[Sp - 40] = block_cg2en_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2fT; else goto cg2eo;
       ug2fT: // global
           call _cg2en(R1) args: 0, res: 0, upd: 0;
       cg2eo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c<_info" {
     Data.Functor.Sum.$fOrdSum_$c<_info:
         const Data.Functor.Sum.$fOrdSum_$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg2en() //  [R1]
         { []
         }
     {offset
       cg2en: // global
           _sg1HM::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg2eU; else goto cg2eV;
       cg2eU: // global
           I64[Sp] = block_cg2es_info;
           _sg1HO::P64 = P64[R1 + 7];
           R1 = _sg1HM::P64;
           P64[Sp + 32] = _sg1HO::P64;
           if (R1 & 7 != 0) goto ug2fP; else goto cg2et;
       ug2fP: // global
           call _cg2es(R1) args: 0, res: 0, upd: 0;
       cg2et: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg2eV: // global
           I64[Sp + 8] = block_cg2eG_info;
           _sg1HU::P64 = P64[R1 + 6];
           R1 = _sg1HM::P64;
           P64[Sp + 32] = _sg1HU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug2fQ; else goto cg2eH;
       ug2fQ: // global
           call _cg2eG(R1) args: 0, res: 0, upd: 0;
       cg2eH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2en_info" {
     block_cg2en_info:
         const _cg2en;
         const 4;
         const 30;
 },
 _cg2es() //  [R1]
         { []
         }
     {offset
       cg2es: // global
           if (R1 & 7 == 1) goto cg2f3; else goto ug2fM;
       cg2f3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2f6; else goto cg2f5;
       cg2f6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2f5: // global
           _sg1HQ::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sg1HR_info;
           P64[Hp] = P64[Sp + 24];
           _sg1HO::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg2f1_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sg1HO::P64;
           P64[Sp + 24] = _sg1HQ::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug2fM: // global
           Sp = Sp + 40;
           call _cg2fE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2es_info" {
     block_cg2es_info:
         const _cg2es;
         const 132;
         const 30;
 },
 _cg2f1() //  [R1]
         { []
         }
     {offset
       cg2f1: // global
           if (R1 & 7 == 1) goto ug2fN; else goto ug2fO;
       ug2fN: // global
           Sp = Sp + 8;
           call _cg2fE() args: 0, res: 0, upd: 0;
       ug2fO: // global
           Sp = Sp + 8;
           call _cg2fA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2f1_info" {
     block_cg2f1_info:
         const _cg2f1;
         const 0;
         const 30;
 },
 _cg2eG() //  [R1]
         { []
         }
     {offset
       cg2eG: // global
           if (R1 & 7 == 1) goto ug2fJ; else goto cg2fr;
       ug2fJ: // global
           Sp = Sp + 32;
           call _cg2fA() args: 0, res: 0, upd: 0;
       cg2fr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2fu; else goto cg2ft;
       cg2fu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2ft: // global
           _sg1HX::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sg1HY_info;
           P64[Hp] = P64[Sp + 16];
           _sg1HU::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg2fq_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sg1HU::P64;
           P64[Sp + 16] = _sg1HX::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2eG_info" {
     block_cg2eG_info:
         const _cg2eG;
         const 3;
         const 30;
 },
 _cg2fq() //  [R1]
         { []
         }
     {offset
       cg2fq: // global
           if (R1 & 7 == 1) goto ug2fK; else goto ug2fL;
       ug2fK: // global
           Sp = Sp + 8;
           call _cg2fE() args: 0, res: 0, upd: 0;
       ug2fL: // global
           Sp = Sp + 8;
           call _cg2fA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2fq_info" {
     block_cg2fq_info:
         const _cg2fq;
         const 0;
         const 30;
 },
 _cg2fE() //  []
         { []
         }
     {offset
       cg2fE: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg2fA() //  []
         { []
         }
     {offset
       cg2fA: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.801006567 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c>=_closure" {
     Data.Functor.Sum.$fOrdSum_$c>=_closure:
         const Data.Functor.Sum.$fOrdSum_$c>=_info;
 },
 sat_sg1I9_entry() //  [R1]
         { []
         }
     {offset
       cg2hi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2hj; else goto cg2hk;
       cg2hj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2hk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1I9_info" {
     sat_sg1I9_info:
         const sat_sg1I9_entry;
         const 1;
         const 16;
 },
 sat_sg1Ig_entry() //  [R1]
         { []
         }
     {offset
       cg2hx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2hy; else goto cg2hz;
       cg2hy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2hz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Ig_info" {
     sat_sg1Ig_info:
         const sat_sg1Ig_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c>=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg2hE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2hF; else goto cg2hG;
       cg2hF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c>=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2hG: // global
           I64[Sp - 40] = block_cg2h4_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2iA; else goto cg2h5;
       ug2iA: // global
           call _cg2h4(R1) args: 0, res: 0, upd: 0;
       cg2h5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c>=_info" {
     Data.Functor.Sum.$fOrdSum_$c>=_info:
         const Data.Functor.Sum.$fOrdSum_$c>=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg2h4() //  [R1]
         { []
         }
     {offset
       cg2h4: // global
           _sg1I4::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg2hB; else goto cg2hC;
       cg2hB: // global
           I64[Sp] = block_cg2h9_info;
           _sg1I6::P64 = P64[R1 + 7];
           R1 = _sg1I4::P64;
           P64[Sp + 32] = _sg1I6::P64;
           if (R1 & 7 != 0) goto ug2iw; else goto cg2ha;
       ug2iw: // global
           call _cg2h9(R1) args: 0, res: 0, upd: 0;
       cg2ha: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg2hC: // global
           I64[Sp + 8] = block_cg2hn_info;
           _sg1Ic::P64 = P64[R1 + 6];
           R1 = _sg1I4::P64;
           P64[Sp + 32] = _sg1Ic::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug2ix; else goto cg2ho;
       ug2ix: // global
           call _cg2hn(R1) args: 0, res: 0, upd: 0;
       cg2ho: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2h4_info" {
     block_cg2h4_info:
         const _cg2h4;
         const 4;
         const 30;
 },
 _cg2h9() //  [R1]
         { []
         }
     {offset
       cg2h9: // global
           if (R1 & 7 == 1) goto cg2hK; else goto ug2it;
       cg2hK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2hN; else goto cg2hM;
       cg2hN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2hM: // global
           _sg1I8::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sg1I9_info;
           P64[Hp] = P64[Sp + 24];
           _sg1I6::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg2hI_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sg1I6::P64;
           P64[Sp + 24] = _sg1I8::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug2it: // global
           Sp = Sp + 40;
           call _cg2il() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2h9_info" {
     block_cg2h9_info:
         const _cg2h9;
         const 132;
         const 30;
 },
 _cg2hI() //  [R1]
         { []
         }
     {offset
       cg2hI: // global
           if (R1 & 7 == 1) goto ug2iu; else goto ug2iv;
       ug2iu: // global
           Sp = Sp + 8;
           call _cg2il() args: 0, res: 0, upd: 0;
       ug2iv: // global
           Sp = Sp + 8;
           call _cg2ih() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2hI_info" {
     block_cg2hI_info:
         const _cg2hI;
         const 0;
         const 30;
 },
 _cg2hn() //  [R1]
         { []
         }
     {offset
       cg2hn: // global
           if (R1 & 7 == 1) goto ug2iq; else goto cg2i8;
       ug2iq: // global
           Sp = Sp + 32;
           call _cg2ih() args: 0, res: 0, upd: 0;
       cg2i8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2ib; else goto cg2ia;
       cg2ib: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2ia: // global
           _sg1If::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sg1Ig_info;
           P64[Hp] = P64[Sp + 16];
           _sg1Ic::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg2i7_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sg1Ic::P64;
           P64[Sp + 16] = _sg1If::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2hn_info" {
     block_cg2hn_info:
         const _cg2hn;
         const 3;
         const 30;
 },
 _cg2i7() //  [R1]
         { []
         }
     {offset
       cg2i7: // global
           if (R1 & 7 == 1) goto ug2ir; else goto ug2is;
       ug2ir: // global
           Sp = Sp + 8;
           call _cg2il() args: 0, res: 0, upd: 0;
       ug2is: // global
           Sp = Sp + 8;
           call _cg2ih() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2i7_info" {
     block_cg2i7_info:
         const _cg2i7;
         const 0;
         const 30;
 },
 _cg2il() //  []
         { []
         }
     {offset
       cg2il: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg2ih() //  []
         { []
         }
     {offset
       cg2ih: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.822345153 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c>_closure" {
     Data.Functor.Sum.$fOrdSum_$c>_closure:
         const Data.Functor.Sum.$fOrdSum_$c>_info;
 },
 sat_sg1Ir_entry() //  [R1]
         { []
         }
     {offset
       cg2jZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2k0; else goto cg2k1;
       cg2k0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2k1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Ir_info" {
     sat_sg1Ir_info:
         const sat_sg1Ir_entry;
         const 1;
         const 16;
 },
 sat_sg1Iy_entry() //  [R1]
         { []
         }
     {offset
       cg2ke: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2kf; else goto cg2kg;
       cg2kf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2kg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Iy_info" {
     sat_sg1Iy_info:
         const sat_sg1Iy_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg2kl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2km; else goto cg2kn;
       cg2km: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2kn: // global
           I64[Sp - 40] = block_cg2jL_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2lh; else goto cg2jM;
       ug2lh: // global
           call _cg2jL(R1) args: 0, res: 0, upd: 0;
       cg2jM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c>_info" {
     Data.Functor.Sum.$fOrdSum_$c>_info:
         const Data.Functor.Sum.$fOrdSum_$c>_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg2jL() //  [R1]
         { []
         }
     {offset
       cg2jL: // global
           _sg1Im::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg2ki; else goto cg2kj;
       cg2ki: // global
           I64[Sp] = block_cg2jQ_info;
           _sg1Io::P64 = P64[R1 + 7];
           R1 = _sg1Im::P64;
           P64[Sp + 32] = _sg1Io::P64;
           if (R1 & 7 != 0) goto ug2ld; else goto cg2jR;
       ug2ld: // global
           call _cg2jQ(R1) args: 0, res: 0, upd: 0;
       cg2jR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg2kj: // global
           I64[Sp + 8] = block_cg2k4_info;
           _sg1Iu::P64 = P64[R1 + 6];
           R1 = _sg1Im::P64;
           P64[Sp + 32] = _sg1Iu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug2le; else goto cg2k5;
       ug2le: // global
           call _cg2k4(R1) args: 0, res: 0, upd: 0;
       cg2k5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2jL_info" {
     block_cg2jL_info:
         const _cg2jL;
         const 4;
         const 30;
 },
 _cg2jQ() //  [R1]
         { []
         }
     {offset
       cg2jQ: // global
           if (R1 & 7 == 1) goto cg2kr; else goto ug2la;
       cg2kr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2ku; else goto cg2kt;
       cg2ku: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2kt: // global
           _sg1Iq::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sg1Ir_info;
           P64[Hp] = P64[Sp + 24];
           _sg1Io::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg2kp_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sg1Io::P64;
           P64[Sp + 24] = _sg1Iq::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug2la: // global
           Sp = Sp + 40;
           call _cg2kY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2jQ_info" {
     block_cg2jQ_info:
         const _cg2jQ;
         const 132;
         const 30;
 },
 _cg2kp() //  [R1]
         { []
         }
     {offset
       cg2kp: // global
           if (R1 & 7 == 3) goto ug2lb; else goto ug2lc;
       ug2lb: // global
           Sp = Sp + 8;
           call _cg2l2() args: 0, res: 0, upd: 0;
       ug2lc: // global
           Sp = Sp + 8;
           call _cg2kY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2kp_info" {
     block_cg2kp_info:
         const _cg2kp;
         const 0;
         const 30;
 },
 _cg2k4() //  [R1]
         { []
         }
     {offset
       cg2k4: // global
           if (R1 & 7 == 1) goto ug2l7; else goto cg2kP;
       ug2l7: // global
           Sp = Sp + 32;
           call _cg2l2() args: 0, res: 0, upd: 0;
       cg2kP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2kS; else goto cg2kR;
       cg2kS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2kR: // global
           _sg1Ix::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sg1Iy_info;
           P64[Hp] = P64[Sp + 16];
           _sg1Iu::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg2kO_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sg1Iu::P64;
           P64[Sp + 16] = _sg1Ix::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2k4_info" {
     block_cg2k4_info:
         const _cg2k4;
         const 3;
         const 30;
 },
 _cg2kO() //  [R1]
         { []
         }
     {offset
       cg2kO: // global
           if (R1 & 7 == 3) goto ug2l8; else goto ug2l9;
       ug2l8: // global
           Sp = Sp + 8;
           call _cg2l2() args: 0, res: 0, upd: 0;
       ug2l9: // global
           Sp = Sp + 8;
           call _cg2kY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2kO_info" {
     block_cg2kO_info:
         const _cg2kO;
         const 0;
         const 30;
 },
 _cg2l2() //  []
         { []
         }
     {offset
       cg2l2: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg2kY() //  []
         { []
         }
     {offset
       cg2kY: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.844449062 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$c<=_closure" {
     Data.Functor.Sum.$fOrdSum_$c<=_closure:
         const Data.Functor.Sum.$fOrdSum_$c<=_info;
 },
 sat_sg1IJ_entry() //  [R1]
         { []
         }
     {offset
       cg2mG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2mH; else goto cg2mI;
       cg2mH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2mI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1IJ_info" {
     sat_sg1IJ_info:
         const sat_sg1IJ_entry;
         const 1;
         const 16;
 },
 sat_sg1IQ_entry() //  [R1]
         { []
         }
     {offset
       cg2mV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2mW; else goto cg2mX;
       cg2mW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2mX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1IQ_info" {
     sat_sg1IQ_info:
         const sat_sg1IQ_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fOrdSum_$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg2n2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2n3; else goto cg2n4;
       cg2n3: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2n4: // global
           I64[Sp - 40] = block_cg2ms_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2nY; else goto cg2mt;
       ug2nY: // global
           call _cg2ms(R1) args: 0, res: 0, upd: 0;
       cg2mt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$c<=_info" {
     Data.Functor.Sum.$fOrdSum_$c<=_info:
         const Data.Functor.Sum.$fOrdSum_$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg2ms() //  [R1]
         { []
         }
     {offset
       cg2ms: // global
           _sg1IE::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg2mZ; else goto cg2n0;
       cg2mZ: // global
           I64[Sp] = block_cg2mx_info;
           _sg1IG::P64 = P64[R1 + 7];
           R1 = _sg1IE::P64;
           P64[Sp + 32] = _sg1IG::P64;
           if (R1 & 7 != 0) goto ug2nU; else goto cg2my;
       ug2nU: // global
           call _cg2mx(R1) args: 0, res: 0, upd: 0;
       cg2my: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg2n0: // global
           I64[Sp + 8] = block_cg2mL_info;
           _sg1IM::P64 = P64[R1 + 6];
           R1 = _sg1IE::P64;
           P64[Sp + 32] = _sg1IM::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug2nV; else goto cg2mM;
       ug2nV: // global
           call _cg2mL(R1) args: 0, res: 0, upd: 0;
       cg2mM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2ms_info" {
     block_cg2ms_info:
         const _cg2ms;
         const 4;
         const 30;
 },
 _cg2mx() //  [R1]
         { []
         }
     {offset
       cg2mx: // global
           if (R1 & 7 == 1) goto cg2n8; else goto ug2nR;
       cg2n8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2nb; else goto cg2na;
       cg2nb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2na: // global
           _sg1II::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sg1IJ_info;
           P64[Hp] = P64[Sp + 24];
           _sg1IG::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg2n6_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = _sg1IG::P64;
           P64[Sp + 24] = _sg1II::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug2nR: // global
           Sp = Sp + 40;
           call _cg2nF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2mx_info" {
     block_cg2mx_info:
         const _cg2mx;
         const 132;
         const 30;
 },
 _cg2n6() //  [R1]
         { []
         }
     {offset
       cg2n6: // global
           if (R1 & 7 == 3) goto ug2nS; else goto ug2nT;
       ug2nS: // global
           Sp = Sp + 8;
           call _cg2nJ() args: 0, res: 0, upd: 0;
       ug2nT: // global
           Sp = Sp + 8;
           call _cg2nF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2n6_info" {
     block_cg2n6_info:
         const _cg2n6;
         const 0;
         const 30;
 },
 _cg2mL() //  [R1]
         { []
         }
     {offset
       cg2mL: // global
           if (R1 & 7 == 1) goto ug2nO; else goto cg2nw;
       ug2nO: // global
           Sp = Sp + 32;
           call _cg2nJ() args: 0, res: 0, upd: 0;
       cg2nw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg2nz; else goto cg2ny;
       cg2nz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2ny: // global
           _sg1IP::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_sg1IQ_info;
           P64[Hp] = P64[Sp + 16];
           _sg1IM::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cg2nv_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = _sg1IM::P64;
           P64[Sp + 16] = _sg1IP::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2mL_info" {
     block_cg2mL_info:
         const _cg2mL;
         const 3;
         const 30;
 },
 _cg2nv() //  [R1]
         { []
         }
     {offset
       cg2nv: // global
           if (R1 & 7 == 3) goto ug2nP; else goto ug2nQ;
       ug2nP: // global
           Sp = Sp + 8;
           call _cg2nJ() args: 0, res: 0, upd: 0;
       ug2nQ: // global
           Sp = Sp + 8;
           call _cg2nF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg2nv_info" {
     block_cg2nv_info:
         const _cg2nv;
         const 0;
         const 30;
 },
 _cg2nJ() //  []
         { []
         }
     {offset
       cg2nJ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg2nF() //  []
         { []
         }
     {offset
       cg2nF: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.863236002 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$cmax_closure" {
     Data.Functor.Sum.$fOrdSum_$cmax_closure:
         const Data.Functor.Sum.$fOrdSum_$cmax_info;
 },
 Data.Functor.Sum.$fOrdSum_$cmax_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg2pf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg2pg; else goto cg2ph;
       cg2pg: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$cmax_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2ph: // global
           I64[Sp - 24] = block_cg2p9_info;
           _sg1IW::P64 = R6;
           R6 = R6;
           _sg1IV::P64 = R5;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = _sg1IV::P64;
           P64[Sp - 8] = _sg1IW::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fOrdSum_$c<=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$cmax_info" {
     Data.Functor.Sum.$fOrdSum_$cmax_info:
         const Data.Functor.Sum.$fOrdSum_$cmax_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg2p9() //  [R1]
         { []
         }
     {offset
       cg2p9: // global
           if (R1 & 7 == 1) goto cg2pc; else goto cg2pd;
       cg2pc: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cg2pd: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2p9_info" {
     block_cg2p9_info:
         const _cg2p9;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.869601607 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_$cmin_closure" {
     Data.Functor.Sum.$fOrdSum_$cmin_closure:
         const Data.Functor.Sum.$fOrdSum_$cmin_info;
 },
 Data.Functor.Sum.$fOrdSum_$cmin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg2pN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg2pO; else goto cg2pP;
       cg2pO: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_$cmin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2pP: // global
           I64[Sp - 24] = block_cg2pH_info;
           _sg1J2::P64 = R6;
           R6 = R6;
           _sg1J1::P64 = R5;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = _sg1J1::P64;
           P64[Sp - 8] = _sg1J2::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fOrdSum_$c<=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_$cmin_info" {
     Data.Functor.Sum.$fOrdSum_$cmin_info:
         const Data.Functor.Sum.$fOrdSum_$cmin_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg2pH() //  [R1]
         { []
         }
     {offset
       cg2pH: // global
           if (R1 & 7 == 1) goto cg2pK; else goto cg2pL;
       cg2pK: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cg2pL: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2pH_info" {
     block_cg2pH_info:
         const _cg2pH;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.879167565 UTC

[section ""data" . Data.Functor.Sum.$fOrdSum_closure" {
     Data.Functor.Sum.$fOrdSum_closure:
         const Data.Functor.Sum.$fOrdSum_info;
 },
 sat_sg1Je_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2qk: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$cmin_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Je_info" {
     sat_sg1Je_info:
         const sat_sg1Je_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1Jd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2qs: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$cmax_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Jd_info" {
     sat_sg1Jd_info:
         const sat_sg1Jd_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1Jc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2qA: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c>=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Jc_info" {
     sat_sg1Jc_info:
         const sat_sg1Jc_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1Jb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2qI: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c>_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Jb_info" {
     sat_sg1Jb_info:
         const sat_sg1Jb_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1Ja_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2qQ: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c<=_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Ja_info" {
     sat_sg1Ja_info:
         const sat_sg1Ja_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1J9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2qY: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$c<_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1J9_info" {
     sat_sg1J9_info:
         const sat_sg1J9_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1J8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2r6: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fOrdSum_$ccompare_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1J8_info" {
     sat_sg1J8_info:
         const sat_sg1J8_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg1J7_entry() //  [R1]
         { []
         }
     {offset
       cg2rd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2re; else goto cg2rf;
       cg2re: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2rf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fOrdSum_$cp1Ord_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1J7_info" {
     sat_sg1J7_info:
         const sat_sg1J7_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$fOrdSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2rh: // global
           Hp = Hp + 336;
           if (Hp > HpLim) (likely: False) goto cg2rl; else goto cg2rk;
       cg2rl: // global
           HpAlloc = 336;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fOrdSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2rk: // global
           I64[Hp - 328] = sat_sg1Je_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           I64[Hp - 296] = sat_sg1Jd_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           I64[Hp - 264] = sat_sg1Jc_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           I64[Hp - 232] = sat_sg1Jb_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           I64[Hp - 200] = sat_sg1Ja_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sg1J9_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sg1J8_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sg1J7_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 104;
           P64[Hp - 48] = Hp - 134;
           P64[Hp - 40] = Hp - 166;
           P64[Hp - 32] = Hp - 198;
           P64[Hp - 24] = Hp - 230;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 294;
           P64[Hp] = Hp - 326;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fOrdSum_info" {
     Data.Functor.Sum.$fOrdSum_info:
         const Data.Functor.Sum.$fOrdSum_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.898229535 UTC

[section ""data" . Data.Functor.Sum.$fReadSum1_closure" {
     Data.Functor.Sum.$fReadSum1_closure:
         const Data.Functor.Sum.$fReadSum1_info;
         const 0;
 },
 sat_sg1Jj_entry() //  [R1]
         { []
         }
     {offset
       cg2sg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2sh; else goto cg2si;
       cg2sh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2si: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Jj_info" {
     sat_sg1Jj_info:
         const sat_sg1Jj_entry;
         const 1;
         const 16;
 },
 sat_sg1Ji_entry() //  [R1]
         { []
         }
     {offset
       cg2sn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2so; else goto cg2sp;
       cg2so: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2sp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Ji_info" {
     sat_sg1Ji_info:
         const sat_sg1Ji_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fReadSum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2sq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg2su; else goto cg2st;
       cg2su: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2st: // global
           I64[Hp - 40] = sat_sg1Jj_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sg1Ji_info;
           P64[Hp] = R4;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum1_info" {
     Data.Functor.Sum.$fReadSum1_info:
         const Data.Functor.Sum.$fReadSum1_entry;
         const 0;
         const 17596481011726;
         const 12884901911;
         const Sg21L_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.907631981 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_$creadsPrec_closure" {
     Data.Functor.Sum.$fReadSum_$creadsPrec_closure:
         const Data.Functor.Sum.$fReadSum_$creadsPrec_info;
         const 0;
 },
 sat_sg1Jp_entry() //  [R1]
         { []
         }
     {offset
       cg2sX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2sY; else goto cg2sZ;
       cg2sY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2sZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Jp_info" {
     sat_sg1Jp_info:
         const sat_sg1Jp_entry;
         const 1;
         const 16;
 },
 sat_sg1Jo_entry() //  [R1]
         { []
         }
     {offset
       cg2t4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2t5; else goto cg2t6;
       cg2t5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2t6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Jo_info" {
     sat_sg1Jo_info:
         const sat_sg1Jo_entry;
         const 1;
         const 16;
 },
 ds_sg1Jn_entry() //  [R1]
         { []
         }
     {offset
       cg2t7: // global
           _sg1Jn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg2t8; else goto cg2t9;
       cg2t9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg2tb; else goto cg2ta;
       cg2tb: // global
           HpAlloc = 48;
           goto cg2t8;
       cg2t8: // global
           R1 = _sg1Jn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2ta: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1Jn::P64;
           _sg1Jk::P64 = P64[_sg1Jn::P64 + 16];
           _sg1Jl::P64 = P64[_sg1Jn::P64 + 24];
           _sg1Jm::P64 = P64[_sg1Jn::P64 + 32];
           I64[Hp - 40] = sat_sg1Jp_info;
           P64[Hp - 24] = _sg1Jm::P64;
           I64[Hp - 16] = sat_sg1Jo_info;
           P64[Hp] = _sg1Jm::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sg1Jl::P64;
           R2 = _sg1Jk::P64;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sg1Jn_info" {
     ds_sg1Jn_info:
         const ds_sg1Jn_entry;
         const 3;
         const 4294967311;
         const Sg21L_srt+40;
 },
 sat_sg1Jr_entry() //  [R1]
         { []
         }
     {offset
       cg2tl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2tm; else goto cg2tn;
       cg2tm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2tn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Jr_info" {
     sat_sg1Jr_info:
         const sat_sg1Jr_entry;
         const 2;
         const 18;
 },
 sat_sg1Js_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2to: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg2ts; else goto cg2tr;
       cg2ts: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg2tr: // global
           _sg1Jn::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sg1Jr_info;
           P64[Hp - 8] = _sg1Jn::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Js_info" {
     sat_sg1Js_info:
         const sat_sg1Js_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Sum.$fReadSum_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2tt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2tx; else goto cg2tw;
       cg2tx: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2tw: // global
           I64[Hp - 48] = ds_sg1Jn_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sg1Js_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_$creadsPrec_info" {
     Data.Functor.Sum.$fReadSum_$creadsPrec_info:
         const Data.Functor.Sum.$fReadSum_$creadsPrec_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const Sg21L_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.922829443 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_$creadListPrec_closure" {
     Data.Functor.Sum.$fReadSum_$creadListPrec_closure:
         const Data.Functor.Sum.$fReadSum_$creadListPrec_info;
         const 0;
 },
 sat_sg1Jx_entry() //  [R1]
         { []
         }
     {offset
       cg2uk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2ul; else goto cg2um;
       cg2ul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2um: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Jx_info" {
     sat_sg1Jx_info:
         const sat_sg1Jx_entry;
         const 1;
         const 16;
 },
 sat_sg1Jw_entry() //  [R1]
         { []
         }
     {offset
       cg2ur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2us; else goto cg2ut;
       cg2us: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2ut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Jw_info" {
     sat_sg1Jw_info:
         const sat_sg1Jw_entry;
         const 1;
         const 16;
 },
 sat_sg1Jy_entry() //  [R1]
         { []
         }
     {offset
       cg2uu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg2uy; else goto cg2ux;
       cg2uy: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2ux: // global
           _sg1Jt::P64 = P64[R1 + 16];
           _sg1Ju::P64 = P64[R1 + 24];
           _sg1Jv::P64 = P64[R1 + 32];
           I64[Hp - 40] = sat_sg1Jx_info;
           P64[Hp - 24] = _sg1Jv::P64;
           I64[Hp - 16] = sat_sg1Jw_info;
           P64[Hp] = _sg1Jv::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sg1Ju::P64;
           R2 = _sg1Jt::P64;
           call Data.Functor.Sum.$fRead1Sum1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Jy_info" {
     sat_sg1Jy_info:
         const sat_sg1Jy_entry;
         const 3;
         const 4294967311;
         const Sg21L_srt+40;
 },
 Data.Functor.Sum.$fReadSum_$creadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2uz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg2uD; else goto cg2uC;
       cg2uD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2uC: // global
           I64[Hp - 32] = sat_sg1Jy_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_$creadListPrec_info" {
     Data.Functor.Sum.$fReadSum_$creadListPrec_info:
         const Data.Functor.Sum.$fReadSum_$creadListPrec_entry;
         const 0;
         const 70390219014158;
         const 12884901911;
         const Sg21L_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.93214387 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_$creadList_closure" {
     Data.Functor.Sum.$fReadSum_$creadList_closure:
         const Data.Functor.Sum.$fReadSum_$creadList_info;
         const 0;
 },
 sat_sg1JC_entry() //  [R1]
         { []
         }
     {offset
       cg2v6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2v7; else goto cg2v8;
       cg2v7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2v8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call Data.Functor.Sum.$fReadSum_$creadListPrec_entry(R4,
                                                                R3,
                                                                R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JC_info" {
     sat_sg1JC_info:
         const sat_sg1JC_entry;
         const 3;
         const 4294967311;
         const Sg21L_srt+152;
 },
 Data.Functor.Sum.$fReadSum_$creadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2v9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg2vd; else goto cg2vc;
       cg2vd: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2vc: // global
           I64[Hp - 32] = sat_sg1JC_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_$creadList_info" {
     Data.Functor.Sum.$fReadSum_$creadList_info:
         const Data.Functor.Sum.$fReadSum_$creadList_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sg21L_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.939779103 UTC

[section ""data" . Data.Functor.Sum.$fReadSum_closure" {
     Data.Functor.Sum.$fReadSum_closure:
         const Data.Functor.Sum.$fReadSum_info;
         const 0;
 },
 sat_sg1JJ_entry() //  [R1]
         { []
         }
     {offset
       cg2vB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2vC; else goto cg2vD;
       cg2vC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2vD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum_$creadListPrec_entry(R4,
                                                                R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JJ_info" {
     sat_sg1JJ_info:
         const sat_sg1JJ_entry;
         const 3;
         const 4294967311;
         const Sg21L_srt+152;
 },
 sat_sg1JI_entry() //  [R1]
         { []
         }
     {offset
       cg2vI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2vJ; else goto cg2vK;
       cg2vJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2vK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum1_entry(R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JI_info" {
     sat_sg1JI_info:
         const sat_sg1JI_entry;
         const 3;
         const 4294967311;
         const Sg21L_srt+136;
 },
 sat_sg1JH_entry() //  [R1]
         { []
         }
     {offset
       cg2vP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2vQ; else goto cg2vR;
       cg2vQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2vR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum_$creadList_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JH_info" {
     sat_sg1JH_info:
         const sat_sg1JH_entry;
         const 3;
         const 4294967311;
         const Sg21L_srt+160;
 },
 sat_sg1JG_entry() //  [R1]
         { []
         }
     {offset
       cg2vW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2vX; else goto cg2vY;
       cg2vX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2vY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fReadSum_$creadsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JG_info" {
     sat_sg1JG_info:
         const sat_sg1JG_entry;
         const 3;
         const 4294967311;
         const Sg21L_srt+144;
 },
 Data.Functor.Sum.$fReadSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2w0: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cg2w4; else goto cg2w3;
       cg2w4: // global
           HpAlloc = 200;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fReadSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2w3: // global
           I64[Hp - 192] = sat_sg1JJ_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sg1JI_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sg1JH_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sg1JG_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 192;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fReadSum_info" {
     Data.Functor.Sum.$fReadSum_info:
         const Data.Functor.Sum.$fReadSum_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const Sg21L_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.953288006 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_$cshowsPrec_closure" {
     Data.Functor.Sum.$fShowSum_$cshowsPrec_closure:
         const Data.Functor.Sum.$fShowSum_$cshowsPrec_info;
         const 0;
 },
 sat_sg1JS_entry() //  [R1]
         { []
         }
     {offset
       cg2wQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2wR; else goto cg2wS;
       cg2wR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2wS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JS_info" {
     sat_sg1JS_info:
         const sat_sg1JS_entry;
         const 1;
         const 16;
 },
 sat_sg1JR_entry() //  [R1]
         { []
         }
     {offset
       cg2wX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2wY; else goto cg2wZ;
       cg2wY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2wZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JR_info" {
     sat_sg1JR_info:
         const sat_sg1JR_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fShowSum_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg2x0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2x1; else goto cg2x2;
       cg2x1: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2x2: // global
           I64[Sp - 40] = block_cg2wH_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2x6; else goto cg2wI;
       ug2x6: // global
           call _cg2wH(R1) args: 0, res: 0, upd: 0;
       cg2wI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_$cshowsPrec_info" {
     Data.Functor.Sum.$fShowSum_$cshowsPrec_info:
         const Data.Functor.Sum.$fShowSum_$cshowsPrec_entry;
         const 0;
         const 2203318222862;
         const 21474836505;
         const Sg21L_srt+104;
 },
 _cg2wH() //  [R1]
         { []
         }
     {offset
       cg2wH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg2x5; else goto cg2x4;
       cg2x5: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2x4: // global
           _sg1JQ::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sg1JS_info;
           _sg1JM::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sg1JM::P64;
           I64[Hp - 16] = sat_sg1JR_info;
           P64[Hp] = _sg1JM::P64;
           R6 = _sg1JQ::I64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2wH_info" {
     block_cg2wH_info:
         const _cg2wH;
         const 4;
         const 4294967326;
         const Sg21L_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.967275473 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_$cshow_closure" {
     Data.Functor.Sum.$fShowSum_$cshow_closure:
         const Data.Functor.Sum.$fShowSum_$cshow_info;
         const 0;
 },
 sat_sg1K0_entry() //  [R1]
         { []
         }
     {offset
       cg2xK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2xL; else goto cg2xM;
       cg2xL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2xM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1K0_info" {
     sat_sg1K0_info:
         const sat_sg1K0_entry;
         const 1;
         const 16;
 },
 sat_sg1JZ_entry() //  [R1]
         { []
         }
     {offset
       cg2xR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2xS; else goto cg2xT;
       cg2xS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2xT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1JZ_info" {
     sat_sg1JZ_info:
         const sat_sg1JZ_entry;
         const 1;
         const 16;
 },
 sat_sg1K1_entry() //  [R1]
         { []
         }
     {offset
       cg2xU: // global
           _sg1K1::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cg2xV; else goto cg2xW;
       cg2xW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg2xY; else goto cg2xX;
       cg2xY: // global
           HpAlloc = 48;
           goto cg2xV;
       cg2xV: // global
           R1 = _sg1K1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2xX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1K1::P64;
           _sg1JT::P64 = P64[_sg1K1::P64 + 16];
           _sg1JV::P64 = P64[_sg1K1::P64 + 24];
           _sg1JY::P64 = P64[_sg1K1::P64 + 32];
           I64[Hp - 40] = sat_sg1K0_info;
           P64[Hp - 24] = _sg1JV::P64;
           I64[Hp - 16] = sat_sg1JZ_info;
           P64[Hp] = _sg1JV::P64;
           R2 = _sg1JT::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = Hp - 16;
           P64[Sp - 48] = Hp - 40;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sg1JY::P64;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1K1_info" {
     sat_sg1K1_info:
         const sat_sg1K1_entry;
         const 3;
         const 15;
 },
 sat_sg1K5_entry() //  [R1]
         { []
         }
     {offset
       cg2y9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2ya; else goto cg2yb;
       cg2ya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2yb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1K5_info" {
     sat_sg1K5_info:
         const sat_sg1K5_entry;
         const 1;
         const 16;
 },
 sat_sg1K4_entry() //  [R1]
         { []
         }
     {offset
       cg2yg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2yh; else goto cg2yi;
       cg2yh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2yi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1K4_info" {
     sat_sg1K4_info:
         const sat_sg1K4_entry;
         const 1;
         const 16;
 },
 sat_sg1K6_entry() //  [R1]
         { []
         }
     {offset
       cg2yj: // global
           _sg1K6::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cg2yk; else goto cg2yl;
       cg2yl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg2yn; else goto cg2ym;
       cg2yn: // global
           HpAlloc = 48;
           goto cg2yk;
       cg2yk: // global
           R1 = _sg1K6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2ym: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1K6::P64;
           _sg1JU::P64 = P64[_sg1K6::P64 + 16];
           _sg1JV::P64 = P64[_sg1K6::P64 + 24];
           _sg1K3::P64 = P64[_sg1K6::P64 + 32];
           I64[Hp - 40] = sat_sg1K5_info;
           P64[Hp - 24] = _sg1JV::P64;
           I64[Hp - 16] = sat_sg1K4_info;
           P64[Hp] = _sg1JV::P64;
           R2 = _sg1JU::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = Hp - 16;
           P64[Sp - 48] = Hp - 40;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sg1K3::P64;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1K6_info" {
     sat_sg1K6_info:
         const sat_sg1K6_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$fShowSum_$cshow_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg2ys: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg2yt; else goto cg2yu;
       cg2yt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2yu: // global
           I64[Sp - 32] = block_cg2xx_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2yD; else goto cg2xy;
       ug2yD: // global
           call _cg2xx(R1) args: 0, res: 0, upd: 0;
       cg2xy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_$cshow_info" {
     Data.Functor.Sum.$fShowSum_$cshow_info:
         const Data.Functor.Sum.$fShowSum_$cshow_entry;
         const 0;
         const 17605070946318;
         const 17179869208;
         const Sg21L_srt+88;
 },
 _cg2xx() //  [R1]
         { []
         }
     {offset
       cg2xx: // global
           _sg1JV::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2yp; else goto cg2yq;
       cg2yp: // global
           Hp = Hp + 64;
           _sg1JX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2yC; else goto cg2yx;
       cg2yx: // global
           _sg1JY::P64 = P64[_sg1JX::P64 + 7];
           I64[Hp - 56] = sat_sg1K1_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sg1JV::P64;
           P64[Hp - 24] = _sg1JY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = Data.Functor.Sum.$fRead1Sum7_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cg2yq: // global
           Hp = Hp + 64;
           _sg1JX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2yC; else goto cg2yB;
       cg2yC: // global
           HpAlloc = 64;
           R1 = _sg1JX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2yB: // global
           _sg1K3::P64 = P64[_sg1JX::P64 + 6];
           I64[Hp - 56] = sat_sg1K6_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sg1JV::P64;
           P64[Hp - 24] = _sg1K3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = Data.Functor.Sum.$fRead1Sum3_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2xx_info" {
     block_cg2xx_info:
         const _cg2xx;
         const 3;
         const 12884901918;
         const Sg21L_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.98627387 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_$cshowList_closure" {
     Data.Functor.Sum.$fShowSum_$cshowList_closure:
         const Data.Functor.Sum.$fShowSum_$cshowList_info;
         const 0;
 },
 lvl8_sg1Kd_entry() //  [R1]
         { []
         }
     {offset
       cg2zS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2zT; else goto cg2zU;
       cg2zT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2zU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sg1Kd_info" {
     lvl8_sg1Kd_info:
         const lvl8_sg1Kd_entry;
         const 1;
         const 16;
 },
 lvl9_sg1Ke_entry() //  [R1]
         { []
         }
     {offset
       cg2zZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2A0; else goto cg2A1;
       cg2A0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2A1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg1Ke_info" {
     lvl9_sg1Ke_info:
         const lvl9_sg1Ke_entry;
         const 1;
         const 16;
 },
 sat_sg1Kg_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2A7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg2A8; else goto cg2A9;
       cg2A8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg2A9: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sg1Kf::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sg1Kf::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$w$cliftShowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Kg_info" {
     sat_sg1Kg_info:
         const sat_sg1Kg_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sg21L_srt+104;
 },
 Data.Functor.Sum.$fShowSum_$cshowList_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cg2Aa: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg2Ae; else goto cg2Ad;
       cg2Ae: // global
           HpAlloc = 88;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Ad: // global
           I64[Hp - 80] = lvl8_sg1Kd_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl9_sg1Ke_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sg1Kg_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 31;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_$cshowList_info" {
     Data.Functor.Sum.$fShowSum_$cshowList_info:
         const Data.Functor.Sum.$fShowSum_$cshowList_entry;
         const 0;
         const 8800387989518;
         const 21474836505;
         const Sg21L_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:52.996897523 UTC

[section ""data" . Data.Functor.Sum.$fShowSum_closure" {
     Data.Functor.Sum.$fShowSum_closure:
         const Data.Functor.Sum.$fShowSum_info;
         const 0;
 },
 sat_sg1Km_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2AL: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fShowSum_$cshowList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Km_info" {
     sat_sg1Km_info:
         const sat_sg1Km_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sg21L_srt+192;
 },
 sat_sg1Kl_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2AT: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fShowSum_$cshow_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Kl_info" {
     sat_sg1Kl_info:
         const sat_sg1Kl_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sg21L_srt+184;
 },
 sat_sg1Kk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2B1: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fShowSum_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Kk_info" {
     sat_sg1Kk_info:
         const sat_sg1Kk_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sg21L_srt+176;
 },
 Data.Functor.Sum.$fShowSum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2B5: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cg2B9; else goto cg2B8;
       cg2B9: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fShowSum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2B8: // global
           I64[Hp - 120] = sat_sg1Km_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sg1Kl_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sg1Kk_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fShowSum_info" {
     Data.Functor.Sum.$fShowSum_info:
         const Data.Functor.Sum.$fShowSum_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const Sg21L_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.007618902 UTC

[section ""data" . Data.Functor.Sum.$fFunctorSum_$cfmap_closure" {
     Data.Functor.Sum.$fFunctorSum_$cfmap_closure:
         const Data.Functor.Sum.$fFunctorSum_$cfmap_info;
 },
 sat_sg1Kt_entry() //  [R1]
         { []
         }
     {offset
       cg2BI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2BJ; else goto cg2BK;
       cg2BJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2BK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Kt_info" {
     sat_sg1Kt_info:
         const sat_sg1Kt_entry;
         const 3;
         const 15;
 },
 sat_sg1Kv_entry() //  [R1]
         { []
         }
     {offset
       cg2BR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2BS; else goto cg2BT;
       cg2BS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2BT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Kv_info" {
     sat_sg1Kv_info:
         const sat_sg1Kv_entry;
         const 3;
         const 15;
 },
 Data.Functor.Sum.$fFunctorSum_$cfmap_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg2BY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg2BZ; else goto cg2C0;
       cg2BZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFunctorSum_$cfmap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2C0: // global
           I64[Sp - 32] = block_cg2Bz_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2C9; else goto cg2BA;
       ug2C9: // global
           call _cg2Bz(R1) args: 0, res: 0, upd: 0;
       cg2BA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFunctorSum_$cfmap_info" {
     Data.Functor.Sum.$fFunctorSum_$cfmap_info:
         const Data.Functor.Sum.$fFunctorSum_$cfmap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg2Bz() //  [R1]
         { []
         }
     {offset
       cg2Bz: // global
           _sg1Kp::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2BV; else goto cg2BW;
       cg2BV: // global
           Hp = Hp + 56;
           _sg1Kr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2C8; else goto cg2C3;
       cg2C3: // global
           _sg1Ks::P64 = P64[_sg1Kr::P64 + 7];
           I64[Hp - 48] = sat_sg1Kt_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sg1Kp::P64;
           P64[Hp - 16] = _sg1Ks::P64;
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg2BW: // global
           Hp = Hp + 56;
           _sg1Kr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2C8; else goto cg2C7;
       cg2C8: // global
           HpAlloc = 56;
           R1 = _sg1Kr::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2C7: // global
           _sg1Ku::P64 = P64[_sg1Kr::P64 + 6];
           I64[Hp - 48] = sat_sg1Kv_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _sg1Kp::P64;
           P64[Hp - 16] = _sg1Ku::P64;
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Bz_info" {
     block_cg2Bz_info:
         const _cg2Bz;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.018406297 UTC

[section ""data" . Data.Functor.Sum.$fFunctorSum_$c<$_closure" {
     Data.Functor.Sum.$fFunctorSum_$c<$_closure:
         const Data.Functor.Sum.$fFunctorSum_$c<$_info;
 },
 sat_sg1KB_entry() //  [R1]
         { []
         }
     {offset
       cg2CV: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1KB_info" {
     sat_sg1KB_info:
         const sat_sg1KB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Sum.$fFunctorSum_$c<$_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg2CY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg2D2; else goto cg2D1;
       cg2D2: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFunctorSum_$c<$_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2D1: // global
           I64[Hp - 8] = sat_sg1KB_info;
           P64[Hp] = R4;
           R5 = R5;
           R4 = Hp - 7;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fFunctorSum_$cfmap_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFunctorSum_$c<$_info" {
     Data.Functor.Sum.$fFunctorSum_$c<$_info:
         const Data.Functor.Sum.$fFunctorSum_$c<$_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.024339019 UTC

[section ""data" . Data.Functor.Sum.$fFunctorSum_closure" {
     Data.Functor.Sum.$fFunctorSum_closure:
         const Data.Functor.Sum.$fFunctorSum_info;
 },
 sat_sg1KF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2Dk: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFunctorSum_$c<$_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1KF_info" {
     sat_sg1KF_info:
         const sat_sg1KF_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg1KE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2Ds: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFunctorSum_$cfmap_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1KE_info" {
     sat_sg1KE_info:
         const sat_sg1KE_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Sum.$fFunctorSum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg2Dw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg2DA; else goto cg2Dz;
       cg2DA: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFunctorSum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Dz: // global
           I64[Hp - 64] = sat_sg1KF_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg1KE_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFunctorSum_info" {
     Data.Functor.Sum.$fFunctorSum_info:
         const Data.Functor.Sum.$fFunctorSum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.032314338 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldMap_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldMap_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldMap_info;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldMap_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cg2E2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2E3; else goto cg2E4;
       cg2E3: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2E4: // global
           I64[Sp - 40] = block_cg2DV_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2Eb; else goto cg2DW;
       ug2Eb: // global
           call _cg2DV(R1) args: 0, res: 0, upd: 0;
       cg2DW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldMap_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldMap_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg2DV() //  [R1]
         { []
         }
     {offset
       cg2DV: // global
           _sg1KI::P64 = P64[Sp + 24];
           _sg1KJ::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg2DZ; else goto cg2E0;
       cg2DZ: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _sg1KI::P64;
           P64[Sp + 24] = _sg1KJ::P64;
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg2E0: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _sg1KI::P64;
           P64[Sp + 24] = _sg1KJ::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2DV_info" {
     block_cg2DV_info:
         const _cg2DV;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.039184222 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfold_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfold_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfold_info;
 },
 Data.Functor.Sum.$fFoldableSum_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg2ED: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg2EE; else goto cg2EF;
       cg2EE: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2EF: // global
           I64[Sp - 32] = block_cg2Ew_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2EM; else goto cg2Ex;
       ug2EM: // global
           call _cg2Ew(R1) args: 0, res: 0, upd: 0;
       cg2Ex: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfold_info" {
     Data.Functor.Sum.$fFoldableSum_$cfold_info:
         const Data.Functor.Sum.$fFoldableSum_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg2Ew() //  [R1]
         { []
         }
     {offset
       cg2Ew: // global
           _sg1KQ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2EA; else goto cg2EB;
       cg2EA: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg1KQ::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg2EB: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg1KQ::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Ew_info" {
     block_cg2Ew_info:
         const _cg2Ew;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.044859449 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum2_closure" {
     Data.Functor.Sum.$fFoldableSum2_closure:
         const Data.Functor.Sum.$fFoldableSum2_info;
 },
 Data.Functor.Sum.$fFoldableSum2_entry() //  [R2]
         { []
         }
     {offset
       cg2Fb: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum2_info" {
     Data.Functor.Sum.$fFoldableSum2_info:
         const Data.Functor.Sum.$fFoldableSum2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.050456159 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum3_closure" {
     Data.Functor.Sum.$fFoldableSum3_closure:
         const Data.Functor.Sum.$fFoldableSum3_info;
         const 0;
 },
 $dMonoid_sg1KZ_entry() //  [R1]
         { []
         }
     {offset
       cg2Fq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2Fr; else goto cg2Fs;
       cg2Fr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2Fs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sg1KZ_info" {
     $dMonoid_sg1KZ_info:
         const $dMonoid_sg1KZ_entry;
         const 1;
         const 4294967312;
         const Sg21L_srt+208;
 },
 sat_sg1L4_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2FF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg2FG; else goto cg2FH;
       cg2FG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg2FH: // global
           I64[Sp - 32] = block_cg2Fy_info;
           _sg1KW::P64 = P64[R1 + 7];
           _sg1KX::P64 = P64[R1 + 15];
           _sg1KZ::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sg1KW::P64;
           P64[Sp - 16] = _sg1KX::P64;
           P64[Sp - 8] = _sg1KZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2FO; else goto cg2Fz;
       ug2FO: // global
           call _cg2Fy(R1) args: 0, res: 0, upd: 0;
       cg2Fz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1L4_info" {
     sat_sg1L4_info:
         const sat_sg1L4_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cg2Fy() //  [R1]
         { []
         }
     {offset
       cg2Fy: // global
           _sg1KZ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2FC; else goto cg2FD;
       cg2FC: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg1KZ::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg2FD: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg1KZ::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Fy_info" {
     block_cg2Fy_info:
         const _cg2Fy;
         const 3;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2FP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2FT; else goto cg2FS;
       cg2FT: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2FS: // global
           I64[Hp - 48] = $dMonoid_sg1KZ_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sg1L4_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum3_info" {
     Data.Functor.Sum.$fFoldableSum3_info:
         const Data.Functor.Sum.$fFoldableSum3_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sg21L_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.05950854 UTC

[section ""cstring" . lvl_rfXP1_bytes" {
     lvl_rfXP1_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.062056251 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum4_closure" {
     Data.Functor.Sum.$fFoldableSum4_closure:
         const Data.Functor.Sum.$fFoldableSum4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum4_entry() //  [R1]
         { []
         }
     {offset
       cg2Gx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg2Gy; else goto cg2Gz;
       cg2Gy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2Gz: // global
           (_cg2Gs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg2Gs::I64 == 0) goto cg2Gu; else goto cg2Gt;
       cg2Gu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg2Gt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg2Gs::I64;
           I64[Sp - 24] = block_cg2Gv_info;
           R2 = lvl_rfXP1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum4_info" {
     Data.Functor.Sum.$fFoldableSum4_info:
         const Data.Functor.Sum.$fFoldableSum4_entry;
         const 0;
         const 4294967317;
         const Sg21L_srt+224;
 },
 _cg2Gv() //  [R1]
         { []
         }
     {offset
       cg2Gv: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg2Gv_info" {
     block_cg2Gv_info:
         const _cg2Gv;
         const 0;
         const 4294967326;
         const Sg21L_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.069706345 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cminimum_closure" {
     Data.Functor.Sum.$fFoldableSum_$cminimum_closure:
         const Data.Functor.Sum.$fFoldableSum_$cminimum_info;
         const 0;
 },
 g1_sg1L9_entry() //  [R1]
         { []
         }
     {offset
       cg2GX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2GY; else goto cg2GZ;
       cg2GY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2GZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_sg1L9_info" {
     g1_sg1L9_info:
         const g1_sg1L9_entry;
         const 1;
         const 4294967312;
         const Sg21L_srt+232;
 },
 sat_sg1Li_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2Hc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2Hd; else goto cg2He;
       cg2Hd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg2He: // global
           I64[Sp - 32] = block_cg2H5_info;
           _sg1L6::P64 = P64[R1 + 7];
           _sg1L7::P64 = P64[R1 + 15];
           _sg1L9::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sg1L6::P64;
           P64[Sp - 16] = _sg1L7::P64;
           P64[Sp - 8] = _sg1L9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2HL; else goto cg2H6;
       ug2HL: // global
           call _cg2H5(R1) args: 0, res: 0, upd: 0;
       cg2H6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Li_info" {
     sat_sg1Li_info:
         const sat_sg1Li_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sg21L_srt+240;
 },
 _cg2H5() //  [R1]
         { []
         }
     {offset
       cg2H5: // global
           _sg1L9::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2H9; else goto cg2Ha;
       cg2H9: // global
           I64[Sp + 24] = block_cg2Hh_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sg1L9::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cg2Ha: // global
           I64[Sp + 24] = block_cg2Hv_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sg1L9::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2H5_info" {
     block_cg2H5_info:
         const _cg2H5;
         const 3;
         const 4294967326;
         const Sg21L_srt+240;
 },
 _cg2Hh() //  [R1]
         { []
         }
     {offset
       cg2Hh: // global
           if (R1 & 7 == 1) goto ug2HK; else goto cg2Hs;
       ug2HK: // global
           Sp = Sp + 8;
           call _cg2HC() args: 0, res: 0, upd: 0;
       cg2Hs: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Hh_info" {
     block_cg2Hh_info:
         const _cg2Hh;
         const 0;
         const 4294967326;
         const Sg21L_srt+240;
 },
 _cg2Hv() //  [R1]
         { []
         }
     {offset
       cg2Hv: // global
           if (R1 & 7 == 1) goto ug2HJ; else goto cg2HG;
       ug2HJ: // global
           Sp = Sp + 8;
           call _cg2HC() args: 0, res: 0, upd: 0;
       cg2HG: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Hv_info" {
     block_cg2Hv_info:
         const _cg2Hv;
         const 0;
         const 4294967326;
         const Sg21L_srt+240;
 },
 _cg2HC() //  []
         { []
         }
     {offset
       cg2HC: // global
           R1 = Data.Functor.Sum.$fFoldableSum4_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fFoldableSum_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2HO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2HS; else goto cg2HR;
       cg2HS: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2HR: // global
           I64[Hp - 48] = g1_sg1L9_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sg1Li_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cminimum_info" {
     Data.Functor.Sum.$fFoldableSum_$cminimum_info:
         const Data.Functor.Sum.$fFoldableSum_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sg21L_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.082939821 UTC

[section ""cstring" . lvl1_rfXP2_bytes" {
     lvl1_rfXP2_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.086588194 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum5_closure" {
     Data.Functor.Sum.$fFoldableSum5_closure:
         const Data.Functor.Sum.$fFoldableSum5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum5_entry() //  [R1]
         { []
         }
     {offset
       cg2IM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg2IN; else goto cg2IO;
       cg2IN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2IO: // global
           (_cg2IH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg2IH::I64 == 0) goto cg2IJ; else goto cg2II;
       cg2IJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg2II: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg2IH::I64;
           I64[Sp - 24] = block_cg2IK_info;
           R2 = lvl1_rfXP2_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum5_info" {
     Data.Functor.Sum.$fFoldableSum5_info:
         const Data.Functor.Sum.$fFoldableSum5_entry;
         const 0;
         const 4294967317;
         const Sg21L_srt+224;
 },
 _cg2IK() //  [R1]
         { []
         }
     {offset
       cg2IK: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg2IK_info" {
     block_cg2IK_info:
         const _cg2IK;
         const 0;
         const 4294967326;
         const Sg21L_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.094163745 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cmaximum_closure" {
     Data.Functor.Sum.$fFoldableSum_$cmaximum_closure:
         const Data.Functor.Sum.$fFoldableSum_$cmaximum_info;
         const 0;
 },
 g1_sg1Ln_entry() //  [R1]
         { []
         }
     {offset
       cg2Jc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2Jd; else goto cg2Je;
       cg2Jd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2Je: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_sg1Ln_info" {
     g1_sg1Ln_info:
         const g1_sg1Ln_entry;
         const 1;
         const 4294967312;
         const Sg21L_srt+256;
 },
 sat_sg1Lw_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2Jr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2Js; else goto cg2Jt;
       cg2Js: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg2Jt: // global
           I64[Sp - 32] = block_cg2Jk_info;
           _sg1Lk::P64 = P64[R1 + 7];
           _sg1Ll::P64 = P64[R1 + 15];
           _sg1Ln::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sg1Lk::P64;
           P64[Sp - 16] = _sg1Ll::P64;
           P64[Sp - 8] = _sg1Ln::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2K0; else goto cg2Jl;
       ug2K0: // global
           call _cg2Jk(R1) args: 0, res: 0, upd: 0;
       cg2Jl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Lw_info" {
     sat_sg1Lw_info:
         const sat_sg1Lw_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sg21L_srt+264;
 },
 _cg2Jk() //  [R1]
         { []
         }
     {offset
       cg2Jk: // global
           _sg1Ln::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2Jo; else goto cg2Jp;
       cg2Jo: // global
           I64[Sp + 24] = block_cg2Jw_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sg1Ln::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cg2Jp: // global
           I64[Sp + 24] = block_cg2JK_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _sg1Ln::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Jk_info" {
     block_cg2Jk_info:
         const _cg2Jk;
         const 3;
         const 4294967326;
         const Sg21L_srt+264;
 },
 _cg2Jw() //  [R1]
         { []
         }
     {offset
       cg2Jw: // global
           if (R1 & 7 == 1) goto ug2JZ; else goto cg2JH;
       ug2JZ: // global
           Sp = Sp + 8;
           call _cg2JR() args: 0, res: 0, upd: 0;
       cg2JH: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Jw_info" {
     block_cg2Jw_info:
         const _cg2Jw;
         const 0;
         const 4294967326;
         const Sg21L_srt+264;
 },
 _cg2JK() //  [R1]
         { []
         }
     {offset
       cg2JK: // global
           if (R1 & 7 == 1) goto ug2JY; else goto cg2JV;
       ug2JY: // global
           Sp = Sp + 8;
           call _cg2JR() args: 0, res: 0, upd: 0;
       cg2JV: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2JK_info" {
     block_cg2JK_info:
         const _cg2JK;
         const 0;
         const 4294967326;
         const Sg21L_srt+264;
 },
 _cg2JR() //  []
         { []
         }
     {offset
       cg2JR: // global
           R1 = Data.Functor.Sum.$fFoldableSum5_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fFoldableSum_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2K3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2K7; else goto cg2K6;
       cg2K7: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2K6: // global
           I64[Hp - 48] = g1_sg1Ln_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sg1Lw_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cmaximum_info" {
     Data.Functor.Sum.$fFoldableSum_$cmaximum_info:
         const Data.Functor.Sum.$fFoldableSum_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sg21L_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.109135145 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$celem_closure" {
     Data.Functor.Sum.$fFoldableSum_$celem_closure:
         const Data.Functor.Sum.$fFoldableSum_$celem_info;
         const 0;
 },
 f1_sg1LB_entry() //  [R1]
         { []
         }
     {offset
       cg2L0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg2L1; else goto cg2L2;
       cg2L1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2L2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sg1LB_info" {
     f1_sg1LB_info:
         const f1_sg1LB_entry;
         const 2;
         const 18;
 },
 sat_sg1LG_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2Lf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg2Lg; else goto cg2Lh;
       cg2Lg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg2Lh: // global
           I64[Sp - 32] = block_cg2L8_info;
           _sg1Lx::P64 = P64[R1 + 7];
           _sg1Ly::P64 = P64[R1 + 15];
           _sg1LB::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sg1Lx::P64;
           P64[Sp - 16] = _sg1Ly::P64;
           P64[Sp - 8] = _sg1LB::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2Lo; else goto cg2L9;
       ug2Lo: // global
           call _cg2L8(R1) args: 0, res: 0, upd: 0;
       cg2L9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1LG_info" {
     sat_sg1LG_info:
         const sat_sg1LG_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sg21L_srt+280;
 },
 _cg2L8() //  [R1]
         { []
         }
     {offset
       cg2L8: // global
           _sg1LB::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2Lc; else goto cg2Ld;
       cg2Lc: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _sg1LB::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg2Ld: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _sg1LB::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2L8_info" {
     block_cg2L8_info:
         const _cg2L8;
         const 3;
         const 4294967326;
         const Sg21L_srt+280;
 },
 Data.Functor.Sum.$fFoldableSum_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg2Lp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg2Lt; else goto cg2Ls;
       cg2Lt: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Ls: // global
           I64[Hp - 56] = f1_sg1LB_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_sg1LG_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$celem_info" {
     Data.Functor.Sum.$fFoldableSum_$celem_info:
         const Data.Functor.Sum.$fFoldableSum_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sg21L_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.11867055 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum10_closure" {
     Data.Functor.Sum.$fFoldableSum10_closure:
         const Data.Functor.Sum.$fFoldableSum10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum10_entry() //  [R1]
         { []
         }
     {offset
       cg2M6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2M7; else goto cg2M8;
       cg2M7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2M8: // global
           (_cg2M3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg2M3::I64 == 0) goto cg2M5; else goto cg2M4;
       cg2M5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg2M4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg2M3::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum10_info" {
     Data.Functor.Sum.$fFoldableSum10_info:
         const Data.Functor.Sum.$fFoldableSum10_entry;
         const 0;
         const 4294967317;
         const Sg21L_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.124094231 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldl_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl_info;
         const 0;
 },
 f2_sg1LM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2Mq: // global
           _sg1LO::P64 = R3;
           R3 = R2;
           R2 = _sg1LO::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_sg1LM_info" {
     f2_sg1LM_info:
         const f2_sg1LM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg2MA: // global
           _sg1LL::P64 = R6;
           _sg1LK::P64 = R5;
           _sg1LJ::P64 = R4;
           _sg1LI::P64 = R3;
           _sg1LH::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cg2MB; else goto cg2MC;
       cg2MC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg2ME; else goto cg2MD;
       cg2ME: // global
           HpAlloc = 16;
           goto cg2MB;
       cg2MB: // global
           R6 = _sg1LL::P64;
           R5 = _sg1LK::P64;
           R4 = _sg1LJ::P64;
           R3 = _sg1LI::P64;
           R2 = _sg1LH::P64;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2MD: // global
           I64[Hp - 8] = f2_sg1LM_info;
           P64[Hp] = _sg1LJ::P64;
           I64[Sp - 40] = block_cg2Mt_info;
           R1 = _sg1LL::P64;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _sg1LH::P64;
           P64[Sp - 16] = _sg1LI::P64;
           P64[Sp - 8] = _sg1LK::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2ML; else goto cg2Mu;
       ug2ML: // global
           call _cg2Mt(R1) args: 0, res: 0, upd: 0;
       cg2Mu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldl_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sg21L_srt+304;
 },
 _cg2Mt() //  [R1]
         { []
         }
     {offset
       cg2Mt: // global
           _cg2Ml::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cg2Mx; else goto cg2My;
       cg2Mx: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 16] = _cg2Ml::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
       cg2My: // global
           R2 = P64[Sp + 24];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 16] = _cg2Ml::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Mt_info" {
     block_cg2Mt_info:
         const _cg2Mt;
         const 4;
         const 4294967326;
         const Sg21L_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.131908528 UTC

[section ""cstring" . lvl2_rfXP3_bytes" {
     lvl2_rfXP3_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.134396352 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum9_closure" {
     Data.Functor.Sum.$fFoldableSum9_closure:
         const Data.Functor.Sum.$fFoldableSum9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum9_entry() //  [R1]
         { []
         }
     {offset
       cg2Ni: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg2Nj; else goto cg2Nk;
       cg2Nj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2Nk: // global
           (_cg2Nd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg2Nd::I64 == 0) goto cg2Nf; else goto cg2Ne;
       cg2Nf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg2Ne: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg2Nd::I64;
           I64[Sp - 24] = block_cg2Ng_info;
           R2 = lvl2_rfXP3_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum9_info" {
     Data.Functor.Sum.$fFoldableSum9_info:
         const Data.Functor.Sum.$fFoldableSum9_entry;
         const 0;
         const 4294967317;
         const Sg21L_srt+224;
 },
 _cg2Ng() //  [R1]
         { []
         }
     {offset
       cg2Ng: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg2Ng_info" {
     block_cg2Ng_info:
         const _cg2Ng;
         const 0;
         const 4294967326;
         const Sg21L_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.144721215 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl1_info;
         const 0;
 },
 sat_sg1M3_entry() //  [R1]
         { []
         }
     {offset
       cg2NZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2O0; else goto cg2O1;
       cg2O0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2O1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg2NS_info;
           _sg1LV::P64 = P64[R1 + 16];
           _sg1LZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sg1LV::P64;
           P64[Sp - 24] = _sg1LZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2O8; else goto cg2NT;
       ug2O8: // global
           call _cg2NS(R1) args: 0, res: 0, upd: 0;
       cg2NT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1M3_info" {
     sat_sg1M3_info:
         const sat_sg1M3_entry;
         const 3;
         const 15;
 },
 _cg2NS() //  [R1]
         { []
         }
     {offset
       cg2NS: // global
           _sg1LZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg2NW; else goto cg2NX;
       cg2NW: // global
           R1 = _sg1LZ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg2NX: // global
           R3 = _sg1LZ::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg2NS_info" {
     block_cg2NS_info:
         const _cg2NS;
         const 2;
         const 30;
 },
 sat_sg1M4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2Oa: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2Oe; else goto cg2Od;
       cg2Oe: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Od: // global
           _sg1LV::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sg1M3_info;
           P64[Hp - 32] = _sg1LV::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1M4_info" {
     sat_sg1M4_info:
         const sat_sg1M4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sg1Mc_entry() //  [R1]
         { []
         }
     {offset
       cg2Ox: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2Oy; else goto cg2Oz;
       cg2Oy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2Oz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg2Oq_info;
           _sg1LV::P64 = P64[R1 + 16];
           _sg1M8::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sg1LV::P64;
           P64[Sp - 24] = _sg1M8::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2OG; else goto cg2Or;
       ug2OG: // global
           call _cg2Oq(R1) args: 0, res: 0, upd: 0;
       cg2Or: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Mc_info" {
     sat_sg1Mc_info:
         const sat_sg1Mc_entry;
         const 3;
         const 15;
 },
 _cg2Oq() //  [R1]
         { []
         }
     {offset
       cg2Oq: // global
           _sg1M8::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg2Ou; else goto cg2Ov;
       cg2Ou: // global
           R1 = _sg1M8::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg2Ov: // global
           R3 = _sg1M8::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg2Oq_info" {
     block_cg2Oq_info:
         const _cg2Oq;
         const 2;
         const 30;
 },
 sat_sg1Md_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2OI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2OM; else goto cg2OL;
       cg2OM: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2OL: // global
           _sg1LV::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sg1Mc_info;
           P64[Hp - 32] = _sg1LV::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Md_info" {
     sat_sg1Md_info:
         const sat_sg1Md_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldl1_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cg2OR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg2OS; else goto cg2OT;
       cg2OS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2OT: // global
           I64[Sp - 32] = block_cg2NE_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2Pq; else goto cg2NF;
       ug2Pq: // global
           call _cg2NE(R1) args: 0, res: 0, upd: 0;
       cg2NF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldl1_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl1_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl1_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const Sg21L_srt+304;
 },
 _cg2NE() //  [R1]
         { []
         }
     {offset
       cg2NE: // global
           _sg1LV::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2OO; else goto cg2OP;
       cg2OO: // global
           Hp = Hp + 16;
           _sg1LX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2Pb; else goto cg2OW;
       cg2OW: // global
           _sg1LY::P64 = P64[_sg1LX::P64 + 7];
           I64[Hp - 8] = sat_sg1M4_info;
           P64[Hp] = _sg1LV::P64;
           I64[Sp + 24] = block_cg2OU_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _sg1LY::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
       cg2OP: // global
           Hp = Hp + 16;
           _sg1LX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2Pb; else goto cg2Pa;
       cg2Pb: // global
           HpAlloc = 16;
           R1 = _sg1LX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2Pa: // global
           _sg1M7::P64 = P64[_sg1LX::P64 + 6];
           I64[Hp - 8] = sat_sg1Md_info;
           P64[Hp] = _sg1LV::P64;
           I64[Sp + 24] = block_cg2P8_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _sg1M7::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2NE_info" {
     block_cg2NE_info:
         const _cg2NE;
         const 3;
         const 38654705694;
         const Sg21L_srt+304;
 },
 _cg2OU() //  [R1]
         { []
         }
     {offset
       cg2OU: // global
           if (R1 & 7 == 1) goto ug2Pp; else goto cg2P7;
       ug2Pp: // global
           Sp = Sp + 8;
           call _cg2Ph() args: 0, res: 0, upd: 0;
       cg2P7: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2OU_info" {
     block_cg2OU_info:
         const _cg2OU;
         const 0;
         const 4294967326;
         const Sg21L_srt+328;
 },
 _cg2P8() //  [R1]
         { []
         }
     {offset
       cg2P8: // global
           if (R1 & 7 == 1) goto ug2Po; else goto cg2Pl;
       ug2Po: // global
           Sp = Sp + 8;
           call _cg2Ph() args: 0, res: 0, upd: 0;
       cg2Pl: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2P8_info" {
     block_cg2P8_info:
         const _cg2P8;
         const 0;
         const 4294967326;
         const Sg21L_srt+328;
 },
 _cg2Ph() //  []
         { []
         }
     {offset
       cg2Ph: // global
           R1 = Data.Functor.Sum.$fFoldableSum9_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.168062035 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr'_info;
         const 0;
 },
 sat_sg1Mr_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2QX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2QY; else goto cg2QZ;
       cg2QY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2QZ: // global
           I64[Sp - 16] = block_cg2QV_info;
           _sg1Mo::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sg1Mo::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Mr_info" {
     sat_sg1Mr_info:
         const sat_sg1Mr_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg2QV() //  [R1]
         { []
         }
     {offset
       cg2QV: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2QV_info" {
     block_cg2QV_info:
         const _cg2QV;
         const 1;
         const 30;
 },
 sat_sg1Mx_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2Ra: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2Rb; else goto cg2Rc;
       cg2Rb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Rc: // global
           I64[Sp - 16] = block_cg2R8_info;
           _sg1Mu::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sg1Mu::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Mx_info" {
     sat_sg1Mx_info:
         const sat_sg1Mx_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg2R8() //  [R1]
         { []
         }
     {offset
       cg2R8: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2R8_info" {
     block_cg2R8_info:
         const _cg2R8;
         const 1;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldr'_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cg2Ri: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg2Rj; else goto cg2Rk;
       cg2Rj: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Rk: // global
           I64[Sp - 40] = block_cg2QL_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2Rr; else goto cg2QM;
       ug2Rr: // global
           call _cg2QL(R1) args: 0, res: 0, upd: 0;
       cg2QM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldr'_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr'_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr'_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const Sg21L_srt+304;
 },
 _cg2QL() //  [R1]
         { []
         }
     {offset
       cg2QL: // global
           _sg1Mi::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2Rf; else goto cg2Rg;
       cg2Rf: // global
           Hp = Hp + 16;
           _sg1Ml::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2Rq; else goto cg2Rm;
       cg2Rm: // global
           _sg1Mm::P64 = P64[_sg1Ml::P64 + 7];
           I64[Hp - 8] = sat_sg1Mr_info;
           P64[Hp] = _sg1Mi::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _sg1Mm::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
       cg2Rg: // global
           Hp = Hp + 16;
           _sg1Ml::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg2Rq; else goto cg2Rp;
       cg2Rq: // global
           HpAlloc = 16;
           R1 = _sg1Ml::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2Rp: // global
           _sg1Ms::P64 = P64[_sg1Ml::P64 + 6];
           I64[Hp - 8] = sat_sg1Mx_info;
           P64[Hp] = _sg1Mi::P64;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Functor.Sum.$fFoldableSum10_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _sg1Ms::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2QL_info" {
     block_cg2QL_info:
         const _cg2QL;
         const 4;
         const 4294967326;
         const Sg21L_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.182682514 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldr_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg2Sh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2Si; else goto cg2Sj;
       cg2Si: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Sj: // global
           I64[Sp - 40] = block_cg2Sa_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2Sq; else goto cg2Sb;
       ug2Sq: // global
           call _cg2Sa(R1) args: 0, res: 0, upd: 0;
       cg2Sb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldr_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr_entry;
         const 0;
         const 279172874254;
         const 21474836505;
         const Sg21L_srt+296;
 },
 _cg2Sa() //  [R1]
         { []
         }
     {offset
       cg2Sa: // global
           _sg1MA::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2Se; else goto cg2Sf;
       cg2Se: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp + 16] = _sg1MA::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
       cg2Sf: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp + 16] = _sg1MA::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Sa_info" {
     block_cg2Sa_info:
         const _cg2Sa;
         const 4;
         const 4294967326;
         const Sg21L_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.189618654 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl'_info;
         const 0;
 },
 sat_sg1MP_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2SU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2SV; else goto cg2SW;
       cg2SV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2SW: // global
           I64[Sp - 16] = block_cg2SS_info;
           _sg1MM::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sg1MM::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1MP_info" {
     sat_sg1MP_info:
         const sat_sg1MP_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg2SS() //  [R1]
         { []
         }
     {offset
       cg2SS: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2SS_info" {
     block_cg2SS_info:
         const _cg2SS;
         const 1;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldl'_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cg2SY: // global
           _sg1MK::P64 = R6;
           _sg1MJ::P64 = R5;
           _sg1MI::P64 = R4;
           _sg1MH::P64 = R3;
           _sg1MG::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cg2SZ; else goto cg2T0;
       cg2T0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg2T2; else goto cg2T1;
       cg2T2: // global
           HpAlloc = 16;
           goto cg2SZ;
       cg2SZ: // global
           R6 = _sg1MK::P64;
           R5 = _sg1MJ::P64;
           R4 = _sg1MI::P64;
           R3 = _sg1MH::P64;
           R2 = _sg1MG::P64;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2T1: // global
           I64[Hp - 8] = sat_sg1MP_info;
           P64[Hp] = _sg1MI::P64;
           R6 = _sg1MK::P64;
           R5 = GHC.Base.id_closure+1;
           R4 = Hp - 5;
           R3 = _sg1MH::P64;
           R2 = _sg1MG::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sg1MJ::P64;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldl'_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldl'_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldl'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sg21L_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.197786776 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum7_closure" {
     Data.Functor.Sum.$fFoldableSum7_closure:
         const Data.Functor.Sum.$fFoldableSum7_info;
 },
 Data.Functor.Sum.$fFoldableSum7_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2Tq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2Tx; else goto cg2Ty;
       cg2Tx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum7_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Ty: // global
           I64[Sp - 16] = block_cg2Tn_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ug2TC; else goto cg2To;
       ug2TC: // global
           call _cg2Tn(R1) args: 0, res: 0, upd: 0;
       cg2To: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum7_info" {
     Data.Functor.Sum.$fFoldableSum7_info:
         const Data.Functor.Sum.$fFoldableSum7_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cg2Tn() //  [R1]
         { []
         }
     {offset
       cg2Tn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg2TB; else goto cg2TA;
       cg2TB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg2TA: // global
           _sg1MV::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sg1MV::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Tn_info" {
     block_cg2Tn_info:
         const _cg2Tn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.203687033 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$clength_closure" {
     Data.Functor.Sum.$fFoldableSum_$clength_closure:
         const Data.Functor.Sum.$fFoldableSum_$clength_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2TT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2TU; else goto cg2TV;
       cg2TU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2TV: // global
           R6 = R4;
           R5 = GHC.Base.id_closure+1;
           R4 = Data.Functor.Sum.$fFoldableSum7_closure+3;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Functor.Sum.$fFoldableSum6_closure+1;
           Sp = Sp - 16;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$clength_info" {
     Data.Functor.Sum.$fFoldableSum_$clength_info:
         const Data.Functor.Sum.$fFoldableSum_$clength_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const Sg21L_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.207306078 UTC

[section ""cstring" . lvl3_rfXP4_bytes" {
     lvl3_rfXP4_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.210346221 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum11_closure" {
     Data.Functor.Sum.$fFoldableSum11_closure:
         const Data.Functor.Sum.$fFoldableSum11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum11_entry() //  [R1]
         { []
         }
     {offset
       cg2Ud: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg2Ue; else goto cg2Uf;
       cg2Ue: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2Uf: // global
           (_cg2U8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg2U8::I64 == 0) goto cg2Ua; else goto cg2U9;
       cg2Ua: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg2U9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg2U8::I64;
           I64[Sp - 24] = block_cg2Ub_info;
           R2 = lvl3_rfXP4_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum11_info" {
     Data.Functor.Sum.$fFoldableSum11_info:
         const Data.Functor.Sum.$fFoldableSum11_entry;
         const 0;
         const 4294967317;
         const Sg21L_srt+224;
 },
 _cg2Ub() //  [R1]
         { []
         }
     {offset
       cg2Ub: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg2Ub_info" {
     block_cg2Ub_info:
         const _cg2Ub;
         const 0;
         const 4294967326;
         const Sg21L_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.218123415 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr1_info;
         const 0;
 },
 sat_sg1N9_entry() //  [R1]
         { []
         }
     {offset
       cg2UP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg2UQ; else goto cg2UR;
       cg2UQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2UR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg2UI_info;
           _sg1N3::P64 = P64[R1 + 16];
           _sg1N5::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sg1N3::P64;
           P64[Sp - 24] = _sg1N5::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug2UY; else goto cg2UJ;
       ug2UY: // global
           call _cg2UI(R1) args: 0, res: 0, upd: 0;
       cg2UJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1N9_info" {
     sat_sg1N9_info:
         const sat_sg1N9_entry;
         const 3;
         const 15;
 },
 _cg2UI() //  [R1]
         { []
         }
     {offset
       cg2UI: // global
           _sg1N5::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg2UM; else goto cg2UN;
       cg2UM: // global
           R1 = _sg1N5::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg2UN: // global
           R3 = P64[R1 + 6];
           R2 = _sg1N5::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg2UI_info" {
     block_cg2UI_info:
         const _cg2UI;
         const 2;
         const 30;
 },
 sat_sg1Na_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2V0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2V4; else goto cg2V3;
       cg2V4: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2V3: // global
           _sg1N3::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sg1N9_info;
           P64[Hp - 32] = _sg1N3::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Na_info" {
     sat_sg1Na_info:
         const sat_sg1Na_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_$cfoldr1_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cg2Vb: // global
           _sg1N4::P64 = R5;
           _sg1N3::P64 = R4;
           _sg1N2::P64 = R3;
           _sg1N1::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cg2Vc; else goto cg2Vd;
       cg2Vd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg2Vf; else goto cg2Ve;
       cg2Vf: // global
           HpAlloc = 16;
           goto cg2Vc;
       cg2Vc: // global
           R5 = _sg1N4::P64;
           R4 = _sg1N3::P64;
           R3 = _sg1N2::P64;
           R2 = _sg1N1::P64;
           R1 = Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2Ve: // global
           I64[Hp - 8] = sat_sg1Na_info;
           P64[Hp] = _sg1N3::P64;
           I64[Sp - 8] = block_cg2V5_info;
           R6 = _sg1N4::P64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = Hp - 6;
           R3 = _sg1N2::P64;
           R2 = _sg1N1::P64;
           Sp = Sp - 8;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cfoldr1_info" {
     Data.Functor.Sum.$fFoldableSum_$cfoldr1_info:
         const Data.Functor.Sum.$fFoldableSum_$cfoldr1_entry;
         const 0;
         const 107374182414;
         const 17179869208;
         const Sg21L_srt+344;
 },
 _cg2V5() //  [R1]
         { []
         }
     {offset
       cg2V5: // global
           if (R1 & 7 == 1) goto cg2V8; else goto cg2V9;
       cg2V8: // global
           R1 = Data.Functor.Sum.$fFoldableSum11_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg2V9: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2V5_info" {
     block_cg2V5_info:
         const _cg2V5;
         const 0;
         const 4294967326;
         const Sg21L_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.229397935 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum8_closure" {
     Data.Functor.Sum.$fFoldableSum8_closure:
         const Data.Functor.Sum.$fFoldableSum8_info;
 },
 Data.Functor.Sum.$fFoldableSum8_entry() //  []
         { []
         }
     {offset
       cg2VW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum8_info" {
     Data.Functor.Sum.$fFoldableSum8_info:
         const Data.Functor.Sum.$fFoldableSum8_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.232850477 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$cnull_closure" {
     Data.Functor.Sum.$fFoldableSum_$cnull_closure:
         const Data.Functor.Sum.$fFoldableSum_$cnull_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$cnull_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2W9: // global
           R6 = R4;
           R5 = GHC.Types.True_closure+2;
           R4 = Data.Functor.Sum.$fFoldableSum8_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$cnull_info" {
     Data.Functor.Sum.$fFoldableSum_$cnull_info:
         const Data.Functor.Sum.$fFoldableSum_$cnull_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const Sg21L_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.238163253 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum1_closure" {
     Data.Functor.Sum.$fFoldableSum1_closure:
         const Data.Functor.Sum.$fFoldableSum1_info;
         const 0;
 },
 $dMonoid_sg1Nl_entry() //  [R1]
         { []
         }
     {offset
       cg2Wp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg2Wq; else goto cg2Wr;
       cg2Wq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg2Wr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sg1Nl_info" {
     $dMonoid_sg1Nl_info:
         const $dMonoid_sg1Nl_entry;
         const 1;
         const 4294967312;
         const Sg21L_srt+384;
 },
 sat_sg1Nq_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2WE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg2WF; else goto cg2WG;
       cg2WF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg2WG: // global
           I64[Sp - 32] = block_cg2Wx_info;
           _sg1Ni::P64 = P64[R1 + 7];
           _sg1Nj::P64 = P64[R1 + 15];
           _sg1Nl::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sg1Ni::P64;
           P64[Sp - 16] = _sg1Nj::P64;
           P64[Sp - 8] = _sg1Nl::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug2WN; else goto cg2Wy;
       ug2WN: // global
           call _cg2Wx(R1) args: 0, res: 0, upd: 0;
       cg2Wy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Nq_info" {
     sat_sg1Nq_info:
         const sat_sg1Nq_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cg2Wx() //  [R1]
         { []
         }
     {offset
       cg2Wx: // global
           _sg1Nl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg2WB; else goto cg2WC;
       cg2WB: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg1Nl::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg2WC: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg1Nl::P64;
           P64[Sp + 16] = Data.Functor.Sum.$fFoldableSum2_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg2Wx_info" {
     block_cg2Wx_info:
         const _cg2Wx;
         const 3;
         const 30;
 },
 Data.Functor.Sum.$fFoldableSum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2WO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg2WS; else goto cg2WR;
       cg2WS: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2WR: // global
           I64[Hp - 48] = $dMonoid_sg1Nl_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sg1Nq_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum1_info" {
     Data.Functor.Sum.$fFoldableSum1_info:
         const Data.Functor.Sum.$fFoldableSum1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sg21L_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.247941198 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_$ctoList_closure" {
     Data.Functor.Sum.$fFoldableSum_$ctoList_closure:
         const Data.Functor.Sum.$fFoldableSum_$ctoList_info;
         const 0;
 },
 Data.Functor.Sum.$fFoldableSum_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg2Xr: // global
           R6 = R4;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.:_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_$ctoList_info" {
     Data.Functor.Sum.$fFoldableSum_$ctoList_info:
         const Data.Functor.Sum.$fFoldableSum_$ctoList_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const Sg21L_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.257529191 UTC

[section ""data" . Data.Functor.Sum.$fFoldableSum_closure" {
     Data.Functor.Sum.$fFoldableSum_closure:
         const Data.Functor.Sum.$fFoldableSum_info;
         const 0;
 },
 sat_sg1NL_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2XJ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NL_info" {
     sat_sg1NL_info:
         const sat_sg1NL_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg21L_srt+392;
 },
 sat_sg1NK_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2XR: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum3_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NK_info" {
     sat_sg1NK_info:
         const sat_sg1NK_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg21L_srt+216;
 },
 sat_sg1NJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2XZ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$cminimum_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NJ_info" {
     sat_sg1NJ_info:
         const sat_sg1NJ_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg21L_srt+248;
 },
 sat_sg1NI_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2Y7: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$cmaximum_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NI_info" {
     sat_sg1NI_info:
         const sat_sg1NI_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg21L_srt+272;
 },
 sat_sg1NH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2Yf: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$celem_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NH_info" {
     sat_sg1NH_info:
         const sat_sg1NH_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg21L_srt+288;
 },
 sat_sg1NG_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2Yn: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$clength_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NG_info" {
     sat_sg1NG_info:
         const sat_sg1NG_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg21L_srt+360;
 },
 sat_sg1NF_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2Yv: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$cnull_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NF_info" {
     sat_sg1NF_info:
         const sat_sg1NF_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg21L_srt+400;
 },
 sat_sg1NE_entry() //  [R1, R2]
         { []
         }
     {offset
       cg2YD: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Sum.$fFoldableSum_$ctoList_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NE_info" {
     sat_sg1NE_info:
         const sat_sg1NE_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg21L_srt+408;
 },
 sat_sg1ND_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2YL: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$cfoldl1_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1ND_info" {
     sat_sg1ND_info:
         const sat_sg1ND_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg21L_srt+320;
 },
 sat_sg1NC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2YT: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$cfoldr1_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NC_info" {
     sat_sg1NC_info:
         const sat_sg1NC_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg21L_srt+368;
 },
 sat_sg1NB_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2Z1: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldl'_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NB_info" {
     sat_sg1NB_info:
         const sat_sg1NB_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg21L_srt+352;
 },
 sat_sg1NA_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2Z9: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldl_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1NA_info" {
     sat_sg1NA_info:
         const sat_sg1NA_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg21L_srt+312;
 },
 sat_sg1Nz_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2Zh: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldr'_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Nz_info" {
     sat_sg1Nz_info:
         const sat_sg1Nz_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg21L_srt+336;
 },
 sat_sg1Ny_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2Zp: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldr_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Ny_info" {
     sat_sg1Ny_info:
         const sat_sg1Ny_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg21L_srt+344;
 },
 sat_sg1Nx_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg2Zx: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fFoldableSum_$cfoldMap_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Nx_info" {
     sat_sg1Nx_info:
         const sat_sg1Nx_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1Nw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg2ZF: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fFoldableSum_$cfold_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Nw_info" {
     sat_sg1Nw_info:
         const sat_sg1Nw_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Sum.$fFoldableSum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg2ZJ: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cg2ZN; else goto cg2ZM;
       cg2ZN: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fFoldableSum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg2ZM: // global
           I64[Hp - 512] = sat_sg1NL_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_sg1NK_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_sg1NJ_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_sg1NI_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_sg1NH_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sg1NG_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sg1NF_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sg1NE_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sg1ND_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sg1NC_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sg1NB_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sg1NA_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sg1Nz_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sg1Ny_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sg1Nx_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sg1Nw_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fFoldableSum_info" {
     Data.Functor.Sum.$fFoldableSum_info:
         const Data.Functor.Sum.$fFoldableSum_entry;
         const 0;
         const 274634438132891662;
         const 8589934607;
         const Sg21L_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.288788591 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$ctraverse_closure" {
     Data.Functor.Sum.$fTraversableSum_$ctraverse_closure:
         const Data.Functor.Sum.$fTraversableSum_$ctraverse_info;
 },
 sat_sg1NU_entry() //  [R1]
         { []
         }
     {offset
       cg31p: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg31q; else goto cg31r;
       cg31q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg31r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1NU_info" {
     sat_sg1NU_info:
         const sat_sg1NU_entry;
         const 4;
         const 15;
 },
 sat_sg1NX_entry() //  [R1]
         { []
         }
     {offset
       cg31y: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg31z; else goto cg31A;
       cg31z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg31A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1NX_info" {
     sat_sg1NX_info:
         const sat_sg1NX_entry;
         const 4;
         const 15;
 },
 Data.Functor.Sum.$fTraversableSum_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cg31F: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg31G; else goto cg31H;
       cg31G: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg31H: // global
           I64[Sp - 40] = block_cg31g_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug31Y; else goto cg31h;
       ug31Y: // global
           call _cg31g(R1) args: 0, res: 0, upd: 0;
       cg31h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$ctraverse_info" {
     Data.Functor.Sum.$fTraversableSum_$ctraverse_info:
         const Data.Functor.Sum.$fTraversableSum_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg31g() //  [R1]
         { []
         }
     {offset
       cg31g: // global
           _sg1NO::P64 = P64[Sp + 24];
           _sg1NP::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg31C; else goto cg31D;
       cg31C: // global
           Hp = Hp + 48;
           _sg1NR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg31T; else goto cg31K;
       cg31K: // global
           _sg1NS::P64 = P64[_sg1NR::P64 + 7];
           I64[Hp - 40] = sat_sg1NU_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sg1NO::P64;
           P64[Hp - 8] = _sg1NP::P64;
           P64[Hp] = _sg1NS::P64;
           I64[Sp + 24] = block_cg31I_info;
           R2 = _sg1NO::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
       cg31D: // global
           Hp = Hp + 48;
           _sg1NR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg31T; else goto cg31S;
       cg31T: // global
           HpAlloc = 48;
           R1 = _sg1NR::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg31S: // global
           _sg1NV::P64 = P64[_sg1NR::P64 + 6];
           I64[Hp - 40] = sat_sg1NX_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sg1NO::P64;
           P64[Hp - 8] = _sg1NP::P64;
           P64[Hp] = _sg1NV::P64;
           I64[Sp + 24] = block_cg31Q_info;
           R2 = _sg1NO::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg31g_info" {
     block_cg31g_info:
         const _cg31g;
         const 4;
         const 30;
 },
 _cg31I() //  [R1]
         { []
         }
     {offset
       cg31I: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Sum.InL_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg31I_info" {
     block_cg31I_info:
         const _cg31I;
         const 1;
         const 30;
 },
 _cg31Q() //  [R1]
         { []
         }
     {offset
       cg31Q: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Sum.InR_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg31Q_info" {
     block_cg31Q_info:
         const _cg31Q;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.303653455 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure" {
     Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure:
         const Data.Functor.Sum.$fTraversableSum_$cp2Traversable_info;
         const 0;
 },
 sat_sg1O1_entry() //  [R1]
         { []
         }
     {offset
       cg32T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg32U; else goto cg32V;
       cg32U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg32V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1O1_info" {
     sat_sg1O1_info:
         const sat_sg1O1_entry;
         const 1;
         const 16;
 },
 sat_sg1O0_entry() //  [R1]
         { []
         }
     {offset
       cg330: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg331; else goto cg332;
       cg331: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg332: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1O0_info" {
     sat_sg1O0_info:
         const sat_sg1O0_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fTraversableSum_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cg333: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg337; else goto cg336;
       cg337: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg336: // global
           I64[Hp - 40] = sat_sg1O1_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg1O0_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Sum.$fFoldableSum_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$cp2Traversable_info" {
     Data.Functor.Sum.$fTraversableSum_$cp2Traversable_info:
         const Data.Functor.Sum.$fTraversableSum_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg21L_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.311553471 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$cp1Traversable_closure" {
     Data.Functor.Sum.$fTraversableSum_$cp1Traversable_closure:
         const Data.Functor.Sum.$fTraversableSum_$cp1Traversable_info;
 },
 sat_sg1O5_entry() //  [R1]
         { []
         }
     {offset
       cg33w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg33x; else goto cg33y;
       cg33x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg33y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1O5_info" {
     sat_sg1O5_info:
         const sat_sg1O5_entry;
         const 1;
         const 16;
 },
 sat_sg1O4_entry() //  [R1]
         { []
         }
     {offset
       cg33D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg33E; else goto cg33F;
       cg33E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg33F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1O4_info" {
     sat_sg1O4_info:
         const sat_sg1O4_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fTraversableSum_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cg33G: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg33K; else goto cg33J;
       cg33K: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg33J: // global
           I64[Hp - 40] = sat_sg1O5_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg1O4_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Sum.$fFunctorSum_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$cp1Traversable_info" {
     Data.Functor.Sum.$fTraversableSum_$cp1Traversable_info:
         const Data.Functor.Sum.$fTraversableSum_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.318373914 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$csequenceA_closure" {
     Data.Functor.Sum.$fTraversableSum_$csequenceA_closure:
         const Data.Functor.Sum.$fTraversableSum_$csequenceA_info;
 },
 Data.Functor.Sum.$fTraversableSum_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cg345: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$csequenceA_info" {
     Data.Functor.Sum.$fTraversableSum_$csequenceA_info:
         const Data.Functor.Sum.$fTraversableSum_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.322910614 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$cmapM_closure" {
     Data.Functor.Sum.$fTraversableSum_$cmapM_closure:
         const Data.Functor.Sum.$fTraversableSum_$cmapM_info;
 },
 Data.Functor.Sum.$fTraversableSum_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cg34j: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg34k; else goto cg34l;
       cg34k: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg34l: // global
           I64[Sp - 40] = block_cg34h_info;
           _sg1O9::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sg1O9::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$cmapM_info" {
     Data.Functor.Sum.$fTraversableSum_$cmapM_info:
         const Data.Functor.Sum.$fTraversableSum_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg34h() //  [R1]
         { []
         }
     {offset
       cg34h: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg34h_info" {
     block_cg34h_info:
         const _cg34h;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.32917437 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_$csequence_closure" {
     Data.Functor.Sum.$fTraversableSum_$csequence_closure:
         const Data.Functor.Sum.$fTraversableSum_$csequence_info;
 },
 Data.Functor.Sum.$fTraversableSum_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cg34E: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg34F; else goto cg34G;
       cg34F: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg34G: // global
           I64[Sp - 32] = block_cg34C_info;
           _sg1Of::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sg1Of::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_$csequence_info" {
     Data.Functor.Sum.$fTraversableSum_$csequence_info:
         const Data.Functor.Sum.$fTraversableSum_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg34C() //  [R1]
         { []
         }
     {offset
       cg34C: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg34C_info" {
     block_cg34C_info:
         const _cg34C;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.336599155 UTC

[section ""data" . Data.Functor.Sum.$fTraversableSum_closure" {
     Data.Functor.Sum.$fTraversableSum_closure:
         const Data.Functor.Sum.$fTraversableSum_info;
         const 0;
 },
 sat_sg1Or_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg353: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fTraversableSum_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Or_info" {
     sat_sg1Or_info:
         const sat_sg1Or_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg1Oq_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg35b: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fTraversableSum_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Oq_info" {
     sat_sg1Oq_info:
         const sat_sg1Oq_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1Op_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg35j: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Sum.$fTraversableSum_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Op_info" {
     sat_sg1Op_info:
         const sat_sg1Op_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg1Oo_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg35r: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$fTraversableSum_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Oo_info" {
     sat_sg1Oo_info:
         const sat_sg1Oo_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1On_entry() //  [R1]
         { []
         }
     {offset
       cg35y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg35z; else goto cg35A;
       cg35z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg35A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fTraversableSum_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1On_info" {
     sat_sg1On_info:
         const sat_sg1On_entry;
         const 2;
         const 4294967314;
         const Sg21L_srt+424;
 },
 sat_sg1Om_entry() //  [R1]
         { []
         }
     {offset
       cg35F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg35G; else goto cg35H;
       cg35G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg35H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$fTraversableSum_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Om_info" {
     sat_sg1Om_info:
         const sat_sg1Om_entry;
         const 2;
         const 18;
 },
 Data.Functor.Sum.$fTraversableSum_entry() //  [R2, R3]
         { []
         }
     {offset
       cg35J: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cg35N; else goto cg35M;
       cg35N: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fTraversableSum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg35M: // global
           I64[Hp - 208] = sat_sg1Or_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sg1Oq_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sg1Op_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sg1Oo_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sg1On_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sg1Om_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fTraversableSum_info" {
     Data.Functor.Sum.$fTraversableSum_info:
         const Data.Functor.Sum.$fTraversableSum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg21L_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.350649155 UTC

[section ""data" . Data.Functor.Sum.$fGeneric1Sum_$cto1_closure" {
     Data.Functor.Sum.$fGeneric1Sum_$cto1_closure:
         const Data.Functor.Sum.$fGeneric1Sum_$cto1_info;
 },
 Data.Functor.Sum.$fGeneric1Sum_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cg36C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg36D; else goto cg36E;
       cg36D: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGeneric1Sum_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg36E: // global
           I64[Sp - 8] = block_cg36w_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGeneric1Sum_$cto1_info" {
     Data.Functor.Sum.$fGeneric1Sum_$cto1_info:
         const Data.Functor.Sum.$fGeneric1Sum_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg36w() //  [R1]
         { []
         }
     {offset
       cg36w: // global
           if (R1 & 7 == 1) goto cg36z; else goto cg36A;
       cg36z: // global
           Hp = Hp + 16;
           _sg1Ot::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg36Q; else goto cg36J;
       cg36J: // global
           _sg1Ou::P64 = P64[_sg1Ot::P64 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = _sg1Ou::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg36A: // global
           Hp = Hp + 16;
           _sg1Ot::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg36Q; else goto cg36P;
       cg36Q: // global
           HpAlloc = 16;
           R1 = _sg1Ot::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg36P: // global
           _sg1Ov::P64 = P64[_sg1Ot::P64 + 6];
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = _sg1Ov::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg36w_info" {
     block_cg36w_info:
         const _cg36w;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.357498158 UTC

[section ""data" . Data.Functor.Sum.$fGeneric1Sum1_closure" {
     Data.Functor.Sum.$fGeneric1Sum1_closure:
         const Data.Functor.Sum.$fGeneric1Sum1_info;
 },
 Data.Functor.Sum.$fGeneric1Sum1_entry() //  [R2]
         { []
         }
     {offset
       cg37h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg37i; else goto cg37j;
       cg37i: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGeneric1Sum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg37j: // global
           I64[Sp - 8] = block_cg37a_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug37w; else goto cg37b;
       ug37w: // global
           call _cg37a(R1) args: 0, res: 0, upd: 0;
       cg37b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGeneric1Sum1_info" {
     Data.Functor.Sum.$fGeneric1Sum1_info:
         const Data.Functor.Sum.$fGeneric1Sum1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg37a() //  [R1]
         { []
         }
     {offset
       cg37a: // global
           if (R1 & 7 == 1) goto cg37e; else goto cg37f;
       cg37e: // global
           Hp = Hp + 16;
           _sg1Ox::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg37v; else goto cg37o;
       cg37o: // global
           _sg1Oy::P64 = P64[_sg1Ox::P64 + 7];
           I64[Hp - 8] = GHC.Generics.L1_con_info;
           P64[Hp] = _sg1Oy::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg37f: // global
           Hp = Hp + 16;
           _sg1Ox::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg37v; else goto cg37u;
       cg37v: // global
           HpAlloc = 16;
           R1 = _sg1Ox::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg37u: // global
           _sg1Oz::P64 = P64[_sg1Ox::P64 + 6];
           I64[Hp - 8] = GHC.Generics.R1_con_info;
           P64[Hp] = _sg1Oz::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg37a_info" {
     block_cg37a_info:
         const _cg37a;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.363002166 UTC

[section ""data" . Data.Functor.Sum.$fGeneric1Sum_closure" {
     Data.Functor.Sum.$fGeneric1Sum_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Sum.$fGeneric1Sum1_closure+1;
         const Data.Functor.Sum.$fGeneric1Sum_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.366232975 UTC

[section ""data" . Data.Functor.Sum.$fGenericSum_$cto_closure" {
     Data.Functor.Sum.$fGenericSum_$cto_closure:
         const Data.Functor.Sum.$fGenericSum_$cto_info;
 },
 Data.Functor.Sum.$fGenericSum_$cto_entry() //  [R2]
         { []
         }
     {offset
       cg37Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg37Z; else goto cg380;
       cg37Z: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGenericSum_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg380: // global
           I64[Sp - 8] = block_cg37S_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGenericSum_$cto_info" {
     Data.Functor.Sum.$fGenericSum_$cto_info:
         const Data.Functor.Sum.$fGenericSum_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg37S() //  [R1]
         { []
         }
     {offset
       cg37S: // global
           if (R1 & 7 == 1) goto cg37V; else goto cg37W;
       cg37V: // global
           Hp = Hp + 16;
           _sg1OB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg38c; else goto cg385;
       cg385: // global
           _sg1OC::P64 = P64[_sg1OB::P64 + 7];
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = _sg1OC::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg37W: // global
           Hp = Hp + 16;
           _sg1OB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg38c; else goto cg38b;
       cg38c: // global
           HpAlloc = 16;
           R1 = _sg1OB::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg38b: // global
           _sg1OD::P64 = P64[_sg1OB::P64 + 6];
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = _sg1OD::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg37S_info" {
     block_cg37S_info:
         const _cg37S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.373224976 UTC

[section ""data" . Data.Functor.Sum.$fGenericSum1_closure" {
     Data.Functor.Sum.$fGenericSum1_closure:
         const Data.Functor.Sum.$fGenericSum1_info;
 },
 Data.Functor.Sum.$fGenericSum1_entry() //  [R2]
         { []
         }
     {offset
       cg38D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg38E; else goto cg38F;
       cg38E: // global
           R2 = R2;
           R1 = Data.Functor.Sum.$fGenericSum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg38F: // global
           I64[Sp - 8] = block_cg38w_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug38S; else goto cg38x;
       ug38S: // global
           call _cg38w(R1) args: 0, res: 0, upd: 0;
       cg38x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fGenericSum1_info" {
     Data.Functor.Sum.$fGenericSum1_info:
         const Data.Functor.Sum.$fGenericSum1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cg38w() //  [R1]
         { []
         }
     {offset
       cg38w: // global
           if (R1 & 7 == 1) goto cg38A; else goto cg38B;
       cg38A: // global
           Hp = Hp + 16;
           _sg1OF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg38R; else goto cg38K;
       cg38K: // global
           _sg1OG::P64 = P64[_sg1OF::P64 + 7];
           I64[Hp - 8] = GHC.Generics.L1_con_info;
           P64[Hp] = _sg1OG::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg38B: // global
           Hp = Hp + 16;
           _sg1OF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg38R; else goto cg38Q;
       cg38R: // global
           HpAlloc = 16;
           R1 = _sg1OF::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg38Q: // global
           _sg1OH::P64 = P64[_sg1OF::P64 + 6];
           I64[Hp - 8] = GHC.Generics.R1_con_info;
           P64[Hp] = _sg1OH::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg38w_info" {
     block_cg38w_info:
         const _cg38w;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.378654372 UTC

[section ""data" . Data.Functor.Sum.$fGenericSum_closure" {
     Data.Functor.Sum.$fGenericSum_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Sum.$fGenericSum1_closure+1;
         const Data.Functor.Sum.$fGenericSum_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.383223754 UTC

[section ""data" . Data.Functor.Sum.$w$cgunfold_closure" {
     Data.Functor.Sum.$w$cgunfold_closure:
         const Data.Functor.Sum.$w$cgunfold_info;
         const 0;
 },
 sat_sg1OX_entry() //  [R1]
         { []
         }
     {offset
       cg39v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg39w; else goto cg39x;
       cg39w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg39x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1OX_info" {
     sat_sg1OX_info:
         const sat_sg1OX_entry;
         const 1;
         const 16;
 },
 sat_sg1OY_entry() //  [R1]
         { []
         }
     {offset
       cg39D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg39E; else goto cg39F;
       cg39E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg39F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1OY_info" {
     sat_sg1OY_info:
         const sat_sg1OY_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$w$cgunfold_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg39K: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg39L; else goto cg39M;
       cg39L: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$w$cgunfold_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg39M: // global
           I64[Sp - 40] = block_cg39e_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug3a4; else goto cg39f;
       ug3a4: // global
           call _cg39e(R1) args: 0, res: 0, upd: 0;
       cg39f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgunfold_info" {
     Data.Functor.Sum.$w$cgunfold_info:
         const Data.Functor.Sum.$w$cgunfold_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const Sg21L_srt+440;
 },
 _cg39e() //  [R1]
         { []
         }
     {offset
       cg39e: // global
           if (R1 & 7 == 1) goto cg39I; else goto cg39H;
       cg39I: // global
           I64[Sp] = block_cg39k_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto ug3a3; else goto cg39l;
       ug3a3: // global
           call _cg39k(R1) args: 0, res: 0, upd: 0;
       cg39l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg39H: // global
           _sg1ON::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cg39O_info;
           R1 = _sg1ON::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto ug3a2; else goto cg39Q;
       ug3a2: // global
           call _cg39O(R1) args: 0, res: 0, upd: 0;
       cg39Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg39e_info" {
     block_cg39e_info:
         const _cg39e;
         const 5;
         const 4294967326;
         const Sg21L_srt+440;
 },
 _cg39k() //  [R1]
         { []
         }
     {offset
       cg39k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg39Y; else goto cg39X;
       cg39Y: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg39X: // global
           _sg1OK::P64 = P64[Sp + 24];
           _sg1OL::P64 = P64[Sp + 32];
           if (I64[R1 + 7] == 1) goto cg3a1; else goto cg3a0;
       cg3a1: // global
           I64[Hp - 16] = sat_sg1OY_info;
           P64[Hp] = _sg1OL::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           R1 = _sg1OK::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3a0: // global
           I64[Hp - 16] = sat_sg1OX_info;
           P64[Hp] = _sg1OL::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _sg1OK::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg39k_info" {
     block_cg39k_info:
         const _cg39k;
         const 1029;
         const 30;
 },
 _cg39O() //  [R1]
         { []
         }
     {offset
       cg39O: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg39O_info" {
     block_cg39O_info:
         const _cg39O;
         const 0;
         const 4294967326;
         const Sg21L_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.396413749 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgunfold_closure" {
     Data.Functor.Sum.$fDataSum_$cgunfold_closure:
         const Data.Functor.Sum.$fDataSum_$cgunfold_info;
         const 0;
 },
 Data.Functor.Sum.$fDataSum_$cgunfold_slow() //  [R1]
         { []
         }
     {offset
       cg3aE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgunfold_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgunfold_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cg3aL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3aM; else goto cg3aN;
       cg3aM: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgunfold_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cg3aN: // global
           I64[Sp - 8] = block_cg3aI_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3aR; else goto cg3aJ;
       ug3aR: // global
           call _cg3aI(R1) args: 0, res: 0, upd: 0;
       cg3aJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgunfold_info" {
     Data.Functor.Sum.$fDataSum_$cgunfold_info:
         const Data.Functor.Sum.$fDataSum_$cgunfold_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const Sg21L_srt+448;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgunfold_slow;
 },
 _cg3aI() //  [R1]
         { []
         }
     {offset
       cg3aI: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 39];
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgunfold_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3aI_info" {
     block_cg3aI_info:
         const _cg3aI;
         const 4;
         const 4294967326;
         const Sg21L_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.405220402 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgfoldl_closure" {
     Data.Functor.Sum.$fDataSum_$cgfoldl_closure:
         const Data.Functor.Sum.$fDataSum_$cgfoldl_info;
 },
 Data.Functor.Sum.$fDataSum_$cgfoldl_slow() //  [R1]
         { []
         }
     {offset
       cg3b6: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sg1Pp_entry() //  [R1]
         { []
         }
     {offset
       cg3bj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3bk; else goto cg3bl;
       cg3bk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3bl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Pp_info" {
     sat_sg1Pp_info:
         const sat_sg1Pp_entry;
         const 1;
         const 16;
 },
 sat_sg1Pr_entry() //  [R1]
         { []
         }
     {offset
       cg3bs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3bt; else goto cg3bu;
       cg3bt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3bu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Sum.InR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Pr_info" {
     sat_sg1Pr_info:
         const sat_sg1Pr_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$fDataSum_$cgfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg3bz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3bA; else goto cg3bB;
       cg3bA: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgfoldl_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cg3bB: // global
           I64[Sp - 8] = block_cg3ba_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3bI; else goto cg3bb;
       ug3bI: // global
           call _cg3ba(R1) args: 0, res: 0, upd: 0;
       cg3bb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgfoldl_info" {
     Data.Functor.Sum.$fDataSum_$cgfoldl_info:
         const Data.Functor.Sum.$fDataSum_$cgfoldl_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgfoldl_slow;
 },
 _cg3ba() //  [R1]
         { []
         }
     {offset
       cg3ba: // global
           _sg1Pk::P64 = P64[Sp + 16];
           _sg1Pl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cg3bw; else goto cg3bx;
       cg3bw: // global
           Hp = Hp + 24;
           _sg1Pn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3bH; else goto cg3bD;
       cg3bD: // global
           _sg1Po::P64 = P64[_sg1Pn::P64 + 7];
           I64[Hp - 16] = sat_sg1Pp_info;
           P64[Hp] = _sg1Pl::P64;
           R4 = _sg1Po::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 32];
           R1 = _sg1Pk::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3bx: // global
           Hp = Hp + 24;
           _sg1Pn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3bH; else goto cg3bG;
       cg3bH: // global
           HpAlloc = 24;
           R1 = _sg1Pn::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3bG: // global
           _sg1Pq::P64 = P64[_sg1Pn::P64 + 6];
           I64[Hp - 16] = sat_sg1Pr_info;
           P64[Hp] = _sg1Pl::P64;
           R4 = _sg1Pq::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           R1 = _sg1Pk::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3ba_info" {
     block_cg3ba_info:
         const _cg3ba;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.415695743 UTC

[section ""cstring" . Data.Functor.Sum.$fDataSum8_bytes" {
     Data.Functor.Sum.$fDataSum8_bytes:
         I8[] [83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.418449483 UTC

[section ""data" . $tSum1_rfXP5_closure" {
     $tSum1_rfXP5_closure:
         const $tSum1_rfXP5_info;
         const 0;
         const 0;
         const 0;
 },
 $tSum1_rfXP5_entry() //  [R1]
         { []
         }
     {offset
       cg3cg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3ch; else goto cg3ci;
       cg3ch: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3ci: // global
           (_cg3cd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg3cd::I64 == 0) goto cg3cf; else goto cg3ce;
       cg3cf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg3ce: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg3cd::I64;
           R2 = Data.Functor.Sum.$fDataSum8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $tSum1_rfXP5_info" {
     $tSum1_rfXP5_info:
         const $tSum1_rfXP5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.424235378 UTC

[section ""data" . go61_rfXP6_closure" {
     go61_rfXP6_closure:
         const go61_rfXP6_info;
         const 0;
 },
 go61_rfXP6_entry() //  [R2, R3]
         { []
         }
     {offset
       cg3cC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3cD; else goto ug3dg;
       cg3cD: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rfXP6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug3dg: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cg3cs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rfXP6_info" {
     go61_rfXP6_info:
         const go61_rfXP6_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sg21L_srt+464;
 },
 _cg3cs() //  []
         { []
         }
     {offset
       cg3cs: // global
           _sg1Ps::P64 = P64[Sp];
           I64[Sp] = block_cg3cv_info;
           R1 = _sg1Ps::P64;
           if (R1 & 7 != 0) goto ug3dk; else goto cg3cw;
       ug3dk: // global
           call _cg3cv(R1) args: 0, res: 0, upd: 0;
       cg3cw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cg3cv() //  [R1]
         { []
         }
     {offset
       cg3cv: // global
           if (R1 & 7 == 1) goto ug3dh; else goto cg3cA;
       ug3dh: // global
           Sp = Sp + 16;
           call _cg3cS() args: 0, res: 0, upd: 0;
       cg3cA: // global
           I64[Sp - 8] = block_cg3cK_info;
           _sg1Pv::P64 = P64[R1 + 6];
           _sg1Pw::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sg1Pw::P64;
           P64[Sp + 8] = _sg1Pv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3dl; else goto cg3cM;
       ug3dl: // global
           call _cg3cK(R1) args: 0, res: 0, upd: 0;
       cg3cM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3cv_info" {
     block_cg3cv_info:
         const _cg3cv;
         const 1;
         const 21474836510;
         const Sg21L_srt+464;
 },
 _cg3cK() //  [R1]
         { []
         }
     {offset
       cg3cK: // global
           if (R1 & 7 == 1) goto ug3di; else goto cg3cX;
       ug3di: // global
           Sp = Sp + 24;
           call _cg3cS() args: 0, res: 0, upd: 0;
       cg3cX: // global
           I64[Sp - 8] = block_cg3cV_info;
           _sg1Py::P64 = P64[R1 + 6];
           _sg1Pz::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sg1Pz::P64;
           P64[Sp + 16] = _sg1Py::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3do; else goto cg3cY;
       ug3do: // global
           call _cg3cV(R1) args: 0, res: 0, upd: 0;
       cg3cY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3cK_info" {
     block_cg3cK_info:
         const _cg3cK;
         const 2;
         const 21474836510;
         const Sg21L_srt+464;
 },
 _cg3cS() //  []
         { []
         }
     {offset
       cg3cS: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg3cV() //  [R1]
         { []
         }
     {offset
       cg3cV: // global
           I64[Sp] = block_cg3d2_info;
           R3 = Data.Functor.Sum.$fRead1Sum7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3cV_info" {
     block_cg3cV_info:
         const _cg3cV;
         const 3;
         const 21474836510;
         const Sg21L_srt+464;
 },
 _cg3d2() //  [R1]
         { []
         }
     {offset
       cg3d2: // global
           if (R1 & 7 == 1) goto cg3d9; else goto cg3dd;
       cg3d9: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cg3cs() args: 0, res: 0, upd: 0;
       cg3dd: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3d2_info" {
     block_cg3d2_info:
         const _cg3d2;
         const 3;
         const 21474836510;
         const Sg21L_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.438694569 UTC

[section ""data" . go1_rfXP7_closure" {
     go1_rfXP7_closure:
         const go1_rfXP7_info;
         const 0;
 },
 section ""relreadonly" . ug3f3_srtd" {
     ug3f3_srtd:
         const Sg21L_srt+88;
         const 51;
         const 1266637395197953;
 },
 go1_rfXP7_entry() //  [R2, R3]
         { []
         }
     {offset
       cg3ee: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3ef; else goto ug3eS;
       cg3ef: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rfXP7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug3eS: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cg3e4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_rfXP7_info" {
     go1_rfXP7_info:
         const go1_rfXP7_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ug3f3_srtd;
 },
 _cg3e4() //  []
         { []
         }
     {offset
       cg3e4: // global
           _sg1PH::P64 = P64[Sp];
           I64[Sp] = block_cg3e7_info;
           R1 = _sg1PH::P64;
           if (R1 & 7 != 0) goto ug3eW; else goto cg3e8;
       ug3eW: // global
           call _cg3e7(R1) args: 0, res: 0, upd: 0;
       cg3e8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ug3f4_srtd" {
     ug3f4_srtd:
         const Sg21L_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg3e7() //  [R1]
         { []
         }
     {offset
       cg3e7: // global
           if (R1 & 7 == 1) goto ug3eT; else goto cg3ec;
       ug3eT: // global
           Sp = Sp + 16;
           call _cg3eu() args: 0, res: 0, upd: 0;
       cg3ec: // global
           I64[Sp - 8] = block_cg3em_info;
           _sg1PK::P64 = P64[R1 + 6];
           _sg1PL::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sg1PL::P64;
           P64[Sp + 8] = _sg1PK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3eX; else goto cg3eo;
       ug3eX: // global
           call _cg3em(R1) args: 0, res: 0, upd: 0;
       cg3eo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3e7_info" {
     block_cg3e7_info:
         const _cg3e7;
         const 1;
         const 18446744069414584350;
         const ug3f4_srtd;
 },
 section ""relreadonly" . ug3f5_srtd" {
     ug3f5_srtd:
         const Sg21L_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg3em() //  [R1]
         { []
         }
     {offset
       cg3em: // global
           if (R1 & 7 == 1) goto ug3eU; else goto cg3ez;
       ug3eU: // global
           Sp = Sp + 24;
           call _cg3eu() args: 0, res: 0, upd: 0;
       cg3ez: // global
           I64[Sp - 8] = block_cg3ex_info;
           _sg1PN::P64 = P64[R1 + 6];
           _sg1PO::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sg1PO::P64;
           P64[Sp + 16] = _sg1PN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3f0; else goto cg3eA;
       ug3f0: // global
           call _cg3ex(R1) args: 0, res: 0, upd: 0;
       cg3eA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3em_info" {
     block_cg3em_info:
         const _cg3em;
         const 2;
         const 18446744069414584350;
         const ug3f5_srtd;
 },
 _cg3eu() //  []
         { []
         }
     {offset
       cg3eu: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ug3f6_srtd" {
     ug3f6_srtd:
         const Sg21L_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg3ex() //  [R1]
         { []
         }
     {offset
       cg3ex: // global
           I64[Sp] = block_cg3eE_info;
           R3 = Data.Functor.Sum.$fRead1Sum3_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3ex_info" {
     block_cg3ex_info:
         const _cg3ex;
         const 3;
         const 18446744069414584350;
         const ug3f6_srtd;
 },
 section ""relreadonly" . ug3f7_srtd" {
     ug3f7_srtd:
         const Sg21L_srt+88;
         const 48;
         const 140737488355329;
 },
 _cg3eE() //  [R1]
         { []
         }
     {offset
       cg3eE: // global
           if (R1 & 7 == 1) goto cg3eL; else goto cg3eP;
       cg3eL: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cg3e4() args: 0, res: 0, upd: 0;
       cg3eP: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3eE_info" {
     block_cg3eE_info:
         const _cg3eE;
         const 3;
         const 18446744069414584350;
         const ug3f7_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.455887571 UTC

[section ""data" . $cInL1_rfXP8_closure" {
     $cInL1_rfXP8_closure:
         const Data.Data.AlgConstr_con_info;
         const $cInL2_rfXPe_closure;
         const 0;
 },
 section ""data" . $cInR1_rfXP9_closure" {
     $cInR1_rfXP9_closure:
         const Data.Data.AlgConstr_con_info;
         const $cInR2_rfXPd_closure;
         const 0;
 },
 section ""data" . Data.Functor.Sum.$cInL_closure" {
     Data.Functor.Sum.$cInL_closure:
         const Data.Data.Constr_con_info;
         const $cInL1_rfXP8_closure+1;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Sum.$tSum_closure+1;
         const 0;
 },
 section ""data" . $tSum2_rfXPa_closure" {
     $tSum2_rfXPa_closure:
         const :_con_info;
         const Data.Functor.Sum.$cInR_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSum3_rfXPb_closure" {
     $tSum3_rfXPb_closure:
         const :_con_info;
         const Data.Functor.Sum.$cInL_closure+1;
         const $tSum2_rfXPa_closure+2;
         const 0;
 },
 section ""data" . $tSum4_rfXPc_closure" {
     $tSum4_rfXPc_closure:
         const Data.Data.AlgRep_con_info;
         const $tSum3_rfXPb_closure+2;
         const 0;
 },
 section ""data" . Data.Functor.Sum.$tSum_closure" {
     Data.Functor.Sum.$tSum_closure:
         const Data.Data.DataType_con_info;
         const $tSum1_rfXP5_closure;
         const $tSum4_rfXPc_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Sum.$cInR_closure" {
     Data.Functor.Sum.$cInR_closure:
         const Data.Data.Constr_con_info;
         const $cInR1_rfXP9_closure+1;
         const Data.Functor.Sum.$fRead1Sum3_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Sum.$tSum_closure+1;
         const 0;
 },
 section ""data" . $cInR2_rfXPd_closure" {
     $cInR2_rfXPd_closure:
         const $cInR2_rfXPd_info;
         const 0;
         const 0;
         const 0;
 },
 $cInR2_rfXPd_entry() //  [R1]
         { []
         }
     {offset
       cg3fV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3fW; else goto cg3fX;
       cg3fW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3fX: // global
           (_cg3fS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg3fS::I64 == 0) goto cg3fU; else goto cg3fT;
       cg3fU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg3fT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg3fS::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSum3_rfXPb_closure+2;
           Sp = Sp - 16;
           call go1_rfXP7_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cInR2_rfXPd_info" {
     $cInR2_rfXPd_info:
         const $cInR2_rfXPd_entry;
         const 0;
         const 30064771093;
         const Sg21L_srt+488;
 },
 section ""data" . $cInL2_rfXPe_closure" {
     $cInL2_rfXPe_closure:
         const $cInL2_rfXPe_info;
         const 0;
         const 0;
         const 0;
 },
 $cInL2_rfXPe_entry() //  [R1]
         { []
         }
     {offset
       cg3g4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3g5; else goto cg3g6;
       cg3g5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3g6: // global
           (_cg3g1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg3g1::I64 == 0) goto cg3g3; else goto cg3g2;
       cg3g3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg3g2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg3g1::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSum3_rfXPb_closure+2;
           Sp = Sp - 16;
           call go61_rfXP6_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cInL2_rfXPe_info" {
     $cInL2_rfXPe_info:
         const $cInL2_rfXPe_entry;
         const 0;
         const 107374182421;
         const Sg21L_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.467310542 UTC

[section ""cstring" . Data.Functor.Sum.$trModule4_bytes" {
     Data.Functor.Sum.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.46902548 UTC

[section ""data" . Data.Functor.Sum.$trModule3_closure" {
     Data.Functor.Sum.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.470946865 UTC

[section ""cstring" . Data.Functor.Sum.$trModule2_bytes" {
     Data.Functor.Sum.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.472619693 UTC

[section ""data" . Data.Functor.Sum.$trModule1_closure" {
     Data.Functor.Sum.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.474451551 UTC

[section ""data" . Data.Functor.Sum.$trModule_closure" {
     Data.Functor.Sum.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Sum.$trModule3_closure+1;
         const Data.Functor.Sum.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.476226092 UTC

[section ""data" . $krep_rfXPf_closure" {
     $krep_rfXPf_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.477911007 UTC

[section ""data" . $krep1_rfXPg_closure" {
     $krep1_rfXPg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rfXPf_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.480214436 UTC

[section ""data" . $krep2_rfXPh_closure" {
     $krep2_rfXPh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfXPg_closure+4;
         const $krep1_rfXPg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.48202407 UTC

[section ""data" . Data.Functor.Sum.$fDataSum6_closure" {
     Data.Functor.Sum.$fDataSum6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfXPg_closure+4;
         const $krep2_rfXPh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.483768804 UTC

[section ""data" . $krep3_rfXPi_closure" {
     $krep3_rfXPi_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.486465479 UTC

[section ""data" . $krep4_rfXPj_closure" {
     $krep4_rfXPj_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.488460937 UTC

[section ""data" . $krep5_rfXPk_closure" {
     $krep5_rfXPk_closure:
         const GHC.Types.KindRepVar_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.490857584 UTC

[section ""data" . $krep6_rfXPl_closure" {
     $krep6_rfXPl_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep4_rfXPj_closure+2;
         const $krep5_rfXPk_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.492718356 UTC

[section ""data" . $krep7_rfXPm_closure" {
     $krep7_rfXPm_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep3_rfXPi_closure+2;
         const $krep5_rfXPk_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.494588352 UTC

[section ""data" . Data.Functor.Sum.$fDataSum7_closure" {
     Data.Functor.Sum.$fDataSum7_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$fDataSum8_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.49652965 UTC

[section ""data" . Data.Functor.Sum.$tcSum_closure" {
     Data.Functor.Sum.$tcSum_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Sum.$trModule_closure+1;
         const Data.Functor.Sum.$fDataSum7_closure+1;
         const Data.Functor.Sum.$fDataSum6_closure+4;
         const 6345190594862254730;
         const 1236278515871186010;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.498574552 UTC

[section ""data" . $krep8_rfXPn_closure" {
     $krep8_rfXPn_closure:
         const :_con_info;
         const $krep5_rfXPk_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.500457772 UTC

[section ""data" . $krep9_rfXPo_closure" {
     $krep9_rfXPo_closure:
         const :_con_info;
         const $krep3_rfXPi_closure+2;
         const $krep8_rfXPn_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.502378274 UTC

[section ""data" . $krep10_rfXPp_closure" {
     $krep10_rfXPp_closure:
         const :_con_info;
         const $krep4_rfXPj_closure+2;
         const $krep9_rfXPo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.504378498 UTC

[section ""data" . $krep11_rfXPq_closure" {
     $krep11_rfXPq_closure:
         const :_con_info;
         const $krep_rfXPf_closure+2;
         const $krep10_rfXPp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.507044854 UTC

[section ""data" . $krep12_rfXPr_closure" {
     $krep12_rfXPr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Sum.$tcSum_closure+1;
         const $krep11_rfXPq_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.50960871 UTC

[section ""data" . Data.Functor.Sum.$tc'InL1_closure" {
     Data.Functor.Sum.$tc'InL1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rfXPl_closure+3;
         const $krep12_rfXPr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.511431974 UTC

[section ""cstring" . Data.Functor.Sum.$tc'InL3_bytes" {
     Data.Functor.Sum.$tc'InL3_bytes:
         I8[] [39,73,110,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.513451591 UTC

[section ""data" . Data.Functor.Sum.$tc'InL2_closure" {
     Data.Functor.Sum.$tc'InL2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$tc'InL3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.515478453 UTC

[section ""data" . Data.Functor.Sum.$tc'InL_closure" {
     Data.Functor.Sum.$tc'InL_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Sum.$trModule_closure+1;
         const Data.Functor.Sum.$tc'InL2_closure+1;
         const Data.Functor.Sum.$tc'InL1_closure+4;
         const 7951421854502432011;
         const 12303552236073891860;
         const 4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.517413324 UTC

[section ""data" . Data.Functor.Sum.$tc'InR1_closure" {
     Data.Functor.Sum.$tc'InR1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rfXPm_closure+3;
         const $krep12_rfXPr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.519097794 UTC

[section ""cstring" . Data.Functor.Sum.$tc'InR3_bytes" {
     Data.Functor.Sum.$tc'InR3_bytes:
         I8[] [39,73,110,82]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.520797212 UTC

[section ""data" . Data.Functor.Sum.$tc'InR2_closure" {
     Data.Functor.Sum.$tc'InR2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Sum.$tc'InR3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.5229995 UTC

[section ""data" . Data.Functor.Sum.$tc'InR_closure" {
     Data.Functor.Sum.$tc'InR_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Sum.$trModule_closure+1;
         const Data.Functor.Sum.$tc'InR2_closure+1;
         const Data.Functor.Sum.$tc'InR1_closure+4;
         const 12078304815884238110;
         const 12377490770432979855;
         const 4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.526935007 UTC

[section ""data" . Data.Functor.Sum.$w$cp1Data_closure" {
     Data.Functor.Sum.$w$cp1Data_closure:
         const Data.Functor.Sum.$w$cp1Data_info;
         const 0;
 },
 Data.Functor.Sum.$w$cp1Data_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg3hb: // global
           _sg1PZ::P64 = R5;
           _sg1PY::P64 = R4;
           _sg1PX::P64 = R3;
           _sg1PW::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cg3hf; else goto cg3hg;
       cg3hg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg3hi; else goto cg3hh;
       cg3hi: // global
           HpAlloc = 40;
           goto cg3hf;
       cg3hf: // global
           R5 = _sg1PZ::P64;
           R4 = _sg1PY::P64;
           R3 = _sg1PX::P64;
           R2 = _sg1PW::P64;
           R1 = Data.Functor.Sum.$w$cp1Data_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3hh: // global
           I64[Hp - 32] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 24] = _sg1PZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = block_cg3h4_info;
           R6 = 1;
           R5 = Data.Functor.Sum.$fDataSum7_closure+1;
           R4 = Data.Functor.Sum.$trModule_closure+1;
           R3 = 1236278515871186010;
           R2 = 6345190594862254730;
           P64[Sp - 48] = Data.Functor.Sum.$fDataSum6_closure+4;
           P64[Sp - 40] = Hp - 14;
           P64[Sp - 24] = _sg1PW::P64;
           P64[Sp - 16] = _sg1PX::P64;
           P64[Sp - 8] = _sg1PY::P64;
           Sp = Sp - 48;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cp1Data_info" {
     Data.Functor.Sum.$w$cp1Data_info:
         const Data.Functor.Sum.$w$cp1Data_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const Sg21L_srt+512;
 },
 _cg3h4() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg3h4: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cg3h5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg3h4_info" {
     block_cg3h4_info:
         const _cg3h4;
         const 3;
         const 4294967326;
         const Sg21L_srt+512;
 },
 _cg3h5() //  []
         { []
         }
     {offset
       cg3h5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg3hl; else goto cg3hk;
       cg3hl: // global
           HpAlloc = 48;
           I64[Sp] = block_cg3h5_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cg3hk: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 40] = block_cg3h9_info;
           R3 = P64[Sp + 56];
           R2 = Hp - 38;
           Sp = Sp + 40;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3h5_info" {
     block_cg3h5_info:
         const _cg3h5;
         const 1096;
         const 4294967326;
         const Sg21L_srt+512;
 },
 _cg3h9() //  [R1]
         { []
         }
     {offset
       cg3h9: // global
           I64[Sp] = block_cg3he_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3h9_info" {
     block_cg3h9_info:
         const _cg3h9;
         const 131;
         const 4294967326;
         const Sg21L_srt+512;
 },
 _cg3he() //  [R1]
         { []
         }
     {offset
       cg3he: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3he_info" {
     block_cg3he_info:
         const _cg3he;
         const 387;
         const 4294967326;
         const Sg21L_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.538557655 UTC

[section ""data" . Data.Functor.Sum.$fDataSum5_closure" {
     Data.Functor.Sum.$fDataSum5_closure:
         const Data.Functor.Sum.$fDataSum5_info;
         const 0;
 },
 Data.Functor.Sum.$fDataSum5_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cg3i5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Sum.$w$cp1Data_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum5_info" {
     Data.Functor.Sum.$fDataSum5_info:
         const Data.Functor.Sum.$fDataSum5_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const Sg21L_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.542781073 UTC

[section ""data" . Data.Functor.Sum.$fDataSum2_closure" {
     Data.Functor.Sum.$fDataSum2_closure:
         const (,)_con_info;
         const Data.Functor.Sum.InL_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.544550904 UTC

[section ""data" . Data.Functor.Sum.$fDataSum1_closure" {
     Data.Functor.Sum.$fDataSum1_closure:
         const (,)_con_info;
         const Data.Functor.Sum.InR_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.55505531 UTC

[section ""data" . Data.Functor.Sum.$w$cgmapMp_closure" {
     Data.Functor.Sum.$w$cgmapMp_closure:
         const Data.Functor.Sum.$w$cgmapMp_info;
 },
 lvl8_sg1Qm_entry() //  [R1]
         { []
         }
     {offset
       cg3im: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3in; else goto cg3io;
       cg3in: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3io: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sg1Qm_info" {
     lvl8_sg1Qm_info:
         const lvl8_sg1Qm_entry;
         const 1;
         const 16;
 },
 sat_sg1QR_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3iB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3iC; else goto cg3iD;
       cg3iC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3iD: // global
           I64[Sp - 24] = block_cg3iy_info;
           _sg1Qm::P64 = P64[R1 + 7];
           _sg1Qn::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sg1Qm::P64;
           P64[Sp - 8] = _sg1Qn::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug3iV; else goto cg3iz;
       ug3iV: // global
           call _cg3iy(R1) args: 0, res: 0, upd: 0;
       cg3iz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1QR_info" {
     sat_sg1QR_info:
         const sat_sg1QR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cg3iy() //  [R1]
         { []
         }
     {offset
       cg3iy: // global
           I64[Sp - 8] = block_cg3iG_info;
           _sg1QO::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sg1QO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3iU; else goto cg3iI;
       ug3iU: // global
           call _cg3iG(R1) args: 0, res: 0, upd: 0;
       cg3iI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3iy_info" {
     block_cg3iy_info:
         const _cg3iy;
         const 2;
         const 30;
 },
 _cg3iG() //  [R1]
         { []
         }
     {offset
       cg3iG: // global
           if (R1 & 7 == 1) goto cg3iO; else goto cg3iS;
       cg3iO: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg3iS: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3iG_info" {
     block_cg3iG_info:
         const _cg3iG;
         const 3;
         const 30;
 },
 sat_sg1QE_entry() //  [R1]
         { []
         }
     {offset
       cg3jm: // global
           _sg1QE::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cg3jn; else goto cg3jo;
       cg3jo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg3jq; else goto cg3jp;
       cg3jq: // global
           HpAlloc = 56;
           goto cg3jn;
       cg3jn: // global
           R1 = _sg1QE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3jp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1QE::P64;
           _sg1Qn::P64 = P64[_sg1QE::P64 + 16];
           _sg1Qr::P64 = P64[_sg1QE::P64 + 24];
           _sg1Qv::P64 = P64[_sg1QE::P64 + 32];
           _sg1Qw::P64 = P64[_sg1QE::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg1Qv::P64;
           P64[Hp - 24] = _sg1Qr::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sg1Qw::P64;
           R2 = _sg1Qn::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1QE_info" {
     sat_sg1QE_info:
         const sat_sg1QE_entry;
         const 4;
         const 15;
 },
 sat_sg1QA_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3jC: // global
           _sg1Qx::P64 = R2;
           _sg1QA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg3jD; else goto cg3jE;
       cg3jE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg3jG; else goto cg3jF;
       cg3jG: // global
           HpAlloc = 56;
           goto cg3jD;
       cg3jD: // global
           R2 = _sg1Qx::P64;
           R1 = _sg1QA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3jF: // global
           _sg1Qn::P64 = P64[_sg1QA::P64 + 7];
           _sg1Qv::P64 = P64[_sg1QA::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg1Qv::P64;
           P64[Hp - 24] = _sg1Qx::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sg1Qn::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1QA_info" {
     sat_sg1QA_info:
         const sat_sg1QA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg1QB_entry() //  [R1]
         { []
         }
     {offset
       cg3jH: // global
           _sg1QB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg3jI; else goto cg3jJ;
       cg3jJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg3jL; else goto cg3jK;
       cg3jL: // global
           HpAlloc = 24;
           goto cg3jI;
       cg3jI: // global
           R1 = _sg1QB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3jK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1QB::P64;
           _sg1Qn::P64 = P64[_sg1QB::P64 + 16];
           _sg1Qs::P64 = P64[_sg1QB::P64 + 24];
           _sg1Qv::P64 = P64[_sg1QB::P64 + 32];
           I64[Hp - 16] = sat_sg1QA_info;
           P64[Hp - 8] = _sg1Qn::P64;
           P64[Hp] = _sg1Qv::P64;
           R2 = _sg1Qn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg1Qs::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1QB_info" {
     sat_sg1QB_info:
         const sat_sg1QB_entry;
         const 3;
         const 15;
 },
 sat_sg1QF_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3jM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg3jN; else goto cg3jO;
       cg3jN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3jO: // global
           I64[Sp - 40] = block_cg3jb_info;
           _sg1Qj::P64 = P64[R1 + 7];
           _sg1Qn::P64 = P64[R1 + 15];
           _sg1Qr::P64 = P64[R1 + 23];
           _sg1Qs::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg1Qj::P64;
           P64[Sp - 24] = _sg1Qn::P64;
           P64[Sp - 16] = _sg1Qr::P64;
           P64[Sp - 8] = _sg1Qs::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug3jS; else goto cg3jc;
       ug3jS: // global
           call _cg3jb(R1) args: 0, res: 0, upd: 0;
       cg3jc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1QF_info" {
     sat_sg1QF_info:
         const sat_sg1QF_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cg3jb() //  [R1]
         { []
         }
     {offset
       cg3jb: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg3jR; else goto cg3jQ;
       cg3jR: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3jQ: // global
           _sg1Qv::P64 = P64[R1 + 7];
           _sg1Qw::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sg1QE_info;
           _sg1Qn::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sg1Qn::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sg1Qv::P64;
           P64[Hp - 40] = _sg1Qw::P64;
           I64[Hp - 32] = sat_sg1QB_info;
           P64[Hp - 16] = _sg1Qn::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sg1Qv::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3jb_info" {
     block_cg3jb_info:
         const _cg3jb;
         const 4;
         const 30;
 },
 k1_sg1Qo_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3jT: // global
           _sg1Qr::P64 = R4;
           _sg1Qq::P64 = R3;
           _sg1Qp::P64 = R2;
           _sg1Qo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg3jU; else goto cg3jV;
       cg3jV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg3jX; else goto cg3jW;
       cg3jX: // global
           HpAlloc = 80;
           goto cg3jU;
       cg3jU: // global
           R4 = _sg1Qr::P64;
           R3 = _sg1Qq::P64;
           R2 = _sg1Qp::P64;
           R1 = _sg1Qo::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3jW: // global
           _sg1Qj::P64 = P64[_sg1Qo::P64 + 5];
           _sg1Qk::P64 = P64[_sg1Qo::P64 + 13];
           _sg1Qn::P64 = P64[_sg1Qo::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sg1Qk::P64;
           P64[Hp - 48] = _sg1Qp::P64;
           P64[Hp - 40] = _sg1Qr::P64;
           I64[Hp - 32] = sat_sg1QF_info;
           P64[Hp - 24] = _sg1Qj::P64;
           P64[Hp - 16] = _sg1Qn::P64;
           P64[Hp - 8] = _sg1Qr::P64;
           P64[Hp] = Hp - 72;
           R2 = _sg1Qn::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg1Qq::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sg1Qo_info" {
     k1_sg1Qo_info:
         const k1_sg1Qo_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sg1QI_entry() //  [R1]
         { []
         }
     {offset
       cg3k7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3k8; else goto cg3k9;
       cg3k8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3k9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1QI_info" {
     sat_sg1QI_info:
         const sat_sg1QI_entry;
         const 1;
         const 16;
 },
 sat_sg1QK_entry() //  [R1]
         { []
         }
     {offset
       cg3kg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3kh; else goto cg3ki;
       cg3kh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3ki: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1QK_info" {
     sat_sg1QK_info:
         const sat_sg1QK_entry;
         const 1;
         const 16;
 },
 sat_sg1QL_entry() //  [R1]
         { []
         }
     {offset
       cg3kn: // global
           _sg1QL::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cg3ko; else goto cg3kp;
       cg3kp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg3kr; else goto cg3kq;
       cg3kr: // global
           HpAlloc = 32;
           goto cg3ko;
       cg3ko: // global
           R1 = _sg1QL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3kq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1QL::P64;
           _sg1Qh::P64 = P64[_sg1QL::P64 + 16];
           _sg1Qi::P64 = P64[_sg1QL::P64 + 24];
           _sg1Qj::P64 = P64[_sg1QL::P64 + 32];
           _sg1Qk::P64 = P64[_sg1QL::P64 + 40];
           _sg1Ql::P64 = P64[_sg1QL::P64 + 48];
           _sg1Qn::P64 = P64[_sg1QL::P64 + 56];
           I64[Hp - 24] = k1_sg1Qo_info;
           P64[Hp - 16] = _sg1Qj::P64;
           P64[Hp - 8] = _sg1Qk::P64;
           P64[Hp] = _sg1Qn::P64;
           I64[Sp - 56] = block_cg3jY_info;
           R1 = _sg1Ql::P64;
           P64[Sp - 48] = Hp - 21;
           P64[Sp - 40] = _sg1Qh::P64;
           P64[Sp - 32] = _sg1Qi::P64;
           P64[Sp - 24] = _sg1Qn::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ug3ky; else goto cg3jZ;
       ug3ky: // global
           call _cg3jY(R1) args: 0, res: 0, upd: 0;
       cg3jZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1QL_info" {
     sat_sg1QL_info:
         const sat_sg1QL_entry;
         const 6;
         const 15;
 },
 _cg3jY() //  [R1]
         { []
         }
     {offset
       cg3jY: // global
           _cg3j0::P64 = P64[Sp + 8];
           _sg1Qn::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg3kk; else goto cg3kl;
       cg3kk: // global
           Hp = Hp + 24;
           _sg1QG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3kx; else goto cg3kt;
       cg3kt: // global
           _sg1QH::P64 = P64[_sg1QG::P64 + 7];
           I64[Hp - 16] = sat_sg1QI_info;
           P64[Hp] = _sg1Qn::P64;
           R4 = _sg1QH::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _cg3j0::P64;
           Sp = Sp + 40;
           call k1_sg1Qo_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
       cg3kl: // global
           Hp = Hp + 24;
           _sg1QG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3kx; else goto cg3kw;
       cg3kx: // global
           HpAlloc = 24;
           R1 = _sg1QG::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg3kw: // global
           _sg1QJ::P64 = P64[_sg1QG::P64 + 6];
           I64[Hp - 16] = sat_sg1QK_info;
           P64[Hp] = _sg1Qn::P64;
           R4 = _sg1QJ::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 24];
           R1 = _cg3j0::P64;
           Sp = Sp + 40;
           call k1_sg1Qo_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg3jY_info" {
     block_cg3jY_info:
         const _cg3jY;
         const 4;
         const 30;
 },
 Data.Functor.Sum.$w$cgmapMp_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg3kz: // global
           _sg1Ql::P64 = R6;
           _sg1Qk::P64 = R5;
           _sg1Qj::P64 = R4;
           _sg1Qi::P64 = R3;
           _sg1Qh::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg3kA; else goto cg3kB;
       cg3kB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg3kD; else goto cg3kC;
       cg3kD: // global
           HpAlloc = 24;
           goto cg3kA;
       cg3kA: // global
           R6 = _sg1Ql::P64;
           R5 = _sg1Qk::P64;
           R4 = _sg1Qj::P64;
           R3 = _sg1Qi::P64;
           R2 = _sg1Qh::P64;
           R1 = Data.Functor.Sum.$w$cgmapMp_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3kC: // global
           I64[Hp - 16] = lvl8_sg1Qm_info;
           P64[Hp] = _sg1Qj::P64;
           I64[Sp - 56] = block_cg3ip_info;
           R2 = _sg1Qj::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sg1Qh::P64;
           P64[Sp - 32] = _sg1Qi::P64;
           P64[Sp - 24] = _sg1Qj::P64;
           P64[Sp - 16] = _sg1Qk::P64;
           P64[Sp - 8] = _sg1Ql::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgmapMp_info" {
     Data.Functor.Sum.$w$cgmapMp_info:
         const Data.Functor.Sum.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg3ip() //  [R1]
         { []
         }
     {offset
       cg3ip: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg3kG; else goto cg3kF;
       cg3kG: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3kF: // global
           I64[Hp - 80] = sat_sg1QR_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sg1QL_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3ip_info" {
     block_cg3ip_info:
         const _cg3ip;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.590681617 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapMp_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapMp_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapMp_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapMp_slow() //  [R1]
         { []
         }
     {offset
       cg3mN: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapMp_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapMp_entry() //  [R6]
         { []
         }
     {offset
       cg3mR: // global
           _sg1QW::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sg1QW::P64;
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgmapMp_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapMp_info" {
     Data.Functor.Sum.$fDataSum_$cgmapMp_info:
         const Data.Functor.Sum.$fDataSum_$cgmapMp_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapMp_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.599063563 UTC

[section ""data" . Data.Functor.Sum.$w$cgmapM_closure" {
     Data.Functor.Sum.$w$cgmapM_closure:
         const Data.Functor.Sum.$w$cgmapM_info;
 },
 sat_sg1Re_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3nl: // global
           _sg1Rc::P64 = R2;
           _sg1Re::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg3nm; else goto cg3nn;
       cg3nn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg3np; else goto cg3no;
       cg3np: // global
           HpAlloc = 32;
           goto cg3nm;
       cg3nm: // global
           R2 = _sg1Rc::P64;
           R1 = _sg1Re::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3no: // global
           _sg1R3::P64 = P64[_sg1Re::P64 + 7];
           _sg1Rb::P64 = P64[_sg1Re::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sg1Rb::P64;
           P64[Hp] = _sg1Rc::P64;
           R2 = _sg1R3::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Re_info" {
     sat_sg1Re_info:
         const sat_sg1Re_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg1Rf_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3nq: // global
           _sg1Rb::P64 = R2;
           _sg1Rf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg3nr; else goto cg3ns;
       cg3ns: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg3nu; else goto cg3nt;
       cg3nu: // global
           HpAlloc = 24;
           goto cg3nr;
       cg3nr: // global
           R2 = _sg1Rb::P64;
           R1 = _sg1Rf::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3nt: // global
           _sg1R3::P64 = P64[_sg1Rf::P64 + 7];
           _sg1Ra::P64 = P64[_sg1Rf::P64 + 15];
           I64[Hp - 16] = sat_sg1Re_info;
           P64[Hp - 8] = _sg1R3::P64;
           P64[Hp] = _sg1Rb::P64;
           R2 = _sg1R3::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg1Ra::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Rf_info" {
     sat_sg1Rf_info:
         const sat_sg1Rf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k1_sg1R6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3nv: // global
           _sg1R9::P64 = R4;
           _sg1R8::P64 = R3;
           _sg1R7::P64 = R2;
           _sg1R6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg3nw; else goto cg3nx;
       cg3nx: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg3nz; else goto cg3ny;
       cg3nz: // global
           HpAlloc = 64;
           goto cg3nw;
       cg3nw: // global
           R4 = _sg1R9::P64;
           R3 = _sg1R8::P64;
           R2 = _sg1R7::P64;
           R1 = _sg1R6::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3ny: // global
           _sg1R3::P64 = P64[_sg1R6::P64 + 5];
           _sg1R4::P64 = P64[_sg1R6::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sg1R4::P64;
           P64[Hp - 32] = _sg1R7::P64;
           P64[Hp - 24] = _sg1R9::P64;
           I64[Hp - 16] = sat_sg1Rf_info;
           P64[Hp - 8] = _sg1R3::P64;
           P64[Hp] = Hp - 56;
           R2 = _sg1R3::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg1R8::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sg1R6_info" {
     k1_sg1R6_info:
         const k1_sg1R6_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1Ri_entry() //  [R1]
         { []
         }
     {offset
       cg3nJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3nK; else goto cg3nL;
       cg3nK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3nL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.InL_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Ri_info" {
     sat_sg1Ri_info:
         const sat_sg1Ri_entry;
         const 1;
         const 16;
 },
 sat_sg1Rk_entry() //  [R1]
         { []
         }
     {offset
       cg3nS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3nT; else goto cg3nU;
       cg3nT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3nU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.InR_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Rk_info" {
     sat_sg1Rk_info:
         const sat_sg1Rk_entry;
         const 1;
         const 16;
 },
 Data.Functor.Sum.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg3nZ: // global
           _sg1R5::P64 = R6;
           _sg1R4::P64 = R5;
           _sg1R3::P64 = R4;
           _sg1R2::P64 = R3;
           _sg1R1::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cg3o0; else goto cg3o1;
       cg3o1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg3o3; else goto cg3o2;
       cg3o3: // global
           HpAlloc = 24;
           goto cg3o0;
       cg3o0: // global
           R6 = _sg1R5::P64;
           R5 = _sg1R4::P64;
           R4 = _sg1R3::P64;
           R3 = _sg1R2::P64;
           R2 = _sg1R1::P64;
           R1 = Data.Functor.Sum.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3o2: // global
           I64[Hp - 16] = k1_sg1R6_info;
           P64[Hp - 8] = _sg1R3::P64;
           P64[Hp] = _sg1R4::P64;
           I64[Sp - 40] = block_cg3nA_info;
           R1 = _sg1R5::P64;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = _sg1R1::P64;
           P64[Sp - 16] = _sg1R2::P64;
           P64[Sp - 8] = _sg1R3::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug3oa; else goto cg3nB;
       ug3oa: // global
           call _cg3nA(R1) args: 0, res: 0, upd: 0;
       cg3nB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgmapM_info" {
     Data.Functor.Sum.$w$cgmapM_info:
         const Data.Functor.Sum.$w$cgmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg3nA() //  [R1]
         { []
         }
     {offset
       cg3nA: // global
           _cg3n4::P64 = P64[Sp + 8];
           _sg1R3::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg3nW; else goto cg3nX;
       cg3nW: // global
           Hp = Hp + 24;
           _sg1Rg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3o9; else goto cg3o5;
       cg3o5: // global
           _sg1Rh::P64 = P64[_sg1Rg::P64 + 7];
           I64[Hp - 16] = sat_sg1Ri_info;
           P64[Hp] = _sg1R3::P64;
           R4 = _sg1Rh::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _cg3n4::P64;
           Sp = Sp + 40;
           call k1_sg1R6_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3nX: // global
           Hp = Hp + 24;
           _sg1Rg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3o9; else goto cg3o8;
       cg3o9: // global
           HpAlloc = 24;
           R1 = _sg1Rg::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3o8: // global
           _sg1Rj::P64 = P64[_sg1Rg::P64 + 6];
           I64[Hp - 16] = sat_sg1Rk_info;
           P64[Hp] = _sg1R3::P64;
           R4 = _sg1Rj::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 24];
           R1 = _cg3n4::P64;
           Sp = Sp + 40;
           call k1_sg1R6_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3nA_info" {
     block_cg3nA_info:
         const _cg3nA;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.616013387 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapM_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapM_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapM_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapM_slow() //  [R1]
         { []
         }
     {offset
       cg3p3: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapM_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapM_entry() //  [R6]
         { []
         }
     {offset
       cg3p7: // global
           _sg1Rp::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sg1Rp::P64;
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgmapM_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapM_info" {
     Data.Functor.Sum.$fDataSum_$cgmapM_info:
         const Data.Functor.Sum.$fDataSum_$cgmapM_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapM_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.623032188 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapQi_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapQi_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapQi_info;
         const 0;
 },
 Data.Functor.Sum.$fDataSum_$cgmapQi_slow() //  [R1]
         { []
         }
     {offset
       cg3ph: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQi_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapQi_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg3ps: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3pt; else goto cg3pu;
       cg3pt: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgmapQi_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cg3pu: // global
           I64[Sp - 8] = block_cg3pl_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3pZ; else goto cg3pm;
       ug3pZ: // global
           call _cg3pl(R1) args: 0, res: 0, upd: 0;
       cg3pm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapQi_info" {
     Data.Functor.Sum.$fDataSum_$cgmapQi_info:
         const Data.Functor.Sum.$fDataSum_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const Sg21L_srt+536;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapQi_slow;
 },
 _cg3pl() //  [R1]
         { []
         }
     {offset
       cg3pl: // global
           _sg1RA::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg3pp; else goto cg3pq;
       cg3pp: // global
           I64[Sp + 8] = block_cg3px_info;
           _sg1RE::P64 = P64[R1 + 7];
           R1 = _sg1RA::P64;
           P64[Sp + 16] = _sg1RE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ug3pX; else goto cg3pz;
       ug3pX: // global
           call _cg3px(R1) args: 0, res: 0, upd: 0;
       cg3pz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cg3pq: // global
           I64[Sp] = block_cg3pK_info;
           _sg1RI::P64 = P64[R1 + 6];
           R1 = _sg1RA::P64;
           P64[Sp + 32] = _sg1RI::P64;
           if (R1 & 7 != 0) goto ug3pY; else goto cg3pM;
       ug3pY: // global
           call _cg3pK(R1) args: 0, res: 0, upd: 0;
       cg3pM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3pl_info" {
     block_cg3pl_info:
         const _cg3pl;
         const 4;
         const 4294967326;
         const Sg21L_srt+536;
 },
 _cg3px() //  [R1]
         { []
         }
     {offset
       cg3px: // global
           if (I64[R1 + 7] == 0) goto cg3pH; else goto ug3pW;
       cg3pH: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug3pW: // global
           Sp = Sp + 32;
           call _cg3pT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg3px_info" {
     block_cg3px_info:
         const _cg3px;
         const 3;
         const 4294967326;
         const Sg21L_srt+536;
 },
 _cg3pK() //  [R1]
         { []
         }
     {offset
       cg3pK: // global
           if (I64[R1 + 7] == 0) goto cg3pU; else goto ug3pV;
       cg3pU: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       ug3pV: // global
           Sp = Sp + 40;
           call _cg3pT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg3pK_info" {
     block_cg3pK_info:
         const _cg3pK;
         const 132;
         const 4294967326;
         const Sg21L_srt+536;
 },
 _cg3pT() //  []
         { []
         }
     {offset
       cg3pT: // global
           R1 = Data.Maybe.fromJust1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.636508864 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapQr_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapQr_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapQr_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapQr_slow() //  [R1]
         { []
         }
     {offset
       cg3qt: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapQr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg3qE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3qF; else goto cg3qG;
       cg3qF: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgmapQr_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cg3qG: // global
           I64[Sp - 8] = block_cg3qx_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3qT; else goto cg3qy;
       ug3qT: // global
           call _cg3qx(R1) args: 0, res: 0, upd: 0;
       cg3qy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapQr_info" {
     Data.Functor.Sum.$fDataSum_$cgmapQr_info:
         const Data.Functor.Sum.$fDataSum_$cgmapQr_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Sum.$fDataSum_$cgmapQr_slow;
 },
 _cg3qx() //  [R1]
         { []
         }
     {offset
       cg3qx: // global
           _sg1RS::P64 = P64[Sp + 16];
           _sg1RT::P64 = P64[Sp + 24];
           _sg1RU::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg3qB; else goto cg3qC;
       cg3qB: // global
           Hp = Hp + 40;
           _sg1RW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3qS; else goto cg3qL;
       cg3qL: // global
           _sg1RX::P64 = P64[_sg1RW::P64 + 7];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sg1RU::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sg1RX::P64;
           R3 = _sg1RT::P64;
           R2 = Hp - 32;
           R1 = _sg1RS::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3qC: // global
           Hp = Hp + 40;
           _sg1RW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3qS; else goto cg3qR;
       cg3qS: // global
           HpAlloc = 40;
           R1 = _sg1RW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3qR: // global
           _sg1RZ::P64 = P64[_sg1RW::P64 + 6];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sg1RU::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sg1RZ::P64;
           R3 = _sg1RT::P64;
           R2 = Hp - 32;
           R1 = _sg1RS::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3qx_info" {
     block_cg3qx_info:
         const _cg3qx;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.644995664 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapQ_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapQ_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapQ_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapQ_slow() //  [R1]
         { []
         }
     {offset
       cg3rd: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQ_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 32, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapQ_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg3ro: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3rp; else goto cg3rq;
       cg3rp: // global
           R1 = Data.Functor.Sum.$fDataSum_$cgmapQ_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cg3rq: // global
           I64[Sp - 8] = block_cg3rh_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3rF; else goto cg3ri;
       ug3rF: // global
           call _cg3rh(R1) args: 0, res: 0, upd: 0;
       cg3ri: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapQ_info" {
     Data.Functor.Sum.$fDataSum_$cgmapQ_info:
         const Data.Functor.Sum.$fDataSum_$cgmapQ_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const Data.Functor.Sum.$fDataSum_$cgmapQ_slow;
 },
 _cg3rh() //  [R1]
         { []
         }
     {offset
       cg3rh: // global
           _sg1S7::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg3rl; else goto cg3rm;
       cg3rl: // global
           Hp = Hp + 64;
           _sg1S9::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3rE; else goto cg3rw;
       cg3rw: // global
           _sg1Sa::P64 = P64[_sg1S9::P64 + 7];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sg1S7::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _sg1Sa::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg3rm: // global
           Hp = Hp + 64;
           _sg1S9::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3rE; else goto cg3rD;
       cg3rE: // global
           HpAlloc = 64;
           R1 = _sg1S9::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3rD: // global
           _sg1Sc::P64 = P64[_sg1S9::P64 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sg1S7::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sg1Sc::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3rh_info" {
     block_cg3rh_info:
         const _cg3rh;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.653944498 UTC

[section ""data" . Data.Functor.Sum.$fDataSum3_closure" {
     Data.Functor.Sum.$fDataSum3_closure:
         const Data.Functor.Sum.$fDataSum3_info;
 },
 Data.Functor.Sum.$fDataSum3_slow() //  [R1]
         { []
         }
     {offset
       cg3s9: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum3_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 48, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg3sk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3sl; else goto cg3sm;
       cg3sl: // global
           R1 = Data.Functor.Sum.$fDataSum3_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cg3sm: // global
           I64[Sp - 8] = block_cg3sd_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3sz; else goto cg3se;
       ug3sz: // global
           call _cg3sd(R1) args: 0, res: 0, upd: 0;
       cg3se: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum3_info" {
     Data.Functor.Sum.$fDataSum3_info:
         const Data.Functor.Sum.$fDataSum3_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Sum.$fDataSum3_slow;
 },
 _cg3sd() //  [R1]
         { []
         }
     {offset
       cg3sd: // global
           _sg1Sk::P64 = P64[Sp + 16];
           _sg1Sl::P64 = P64[Sp + 24];
           _sg1Sm::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg3sh; else goto cg3si;
       cg3sh: // global
           Hp = Hp + 40;
           _sg1So::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3sy; else goto cg3sr;
       cg3sr: // global
           _sg1Sp::P64 = P64[_sg1So::P64 + 7];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sg1Sm::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sg1Sp::P64;
           R3 = Hp - 32;
           R2 = _sg1Sl::P64;
           R1 = _sg1Sk::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3si: // global
           Hp = Hp + 40;
           _sg1So::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3sy; else goto cg3sx;
       cg3sy: // global
           HpAlloc = 40;
           R1 = _sg1So::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3sx: // global
           _sg1Sr::P64 = P64[_sg1So::P64 + 6];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sg1Sm::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sg1Sr::P64;
           R3 = Hp - 32;
           R2 = _sg1Sl::P64;
           R1 = _sg1Sk::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3sd_info" {
     block_cg3sd_info:
         const _cg3sd;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.662379394 UTC

[section ""data" . Data.Functor.Sum.$fDataSum4_closure" {
     Data.Functor.Sum.$fDataSum4_closure:
         const Data.Functor.Sum.$fDataSum4_info;
 },
 Data.Functor.Sum.$fDataSum4_slow() //  [R1]
         { []
         }
     {offset
       cg3sT: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum4_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg3t4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3t5; else goto cg3t6;
       cg3t5: // global
           R1 = Data.Functor.Sum.$fDataSum4_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cg3t6: // global
           I64[Sp - 8] = block_cg3sX_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3tl; else goto cg3sY;
       ug3tl: // global
           call _cg3sX(R1) args: 0, res: 0, upd: 0;
       cg3sY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum4_info" {
     Data.Functor.Sum.$fDataSum4_info:
         const Data.Functor.Sum.$fDataSum4_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const Data.Functor.Sum.$fDataSum4_slow;
 },
 _cg3sX() //  [R1]
         { []
         }
     {offset
       cg3sX: // global
           _sg1Sz::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg3t1; else goto cg3t2;
       cg3t1: // global
           Hp = Hp + 56;
           _sg1SB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3tk; else goto cg3tc;
       cg3tc: // global
           _sg1SC::P64 = P64[_sg1SB::P64 + 7];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _sg1Sz::P64;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _sg1SC::P64;
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg3t2: // global
           Hp = Hp + 56;
           _sg1SB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3tk; else goto cg3tj;
       cg3tk: // global
           HpAlloc = 56;
           R1 = _sg1SB::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3tj: // global
           _sg1SE::P64 = P64[_sg1SB::P64 + 6];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _sg1Sz::P64;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sg1SE::P64;
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3sX_info" {
     block_cg3sX_info:
         const _cg3sX;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.678769444 UTC

[section ""data" . Data.Functor.Sum.$w$cgmapMo_closure" {
     Data.Functor.Sum.$w$cgmapMo_closure:
         const Data.Functor.Sum.$w$cgmapMo_info;
 },
 lvl8_sg1SL_entry() //  [R1]
         { []
         }
     {offset
       cg3tS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3tT; else goto cg3tU;
       cg3tT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3tU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sg1SL_info" {
     lvl8_sg1SL_info:
         const lvl8_sg1SL_entry;
         const 1;
         const 16;
 },
 sat_sg1Tj_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3u7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3u8; else goto cg3u9;
       cg3u8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3u9: // global
           I64[Sp - 24] = block_cg3u4_info;
           _sg1SL::P64 = P64[R1 + 7];
           _sg1SM::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sg1SL::P64;
           P64[Sp - 8] = _sg1SM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug3ur; else goto cg3u5;
       ug3ur: // global
           call _cg3u4(R1) args: 0, res: 0, upd: 0;
       cg3u5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1Tj_info" {
     sat_sg1Tj_info:
         const sat_sg1Tj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cg3u4() //  [R1]
         { []
         }
     {offset
       cg3u4: // global
           I64[Sp - 8] = block_cg3uc_info;
           _sg1Tg::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sg1Tg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3uq; else goto cg3ue;
       ug3uq: // global
           call _cg3uc(R1) args: 0, res: 0, upd: 0;
       cg3ue: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3u4_info" {
     block_cg3u4_info:
         const _cg3u4;
         const 2;
         const 30;
 },
 _cg3uc() //  [R1]
         { []
         }
     {offset
       cg3uc: // global
           if (R1 & 7 == 1) goto cg3uk; else goto cg3uo;
       cg3uk: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg3uo: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3uc_info" {
     block_cg3uc_info:
         const _cg3uc;
         const 3;
         const 30;
 },
 sat_sg1T4_entry() //  [R1]
         { []
         }
     {offset
       cg3uX: // global
           _sg1T4::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cg3uY; else goto cg3uZ;
       cg3uZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg3v1; else goto cg3v0;
       cg3v1: // global
           HpAlloc = 56;
           goto cg3uY;
       cg3uY: // global
           R1 = _sg1T4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3v0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1T4::P64;
           _sg1SM::P64 = P64[_sg1T4::P64 + 16];
           _sg1SQ::P64 = P64[_sg1T4::P64 + 24];
           _sg1SU::P64 = P64[_sg1T4::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg1SU::P64;
           P64[Hp - 24] = _sg1SQ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sg1SM::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1T4_info" {
     sat_sg1T4_info:
         const sat_sg1T4_entry;
         const 3;
         const 15;
 },
 sat_sg1T0_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3vd: // global
           _sg1SX::P64 = R2;
           _sg1T0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg3ve; else goto cg3vf;
       cg3vf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg3vh; else goto cg3vg;
       cg3vh: // global
           HpAlloc = 56;
           goto cg3ve;
       cg3ve: // global
           R2 = _sg1SX::P64;
           R1 = _sg1T0::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3vg: // global
           _sg1SM::P64 = P64[_sg1T0::P64 + 7];
           _sg1SU::P64 = P64[_sg1T0::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg1SU::P64;
           P64[Hp - 24] = _sg1SX::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sg1SM::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1T0_info" {
     sat_sg1T0_info:
         const sat_sg1T0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg1T1_entry() //  [R1]
         { []
         }
     {offset
       cg3vi: // global
           _sg1T1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg3vj; else goto cg3vk;
       cg3vk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg3vm; else goto cg3vl;
       cg3vm: // global
           HpAlloc = 24;
           goto cg3vj;
       cg3vj: // global
           R1 = _sg1T1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3vl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1T1::P64;
           _sg1SM::P64 = P64[_sg1T1::P64 + 16];
           _sg1SR::P64 = P64[_sg1T1::P64 + 24];
           _sg1SU::P64 = P64[_sg1T1::P64 + 32];
           I64[Hp - 16] = sat_sg1T0_info;
           P64[Hp - 8] = _sg1SM::P64;
           P64[Hp] = _sg1SU::P64;
           R2 = _sg1SM::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg1SR::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1T1_info" {
     sat_sg1T1_info:
         const sat_sg1T1_entry;
         const 3;
         const 15;
 },
 sat_sg1T7_entry() //  [R1, R2]
         { []
         }
     {offset
       cg3vn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg3vo; else goto cg3vp;
       cg3vo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3vp: // global
           I64[Sp - 40] = block_cg3uH_info;
           _sg1SI::P64 = P64[R1 + 7];
           _sg1SM::P64 = P64[R1 + 15];
           _sg1SQ::P64 = P64[R1 + 23];
           _sg1SR::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg1SI::P64;
           P64[Sp - 24] = _sg1SM::P64;
           P64[Sp - 16] = _sg1SQ::P64;
           P64[Sp - 8] = _sg1SR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug3vG; else goto cg3uI;
       ug3vG: // global
           call _cg3uH(R1) args: 0, res: 0, upd: 0;
       cg3uI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1T7_info" {
     sat_sg1T7_info:
         const sat_sg1T7_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cg3uH() //  [R1]
         { []
         }
     {offset
       cg3uH: // global
           I64[Sp - 8] = block_cg3uM_info;
           _sg1SU::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sg1SU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3vF; else goto cg3uN;
       ug3vF: // global
           call _cg3uM(R1) args: 0, res: 0, upd: 0;
       cg3uN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3uH_info" {
     block_cg3uH_info:
         const _cg3uH;
         const 4;
         const 30;
 },
 _cg3uM() //  [R1]
         { []
         }
     {offset
       cg3uM: // global
           _sg1SM::P64 = P64[Sp + 24];
           _sg1SQ::P64 = P64[Sp + 32];
           _sg1SU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cg3vs; else goto cg3vw;
       cg3vs: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg3vv; else goto cg3vu;
       cg3vv: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3vu: // global
           I64[Hp - 72] = sat_sg1T4_info;
           P64[Hp - 56] = _sg1SM::P64;
           P64[Hp - 48] = _sg1SQ::P64;
           P64[Hp - 40] = _sg1SU::P64;
           I64[Hp - 32] = sat_sg1T1_info;
           P64[Hp - 16] = _sg1SM::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sg1SU::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cg3vw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg3vB; else goto cg3vA;
       cg3vB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3vA: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg1SU::P64;
           P64[Hp - 24] = _sg1SQ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sg1SM::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3uM_info" {
     block_cg3uM_info:
         const _cg3uM;
         const 5;
         const 30;
 },
 k1_sg1SN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3vH: // global
           _sg1SQ::P64 = R4;
           _sg1SP::P64 = R3;
           _sg1SO::P64 = R2;
           _sg1SN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cg3vI; else goto cg3vJ;
       cg3vJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg3vL; else goto cg3vK;
       cg3vL: // global
           HpAlloc = 80;
           goto cg3vI;
       cg3vI: // global
           R4 = _sg1SQ::P64;
           R3 = _sg1SP::P64;
           R2 = _sg1SO::P64;
           R1 = _sg1SN::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3vK: // global
           _sg1SI::P64 = P64[_sg1SN::P64 + 5];
           _sg1SJ::P64 = P64[_sg1SN::P64 + 13];
           _sg1SM::P64 = P64[_sg1SN::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sg1SJ::P64;
           P64[Hp - 48] = _sg1SO::P64;
           P64[Hp - 40] = _sg1SQ::P64;
           I64[Hp - 32] = sat_sg1T7_info;
           P64[Hp - 24] = _sg1SI::P64;
           P64[Hp - 16] = _sg1SM::P64;
           P64[Hp - 8] = _sg1SQ::P64;
           P64[Hp] = Hp - 72;
           R2 = _sg1SM::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg1SP::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sg1SN_info" {
     k1_sg1SN_info:
         const k1_sg1SN_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sg1Ta_entry() //  [R1]
         { []
         }
     {offset
       cg3vV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3vW; else goto cg3vX;
       cg3vW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3vX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Ta_info" {
     sat_sg1Ta_info:
         const sat_sg1Ta_entry;
         const 1;
         const 16;
 },
 sat_sg1Tc_entry() //  [R1]
         { []
         }
     {offset
       cg3w4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3w5; else goto cg3w6;
       cg3w5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3w6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Sum.$fDataSum1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Tc_info" {
     sat_sg1Tc_info:
         const sat_sg1Tc_entry;
         const 1;
         const 16;
 },
 sat_sg1Td_entry() //  [R1]
         { []
         }
     {offset
       cg3wb: // global
           _sg1Td::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cg3wc; else goto cg3wd;
       cg3wd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg3wf; else goto cg3we;
       cg3wf: // global
           HpAlloc = 32;
           goto cg3wc;
       cg3wc: // global
           R1 = _sg1Td::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3we: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg1Td::P64;
           _sg1SG::P64 = P64[_sg1Td::P64 + 16];
           _sg1SH::P64 = P64[_sg1Td::P64 + 24];
           _sg1SI::P64 = P64[_sg1Td::P64 + 32];
           _sg1SJ::P64 = P64[_sg1Td::P64 + 40];
           _sg1SK::P64 = P64[_sg1Td::P64 + 48];
           _sg1SM::P64 = P64[_sg1Td::P64 + 56];
           I64[Hp - 24] = k1_sg1SN_info;
           P64[Hp - 16] = _sg1SI::P64;
           P64[Hp - 8] = _sg1SJ::P64;
           P64[Hp] = _sg1SM::P64;
           I64[Sp - 56] = block_cg3vM_info;
           R1 = _sg1SK::P64;
           P64[Sp - 48] = Hp - 21;
           P64[Sp - 40] = _sg1SG::P64;
           P64[Sp - 32] = _sg1SH::P64;
           P64[Sp - 24] = _sg1SM::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ug3wm; else goto cg3vN;
       ug3wm: // global
           call _cg3vM(R1) args: 0, res: 0, upd: 0;
       cg3vN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1Td_info" {
     sat_sg1Td_info:
         const sat_sg1Td_entry;
         const 6;
         const 15;
 },
 _cg3vM() //  [R1]
         { []
         }
     {offset
       cg3vM: // global
           _cg3uw::P64 = P64[Sp + 8];
           _sg1SM::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cg3w8; else goto cg3w9;
       cg3w8: // global
           Hp = Hp + 24;
           _sg1T8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3wl; else goto cg3wh;
       cg3wh: // global
           _sg1T9::P64 = P64[_sg1T8::P64 + 7];
           I64[Hp - 16] = sat_sg1Ta_info;
           P64[Hp] = _sg1SM::P64;
           R4 = _sg1T9::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           R1 = _cg3uw::P64;
           Sp = Sp + 40;
           call k1_sg1SN_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
       cg3w9: // global
           Hp = Hp + 24;
           _sg1T8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cg3wl; else goto cg3wk;
       cg3wl: // global
           HpAlloc = 24;
           R1 = _sg1T8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg3wk: // global
           _sg1Tb::P64 = P64[_sg1T8::P64 + 6];
           I64[Hp - 16] = sat_sg1Tc_info;
           P64[Hp] = _sg1SM::P64;
           R4 = _sg1Tb::P64;
           R3 = Hp - 16;
           R2 = P64[Sp + 24];
           R1 = _cg3uw::P64;
           Sp = Sp + 40;
           call k1_sg1SN_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg3vM_info" {
     block_cg3vM_info:
         const _cg3vM;
         const 4;
         const 30;
 },
 Data.Functor.Sum.$w$cgmapMo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg3wn: // global
           _sg1SK::P64 = R6;
           _sg1SJ::P64 = R5;
           _sg1SI::P64 = R4;
           _sg1SH::P64 = R3;
           _sg1SG::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg3wo; else goto cg3wp;
       cg3wp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg3wr; else goto cg3wq;
       cg3wr: // global
           HpAlloc = 24;
           goto cg3wo;
       cg3wo: // global
           R6 = _sg1SK::P64;
           R5 = _sg1SJ::P64;
           R4 = _sg1SI::P64;
           R3 = _sg1SH::P64;
           R2 = _sg1SG::P64;
           R1 = Data.Functor.Sum.$w$cgmapMo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3wq: // global
           I64[Hp - 16] = lvl8_sg1SL_info;
           P64[Hp] = _sg1SI::P64;
           I64[Sp - 56] = block_cg3tV_info;
           R2 = _sg1SI::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sg1SG::P64;
           P64[Sp - 32] = _sg1SH::P64;
           P64[Sp - 24] = _sg1SI::P64;
           P64[Sp - 16] = _sg1SJ::P64;
           P64[Sp - 8] = _sg1SK::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$w$cgmapMo_info" {
     Data.Functor.Sum.$w$cgmapMo_info:
         const Data.Functor.Sum.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg3tV() //  [R1]
         { []
         }
     {offset
       cg3tV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg3wu; else goto cg3wt;
       cg3wu: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg3wt: // global
           I64[Hp - 80] = sat_sg1Tj_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sg1Td_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3tV_info" {
     block_cg3tV_info:
         const _cg3tV;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.714946119 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_$cgmapMo_closure" {
     Data.Functor.Sum.$fDataSum_$cgmapMo_closure:
         const Data.Functor.Sum.$fDataSum_$cgmapMo_info;
 },
 Data.Functor.Sum.$fDataSum_$cgmapMo_slow() //  [R1]
         { []
         }
     {offset
       cg3yQ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Sum.$fDataSum_$cgmapMo_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Sum.$fDataSum_$cgmapMo_entry() //  [R6]
         { []
         }
     {offset
       cg3yU: // global
           _sg1To::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sg1To::P64;
           Sp = Sp + 32;
           call Data.Functor.Sum.$w$cgmapMo_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_$cgmapMo_info" {
     Data.Functor.Sum.$fDataSum_$cgmapMo_info:
         const Data.Functor.Sum.$fDataSum_$cgmapMo_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Sum.$fDataSum_$cgmapMo_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.721009534 UTC

[section ""data" . lvl4_rfXPs_closure" {
     lvl4_rfXPs_closure:
         const lvl4_rfXPs_info;
         const 0;
 },
 lvl4_rfXPs_entry() //  [R2]
         { []
         }
     {offset
       cg3ze: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg3zf; else goto cg3zg;
       cg3zf: // global
           R2 = R2;
           R1 = lvl4_rfXPs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3zg: // global
           I64[Sp - 8] = block_cg3z7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug3zn; else goto cg3z8;
       ug3zn: // global
           call _cg3z7(R1) args: 0, res: 0, upd: 0;
       cg3z8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rfXPs_info" {
     lvl4_rfXPs_info:
         const lvl4_rfXPs_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const Sg21L_srt+552;
 },
 _cg3z7() //  [R1]
         { []
         }
     {offset
       cg3z7: // global
           if (R1 & 7 == 1) goto cg3zb; else goto cg3zc;
       cg3zb: // global
           R1 = Data.Functor.Sum.$cInL_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg3zc: // global
           R1 = Data.Functor.Sum.$cInR_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg3z7_info" {
     block_cg3z7_info:
         const _cg3z7;
         const 0;
         const 12884901918;
         const Sg21L_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.726580049 UTC

[section ""data" . lvl5_rfXPt_closure" {
     lvl5_rfXPt_closure:
         const lvl5_rfXPt_info;
         const 0;
 },
 lvl5_rfXPt_entry() //  []
         { []
         }
     {offset
       cg3zG: // global
           R1 = Data.Functor.Sum.$tSum_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rfXPt_info" {
     lvl5_rfXPt_info:
         const lvl5_rfXPt_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sg21L_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.729998141 UTC

[section ""data" . lvl6_rfXPu_closure" {
     lvl6_rfXPu_closure:
         const lvl6_rfXPu_info;
 },
 lvl6_rfXPu_entry() //  []
         { []
         }
     {offset
       cg3zS: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rfXPu_info" {
     lvl6_rfXPu_info:
         const lvl6_rfXPu_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.73366362 UTC

[section ""data" . lvl7_rfXPv_closure" {
     lvl7_rfXPv_closure:
         const lvl7_rfXPv_info;
 },
 lvl7_rfXPv_entry() //  []
         { []
         }
     {offset
       cg3A5: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rfXPv_info" {
     lvl7_rfXPv_info:
         const lvl7_rfXPv_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.744025618 UTC

[section ""data" . Data.Functor.Sum.$fDataSum_closure" {
     Data.Functor.Sum.$fDataSum_closure:
         const Data.Functor.Sum.$fDataSum_info;
         const 0;
 },
 sat_sg1U1_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3An: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$w$cgmapMo_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1U1_info" {
     sat_sg1U1_info:
         const sat_sg1U1_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1TX_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3Av: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$w$cgmapMp_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TX_info" {
     sat_sg1TX_info:
         const sat_sg1TX_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1TT_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3AD: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Sum.$w$cgmapM_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TT_info" {
     sat_sg1TT_info:
         const sat_sg1TT_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg1TP_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3AL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3AM; else goto cg3AN;
       cg3AM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3AN: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Sum.$fDataSum_$cgmapQi_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TP_info" {
     sat_sg1TP_info:
         const sat_sg1TP_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const Sg21L_srt+544;
 },
 sat_sg1TO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg3AT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg3AU; else goto cg3AV;
       cg3AU: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3AV: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fDataSum_$cgmapQ_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TO_info" {
     sat_sg1TO_info:
         const sat_sg1TO_entry;
         const 6;
         const 8;
         const 8589934607;
 },
 sat_sg1TN_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg3B1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg3B2; else goto cg3B3;
       cg3B2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3B3: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Sum.$fDataSum_$cgmapQr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TN_info" {
     sat_sg1TN_info:
         const sat_sg1TN_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sg1TM_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg3B9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg3Ba; else goto cg3Bb;
       cg3Ba: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3Bb: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Sum.$fDataSum3_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TM_info" {
     sat_sg1TM_info:
         const sat_sg1TM_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sg1TL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg3Bh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg3Bi; else goto cg3Bj;
       cg3Bi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3Bj: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call Data.Functor.Sum.$fDataSum4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TL_info" {
     sat_sg1TL_info:
         const sat_sg1TL_entry;
         const 6;
         const 8;
         const 8589934607;
 },
 sat_sg1TK_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3Bp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3Bq; else goto cg3Br;
       cg3Bq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3Br: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Sum.$fDataSum_$cgunfold_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TK_info" {
     sat_sg1TK_info:
         const sat_sg1TK_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const Sg21L_srt+456;
 },
 sat_sg1TJ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg3Bx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg3By; else goto cg3Bz;
       cg3By: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg3Bz: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Sum.$fDataSum_$cgfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg1TJ_info" {
     sat_sg1TJ_info:
         const sat_sg1TJ_entry;
         const 6;
         const 8;
         const 12884901911;
 },
 sat_sg1TI_entry() //  [R1]
         { []
         }
     {offset
       cg3BE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg3BF; else goto cg3BG;
       cg3BF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg3BG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Sum.$w$cp1Data_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg1TI_info" {
     sat_sg1TI_info:
         const sat_sg1TI_entry;
         const 4;
         const 4294967311;
         const Sg21L_srt+528;
 },
 Data.Functor.Sum.$fDataSum_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg3BI: // global
           Hp = Hp + 640;
           if (Hp > HpLim) (likely: False) goto cg3BM; else goto cg3BL;
       cg3BM: // global
           HpAlloc = 640;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Sum.$fDataSum_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg3BL: // global
           I64[Hp - 632] = sat_sg1U1_info;
           P64[Hp - 624] = R6;
           _sg1TH::P64 = P64[Sp];
           P64[Hp - 616] = _sg1TH::P64;
           I64[Hp - 608] = sat_sg1TX_info;
           P64[Hp - 600] = R6;
           P64[Hp - 592] = _sg1TH::P64;
           I64[Hp - 584] = sat_sg1TT_info;
           P64[Hp - 576] = R6;
           P64[Hp - 568] = _sg1TH::P64;
           I64[Hp - 560] = sat_sg1TP_info;
           P64[Hp - 552] = R2;
           P64[Hp - 544] = R3;
           P64[Hp - 536] = R4;
           P64[Hp - 528] = R5;
           P64[Hp - 520] = R6;
           P64[Hp - 512] = _sg1TH::P64;
           I64[Hp - 504] = sat_sg1TO_info;
           P64[Hp - 496] = R2;
           P64[Hp - 488] = R3;
           P64[Hp - 480] = R4;
           P64[Hp - 472] = R5;
           P64[Hp - 464] = R6;
           P64[Hp - 456] = _sg1TH::P64;
           I64[Hp - 448] = sat_sg1TN_info;
           P64[Hp - 440] = R2;
           P64[Hp - 432] = R3;
           P64[Hp - 424] = R4;
           P64[Hp - 416] = R5;
           P64[Hp - 408] = R6;
           P64[Hp - 400] = _sg1TH::P64;
           I64[Hp - 392] = sat_sg1TM_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           P64[Hp - 368] = R4;
           P64[Hp - 360] = R5;
           P64[Hp - 352] = R6;
           P64[Hp - 344] = _sg1TH::P64;
           I64[Hp - 336] = sat_sg1TL_info;
           P64[Hp - 328] = R2;
           P64[Hp - 320] = R3;
           P64[Hp - 312] = R4;
           P64[Hp - 304] = R5;
           P64[Hp - 296] = R6;
           P64[Hp - 288] = _sg1TH::P64;
           I64[Hp - 280] = sat_sg1TK_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _sg1TH::P64;
           I64[Hp - 224] = sat_sg1TJ_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           P64[Hp - 184] = R6;
           P64[Hp - 176] = _sg1TH::P64;
           I64[Hp - 168] = sat_sg1TI_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 168;
           P64[Hp - 104] = Hp - 221;
           P64[Hp - 96] = Hp - 277;
           P64[Hp - 88] = lvl4_rfXPs_closure+1;
           P64[Hp - 80] = lvl5_rfXPt_closure+1;
           P64[Hp - 72] = lvl6_rfXPu_closure+2;
           P64[Hp - 64] = lvl7_rfXPv_closure+2;
           P64[Hp - 56] = Hp - 334;
           P64[Hp - 48] = Hp - 388;
           P64[Hp - 40] = Hp - 444;
           P64[Hp - 32] = Hp - 502;
           P64[Hp - 24] = Hp - 557;
           P64[Hp - 16] = Hp - 581;
           P64[Hp - 8] = Hp - 605;
           P64[Hp] = Hp - 629;
           R1 = Hp - 119;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.$fDataSum_info" {
     Data.Functor.Sum.$fDataSum_info:
         const Data.Functor.Sum.$fDataSum_entry;
         const 0;
         const 925793085554702;
         const 25769803802;
         const Sg21L_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.770988931 UTC

[section ""data" . Data.Functor.Sum.InL_closure" {
     Data.Functor.Sum.InL_closure:
         const Data.Functor.Sum.InL_info;
 },
 Data.Functor.Sum.InL_entry() //  [R2]
         { []
         }
     {offset
       cg3Db: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg3Df; else goto cg3De;
       cg3Df: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Functor.Sum.InL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3De: // global
           I64[Hp - 8] = Data.Functor.Sum.InL_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InL_info" {
     Data.Functor.Sum.InL_info:
         const Data.Functor.Sum.InL_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.775010642 UTC

[section ""data" . Data.Functor.Sum.InR_closure" {
     Data.Functor.Sum.InR_closure:
         const Data.Functor.Sum.InR_info;
 },
 Data.Functor.Sum.InR_entry() //  [R2]
         { []
         }
     {offset
       cg3Dr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg3Dv; else goto cg3Du;
       cg3Dv: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Functor.Sum.InR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg3Du: // global
           I64[Hp - 8] = Data.Functor.Sum.InR_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InR_info" {
     Data.Functor.Sum.InR_info:
         const Data.Functor.Sum.InR_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.778644099 UTC

[section ""cstring" . ig3DD_str" {
     ig3DD_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,83,117,109,46,73,110,76]
 },
 Data.Functor.Sum.InL_con_entry() //  [R1]
         { []
         }
     {offset
       cg3DC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InL_con_info" {
     Data.Functor.Sum.InL_con_info:
         const Data.Functor.Sum.InL_con_entry;
         const 1;
         const 2;
         const ig3DD_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.782008697 UTC

[section ""cstring" . ig3DK_str" {
     ig3DK_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,83,117,109,46,73,110,82]
 },
 Data.Functor.Sum.InR_con_entry() //  [R1]
         { []
         }
     {offset
       cg3DJ: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Sum.InR_con_info" {
     Data.Functor.Sum.InR_con_info:
         const Data.Functor.Sum.InR_con_entry;
         const 1;
         const 4294967298;
         const ig3DK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:53.785713228 UTC

[section ""relreadonly" . Sg21L_srt" {
     Sg21L_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Sum.$fRead1Sum2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Functor.Sum.$fRead1Sum6_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Sum.$fRead1Sum1_closure;
         const Data.Functor.Sum.$fRead1Sum_$cliftReadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Sum.$fRead1Sum_$cliftReadListPrec_closure;
         const Data.Functor.Sum.$fRead1Sum_$cliftReadList_closure;
         const Data.Functor.Sum.$fRead1Sum_closure;
         const Data.Functor.Sum.$fRead1Sum3_closure;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const Data.Functor.Sum.$w$cliftShowsPrec_closure;
         const Data.Functor.Sum.$fShow1Sum_$cliftShowsPrec_closure;
         const Data.Functor.Sum.$fShow1Sum_$cliftShowList_closure;
         const Data.Functor.Sum.$fShow1Sum_closure;
         const Data.Functor.Sum.$fReadSum1_closure;
         const Data.Functor.Sum.$fReadSum_$creadsPrec_closure;
         const Data.Functor.Sum.$fReadSum_$creadListPrec_closure;
         const Data.Functor.Sum.$fReadSum_$creadList_closure;
         const Data.Functor.Sum.$fReadSum_closure;
         const Data.Functor.Sum.$fShowSum_$cshowsPrec_closure;
         const Data.Functor.Sum.$fShowSum_$cshow_closure;
         const Data.Functor.Sum.$fShowSum_$cshowList_closure;
         const Data.Functor.Sum.$fShowSum_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Functor.Sum.$fFoldableSum3_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Functor.Sum.$fFoldableSum4_closure;
         const Data.Functor.Sum.$fFoldableSum_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Sum.$fFoldableSum5_closure;
         const Data.Functor.Sum.$fFoldableSum_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Functor.Sum.$fFoldableSum_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Functor.Sum.$fFoldableSum10_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldl_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldl1_closure;
         const Data.Functor.Sum.$fFoldableSum9_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldr'_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldr_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldl'_closure;
         const Data.Functor.Sum.$fFoldableSum_$clength_closure;
         const Data.Functor.Sum.$fFoldableSum_$cfoldr1_closure;
         const Data.Functor.Sum.$fFoldableSum11_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Functor.Sum.$fFoldableSum1_closure;
         const Data.Functor.Sum.$fFoldableSum_$cnull_closure;
         const Data.Functor.Sum.$fFoldableSum_$ctoList_closure;
         const Data.Functor.Sum.$fFoldableSum_closure;
         const Data.Functor.Sum.$fTraversableSum_$cp2Traversable_closure;
         const Data.Functor.Sum.$fTraversableSum_closure;
         const Data.Data.$wlvl_closure;
         const Data.Functor.Sum.$w$cgunfold_closure;
         const Data.Functor.Sum.$fDataSum_$cgunfold_closure;
         const GHC.List.badHead_closure;
         const go61_rfXP6_closure;
         const Data.Functor.Sum.$fRead1Sum7_closure;
         const go1_rfXP7_closure;
         const Data.Data.mkConstr1_closure;
         const $tSum3_rfXPb_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Functor.Sum.$w$cp1Data_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Functor.Sum.$fDataSum_$cgmapQi_closure;
         const Data.Functor.Sum.$cInL_closure;
         const Data.Functor.Sum.$cInR_closure;
         const lvl4_rfXPs_closure;
         const Data.Functor.Sum.$tSum_closure;
         const Data.Functor.Sum.$fDataSum_closure;
         const lvl5_rfXPt_closure;
 }]

