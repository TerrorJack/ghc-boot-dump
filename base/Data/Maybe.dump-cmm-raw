
==================== Raw Cmm ====================
2018-03-16 15:55:05.096131015 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:05.098313897 UTC

[section ""data" . Data.Maybe.maybe_closure" {
     Data.Maybe.maybe_closure:
         const Data.Maybe.maybe_info;
 },
 Data.Maybe.maybe_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cryM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cryN; else goto cryO;
       cryN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.maybe_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cryO: // global
           I64[Sp - 24] = block_cryF_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uryV; else goto cryG;
       uryV: // global
           call _cryF(R1) args: 0, res: 0, upd: 0;
       cryG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.maybe_info" {
     Data.Maybe.maybe_info:
         const Data.Maybe.maybe_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cryF() //  [R1]
         { []
         }
     {offset
       cryF: // global
           if (R1 & 7 == 1) goto cryJ; else goto cryK;
       cryJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cryK: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cryF_info" {
     block_cryF_info:
         const _cryF;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.104609603 UTC

[section ""data" . Data.Maybe.isJust_closure" {
     Data.Maybe.isJust_closure:
         const Data.Maybe.isJust_info;
 },
 Data.Maybe.isJust_entry() //  [R2]
         { []
         }
     {offset
       crzi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crzj; else goto crzk;
       crzj: // global
           R2 = R2;
           R1 = Data.Maybe.isJust_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crzk: // global
           I64[Sp - 8] = block_crzb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urzr; else goto crzc;
       urzr: // global
           call _crzb(R1) args: 0, res: 0, upd: 0;
       crzc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.isJust_info" {
     Data.Maybe.isJust_info:
         const Data.Maybe.isJust_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crzb() //  [R1]
         { []
         }
     {offset
       crzb: // global
           if (R1 & 7 == 1) goto crzf; else goto crzg;
       crzf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crzg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crzb_info" {
     block_crzb_info:
         const _crzb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.11066089 UTC

[section ""data" . Data.Maybe.isNothing_closure" {
     Data.Maybe.isNothing_closure:
         const Data.Maybe.isNothing_info;
 },
 Data.Maybe.isNothing_entry() //  [R2]
         { []
         }
     {offset
       crzQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crzR; else goto crzS;
       crzR: // global
           R2 = R2;
           R1 = Data.Maybe.isNothing_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crzS: // global
           I64[Sp - 8] = block_crzJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urzZ; else goto crzK;
       urzZ: // global
           call _crzJ(R1) args: 0, res: 0, upd: 0;
       crzK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.isNothing_info" {
     Data.Maybe.isNothing_info:
         const Data.Maybe.isNothing_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crzJ() //  [R1]
         { []
         }
     {offset
       crzJ: // global
           if (R1 & 7 == 1) goto crzN; else goto crzO;
       crzN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crzO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crzJ_info" {
     block_crzJ_info:
         const _crzJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.115945282 UTC

[section ""cstring" . lvl_rrod_bytes" {
     lvl_rrod_bytes:
         I8[] [77,97,121,98,101,46,102,114,111,109,74,117,115,116,58,32,78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.118523747 UTC

[section ""data" . Data.Maybe.fromJust1_closure" {
     Data.Maybe.fromJust1_closure:
         const Data.Maybe.fromJust1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Maybe.fromJust1_entry() //  [R1]
         { []
         }
     {offset
       crAm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto crAn; else goto crAo;
       crAn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       crAo: // global
           (_crAh::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_crAh::I64 == 0) goto crAj; else goto crAi;
       crAj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       crAi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _crAh::I64;
           I64[Sp - 24] = block_crAk_info;
           R2 = lvl_rrod_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Maybe.fromJust1_info" {
     Data.Maybe.fromJust1_info:
         const Data.Maybe.fromJust1_entry;
         const 0;
         const 4294967317;
         const Srqh_srt;
 },
 _crAk() //  [R1]
         { []
         }
     {offset
       crAk: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_crAk_info" {
     block_crAk_info:
         const _crAk;
         const 0;
         const 4294967326;
         const Srqh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.124723298 UTC

[section ""data" . Data.Maybe.fromJust_closure" {
     Data.Maybe.fromJust_closure:
         const Data.Maybe.fromJust_info;
         const 0;
 },
 Data.Maybe.fromJust_entry() //  [R2]
         { []
         }
     {offset
       crAN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crAO; else goto crAP;
       crAO: // global
           R2 = R2;
           R1 = Data.Maybe.fromJust_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crAP: // global
           I64[Sp - 8] = block_crAG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urAW; else goto crAH;
       urAW: // global
           call _crAG(R1) args: 0, res: 0, upd: 0;
       crAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.fromJust_info" {
     Data.Maybe.fromJust_info:
         const Data.Maybe.fromJust_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Srqh_srt+8;
 },
 _crAG() //  [R1]
         { []
         }
     {offset
       crAG: // global
           if (R1 & 7 == 1) goto crAK; else goto crAL;
       crAK: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       crAL: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crAG_info" {
     block_crAG_info:
         const _crAG;
         const 0;
         const 4294967326;
         const Srqh_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.131068229 UTC

[section ""data" . Data.Maybe.fromMaybe_closure" {
     Data.Maybe.fromMaybe_closure:
         const Data.Maybe.fromMaybe_info;
 },
 Data.Maybe.fromMaybe_entry() //  [R2, R3]
         { []
         }
     {offset
       crBj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crBk; else goto crBl;
       crBk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.fromMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       crBl: // global
           I64[Sp - 16] = block_crBc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto urBs; else goto crBd;
       urBs: // global
           call _crBc(R1) args: 0, res: 0, upd: 0;
       crBd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.fromMaybe_info" {
     Data.Maybe.fromMaybe_info:
         const Data.Maybe.fromMaybe_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _crBc() //  [R1]
         { []
         }
     {offset
       crBc: // global
           if (R1 & 7 == 1) goto crBg; else goto crBh;
       crBg: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       crBh: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crBc_info" {
     block_crBc_info:
         const _crBc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.140170948 UTC

[section ""data" . Data.Maybe.maybeToList_closure" {
     Data.Maybe.maybeToList_closure:
         const Data.Maybe.maybeToList_info;
 },
 Data.Maybe.maybeToList_entry() //  [R2]
         { []
         }
     {offset
       crBP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crBQ; else goto crBR;
       crBQ: // global
           R2 = R2;
           R1 = Data.Maybe.maybeToList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crBR: // global
           I64[Sp - 8] = block_crBI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urC1; else goto crBJ;
       urC1: // global
           call _crBI(R1) args: 0, res: 0, upd: 0;
       crBJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.maybeToList_info" {
     Data.Maybe.maybeToList_info:
         const Data.Maybe.maybeToList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crBI() //  [R1]
         { []
         }
     {offset
       crBI: // global
           if (R1 & 7 == 1) goto crBM; else goto crBN;
       crBM: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crBN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto crC0; else goto crBZ;
       crC0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crBZ: // global
           _sroB::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sroB::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crBI_info" {
     block_crBI_info:
         const _crBI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.148162161 UTC

[section ""data" . go_rroe_closure" {
     go_rroe_closure:
         const go_rroe_info;
 },
 go_rroe_entry() //  [R2]
         { []
         }
     {offset
       crCq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crCr; else goto crCs;
       crCr: // global
           R2 = R2;
           R1 = go_rroe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crCs: // global
           I64[Sp - 8] = block_crCj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urCC; else goto crCk;
       urCC: // global
           call _crCj(R1) args: 0, res: 0, upd: 0;
       crCk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_rroe_info" {
     go_rroe_info:
         const go_rroe_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crCj() //  [R1]
         { []
         }
     {offset
       crCj: // global
           if (R1 & 7 == 1) goto crCn; else goto crCo;
       crCn: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crCo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto crCB; else goto crCA;
       crCB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crCA: // global
           _sroE::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sroE::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crCj_info" {
     block_crCj_info:
         const _crCj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.154006994 UTC

[section ""data" . Data.Maybe.listToMaybe_closure" {
     Data.Maybe.listToMaybe_closure:
         const Data.Maybe.listToMaybe_info;
 },
 Data.Maybe.listToMaybe_entry() //  [R2]
         { []
         }
     {offset
       crCU: // global
           R2 = R2;
           call go_rroe_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.listToMaybe_info" {
     Data.Maybe.listToMaybe_info:
         const Data.Maybe.listToMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.159162855 UTC

[section ""data" . Data.Maybe.catMaybes1_closure" {
     Data.Maybe.catMaybes1_closure:
         const Data.Maybe.catMaybes1_info;
 },
 sat_sroM_entry() //  [R1]
         { []
         }
     {offset
       crDl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crDm; else goto crDn;
       crDm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       crDn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.catMaybes1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sroM_info" {
     sat_sroM_info:
         const sat_sroM_entry;
         const 1;
         const 16;
 },
 Data.Maybe.catMaybes1_entry() //  [R2]
         { []
         }
     {offset
       crDs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crDt; else goto urDI;
       crDt: // global
           R2 = R2;
           R1 = Data.Maybe.catMaybes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       urDI: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _crD2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Maybe.catMaybes1_info" {
     Data.Maybe.catMaybes1_info:
         const Data.Maybe.catMaybes1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crD2() //  []
         { []
         }
     {offset
       crD2: // global
           _sroG::P64 = P64[Sp];
           I64[Sp] = block_crD5_info;
           R1 = _sroG::P64;
           if (R1 & 7 != 0) goto urDK; else goto crD6;
       urDK: // global
           call _crD5(R1) args: 0, res: 0, upd: 0;
       crD6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _crD5() //  [R1]
         { []
         }
     {offset
       crD5: // global
           if (R1 & 7 == 1) goto crDp; else goto crDq;
       crDp: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crDq: // global
           I64[Sp - 8] = block_crDb_info;
           _sroJ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sroJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urDL; else goto crDc;
       urDL: // global
           call _crDb(R1) args: 0, res: 0, upd: 0;
       crDc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_crD5_info" {
     block_crD5_info:
         const _crD5;
         const 0;
         const 30;
 },
 _crDb() //  [R1]
         { []
         }
     {offset
       crDb: // global
           _sroJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto crDB; else goto crDD;
       crDB: // global
           P64[Sp + 8] = _sroJ::P64;
           Sp = Sp + 8;
           call _crD2() args: 0, res: 0, upd: 0;
       crDD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto crDG; else goto crDF;
       crDG: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crDF: // global
           _sroL::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_sroM_info;
           P64[Hp - 24] = _sroJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sroL::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crDb_info" {
     block_crDb_info:
         const _crDb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.168757497 UTC

[section ""data" . Data.Maybe.catMaybes_closure" {
     Data.Maybe.catMaybes_closure:
         const Data.Maybe.catMaybes_info;
 },
 Data.Maybe.catMaybes_entry() //  [R2]
         { []
         }
     {offset
       crEi: // global
           R2 = R2;
           call Data.Maybe.catMaybes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.catMaybes_info" {
     Data.Maybe.catMaybes_info:
         const Data.Maybe.catMaybes_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.172960253 UTC

[section ""data" . Data.Maybe.mapMaybeFB_closure" {
     Data.Maybe.mapMaybeFB_closure:
         const Data.Maybe.mapMaybeFB_info;
 },
 Data.Maybe.mapMaybeFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       crEz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto crEA; else goto crEB;
       crEA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.mapMaybeFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       crEB: // global
           I64[Sp - 24] = block_crEt_info;
           _sroO::P64 = R2;
           R2 = R4;
           R1 = R3;
           P64[Sp - 16] = _sroO::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.mapMaybeFB_info" {
     Data.Maybe.mapMaybeFB_info:
         const Data.Maybe.mapMaybeFB_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _crEt() //  [R1]
         { []
         }
     {offset
       crEt: // global
           _sroR::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto crEw; else goto crEx;
       crEw: // global
           R1 = _sroR::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       crEx: // global
           R3 = _sroR::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crEt_info" {
     block_crEt_info:
         const _crEt;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.180196565 UTC

[section ""data" . Data.Maybe.mapMaybe_closure" {
     Data.Maybe.mapMaybe_closure:
         const Data.Maybe.mapMaybe_info;
 },
 sat_srp1_entry() //  [R1]
         { []
         }
     {offset
       crFb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crFc; else goto crFd;
       crFc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       crFd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.mapMaybe_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_srp1_info" {
     sat_srp1_info:
         const sat_srp1_entry;
         const 2;
         const 18;
 },
 Data.Maybe.mapMaybe_entry() //  [R2, R3]
         { []
         }
     {offset
       crFi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto crFj; else goto urFy;
       crFj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.mapMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       urFy: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _crET() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Maybe.mapMaybe_info" {
     Data.Maybe.mapMaybe_info:
         const Data.Maybe.mapMaybe_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _crET() //  []
         { []
         }
     {offset
       crET: // global
           I64[Sp - 8] = block_crEW_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urFA; else goto crEX;
       urFA: // global
           call _crEW(R1) args: 0, res: 0, upd: 0;
       crEX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _crEW() //  [R1]
         { []
         }
     {offset
       crEW: // global
           if (R1 & 7 == 1) goto crFf; else goto crFg;
       crFf: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crFg: // global
           I64[Sp] = block_crF2_info;
           R2 = P64[R1 + 6];
           _sroY::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _sroY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_crEW_info" {
     block_crEW_info:
         const _crEW;
         const 130;
         const 30;
 },
 _crF2() //  [R1]
         { []
         }
     {offset
       crF2: // global
           _sroU::P64 = P64[Sp + 8];
           _sroY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto crFr; else goto crFt;
       crFr: // global
           P64[Sp + 8] = _sroU::P64;
           P64[Sp + 16] = _sroY::P64;
           Sp = Sp + 8;
           call _crET() args: 0, res: 0, upd: 0;
       crFt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto crFw; else goto crFv;
       crFw: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crFv: // global
           _srp0::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_srp1_info;
           P64[Hp - 32] = _sroU::P64;
           P64[Hp - 24] = _sroY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _srp0::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crF2_info" {
     block_crF2_info:
         const _crF2;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.189984186 UTC

[section ""cstring" . Data.Maybe.$trModule2_bytes" {
     Data.Maybe.$trModule2_bytes:
         I8[] [68,97,116,97,46,77,97,121,98,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.191979752 UTC

[section ""data" . Data.Maybe.$trModule1_closure" {
     Data.Maybe.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Maybe.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.193626925 UTC

[section ""cstring" . Data.Maybe.$trModule4_bytes" {
     Data.Maybe.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.195159934 UTC

[section ""data" . Data.Maybe.$trModule3_closure" {
     Data.Maybe.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Maybe.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.1968726 UTC

[section ""data" . Data.Maybe.$trModule_closure" {
     Data.Maybe.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Maybe.$trModule3_closure+1;
         const Data.Maybe.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.198807717 UTC

[section ""relreadonly" . Srqh_srt" {
     Srqh_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Maybe.fromJust_closure;
         const Data.Maybe.fromJust1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.41300399 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:05.416180882 UTC

[section ""data" . Data.Maybe.maybe_closure" {
     Data.Maybe.maybe_closure:
         const Data.Maybe.maybe_info;
 },
 Data.Maybe.maybe_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       crH5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto crH6; else goto crH7;
       crH6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.maybe_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       crH7: // global
           I64[Sp - 24] = block_crGY_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto urHe; else goto crGZ;
       urHe: // global
           call _crGY(R1) args: 0, res: 0, upd: 0;
       crGZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.maybe_info" {
     Data.Maybe.maybe_info:
         const Data.Maybe.maybe_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _crGY() //  [R1]
         { []
         }
     {offset
       crGY: // global
           if (R1 & 7 == 1) goto crH2; else goto crH3;
       crH2: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       crH3: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crGY_info" {
     block_crGY_info:
         const _crGY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.427497893 UTC

[section ""data" . Data.Maybe.isJust_closure" {
     Data.Maybe.isJust_closure:
         const Data.Maybe.isJust_info;
 },
 Data.Maybe.isJust_entry() //  [R2]
         { []
         }
     {offset
       crHC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crHD; else goto crHE;
       crHD: // global
           R2 = R2;
           R1 = Data.Maybe.isJust_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crHE: // global
           I64[Sp - 8] = block_crHv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urHL; else goto crHw;
       urHL: // global
           call _crHv(R1) args: 0, res: 0, upd: 0;
       crHw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.isJust_info" {
     Data.Maybe.isJust_info:
         const Data.Maybe.isJust_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crHv() //  [R1]
         { []
         }
     {offset
       crHv: // global
           if (R1 & 7 == 1) goto crHz; else goto crHA;
       crHz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crHA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crHv_info" {
     block_crHv_info:
         const _crHv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.436212747 UTC

[section ""data" . Data.Maybe.isNothing_closure" {
     Data.Maybe.isNothing_closure:
         const Data.Maybe.isNothing_info;
 },
 Data.Maybe.isNothing_entry() //  [R2]
         { []
         }
     {offset
       crId: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crIe; else goto crIf;
       crIe: // global
           R2 = R2;
           R1 = Data.Maybe.isNothing_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crIf: // global
           I64[Sp - 8] = block_crI6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urIm; else goto crI7;
       urIm: // global
           call _crI6(R1) args: 0, res: 0, upd: 0;
       crI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.isNothing_info" {
     Data.Maybe.isNothing_info:
         const Data.Maybe.isNothing_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crI6() //  [R1]
         { []
         }
     {offset
       crI6: // global
           if (R1 & 7 == 1) goto crIa; else goto crIb;
       crIa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crIb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crI6_info" {
     block_crI6_info:
         const _crI6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.443509324 UTC

[section ""cstring" . lvl_rrod_bytes" {
     lvl_rrod_bytes:
         I8[] [77,97,121,98,101,46,102,114,111,109,74,117,115,116,58,32,78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.447299449 UTC

[section ""data" . Data.Maybe.fromJust1_closure" {
     Data.Maybe.fromJust1_closure:
         const Data.Maybe.fromJust1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Maybe.fromJust1_entry() //  [R1]
         { []
         }
     {offset
       crIM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto crIN; else goto crIO;
       crIN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       crIO: // global
           (_crIH::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_crIH::I64 == 0) goto crIJ; else goto crII;
       crIJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       crII: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _crIH::I64;
           I64[Sp - 24] = block_crIK_info;
           R2 = lvl_rrod_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Maybe.fromJust1_info" {
     Data.Maybe.fromJust1_info:
         const Data.Maybe.fromJust1_entry;
         const 0;
         const 4294967317;
         const SrIS_srt;
 },
 _crIK() //  [R1]
         { []
         }
     {offset
       crIK: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_crIK_info" {
     block_crIK_info:
         const _crIK;
         const 0;
         const 4294967326;
         const SrIS_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.453982314 UTC

[section ""data" . Data.Maybe.fromJust_closure" {
     Data.Maybe.fromJust_closure:
         const Data.Maybe.fromJust_info;
         const 0;
 },
 Data.Maybe.fromJust_entry() //  [R2]
         { []
         }
     {offset
       crJg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crJh; else goto crJi;
       crJh: // global
           R2 = R2;
           R1 = Data.Maybe.fromJust_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crJi: // global
           I64[Sp - 8] = block_crJ9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urJp; else goto crJa;
       urJp: // global
           call _crJ9(R1) args: 0, res: 0, upd: 0;
       crJa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.fromJust_info" {
     Data.Maybe.fromJust_info:
         const Data.Maybe.fromJust_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SrIS_srt+8;
 },
 _crJ9() //  [R1]
         { []
         }
     {offset
       crJ9: // global
           if (R1 & 7 == 1) goto crJd; else goto crJe;
       crJd: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       crJe: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crJ9_info" {
     block_crJ9_info:
         const _crJ9;
         const 0;
         const 4294967326;
         const SrIS_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.459964301 UTC

[section ""data" . Data.Maybe.fromMaybe_closure" {
     Data.Maybe.fromMaybe_closure:
         const Data.Maybe.fromMaybe_info;
 },
 Data.Maybe.fromMaybe_entry() //  [R2, R3]
         { []
         }
     {offset
       crJN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crJO; else goto crJP;
       crJO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.fromMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       crJP: // global
           I64[Sp - 16] = block_crJG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto urJW; else goto crJH;
       urJW: // global
           call _crJG(R1) args: 0, res: 0, upd: 0;
       crJH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.fromMaybe_info" {
     Data.Maybe.fromMaybe_info:
         const Data.Maybe.fromMaybe_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _crJG() //  [R1]
         { []
         }
     {offset
       crJG: // global
           if (R1 & 7 == 1) goto crJK; else goto crJL;
       crJK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       crJL: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crJG_info" {
     block_crJG_info:
         const _crJG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.466017965 UTC

[section ""data" . Data.Maybe.maybeToList_closure" {
     Data.Maybe.maybeToList_closure:
         const Data.Maybe.maybeToList_info;
 },
 Data.Maybe.maybeToList_entry() //  [R2]
         { []
         }
     {offset
       crKk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crKl; else goto crKm;
       crKl: // global
           R2 = R2;
           R1 = Data.Maybe.maybeToList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crKm: // global
           I64[Sp - 8] = block_crKd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urKw; else goto crKe;
       urKw: // global
           call _crKd(R1) args: 0, res: 0, upd: 0;
       crKe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.maybeToList_info" {
     Data.Maybe.maybeToList_info:
         const Data.Maybe.maybeToList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crKd() //  [R1]
         { []
         }
     {offset
       crKd: // global
           if (R1 & 7 == 1) goto crKh; else goto crKi;
       crKh: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crKi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto crKv; else goto crKu;
       crKv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crKu: // global
           _srGt::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _srGt::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crKd_info" {
     block_crKd_info:
         const _crKd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.472438112 UTC

[section ""data" . go_rroe_closure" {
     go_rroe_closure:
         const go_rroe_info;
 },
 go_rroe_entry() //  [R2]
         { []
         }
     {offset
       crL0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crL1; else goto crL2;
       crL1: // global
           R2 = R2;
           R1 = go_rroe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crL2: // global
           I64[Sp - 8] = block_crKT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urLc; else goto crKU;
       urLc: // global
           call _crKT(R1) args: 0, res: 0, upd: 0;
       crKU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_rroe_info" {
     go_rroe_info:
         const go_rroe_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crKT() //  [R1]
         { []
         }
     {offset
       crKT: // global
           if (R1 & 7 == 1) goto crKX; else goto crKY;
       crKX: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crKY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto crLb; else goto crLa;
       crLb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crLa: // global
           _srGw::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _srGw::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crKT_info" {
     block_crKT_info:
         const _crKT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.477942385 UTC

[section ""data" . Data.Maybe.listToMaybe_closure" {
     Data.Maybe.listToMaybe_closure:
         const Data.Maybe.listToMaybe_info;
 },
 Data.Maybe.listToMaybe_entry() //  [R2]
         { []
         }
     {offset
       crLx: // global
           R2 = R2;
           call go_rroe_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.listToMaybe_info" {
     Data.Maybe.listToMaybe_info:
         const Data.Maybe.listToMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.483109876 UTC

[section ""data" . Data.Maybe.catMaybes1_closure" {
     Data.Maybe.catMaybes1_closure:
         const Data.Maybe.catMaybes1_info;
 },
 sat_srGE_entry() //  [R1]
         { []
         }
     {offset
       crLY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crLZ; else goto crM0;
       crLZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       crM0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.catMaybes1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_srGE_info" {
     sat_srGE_info:
         const sat_srGE_entry;
         const 1;
         const 16;
 },
 Data.Maybe.catMaybes1_entry() //  [R2]
         { []
         }
     {offset
       crM5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crM6; else goto urMl;
       crM6: // global
           R2 = R2;
           R1 = Data.Maybe.catMaybes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       urMl: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _crLF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Maybe.catMaybes1_info" {
     Data.Maybe.catMaybes1_info:
         const Data.Maybe.catMaybes1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _crLF() //  []
         { []
         }
     {offset
       crLF: // global
           _srGy::P64 = P64[Sp];
           I64[Sp] = block_crLI_info;
           R1 = _srGy::P64;
           if (R1 & 7 != 0) goto urMn; else goto crLJ;
       urMn: // global
           call _crLI(R1) args: 0, res: 0, upd: 0;
       crLJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _crLI() //  [R1]
         { []
         }
     {offset
       crLI: // global
           if (R1 & 7 == 1) goto crM2; else goto crM3;
       crM2: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crM3: // global
           I64[Sp - 8] = block_crLO_info;
           _srGB::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _srGB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urMo; else goto crLP;
       urMo: // global
           call _crLO(R1) args: 0, res: 0, upd: 0;
       crLP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_crLI_info" {
     block_crLI_info:
         const _crLI;
         const 0;
         const 30;
 },
 _crLO() //  [R1]
         { []
         }
     {offset
       crLO: // global
           _srGB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto crMe; else goto crMg;
       crMe: // global
           P64[Sp + 8] = _srGB::P64;
           Sp = Sp + 8;
           call _crLF() args: 0, res: 0, upd: 0;
       crMg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto crMj; else goto crMi;
       crMj: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crMi: // global
           _srGD::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_srGE_info;
           P64[Hp - 24] = _srGB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _srGD::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crLO_info" {
     block_crLO_info:
         const _crLO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.492845648 UTC

[section ""data" . Data.Maybe.catMaybes_closure" {
     Data.Maybe.catMaybes_closure:
         const Data.Maybe.catMaybes_info;
 },
 Data.Maybe.catMaybes_entry() //  [R2]
         { []
         }
     {offset
       crN1: // global
           R2 = R2;
           call Data.Maybe.catMaybes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.catMaybes_info" {
     Data.Maybe.catMaybes_info:
         const Data.Maybe.catMaybes_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.49692061 UTC

[section ""data" . Data.Maybe.mapMaybeFB_closure" {
     Data.Maybe.mapMaybeFB_closure:
         const Data.Maybe.mapMaybeFB_info;
 },
 Data.Maybe.mapMaybeFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       crNi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto crNj; else goto crNk;
       crNj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.mapMaybeFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       crNk: // global
           I64[Sp - 24] = block_crNc_info;
           _srGG::P64 = R2;
           R2 = R4;
           R1 = R3;
           P64[Sp - 16] = _srGG::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Maybe.mapMaybeFB_info" {
     Data.Maybe.mapMaybeFB_info:
         const Data.Maybe.mapMaybeFB_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _crNc() //  [R1]
         { []
         }
     {offset
       crNc: // global
           _srGJ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto crNf; else goto crNg;
       crNf: // global
           R1 = _srGJ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       crNg: // global
           R3 = _srGJ::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crNc_info" {
     block_crNc_info:
         const _crNc;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.504170297 UTC

[section ""data" . Data.Maybe.mapMaybe_closure" {
     Data.Maybe.mapMaybe_closure:
         const Data.Maybe.mapMaybe_info;
 },
 sat_srGT_entry() //  [R1]
         { []
         }
     {offset
       crNV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto crNW; else goto crNX;
       crNW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       crNX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.mapMaybe_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_srGT_info" {
     sat_srGT_info:
         const sat_srGT_entry;
         const 2;
         const 18;
 },
 Data.Maybe.mapMaybe_entry() //  [R2, R3]
         { []
         }
     {offset
       crO2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto crO3; else goto urOi;
       crO3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Maybe.mapMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       urOi: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _crND() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Maybe.mapMaybe_info" {
     Data.Maybe.mapMaybe_info:
         const Data.Maybe.mapMaybe_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _crND() //  []
         { []
         }
     {offset
       crND: // global
           I64[Sp - 8] = block_crNG_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urOk; else goto crNH;
       urOk: // global
           call _crNG(R1) args: 0, res: 0, upd: 0;
       crNH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _crNG() //  [R1]
         { []
         }
     {offset
       crNG: // global
           if (R1 & 7 == 1) goto crNZ; else goto crO0;
       crNZ: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       crO0: // global
           I64[Sp] = block_crNM_info;
           R2 = P64[R1 + 6];
           _srGQ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _srGQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_crNG_info" {
     block_crNG_info:
         const _crNG;
         const 130;
         const 30;
 },
 _crNM() //  [R1]
         { []
         }
     {offset
       crNM: // global
           _srGM::P64 = P64[Sp + 8];
           _srGQ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto crOb; else goto crOd;
       crOb: // global
           P64[Sp + 8] = _srGM::P64;
           P64[Sp + 16] = _srGQ::P64;
           Sp = Sp + 8;
           call _crND() args: 0, res: 0, upd: 0;
       crOd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto crOg; else goto crOf;
       crOg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crOf: // global
           _srGS::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_srGT_info;
           P64[Hp - 32] = _srGM::P64;
           P64[Hp - 24] = _srGQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _srGS::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_crNM_info" {
     block_crNM_info:
         const _crNM;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.514322332 UTC

[section ""cstring" . Data.Maybe.$trModule2_bytes" {
     Data.Maybe.$trModule2_bytes:
         I8[] [68,97,116,97,46,77,97,121,98,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.515997605 UTC

[section ""data" . Data.Maybe.$trModule1_closure" {
     Data.Maybe.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Maybe.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.517640758 UTC

[section ""cstring" . Data.Maybe.$trModule4_bytes" {
     Data.Maybe.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.519245295 UTC

[section ""data" . Data.Maybe.$trModule3_closure" {
     Data.Maybe.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Maybe.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.521308479 UTC

[section ""data" . Data.Maybe.$trModule_closure" {
     Data.Maybe.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Maybe.$trModule3_closure+1;
         const Data.Maybe.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:05.523013518 UTC

[section ""relreadonly" . SrIS_srt" {
     SrIS_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Maybe.fromJust_closure;
         const Data.Maybe.fromJust1_closure;
 }]

