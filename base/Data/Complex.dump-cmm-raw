
==================== Raw Cmm ====================
2018-03-16 16:12:29.302794979 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:12:29.30507647 UTC

[section ""data" . Data.Complex.$W:+_closure" {
     Data.Complex.$W:+_closure:
         const Data.Complex.$W:+_info;
 },
 Data.Complex.$W:+_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHtk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHtl; else goto cgHtm;
       cgHtl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$W:+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHtm: // global
           I64[Sp - 16] = block_cgHtf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$W:+_info" {
     Data.Complex.$W:+_info:
         const Data.Complex.$W:+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHtf() //  [R1]
         { []
         }
     {offset
       cgHtf: // global
           I64[Sp] = block_cgHth_info;
           _sgA6F::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sgA6F::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHtf_info" {
     block_cgHtf_info:
         const _cgHtf;
         const 1;
         const 30;
 },
 _cgHth() //  [R1]
         { []
         }
     {offset
       cgHth: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHtq; else goto cgHtp;
       cgHtq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHtp: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHth_info" {
     block_cgHth_info:
         const _cgHth;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.312169622 UTC

[section ""data" . Data.Complex.$fStorableComplex2_closure" {
     Data.Complex.$fStorableComplex2_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.315471731 UTC

[section ""data" . Data.Complex.$fStorableComplex1_closure" {
     Data.Complex.$fStorableComplex1_closure:
         const Data.Complex.$fStorableComplex1_info;
 },
 Data.Complex.$fStorableComplex1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHtM: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgHtQ; else goto cgHtR;
       cgHtQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHtR: // global
           I64[Sp - 24] = block_cgHtJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHtV; else goto cgHtK;
       ugHtV: // global
           call _cgHtJ(R1) args: 0, res: 0, upd: 0;
       cgHtK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex1_info" {
     Data.Complex.$fStorableComplex1_info:
         const Data.Complex.$fStorableComplex1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cgHtJ() //  [R1]
         { []
         }
     {offset
       cgHtJ: // global
           I64[Sp - 8] = block_cgHtP_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_ppv_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHtJ_info" {
     block_cgHtJ_info:
         const _cgHtJ;
         const 2;
         const 30;
 },
 _cgHtP() //  []
         { []
         }
     {offset
       cgHtP: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppv_info;
           _sgA6N::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = Data.Complex.$fStorableComplex2_closure+1;
           P64[Sp + 24] = _sgA6N::P64;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHtP_info" {
     block_cgHtP_info:
         const _cgHtP;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.326023929 UTC

[section ""data" . Data.Complex.$fStorableComplex3_closure" {
     Data.Complex.$fStorableComplex3_closure:
         const Data.Complex.$fStorableComplex3_info;
 },
 sat_sgA70_entry() //  [R1]
         { []
         }
     {offset
       cgHuo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHup; else goto cgHuq;
       cgHup: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHuq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$W:+_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgA70_info" {
     sat_sgA70_info:
         const sat_sgA70_entry;
         const 2;
         const 18;
 },
 Data.Complex.$fStorableComplex3_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHur: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgHus; else goto cgHut;
       cgHus: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHut: // global
           I64[Sp - 24] = block_cgHug_info;
           _sgA6R::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_pv_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _sgA6R::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex3_info" {
     Data.Complex.$fStorableComplex3_info:
         const Data.Complex.$fStorableComplex3_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cgHug() //  [R1]
         { []
         }
     {offset
       cgHug: // global
           _sgA6R::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgHui_info;
           R2 = _sgA6R::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = Data.Complex.$fStorableComplex2_closure+1;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHug_info" {
     block_cgHug_info:
         const _cgHug;
         const 2;
         const 30;
 },
 _cgHui() //  [R1]
         { []
         }
     {offset
       cgHui: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHux; else goto cgHuw;
       cgHux: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHuw: // global
           I64[Hp - 24] = sat_sgA70_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHui_info" {
     block_cgHui_info:
         const _cgHui;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.340561987 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$cliftA2_closure" {
     Data.Complex.$fApplicativeComplex_$cliftA2_closure:
         const Data.Complex.$fApplicativeComplex_$cliftA2_info;
 },
 Data.Complex.$fApplicativeComplex_$cliftA2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHuX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHva; else goto cgHvb;
       cgHva: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$cliftA2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHvb: // global
           I64[Sp - 24] = block_cgHuU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHvj; else goto cgHuV;
       ugHvj: // global
           call _cgHuU(R1) args: 0, res: 0, upd: 0;
       cgHuV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$cliftA2_info" {
     Data.Complex.$fApplicativeComplex_$cliftA2_info:
         const Data.Complex.$fApplicativeComplex_$cliftA2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHuU() //  [R1]
         { []
         }
     {offset
       cgHuU: // global
           I64[Sp - 8] = block_cgHv0_info;
           _sgA75::P64 = P64[R1 + 7];
           _sgA76::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgA76::P64;
           P64[Sp + 16] = _sgA75::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHvi; else goto cgHv1;
       ugHvi: // global
           call _cgHv0(R1) args: 0, res: 0, upd: 0;
       cgHv1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHuU_info" {
     block_cgHuU_info:
         const _cgHuU;
         const 2;
         const 30;
 },
 _cgHv0() //  [R1]
         { []
         }
     {offset
       cgHv0: // global
           I64[Sp] = block_cgHv5_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           _sgA79::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 24] = _sgA79::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHv0_info" {
     block_cgHv0_info:
         const _cgHv0;
         const 3;
         const 30;
 },
 _cgHv5() //  [R1]
         { []
         }
     {offset
       cgHv5: // global
           _sgA71::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgHv7_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           _sgA7a::P64 = R1;
           R1 = _sgA71::P64;
           P64[Sp + 24] = _sgA7a::P64;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHv5_info" {
     block_cgHv5_info:
         const _cgHv5;
         const 3;
         const 30;
 },
 _cgHv7() //  [R1]
         { []
         }
     {offset
       cgHv7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHvh; else goto cgHvg;
       cgHvh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHvg: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHv7_info" {
     block_cgHv7_info:
         const _cgHv7;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.351971961 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$c<*>_closure" {
     Data.Complex.$fApplicativeComplex_$c<*>_closure:
         const Data.Complex.$fApplicativeComplex_$c<*>_info;
 },
 Data.Complex.$fApplicativeComplex_$c<*>_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHvM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHvZ; else goto cgHw0;
       cgHvZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHw0: // global
           I64[Sp - 16] = block_cgHvJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHw8; else goto cgHvK;
       ugHw8: // global
           call _cgHvJ(R1) args: 0, res: 0, upd: 0;
       cgHvK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$c<*>_info" {
     Data.Complex.$fApplicativeComplex_$c<*>_info:
         const Data.Complex.$fApplicativeComplex_$c<*>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHvJ() //  [R1]
         { []
         }
     {offset
       cgHvJ: // global
           I64[Sp - 8] = block_cgHvP_info;
           _sgA7f::P64 = P64[R1 + 7];
           _sgA7g::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgA7g::P64;
           P64[Sp + 8] = _sgA7f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHw7; else goto cgHvQ;
       ugHw7: // global
           call _cgHvP(R1) args: 0, res: 0, upd: 0;
       cgHvQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHvJ_info" {
     block_cgHvJ_info:
         const _cgHvJ;
         const 1;
         const 30;
 },
 _cgHvP() //  [R1]
         { []
         }
     {offset
       cgHvP: // global
           I64[Sp] = block_cgHvU_info;
           R2 = P64[R1 + 7];
           _sgA7j::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sgA7j::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHvP_info" {
     block_cgHvP_info:
         const _cgHvP;
         const 2;
         const 30;
 },
 _cgHvU() //  [R1]
         { []
         }
     {offset
       cgHvU: // global
           _sgA7g::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgHvW_info;
           R2 = P64[Sp + 16];
           _sgA7k::P64 = R1;
           R1 = _sgA7g::P64;
           P64[Sp + 16] = _sgA7k::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHvU_info" {
     block_cgHvU_info:
         const _cgHvU;
         const 2;
         const 30;
 },
 _cgHvW() //  [R1]
         { []
         }
     {offset
       cgHvW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHw6; else goto cgHw5;
       cgHw6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHw5: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHvW_info" {
     block_cgHvW_info:
         const _cgHvW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.361981797 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$cpure_closure" {
     Data.Complex.$fApplicativeComplex_$cpure_closure:
         const Data.Complex.$fApplicativeComplex_$cpure_info;
 },
 Data.Complex.$fApplicativeComplex_$cpure_entry() //  [R2]
         { []
         }
     {offset
       cgHwy: // global
           R3 = R2;
           R2 = R2;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$cpure_info" {
     Data.Complex.$fApplicativeComplex_$cpure_info:
         const Data.Complex.$fApplicativeComplex_$cpure_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.366121672 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$ctraverse_closure" {
     Data.Complex.$fTraversableComplex_$ctraverse_closure:
         const Data.Complex.$fTraversableComplex_$ctraverse_info;
 },
 Data.Complex.$fTraversableComplex_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cgHwM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHwN; else goto cgHwO;
       cgHwN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHwO: // global
           I64[Sp - 24] = block_cgHwJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHwW; else goto cgHwK;
       ugHwW: // global
           call _cgHwJ(R1) args: 0, res: 0, upd: 0;
       cgHwK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$ctraverse_info" {
     Data.Complex.$fTraversableComplex_$ctraverse_info:
         const Data.Complex.$fTraversableComplex_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHwJ() //  [R1]
         { []
         }
     {offset
       cgHwJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgHwT; else goto cgHwS;
       cgHwT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHwS: // global
           _sgA7r::P64 = P64[R1 + 7];
           _sgA7s::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           _sgA7o::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgA7o::P64;
           P64[Hp - 32] = _sgA7s::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgA7o::P64;
           P64[Hp] = _sgA7r::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Data.Complex.$W:+_closure+2;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHwJ_info" {
     block_cgHwJ_info:
         const _cgHwJ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.37209565 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cnull_closure" {
     Data.Complex.$fFoldableComplex_$cnull_closure:
         const Data.Complex.$fFoldableComplex_$cnull_info;
 },
 Data.Complex.$fFoldableComplex_$cnull_entry() //  [R2]
         { []
         }
     {offset
       cgHxf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHxg; else goto cgHxh;
       cgHxg: // global
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHxh: // global
           I64[Sp - 8] = block_cgHxc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHxl; else goto cgHxd;
       ugHxl: // global
           call _cgHxc() args: 0, res: 0, upd: 0;
       cgHxd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cnull_info" {
     Data.Complex.$fFoldableComplex_$cnull_info:
         const Data.Complex.$fFoldableComplex_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHxc() //  []
         { []
         }
     {offset
       cgHxc: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHxc_info" {
     block_cgHxc_info:
         const _cgHxc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.37934857 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldr_closure" {
     Data.Complex.$fFoldableComplex_$cfoldr_closure:
         const Data.Complex.$fFoldableComplex_$cfoldr_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHxD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHxH; else goto cgHxI;
       cgHxH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHxI: // global
           I64[Sp - 24] = block_cgHxA_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHxM; else goto cgHxB;
       ugHxM: // global
           call _cgHxA(R1) args: 0, res: 0, upd: 0;
       cgHxB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldr_info" {
     Data.Complex.$fFoldableComplex_$cfoldr_info:
         const Data.Complex.$fFoldableComplex_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHxA() //  [R1]
         { []
         }
     {offset
       cgHxA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgHxL; else goto cgHxK;
       cgHxL: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHxK: // global
           _sgA7D::P64 = P64[R1 + 7];
           _sgA7E::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           _sgA7z::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sgA7z::P64;
           P64[Hp - 8] = _sgA7E::P64;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 32;
           R2 = _sgA7D::P64;
           R1 = _sgA7z::P64;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHxA_info" {
     block_cgHxA_info:
         const _cgHxA;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.38567585 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldMap_closure" {
     Data.Complex.$fFoldableComplex_$cfoldMap_closure:
         const Data.Complex.$fFoldableComplex_$cfoldMap_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHy4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHy5; else goto cgHy6;
       cgHy5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHy6: // global
           I64[Sp - 24] = block_cgHy1_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHye; else goto cgHy2;
       ugHye: // global
           call _cgHy1(R1) args: 0, res: 0, upd: 0;
       cgHy2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldMap_info" {
     Data.Complex.$fFoldableComplex_$cfoldMap_info:
         const Data.Complex.$fFoldableComplex_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHy1() //  [R1]
         { []
         }
     {offset
       cgHy1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgHyb; else goto cgHya;
       cgHyb: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHya: // global
           _sgA7K::P64 = P64[R1 + 7];
           _sgA7L::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           _sgA7H::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgA7H::P64;
           P64[Hp - 32] = _sgA7L::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgA7H::P64;
           P64[Hp] = _sgA7K::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHy1_info" {
     block_cgHy1_info:
         const _cgHy1;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.392059841 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfold_closure" {
     Data.Complex.$fFoldableComplex_$cfold_closure:
         const Data.Complex.$fFoldableComplex_$cfold_info;
 },
 Data.Complex.$fFoldableComplex_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHyx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHyy; else goto cgHyz;
       cgHyy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHyz: // global
           I64[Sp - 16] = block_cgHyu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHyD; else goto cgHyv;
       ugHyD: // global
           call _cgHyu(R1) args: 0, res: 0, upd: 0;
       cgHyv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfold_info" {
     Data.Complex.$fFoldableComplex_$cfold_info:
         const Data.Complex.$fFoldableComplex_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHyu() //  [R1]
         { []
         }
     {offset
       cgHyu: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHyu_info" {
     block_cgHyu_info:
         const _cgHyu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.397852413 UTC

[section ""data" . Data.Complex.$fFoldableComplex2_closure" {
     Data.Complex.$fFoldableComplex2_closure:
         const Data.Complex.$fFoldableComplex2_info;
 },
 Data.Complex.$fFoldableComplex2_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHyW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHyX; else goto cgHyY;
       cgHyX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHyY: // global
           I64[Sp - 16] = block_cgHyT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHz2; else goto cgHyU;
       ugHz2: // global
           call _cgHyT(R1) args: 0, res: 0, upd: 0;
       cgHyU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex2_info" {
     Data.Complex.$fFoldableComplex2_info:
         const Data.Complex.$fFoldableComplex2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHyT() //  [R1]
         { []
         }
     {offset
       cgHyT: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHyT_info" {
     block_cgHyT_info:
         const _cgHyT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.404038579 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cminimum_closure" {
     Data.Complex.$fFoldableComplex_$cminimum_closure:
         const Data.Complex.$fFoldableComplex_$cminimum_info;
 },
 Data.Complex.$fFoldableComplex_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHzl: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgHzm; else goto cgHzn;
       cgHzm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHzn: // global
           I64[Sp - 16] = block_cgHzi_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHzD; else goto cgHzj;
       ugHzD: // global
           call _cgHzi(R1) args: 0, res: 0, upd: 0;
       cgHzj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cminimum_info" {
     Data.Complex.$fFoldableComplex_$cminimum_info:
         const Data.Complex.$fFoldableComplex_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHzi() //  [R1]
         { []
         }
     {offset
       cgHzi: // global
           I64[Sp - 8] = block_cgHzq_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pp_info;
           _sgA81::P64 = P64[R1 + 7];
           P64[Sp - 24] = _sgA81::P64;
           _sgA82::P64 = P64[R1 + 15];
           P64[Sp - 16] = _sgA82::P64;
           P64[Sp] = _sgA82::P64;
           P64[Sp + 8] = _sgA81::P64;
           Sp = Sp - 32;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHzi_info" {
     block_cgHzi_info:
         const _cgHzi;
         const 1;
         const 30;
 },
 _cgHzq() //  [R1]
         { []
         }
     {offset
       cgHzq: // global
           if (R1 & 7 == 1) goto cgHzx; else goto cgHzB;
       cgHzx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgHzB: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHzq_info" {
     block_cgHzq_info:
         const _cgHzq;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.413788405 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cmaximum_closure" {
     Data.Complex.$fFoldableComplex_$cmaximum_closure:
         const Data.Complex.$fFoldableComplex_$cmaximum_info;
 },
 Data.Complex.$fFoldableComplex_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHzZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgHA0; else goto cgHA1;
       cgHA0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHA1: // global
           I64[Sp - 16] = block_cgHzW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHAh; else goto cgHzX;
       ugHAh: // global
           call _cgHzW(R1) args: 0, res: 0, upd: 0;
       cgHzX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cmaximum_info" {
     Data.Complex.$fFoldableComplex_$cmaximum_info:
         const Data.Complex.$fFoldableComplex_$cmaximum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHzW() //  [R1]
         { []
         }
     {offset
       cgHzW: // global
           I64[Sp - 8] = block_cgHA4_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pp_info;
           _sgA87::P64 = P64[R1 + 7];
           P64[Sp - 24] = _sgA87::P64;
           _sgA88::P64 = P64[R1 + 15];
           P64[Sp - 16] = _sgA88::P64;
           P64[Sp] = _sgA88::P64;
           P64[Sp + 8] = _sgA87::P64;
           Sp = Sp - 32;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHzW_info" {
     block_cgHzW_info:
         const _cgHzW;
         const 1;
         const 30;
 },
 _cgHA4() //  [R1]
         { []
         }
     {offset
       cgHA4: // global
           if (R1 & 7 == 1) goto cgHAb; else goto cgHAf;
       cgHAb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgHAf: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHA4_info" {
     block_cgHA4_info:
         const _cgHA4;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.422353132 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$celem_closure" {
     Data.Complex.$fFoldableComplex_$celem_closure:
         const Data.Complex.$fFoldableComplex_$celem_info;
 },
 f_sgA8c_entry() //  [R1]
         { []
         }
     {offset
       cgHAE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHAF; else goto cgHAG;
       cgHAF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHAG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sgA8c_info" {
     f_sgA8c_info:
         const f_sgA8c_entry;
         const 2;
         const 18;
 },
 sat_sgA8i_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHAP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHAQ; else goto cgHAR;
       cgHAQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHAR: // global
           I64[Sp - 16] = block_cgHAM_info;
           _sgA8c::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sgA8c::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHB7; else goto cgHAN;
       ugHB7: // global
           call _cgHAM(R1) args: 0, res: 0, upd: 0;
       cgHAN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgA8i_info" {
     sat_sgA8i_info:
         const sat_sgA8i_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgHAM() //  [R1]
         { []
         }
     {offset
       cgHAM: // global
           I64[Sp - 8] = block_cgHAU_info;
           R2 = P64[R1 + 7];
           _sgA8g::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgA8g::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHAM_info" {
     block_cgHAM_info:
         const _cgHAM;
         const 1;
         const 30;
 },
 _cgHAU() //  [R1]
         { []
         }
     {offset
       cgHAU: // global
           if (R1 & 7 == 1) goto cgHB1; else goto cgHB5;
       cgHB1: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cgHB5: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHAU_info" {
     block_cgHAU_info:
         const _cgHAU;
         const 2;
         const 30;
 },
 Data.Complex.$fFoldableComplex_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHB8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgHBc; else goto cgHBb;
       cgHBc: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHBb: // global
           I64[Hp - 40] = f_sgA8c_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sgA8i_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$celem_info" {
     Data.Complex.$fFoldableComplex_$celem_info:
         const Data.Complex.$fFoldableComplex_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.433141817 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldr1_closure" {
     Data.Complex.$fFoldableComplex_$cfoldr1_closure:
         const Data.Complex.$fFoldableComplex_$cfoldr1_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHBJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHBK; else goto cgHBL;
       cgHBK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHBL: // global
           I64[Sp - 16] = block_cgHBG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHBP; else goto cgHBH;
       ugHBP: // global
           call _cgHBG(R1) args: 0, res: 0, upd: 0;
       cgHBH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldr1_info" {
     Data.Complex.$fFoldableComplex_$cfoldr1_info:
         const Data.Complex.$fFoldableComplex_$cfoldr1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHBG() //  [R1]
         { []
         }
     {offset
       cgHBG: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHBG_info" {
     block_cgHBG_info:
         const _cgHBG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.438911129 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldl'_closure" {
     Data.Complex.$fFoldableComplex_$cfoldl'_closure:
         const Data.Complex.$fFoldableComplex_$cfoldl'_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHC6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHCa; else goto cgHCb;
       cgHCa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHCb: // global
           I64[Sp - 24] = block_cgHC3_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHCf; else goto cgHC4;
       ugHCf: // global
           call _cgHC3(R1) args: 0, res: 0, upd: 0;
       cgHC4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldl'_info" {
     Data.Complex.$fFoldableComplex_$cfoldl'_info:
         const Data.Complex.$fFoldableComplex_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHC3() //  [R1]
         { []
         }
     {offset
       cgHC3: // global
           I64[Sp] = block_cgHC9_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           _sgA8t::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _sgA8t::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHC3_info" {
     block_cgHC3_info:
         const _cgHC3;
         const 2;
         const 30;
 },
 _cgHC9() //  [R1]
         { []
         }
     {offset
       cgHC9: // global
           R3 = P64[Sp + 16];
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHC9_info" {
     block_cgHC9_info:
         const _cgHC9;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.445469542 UTC

[section ""data" . lvl_rgA6e_closure" {
     lvl_rgA6e_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.44787041 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$clength_closure" {
     Data.Complex.$fFoldableComplex_$clength_closure:
         const Data.Complex.$fFoldableComplex_$clength_info;
 },
 Data.Complex.$fFoldableComplex_$clength_entry() //  [R2]
         { []
         }
     {offset
       cgHCA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHCB; else goto cgHCC;
       cgHCB: // global
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHCC: // global
           I64[Sp - 8] = block_cgHCx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHCG; else goto cgHCy;
       ugHCG: // global
           call _cgHCx() args: 0, res: 0, upd: 0;
       cgHCy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$clength_info" {
     Data.Complex.$fFoldableComplex_$clength_info:
         const Data.Complex.$fFoldableComplex_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHCx() //  []
         { []
         }
     {offset
       cgHCx: // global
           R1 = lvl_rgA6e_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHCx_info" {
     block_cgHCx_info:
         const _cgHCx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.454444725 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldl_closure" {
     Data.Complex.$fFoldableComplex_$cfoldl_closure:
         const Data.Complex.$fFoldableComplex_$cfoldl_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHCY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHD2; else goto cgHD3;
       cgHD2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHD3: // global
           I64[Sp - 24] = block_cgHCV_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHD7; else goto cgHCW;
       ugHD7: // global
           call _cgHCV(R1) args: 0, res: 0, upd: 0;
       cgHCW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldl_info" {
     Data.Complex.$fFoldableComplex_$cfoldl_info:
         const Data.Complex.$fFoldableComplex_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHCV() //  [R1]
         { []
         }
     {offset
       cgHCV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgHD6; else goto cgHD5;
       cgHD6: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHD5: // global
           _sgA8D::P64 = P64[R1 + 7];
           _sgA8E::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           _sgA8z::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sgA8z::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sgA8D::P64;
           R3 = _sgA8E::P64;
           R2 = Hp - 32;
           R1 = _sgA8z::P64;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHCV_info" {
     block_cgHCV_info:
         const _cgHCV;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.460935663 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldr'_closure" {
     Data.Complex.$fFoldableComplex_$cfoldr'_closure:
         const Data.Complex.$fFoldableComplex_$cfoldr'_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHDp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHDt; else goto cgHDu;
       cgHDt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHDu: // global
           I64[Sp - 24] = block_cgHDm_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHDy; else goto cgHDn;
       ugHDy: // global
           call _cgHDm(R1) args: 0, res: 0, upd: 0;
       cgHDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldr'_info" {
     Data.Complex.$fFoldableComplex_$cfoldr'_info:
         const Data.Complex.$fFoldableComplex_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHDm() //  [R1]
         { []
         }
     {offset
       cgHDm: // global
           I64[Sp] = block_cgHDs_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 15];
           _sgA8K::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _sgA8K::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHDm_info" {
     block_cgHDm_info:
         const _cgHDm;
         const 2;
         const 30;
 },
 _cgHDs() //  [R1]
         { []
         }
     {offset
       cgHDs: // global
           R3 = R1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHDs_info" {
     block_cgHDs_info:
         const _cgHDs;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.468078826 UTC

[section ""data" . Data.Complex.$fFoldableComplex1_closure" {
     Data.Complex.$fFoldableComplex1_closure:
         const Data.Complex.$fFoldableComplex1_info;
 },
 Data.Complex.$fFoldableComplex1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHDS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHDT; else goto cgHDU;
       cgHDT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHDU: // global
           I64[Sp - 16] = block_cgHDP_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHDY; else goto cgHDQ;
       ugHDY: // global
           call _cgHDP(R1) args: 0, res: 0, upd: 0;
       cgHDQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex1_info" {
     Data.Complex.$fFoldableComplex1_info:
         const Data.Complex.$fFoldableComplex1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHDP() //  [R1]
         { []
         }
     {offset
       cgHDP: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHDP_info" {
     block_cgHDP_info:
         const _cgHDP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.476641876 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$ctoList_closure" {
     Data.Complex.$fFoldableComplex_$ctoList_closure:
         const Data.Complex.$fFoldableComplex_$ctoList_info;
 },
 Data.Complex.$fFoldableComplex_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cgHEh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHEm; else goto cgHEn;
       cgHEm: // global
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHEn: // global
           I64[Sp - 8] = block_cgHEe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHEr; else goto cgHEf;
       ugHEr: // global
           call _cgHEe(R1) args: 0, res: 0, upd: 0;
       cgHEf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$ctoList_info" {
     Data.Complex.$fFoldableComplex_$ctoList_info:
         const Data.Complex.$fFoldableComplex_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHEe() //  [R1]
         { []
         }
     {offset
       cgHEe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgHEq; else goto cgHEp;
       cgHEq: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHEp: // global
           _sgA8U::P64 = P64[R1 + 7];
           _sgA8V::P64 = P64[R1 + 15];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sgA8V::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgA8U::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHEe_info" {
     block_cgHEe_info:
         const _cgHEe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.484766752 UTC

[section ""data" . Data.Complex.$fFoldableComplex_closure" {
     Data.Complex.$fFoldableComplex_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Complex.$fFoldableComplex_$cfold_closure+2;
         const Data.Complex.$fFoldableComplex_$cfoldMap_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldr_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldr'_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldl_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldl'_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldr1_closure+2;
         const Data.Complex.$fFoldableComplex_$cfoldr1_closure+2;
         const Data.Complex.$fFoldableComplex_$ctoList_closure+1;
         const Data.Complex.$fFoldableComplex_$cnull_closure+1;
         const Data.Complex.$fFoldableComplex_$clength_closure+1;
         const Data.Complex.$fFoldableComplex_$celem_closure+2;
         const Data.Complex.$fFoldableComplex_$cmaximum_closure+2;
         const Data.Complex.$fFoldableComplex_$cminimum_closure+2;
         const Data.Complex.$fFoldableComplex2_closure+2;
         const Data.Complex.$fFoldableComplex1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.488993208 UTC

[section ""data" . Data.Complex.$fFunctorComplex_$c<$_closure" {
     Data.Complex.$fFunctorComplex_$c<$_closure:
         const Data.Complex.$fFunctorComplex_$c<$_info;
 },
 Data.Complex.$fFunctorComplex_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHEL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHEM; else goto cgHEN;
       cgHEM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFunctorComplex_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHEN: // global
           I64[Sp - 16] = block_cgHEI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHER; else goto cgHEJ;
       ugHER: // global
           call _cgHEI() args: 0, res: 0, upd: 0;
       cgHEJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFunctorComplex_$c<$_info" {
     Data.Complex.$fFunctorComplex_$c<$_info:
         const Data.Complex.$fFunctorComplex_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHEI() //  []
         { []
         }
     {offset
       cgHEI: // global
           _sgA8X::P64 = P64[Sp + 8];
           R3 = _sgA8X::P64;
           R2 = _sgA8X::P64;
           Sp = Sp + 16;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHEI_info" {
     block_cgHEI_info:
         const _cgHEI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.497779634 UTC

[section ""data" . Data.Complex.$fFunctorComplex_$cfmap_closure" {
     Data.Complex.$fFunctorComplex_$cfmap_closure:
         const Data.Complex.$fFunctorComplex_$cfmap_info;
 },
 Data.Complex.$fFunctorComplex_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHF8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHFg; else goto cgHFh;
       cgHFg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFunctorComplex_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHFh: // global
           I64[Sp - 16] = block_cgHF5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHFn; else goto cgHF6;
       ugHFn: // global
           call _cgHF5(R1) args: 0, res: 0, upd: 0;
       cgHF6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFunctorComplex_$cfmap_info" {
     Data.Complex.$fFunctorComplex_$cfmap_info:
         const Data.Complex.$fFunctorComplex_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHF5() //  [R1]
         { []
         }
     {offset
       cgHF5: // global
           I64[Sp - 8] = block_cgHFb_info;
           R2 = P64[R1 + 7];
           _sgA96::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgA96::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHF5_info" {
     block_cgHF5_info:
         const _cgHF5;
         const 1;
         const 30;
 },
 _cgHFb() //  [R1]
         { []
         }
     {offset
       cgHFb: // global
           _sgA96::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgHFd_info;
           R2 = _sgA96::P64;
           _sgA97::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sgA97::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHFb_info" {
     block_cgHFb_info:
         const _cgHFb;
         const 2;
         const 30;
 },
 _cgHFd() //  [R1]
         { []
         }
     {offset
       cgHFd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHFm; else goto cgHFl;
       cgHFm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHFl: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHFd_info" {
     block_cgHFd_info:
         const _cgHFd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.505739025 UTC

[section ""data" . Data.Complex.$fFunctorComplex_closure" {
     Data.Complex.$fFunctorComplex_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Complex.$fFunctorComplex_$cfmap_closure+2;
         const Data.Complex.$fFunctorComplex_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.508361615 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$csequenceA_closure" {
     Data.Complex.$fTraversableComplex_$csequenceA_closure:
         const Data.Complex.$fTraversableComplex_$csequenceA_info;
 },
 Data.Complex.$fTraversableComplex_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHFN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHFO; else goto cgHFP;
       cgHFO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHFP: // global
           I64[Sp - 16] = block_cgHFK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHFT; else goto cgHFL;
       ugHFT: // global
           call _cgHFK(R1) args: 0, res: 0, upd: 0;
       cgHFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$csequenceA_info" {
     Data.Complex.$fTraversableComplex_$csequenceA_info:
         const Data.Complex.$fTraversableComplex_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHFK() //  [R1]
         { []
         }
     {offset
       cgHFK: // global
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = Data.Complex.$W:+_closure+2;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHFK_info" {
     block_cgHFK_info:
         const _cgHFK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.514600958 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$cmapM_closure" {
     Data.Complex.$fTraversableComplex_$cmapM_closure:
         const Data.Complex.$fTraversableComplex_$cmapM_info;
 },
 Data.Complex.$fTraversableComplex_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHGc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHGi; else goto cgHGj;
       cgHGi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHGj: // global
           I64[Sp - 24] = block_cgHG9_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHGr; else goto cgHGa;
       ugHGr: // global
           call _cgHG9(R1) args: 0, res: 0, upd: 0;
       cgHGa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$cmapM_info" {
     Data.Complex.$fTraversableComplex_$cmapM_info:
         const Data.Complex.$fTraversableComplex_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHG9() //  [R1]
         { []
         }
     {offset
       cgHG9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgHGm; else goto cgHGl;
       cgHGm: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHGl: // global
           _sgA9i::P64 = P64[R1 + 7];
           _sgA9j::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           _sgA9f::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgA9f::P64;
           P64[Hp - 32] = _sgA9j::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgA9f::P64;
           P64[Hp] = _sgA9i::P64;
           I64[Sp] = block_cgHGh_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHG9_info" {
     block_cgHG9_info:
         const _cgHG9;
         const 2;
         const 30;
 },
 _cgHGh() //  [R1]
         { []
         }
     {offset
       cgHGh: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Data.Complex.$W:+_closure+2;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHGh_info" {
     block_cgHGh_info:
         const _cgHGh;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.52262461 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$csequence_closure" {
     Data.Complex.$fTraversableComplex_$csequence_closure:
         const Data.Complex.$fTraversableComplex_$csequence_info;
 },
 Data.Complex.$fTraversableComplex_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHGN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHGR; else goto cgHGS;
       cgHGR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHGS: // global
           I64[Sp - 16] = block_cgHGK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHGY; else goto cgHGL;
       ugHGY: // global
           call _cgHGK(R1) args: 0, res: 0, upd: 0;
       cgHGL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$csequence_info" {
     Data.Complex.$fTraversableComplex_$csequence_info:
         const Data.Complex.$fTraversableComplex_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHGK() //  [R1]
         { []
         }
     {offset
       cgHGK: // global
           I64[Sp - 8] = block_cgHGQ_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHGK_info" {
     block_cgHGK_info:
         const _cgHGK;
         const 1;
         const 30;
 },
 _cgHGQ() //  [R1]
         { []
         }
     {offset
       cgHGQ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Data.Complex.$W:+_closure+2;
           _sgA9r::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sgA9r::P64;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHGQ_info" {
     block_cgHGQ_info:
         const _cgHGQ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.528958604 UTC

[section ""data" . Data.Complex.$fTraversableComplex_closure" {
     Data.Complex.$fTraversableComplex_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Complex.$fFunctorComplex_closure+1;
         const Data.Complex.$fFoldableComplex_closure+1;
         const Data.Complex.$fTraversableComplex_$ctraverse_closure+3;
         const Data.Complex.$fTraversableComplex_$csequenceA_closure+2;
         const Data.Complex.$fTraversableComplex_$cmapM_closure+3;
         const Data.Complex.$fTraversableComplex_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.532246587 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$c*>_closure" {
     Data.Complex.$fApplicativeComplex_$c*>_closure:
         const Data.Complex.$fApplicativeComplex_$c*>_info;
 },
 Data.Complex.$fApplicativeComplex_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHHm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHHn; else goto cgHHo;
       cgHHn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHHo: // global
           I64[Sp - 16] = block_cgHHj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHHs; else goto cgHHk;
       ugHHs: // global
           call _cgHHj() args: 0, res: 0, upd: 0;
       cgHHk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$c*>_info" {
     Data.Complex.$fApplicativeComplex_$c*>_info:
         const Data.Complex.$fApplicativeComplex_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHHj() //  []
         { []
         }
     {offset
       cgHHj: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHHj_info" {
     block_cgHHj_info:
         const _cgHHj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.538688049 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$c<*_closure" {
     Data.Complex.$fApplicativeComplex_$c<*_closure:
         const Data.Complex.$fApplicativeComplex_$c<*_info;
 },
 Data.Complex.$fApplicativeComplex_$c<*_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHHP; else goto cgHHQ;
       cgHHP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$c<*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHHQ: // global
           I64[Sp - 16] = block_cgHHI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHHY; else goto cgHHJ;
       ugHHY: // global
           call _cgHHI(R1) args: 0, res: 0, upd: 0;
       cgHHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$c<*_info" {
     Data.Complex.$fApplicativeComplex_$c<*_info:
         const Data.Complex.$fApplicativeComplex_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHHI() //  [R1]
         { []
         }
     {offset
       cgHHI: // global
           I64[Sp] = block_cgHHO_info;
           _sgA9A::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sgA9A::P64;
           if (R1 & 7 != 0) goto ugHHX; else goto cgHHS;
       ugHHX: // global
           call _cgHHO() args: 0, res: 0, upd: 0;
       cgHHS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHHI_info" {
     block_cgHHI_info:
         const _cgHHI;
         const 1;
         const 30;
 },
 _cgHHO() //  []
         { []
         }
     {offset
       cgHHO: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHHO_info" {
     block_cgHHO_info:
         const _cgHHO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.544895675 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_closure" {
     Data.Complex.$fApplicativeComplex_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Complex.$fFunctorComplex_closure+1;
         const Data.Complex.$fApplicativeComplex_$cpure_closure+1;
         const Data.Complex.$fApplicativeComplex_$c<*>_closure+2;
         const Data.Complex.$fApplicativeComplex_$cliftA2_closure+3;
         const Data.Complex.$fApplicativeComplex_$c*>_closure+2;
         const Data.Complex.$fApplicativeComplex_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.547396648 UTC

[section ""data" . Data.Complex.$fGeneric1Complex_$cto1_closure" {
     Data.Complex.$fGeneric1Complex_$cto1_closure:
         const Data.Complex.$fGeneric1Complex_$cto1_info;
 },
 Data.Complex.$fGeneric1Complex_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cgHIl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHIm; else goto cgHIn;
       cgHIm: // global
           R2 = R2;
           R1 = Data.Complex.$fGeneric1Complex_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHIn: // global
           I64[Sp - 8] = block_cgHIj_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGeneric1Complex_$cto1_info" {
     Data.Complex.$fGeneric1Complex_$cto1_info:
         const Data.Complex.$fGeneric1Complex_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHIj() //  [R1]
         { []
         }
     {offset
       cgHIj: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHIj_info" {
     block_cgHIj_info:
         const _cgHIj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.552903738 UTC

[section ""data" . Data.Complex.$fGeneric1Complex1_closure" {
     Data.Complex.$fGeneric1Complex1_closure:
         const Data.Complex.$fGeneric1Complex1_info;
 },
 Data.Complex.$fGeneric1Complex1_entry() //  [R2]
         { []
         }
     {offset
       cgHIG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHIK; else goto cgHIL;
       cgHIK: // global
           R2 = R2;
           R1 = Data.Complex.$fGeneric1Complex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHIL: // global
           I64[Sp - 8] = block_cgHID_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHIP; else goto cgHIE;
       ugHIP: // global
           call _cgHID(R1) args: 0, res: 0, upd: 0;
       cgHIE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGeneric1Complex1_info" {
     Data.Complex.$fGeneric1Complex1_info:
         const Data.Complex.$fGeneric1Complex1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHID() //  [R1]
         { []
         }
     {offset
       cgHID: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHIO; else goto cgHIN;
       cgHIO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHIN: // global
           _sgA9M::P64 = P64[R1 + 7];
           _sgA9N::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sgA9M::P64;
           P64[Hp] = _sgA9N::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHID_info" {
     block_cgHID_info:
         const _cgHID;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.558538983 UTC

[section ""data" . Data.Complex.$fGeneric1Complex_closure" {
     Data.Complex.$fGeneric1Complex_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Complex.$fGeneric1Complex1_closure+1;
         const Data.Complex.$fGeneric1Complex_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.561024776 UTC

[section ""data" . Data.Complex.$fGenericComplex_$cto_closure" {
     Data.Complex.$fGenericComplex_$cto_closure:
         const Data.Complex.$fGenericComplex_$cto_info;
 },
 Data.Complex.$fGenericComplex_$cto_entry() //  [R2]
         { []
         }
     {offset
       cgHJ7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHJ8; else goto cgHJ9;
       cgHJ8: // global
           R2 = R2;
           R1 = Data.Complex.$fGenericComplex_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHJ9: // global
           I64[Sp - 8] = block_cgHJ5_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGenericComplex_$cto_info" {
     Data.Complex.$fGenericComplex_$cto_info:
         const Data.Complex.$fGenericComplex_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHJ5() //  [R1]
         { []
         }
     {offset
       cgHJ5: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHJ5_info" {
     block_cgHJ5_info:
         const _cgHJ5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.567136423 UTC

[section ""data" . Data.Complex.$fGenericComplex1_closure" {
     Data.Complex.$fGenericComplex1_closure:
         const Data.Complex.$fGenericComplex1_info;
 },
 Data.Complex.$fGenericComplex1_entry() //  [R2]
         { []
         }
     {offset
       cgHJs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHJw; else goto cgHJx;
       cgHJw: // global
           R2 = R2;
           R1 = Data.Complex.$fGenericComplex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHJx: // global
           I64[Sp - 8] = block_cgHJp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHJB; else goto cgHJq;
       ugHJB: // global
           call _cgHJp(R1) args: 0, res: 0, upd: 0;
       cgHJq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGenericComplex1_info" {
     Data.Complex.$fGenericComplex1_info:
         const Data.Complex.$fGenericComplex1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHJp() //  [R1]
         { []
         }
     {offset
       cgHJp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHJA; else goto cgHJz;
       cgHJA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHJz: // global
           _sgA9U::P64 = P64[R1 + 7];
           _sgA9V::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sgA9U::P64;
           P64[Hp] = _sgA9V::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHJp_info" {
     block_cgHJp_info:
         const _cgHJp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.572084261 UTC

[section ""data" . Data.Complex.$fGenericComplex_closure" {
     Data.Complex.$fGenericComplex_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Complex.$fGenericComplex1_closure+1;
         const Data.Complex.$fGenericComplex_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.575600552 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgunfold_closure" {
     Data.Complex.$fDataComplex_$cgunfold_closure:
         const Data.Complex.$fDataComplex_$cgunfold_info;
 },
 sat_sgAa0_entry() //  [R1]
         { []
         }
     {offset
       cgHJZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHK0; else goto cgHK1;
       cgHK0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHK1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Complex.$W:+_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAa0_info" {
     sat_sgAa0_info:
         const sat_sgAa0_entry;
         const 1;
         const 16;
 },
 sat_sgAa1_entry() //  [R1]
         { []
         }
     {offset
       cgHK2: // global
           _sgAa1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHK3; else goto cgHK4;
       cgHK4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHK6; else goto cgHK5;
       cgHK6: // global
           HpAlloc = 24;
           goto cgHK3;
       cgHK3: // global
           R1 = _sgAa1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHK5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAa1::P64;
           _sgA9W::P64 = P64[_sgAa1::P64 + 16];
           _sgA9X::P64 = P64[_sgAa1::P64 + 24];
           _sgA9Y::P64 = P64[_sgAa1::P64 + 32];
           I64[Hp - 16] = sat_sgAa0_info;
           P64[Hp] = _sgA9Y::P64;
           R3 = Hp - 16;
           R2 = _sgA9W::P64;
           R1 = _sgA9X::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAa1_info" {
     sat_sgAa1_info:
         const sat_sgAa1_entry;
         const 3;
         const 15;
 },
 Data.Complex.$fDataComplex_$cgunfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgHK7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgHKb; else goto cgHKa;
       cgHKb: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgunfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHKa: // global
           I64[Hp - 32] = sat_sgAa1_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _sgA9X::P64 = R3;
           R3 = Hp - 32;
           R2 = R2;
           R1 = _sgA9X::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgunfold_info" {
     Data.Complex.$fDataComplex_$cgunfold_info:
         const Data.Complex.$fDataComplex_$cgunfold_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.588276561 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgfoldl_closure" {
     Data.Complex.$fDataComplex_$cgfoldl_closure:
         const Data.Complex.$fDataComplex_$cgfoldl_info;
 },
 sat_sgAa9_entry() //  [R1]
         { []
         }
     {offset
       cgHKF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHKG; else goto cgHKH;
       cgHKG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHKH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Complex.$W:+_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAa9_info" {
     sat_sgAa9_info:
         const sat_sgAa9_entry;
         const 1;
         const 16;
 },
 sat_sgAaa_entry() //  [R1]
         { []
         }
     {offset
       cgHKI: // global
           _sgAaa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHKJ; else goto cgHKK;
       cgHKK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHKM; else goto cgHKL;
       cgHKM: // global
           HpAlloc = 24;
           goto cgHKJ;
       cgHKJ: // global
           R1 = _sgAaa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHKL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAaa::P64;
           _sgAa2::P64 = P64[_sgAaa::P64 + 16];
           _sgAa3::P64 = P64[_sgAaa::P64 + 24];
           _sgAa4::P64 = P64[_sgAaa::P64 + 32];
           _sgAa7::P64 = P64[_sgAaa::P64 + 40];
           I64[Hp - 16] = sat_sgAa9_info;
           P64[Hp] = _sgAa4::P64;
           R4 = _sgAa7::P64;
           R3 = Hp - 16;
           R2 = _sgAa2::P64;
           R1 = _sgAa3::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaa_info" {
     sat_sgAaa_info:
         const sat_sgAaa_entry;
         const 4;
         const 15;
 },
 Data.Complex.$fDataComplex_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgHKN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHKO; else goto cgHKP;
       cgHKO: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHKP: // global
           I64[Sp - 32] = block_cgHKs_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugHKT; else goto cgHKt;
       ugHKT: // global
           call _cgHKs(R1) args: 0, res: 0, upd: 0;
       cgHKt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgfoldl_info" {
     Data.Complex.$fDataComplex_$cgfoldl_info:
         const Data.Complex.$fDataComplex_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgHKs() //  [R1]
         { []
         }
     {offset
       cgHKs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgHKS; else goto cgHKR;
       cgHKS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHKR: // global
           _sgAa7::P64 = P64[R1 + 7];
           _sgAa8::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_sgAaa_info;
           _sgAa2::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sgAa2::P64;
           _sgAa3::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgAa3::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sgAa7::P64;
           R4 = _sgAa8::P64;
           R3 = Hp - 40;
           R2 = _sgAa2::P64;
           R1 = _sgAa3::P64;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHKs_info" {
     block_cgHKs_info:
         const _cgHKs;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.599364446 UTC

[section ""data" . Data.Complex.$fReadComplex5_closure" {
     Data.Complex.$fReadComplex5_closure:
         const GHC.Types.I#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.600976111 UTC

[section ""cstring" . Data.Complex.$fReadComplex4_bytes" {
     Data.Complex.$fReadComplex4_bytes:
         I8[] [58,43]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.603453921 UTC

[section ""data" . Data.Complex.$fReadComplex3_closure" {
     Data.Complex.$fReadComplex3_closure:
         const Data.Complex.$fReadComplex3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fReadComplex3_entry() //  [R1]
         { []
         }
     {offset
       cgHLk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHLl; else goto cgHLm;
       cgHLl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHLm: // global
           (_cgHLh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgHLh::I64 == 0) goto cgHLj; else goto cgHLi;
       cgHLj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgHLi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgHLh::I64;
           R2 = Data.Complex.$fReadComplex4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex3_info" {
     Data.Complex.$fReadComplex3_info:
         const Data.Complex.$fReadComplex3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.60777644 UTC

[section ""data" . Data.Complex.$fReadComplex2_closure" {
     Data.Complex.$fReadComplex2_closure:
         const Text.Read.Lex.Symbol_con_info;
         const Data.Complex.$fReadComplex3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.614156927 UTC

[section ""data" . Data.Complex.$fReadComplex1_closure" {
     Data.Complex.$fReadComplex1_closure:
         const Data.Complex.$fReadComplex1_info;
         const 0;
 },
 ds1_sgAae_entry() //  [R1]
         { []
         }
     {offset
       cgHLD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHLE; else goto cgHLF;
       cgHLE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHLF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fReadComplex5_closure+1;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sgAae_info" {
     ds1_sgAae_info:
         const ds1_sgAae_entry;
         const 1;
         const 16;
 },
 sat_sgAan_entry() //  [R1]
         { []
         }
     {offset
       cgHMd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHMe; else goto cgHMf;
       cgHMe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHMf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$W:+_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAan_info" {
     sat_sgAan_info:
         const sat_sgAan_entry;
         const 2;
         const 18;
 },
 sat_sgAao_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHMg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHMk; else goto cgHMj;
       cgHMk: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHMj: // global
           _sgAag::P64 = P64[R1 + 7];
           _sgAak::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sgAan_info;
           P64[Hp - 8] = _sgAak::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sgAag::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAao_info" {
     sat_sgAao_info:
         const sat_sgAao_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgAap_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHMl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHMp; else goto cgHMo;
       cgHMp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHMo: // global
           _sgAae::P64 = P64[R1 + 7];
           _sgAag::P64 = P64[R1 + 15];
           _sgAak::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_sgAao_info;
           P64[Hp - 8] = _sgAag::P64;
           P64[Hp] = _sgAak::P64;
           R2 = Hp - 15;
           R1 = _sgAae::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAap_info" {
     sat_sgAap_info:
         const sat_sgAap_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sgAas_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHMt: // global
           _sgAak::P64 = R2;
           _sgAas::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cgHMu; else goto cgHMv;
       cgHMv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHMx; else goto cgHMw;
       cgHMx: // global
           HpAlloc = 32;
           goto cgHMu;
       cgHMu: // global
           R2 = _sgAak::P64;
           R1 = _sgAas::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHMw: // global
           _sgAae::P64 = P64[_sgAas::P64 + 7];
           _sgAag::P64 = P64[_sgAas::P64 + 15];
           I64[Hp - 24] = sat_sgAap_info;
           P64[Hp - 16] = _sgAae::P64;
           P64[Hp - 8] = _sgAag::P64;
           P64[Hp] = _sgAak::P64;
           I64[Sp - 8] = block_cgHMq_info;
           R3 = Hp - 23;
           R2 = Data.Complex.$fReadComplex2_closure+5;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAas_info" {
     sat_sgAas_info:
         const sat_sgAas_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SgBbV_srt;
 },
 _cgHMq() //  [R1]
         { []
         }
     {offset
       cgHMq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgHMA; else goto cgHMz;
       cgHMA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHMz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHMq_info" {
     block_cgHMq_info:
         const _cgHMq;
         const 0;
         const 30;
 },
 sat_sgAat_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHMB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHMC; else goto cgHMD;
       cgHMC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHMD: // global
           I64[Sp - 24] = block_cgHLL_info;
           _sgAae::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sgAae::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHMK; else goto cgHLM;
       ugHMK: // global
           call _cgHLL(R1) args: 0, res: 0, upd: 0;
       cgHLM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAat_info" {
     sat_sgAat_info:
         const sat_sgAat_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const SgBbV_srt;
 },
 _cgHLL() //  [R1]
         { []
         }
     {offset
       cgHLL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHMG; else goto cgHMF;
       cgHMG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHMF: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 6)) goto cgHMI; else goto cgHMJ;
       cgHMI: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgHMJ: // global
           I64[Hp - 16] = sat_sgAas_info;
           _sgAae::P64 = P64[Sp + 8];
           P64[Hp - 8] = _sgAae::P64;
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _sgAae::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHLL_info" {
     block_cgHLL_info:
         const _cgHLL;
         const 2;
         const 12884901918;
         const SgBbV_srt;
 },
 Data.Complex.$fReadComplex1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHML: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgHMP; else goto cgHMO;
       cgHMP: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHMO: // global
           I64[Hp - 32] = ds1_sgAae_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sgAat_info;
           P64[Hp] = Hp - 32;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex1_info" {
     Data.Complex.$fReadComplex1_info:
         const Data.Complex.$fReadComplex1_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SgBbV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.63273389 UTC

[section ""data" . Data.Complex.$fReadComplex_$creadsPrec_closure" {
     Data.Complex.$fReadComplex_$creadsPrec_closure:
         const Data.Complex.$fReadComplex_$creadsPrec_info;
         const 0;
 },
 sat_sgAaw_entry() //  [R1]
         { []
         }
     {offset
       cgHNz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHNA; else goto cgHNB;
       cgHNA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHNB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaw_info" {
     sat_sgAaw_info:
         const sat_sgAaw_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+24;
 },
 Data.Complex.$fReadComplex_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHNC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHNG; else goto cgHNF;
       cgHNG: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHNF: // global
           I64[Hp - 24] = sat_sgAaw_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_$creadsPrec_info" {
     Data.Complex.$fReadComplex_$creadsPrec_info:
         const Data.Complex.$fReadComplex_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.639343312 UTC

[section ""data" . Data.Complex.$fReadComplex_$creadListPrec_closure" {
     Data.Complex.$fReadComplex_$creadListPrec_closure:
         const Data.Complex.$fReadComplex_$creadListPrec_info;
         const 0;
 },
 sat_sgAay_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHNY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAay_info" {
     sat_sgAay_info:
         const sat_sgAay_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgBbV_srt+24;
 },
 Data.Complex.$fReadComplex_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cgHO1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgHO5; else goto cgHO4;
       cgHO5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHO4: // global
           I64[Hp - 8] = sat_sgAay_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_$creadListPrec_info" {
     Data.Complex.$fReadComplex_$creadListPrec_info:
         const Data.Complex.$fReadComplex_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const SgBbV_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.645611592 UTC

[section ""data" . Data.Complex.$fReadComplex_$creadList_closure" {
     Data.Complex.$fReadComplex_$creadList_closure:
         const Data.Complex.$fReadComplex_$creadList_info;
         const 0;
 },
 sat_sgAaA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHOq: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAaA_info" {
     sat_sgAaA_info:
         const sat_sgAaA_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgBbV_srt+24;
 },
 sat_sgAaB_entry() //  [R1]
         { []
         }
     {offset
       cgHOt: // global
           _sgAaB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgHOu; else goto cgHOv;
       cgHOv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgHOx; else goto cgHOw;
       cgHOx: // global
           HpAlloc = 16;
           goto cgHOu;
       cgHOu: // global
           R1 = _sgAaB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHOw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAaB::P64;
           _sgAaz::P64 = P64[_sgAaB::P64 + 16];
           I64[Hp - 8] = sat_sgAaA_info;
           P64[Hp] = _sgAaz::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaB_info" {
     sat_sgAaB_info:
         const sat_sgAaB_entry;
         const 1;
         const 21474836496;
         const SgBbV_srt+24;
 },
 Data.Complex.$fReadComplex_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cgHOy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHOC; else goto cgHOB;
       cgHOC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHOB: // global
           I64[Hp - 16] = sat_sgAaB_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_$creadList_info" {
     Data.Complex.$fReadComplex_$creadList_info:
         const Data.Complex.$fReadComplex_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const SgBbV_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.65490573 UTC

[section ""data" . Data.Complex.$fReadComplex_closure" {
     Data.Complex.$fReadComplex_closure:
         const Data.Complex.$fReadComplex_info;
         const 0;
 },
 sat_sgAaG_entry() //  [R1]
         { []
         }
     {offset
       cgHOW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHOX; else goto cgHOY;
       cgHOX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHOY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fReadComplex_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaG_info" {
     sat_sgAaG_info:
         const sat_sgAaG_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+48;
 },
 sat_sgAaF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHP4: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAaF_info" {
     sat_sgAaF_info:
         const sat_sgAaF_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgBbV_srt+24;
 },
 sat_sgAaE_entry() //  [R1]
         { []
         }
     {offset
       cgHPb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHPc; else goto cgHPd;
       cgHPc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHPd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fReadComplex_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaE_info" {
     sat_sgAaE_info:
         const sat_sgAaE_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+56;
 },
 sat_sgAaD_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHPj: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fReadComplex_$creadsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAaD_info" {
     sat_sgAaD_info:
         const sat_sgAaD_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+32;
 },
 Data.Complex.$fReadComplex_entry() //  [R2]
         { []
         }
     {offset
       cgHPn: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cgHPr; else goto cgHPq;
       cgHPr: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHPq: // global
           I64[Hp - 112] = sat_sgAaG_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgAaF_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgAaE_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sgAaD_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_info" {
     Data.Complex.$fReadComplex_info:
         const Data.Complex.$fReadComplex_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SgBbV_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.66488459 UTC

[section ""cstring" . Data.Complex.$fShowComplex2_bytes" {
     Data.Complex.$fShowComplex2_bytes:
         I8[] [32,58,43,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.671799921 UTC

[section ""data" . Data.Complex.$w$cshowsPrec_closure" {
     Data.Complex.$w$cshowsPrec_closure:
         const Data.Complex.$w$cshowsPrec_info;
 },
 Data.Complex.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cgHPR: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Complex.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 f_sgAaL_entry() //  [R1]
         { []
         }
     {offset
       cgHPZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgHQ0; else goto cgHQ1;
       cgHQ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHQ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sgAaL_info" {
     f_sgAaL_info:
         const f_sgAaL_entry;
         const 2;
         const 18;
 },
 g_sgAaM_entry() //  [R1]
         { []
         }
     {offset
       cgHQ6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgHQ7; else goto cgHQ8;
       cgHQ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHQ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sgAaM_info" {
     g_sgAaM_info:
         const g_sgAaM_entry;
         const 2;
         const 18;
 },
 sat_sgAaQ_entry() //  [R1]
         { []
         }
     {offset
       cgHQm: // global
           _sgAaQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHQn; else goto cgHQo;
       cgHQo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHQq; else goto cgHQp;
       cgHQq: // global
           HpAlloc = 32;
           goto cgHQn;
       cgHQn: // global
           R1 = _sgAaQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAaQ::P64;
           _sgAaM::P64 = P64[_sgAaQ::P64 + 16];
           _sgAaO::P64 = P64[_sgAaQ::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgAaM::P64;
           P64[Hp] = _sgAaO::P64;
           R3 = Hp - 24;
           R2 = Data.Complex.$fShowComplex2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaQ_info" {
     sat_sgAaQ_info:
         const sat_sgAaQ_entry;
         const 2;
         const 18;
 },
 sat_sgAaR_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHQr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHQv; else goto cgHQu;
       cgHQv: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHQu: // global
           _sgAaL::P64 = P64[R1 + 7];
           _sgAaM::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sgAaQ_info;
           P64[Hp - 8] = _sgAaM::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sgAaL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAaR_info" {
     sat_sgAaR_info:
         const sat_sgAaR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgAaU_entry() //  [R1]
         { []
         }
     {offset
       cgHQP: // global
           _sgAaU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHQQ; else goto cgHQR;
       cgHQR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHQT; else goto cgHQS;
       cgHQT: // global
           HpAlloc = 24;
           goto cgHQQ;
       cgHQQ: // global
           R1 = _sgAaU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHQS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAaU::P64;
           _sgAaM::P64 = P64[_sgAaU::P64 + 16];
           _sgAaS::P64 = P64[_sgAaU::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sgAaS::P64;
           R2 = Hp - 14;
           R1 = _sgAaM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaU_info" {
     sat_sgAaU_info:
         const sat_sgAaU_entry;
         const 2;
         const 18;
 },
 sat_sgAaV_entry() //  [R1]
         { []
         }
     {offset
       cgHQU: // global
           _sgAaV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHQV; else goto cgHQW;
       cgHQW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHQY; else goto cgHQX;
       cgHQY: // global
           HpAlloc = 32;
           goto cgHQV;
       cgHQV: // global
           R1 = _sgAaV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHQX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAaV::P64;
           _sgAaM::P64 = P64[_sgAaV::P64 + 16];
           _sgAaS::P64 = P64[_sgAaV::P64 + 24];
           I64[Hp - 24] = sat_sgAaU_info;
           P64[Hp - 8] = _sgAaM::P64;
           P64[Hp] = _sgAaS::P64;
           R3 = Hp - 24;
           R2 = Data.Complex.$fShowComplex2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaV_info" {
     sat_sgAaV_info:
         const sat_sgAaV_entry;
         const 2;
         const 18;
 },
 sat_sgAaW_entry() //  [R1]
         { []
         }
     {offset
       cgHQZ: // global
           _sgAaW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHR0; else goto cgHR1;
       cgHR1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHR3; else goto cgHR2;
       cgHR3: // global
           HpAlloc = 32;
           goto cgHR0;
       cgHR0: // global
           R1 = _sgAaW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHR2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAaW::P64;
           _sgAaL::P64 = P64[_sgAaW::P64 + 16];
           _sgAaM::P64 = P64[_sgAaW::P64 + 24];
           _sgAaS::P64 = P64[_sgAaW::P64 + 32];
           I64[Hp - 24] = sat_sgAaV_info;
           P64[Hp - 8] = _sgAaM::P64;
           P64[Hp] = _sgAaS::P64;
           R2 = Hp - 24;
           R1 = _sgAaL::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAaW_info" {
     sat_sgAaW_info:
         const sat_sgAaW_entry;
         const 3;
         const 15;
 },
 sat_sgAaX_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHR5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgHR9; else goto cgHR8;
       cgHR9: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHR8: // global
           _sgAaL::P64 = P64[R1 + 7];
           _sgAaM::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sgAaW_info;
           P64[Hp - 40] = _sgAaL::P64;
           P64[Hp - 32] = _sgAaM::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAaX_info" {
     sat_sgAaX_info:
         const sat_sgAaX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Complex.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgHRd: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgHRh; else goto cgHRg;
       cgHRh: // global
           HpAlloc = 88;
           R1 = Data.Complex.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cgHRg: // global
           I64[Hp - 80] = f_sgAaL_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = g_sgAaM_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cgHPV::P64 = Hp - 80;
           _cgHQ2::P64 = Hp - 48;
           if (%MO_S_Lt_W64(R3, 7)) goto cgHRb; else goto cgHRc;
       cgHRb: // global
           I64[Hp - 16] = sat_sgAaR_info;
           P64[Hp - 8] = _cgHPV::P64;
           P64[Hp] = _cgHQ2::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgHRc: // global
           I64[Hp - 16] = sat_sgAaX_info;
           P64[Hp - 8] = _cgHPV::P64;
           P64[Hp] = _cgHQ2::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cshowsPrec_info" {
     Data.Complex.$w$cshowsPrec_info:
         const Data.Complex.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 132;
         const Data.Complex.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.693933133 UTC

[section ""data" . Data.Complex.$fShowComplex_$cshowsPrec_closure" {
     Data.Complex.$fShowComplex_$cshowsPrec_closure:
         const Data.Complex.$fShowComplex_$cshowsPrec_info;
 },
 Data.Complex.$fShowComplex_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHS5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgHS9; else goto cgHSa;
       cgHS9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHSa: // global
           I64[Sp - 24] = block_cgHS2_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHSi; else goto cgHS3;
       ugHSi: // global
           call _cgHS2(R1) args: 0, res: 0, upd: 0;
       cgHS3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_$cshowsPrec_info" {
     Data.Complex.$fShowComplex_$cshowsPrec_info:
         const Data.Complex.$fShowComplex_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHS2() //  [R1]
         { []
         }
     {offset
       cgHS2: // global
           I64[Sp] = block_cgHS8_info;
           _sgAb2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sgAb2::I64;
           if (R1 & 7 != 0) goto ugHSh; else goto cgHSc;
       ugHSh: // global
           call _cgHS8(R1) args: 0, res: 0, upd: 0;
       cgHSc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHS2_info" {
     block_cgHS2_info:
         const _cgHS2;
         const 2;
         const 30;
 },
 _cgHS8() //  [R1]
         { []
         }
     {offset
       cgHS8: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Complex.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHS8_info" {
     block_cgHS8_info:
         const _cgHS8;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.703575714 UTC

[section ""data" . Data.Complex.$w$cshow_closure" {
     Data.Complex.$w$cshow_closure:
         const Data.Complex.$w$cshow_info;
 },
 sat_sgAb9_entry() //  [R1]
         { []
         }
     {offset
       cgHSI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgHSJ; else goto cgHSK;
       cgHSJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHSK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAb9_info" {
     sat_sgAb9_info:
         const sat_sgAb9_entry;
         const 2;
         const 18;
 },
 sat_sgAba_entry() //  [R1]
         { []
         }
     {offset
       cgHSL: // global
           _sgAba::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHSM; else goto cgHSN;
       cgHSN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHSP; else goto cgHSO;
       cgHSP: // global
           HpAlloc = 32;
           goto cgHSM;
       cgHSM: // global
           R1 = _sgAba::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHSO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAba::P64;
           _sgAb6::P64 = P64[_sgAba::P64 + 16];
           _sgAb8::P64 = P64[_sgAba::P64 + 24];
           I64[Hp - 24] = sat_sgAb9_info;
           P64[Hp - 8] = _sgAb6::P64;
           P64[Hp] = _sgAb8::P64;
           R3 = Hp - 24;
           R2 = Data.Complex.$fShowComplex2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAba_info" {
     sat_sgAba_info:
         const sat_sgAba_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHSQ: // global
           _sgAb8::P64 = R4;
           _sgAb7::P64 = R3;
           _sgAb6::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgHSR; else goto cgHSS;
       cgHSS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHSU; else goto cgHST;
       cgHSU: // global
           HpAlloc = 32;
           goto cgHSR;
       cgHSR: // global
           R4 = _sgAb8::P64;
           R3 = _sgAb7::P64;
           R2 = _sgAb6::P64;
           R1 = Data.Complex.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHST: // global
           I64[Hp - 24] = sat_sgAba_info;
           P64[Hp - 8] = _sgAb6::P64;
           P64[Hp] = _sgAb8::P64;
           R2 = _sgAb6::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 16] = _sgAb7::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cshow_info" {
     Data.Complex.$w$cshow_info:
         const Data.Complex.$w$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.713041232 UTC

[section ""data" . Data.Complex.$fShowComplex_$cshow_closure" {
     Data.Complex.$fShowComplex_$cshow_closure:
         const Data.Complex.$fShowComplex_$cshow_info;
 },
 Data.Complex.$fShowComplex_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHTh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHTi; else goto cgHTj;
       cgHTi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHTj: // global
           I64[Sp - 16] = block_cgHTe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHTn; else goto cgHTf;
       ugHTn: // global
           call _cgHTe(R1) args: 0, res: 0, upd: 0;
       cgHTf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_$cshow_info" {
     Data.Complex.$fShowComplex_$cshow_info:
         const Data.Complex.$fShowComplex_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHTe() //  [R1]
         { []
         }
     {offset
       cgHTe: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$w$cshow_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHTe_info" {
     block_cgHTe_info:
         const _cgHTe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.717844672 UTC

[section ""data" . Data.Complex.$fShowComplex1_closure" {
     Data.Complex.$fShowComplex1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.720714772 UTC

[section ""data" . Data.Complex.$fShowComplex_$cshowList_closure" {
     Data.Complex.$fShowComplex_$cshowList_closure:
         const Data.Complex.$fShowComplex_$cshowList_info;
 },
 sat_sgAbn_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHTK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHTL; else goto cgHTM;
       cgHTL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHTM: // global
           I64[Sp - 16] = block_cgHTH_info;
           _sgAbg::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sgAbg::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugHTQ; else goto cgHTI;
       ugHTQ: // global
           call _cgHTH(R1) args: 0, res: 0, upd: 0;
       cgHTI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAbn_info" {
     sat_sgAbn_info:
         const sat_sgAbn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgHTH() //  [R1]
         { []
         }
     {offset
       cgHTH: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHTH_info" {
     block_cgHTH_info:
         const _cgHTH;
         const 1;
         const 30;
 },
 Data.Complex.$fShowComplex_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHTR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgHTV; else goto cgHTU;
       cgHTV: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHTU: // global
           I64[Hp - 8] = sat_sgAbn_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_$cshowList_info" {
     Data.Complex.$fShowComplex_$cshowList_info:
         const Data.Complex.$fShowComplex_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.728741572 UTC

[section ""data" . Data.Complex.$fShowComplex_closure" {
     Data.Complex.$fShowComplex_closure:
         const Data.Complex.$fShowComplex_info;
 },
 sat_sgAbr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHUh: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fShowComplex_$cshowList_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAbr_info" {
     sat_sgAbr_info:
         const sat_sgAbr_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgAbq_entry() //  [R1, R2]
         { []
         }
     {offset
       cgHUp: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fShowComplex_$cshow_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAbq_info" {
     sat_sgAbq_info:
         const sat_sgAbq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAbp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHUx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fShowComplex_$cshowsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAbp_info" {
     sat_sgAbp_info:
         const sat_sgAbp_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Complex.$fShowComplex_entry() //  [R2]
         { []
         }
     {offset
       cgHUB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgHUF; else goto cgHUE;
       cgHUF: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHUE: // global
           I64[Hp - 72] = sat_sgAbr_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgAbq_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sgAbp_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_info" {
     Data.Complex.$fShowComplex_info:
         const Data.Complex.$fShowComplex_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.738676696 UTC

[section ""data" . Data.Complex.$fEqComplex_$c==_closure" {
     Data.Complex.$fEqComplex_$c==_closure:
         const Data.Complex.$fEqComplex_$c==_info;
 },
 Data.Complex.$fEqComplex_$c==_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHV4: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgHV8; else goto cgHV9;
       cgHV8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fEqComplex_$c==_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHV9: // global
           I64[Sp - 24] = block_cgHV1_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHVt; else goto cgHV2;
       ugHVt: // global
           call _cgHV1(R1) args: 0, res: 0, upd: 0;
       cgHV2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fEqComplex_$c==_info" {
     Data.Complex.$fEqComplex_$c==_info:
         const Data.Complex.$fEqComplex_$c==_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHV1() //  [R1]
         { []
         }
     {offset
       cgHV1: // global
           I64[Sp - 8] = block_cgHV7_info;
           _sgAbw::P64 = P64[R1 + 7];
           _sgAbx::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAbx::P64;
           P64[Sp + 16] = _sgAbw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHVs; else goto cgHVb;
       ugHVs: // global
           call _cgHV7(R1) args: 0, res: 0, upd: 0;
       cgHVb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHV1_info" {
     block_cgHV1_info:
         const _cgHV1;
         const 2;
         const 30;
 },
 _cgHV7() //  [R1]
         { []
         }
     {offset
       cgHV7: // global
           I64[Sp] = block_cgHVf_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHV7_info" {
     block_cgHV7_info:
         const _cgHV7;
         const 3;
         const 30;
 },
 _cgHVf() //  [R1]
         { []
         }
     {offset
       cgHVf: // global
           if (R1 & 7 == 1) goto cgHVm; else goto cgHVq;
       cgHVm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgHVq: // global
           R2 = P64[Sp + 16];
           _sgAbx::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sgAbx::P64;
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHVf_info" {
     block_cgHVf_info:
         const _cgHVf;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.749113528 UTC

[section ""data" . Data.Complex.$fEqComplex_$c/=_closure" {
     Data.Complex.$fEqComplex_$c/=_closure:
         const Data.Complex.$fEqComplex_$c/=_info;
 },
 Data.Complex.$fEqComplex_$c/=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHVX: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgHW1; else goto cgHW2;
       cgHW1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fEqComplex_$c/=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHW2: // global
           I64[Sp - 24] = block_cgHVU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugHWA; else goto cgHVV;
       ugHWA: // global
           call _cgHVU(R1) args: 0, res: 0, upd: 0;
       cgHVV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fEqComplex_$c/=_info" {
     Data.Complex.$fEqComplex_$c/=_info:
         const Data.Complex.$fEqComplex_$c/=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgHVU() //  [R1]
         { []
         }
     {offset
       cgHVU: // global
           I64[Sp - 8] = block_cgHW0_info;
           _sgAbG::P64 = P64[R1 + 7];
           _sgAbH::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAbH::P64;
           P64[Sp + 16] = _sgAbG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHWz; else goto cgHW4;
       ugHWz: // global
           call _cgHW0(R1) args: 0, res: 0, upd: 0;
       cgHW4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHVU_info" {
     block_cgHVU_info:
         const _cgHVU;
         const 2;
         const 30;
 },
 _cgHW0() //  [R1]
         { []
         }
     {offset
       cgHW0: // global
           I64[Sp] = block_cgHW8_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHW0_info" {
     block_cgHW0_info:
         const _cgHW0;
         const 3;
         const 30;
 },
 _cgHW8() //  [R1]
         { []
         }
     {offset
       cgHW8: // global
           if (R1 & 7 == 1) goto ugHWx; else goto cgHWk;
       ugHWx: // global
           Sp = Sp + 32;
           call _cgHWq() args: 0, res: 0, upd: 0;
       cgHWk: // global
           _sgAbK::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgHWi_info;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = _sgAbK::P64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHW8_info" {
     block_cgHW8_info:
         const _cgHW8;
         const 3;
         const 30;
 },
 _cgHWi() //  [R1]
         { []
         }
     {offset
       cgHWi: // global
           if (R1 & 7 == 1) goto ugHWy; else goto cgHWu;
       ugHWy: // global
           Sp = Sp + 8;
           call _cgHWq() args: 0, res: 0, upd: 0;
       cgHWu: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHWi_info" {
     block_cgHWi_info:
         const _cgHWi;
         const 0;
         const 30;
 },
 _cgHWq() //  []
         { []
         }
     {offset
       cgHWq: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.760817439 UTC

[section ""data" . Data.Complex.$fEqComplex_closure" {
     Data.Complex.$fEqComplex_closure:
         const Data.Complex.$fEqComplex_info;
 },
 sat_sgAbP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHXg: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fEqComplex_$c/=_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAbP_info" {
     sat_sgAbP_info:
         const sat_sgAbP_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgAbO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgHXo: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fEqComplex_$c==_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAbO_info" {
     sat_sgAbO_info:
         const sat_sgAbO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Complex.$fEqComplex_entry() //  [R2]
         { []
         }
     {offset
       cgHXs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgHXw; else goto cgHXv;
       cgHXw: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Complex.$fEqComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHXv: // global
           I64[Hp - 48] = sat_sgAbP_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sgAbO_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fEqComplex_info" {
     Data.Complex.$fEqComplex_info:
         const Data.Complex.$fEqComplex_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.768097071 UTC

[section ""data" . Data.Complex.realPart_closure" {
     Data.Complex.realPart_closure:
         const Data.Complex.realPart_info;
 },
 Data.Complex.realPart_entry() //  [R2]
         { []
         }
     {offset
       cgHXR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgHXS; else goto cgHXT;
       cgHXS: // global
           R2 = R2;
           R1 = Data.Complex.realPart_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgHXT: // global
           I64[Sp - 8] = block_cgHXO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugHXX; else goto cgHXP;
       ugHXX: // global
           call _cgHXO(R1) args: 0, res: 0, upd: 0;
       cgHXP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.realPart_info" {
     Data.Complex.realPart_info:
         const Data.Complex.realPart_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgHXO() //  [R1]
         { []
         }
     {offset
       cgHXO: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHXO_info" {
     block_cgHXO_info:
         const _cgHXO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.774622727 UTC

[section ""data" . Data.Complex.$fStorableComplex_$csizeOf_closure" {
     Data.Complex.$fStorableComplex_$csizeOf_closure:
         const Data.Complex.$fStorableComplex_$csizeOf_info;
 },
 Data.Complex.$fStorableComplex_$csizeOf_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHYe: // global
           _sgAbV::P64 = R3;
           _sgAbU::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgHYl; else goto cgHYm;
       cgHYm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHYo; else goto cgHYn;
       cgHYo: // global
           HpAlloc = 24;
           goto cgHYl;
       cgHYl: // global
           R3 = _sgAbV::P64;
           R2 = _sgAbU::P64;
           R1 = Data.Complex.$fStorableComplex_$csizeOf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHYn: // global
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sgAbV::P64;
           I64[Sp - 8] = block_cgHYc_info;
           R2 = _sgAbU::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Hp - 16;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex_$csizeOf_info" {
     Data.Complex.$fStorableComplex_$csizeOf_info:
         const Data.Complex.$fStorableComplex_$csizeOf_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgHYc() //  [R1]
         { []
         }
     {offset
       cgHYc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgHYr; else goto cgHYq;
       cgHYr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgHYq: // global
           _sgAc2::I64 = I64[R1 + 7] << 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sgAc2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgHYc_info" {
     block_cgHYc_info:
         const _cgHYc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.780676577 UTC

[section ""data" . Data.Complex.$fStorableComplex_$calignment_closure" {
     Data.Complex.$fStorableComplex_$calignment_closure:
         const Data.Complex.$fStorableComplex_$calignment_info;
 },
 Data.Complex.$fStorableComplex_$calignment_entry() //  [R2, R3]
         { []
         }
     {offset
       cgHYH: // global
           _sgAc4::P64 = R3;
           _sgAc3::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cgHYI; else goto cgHYJ;
       cgHYJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgHYL; else goto cgHYK;
       cgHYL: // global
           HpAlloc = 24;
           goto cgHYI;
       cgHYI: // global
           R3 = _sgAc4::P64;
           R2 = _sgAc3::P64;
           R1 = Data.Complex.$fStorableComplex_$calignment_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHYK: // global
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sgAc4::P64;
           R2 = _sgAc3::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex_$calignment_info" {
     Data.Complex.$fStorableComplex_$calignment_info:
         const Data.Complex.$fStorableComplex_$calignment_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.786016952 UTC

[section ""data" . Data.Complex.$fStorableComplex5_closure" {
     Data.Complex.$fStorableComplex5_closure:
         const Data.Complex.$fStorableComplex5_info;
 },
 sat_sgAci_entry() //  [R1]
         { []
         }
     {offset
       cgHZ3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgHZf; else goto cgHZg;
       cgHZf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHZg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgHZ0_info;
           _sgAcb::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sgAcb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugHZm; else goto cgHZ1;
       ugHZm: // global
           call _cgHZ0(R1) args: 0, res: 0, upd: 0;
       cgHZ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAci_info" {
     sat_sgAci_info:
         const sat_sgAci_entry;
         const 2;
         const 18;
 },
 _cgHZ0() //  [R1]
         { []
         }
     {offset
       cgHZ0: // global
           I64[Sp] = block_cgHZ6_info;
           _sgAce::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sgAce::I64;
           if (R1 & 7 != 0) goto ugHZl; else goto cgHZ7;
       ugHZl: // global
           call _cgHZ6(R1) args: 0, res: 0, upd: 0;
       cgHZ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgHZ0_info" {
     block_cgHZ0_info:
         const _cgHZ0;
         const 1;
         const 30;
 },
 _cgHZ6() //  [R1]
         { []
         }
     {offset
       cgHZ6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgHZk; else goto cgHZj;
       cgHZk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgHZj: // global
           _sgAch::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgAch::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgHZ6_info" {
     block_cgHZ6_info:
         const _cgHZ6;
         const 65;
         const 30;
 },
 Data.Complex.$fStorableComplex5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgHZn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgHZr; else goto cgHZq;
       cgHZr: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgHZq: // global
           I64[Hp - 24] = sat_sgAci_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R3 = Hp - 24;
           R2 = R2;
           call Data.Complex.$fStorableComplex3_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex5_info" {
     Data.Complex.$fStorableComplex5_info:
         const Data.Complex.$fStorableComplex5_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.794506492 UTC

[section ""cstring" . lvl1_rgA6f_bytes" {
     lvl1_rgA6f_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.796803881 UTC

[section ""data" . lvl2_rgA6g_closure" {
     lvl2_rgA6g_closure:
         const lvl2_rgA6g_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rgA6g_entry() //  [R1]
         { []
         }
     {offset
       cgHZS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgHZT; else goto cgHZU;
       cgHZT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgHZU: // global
           (_cgHZP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgHZP::I64 == 0) goto cgHZR; else goto cgHZQ;
       cgHZR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgHZQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgHZP::I64;
           R2 = lvl1_rgA6f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rgA6g_info" {
     lvl2_rgA6g_info:
         const lvl2_rgA6g_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.800166922 UTC

[section ""cstring" . Data.Complex.$trModule4_bytes" {
     Data.Complex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.802624593 UTC

[section ""data" . lvl3_rgA6h_closure" {
     lvl3_rgA6h_closure:
         const lvl3_rgA6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rgA6h_entry() //  [R1]
         { []
         }
     {offset
       cgI09: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgI0a; else goto cgI0b;
       cgI0a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI0b: // global
           (_cgI06::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgI06::I64 == 0) goto cgI08; else goto cgI07;
       cgI08: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgI07: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgI06::I64;
           R2 = Data.Complex.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rgA6h_info" {
     lvl3_rgA6h_info:
         const lvl3_rgA6h_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.806621828 UTC

[section ""cstring" . lvl4_rgA6i_bytes" {
     lvl4_rgA6i_bytes:
         I8[] [70,111,114,101,105,103,110,46,83,116,111,114,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.808866686 UTC

[section ""data" . lvl5_rgA6j_closure" {
     lvl5_rgA6j_closure:
         const lvl5_rgA6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rgA6j_entry() //  [R1]
         { []
         }
     {offset
       cgI0q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgI0r; else goto cgI0s;
       cgI0r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI0s: // global
           (_cgI0n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgI0n::I64 == 0) goto cgI0p; else goto cgI0o;
       cgI0p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgI0o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgI0n::I64;
           R2 = lvl4_rgA6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rgA6j_info" {
     lvl5_rgA6j_info:
         const lvl5_rgA6j_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.812537153 UTC

[section ""cstring" . lvl6_rgA6k_bytes" {
     lvl6_rgA6k_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,83,116,111,114,97,98,108,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.814912934 UTC

[section ""data" . lvl7_rgA6l_closure" {
     lvl7_rgA6l_closure:
         const lvl7_rgA6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_rgA6l_entry() //  [R1]
         { []
         }
     {offset
       cgI0H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgI0I; else goto cgI0J;
       cgI0I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI0J: // global
           (_cgI0E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgI0E::I64 == 0) goto cgI0G; else goto cgI0F;
       cgI0G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgI0F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgI0E::I64;
           R2 = lvl6_rgA6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_rgA6l_info" {
     lvl7_rgA6l_info:
         const lvl7_rgA6l_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.818480503 UTC

[section ""data" . lvl8_rgA6m_closure" {
     lvl8_rgA6m_closure:
         const GHC.Types.I#_con_info;
         const 137;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.820106255 UTC

[section ""data" . lvl9_rgA6n_closure" {
     lvl9_rgA6n_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.822171444 UTC

[section ""data" . lvl10_rgA6o_closure" {
     lvl10_rgA6o_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.823878352 UTC

[section ""data" . lvl11_rgA6p_closure" {
     lvl11_rgA6p_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_rgA6h_closure;
         const lvl5_rgA6j_closure;
         const lvl7_rgA6l_closure;
         const lvl8_rgA6m_closure+1;
         const lvl9_rgA6n_closure+1;
         const lvl8_rgA6m_closure+1;
         const lvl10_rgA6o_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.825673237 UTC

[section ""data" . lvl12_rgA6q_closure" {
     lvl12_rgA6q_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_rgA6g_closure;
         const lvl11_rgA6p_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.828064744 UTC

[section ""data" . Data.Complex.$fStorableComplex8_closure" {
     Data.Complex.$fStorableComplex8_closure:
         const Data.Complex.$fStorableComplex8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fStorableComplex8_entry() //  [R1]
         { []
         }
     {offset
       cgI12: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgI13; else goto cgI14;
       cgI13: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI14: // global
           (_cgI0Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgI0Z::I64 == 0) goto cgI11; else goto cgI10;
       cgI11: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgI10: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgI0Z::I64;
           R2 = lvl12_rgA6q_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex8_info" {
     Data.Complex.$fStorableComplex8_info:
         const Data.Complex.$fStorableComplex8_entry;
         const 0;
         const 12884901909;
         const SgBbV_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.834207997 UTC

[section ""data" . Data.Complex.$fStorableComplex7_closure" {
     Data.Complex.$fStorableComplex7_closure:
         const Data.Complex.$fStorableComplex7_info;
         const 0;
 },
 sat_sgAcx_entry() //  [R1]
         { []
         }
     {offset
       cgI1n: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgI1J; else goto cgI1K;
       cgI1J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI1K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgI1k_info;
           _sgAcj::P64 = P64[R1 + 16];
           _sgAcl::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sgAcj::P64;
           P64[Sp - 24] = _sgAcl::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugI1R; else goto cgI1l;
       ugI1R: // global
           call _cgI1k(R1) args: 0, res: 0, upd: 0;
       cgI1l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAcx_info" {
     sat_sgAcx_info:
         const sat_sgAcx_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+88;
 },
 _cgI1k() //  [R1]
         { []
         }
     {offset
       cgI1k: // global
           I64[Sp] = block_cgI1q_info;
           _sgAco::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sgAco::I64;
           if (R1 & 7 != 0) goto ugI1Q; else goto cgI1r;
       ugI1Q: // global
           call _cgI1q(R1) args: 0, res: 0, upd: 0;
       cgI1r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI1k_info" {
     block_cgI1k_info:
         const _cgI1k;
         const 2;
         const 4294967326;
         const SgBbV_srt+88;
 },
 _cgI1q() //  [R1]
         { []
         }
     {offset
       cgI1q: // global
           I64[Sp] = block_cgI1v_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fStorableComplex8_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI1q_info" {
     block_cgI1q_info:
         const _cgI1q;
         const 130;
         const 4294967326;
         const SgBbV_srt+88;
 },
 _cgI1v() //  [R1]
         { []
         }
     {offset
       cgI1v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgI1P; else goto cgI1O;
       cgI1P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgI1O: // global
           _sgAcw::I64 = I64[Sp + 16] + I64[Sp + 8] * (I64[R1 + 7] << 1);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgAcw::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI1v_info" {
     block_cgI1v_info:
         const _cgI1v;
         const 194;
         const 30;
 },
 Data.Complex.$fStorableComplex7_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgI1S: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgI1W; else goto cgI1V;
       cgI1W: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex7_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgI1V: // global
           I64[Hp - 32] = sat_sgAcx_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R3 = Hp - 32;
           R2 = R2;
           call Data.Complex.$fStorableComplex3_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex7_info" {
     Data.Complex.$fStorableComplex7_info:
         const Data.Complex.$fStorableComplex7_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SgBbV_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.847652767 UTC

[section ""data" . Data.Complex.$fStorableComplex4_closure" {
     Data.Complex.$fStorableComplex4_closure:
         const Data.Complex.$fStorableComplex4_info;
 },
 w_sgAcG_entry() //  [R1]
         { []
         }
     {offset
       cgI2C: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgI2O; else goto cgI2P;
       cgI2O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI2P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgI2z_info;
           _sgAcA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sgAcA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugI2V; else goto cgI2A;
       ugI2V: // global
           call _cgI2z(R1) args: 0, res: 0, upd: 0;
       cgI2A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w_sgAcG_info" {
     w_sgAcG_info:
         const w_sgAcG_entry;
         const 2;
         const 18;
 },
 _cgI2z() //  [R1]
         { []
         }
     {offset
       cgI2z: // global
           I64[Sp] = block_cgI2F_info;
           _sgAcI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sgAcI::I64;
           if (R1 & 7 != 0) goto ugI2U; else goto cgI2G;
       ugI2U: // global
           call _cgI2F(R1) args: 0, res: 0, upd: 0;
       cgI2G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI2z_info" {
     block_cgI2z_info:
         const _cgI2z;
         const 1;
         const 30;
 },
 _cgI2F() //  [R1]
         { []
         }
     {offset
       cgI2F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgI2T; else goto cgI2S;
       cgI2T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgI2S: // global
           _sgAcL::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgAcL::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI2F_info" {
     block_cgI2F_info:
         const _cgI2F;
         const 65;
         const 30;
 },
 Data.Complex.$fStorableComplex4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgI2W: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgI2Y; else goto cgI2Z;
       cgI2Y: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgI2Z: // global
           I64[Sp - 32] = block_cgI2q_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugI35; else goto cgI2r;
       ugI35: // global
           call _cgI2q(R1) args: 0, res: 0, upd: 0;
       cgI2r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex4_info" {
     Data.Complex.$fStorableComplex4_info:
         const Data.Complex.$fStorableComplex4_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _cgI2q() //  [R1]
         { []
         }
     {offset
       cgI2q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgI32; else goto cgI31;
       cgI32: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgI31: // global
           _sgAcE::P64 = P64[R1 + 7];
           _sgAcF::P64 = P64[R1 + 15];
           I64[Hp - 24] = w_sgAcG_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cgI2X_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_ppv_info;
           _cgI2v::P64 = Hp - 24;
           P64[Sp - 16] = _cgI2v::P64;
           P64[Sp - 8] = _sgAcE::P64;
           P64[Sp + 16] = _sgAcF::P64;
           P64[Sp + 24] = _cgI2v::P64;
           Sp = Sp - 24;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI2q_info" {
     block_cgI2q_info:
         const _cgI2q;
         const 3;
         const 30;
 },
 _cgI2X() //  []
         { []
         }
     {offset
       cgI2X: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pppv_info;
           P64[Sp + 8] = P64[Sp + 24];
           _sgAcF::P64 = P64[Sp + 16];
           P64[Sp + 16] = Data.Complex.$fStorableComplex2_closure+1;
           P64[Sp + 24] = _sgAcF::P64;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI2X_info" {
     block_cgI2X_info:
         const _cgI2X;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.865895675 UTC

[section ""data" . Data.Complex.$w$cpokeElemOff_closure" {
     Data.Complex.$w$cpokeElemOff_closure:
         const Data.Complex.$w$cpokeElemOff_info;
 },
 w4_sgAcV_entry() //  [R1]
         { []
         }
     {offset
       cgI3L: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgI47; else goto cgI48;
       cgI47: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI48: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cgI3I_info;
           _sgAcP::P64 = P64[R1 + 16];
           _sgAcR::P64 = P64[R1 + 32];
           _sgAcS::P64 = P64[R1 + 40];
           R1 = P64[R1 + 24];
           P64[Sp - 40] = _sgAcP::P64;
           P64[Sp - 32] = _sgAcR::P64;
           P64[Sp - 24] = _sgAcS::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ugI4f; else goto cgI3J;
       ugI4f: // global
           call _cgI3I(R1) args: 0, res: 0, upd: 0;
       cgI3J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w4_sgAcV_info" {
     w4_sgAcV_info:
         const w4_sgAcV_entry;
         const 4;
         const 15;
 },
 _cgI3I() //  [R1]
         { []
         }
     {offset
       cgI3I: // global
           I64[Sp] = block_cgI3O_info;
           _sgAcX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sgAcX::I64;
           if (R1 & 7 != 0) goto ugI4e; else goto cgI3P;
       ugI4e: // global
           call _cgI3O(R1) args: 0, res: 0, upd: 0;
       cgI3P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI3I_info" {
     block_cgI3I_info:
         const _cgI3I;
         const 3;
         const 30;
 },
 _cgI3O() //  [R1]
         { []
         }
     {offset
       cgI3O: // global
           _sgAcP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgI3T_info;
           R2 = _sgAcP::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 24];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 8;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI3O_info" {
     block_cgI3O_info:
         const _cgI3O;
         const 131;
         const 30;
 },
 _cgI3T() //  [R1]
         { []
         }
     {offset
       cgI3T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgI4d; else goto cgI4c;
       cgI4d: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgI4c: // global
           _sgAd4::I64 = I64[Sp + 8] + I64[Sp + 16] * (I64[R1 + 7] << 1);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgAd4::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgI3T_info" {
     block_cgI3T_info:
         const _cgI3T;
         const 194;
         const 30;
 },
 Data.Complex.$w$cpokeElemOff_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgI4i: // global
           _sgAcT::P64 = R6;
           _sgAcS::P64 = R5;
           _sgAcR::P64 = R4;
           _sgAcQ::P64 = R3;
           _sgAcP::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgI4j; else goto cgI4k;
       cgI4k: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgI4m; else goto cgI4l;
       cgI4m: // global
           HpAlloc = 48;
           goto cgI4j;
       cgI4j: // global
           R6 = _sgAcT::P64;
           R5 = _sgAcS::P64;
           R4 = _sgAcR::P64;
           R3 = _sgAcQ::P64;
           R2 = _sgAcP::P64;
           R1 = Data.Complex.$w$cpokeElemOff_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgI4l: // global
           I64[Hp - 40] = w4_sgAcV_info;
           P64[Hp - 24] = _sgAcP::P64;
           P64[Hp - 16] = _sgAcQ::P64;
           P64[Hp - 8] = _sgAcR::P64;
           P64[Hp] = _sgAcS::P64;
           I64[Sp - 32] = block_cgI4g_info;
           R2 = _sgAcP::P64;
           I64[Sp - 56] = stg_ap_ppv_info;
           _cgI3E::P64 = Hp - 40;
           P64[Sp - 48] = _cgI3E::P64;
           P64[Sp - 40] = _sgAcS::P64;
           P64[Sp - 24] = _cgI3E::P64;
           P64[Sp - 16] = _sgAcP::P64;
           P64[Sp - 8] = _sgAcT::P64;
           Sp = Sp - 56;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cpokeElemOff_info" {
     Data.Complex.$w$cpokeElemOff_info:
         const Data.Complex.$w$cpokeElemOff_entry;
         const 0;
         const 14;
         const 25769803801;
 },
 _cgI4g() //  []
         { []
         }
     {offset
       cgI4g: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppv_info;
           P64[Sp + 16] = Data.Complex.$fStorableComplex2_closure+1;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI4g_info" {
     block_cgI4g_info:
         const _cgI4g;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.878805564 UTC

[section ""data" . Data.Complex.$fStorableComplex6_closure" {
     Data.Complex.$fStorableComplex6_closure:
         const Data.Complex.$fStorableComplex6_info;
 },
 Data.Complex.$fStorableComplex6_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgI4Z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgI50; else goto cgI51;
       cgI50: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgI51: // global
           I64[Sp - 32] = block_cgI4W_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugI55; else goto cgI4X;
       ugI55: // global
           call _cgI4W(R1) args: 0, res: 0, upd: 0;
       cgI4X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex6_info" {
     Data.Complex.$fStorableComplex6_info:
         const Data.Complex.$fStorableComplex6_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _cgI4W() //  [R1]
         { []
         }
     {offset
       cgI4W: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$cpokeElemOff_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI4W_info" {
     block_cgI4W_info:
         const _cgI4W;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.887478192 UTC

[section ""data" . Data.Complex.$fStorableComplex_closure" {
     Data.Complex.$fStorableComplex_closure:
         const Data.Complex.$fStorableComplex_info;
         const 0;
 },
 sat_sgAdo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgI5o: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fStorableComplex1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdo_info" {
     sat_sgAdo_info:
         const sat_sgAdo_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 sat_sgAdn_entry() //  [R1, R2]
         { []
         }
     {offset
       cgI5w: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fStorableComplex3_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdn_info" {
     sat_sgAdn_info:
         const sat_sgAdn_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_sgAdm_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgI5E: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fStorableComplex4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdm_info" {
     sat_sgAdm_info:
         const sat_sgAdm_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 sat_sgAdl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgI5M: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fStorableComplex5_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdl_info" {
     sat_sgAdl_info:
         const sat_sgAdl_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 sat_sgAdk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgI5U: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fStorableComplex6_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdk_info" {
     sat_sgAdk_info:
         const sat_sgAdk_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 sat_sgAdj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgI62: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fStorableComplex7_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdj_info" {
     sat_sgAdj_info:
         const sat_sgAdj_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SgBbV_srt+96;
 },
 sat_sgAdi_entry() //  [R1, R2]
         { []
         }
     {offset
       cgI6a: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fStorableComplex_$calignment_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdi_info" {
     sat_sgAdi_info:
         const sat_sgAdi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAdh_entry() //  [R1, R2]
         { []
         }
     {offset
       cgI6i: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fStorableComplex_$csizeOf_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAdh_info" {
     sat_sgAdh_info:
         const sat_sgAdh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Complex.$fStorableComplex_entry() //  [R2]
         { []
         }
     {offset
       cgI6m: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cgI6q; else goto cgI6p;
       cgI6q: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgI6p: // global
           I64[Hp - 192] = sat_sgAdo_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sgAdn_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sgAdm_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sgAdl_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sgAdk_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sgAdj_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sgAdi_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sgAdh_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = Foreign.Storable.C:Storable_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 109;
           P64[Hp - 32] = Hp - 124;
           P64[Hp - 24] = Hp - 141;
           P64[Hp - 16] = Hp - 156;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex_info" {
     Data.Complex.$fStorableComplex_info:
         const Data.Complex.$fStorableComplex_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.903115636 UTC

[section ""data" . Data.Complex.imagPart_closure" {
     Data.Complex.imagPart_closure:
         const Data.Complex.imagPart_info;
 },
 Data.Complex.imagPart_entry() //  [R2]
         { []
         }
     {offset
       cgI79: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgI7a; else goto cgI7b;
       cgI7a: // global
           R2 = R2;
           R1 = Data.Complex.imagPart_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgI7b: // global
           I64[Sp - 8] = block_cgI76_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugI7f; else goto cgI77;
       ugI7f: // global
           call _cgI76(R1) args: 0, res: 0, upd: 0;
       cgI77: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.imagPart_info" {
     Data.Complex.imagPart_info:
         const Data.Complex.imagPart_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgI76() //  [R1]
         { []
         }
     {offset
       cgI76: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI76_info" {
     block_cgI76_info:
         const _cgI76;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.909093006 UTC

[section ""data" . Data.Complex.$fMonadComplex_$c>>=_closure" {
     Data.Complex.$fMonadComplex_$c>>=_closure:
         const Data.Complex.$fMonadComplex_$c>>=_info;
 },
 Data.Complex.$fMonadComplex_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cgI7w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgI7I; else goto cgI7J;
       cgI7I: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fMonadComplex_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgI7J: // global
           I64[Sp - 16] = block_cgI7t_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugI7P; else goto cgI7u;
       ugI7P: // global
           call _cgI7t(R1) args: 0, res: 0, upd: 0;
       cgI7u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fMonadComplex_$c>>=_info" {
     Data.Complex.$fMonadComplex_$c>>=_info:
         const Data.Complex.$fMonadComplex_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgI7t() //  [R1]
         { []
         }
     {offset
       cgI7t: // global
           I64[Sp - 8] = block_cgI7z_info;
           R2 = P64[R1 + 7];
           _sgAdx::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgAdx::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI7t_info" {
     block_cgI7t_info:
         const _cgI7t;
         const 1;
         const 30;
 },
 _cgI7z() //  [R1]
         { []
         }
     {offset
       cgI7z: // global
           _sgAdx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgI7D_info;
           R2 = _sgAdx::P64;
           _sgAdz::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sgAdz::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI7z_info" {
     block_cgI7z_info:
         const _cgI7z;
         const 2;
         const 30;
 },
 _cgI7D() //  [R1]
         { []
         }
     {offset
       cgI7D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgI7O; else goto cgI7N;
       cgI7O: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgI7N: // global
           _sgAdD::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sgAdD::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI7D_info" {
     block_cgI7D_info:
         const _cgI7D;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.917641887 UTC

[section ""data" . Data.Complex.$fMonadComplex_$c>>_closure" {
     Data.Complex.$fMonadComplex_$c>>_closure:
         const Data.Complex.$fMonadComplex_$c>>_info;
 },
 Data.Complex.$fMonadComplex_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       cgI8b: // global
           R3 = R3;
           R2 = R2;
           call Data.Complex.$fApplicativeComplex_$c*>_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fMonadComplex_$c>>_info" {
     Data.Complex.$fMonadComplex_$c>>_info:
         const Data.Complex.$fMonadComplex_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.922990834 UTC

[section ""data" . lvl13_rgA6r_closure" {
     lvl13_rgA6r_closure:
         const lvl13_rgA6r_info;
         const 0;
 },
 lvl13_rgA6r_entry() //  [R2]
         { []
         }
     {offset
       cgI8m: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl13_rgA6r_info" {
     lvl13_rgA6r_info:
         const lvl13_rgA6r_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgBbV_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.926137846 UTC

[section ""data" . Data.Complex.$fMonadComplex_closure" {
     Data.Complex.$fMonadComplex_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Complex.$fApplicativeComplex_closure+1;
         const Data.Complex.$fMonadComplex_$c>>=_closure+2;
         const Data.Complex.$fMonadComplex_$c>>_closure+2;
         const Data.Complex.$fApplicativeComplex_$cpure_closure+1;
         const lvl13_rgA6r_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.927932566 UTC

[section ""cstring" . Data.Complex.$fDataComplex6_bytes" {
     Data.Complex.$fDataComplex6_bytes:
         I8[] [67,111,109,112,108,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.930383053 UTC

[section ""data" . Data.Complex.$fDataComplex9_closure" {
     Data.Complex.$fDataComplex9_closure:
         const Data.Complex.$fDataComplex9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fDataComplex9_entry() //  [R1]
         { []
         }
     {offset
       cgI8B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgI8C; else goto cgI8D;
       cgI8C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgI8D: // global
           (_cgI8y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgI8y::I64 == 0) goto cgI8A; else goto cgI8z;
       cgI8A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgI8z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgI8y::I64;
           R2 = Data.Complex.$fDataComplex6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex9_info" {
     Data.Complex.$fDataComplex9_info:
         const Data.Complex.$fDataComplex9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.936668106 UTC

[section ""data" . go61_rgA6s_closure" {
     go61_rgA6s_closure:
         const go61_rgA6s_info;
         const 0;
 },
 go61_rgA6s_entry() //  [R2, R3]
         { []
         }
     {offset
       cgI8W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgI8X; else goto ugI9A;
       cgI8X: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rgA6s_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ugI9A: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cgI8M() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rgA6s_info" {
     go61_rgA6s_info:
         const go61_rgA6s_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SgBbV_srt+120;
 },
 _cgI8M() //  []
         { []
         }
     {offset
       cgI8M: // global
           _sgAdF::P64 = P64[Sp];
           I64[Sp] = block_cgI8P_info;
           R1 = _sgAdF::P64;
           if (R1 & 7 != 0) goto ugI9E; else goto cgI8Q;
       ugI9E: // global
           call _cgI8P(R1) args: 0, res: 0, upd: 0;
       cgI8Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgI8P() //  [R1]
         { []
         }
     {offset
       cgI8P: // global
           if (R1 & 7 == 1) goto ugI9B; else goto cgI8U;
       ugI9B: // global
           Sp = Sp + 16;
           call _cgI9c() args: 0, res: 0, upd: 0;
       cgI8U: // global
           I64[Sp - 8] = block_cgI94_info;
           _sgAdI::P64 = P64[R1 + 6];
           _sgAdJ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgAdJ::P64;
           P64[Sp + 8] = _sgAdI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugI9F; else goto cgI96;
       ugI9F: // global
           call _cgI94(R1) args: 0, res: 0, upd: 0;
       cgI96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI8P_info" {
     block_cgI8P_info:
         const _cgI8P;
         const 1;
         const 12884901918;
         const SgBbV_srt+120;
 },
 _cgI94() //  [R1]
         { []
         }
     {offset
       cgI94: // global
           if (R1 & 7 == 1) goto ugI9C; else goto cgI9h;
       ugI9C: // global
           Sp = Sp + 24;
           call _cgI9c() args: 0, res: 0, upd: 0;
       cgI9h: // global
           I64[Sp - 8] = block_cgI9f_info;
           _sgAdL::P64 = P64[R1 + 6];
           _sgAdM::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAdM::P64;
           P64[Sp + 16] = _sgAdL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugI9I; else goto cgI9i;
       ugI9I: // global
           call _cgI9f(R1) args: 0, res: 0, upd: 0;
       cgI9i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI94_info" {
     block_cgI94_info:
         const _cgI94;
         const 2;
         const 12884901918;
         const SgBbV_srt+120;
 },
 _cgI9c() //  []
         { []
         }
     {offset
       cgI9c: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgI9f() //  [R1]
         { []
         }
     {offset
       cgI9f: // global
           I64[Sp] = block_cgI9m_info;
           R3 = Data.Complex.$fReadComplex3_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI9f_info" {
     block_cgI9f_info:
         const _cgI9f;
         const 3;
         const 12884901918;
         const SgBbV_srt+120;
 },
 _cgI9m() //  [R1]
         { []
         }
     {offset
       cgI9m: // global
           if (R1 & 7 == 1) goto cgI9t; else goto cgI9x;
       cgI9t: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cgI8M() args: 0, res: 0, upd: 0;
       cgI9x: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgI9m_info" {
     block_cgI9m_info:
         const _cgI9m;
         const 3;
         const 12884901918;
         const SgBbV_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.950696005 UTC

[section ""data" . $c:+1_rgA6t_closure" {
     $c:+1_rgA6t_closure:
         const Data.Data.AlgConstr_con_info;
         const $c:+2_rgA6u_closure;
         const 0;
 },
 section ""data" . Data.Complex.$fDataComplex8_closure" {
     Data.Complex.$fDataComplex8_closure:
         const :_con_info;
         const Data.Complex.$c:+_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Complex.$fDataComplex7_closure" {
     Data.Complex.$fDataComplex7_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Complex.$fDataComplex8_closure+2;
         const 0;
 },
 section ""data" . Data.Complex.$tComplex_closure" {
     Data.Complex.$tComplex_closure:
         const Data.Data.DataType_con_info;
         const Data.Complex.$fDataComplex9_closure;
         const Data.Complex.$fDataComplex7_closure+1;
         const 0;
 },
 section ""data" . Data.Complex.$c:+_closure" {
     Data.Complex.$c:+_closure:
         const Data.Data.Constr_con_info;
         const $c:+1_rgA6t_closure+1;
         const Data.Complex.$fReadComplex3_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Infix_closure+2;
         const Data.Complex.$tComplex_closure+1;
         const 0;
 },
 section ""data" . $c:+2_rgA6u_closure" {
     $c:+2_rgA6u_closure:
         const $c:+2_rgA6u_info;
         const 0;
         const 0;
         const 0;
 },
 $c:+2_rgA6u_entry() //  [R1]
         { []
         }
     {offset
       cgIap: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIaq; else goto cgIar;
       cgIaq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIar: // global
           (_cgIam::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgIam::I64 == 0) goto cgIao; else goto cgIan;
       cgIao: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgIan: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgIam::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Complex.$fDataComplex8_closure+2;
           Sp = Sp - 16;
           call go61_rgA6s_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $c:+2_rgA6u_info" {
     $c:+2_rgA6u_info:
         const $c:+2_rgA6u_entry;
         const 0;
         const 30064771093;
         const SgBbV_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.959222272 UTC

[section ""data" . Data.Complex.$trModule3_closure" {
     Data.Complex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.96087641 UTC

[section ""cstring" . Data.Complex.$trModule2_bytes" {
     Data.Complex.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,111,109,112,108,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.962828339 UTC

[section ""data" . Data.Complex.$trModule1_closure" {
     Data.Complex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.964433952 UTC

[section ""data" . Data.Complex.$trModule_closure" {
     Data.Complex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Complex.$trModule3_closure+1;
         const Data.Complex.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.966066822 UTC

[section ""data" . $krep_rgA6v_closure" {
     $krep_rgA6v_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.967611502 UTC

[section ""data" . Data.Complex.$fDataComplex5_closure" {
     Data.Complex.$fDataComplex5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$fDataComplex6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.969342675 UTC

[section ""data" . Data.Complex.$tcComplex_closure" {
     Data.Complex.$tcComplex_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Complex.$trModule_closure+1;
         const Data.Complex.$fDataComplex5_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 1343342814679332338;
         const 7004386227939987578;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.971046897 UTC

[section ""data" . $krep1_rgA6w_closure" {
     $krep1_rgA6w_closure:
         const :_con_info;
         const $krep_rgA6v_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.972656014 UTC

[section ""data" . $krep2_rgA6x_closure" {
     $krep2_rgA6x_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Complex.$tcComplex_closure+1;
         const $krep1_rgA6w_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.974340757 UTC

[section ""data" . $krep3_rgA6y_closure" {
     $krep3_rgA6y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgA6v_closure+2;
         const $krep2_rgA6x_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.976029856 UTC

[section ""data" . Data.Complex.$tc':+1_closure" {
     Data.Complex.$tc':+1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgA6v_closure+2;
         const $krep3_rgA6y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.977688193 UTC

[section ""cstring" . Data.Complex.$tc':+3_bytes" {
     Data.Complex.$tc':+3_bytes:
         I8[] [39,58,43]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.979232716 UTC

[section ""data" . Data.Complex.$tc':+2_closure" {
     Data.Complex.$tc':+2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$tc':+3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.980877445 UTC

[section ""data" . Data.Complex.$tc':+_closure" {
     Data.Complex.$tc':+_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Complex.$trModule_closure+1;
         const Data.Complex.$tc':+2_closure+1;
         const Data.Complex.$tc':+1_closure+4;
         const 6922641126191179007;
         const 8119904032930905711;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.984787287 UTC

[section ""data" . Data.Complex.$fDataComplex4_closure" {
     Data.Complex.$fDataComplex4_closure:
         const Data.Complex.$fDataComplex4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fDataComplex4_entry() //  [R1]
         { []
         }
     {offset
       cgIb3: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgIb4; else goto cgIb5;
       cgIb4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIb5: // global
           (_cgIaV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgIaV::I64 == 0) goto cgIaX; else goto cgIaW;
       cgIaX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgIaW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgIaV::I64;
           I64[Sp - 24] = block_cgIaY_info;
           R6 = 0;
           R5 = Data.Complex.$fDataComplex5_closure+1;
           R4 = Data.Complex.$trModule_closure+1;
           R3 = 7004386227939987578;
           R2 = 1343342814679332338;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex4_info" {
     Data.Complex.$fDataComplex4_info:
         const Data.Complex.$fDataComplex4_entry;
         const 0;
         const 4294967317;
         const SgBbV_srt+160;
 },
 _cgIaY() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgIaY: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cgIaZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgIaY_info" {
     block_cgIaY_info:
         const _cgIaY;
         const 0;
         const 30;
 },
 _cgIaZ() //  []
         { []
         }
     {offset
       cgIaZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgIb8; else goto cgIb7;
       cgIb8: // global
           HpAlloc = 48;
           I64[Sp] = block_cgIaZ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cgIb7: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIaZ_info" {
     block_cgIaZ_info:
         const _cgIaZ;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.992605154 UTC

[section ""data" . Data.Complex.$fDataComplex10_closure" {
     Data.Complex.$fDataComplex10_closure:
         const Data.Complex.$fDataComplex10_info;
         const 0;
 },
 Data.Complex.$fDataComplex10_entry() //  [R2]
         { []
         }
     {offset
       cgIbA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgIbB; else goto cgIbC;
       cgIbB: // global
           R2 = R2;
           R1 = Data.Complex.$fDataComplex10_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIbC: // global
           I64[Sp - 8] = block_cgIby_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex10_info" {
     Data.Complex.$fDataComplex10_info:
         const Data.Complex.$fDataComplex10_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SgBbV_srt+168;
 },
 _cgIby() //  [R1]
         { []
         }
     {offset
       cgIby: // global
           R3 = R1;
           R2 = Data.Complex.$fDataComplex4_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIby_info" {
     block_cgIby_info:
         const _cgIby;
         const 0;
         const 12884901918;
         const SgBbV_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:29.998943318 UTC

[section ""data" . Data.Complex.$fDataComplex_$cdataCast1_closure" {
     Data.Complex.$fDataComplex_$cdataCast1_closure:
         const Data.Complex.$fDataComplex_$cdataCast1_info;
         const 0;
 },
 lvl17_sgAe4_entry() //  [R1]
         { []
         }
     {offset
       cgIbW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIbX; else goto cgIbY;
       cgIbX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIbY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Complex.$fDataComplex4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgAe4_info" {
     lvl17_sgAe4_info:
         const lvl17_sgAe4_entry;
         const 1;
         const 21474836496;
         const SgBbV_srt+176;
 },
 sat_sgAe8_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIcb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgIcc; else goto cgIcd;
       cgIcc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIcd: // global
           I64[Sp - 24] = block_cgIc4_info;
           _sgAe2::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sgAe2::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugIco; else goto cgIc5;
       ugIco: // global
           call _cgIc4(R1) args: 0, res: 0, upd: 0;
       cgIc5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAe8_info" {
     sat_sgAe8_info:
         const sat_sgAe8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgIc4() //  [R1]
         { []
         }
     {offset
       cgIc4: // global
           if (R1 & 7 == 1) goto cgIc8; else goto cgIc9;
       cgIc8: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgIc9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgIcn; else goto cgIcm;
       cgIcn: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIcm: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIc4_info" {
     block_cgIc4_info:
         const _cgIc4;
         const 2;
         const 30;
 },
 Data.Complex.$fDataComplex_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIcp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgIct; else goto cgIcs;
       cgIct: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIcs: // global
           I64[Hp - 40] = lvl17_sgAe4_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgAe8_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cdataCast1_info" {
     Data.Complex.$fDataComplex_$cdataCast1_info:
         const Data.Complex.$fDataComplex_$cdataCast1_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const SgBbV_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.007498507 UTC

[section ""data" . Data.Complex.$fDataComplex1_closure" {
     Data.Complex.$fDataComplex1_closure:
         const (,)_con_info;
         const Data.Complex.$W:+_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.017644795 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapMp_closure" {
     Data.Complex.$fDataComplex_$cgmapMp_closure:
         const Data.Complex.$fDataComplex_$cgmapMp_info;
 },
 lvl17_sgAed_entry() //  [R1]
         { []
         }
     {offset
       cgId2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgId3; else goto cgId4;
       cgId3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgId4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgAed_info" {
     lvl17_sgAed_info:
         const lvl17_sgAed_entry;
         const 1;
         const 16;
 },
 sat_sgAeI_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIdh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIdi; else goto cgIdj;
       cgIdi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIdj: // global
           I64[Sp - 24] = block_cgIde_info;
           _sgAed::P64 = P64[R1 + 7];
           _sgAee::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgAed::P64;
           P64[Sp - 8] = _sgAee::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugIdB; else goto cgIdf;
       ugIdB: // global
           call _cgIde(R1) args: 0, res: 0, upd: 0;
       cgIdf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAeI_info" {
     sat_sgAeI_info:
         const sat_sgAeI_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgIde() //  [R1]
         { []
         }
     {offset
       cgIde: // global
           I64[Sp - 8] = block_cgIdm_info;
           _sgAeF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAeF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIdA; else goto cgIdo;
       ugIdA: // global
           call _cgIdm(R1) args: 0, res: 0, upd: 0;
       cgIdo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIde_info" {
     block_cgIde_info:
         const _cgIde;
         const 2;
         const 30;
 },
 _cgIdm() //  [R1]
         { []
         }
     {offset
       cgIdm: // global
           if (R1 & 7 == 1) goto cgIdu; else goto cgIdy;
       cgIdu: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgIdy: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIdm_info" {
     block_cgIdm_info:
         const _cgIdm;
         const 3;
         const 30;
 },
 sat_sgAey_entry() //  [R1]
         { []
         }
     {offset
       cgIe7: // global
           _sgAey::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgIe8; else goto cgIe9;
       cgIe9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIeb; else goto cgIea;
       cgIeb: // global
           HpAlloc = 56;
           goto cgIe8;
       cgIe8: // global
           R1 = _sgAey::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIea: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAey::P64;
           _sgAee::P64 = P64[_sgAey::P64 + 16];
           _sgAel::P64 = P64[_sgAey::P64 + 24];
           _sgAep::P64 = P64[_sgAey::P64 + 32];
           _sgAeq::P64 = P64[_sgAey::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgAep::P64;
           P64[Hp - 24] = _sgAel::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sgAeq::P64;
           R2 = _sgAee::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAey_info" {
     sat_sgAey_info:
         const sat_sgAey_entry;
         const 4;
         const 15;
 },
 sat_sgAeu_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIen: // global
           _sgAer::P64 = R2;
           _sgAeu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgIeo; else goto cgIep;
       cgIep: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIer; else goto cgIeq;
       cgIer: // global
           HpAlloc = 56;
           goto cgIeo;
       cgIeo: // global
           R2 = _sgAer::P64;
           R1 = _sgAeu::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIeq: // global
           _sgAee::P64 = P64[_sgAeu::P64 + 7];
           _sgAep::P64 = P64[_sgAeu::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgAep::P64;
           P64[Hp - 24] = _sgAer::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgAee::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAeu_info" {
     sat_sgAeu_info:
         const sat_sgAeu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgAev_entry() //  [R1]
         { []
         }
     {offset
       cgIes: // global
           _sgAev::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgIet; else goto cgIeu;
       cgIeu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIew; else goto cgIev;
       cgIew: // global
           HpAlloc = 24;
           goto cgIet;
       cgIet: // global
           R1 = _sgAev::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIev: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAev::P64;
           _sgAee::P64 = P64[_sgAev::P64 + 16];
           _sgAem::P64 = P64[_sgAev::P64 + 24];
           _sgAep::P64 = P64[_sgAev::P64 + 32];
           I64[Hp - 16] = sat_sgAeu_info;
           P64[Hp - 8] = _sgAee::P64;
           P64[Hp] = _sgAep::P64;
           R2 = _sgAee::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgAem::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAev_info" {
     sat_sgAev_info:
         const sat_sgAev_entry;
         const 3;
         const 15;
 },
 sat_sgAez_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIex: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgIey; else goto cgIez;
       cgIey: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIez: // global
           I64[Sp - 40] = block_cgIdW_info;
           _sgAea::P64 = P64[R1 + 7];
           _sgAee::P64 = P64[R1 + 15];
           _sgAel::P64 = P64[R1 + 23];
           _sgAem::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgAea::P64;
           P64[Sp - 24] = _sgAee::P64;
           P64[Sp - 16] = _sgAel::P64;
           P64[Sp - 8] = _sgAem::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugIeD; else goto cgIdX;
       ugIeD: // global
           call _cgIdW(R1) args: 0, res: 0, upd: 0;
       cgIdX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAez_info" {
     sat_sgAez_info:
         const sat_sgAez_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgIdW() //  [R1]
         { []
         }
     {offset
       cgIdW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgIeC; else goto cgIeB;
       cgIeC: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIeB: // global
           _sgAep::P64 = P64[R1 + 7];
           _sgAeq::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgAey_info;
           _sgAee::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sgAee::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sgAep::P64;
           P64[Hp - 40] = _sgAeq::P64;
           I64[Hp - 32] = sat_sgAev_info;
           P64[Hp - 16] = _sgAee::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sgAep::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIdW_info" {
     block_cgIdW_info:
         const _cgIdW;
         const 4;
         const 30;
 },
 k_sgAei_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIeE: // global
           _sgAel::P64 = R4;
           _sgAek::P64 = R3;
           _sgAej::P64 = R2;
           _sgAei::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgIeF; else goto cgIeG;
       cgIeG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgIeI; else goto cgIeH;
       cgIeI: // global
           HpAlloc = 80;
           goto cgIeF;
       cgIeF: // global
           R4 = _sgAel::P64;
           R3 = _sgAek::P64;
           R2 = _sgAej::P64;
           R1 = _sgAei::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIeH: // global
           _sgAea::P64 = P64[_sgAei::P64 + 5];
           _sgAeb::P64 = P64[_sgAei::P64 + 13];
           _sgAee::P64 = P64[_sgAei::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sgAeb::P64;
           P64[Hp - 48] = _sgAej::P64;
           P64[Hp - 40] = _sgAel::P64;
           I64[Hp - 32] = sat_sgAez_info;
           P64[Hp - 24] = _sgAea::P64;
           P64[Hp - 16] = _sgAee::P64;
           P64[Hp - 8] = _sgAel::P64;
           P64[Hp] = Hp - 72;
           R2 = _sgAee::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgAek::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sgAei_info" {
     k_sgAei_info:
         const k_sgAei_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sgAeA_entry() //  [R1]
         { []
         }
     {offset
       cgIeR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIeS; else goto cgIeT;
       cgIeS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIeT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fDataComplex1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAeA_info" {
     sat_sgAeA_info:
         const sat_sgAeA_entry;
         const 1;
         const 16;
 },
 sat_sgAeB_entry() //  [R1]
         { []
         }
     {offset
       cgIeU: // global
           _sgAeB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgIeV; else goto cgIeW;
       cgIeW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIeY; else goto cgIeX;
       cgIeY: // global
           HpAlloc = 24;
           goto cgIeV;
       cgIeV: // global
           R1 = _sgAeB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIeX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAeB::P64;
           _sgAe9::P64 = P64[_sgAeB::P64 + 16];
           _sgAee::P64 = P64[_sgAeB::P64 + 24];
           _sgAeg::P64 = P64[_sgAeB::P64 + 32];
           _sgAei::P64 = P64[_sgAeB::P64 + 40];
           I64[Hp - 16] = sat_sgAeA_info;
           P64[Hp] = _sgAee::P64;
           R4 = _sgAeg::P64;
           R3 = Hp - 16;
           R2 = _sgAe9::P64;
           R1 = _sgAei::P64;
           Sp = Sp - 16;
           call k_sgAei_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAeB_info" {
     sat_sgAeB_info:
         const sat_sgAeB_entry;
         const 4;
         const 15;
 },
 sat_sgAeC_entry() //  [R1]
         { []
         }
     {offset
       cgIeZ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgIf0; else goto cgIf1;
       cgIf0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIf1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgIdG_info;
           _sgAe9::P64 = P64[R1 + 16];
           _sgAea::P64 = P64[R1 + 24];
           _sgAeb::P64 = P64[R1 + 32];
           _sgAee::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _sgAe9::P64;
           P64[Sp - 40] = _sgAea::P64;
           P64[Sp - 32] = _sgAeb::P64;
           P64[Sp - 24] = _sgAee::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ugIf5; else goto cgIdH;
       ugIf5: // global
           call _cgIdG(R1) args: 0, res: 0, upd: 0;
       cgIdH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAeC_info" {
     sat_sgAeC_info:
         const sat_sgAeC_entry;
         const 5;
         const 15;
 },
 _cgIdG() //  [R1]
         { []
         }
     {offset
       cgIdG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgIf4; else goto cgIf3;
       cgIf4: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgIf3: // global
           _sgAeg::P64 = P64[R1 + 7];
           _sgAeh::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sgAei_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           _sgAee::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgAee::P64;
           I64[Hp - 40] = sat_sgAeB_info;
           _sgAe9::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sgAe9::P64;
           P64[Hp - 16] = _sgAee::P64;
           P64[Hp - 8] = _sgAeg::P64;
           _cgIdL::P64 = Hp - 69;
           P64[Hp] = _cgIdL::P64;
           R4 = _sgAeh::P64;
           R3 = Hp - 40;
           R2 = _sgAe9::P64;
           R1 = _cgIdL::P64;
           Sp = Sp + 40;
           call k_sgAei_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIdG_info" {
     block_cgIdG_info:
         const _cgIdG;
         const 4;
         const 30;
 },
 Data.Complex.$fDataComplex_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgIf6: // global
           _sgAec::P64 = R5;
           _sgAeb::P64 = R4;
           _sgAea::P64 = R3;
           _sgAe9::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgIf7; else goto cgIf8;
       cgIf8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIfa; else goto cgIf9;
       cgIfa: // global
           HpAlloc = 24;
           goto cgIf7;
       cgIf7: // global
           R5 = _sgAec::P64;
           R4 = _sgAeb::P64;
           R3 = _sgAea::P64;
           R2 = _sgAe9::P64;
           R1 = Data.Complex.$fDataComplex_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIf9: // global
           I64[Hp - 16] = lvl17_sgAed_info;
           P64[Hp] = _sgAea::P64;
           I64[Sp - 48] = block_cgId5_info;
           R2 = _sgAea::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgAe9::P64;
           P64[Sp - 24] = _sgAea::P64;
           P64[Sp - 16] = _sgAeb::P64;
           P64[Sp - 8] = _sgAec::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapMp_info" {
     Data.Complex.$fDataComplex_$cgmapMp_info:
         const Data.Complex.$fDataComplex_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgId5() //  [R1]
         { []
         }
     {offset
       cgId5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgIfd; else goto cgIfc;
       cgIfd: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIfc: // global
           I64[Hp - 72] = sat_sgAeI_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sgAeC_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgId5_info" {
     block_cgId5_info:
         const _cgId5;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.055362644 UTC

[section ""data" . Data.Complex.$w$cgmapM_closure" {
     Data.Complex.$w$cgmapM_closure:
         const Data.Complex.$w$cgmapM_info;
 },
 sat_sgAeW_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIgZ: // global
           _sgAeU::P64 = R2;
           _sgAeW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgIh0; else goto cgIh1;
       cgIh1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgIh3; else goto cgIh2;
       cgIh3: // global
           HpAlloc = 32;
           goto cgIh0;
       cgIh0: // global
           R2 = _sgAeU::P64;
           R1 = _sgAeW::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIh2: // global
           _sgAeK::P64 = P64[_sgAeW::P64 + 7];
           _sgAeT::P64 = P64[_sgAeW::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgAeT::P64;
           P64[Hp] = _sgAeU::P64;
           R2 = _sgAeK::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAeW_info" {
     sat_sgAeW_info:
         const sat_sgAeW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgAeX_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIh4: // global
           _sgAeT::P64 = R2;
           _sgAeX::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgIh5; else goto cgIh6;
       cgIh6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIh8; else goto cgIh7;
       cgIh8: // global
           HpAlloc = 24;
           goto cgIh5;
       cgIh5: // global
           R2 = _sgAeT::P64;
           R1 = _sgAeX::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIh7: // global
           _sgAeK::P64 = P64[_sgAeX::P64 + 7];
           _sgAeS::P64 = P64[_sgAeX::P64 + 15];
           I64[Hp - 16] = sat_sgAeW_info;
           P64[Hp - 8] = _sgAeK::P64;
           P64[Hp] = _sgAeT::P64;
           R2 = _sgAeK::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgAeS::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAeX_info" {
     sat_sgAeX_info:
         const sat_sgAeX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k_sgAeO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIh9: // global
           _sgAeR::P64 = R4;
           _sgAeQ::P64 = R3;
           _sgAeP::P64 = R2;
           _sgAeO::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgIha; else goto cgIhb;
       cgIhb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgIhd; else goto cgIhc;
       cgIhd: // global
           HpAlloc = 64;
           goto cgIha;
       cgIha: // global
           R4 = _sgAeR::P64;
           R3 = _sgAeQ::P64;
           R2 = _sgAeP::P64;
           R1 = _sgAeO::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIhc: // global
           _sgAeK::P64 = P64[_sgAeO::P64 + 5];
           _sgAeL::P64 = P64[_sgAeO::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sgAeL::P64;
           P64[Hp - 32] = _sgAeP::P64;
           P64[Hp - 24] = _sgAeR::P64;
           I64[Hp - 16] = sat_sgAeX_info;
           P64[Hp - 8] = _sgAeK::P64;
           P64[Hp] = Hp - 56;
           R2 = _sgAeK::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgAeQ::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sgAeO_info" {
     k_sgAeO_info:
         const k_sgAeO_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgAeY_entry() //  [R1]
         { []
         }
     {offset
       cgIhm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIhn; else goto cgIho;
       cgIhn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIho: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$W:+_closure+2;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAeY_info" {
     sat_sgAeY_info:
         const sat_sgAeY_entry;
         const 1;
         const 16;
 },
 sat_sgAeZ_entry() //  [R1]
         { []
         }
     {offset
       cgIhp: // global
           _sgAeZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgIhq; else goto cgIhr;
       cgIhr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIht; else goto cgIhs;
       cgIht: // global
           HpAlloc = 24;
           goto cgIhq;
       cgIhq: // global
           R1 = _sgAeZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIhs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAeZ::P64;
           _sgAeJ::P64 = P64[_sgAeZ::P64 + 16];
           _sgAeK::P64 = P64[_sgAeZ::P64 + 24];
           _sgAeM::P64 = P64[_sgAeZ::P64 + 32];
           _sgAeO::P64 = P64[_sgAeZ::P64 + 40];
           I64[Hp - 16] = sat_sgAeY_info;
           P64[Hp] = _sgAeK::P64;
           R4 = _sgAeM::P64;
           R3 = Hp - 16;
           R2 = _sgAeJ::P64;
           R1 = _sgAeO::P64;
           Sp = Sp - 16;
           call k_sgAeO_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAeZ_info" {
     sat_sgAeZ_info:
         const sat_sgAeZ_entry;
         const 4;
         const 15;
 },
 Data.Complex.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgIhu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgIhy; else goto cgIhx;
       cgIhy: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIhx: // global
           I64[Hp - 64] = k_sgAeO_info;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sgAeZ_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           _cgIgI::P64 = Hp - 61;
           P64[Hp] = _cgIgI::P64;
           R4 = R6;
           R3 = Hp - 40;
           R2 = R2;
           R1 = _cgIgI::P64;
           call k_sgAeO_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cgmapM_info" {
     Data.Complex.$w$cgmapM_info:
         const Data.Complex.$w$cgmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.069131707 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapM_closure" {
     Data.Complex.$fDataComplex_$cgmapM_closure:
         const Data.Complex.$fDataComplex_$cgmapM_info;
 },
 Data.Complex.$fDataComplex_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgIi8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIi9; else goto cgIia;
       cgIi9: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIia: // global
           I64[Sp - 32] = block_cgIi5_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugIie; else goto cgIi6;
       ugIie: // global
           call _cgIi5(R1) args: 0, res: 0, upd: 0;
       cgIi6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapM_info" {
     Data.Complex.$fDataComplex_$cgmapM_info:
         const Data.Complex.$fDataComplex_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgIi5() //  [R1]
         { []
         }
     {offset
       cgIi5: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$cgmapM_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIi5_info" {
     block_cgIi5_info:
         const _cgIi5;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.078255 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapQi_closure" {
     Data.Complex.$fDataComplex_$cgmapQi_closure:
         const Data.Complex.$fDataComplex_$cgmapQi_info;
         const 0;
 },
 Data.Complex.$fDataComplex_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgIiv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgIiz; else goto cgIiA;
       cgIiz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIiA: // global
           I64[Sp - 32] = block_cgIis_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugIiO; else goto cgIit;
       ugIiO: // global
           call _cgIis(R1) args: 0, res: 0, upd: 0;
       cgIit: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapQi_info" {
     Data.Complex.$fDataComplex_$cgmapQi_info:
         const Data.Complex.$fDataComplex_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgBbV_srt+208;
 },
 _cgIis() //  [R1]
         { []
         }
     {offset
       cgIis: // global
           I64[Sp - 8] = block_cgIiy_info;
           _sgAfc::P64 = P64[R1 + 7];
           _sgAfd::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAfd::P64;
           P64[Sp + 16] = _sgAfc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIiN; else goto cgIiC;
       ugIiN: // global
           call _cgIiy(R1) args: 0, res: 0, upd: 0;
       cgIiC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIis_info" {
     block_cgIis_info:
         const _cgIis;
         const 3;
         const 4294967326;
         const SgBbV_srt+208;
 },
 _cgIiy() //  [R1]
         { []
         }
     {offset
       cgIiy: // global
           _sgAf7::P64 = P64[Sp + 16];
           _sgAf9::P64 = P64[Sp + 32];
           _sgAfg::I64 = I64[R1 + 7];
           if (_sgAfg::I64 != 0) goto ugIiM; else goto cgIiK;
       ugIiM: // global
           if (_sgAfg::I64 != 1) goto cgIiJ; else goto cgIiL;
       cgIiJ: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgIiL: // global
           R3 = P64[Sp + 8];
           R2 = _sgAf7::P64;
           R1 = _sgAf9::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIiK: // global
           R3 = P64[Sp + 24];
           R2 = _sgAf7::P64;
           R1 = _sgAf9::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIiy_info" {
     block_cgIiy_info:
         const _cgIiy;
         const 4;
         const 4294967326;
         const SgBbV_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.091139573 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapQr_closure" {
     Data.Complex.$fDataComplex_$cgmapQr_closure:
         const Data.Complex.$fDataComplex_$cgmapQr_info;
 },
 sat_sgAfr_entry() //  [R1]
         { []
         }
     {offset
       cgIjg: // global
           _sgAfr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgIjh; else goto cgIji;
       cgIji: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgIjk; else goto cgIjj;
       cgIjk: // global
           HpAlloc = 40;
           goto cgIjh;
       cgIjh: // global
           R1 = _sgAfr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIjj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAfr::P64;
           _sgAfh::P64 = P64[_sgAfr::P64 + 16];
           _sgAfi::P64 = P64[_sgAfr::P64 + 24];
           _sgAfj::P64 = P64[_sgAfr::P64 + 32];
           _sgAfk::P64 = P64[_sgAfr::P64 + 40];
           _sgAfo::P64 = P64[_sgAfr::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgAfk::P64;
           P64[Hp - 8] = _sgAfh::P64;
           P64[Hp] = _sgAfo::P64;
           R3 = _sgAfj::P64;
           R2 = Hp - 32;
           R1 = _sgAfi::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAfr_info" {
     sat_sgAfr_info:
         const sat_sgAfr_entry;
         const 5;
         const 15;
 },
 Data.Complex.$fDataComplex_$cgmapQr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cgIjl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgIjn; else goto cgIjo;
       cgIjn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapQr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIjo: // global
           I64[Sp - 40] = block_cgIj6_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugIjs; else goto cgIj7;
       ugIjs: // global
           call _cgIj6(R1) args: 0, res: 0, upd: 0;
       cgIj7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapQr_info" {
     Data.Complex.$fDataComplex_$cgmapQr_info:
         const Data.Complex.$fDataComplex_$cgmapQr_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgIj6() //  [R1]
         { []
         }
     {offset
       cgIj6: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgIjr; else goto cgIjq;
       cgIjr: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIjq: // global
           _sgAfn::P64 = P64[R1 + 7];
           _sgAfo::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_sgAfr_info;
           _sgAfh::P64 = P64[Sp + 8];
           P64[Hp - 72] = _sgAfh::P64;
           _sgAfi::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sgAfi::P64;
           P64[Hp - 56] = P64[Sp + 24];
           _sgAfk::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgAfk::P64;
           P64[Hp - 40] = _sgAfo::P64;
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgAfk::P64;
           P64[Hp - 8] = _sgAfh::P64;
           P64[Hp] = _sgAfn::P64;
           R3 = Hp - 88;
           R2 = Hp - 32;
           R1 = _sgAfi::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIj6_info" {
     block_cgIj6_info:
         const _cgIj6;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.103238004 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapQ_closure" {
     Data.Complex.$fDataComplex_$cgmapQ_closure:
         const Data.Complex.$fDataComplex_$cgmapQ_info;
 },
 Data.Complex.$fDataComplex_$cgmapQ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgIjO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgIjV; else goto cgIjW;
       cgIjV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapQ_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIjW: // global
           I64[Sp - 24] = block_cgIjL_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugIk0; else goto cgIjM;
       ugIk0: // global
           call _cgIjL(R1) args: 0, res: 0, upd: 0;
       cgIjM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapQ_info" {
     Data.Complex.$fDataComplex_$cgmapQ_info:
         const Data.Complex.$fDataComplex_$cgmapQ_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgIjL() //  [R1]
         { []
         }
     {offset
       cgIjL: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgIjZ; else goto cgIjY;
       cgIjZ: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIjY: // global
           _sgAfw::P64 = P64[R1 + 7];
           _sgAfx::P64 = P64[R1 + 15];
           I64[Hp - 120] = stg_ap_3_upd_info;
           _sgAft::P64 = P64[Sp + 16];
           P64[Hp - 104] = _sgAft::P64;
           _sgAfs::P64 = P64[Sp + 8];
           P64[Hp - 96] = _sgAfs::P64;
           P64[Hp - 88] = _sgAfx::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = Hp - 120;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sgAft::P64;
           P64[Hp - 32] = _sgAfs::P64;
           P64[Hp - 24] = _sgAfw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 78;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIjL_info" {
     block_cgIjL_info:
         const _cgIjL;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.114583756 UTC

[section ""data" . Data.Complex.$fDataComplex2_closure" {
     Data.Complex.$fDataComplex2_closure:
         const Data.Complex.$fDataComplex2_info;
 },
 sat_sgAfK_entry() //  [R1]
         { []
         }
     {offset
       cgIkt: // global
           _sgAfK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgIku; else goto cgIkv;
       cgIkv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgIkx; else goto cgIkw;
       cgIkx: // global
           HpAlloc = 40;
           goto cgIku;
       cgIku: // global
           R1 = _sgAfK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIkw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAfK::P64;
           _sgAfB::P64 = P64[_sgAfK::P64 + 16];
           _sgAfC::P64 = P64[_sgAfK::P64 + 24];
           _sgAfD::P64 = P64[_sgAfK::P64 + 32];
           _sgAfE::P64 = P64[_sgAfK::P64 + 40];
           _sgAfH::P64 = P64[_sgAfK::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgAfE::P64;
           P64[Hp - 8] = _sgAfB::P64;
           P64[Hp] = _sgAfH::P64;
           R3 = Hp - 32;
           R2 = _sgAfD::P64;
           R1 = _sgAfC::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAfK_info" {
     sat_sgAfK_info:
         const sat_sgAfK_entry;
         const 5;
         const 15;
 },
 Data.Complex.$fDataComplex2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgIky: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgIkz; else goto cgIkA;
       cgIkz: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIkA: // global
           I64[Sp - 40] = block_cgIki_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugIkE; else goto cgIkj;
       ugIkE: // global
           call _cgIki(R1) args: 0, res: 0, upd: 0;
       cgIkj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex2_info" {
     Data.Complex.$fDataComplex2_info:
         const Data.Complex.$fDataComplex2_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgIki() //  [R1]
         { []
         }
     {offset
       cgIki: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgIkD; else goto cgIkC;
       cgIkD: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIkC: // global
           _sgAfH::P64 = P64[R1 + 7];
           _sgAfI::P64 = P64[R1 + 15];
           I64[Hp - 88] = stg_ap_3_upd_info;
           _sgAfE::P64 = P64[Sp + 32];
           P64[Hp - 72] = _sgAfE::P64;
           _sgAfB::P64 = P64[Sp + 8];
           P64[Hp - 64] = _sgAfB::P64;
           P64[Hp - 56] = _sgAfI::P64;
           I64[Hp - 48] = sat_sgAfK_info;
           P64[Hp - 32] = _sgAfB::P64;
           _sgAfC::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sgAfC::P64;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sgAfE::P64;
           P64[Hp] = _sgAfH::P64;
           R3 = Hp - 88;
           R2 = Hp - 48;
           R1 = _sgAfC::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIki_info" {
     block_cgIki_info:
         const _cgIki;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.126320535 UTC

[section ""data" . Data.Complex.$fDataComplex3_closure" {
     Data.Complex.$fDataComplex3_closure:
         const Data.Complex.$fDataComplex3_info;
 },
 Data.Complex.$fDataComplex3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgIl0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIl8; else goto cgIl9;
       cgIl8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIl9: // global
           I64[Sp - 24] = block_cgIkX_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugIlf; else goto cgIkY;
       ugIlf: // global
           call _cgIkX(R1) args: 0, res: 0, upd: 0;
       cgIkY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex3_info" {
     Data.Complex.$fDataComplex3_info:
         const Data.Complex.$fDataComplex3_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgIkX() //  [R1]
         { []
         }
     {offset
       cgIkX: // global
           I64[Sp - 8] = block_cgIl3_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           _sgAfR::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAfR::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIkX_info" {
     block_cgIkX_info:
         const _cgIkX;
         const 2;
         const 30;
 },
 _cgIl3() //  [R1]
         { []
         }
     {offset
       cgIl3: // global
           _sgAfM::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgIl5_info;
           R3 = P64[Sp + 8];
           R2 = _sgAfM::P64;
           _sgAfS::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sgAfS::P64;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIl3_info" {
     block_cgIl3_info:
         const _cgIl3;
         const 3;
         const 30;
 },
 _cgIl5() //  [R1]
         { []
         }
     {offset
       cgIl5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIle; else goto cgIld;
       cgIle: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIld: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIl5_info" {
     block_cgIl5_info:
         const _cgIl5;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.144519168 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapMo_closure" {
     Data.Complex.$fDataComplex_$cgmapMo_closure:
         const Data.Complex.$fDataComplex_$cgmapMo_info;
 },
 lvl17_sgAfY_entry() //  [R1]
         { []
         }
     {offset
       cgIlF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIlG; else goto cgIlH;
       cgIlG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIlH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgAfY_info" {
     lvl17_sgAfY_info:
         const lvl17_sgAfY_entry;
         const 1;
         const 16;
 },
 sat_sgAgw_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIlU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIlV; else goto cgIlW;
       cgIlV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIlW: // global
           I64[Sp - 24] = block_cgIlR_info;
           _sgAfY::P64 = P64[R1 + 7];
           _sgAfZ::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgAfY::P64;
           P64[Sp - 8] = _sgAfZ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugIme; else goto cgIlS;
       ugIme: // global
           call _cgIlR(R1) args: 0, res: 0, upd: 0;
       cgIlS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgw_info" {
     sat_sgAgw_info:
         const sat_sgAgw_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgIlR() //  [R1]
         { []
         }
     {offset
       cgIlR: // global
           I64[Sp - 8] = block_cgIlZ_info;
           _sgAgt::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAgt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugImd; else goto cgIm1;
       ugImd: // global
           call _cgIlZ(R1) args: 0, res: 0, upd: 0;
       cgIm1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIlR_info" {
     block_cgIlR_info:
         const _cgIlR;
         const 2;
         const 30;
 },
 _cgIlZ() //  [R1]
         { []
         }
     {offset
       cgIlZ: // global
           if (R1 & 7 == 1) goto cgIm7; else goto cgImb;
       cgIm7: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgImb: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIlZ_info" {
     block_cgIlZ_info:
         const _cgIlZ;
         const 3;
         const 30;
 },
 sat_sgAgk_entry() //  [R1]
         { []
         }
     {offset
       cgImP: // global
           _sgAgk::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgImQ; else goto cgImR;
       cgImR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgImT; else goto cgImS;
       cgImT: // global
           HpAlloc = 56;
           goto cgImQ;
       cgImQ: // global
           R1 = _sgAgk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgImS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAgk::P64;
           _sgAfZ::P64 = P64[_sgAgk::P64 + 16];
           _sgAg6::P64 = P64[_sgAgk::P64 + 24];
           _sgAga::P64 = P64[_sgAgk::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgAga::P64;
           P64[Hp - 24] = _sgAg6::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sgAfZ::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAgk_info" {
     sat_sgAgk_info:
         const sat_sgAgk_entry;
         const 3;
         const 15;
 },
 sat_sgAgg_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIn5: // global
           _sgAgd::P64 = R2;
           _sgAgg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgIn6; else goto cgIn7;
       cgIn7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIn9; else goto cgIn8;
       cgIn9: // global
           HpAlloc = 56;
           goto cgIn6;
       cgIn6: // global
           R2 = _sgAgd::P64;
           R1 = _sgAgg::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIn8: // global
           _sgAfZ::P64 = P64[_sgAgg::P64 + 7];
           _sgAga::P64 = P64[_sgAgg::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgAga::P64;
           P64[Hp - 24] = _sgAgd::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgAfZ::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgg_info" {
     sat_sgAgg_info:
         const sat_sgAgg_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgAgh_entry() //  [R1]
         { []
         }
     {offset
       cgIna: // global
           _sgAgh::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgInb; else goto cgInc;
       cgInc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIne; else goto cgInd;
       cgIne: // global
           HpAlloc = 24;
           goto cgInb;
       cgInb: // global
           R1 = _sgAgh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgInd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAgh::P64;
           _sgAfZ::P64 = P64[_sgAgh::P64 + 16];
           _sgAg7::P64 = P64[_sgAgh::P64 + 24];
           _sgAga::P64 = P64[_sgAgh::P64 + 32];
           I64[Hp - 16] = sat_sgAgg_info;
           P64[Hp - 8] = _sgAfZ::P64;
           P64[Hp] = _sgAga::P64;
           R2 = _sgAfZ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgAg7::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAgh_info" {
     sat_sgAgh_info:
         const sat_sgAgh_entry;
         const 3;
         const 15;
 },
 sat_sgAgn_entry() //  [R1, R2]
         { []
         }
     {offset
       cgInf: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgIng; else goto cgInh;
       cgIng: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgInh: // global
           I64[Sp - 40] = block_cgImz_info;
           _sgAfV::P64 = P64[R1 + 7];
           _sgAfZ::P64 = P64[R1 + 15];
           _sgAg6::P64 = P64[R1 + 23];
           _sgAg7::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgAfV::P64;
           P64[Sp - 24] = _sgAfZ::P64;
           P64[Sp - 16] = _sgAg6::P64;
           P64[Sp - 8] = _sgAg7::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugIny; else goto cgImA;
       ugIny: // global
           call _cgImz(R1) args: 0, res: 0, upd: 0;
       cgImA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgn_info" {
     sat_sgAgn_info:
         const sat_sgAgn_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgImz() //  [R1]
         { []
         }
     {offset
       cgImz: // global
           I64[Sp - 8] = block_cgImE_info;
           _sgAga::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAga::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugInx; else goto cgImF;
       ugInx: // global
           call _cgImE(R1) args: 0, res: 0, upd: 0;
       cgImF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgImz_info" {
     block_cgImz_info:
         const _cgImz;
         const 4;
         const 30;
 },
 _cgImE() //  [R1]
         { []
         }
     {offset
       cgImE: // global
           _sgAfZ::P64 = P64[Sp + 24];
           _sgAg6::P64 = P64[Sp + 32];
           _sgAga::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cgInk; else goto cgIno;
       cgInk: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgInn; else goto cgInm;
       cgInn: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgInm: // global
           I64[Hp - 72] = sat_sgAgk_info;
           P64[Hp - 56] = _sgAfZ::P64;
           P64[Hp - 48] = _sgAg6::P64;
           P64[Hp - 40] = _sgAga::P64;
           I64[Hp - 32] = sat_sgAgh_info;
           P64[Hp - 16] = _sgAfZ::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgAga::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cgIno: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgInt; else goto cgIns;
       cgInt: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIns: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgAga::P64;
           P64[Hp - 24] = _sgAg6::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgAfZ::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgImE_info" {
     block_cgImE_info:
         const _cgImE;
         const 5;
         const 30;
 },
 k_sgAg3_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgInz: // global
           _sgAg6::P64 = R4;
           _sgAg5::P64 = R3;
           _sgAg4::P64 = R2;
           _sgAg3::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgInA; else goto cgInB;
       cgInB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgInD; else goto cgInC;
       cgInD: // global
           HpAlloc = 80;
           goto cgInA;
       cgInA: // global
           R4 = _sgAg6::P64;
           R3 = _sgAg5::P64;
           R2 = _sgAg4::P64;
           R1 = _sgAg3::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgInC: // global
           _sgAfV::P64 = P64[_sgAg3::P64 + 5];
           _sgAfW::P64 = P64[_sgAg3::P64 + 13];
           _sgAfZ::P64 = P64[_sgAg3::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sgAfW::P64;
           P64[Hp - 48] = _sgAg4::P64;
           P64[Hp - 40] = _sgAg6::P64;
           I64[Hp - 32] = sat_sgAgn_info;
           P64[Hp - 24] = _sgAfV::P64;
           P64[Hp - 16] = _sgAfZ::P64;
           P64[Hp - 8] = _sgAg6::P64;
           P64[Hp] = Hp - 72;
           R2 = _sgAfZ::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgAg5::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sgAg3_info" {
     k_sgAg3_info:
         const k_sgAg3_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sgAgo_entry() //  [R1]
         { []
         }
     {offset
       cgInM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgInN; else goto cgInO;
       cgInN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgInO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fDataComplex1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAgo_info" {
     sat_sgAgo_info:
         const sat_sgAgo_entry;
         const 1;
         const 16;
 },
 sat_sgAgp_entry() //  [R1]
         { []
         }
     {offset
       cgInP: // global
           _sgAgp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgInQ; else goto cgInR;
       cgInR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgInT; else goto cgInS;
       cgInT: // global
           HpAlloc = 24;
           goto cgInQ;
       cgInQ: // global
           R1 = _sgAgp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgInS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAgp::P64;
           _sgAfU::P64 = P64[_sgAgp::P64 + 16];
           _sgAfZ::P64 = P64[_sgAgp::P64 + 24];
           _sgAg1::P64 = P64[_sgAgp::P64 + 32];
           _sgAg3::P64 = P64[_sgAgp::P64 + 40];
           I64[Hp - 16] = sat_sgAgo_info;
           P64[Hp] = _sgAfZ::P64;
           R4 = _sgAg1::P64;
           R3 = Hp - 16;
           R2 = _sgAfU::P64;
           R1 = _sgAg3::P64;
           Sp = Sp - 16;
           call k_sgAg3_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAgp_info" {
     sat_sgAgp_info:
         const sat_sgAgp_entry;
         const 4;
         const 15;
 },
 sat_sgAgq_entry() //  [R1]
         { []
         }
     {offset
       cgInU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgInV; else goto cgInW;
       cgInV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgInW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgImj_info;
           _sgAfU::P64 = P64[R1 + 16];
           _sgAfV::P64 = P64[R1 + 24];
           _sgAfW::P64 = P64[R1 + 32];
           _sgAfZ::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _sgAfU::P64;
           P64[Sp - 40] = _sgAfV::P64;
           P64[Sp - 32] = _sgAfW::P64;
           P64[Sp - 24] = _sgAfZ::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ugIo0; else goto cgImk;
       ugIo0: // global
           call _cgImj(R1) args: 0, res: 0, upd: 0;
       cgImk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAgq_info" {
     sat_sgAgq_info:
         const sat_sgAgq_entry;
         const 5;
         const 15;
 },
 _cgImj() //  [R1]
         { []
         }
     {offset
       cgImj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgInZ; else goto cgInY;
       cgInZ: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgInY: // global
           _sgAg1::P64 = P64[R1 + 7];
           _sgAg2::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sgAg3_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           _sgAfZ::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgAfZ::P64;
           I64[Hp - 40] = sat_sgAgp_info;
           _sgAfU::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sgAfU::P64;
           P64[Hp - 16] = _sgAfZ::P64;
           P64[Hp - 8] = _sgAg1::P64;
           _cgImo::P64 = Hp - 69;
           P64[Hp] = _cgImo::P64;
           R4 = _sgAg2::P64;
           R3 = Hp - 40;
           R2 = _sgAfU::P64;
           R1 = _cgImo::P64;
           Sp = Sp + 40;
           call k_sgAg3_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgImj_info" {
     block_cgImj_info:
         const _cgImj;
         const 4;
         const 30;
 },
 Data.Complex.$fDataComplex_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgIo1: // global
           _sgAfX::P64 = R5;
           _sgAfW::P64 = R4;
           _sgAfV::P64 = R3;
           _sgAfU::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgIo2; else goto cgIo3;
       cgIo3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIo5; else goto cgIo4;
       cgIo5: // global
           HpAlloc = 24;
           goto cgIo2;
       cgIo2: // global
           R5 = _sgAfX::P64;
           R4 = _sgAfW::P64;
           R3 = _sgAfV::P64;
           R2 = _sgAfU::P64;
           R1 = Data.Complex.$fDataComplex_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIo4: // global
           I64[Hp - 16] = lvl17_sgAfY_info;
           P64[Hp] = _sgAfV::P64;
           I64[Sp - 48] = block_cgIlI_info;
           R2 = _sgAfV::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgAfU::P64;
           P64[Sp - 24] = _sgAfV::P64;
           P64[Sp - 16] = _sgAfW::P64;
           P64[Sp - 8] = _sgAfX::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapMo_info" {
     Data.Complex.$fDataComplex_$cgmapMo_info:
         const Data.Complex.$fDataComplex_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgIlI() //  [R1]
         { []
         }
     {offset
       cgIlI: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgIo8; else goto cgIo7;
       cgIo8: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIo7: // global
           I64[Hp - 72] = sat_sgAgw_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sgAgq_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIlI_info" {
     block_cgIlI_info:
         const _cgIlI;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.178044663 UTC

[section ""data" . lvl14_rgA6z_closure" {
     lvl14_rgA6z_closure:
         const lvl14_rgA6z_info;
         const 0;
 },
 lvl14_rgA6z_entry() //  [R2]
         { []
         }
     {offset
       cgIpN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgIpO; else goto cgIpP;
       cgIpO: // global
           R2 = R2;
           R1 = lvl14_rgA6z_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIpP: // global
           I64[Sp - 8] = block_cgIpK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIpT; else goto cgIpL;
       ugIpT: // global
           call _cgIpK() args: 0, res: 0, upd: 0;
       cgIpL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl14_rgA6z_info" {
     lvl14_rgA6z_info:
         const lvl14_rgA6z_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+224;
 },
 _cgIpK() //  []
         { []
         }
     {offset
       cgIpK: // global
           R1 = Data.Complex.$c:+_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIpK_info" {
     block_cgIpK_info:
         const _cgIpK;
         const 0;
         const 4294967326;
         const SgBbV_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.183993229 UTC

[section ""data" . lvl15_rgA6A_closure" {
     lvl15_rgA6A_closure:
         const lvl15_rgA6A_info;
         const 0;
 },
 lvl15_rgA6A_entry() //  []
         { []
         }
     {offset
       cgIq8: // global
           R1 = Data.Complex.$tComplex_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_rgA6A_info" {
     lvl15_rgA6A_info:
         const lvl15_rgA6A_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgBbV_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.187459098 UTC

[section ""data" . lvl16_rgA6B_closure" {
     lvl16_rgA6B_closure:
         const lvl16_rgA6B_info;
 },
 lvl16_rgA6B_entry() //  []
         { []
         }
     {offset
       cgIqk: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl16_rgA6B_info" {
     lvl16_rgA6B_info:
         const lvl16_rgA6B_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.198649826 UTC

[section ""data" . Data.Complex.$fDataComplex_closure" {
     Data.Complex.$fDataComplex_closure:
         const Data.Complex.$fDataComplex_info;
         const 0;
 },
 sat_sgAgQ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIqB: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapMo_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgQ_info" {
     sat_sgAgQ_info:
         const sat_sgAgQ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgAgP_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIqJ: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapMp_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgP_info" {
     sat_sgAgP_info:
         const sat_sgAgP_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgAgO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIqR: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapM_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgO_info" {
     sat_sgAgO_info:
         const sat_sgAgO_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgAgN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIqZ: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapQi_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgN_info" {
     sat_sgAgN_info:
         const sat_sgAgN_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SgBbV_srt+216;
 },
 sat_sgAgM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgIr7: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fDataComplex_$cgmapQ_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgM_info" {
     sat_sgAgM_info:
         const sat_sgAgM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgAgL_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgIrf: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fDataComplex_$cgmapQr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgL_info" {
     sat_sgAgL_info:
         const sat_sgAgL_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sgAgK_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgIrn: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fDataComplex2_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgK_info" {
     sat_sgAgK_info:
         const sat_sgAgK_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sgAgJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgIrv: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fDataComplex3_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgJ_info" {
     sat_sgAgJ_info:
         const sat_sgAgJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgAgI_entry() //  [R1, R2]
         { []
         }
     {offset
       cgIrD: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fDataComplex_$cdataCast1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgI_info" {
     sat_sgAgI_info:
         const sat_sgAgI_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+200;
 },
 sat_sgAgH_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIrL: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgunfold_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgH_info" {
     sat_sgAgH_info:
         const sat_sgAgH_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgAgG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgIrT: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgfoldl_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAgG_info" {
     sat_sgAgG_info:
         const sat_sgAgG_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgAgF_entry() //  [R1]
         { []
         }
     {offset
       cgIs0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIs1; else goto cgIs2;
       cgIs1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIs2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fDataComplex10_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAgF_info" {
     sat_sgAgF_info:
         const sat_sgAgF_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+184;
 },
 Data.Complex.$fDataComplex_entry() //  [R2]
         { []
         }
     {offset
       cgIs4: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cgIs8; else goto cgIs7;
       cgIs8: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIs7: // global
           I64[Hp - 320] = sat_sgAgQ_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sgAgP_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sgAgO_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sgAgN_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sgAgM_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sgAgL_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sgAgK_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sgAgJ_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sgAgI_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sgAgH_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sgAgG_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sgAgF_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl14_rgA6z_closure+1;
           P64[Hp - 80] = lvl15_rgA6A_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl16_rgA6B_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_info" {
     Data.Complex.$fDataComplex_info:
         const Data.Complex.$fDataComplex_entry;
         const 0;
         const 3663607103502;
         const 4294967301;
         const SgBbV_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.228784227 UTC

[section ""data" . Data.Complex.$fFloatingComplex9_closure" {
     Data.Complex.$fFloatingComplex9_closure:
         const GHC.Types.F#_con_info;
         const 0.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.231164228 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cpi1_closure" {
     Data.Complex.$fFloatingComplex_$s$cpi1_closure:
         const Data.Complex.:+_con_info;
         const GHC.Float.$fFloatingFloat_$cpi_closure;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.235911548 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexp1_closure" {
     Data.Complex.$fFloatingComplex_$s$cexp1_closure:
         const Data.Complex.$fFloatingComplex_$s$cexp1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexp1_entry() //  [R2]
         { []
         }
     {offset
       cgIta: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgItI; else goto cgItJ;
       cgItI: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexp1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgItJ: // global
           I64[Sp - 8] = block_cgIt7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugItQ; else goto cgIt8;
       ugItQ: // global
           call _cgIt7(R1) args: 0, res: 0, upd: 0;
       cgIt8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexp1_info" {
     Data.Complex.$fFloatingComplex_$s$cexp1_info:
         const Data.Complex.$fFloatingComplex_$s$cexp1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIt7() //  [R1]
         { []
         }
     {offset
       cgIt7: // global
           I64[Sp - 8] = block_cgItd_info;
           _sgAgU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAgU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugItP; else goto cgIte;
       ugItP: // global
           call _cgItd(R1) args: 0, res: 0, upd: 0;
       cgIte: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIt7_info" {
     block_cgIt7_info:
         const _cgIt7;
         const 0;
         const 30;
 },
 _cgItd() //  [R1]
         { []
         }
     {offset
       cgItd: // global
           I64[Sp] = block_cgIti_info;
           _sgAgW::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAgW::F32;
           if (R1 & 7 != 0) goto ugItR; else goto cgItj;
       ugItR: // global
           call _cgIti(R1) args: 0, res: 0, upd: 0;
       cgItj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgItd_info" {
     block_cgItd_info:
         const _cgItd;
         const 1;
         const 30;
 },
 _cgIti() //  [R1]
         { []
         }
     {offset
       cgIti: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgItO; else goto cgItN;
       cgItO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgItN: // global
           _sgAgY::F32 = F32[R1 + 7];
           (_cgItn::F32) = call MO_F32_Exp(F32[Sp + 8]);
           (_cgItr::F32) = call MO_F32_Sin(_sgAgY::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgItn::F32, _cgItr::F32);
           (_cgItz::F32) = call MO_F32_Cos(_sgAgY::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgItn::F32, _cgItz::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIti_info" {
     block_cgIti_info:
         const _cgIti;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.251761645 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csin1_closure" {
     Data.Complex.$fFloatingComplex_$s$csin1_closure:
         const Data.Complex.$fFloatingComplex_$s$csin1_info;
 },
 Data.Complex.$fFloatingComplex_$s$csin1_entry() //  [R2]
         { []
         }
     {offset
       cgIun: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIuZ; else goto cgIv0;
       cgIuZ: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIv0: // global
           I64[Sp - 8] = block_cgIuk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIv7; else goto cgIul;
       ugIv7: // global
           call _cgIuk(R1) args: 0, res: 0, upd: 0;
       cgIul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csin1_info" {
     Data.Complex.$fFloatingComplex_$s$csin1_info:
         const Data.Complex.$fFloatingComplex_$s$csin1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIuk() //  [R1]
         { []
         }
     {offset
       cgIuk: // global
           I64[Sp - 8] = block_cgIuq_info;
           _sgAh8::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAh8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIv6; else goto cgIur;
       ugIv6: // global
           call _cgIuq(R1) args: 0, res: 0, upd: 0;
       cgIur: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIuk_info" {
     block_cgIuk_info:
         const _cgIuk;
         const 0;
         const 30;
 },
 _cgIuq() //  [R1]
         { []
         }
     {offset
       cgIuq: // global
           I64[Sp] = block_cgIuv_info;
           _sgAhb::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAhb::F32;
           if (R1 & 7 != 0) goto ugIv8; else goto cgIuw;
       ugIv8: // global
           call _cgIuv(R1) args: 0, res: 0, upd: 0;
       cgIuw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIuq_info" {
     block_cgIuq_info:
         const _cgIuq;
         const 1;
         const 30;
 },
 _cgIuv() //  [R1]
         { []
         }
     {offset
       cgIuv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIv5; else goto cgIv4;
       cgIv5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIv4: // global
           _sgAhb::F32 = F32[Sp + 8];
           _sgAhd::F32 = F32[R1 + 7];
           (_cgIuA::F32) = call MO_F32_Sinh(_sgAhb::F32);
           (_cgIuE::F32) = call MO_F32_Cos(_sgAhd::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgIuE::F32, _cgIuA::F32);
           (_cgIuM::F32) = call MO_F32_Cosh(_sgAhb::F32);
           (_cgIuQ::F32) = call MO_F32_Sin(_sgAhd::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgIuQ::F32, _cgIuM::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIuv_info" {
     block_cgIuv_info:
         const _cgIuv;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.267754582 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccos1_closure" {
     Data.Complex.$fFloatingComplex_$s$ccos1_closure:
         const Data.Complex.$fFloatingComplex_$s$ccos1_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccos1_entry() //  [R2]
         { []
         }
     {offset
       cgIvE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIwj; else goto cgIwk;
       cgIwj: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccos1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIwk: // global
           I64[Sp - 8] = block_cgIvB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIwr; else goto cgIvC;
       ugIwr: // global
           call _cgIvB(R1) args: 0, res: 0, upd: 0;
       cgIvC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccos1_info" {
     Data.Complex.$fFloatingComplex_$s$ccos1_info:
         const Data.Complex.$fFloatingComplex_$s$ccos1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIvB() //  [R1]
         { []
         }
     {offset
       cgIvB: // global
           I64[Sp - 8] = block_cgIvH_info;
           _sgAho::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAho::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIwq; else goto cgIvI;
       ugIwq: // global
           call _cgIvH(R1) args: 0, res: 0, upd: 0;
       cgIvI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIvB_info" {
     block_cgIvB_info:
         const _cgIvB;
         const 0;
         const 30;
 },
 _cgIvH() //  [R1]
         { []
         }
     {offset
       cgIvH: // global
           I64[Sp] = block_cgIvM_info;
           _sgAhr::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAhr::F32;
           if (R1 & 7 != 0) goto ugIws; else goto cgIvN;
       ugIws: // global
           call _cgIvM(R1) args: 0, res: 0, upd: 0;
       cgIvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIvH_info" {
     block_cgIvH_info:
         const _cgIvH;
         const 1;
         const 30;
 },
 _cgIvM() //  [R1]
         { []
         }
     {offset
       cgIvM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIwp; else goto cgIwo;
       cgIwp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIwo: // global
           _sgAhr::F32 = F32[Sp + 8];
           _sgAht::F32 = F32[R1 + 7];
           (_cgIvR::F32) = call MO_F32_Sinh(_sgAhr::F32);
           (_cgIvV::F32) = call MO_F32_Sin(_sgAht::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgIvV::F32,
                                                      _cgIvR::F32));
           (_cgIw6::F32) = call MO_F32_Cosh(_sgAhr::F32);
           (_cgIwa::F32) = call MO_F32_Cos(_sgAht::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgIwa::F32, _cgIw6::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIvM_info" {
     block_cgIvM_info:
         const _cgIvM;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.282419473 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csinh1_closure" {
     Data.Complex.$fFloatingComplex_$s$csinh1_closure:
         const Data.Complex.$fFloatingComplex_$s$csinh1_info;
 },
 Data.Complex.$fFloatingComplex_$s$csinh1_entry() //  [R2]
         { []
         }
     {offset
       cgIx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIxC; else goto cgIxD;
       cgIxC: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csinh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIxD: // global
           I64[Sp - 8] = block_cgIwX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIxK; else goto cgIwY;
       ugIxK: // global
           call _cgIwX(R1) args: 0, res: 0, upd: 0;
       cgIwY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csinh1_info" {
     Data.Complex.$fFloatingComplex_$s$csinh1_info:
         const Data.Complex.$fFloatingComplex_$s$csinh1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIwX() //  [R1]
         { []
         }
     {offset
       cgIwX: // global
           I64[Sp - 8] = block_cgIx3_info;
           _sgAhG::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAhG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIxJ; else goto cgIx4;
       ugIxJ: // global
           call _cgIx3(R1) args: 0, res: 0, upd: 0;
       cgIx4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIwX_info" {
     block_cgIwX_info:
         const _cgIwX;
         const 0;
         const 30;
 },
 _cgIx3() //  [R1]
         { []
         }
     {offset
       cgIx3: // global
           I64[Sp] = block_cgIx8_info;
           _sgAhI::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAhI::F32;
           if (R1 & 7 != 0) goto ugIxL; else goto cgIx9;
       ugIxL: // global
           call _cgIx8(R1) args: 0, res: 0, upd: 0;
       cgIx9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIx3_info" {
     block_cgIx3_info:
         const _cgIx3;
         const 1;
         const 30;
 },
 _cgIx8() //  [R1]
         { []
         }
     {offset
       cgIx8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIxI; else goto cgIxH;
       cgIxI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIxH: // global
           _sgAhI::F32 = F32[Sp + 8];
           _sgAhK::F32 = F32[R1 + 7];
           (_cgIxd::F32) = call MO_F32_Cosh(_sgAhI::F32);
           (_cgIxh::F32) = call MO_F32_Sin(_sgAhK::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgIxh::F32, _cgIxd::F32);
           (_cgIxp::F32) = call MO_F32_Sinh(_sgAhI::F32);
           (_cgIxt::F32) = call MO_F32_Cos(_sgAhK::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgIxt::F32, _cgIxp::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIx8_info" {
     block_cgIx8_info:
         const _cgIx8;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.297130616 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccosh1_closure" {
     Data.Complex.$fFloatingComplex_$s$ccosh1_closure:
         const Data.Complex.$fFloatingComplex_$s$ccosh1_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccosh1_entry() //  [R2]
         { []
         }
     {offset
       cgIyh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIyT; else goto cgIyU;
       cgIyT: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccosh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIyU: // global
           I64[Sp - 8] = block_cgIye_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIz1; else goto cgIyf;
       ugIz1: // global
           call _cgIye(R1) args: 0, res: 0, upd: 0;
       cgIyf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccosh1_info" {
     Data.Complex.$fFloatingComplex_$s$ccosh1_info:
         const Data.Complex.$fFloatingComplex_$s$ccosh1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIye() //  [R1]
         { []
         }
     {offset
       cgIye: // global
           I64[Sp - 8] = block_cgIyk_info;
           _sgAhW::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAhW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIz0; else goto cgIyl;
       ugIz0: // global
           call _cgIyk(R1) args: 0, res: 0, upd: 0;
       cgIyl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIye_info" {
     block_cgIye_info:
         const _cgIye;
         const 0;
         const 30;
 },
 _cgIyk() //  [R1]
         { []
         }
     {offset
       cgIyk: // global
           I64[Sp] = block_cgIyp_info;
           _sgAhY::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAhY::F32;
           if (R1 & 7 != 0) goto ugIz2; else goto cgIyq;
       ugIz2: // global
           call _cgIyp(R1) args: 0, res: 0, upd: 0;
       cgIyq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIyk_info" {
     block_cgIyk_info:
         const _cgIyk;
         const 1;
         const 30;
 },
 _cgIyp() //  [R1]
         { []
         }
     {offset
       cgIyp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIyZ; else goto cgIyY;
       cgIyZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIyY: // global
           _sgAhY::F32 = F32[Sp + 8];
           _sgAi0::F32 = F32[R1 + 7];
           (_cgIyu::F32) = call MO_F32_Sinh(_sgAhY::F32);
           (_cgIyy::F32) = call MO_F32_Sin(_sgAi0::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgIyy::F32, _cgIyu::F32);
           (_cgIyG::F32) = call MO_F32_Cosh(_sgAhY::F32);
           (_cgIyK::F32) = call MO_F32_Cos(_sgAi0::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgIyK::F32, _cgIyG::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIyp_info" {
     block_cgIyp_info:
         const _cgIyp;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.310297293 UTC

[section ""data" . Data.Complex.$w$s$c/1_closure" {
     Data.Complex.$w$s$c/1_closure:
         const Data.Complex.$w$s$c/1_info;
         const 0;
 },
 Data.Complex.$w$s$c/1_slow() //  [R1]
         { []
         }
     {offset
       cgIzs: // global
           F4 = F32[Sp + 24];
           F3 = F32[Sp + 16];
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c/1_entry() //  [F1, F2, F3, F4]
         { []
         }
     {offset
       cgIzy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgIzC; else goto cgIzD;
       cgIzC: // global
           R1 = Data.Complex.$w$s$c/1_closure;
           F32[Sp - 32] = F1;
           F32[Sp - 24] = F2;
           F32[Sp - 16] = F3;
           F32[Sp - 8] = F4;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cgIzD: // global
           I64[Sp - 40] = block_cgIzw_info;
           _sgAi9::F32 = F1;
           F1 = F3;
           F32[Sp - 32] = _sgAi9::F32;
           F32[Sp - 24] = F2;
           F32[Sp - 16] = F3;
           F32[Sp - 8] = F4;
           Sp = Sp - 40;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c/1_info" {
     Data.Complex.$w$s$c/1_info:
         const Data.Complex.$w$s$c/1_entry;
         const 0;
         const 12884901902;
         const 17179869184;
         const SgBbV_srt+264;
         const 964;
         const Data.Complex.$w$s$c/1_slow;
 },
 _cgIzw() //  [R1]
         { []
         }
     {offset
       cgIzw: // global
           I64[Sp - 8] = block_cgIzB_info;
           F1 = F32[Sp + 32];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIzw_info" {
     block_cgIzw_info:
         const _cgIzw;
         const 964;
         const 4294967326;
         const SgBbV_srt+264;
 },
 _cgIzB() //  [R1]
         { []
         }
     {offset
       cgIzB: // global
           _sgAib::F32 = F32[Sp + 32];
           _sgAid::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgAid::I64, R1)) goto cgIAD; else goto cgIAE;
       cgIAD: // global
           _sgAig::I64 = -_sgAid::I64;
           goto sgAif;
       cgIAE: // global
           _sgAig::I64 = -R1;
           goto sgAif;
       sgAif: // global
           I64[Sp] = block_cgIzO_info;
           F1 = _sgAib::F32;
           R2 = _sgAig::I64;
           I64[Sp + 8] = _sgAig::I64;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIzB_info" {
     block_cgIzB_info:
         const _cgIzB;
         const 1989;
         const 30;
 },
 _cgIzO() //  [F1]
         { []
         }
     {offset
       cgIzO: // global
           I64[Sp] = block_cgIzS_info;
           _sgAih::F32 = F1;
           F1 = F32[Sp + 40];
           R2 = I64[Sp + 8];
           F32[Sp + 8] = _sgAih::F32;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIzO_info" {
     block_cgIzO_info:
         const _cgIzO;
         const 1989;
         const 30;
 },
 _cgIzS() //  [F1]
         { []
         }
     {offset
       cgIzS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgIAz; else goto cgIAy;
       cgIAz: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgIAy: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           _sgAi9::F32 = F32[Sp + 16];
           _sgAia::F32 = F32[Sp + 24];
           _sgAih::F32 = F32[Sp + 8];
           _sgAij::F32 = %MO_F_Add_W32(%MO_F_Mul_W32(F32[Sp + 32],
                                                     _sgAih::F32),
                                       %MO_F_Mul_W32(F32[Sp + 40], F1));
           F32[Hp - 16] = %MO_F_Quot_W32(%MO_F_Sub_W32(%MO_F_Mul_W32(_sgAia::F32,
                                                                     _sgAih::F32),
                                                       %MO_F_Mul_W32(_sgAi9::F32, F1)),
                                         _sgAij::F32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(%MO_F_Add_W32(%MO_F_Mul_W32(_sgAi9::F32,
                                                                _sgAih::F32),
                                                  %MO_F_Mul_W32(_sgAia::F32, F1)),
                                    _sgAij::F32);
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIzS_info" {
     block_cgIzS_info:
         const _cgIzS;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.324388862 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c/1_closure" {
     Data.Complex.$fFloatingComplex_$s$c/1_closure:
         const Data.Complex.$fFloatingComplex_$s$c/1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c/1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIBr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIBW; else goto cgIBX;
       cgIBW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c/1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIBX: // global
           I64[Sp - 16] = block_cgIBo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugIC8; else goto cgIBp;
       ugIC8: // global
           call _cgIBo(R1) args: 0, res: 0, upd: 0;
       cgIBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c/1_info" {
     Data.Complex.$fFloatingComplex_$s$c/1_info:
         const Data.Complex.$fFloatingComplex_$s$c/1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+272;
 },
 _cgIBo() //  [R1]
         { []
         }
     {offset
       cgIBo: // global
           I64[Sp - 8] = block_cgIBu_info;
           _sgAiD::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAiD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIC7; else goto cgIBv;
       ugIC7: // global
           call _cgIBu(R1) args: 0, res: 0, upd: 0;
       cgIBv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIBo_info" {
     block_cgIBo_info:
         const _cgIBo;
         const 1;
         const 4294967326;
         const SgBbV_srt+272;
 },
 _cgIBu() //  [R1]
         { []
         }
     {offset
       cgIBu: // global
           I64[Sp] = block_cgIBz_info;
           _sgAiF::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAiF::F32;
           if (R1 & 7 != 0) goto ugIC9; else goto cgIBA;
       ugIC9: // global
           call _cgIBz(R1) args: 0, res: 0, upd: 0;
       cgIBA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIBu_info" {
     block_cgIBu_info:
         const _cgIBu;
         const 2;
         const 4294967326;
         const SgBbV_srt+272;
 },
 _cgIBz() //  [R1]
         { []
         }
     {offset
       cgIBz: // global
           I64[Sp] = block_cgIBE_info;
           _sgAiH::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgAiH::F32;
           if (R1 & 7 != 0) goto ugICa; else goto cgIBF;
       ugICa: // global
           call _cgIBE(R1) args: 0, res: 0, upd: 0;
       cgIBF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIBz_info" {
     block_cgIBz_info:
         const _cgIBz;
         const 66;
         const 4294967326;
         const SgBbV_srt+272;
 },
 _cgIBE() //  [R1]
         { []
         }
     {offset
       cgIBE: // global
           I64[Sp - 8] = block_cgIBJ_info;
           _sgAiK::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAiK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugICb; else goto cgIBK;
       ugICb: // global
           call _cgIBJ(R1) args: 0, res: 0, upd: 0;
       cgIBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIBE_info" {
     block_cgIBE_info:
         const _cgIBE;
         const 194;
         const 4294967326;
         const SgBbV_srt+272;
 },
 _cgIBJ() //  [R1]
         { []
         }
     {offset
       cgIBJ: // global
           I64[Sp] = block_cgIBO_info;
           _sgAiM::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAiM::F32;
           if (R1 & 7 != 0) goto ugICc; else goto cgIBP;
       ugICc: // global
           call _cgIBO(R1) args: 0, res: 0, upd: 0;
       cgIBP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIBJ_info" {
     block_cgIBJ_info:
         const _cgIBJ;
         const 387;
         const 4294967326;
         const SgBbV_srt+272;
 },
 _cgIBO() //  [R1]
         { []
         }
     {offset
       cgIBO: // global
           _sgAiH::F32 = F32[Sp + 24];
           I64[Sp + 24] = block_cgIBT_info;
           F4 = F32[R1 + 7];
           F3 = F32[Sp + 8];
           F2 = _sgAiH::F32;
           F1 = F32[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIBO_info" {
     block_cgIBO_info:
         const _cgIBO;
         const 451;
         const 4294967326;
         const SgBbV_srt+272;
 },
 _cgIBT() //  [R1, R2]
         { []
         }
     {offset
       cgIBT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIC6; else goto cgIC5;
       cgIC6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgIC5: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIBT_info" {
     block_cgIBT_info:
         const _cgIBT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.340941641 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromRational1_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromRational1_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cfromRational1_entry() //  [R2]
         { []
         }
     {offset
       cgICR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgICZ; else goto cgID0;
       cgICZ: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromRational1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgID0: // global
           I64[Sp - 8] = block_cgICO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugID5; else goto cgICP;
       ugID5: // global
           call _cgICO(R1) args: 0, res: 0, upd: 0;
       cgICP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromRational1_info" {
     Data.Complex.$fFloatingComplex_$s$cfromRational1_info:
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+288;
 },
 _cgICO() //  [R1]
         { []
         }
     {offset
       cgICO: // global
           I64[Sp] = block_cgICU_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Float.rationalToFloat_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgICO_info" {
     block_cgICO_info:
         const _cgICO;
         const 0;
         const 4294967326;
         const SgBbV_srt+288;
 },
 _cgICU() //  [R1]
         { []
         }
     {offset
       cgICU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgID4; else goto cgID3;
       cgID4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgID3: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgICU_info" {
     block_cgICU_info:
         const _cgICU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.351473211 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c+1_closure" {
     Data.Complex.$fFloatingComplex_$s$c+1_closure:
         const Data.Complex.$fFloatingComplex_$s$c+1_info;
 },
 Data.Complex.$fFloatingComplex_$s$c+1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIDq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIE1; else goto cgIE2;
       cgIE1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c+1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIE2: // global
           I64[Sp - 16] = block_cgIDn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugIEc; else goto cgIDo;
       ugIEc: // global
           call _cgIDn(R1) args: 0, res: 0, upd: 0;
       cgIDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c+1_info" {
     Data.Complex.$fFloatingComplex_$s$c+1_info:
         const Data.Complex.$fFloatingComplex_$s$c+1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgIDn() //  [R1]
         { []
         }
     {offset
       cgIDn: // global
           I64[Sp - 8] = block_cgIDt_info;
           _sgAj2::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAj2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIEb; else goto cgIDu;
       ugIEb: // global
           call _cgIDt(R1) args: 0, res: 0, upd: 0;
       cgIDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIDn_info" {
     block_cgIDn_info:
         const _cgIDn;
         const 1;
         const 30;
 },
 _cgIDt() //  [R1]
         { []
         }
     {offset
       cgIDt: // global
           I64[Sp] = block_cgIDy_info;
           _sgAj4::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAj4::F32;
           if (R1 & 7 != 0) goto ugIEd; else goto cgIDz;
       ugIEd: // global
           call _cgIDy(R1) args: 0, res: 0, upd: 0;
       cgIDz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIDt_info" {
     block_cgIDt_info:
         const _cgIDt;
         const 2;
         const 30;
 },
 _cgIDy() //  [R1]
         { []
         }
     {offset
       cgIDy: // global
           I64[Sp] = block_cgIDD_info;
           _sgAj6::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgAj6::F32;
           if (R1 & 7 != 0) goto ugIEe; else goto cgIDE;
       ugIEe: // global
           call _cgIDD(R1) args: 0, res: 0, upd: 0;
       cgIDE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIDy_info" {
     block_cgIDy_info:
         const _cgIDy;
         const 66;
         const 30;
 },
 _cgIDD() //  [R1]
         { []
         }
     {offset
       cgIDD: // global
           I64[Sp - 8] = block_cgIDI_info;
           _sgAj9::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAj9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIEf; else goto cgIDJ;
       ugIEf: // global
           call _cgIDI(R1) args: 0, res: 0, upd: 0;
       cgIDJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIDD_info" {
     block_cgIDD_info:
         const _cgIDD;
         const 194;
         const 30;
 },
 _cgIDI() //  [R1]
         { []
         }
     {offset
       cgIDI: // global
           I64[Sp] = block_cgIDN_info;
           _sgAjb::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAjb::F32;
           if (R1 & 7 != 0) goto ugIEg; else goto cgIDO;
       ugIEg: // global
           call _cgIDN(R1) args: 0, res: 0, upd: 0;
       cgIDO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIDI_info" {
     block_cgIDI_info:
         const _cgIDI;
         const 387;
         const 30;
 },
 _cgIDN() //  [R1]
         { []
         }
     {offset
       cgIDN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIEa; else goto cgIE9;
       cgIEa: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIE9: // global
           _sgAjg::F32 = %MO_F_Add_W32(F32[Sp + 24], F32[R1 + 7]);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = _sgAjg::F32;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Add_W32(F32[Sp + 16], F32[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIDN_info" {
     block_cgIDN_info:
         const _cgIDN;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.375884133 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c-1_closure" {
     Data.Complex.$fFloatingComplex_$s$c-1_closure:
         const Data.Complex.$fFloatingComplex_$s$c-1_info;
 },
 Data.Complex.$fFloatingComplex_$s$c-1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIEY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIFz; else goto cgIFA;
       cgIFz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c-1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIFA: // global
           I64[Sp - 16] = block_cgIEV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugIFK; else goto cgIEW;
       ugIFK: // global
           call _cgIEV(R1) args: 0, res: 0, upd: 0;
       cgIEW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c-1_info" {
     Data.Complex.$fFloatingComplex_$s$c-1_info:
         const Data.Complex.$fFloatingComplex_$s$c-1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgIEV() //  [R1]
         { []
         }
     {offset
       cgIEV: // global
           I64[Sp - 8] = block_cgIF1_info;
           _sgAjm::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAjm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIFJ; else goto cgIF2;
       ugIFJ: // global
           call _cgIF1(R1) args: 0, res: 0, upd: 0;
       cgIF2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIEV_info" {
     block_cgIEV_info:
         const _cgIEV;
         const 1;
         const 30;
 },
 _cgIF1() //  [R1]
         { []
         }
     {offset
       cgIF1: // global
           I64[Sp] = block_cgIF6_info;
           _sgAjo::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAjo::F32;
           if (R1 & 7 != 0) goto ugIFL; else goto cgIF7;
       ugIFL: // global
           call _cgIF6(R1) args: 0, res: 0, upd: 0;
       cgIF7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIF1_info" {
     block_cgIF1_info:
         const _cgIF1;
         const 2;
         const 30;
 },
 _cgIF6() //  [R1]
         { []
         }
     {offset
       cgIF6: // global
           I64[Sp] = block_cgIFb_info;
           _sgAjq::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgAjq::F32;
           if (R1 & 7 != 0) goto ugIFM; else goto cgIFc;
       ugIFM: // global
           call _cgIFb(R1) args: 0, res: 0, upd: 0;
       cgIFc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIF6_info" {
     block_cgIF6_info:
         const _cgIF6;
         const 66;
         const 30;
 },
 _cgIFb() //  [R1]
         { []
         }
     {offset
       cgIFb: // global
           I64[Sp - 8] = block_cgIFg_info;
           _sgAjt::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAjt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIFN; else goto cgIFh;
       ugIFN: // global
           call _cgIFg(R1) args: 0, res: 0, upd: 0;
       cgIFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIFb_info" {
     block_cgIFb_info:
         const _cgIFb;
         const 194;
         const 30;
 },
 _cgIFg() //  [R1]
         { []
         }
     {offset
       cgIFg: // global
           I64[Sp] = block_cgIFl_info;
           _sgAjv::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAjv::F32;
           if (R1 & 7 != 0) goto ugIFO; else goto cgIFm;
       ugIFO: // global
           call _cgIFl(R1) args: 0, res: 0, upd: 0;
       cgIFm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIFg_info" {
     block_cgIFg_info:
         const _cgIFg;
         const 387;
         const 30;
 },
 _cgIFl() //  [R1]
         { []
         }
     {offset
       cgIFl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIFI; else goto cgIFH;
       cgIFI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIFH: // global
           _sgAjA::F32 = %MO_F_Sub_W32(F32[Sp + 24], F32[R1 + 7]);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = _sgAjA::F32;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Sub_W32(F32[Sp + 16], F32[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIFl_info" {
     block_cgIFl_info:
         const _cgIFl;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.400391377 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c*1_closure" {
     Data.Complex.$fFloatingComplex_$s$c*1_closure:
         const Data.Complex.$fFloatingComplex_$s$c*1_info;
 },
 Data.Complex.$fFloatingComplex_$s$c*1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIGw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIHj; else goto cgIHk;
       cgIHj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c*1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIHk: // global
           I64[Sp - 16] = block_cgIGt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugIHu; else goto cgIGu;
       ugIHu: // global
           call _cgIGt(R1) args: 0, res: 0, upd: 0;
       cgIGu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c*1_info" {
     Data.Complex.$fFloatingComplex_$s$c*1_info:
         const Data.Complex.$fFloatingComplex_$s$c*1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgIGt() //  [R1]
         { []
         }
     {offset
       cgIGt: // global
           I64[Sp - 8] = block_cgIGz_info;
           _sgAjG::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAjG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIHt; else goto cgIGA;
       ugIHt: // global
           call _cgIGz(R1) args: 0, res: 0, upd: 0;
       cgIGA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIGt_info" {
     block_cgIGt_info:
         const _cgIGt;
         const 1;
         const 30;
 },
 _cgIGz() //  [R1]
         { []
         }
     {offset
       cgIGz: // global
           I64[Sp] = block_cgIGE_info;
           _sgAjI::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAjI::F32;
           if (R1 & 7 != 0) goto ugIHv; else goto cgIGF;
       ugIHv: // global
           call _cgIGE(R1) args: 0, res: 0, upd: 0;
       cgIGF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIGz_info" {
     block_cgIGz_info:
         const _cgIGz;
         const 2;
         const 30;
 },
 _cgIGE() //  [R1]
         { []
         }
     {offset
       cgIGE: // global
           I64[Sp] = block_cgIGJ_info;
           _sgAjK::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgAjK::F32;
           if (R1 & 7 != 0) goto ugIHw; else goto cgIGK;
       ugIHw: // global
           call _cgIGJ(R1) args: 0, res: 0, upd: 0;
       cgIGK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIGE_info" {
     block_cgIGE_info:
         const _cgIGE;
         const 66;
         const 30;
 },
 _cgIGJ() //  [R1]
         { []
         }
     {offset
       cgIGJ: // global
           I64[Sp - 8] = block_cgIGO_info;
           _sgAjN::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAjN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIHx; else goto cgIGP;
       ugIHx: // global
           call _cgIGO(R1) args: 0, res: 0, upd: 0;
       cgIGP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIGJ_info" {
     block_cgIGJ_info:
         const _cgIGJ;
         const 194;
         const 30;
 },
 _cgIGO() //  [R1]
         { []
         }
     {offset
       cgIGO: // global
           I64[Sp] = block_cgIGT_info;
           _sgAjP::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAjP::F32;
           if (R1 & 7 != 0) goto ugIHy; else goto cgIGU;
       ugIHy: // global
           call _cgIGT(R1) args: 0, res: 0, upd: 0;
       cgIGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIGO_info" {
     block_cgIGO_info:
         const _cgIGO;
         const 387;
         const 30;
 },
 _cgIGT() //  [R1]
         { []
         }
     {offset
       cgIGT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIHs; else goto cgIHr;
       cgIHs: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIHr: // global
           _sgAjR::F32 = F32[R1 + 7];
           I64[Hp - 48] = GHC.Types.F#_con_info;
           _sgAjI::F32 = F32[Sp + 16];
           _sgAjK::F32 = F32[Sp + 24];
           _sgAjP::F32 = F32[Sp + 8];
           F32[Hp - 40] = %MO_F_Add_W32(%MO_F_Mul_W32(_sgAjI::F32,
                                                      _sgAjR::F32),
                                        %MO_F_Mul_W32(_sgAjK::F32, _sgAjP::F32));
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Sub_W32(%MO_F_Mul_W32(_sgAjI::F32,
                                                      _sgAjP::F32),
                                        %MO_F_Mul_W32(_sgAjK::F32, _sgAjR::F32));
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIGT_info" {
     block_cgIGT_info:
         const _cgIGT;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.417099224 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cnegate1_closure" {
     Data.Complex.$fFloatingComplex_$s$cnegate1_closure:
         const Data.Complex.$fFloatingComplex_$s$cnegate1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cnegate1_entry() //  [R2]
         { []
         }
     {offset
       cgIIm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIII; else goto cgIIJ;
       cgIII: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cnegate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIIJ: // global
           I64[Sp - 8] = block_cgIIj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIIQ; else goto cgIIk;
       ugIIQ: // global
           call _cgIIj(R1) args: 0, res: 0, upd: 0;
       cgIIk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cnegate1_info" {
     Data.Complex.$fFloatingComplex_$s$cnegate1_info:
         const Data.Complex.$fFloatingComplex_$s$cnegate1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIIj() //  [R1]
         { []
         }
     {offset
       cgIIj: // global
           I64[Sp - 8] = block_cgIIp_info;
           _sgAk3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAk3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIIP; else goto cgIIq;
       ugIIP: // global
           call _cgIIp(R1) args: 0, res: 0, upd: 0;
       cgIIq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIIj_info" {
     block_cgIIj_info:
         const _cgIIj;
         const 0;
         const 30;
 },
 _cgIIp() //  [R1]
         { []
         }
     {offset
       cgIIp: // global
           I64[Sp] = block_cgIIu_info;
           _sgAk5::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAk5::F32;
           if (R1 & 7 != 0) goto ugIIR; else goto cgIIv;
       ugIIR: // global
           call _cgIIu(R1) args: 0, res: 0, upd: 0;
       cgIIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIIp_info" {
     block_cgIIp_info:
         const _cgIIp;
         const 1;
         const 30;
 },
 _cgIIu() //  [R1]
         { []
         }
     {offset
       cgIIu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIIO; else goto cgIIN;
       cgIIO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIIN: // global
           _sgAka::F32 = %MO_F_Neg_W32(F32[R1 + 7]);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = _sgAka::F32;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIIu_info" {
     block_cgIIu_info:
         const _cgIIu;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.42686946 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cfromInteger1_entry() //  [R2]
         { []
         }
     {offset
       cgIJn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgIJs; else goto cgIJt;
       cgIJs: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIJt: // global
           I64[Sp - 8] = block_cgIJl_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromInteger1_info" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger1_info:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIJl() //  [F1]
         { []
         }
     {offset
       cgIJl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgIJw; else goto cgIJv;
       cgIJw: // global
           HpAlloc = 40;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgIJv: // global
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIJl_info" {
     block_cgIJl_info:
         const _cgIJl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.433983442 UTC

[section ""data" . Data.Complex.conjugate_$sconjugate_closure" {
     Data.Complex.conjugate_$sconjugate_closure:
         const Data.Complex.conjugate_$sconjugate_info;
 },
 Data.Complex.conjugate_$sconjugate_entry() //  [R2]
         { []
         }
     {offset
       cgIJO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIK1; else goto cgIK2;
       cgIK1: // global
           R2 = R2;
           R1 = Data.Complex.conjugate_$sconjugate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIK2: // global
           I64[Sp - 8] = block_cgIJL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIK8; else goto cgIJM;
       ugIK8: // global
           call _cgIJL(R1) args: 0, res: 0, upd: 0;
       cgIJM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.conjugate_$sconjugate_info" {
     Data.Complex.conjugate_$sconjugate_info:
         const Data.Complex.conjugate_$sconjugate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIJL() //  [R1]
         { []
         }
     {offset
       cgIJL: // global
           I64[Sp - 8] = block_cgIJR_info;
           _sgAkh::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAkh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIK7; else goto cgIJS;
       ugIK7: // global
           call _cgIJR(R1) args: 0, res: 0, upd: 0;
       cgIJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIJL_info" {
     block_cgIJL_info:
         const _cgIJL;
         const 0;
         const 30;
 },
 _cgIJR() //  [R1]
         { []
         }
     {offset
       cgIJR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgIK6; else goto cgIK5;
       cgIK6: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIK5: // global
           _sgAkl::F64 = %MO_F_Neg_W64(F64[R1 + 7]);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = _sgAkl::F64;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIJR_info" {
     block_cgIJR_info:
         const _cgIJR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.44245528 UTC

[section ""data" . Data.Complex.conjugate_closure" {
     Data.Complex.conjugate_closure:
         const Data.Complex.conjugate_info;
 },
 Data.Complex.conjugate_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIKy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIKE; else goto cgIKF;
       cgIKE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.conjugate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIKF: // global
           I64[Sp - 16] = block_cgIKv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugIKK; else goto cgIKw;
       ugIKK: // global
           call _cgIKv(R1) args: 0, res: 0, upd: 0;
       cgIKw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.conjugate_info" {
     Data.Complex.conjugate_info:
         const Data.Complex.conjugate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgIKv() //  [R1]
         { []
         }
     {offset
       cgIKv: // global
           I64[Sp] = block_cgIKB_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIKv_info" {
     block_cgIKv_info:
         const _cgIKv;
         const 1;
         const 30;
 },
 _cgIKB() //  [R1]
         { []
         }
     {offset
       cgIKB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIKJ; else goto cgIKI;
       cgIKJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIKI: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIKB_info" {
     block_cgIKB_info:
         const _cgIKB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.450065318 UTC

[section ""data" . Data.Complex.cis_$scis_closure" {
     Data.Complex.cis_$scis_closure:
         const Data.Complex.cis_$scis_info;
 },
 Data.Complex.cis_$scis_entry() //  [R2]
         { []
         }
     {offset
       cgIL8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgILm; else goto cgILn;
       cgILm: // global
           R2 = R2;
           R1 = Data.Complex.cis_$scis_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgILn: // global
           I64[Sp - 8] = block_cgIL5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugILr; else goto cgIL6;
       ugILr: // global
           call _cgIL5(R1) args: 0, res: 0, upd: 0;
       cgIL6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.cis_$scis_info" {
     Data.Complex.cis_$scis_info:
         const Data.Complex.cis_$scis_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIL5() //  [R1]
         { []
         }
     {offset
       cgIL5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgILq; else goto cgILp;
       cgILq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgILp: // global
           _sgAkv::F64 = F64[R1 + 7];
           (_cgILb::F64) = call MO_F64_Sin(_sgAkv::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _cgILb::F64;
           (_cgILg::F64) = call MO_F64_Cos(_sgAkv::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = _cgILg::F64;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIL5_info" {
     block_cgIL5_info:
         const _cgIL5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.456715899 UTC

[section ""data" . Data.Complex.cis_closure" {
     Data.Complex.cis_closure:
         const Data.Complex.cis_info;
 },
 Data.Complex.cis_entry() //  [R2, R3]
         { []
         }
     {offset
       cgILN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgILO; else goto cgILP;
       cgILO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.cis_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgILP: // global
           I64[Sp - 24] = block_cgILI_info;
           _sgAkA::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _sgAkA::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Float.cos_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.cis_info" {
     Data.Complex.cis_info:
         const Data.Complex.cis_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgILI() //  [R1]
         { []
         }
     {offset
       cgILI: // global
           _sgAkA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgILK_info;
           R2 = _sgAkA::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Float.sin_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgILI_info" {
     block_cgILI_info:
         const _cgILI;
         const 2;
         const 30;
 },
 _cgILK() //  [R1]
         { []
         }
     {offset
       cgILK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgILT; else goto cgILS;
       cgILT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgILS: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgILK_info" {
     block_cgILK_info:
         const _cgILK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.465425125 UTC

[section ""data" . Data.Complex.mkPolar_$smkPolar_closure" {
     Data.Complex.mkPolar_$smkPolar_closure:
         const Data.Complex.mkPolar_$smkPolar_info;
 },
 Data.Complex.mkPolar_$smkPolar_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIMf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIME; else goto cgIMF;
       cgIME: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.mkPolar_$smkPolar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIMF: // global
           I64[Sp - 16] = block_cgIMc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugIML; else goto cgIMd;
       ugIML: // global
           call _cgIMc(R1) args: 0, res: 0, upd: 0;
       cgIMd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.mkPolar_$smkPolar_info" {
     Data.Complex.mkPolar_$smkPolar_info:
         const Data.Complex.mkPolar_$smkPolar_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgIMc() //  [R1]
         { []
         }
     {offset
       cgIMc: // global
           I64[Sp] = block_cgIMi_info;
           _sgAkH::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAkH::F64;
           if (R1 & 7 != 0) goto ugIMK; else goto cgIMj;
       ugIMK: // global
           call _cgIMi(R1) args: 0, res: 0, upd: 0;
       cgIMj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIMc_info" {
     block_cgIMc_info:
         const _cgIMc;
         const 1;
         const 30;
 },
 _cgIMi() //  [R1]
         { []
         }
     {offset
       cgIMi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgIMJ; else goto cgIMI;
       cgIMJ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgIMI: // global
           _sgAkH::F64 = F64[Sp + 8];
           _sgAkJ::F64 = F64[R1 + 7];
           (_cgIMn::F64) = call MO_F64_Sin(_sgAkJ::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_sgAkH::F64, _cgIMn::F64);
           (_cgIMv::F64) = call MO_F64_Cos(_sgAkJ::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_sgAkH::F64, _cgIMv::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIMi_info" {
     block_cgIMi_info:
         const _cgIMi;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.476029202 UTC

[section ""data" . Data.Complex.$wmkPolar_closure" {
     Data.Complex.$wmkPolar_closure:
         const Data.Complex.$wmkPolar_info;
 },
 sat_sgAkV_entry() //  [R1]
         { []
         }
     {offset
       cgINm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgINn; else goto cgINo;
       cgINn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgINo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAkV_info" {
     sat_sgAkV_info:
         const sat_sgAkV_entry;
         const 2;
         const 18;
 },
 sat_sgAkX_entry() //  [R1]
         { []
         }
     {offset
       cgINv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgINw; else goto cgINx;
       cgINw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgINx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAkX_info" {
     sat_sgAkX_info:
         const sat_sgAkX_entry;
         const 2;
         const 18;
 },
 Data.Complex.$wmkPolar_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgINy: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgINA; else goto cgINB;
       cgINA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$wmkPolar_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgINB: // global
           I64[Sp - 32] = block_cgINa_info;
           _sgAkQ::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAkQ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$wmkPolar_info" {
     Data.Complex.$wmkPolar_info:
         const Data.Complex.$wmkPolar_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgINa() //  [R1]
         { []
         }
     {offset
       cgINa: // global
           I64[Sp] = block_cgINe_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgINa_info" {
     block_cgINa_info:
         const _cgINa;
         const 3;
         const 30;
 },
 _cgINe() //  [R1]
         { []
         }
     {offset
       cgINe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgINF; else goto cgINE;
       cgINF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgINE: // global
           I64[Hp - 24] = sat_sgAkV_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 8] = block_cgINp_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = Hp - 24;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgINe_info" {
     block_cgINe_info:
         const _cgINe;
         const 3;
         const 30;
 },
 _cgINp() //  [R1]
         { []
         }
     {offset
       cgINp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgINI; else goto cgINH;
       cgINI: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgINH: // global
           I64[Hp - 24] = sat_sgAkX_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           _sgAkR::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgINz_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _sgAkR::P64;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgINp_info" {
     block_cgINp_info:
         const _cgINp;
         const 4;
         const 30;
 },
 _cgINz() //  [R1]
         { []
         }
     {offset
       cgINz: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgINz_info" {
     block_cgINz_info:
         const _cgINz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.489994041 UTC

[section ""data" . Data.Complex.mkPolar_closure" {
     Data.Complex.mkPolar_closure:
         const Data.Complex.mkPolar_info;
 },
 Data.Complex.mkPolar_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgIOr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgIOs; else goto cgIOt;
       cgIOs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.mkPolar_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIOt: // global
           I64[Sp - 8] = block_cgIOo_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$wmkPolar_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.mkPolar_info" {
     Data.Complex.mkPolar_info:
         const Data.Complex.mkPolar_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgIOo() //  [R1, R2]
         { []
         }
     {offset
       cgIOo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgIOw; else goto cgIOv;
       cgIOw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgIOv: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIOo_info" {
     block_cgIOo_info:
         const _cgIOo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.496052875 UTC

[section ""data" . Data.Complex.$w$sphase_closure" {
     Data.Complex.$w$sphase_closure:
         const Data.Complex.$w$sphase_info;
 },
 Data.Complex.$w$sphase_slow() //  [R1]
         { []
         }
     {offset
       cgIOH: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$sphase_entry(D2,
                                             D1,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$sphase_entry() //  [D1, D2]
         { []
         }
     {offset
       cgIOQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgIOU; else goto cgIOT;
       cgIOU: // global
           HpAlloc = 16;
           R1 = Data.Complex.$w$sphase_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgIOT: // global
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto cgIOP; else goto cgIOO;
       cgIOP: // global
           if (%MO_F_Eq_W64(D2, 0.0 :: W64)) goto cgIP4; else goto cgIP3;
       cgIP4: // global
           Hp = Hp - 16;
           D1 = 0.0 :: W64;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       cgIP3: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D2;
           D1 = D1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 0, upd: 8;
       cgIOO: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D2;
           D1 = D1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$sphase_info" {
     Data.Complex.$w$sphase_info:
         const Data.Complex.$w$sphase_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 194;
         const Data.Complex.$w$sphase_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.502394902 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$sphase_closure" {
     Data.Complex.$fFloatingComplex_$sphase_closure:
         const Data.Complex.$fFloatingComplex_$sphase_info;
 },
 Data.Complex.$fFloatingComplex_$sphase_entry() //  [R2]
         { []
         }
     {offset
       cgIPn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIPF; else goto cgIPG;
       cgIPF: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$sphase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIPG: // global
           I64[Sp - 8] = block_cgIPk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIPO; else goto cgIPl;
       ugIPO: // global
           call _cgIPk(R1) args: 0, res: 0, upd: 0;
       cgIPl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$sphase_info" {
     Data.Complex.$fFloatingComplex_$sphase_info:
         const Data.Complex.$fFloatingComplex_$sphase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIPk() //  [R1]
         { []
         }
     {offset
       cgIPk: // global
           I64[Sp - 8] = block_cgIPq_info;
           _sgAle::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAle::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIPN; else goto cgIPr;
       ugIPN: // global
           call _cgIPq(R1) args: 0, res: 0, upd: 0;
       cgIPr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIPk_info" {
     block_cgIPk_info:
         const _cgIPk;
         const 0;
         const 30;
 },
 _cgIPq() //  [R1]
         { []
         }
     {offset
       cgIPq: // global
           I64[Sp] = block_cgIPv_info;
           _sgAlg::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAlg::F64;
           if (R1 & 7 != 0) goto ugIPP; else goto cgIPw;
       ugIPP: // global
           call _cgIPv(R1) args: 0, res: 0, upd: 0;
       cgIPw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIPq_info" {
     block_cgIPq_info:
         const _cgIPq;
         const 1;
         const 30;
 },
 _cgIPv() //  [R1]
         { []
         }
     {offset
       cgIPv: // global
           _sgAlg::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgIPA_info;
           D2 = F64[R1 + 7];
           D1 = _sgAlg::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIPv_info" {
     block_cgIPv_info:
         const _cgIPv;
         const 65;
         const 30;
 },
 _cgIPA() //  [D1]
         { []
         }
     {offset
       cgIPA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgIPM; else goto cgIPL;
       cgIPM: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgIPL: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIPA_info" {
     block_cgIPA_info:
         const _cgIPA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.514006389 UTC

[section ""data" . Data.Complex.$w$sphase1_closure" {
     Data.Complex.$w$sphase1_closure:
         const Data.Complex.$w$sphase1_info;
 },
 Data.Complex.$w$sphase1_slow() //  [R1]
         { []
         }
     {offset
       cgIQc: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$sphase1_entry(F2,
                                              F1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$sphase1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgIQl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgIQp; else goto cgIQo;
       cgIQp: // global
           HpAlloc = 16;
           R1 = Data.Complex.$w$sphase1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgIQo: // global
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto cgIQk; else goto cgIQj;
       cgIQk: // global
           if (%MO_F_Eq_W32(F2, 0.0 :: W32)) goto cgIQz; else goto cgIQy;
       cgIQz: // global
           Hp = Hp - 16;
           F1 = 0.0 :: W32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       cgIQy: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F2;
           F1 = F1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 0, upd: 8;
       cgIQj: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F2;
           F1 = F1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$sphase1_info" {
     Data.Complex.$w$sphase1_info:
         const Data.Complex.$w$sphase1_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 194;
         const Data.Complex.$w$sphase1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.520862555 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$sphase1_closure" {
     Data.Complex.$fFloatingComplex_$sphase1_closure:
         const Data.Complex.$fFloatingComplex_$sphase1_info;
 },
 Data.Complex.$fFloatingComplex_$sphase1_entry() //  [R2]
         { []
         }
     {offset
       cgIQS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIRa; else goto cgIRb;
       cgIRa: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$sphase1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIRb: // global
           I64[Sp - 8] = block_cgIQP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIRj; else goto cgIQQ;
       ugIRj: // global
           call _cgIQP(R1) args: 0, res: 0, upd: 0;
       cgIQQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$sphase1_info" {
     Data.Complex.$fFloatingComplex_$sphase1_info:
         const Data.Complex.$fFloatingComplex_$sphase1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgIQP() //  [R1]
         { []
         }
     {offset
       cgIQP: // global
           I64[Sp - 8] = block_cgIQV_info;
           _sgAlt::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAlt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIRi; else goto cgIQW;
       ugIRi: // global
           call _cgIQV(R1) args: 0, res: 0, upd: 0;
       cgIQW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIQP_info" {
     block_cgIQP_info:
         const _cgIQP;
         const 0;
         const 30;
 },
 _cgIQV() //  [R1]
         { []
         }
     {offset
       cgIQV: // global
           I64[Sp] = block_cgIR0_info;
           _sgAlv::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAlv::F32;
           if (R1 & 7 != 0) goto ugIRk; else goto cgIR1;
       ugIRk: // global
           call _cgIR0(R1) args: 0, res: 0, upd: 0;
       cgIR1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIQV_info" {
     block_cgIQV_info:
         const _cgIQV;
         const 1;
         const 30;
 },
 _cgIR0() //  [R1]
         { []
         }
     {offset
       cgIR0: // global
           _sgAlv::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgIR5_info;
           F2 = F32[R1 + 7];
           F1 = _sgAlv::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIR0_info" {
     block_cgIR0_info:
         const _cgIR0;
         const 65;
         const 30;
 },
 _cgIR5() //  [F1]
         { []
         }
     {offset
       cgIR5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgIRh; else goto cgIRg;
       cgIRh: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgIRg: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIR5_info" {
     block_cgIR5_info:
         const _cgIR5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.531023902 UTC

[section ""data" . Data.Complex.$fFloatingComplex17_closure" {
     Data.Complex.$fFloatingComplex17_closure:
         const Data.Complex.$fFloatingComplex17_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex17_entry() //  [R1]
         { []
         }
     {offset
       cgIRM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIRN; else goto cgIRO;
       cgIRN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIRO: // global
           (_cgIRJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgIRJ::I64 == 0) goto cgIRL; else goto cgIRK;
       cgIRL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgIRK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgIRJ::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex17_info" {
     Data.Complex.$fFloatingComplex17_info:
         const Data.Complex.$fFloatingComplex17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.539139148 UTC

[section ""data" . Data.Complex.$wphase_closure" {
     Data.Complex.$wphase_closure:
         const Data.Complex.$wphase_info;
         const 0;
 },
 $dNum_sgAlE_entry() //  [R1]
         { []
         }
     {offset
       cgISc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgISd; else goto cgISe;
       cgISd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgISe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgAlE_info" {
     $dNum_sgAlE_info:
         const $dNum_sgAlE_entry;
         const 1;
         const 16;
 },
 sat_sgAlH_entry() //  [R1]
         { []
         }
     {offset
       cgISr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgISs; else goto cgISt;
       cgISs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgISt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAlH_info" {
     sat_sgAlH_info:
         const sat_sgAlH_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+304;
 },
 sat_sgAlJ_entry() //  [R1]
         { []
         }
     {offset
       cgISD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgISE; else goto cgISF;
       cgISE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgISF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAlJ_info" {
     sat_sgAlJ_info:
         const sat_sgAlJ_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+304;
 },
 Data.Complex.$wphase_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgISG: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgISH; else goto cgISI;
       cgISH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$wphase_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgISI: // global
           I64[Sp - 32] = block_cgIS0_info;
           _sgAlz::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAlz::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$wphase_info" {
     Data.Complex.$wphase_info:
         const Data.Complex.$wphase_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgBbV_srt+304;
 },
 _cgIS0() //  [R1]
         { []
         }
     {offset
       cgIS0: // global
           I64[Sp] = block_cgIS4_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIS0_info" {
     block_cgIS0_info:
         const _cgIS0;
         const 3;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgIS4() //  [R1]
         { []
         }
     {offset
       cgIS4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgISM; else goto cgISL;
       cgISM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgISL: // global
           I64[Hp - 16] = $dNum_sgAlE_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgISf_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIS4_info" {
     block_cgIS4_info:
         const _cgIS4;
         const 3;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgISf() //  [R1]
         { []
         }
     {offset
       cgISf: // global
           I64[Sp] = block_cgISj_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgISf_info" {
     block_cgISf_info:
         const _cgISf;
         const 4;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgISj() //  [R1]
         { []
         }
     {offset
       cgISj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgISQ; else goto cgISP;
       cgISQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgISP: // global
           I64[Hp - 16] = sat_sgAlH_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgISu_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgISj_info" {
     block_cgISj_info:
         const _cgISj;
         const 4;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgISu() //  [R1]
         { []
         }
     {offset
       cgISu: // global
           if (R1 & 7 == 1) goto ugITc; else goto cgISW;
       ugITc: // global
           Sp = Sp + 24;
           call _cgIT5() args: 0, res: 0, upd: 0;
       cgISW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgISZ; else goto cgISY;
       cgISZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgISY: // global
           I64[Hp - 16] = sat_sgAlJ_info;
           P64[Hp] = P64[Sp + 16];
           _sgAlG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgISV_info;
           R2 = _sgAlG::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgISu_info" {
     block_cgISu_info:
         const _cgISu;
         const 5;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgISV() //  [R1]
         { []
         }
     {offset
       cgISV: // global
           if (R1 & 7 == 1) goto ugITd; else goto cgIT9;
       ugITd: // global
           Sp = Sp + 16;
           call _cgIT5() args: 0, res: 0, upd: 0;
       cgIT9: // global
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgISV_info" {
     block_cgISV_info:
         const _cgISV;
         const 4;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgIT5() //  []
         { []
         }
     {offset
       cgIT5: // global
           R2 = P64[Sp];
           I64[Sp] = stg_ap_pp_info;
           _sgAlA::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sgAlA::P64;
           call GHC.Float.atan2_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.559365224 UTC

[section ""data" . Data.Complex.phase_closure" {
     Data.Complex.phase_closure:
         const Data.Complex.phase_info;
         const 0;
 },
 Data.Complex.phase_entry() //  [R2, R3]
         { []
         }
     {offset
       cgIUa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIUb; else goto cgIUc;
       cgIUb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.phase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgIUc: // global
           I64[Sp - 16] = block_cgIU7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugIUg; else goto cgIU8;
       ugIUg: // global
           call _cgIU7(R1) args: 0, res: 0, upd: 0;
       cgIU8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.phase_info" {
     Data.Complex.phase_info:
         const Data.Complex.phase_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+312;
 },
 _cgIU7() //  [R1]
         { []
         }
     {offset
       cgIU7: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIU7_info" {
     block_cgIU7_info:
         const _cgIU7;
         const 1;
         const 4294967326;
         const SgBbV_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.566655947 UTC

[section ""data" . Data.Complex.$w$smagnitude_closure" {
     Data.Complex.$w$smagnitude_closure:
         const Data.Complex.$w$smagnitude_info;
         const 0;
 },
 Data.Complex.$w$smagnitude_slow() //  [R1]
         { []
         }
     {offset
       cgIUr: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1,
                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$smagnitude_entry() //  [D1, D2]
         { []
         }
     {offset
       cgIUx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIUB; else goto cgIUC;
       cgIUB: // global
           R1 = Data.Complex.$w$smagnitude_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgIUC: // global
           I64[Sp - 24] = block_cgIUv_info;
           _sgAlQ::F64 = D1;
           D1 = D1;
           F64[Sp - 16] = _sgAlQ::F64;
           F64[Sp - 8] = D2;
           Sp = Sp - 24;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$smagnitude_info" {
     Data.Complex.$w$smagnitude_info:
         const Data.Complex.$w$smagnitude_entry;
         const 0;
         const 30064771086;
         const 8589934592;
         const SgBbV_srt+328;
         const 194;
         const Data.Complex.$w$smagnitude_slow;
 },
 _cgIUv() //  [R1]
         { []
         }
     {offset
       cgIUv: // global
           I64[Sp - 8] = block_cgIUA_info;
           D1 = F64[Sp + 16];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIUv_info" {
     block_cgIUv_info:
         const _cgIUv;
         const 194;
         const 12884901918;
         const SgBbV_srt+328;
 },
 _cgIUA() //  [R1]
         { []
         }
     {offset
       cgIUA: // global
           _sgAlQ::F64 = F64[Sp + 16];
           _sgAlS::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgAlS::I64, R1)) goto cgIV4; else goto cgIV5;
       cgIV4: // global
           _sgAlV::I64 = _sgAlS::I64;
           goto sgAlU;
       cgIV5: // global
           _sgAlV::I64 = R1;
           goto sgAlU;
       sgAlU: // global
           I64[Sp] = block_cgIUQ_info;
           D1 = _sgAlQ::F64;
           _sgAlW::I64 = -_sgAlV::I64;
           R2 = _sgAlW::I64;
           I64[Sp + 8] = _sgAlW::I64;
           I64[Sp + 16] = _sgAlV::I64;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIUA_info" {
     block_cgIUA_info:
         const _cgIUA;
         const 451;
         const 4294967326;
         const SgBbV_srt+328;
 },
 _cgIUQ() //  [D1]
         { []
         }
     {offset
       cgIUQ: // global
           _sgAlW::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cgIUU_info;
           _sgAlX::F64 = D1;
           D1 = F64[Sp + 24];
           R2 = _sgAlW::I64;
           F64[Sp + 24] = _sgAlX::F64;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIUQ_info" {
     block_cgIUQ_info:
         const _cgIUQ;
         const 451;
         const 4294967326;
         const SgBbV_srt+328;
 },
 _cgIUU() //  [D1]
         { []
         }
     {offset
       cgIUU: // global
           _sgAlV::I64 = I64[Sp + 8];
           _sgAlX::F64 = F64[Sp + 16];
           _cgIVg::F64 = %MO_F_Add_W64(%MO_F_Mul_W64(_sgAlX::F64,
                                                     _sgAlX::F64),
                                       %MO_F_Mul_W64(D1, D1));
           (_cgIVf::F64) = call MO_F64_Sqrt(_cgIVg::F64);
           D1 = _cgIVf::F64;
           R2 = _sgAlV::I64;
           Sp = Sp + 24;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIUU_info" {
     block_cgIUU_info:
         const _cgIUU;
         const 194;
         const 4294967326;
         const SgBbV_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.579474504 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$smagnitude_closure" {
     Data.Complex.$fFloatingComplex_$smagnitude_closure:
         const Data.Complex.$fFloatingComplex_$smagnitude_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$smagnitude_entry() //  [R2]
         { []
         }
     {offset
       cgIVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIW4; else goto cgIW5;
       cgIW4: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$smagnitude_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIW5: // global
           I64[Sp - 8] = block_cgIVJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIWd; else goto cgIVK;
       ugIWd: // global
           call _cgIVJ(R1) args: 0, res: 0, upd: 0;
       cgIVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$smagnitude_info" {
     Data.Complex.$fFloatingComplex_$smagnitude_info:
         const Data.Complex.$fFloatingComplex_$smagnitude_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+344;
 },
 _cgIVJ() //  [R1]
         { []
         }
     {offset
       cgIVJ: // global
           I64[Sp - 8] = block_cgIVP_info;
           _sgAm7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAm7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIWc; else goto cgIVQ;
       ugIWc: // global
           call _cgIVP(R1) args: 0, res: 0, upd: 0;
       cgIVQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIVJ_info" {
     block_cgIVJ_info:
         const _cgIVJ;
         const 0;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgIVP() //  [R1]
         { []
         }
     {offset
       cgIVP: // global
           I64[Sp] = block_cgIVU_info;
           _sgAm9::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAm9::F64;
           if (R1 & 7 != 0) goto ugIWe; else goto cgIVV;
       ugIWe: // global
           call _cgIVU(R1) args: 0, res: 0, upd: 0;
       cgIVV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIVP_info" {
     block_cgIVP_info:
         const _cgIVP;
         const 1;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgIVU() //  [R1]
         { []
         }
     {offset
       cgIVU: // global
           _sgAm9::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgIVZ_info;
           D2 = F64[R1 + 7];
           D1 = _sgAm9::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIVU_info" {
     block_cgIVU_info:
         const _cgIVU;
         const 65;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgIVZ() //  [D1]
         { []
         }
     {offset
       cgIVZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgIWb; else goto cgIWa;
       cgIWb: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgIWa: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIVZ_info" {
     block_cgIVZ_info:
         const _cgIVZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.59195292 UTC

[section ""data" . Data.Complex.$w$smagnitude1_closure" {
     Data.Complex.$w$smagnitude1_closure:
         const Data.Complex.$w$smagnitude1_info;
         const 0;
 },
 Data.Complex.$w$smagnitude1_slow() //  [R1]
         { []
         }
     {offset
       cgIWB: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$smagnitude1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgIWH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgIWL; else goto cgIWM;
       cgIWL: // global
           R1 = Data.Complex.$w$smagnitude1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgIWM: // global
           I64[Sp - 24] = block_cgIWF_info;
           _sgAmd::F32 = F1;
           F1 = F1;
           F32[Sp - 16] = _sgAmd::F32;
           F32[Sp - 8] = F2;
           Sp = Sp - 24;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$smagnitude1_info" {
     Data.Complex.$w$smagnitude1_info:
         const Data.Complex.$w$smagnitude1_entry;
         const 0;
         const 17596481011726;
         const 8589934592;
         const SgBbV_srt+264;
         const 194;
         const Data.Complex.$w$smagnitude1_slow;
 },
 _cgIWF() //  [R1]
         { []
         }
     {offset
       cgIWF: // global
           I64[Sp - 8] = block_cgIWK_info;
           F1 = F32[Sp + 16];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIWF_info" {
     block_cgIWF_info:
         const _cgIWF;
         const 194;
         const 4294967326;
         const SgBbV_srt+264;
 },
 _cgIWK() //  [R1]
         { []
         }
     {offset
       cgIWK: // global
           _sgAmd::F32 = F32[Sp + 16];
           _sgAmf::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgAmf::I64, R1)) goto cgIXe; else goto cgIXf;
       cgIXe: // global
           _sgAmi::I64 = _sgAmf::I64;
           goto sgAmh;
       cgIXf: // global
           _sgAmi::I64 = R1;
           goto sgAmh;
       sgAmh: // global
           I64[Sp] = block_cgIX0_info;
           F1 = _sgAmd::F32;
           _sgAmj::I64 = -_sgAmi::I64;
           R2 = _sgAmj::I64;
           I64[Sp + 8] = _sgAmj::I64;
           I64[Sp + 16] = _sgAmi::I64;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIWK_info" {
     block_cgIWK_info:
         const _cgIWK;
         const 451;
         const 30;
 },
 _cgIX0() //  [F1]
         { []
         }
     {offset
       cgIX0: // global
           _sgAmj::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cgIX4_info;
           _sgAmk::F32 = F1;
           F1 = F32[Sp + 24];
           R2 = _sgAmj::I64;
           F32[Sp + 24] = _sgAmk::F32;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIX0_info" {
     block_cgIX0_info:
         const _cgIX0;
         const 451;
         const 30;
 },
 _cgIX4() //  [F1]
         { []
         }
     {offset
       cgIX4: // global
           _sgAmi::I64 = I64[Sp + 8];
           _sgAmk::F32 = F32[Sp + 16];
           _cgIXq::F32 = %MO_F_Add_W32(%MO_F_Mul_W32(_sgAmk::F32,
                                                     _sgAmk::F32),
                                       %MO_F_Mul_W32(F1, F1));
           (_cgIXp::F32) = call MO_F32_Sqrt(_cgIXq::F32);
           F1 = _cgIXp::F32;
           R2 = _sgAmi::I64;
           Sp = Sp + 24;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIX4_info" {
     block_cgIX4_info:
         const _cgIX4;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.606521857 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$smagnitude1_closure" {
     Data.Complex.$fFloatingComplex_$smagnitude1_closure:
         const Data.Complex.$fFloatingComplex_$smagnitude1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$smagnitude1_entry() //  [R2]
         { []
         }
     {offset
       cgIXW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgIYe; else goto cgIYf;
       cgIYe: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$smagnitude1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgIYf: // global
           I64[Sp - 8] = block_cgIXT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIYn; else goto cgIXU;
       ugIYn: // global
           call _cgIXT(R1) args: 0, res: 0, upd: 0;
       cgIXU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$smagnitude1_info" {
     Data.Complex.$fFloatingComplex_$smagnitude1_info:
         const Data.Complex.$fFloatingComplex_$smagnitude1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+360;
 },
 _cgIXT() //  [R1]
         { []
         }
     {offset
       cgIXT: // global
           I64[Sp - 8] = block_cgIXZ_info;
           _sgAmu::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAmu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugIYm; else goto cgIY0;
       ugIYm: // global
           call _cgIXZ(R1) args: 0, res: 0, upd: 0;
       cgIY0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIXT_info" {
     block_cgIXT_info:
         const _cgIXT;
         const 0;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgIXZ() //  [R1]
         { []
         }
     {offset
       cgIXZ: // global
           I64[Sp] = block_cgIY4_info;
           _sgAmw::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAmw::F32;
           if (R1 & 7 != 0) goto ugIYo; else goto cgIY5;
       ugIYo: // global
           call _cgIY4(R1) args: 0, res: 0, upd: 0;
       cgIY5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIXZ_info" {
     block_cgIXZ_info:
         const _cgIXZ;
         const 1;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgIY4() //  [R1]
         { []
         }
     {offset
       cgIY4: // global
           _sgAmw::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgIY9_info;
           F2 = F32[R1 + 7];
           F1 = _sgAmw::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIY4_info" {
     block_cgIY4_info:
         const _cgIY4;
         const 65;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgIY9() //  [F1]
         { []
         }
     {offset
       cgIY9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgIYl; else goto cgIYk;
       cgIYl: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgIYk: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgIY9_info" {
     block_cgIY9_info:
         const _cgIY9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.625659903 UTC

[section ""data" . Data.Complex.$wmagnitude_closure" {
     Data.Complex.$wmagnitude_closure:
         const Data.Complex.$wmagnitude_info;
 },
 k_sgAmD_entry() //  [R1]
         { []
         }
     {offset
       cgIYU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgIYY; else goto cgIYZ;
       cgIYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIYZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgIYS_info;
           _sgAmA::P64 = P64[R1 + 16];
           R2 = _sgAmA::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 32] = _sgAmA::P64;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 56;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_sgAmD_info" {
     k_sgAmD_info:
         const k_sgAmD_entry;
         const 3;
         const 15;
 },
 _cgIYS() //  [R1]
         { []
         }
     {offset
       cgIYS: // global
           I64[Sp] = block_cgIYX_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 8] = I64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIYS_info" {
     block_cgIYS_info:
         const _cgIYS;
         const 2;
         const 30;
 },
 _cgIYX() //  [R1]
         { []
         }
     {offset
       cgIYX: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto cgIZ8; else goto cgIZ9;
       cgIZ8: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cgIZ9: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIYX_info" {
     block_cgIYX_info:
         const _cgIYX;
         const 66;
         const 30;
 },
 mk_sgAmN_entry() //  [R1]
         { []
         }
     {offset
       cgIZB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgIZI; else goto cgIZJ;
       cgIZI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIZJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgIZy_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugIZN; else goto cgIZz;
       ugIZN: // global
           call _cgIZy(R1) args: 0, res: 0, upd: 0;
       cgIZz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . mk_sgAmN_info" {
     mk_sgAmN_info:
         const mk_sgAmN_entry;
         const 1;
         const 16;
 },
 _cgIZy() //  [R1]
         { []
         }
     {offset
       cgIZy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgIZM; else goto cgIZL;
       cgIZM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgIZL: // global
           _sgAmQ::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sgAmQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIZy_info" {
     block_cgIZy_info:
         const _cgIZy;
         const 0;
         const 30;
 },
 z_sgAmT_entry() //  [R1]
         { []
         }
     {offset
       cgIZW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgIZX; else goto cgIZY;
       cgIZX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgIZY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sgAmT_info" {
     z_sgAmT_info:
         const z_sgAmT_entry;
         const 3;
         const 15;
 },
 sat_sgAmU_entry() //  [R1]
         { []
         }
     {offset
       cgIZZ: // global
           _sgAmU::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgJ00; else goto cgJ01;
       cgJ01: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgJ03; else goto cgJ02;
       cgJ03: // global
           HpAlloc = 40;
           goto cgJ00;
       cgJ00: // global
           R1 = _sgAmU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ02: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAmU::P64;
           _sgAmA::P64 = P64[_sgAmU::P64 + 16];
           _sgAmC::P64 = P64[_sgAmU::P64 + 24];
           _sgAmM::P64 = P64[_sgAmU::P64 + 32];
           _sgAmN::P64 = P64[_sgAmU::P64 + 40];
           I64[Hp - 32] = z_sgAmT_info;
           P64[Hp - 16] = _sgAmA::P64;
           P64[Hp - 8] = _sgAmC::P64;
           P64[Hp] = _sgAmN::P64;
           R2 = _sgAmM::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           _cgIZS::P64 = Hp - 32;
           P64[Sp - 32] = _cgIZS::P64;
           P64[Sp - 24] = _cgIZS::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAmU_info" {
     sat_sgAmU_info:
         const sat_sgAmU_entry;
         const 4;
         const 15;
 },
 z_sgAmR_entry() //  [R1]
         { []
         }
     {offset
       cgJ0c: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJ0d; else goto cgJ0e;
       cgJ0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sgAmR_info" {
     z_sgAmR_info:
         const z_sgAmR_entry;
         const 3;
         const 15;
 },
 sat_sgAmS_entry() //  [R1]
         { []
         }
     {offset
       cgJ0f: // global
           _sgAmS::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgJ0g; else goto cgJ0h;
       cgJ0h: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgJ0j; else goto cgJ0i;
       cgJ0j: // global
           HpAlloc = 40;
           goto cgJ0g;
       cgJ0g: // global
           R1 = _sgAmS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ0i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAmS::P64;
           _sgAmA::P64 = P64[_sgAmS::P64 + 16];
           _sgAmB::P64 = P64[_sgAmS::P64 + 24];
           _sgAmM::P64 = P64[_sgAmS::P64 + 32];
           _sgAmN::P64 = P64[_sgAmS::P64 + 40];
           I64[Hp - 32] = z_sgAmR_info;
           P64[Hp - 16] = _sgAmA::P64;
           P64[Hp - 8] = _sgAmB::P64;
           P64[Hp] = _sgAmN::P64;
           R2 = _sgAmM::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           _cgJ08::P64 = Hp - 32;
           P64[Sp - 32] = _cgJ08::P64;
           P64[Sp - 24] = _cgJ08::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAmS_info" {
     sat_sgAmS_info:
         const sat_sgAmS_entry;
         const 4;
         const 15;
 },
 sat_sgAmV_entry() //  [R1]
         { []
         }
     {offset
       cgJ0k: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgJ0l; else goto cgJ0m;
       cgJ0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ0m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgIZi_info;
           _sgAmA::P64 = P64[R1 + 16];
           R2 = _sgAmA::P64;
           P64[Sp - 48] = _sgAmA::P64;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 56;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAmV_info" {
     sat_sgAmV_info:
         const sat_sgAmV_entry;
         const 4;
         const 15;
 },
 _cgIZi() //  [R1]
         { []
         }
     {offset
       cgIZi: // global
           I64[Sp] = block_cgIZm_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIZi_info" {
     block_cgIZi_info:
         const _cgIZi;
         const 4;
         const 30;
 },
 _cgIZm() //  [R1]
         { []
         }
     {offset
       cgIZm: // global
           I64[Sp] = block_cgIZq_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIZm_info" {
     block_cgIZm_info:
         const _cgIZm;
         const 4;
         const 30;
 },
 _cgIZq() //  [R1]
         { []
         }
     {offset
       cgIZq: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cgJ0r; else goto cgJ0q;
       cgJ0r: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgJ0q: // global
           I64[Hp - 112] = mk_sgAmN_info;
           P64[Hp - 96] = P64[Sp + 32];
           I64[Hp - 88] = sat_sgAmU_info;
           _sgAmA::P64 = P64[Sp + 8];
           P64[Hp - 72] = _sgAmA::P64;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = R1;
           _cgIZu::P64 = Hp - 112;
           P64[Hp - 48] = _cgIZu::P64;
           I64[Hp - 40] = sat_sgAmS_info;
           P64[Hp - 24] = _sgAmA::P64;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           P64[Hp] = _cgIZu::P64;
           R2 = R1;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = Hp - 88;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgIZq_info" {
     block_cgIZq_info:
         const _cgIZq;
         const 4;
         const 30;
 },
 sat_sgAmW_entry() //  [R1]
         { []
         }
     {offset
       cgJ0u: // global
           _sgAmW::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgJ0v; else goto cgJ0w;
       cgJ0w: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgJ0y; else goto cgJ0x;
       cgJ0y: // global
           HpAlloc = 48;
           goto cgJ0v;
       cgJ0v: // global
           R1 = _sgAmW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ0x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAmW::P64;
           _sgAmA::P64 = P64[_sgAmW::P64 + 16];
           _sgAmB::P64 = P64[_sgAmW::P64 + 24];
           _sgAmC::P64 = P64[_sgAmW::P64 + 32];
           _sgAmD::P64 = P64[_sgAmW::P64 + 40];
           I64[Hp - 40] = sat_sgAmV_info;
           P64[Hp - 24] = _sgAmA::P64;
           P64[Hp - 16] = _sgAmB::P64;
           P64[Hp - 8] = _sgAmC::P64;
           P64[Hp] = _sgAmD::P64;
           I64[Sp - 32] = block_cgJ0s_info;
           R2 = _sgAmA::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAmW_info" {
     sat_sgAmW_info:
         const sat_sgAmW_entry;
         const 4;
         const 15;
 },
 _cgJ0s() //  [R1]
         { []
         }
     {offset
       cgJ0s: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgJ0s_info" {
     block_cgJ0s_info:
         const _cgJ0s;
         const 1;
         const 30;
 },
 Data.Complex.$wmagnitude_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJ0C: // global
           _sgAmC::P64 = R4;
           _sgAmB::P64 = R3;
           _sgAmA::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgJ0D; else goto cgJ0E;
       cgJ0E: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgJ0G; else goto cgJ0F;
       cgJ0G: // global
           HpAlloc = 88;
           goto cgJ0D;
       cgJ0D: // global
           R4 = _sgAmC::P64;
           R3 = _sgAmB::P64;
           R2 = _sgAmA::P64;
           R1 = Data.Complex.$wmagnitude_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJ0F: // global
           I64[Hp - 80] = k_sgAmD_info;
           P64[Hp - 64] = _sgAmA::P64;
           P64[Hp - 56] = _sgAmB::P64;
           P64[Hp - 48] = _sgAmC::P64;
           I64[Hp - 40] = sat_sgAmW_info;
           P64[Hp - 24] = _sgAmA::P64;
           P64[Hp - 16] = _sgAmB::P64;
           P64[Hp - 8] = _sgAmC::P64;
           _cgIYO::P64 = Hp - 80;
           P64[Hp] = _cgIYO::P64;
           R2 = _sgAmA::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _cgIYO::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Float.scaleFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$wmagnitude_info" {
     Data.Complex.$wmagnitude_info:
         const Data.Complex.$wmagnitude_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.659498342 UTC

[section ""data" . Data.Complex.magnitude_closure" {
     Data.Complex.magnitude_closure:
         const Data.Complex.magnitude_info;
 },
 Data.Complex.magnitude_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJ29: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ2a; else goto cgJ2b;
       cgJ2a: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.magnitude_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJ2b: // global
           I64[Sp - 16] = block_cgJ26_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJ2f; else goto cgJ27;
       ugJ2f: // global
           call _cgJ26(R1) args: 0, res: 0, upd: 0;
       cgJ27: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.magnitude_info" {
     Data.Complex.magnitude_info:
         const Data.Complex.magnitude_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJ26() //  [R1]
         { []
         }
     {offset
       cgJ26: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ26_info" {
     block_cgJ26_info:
         const _cgJ26;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.667984854 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1_entry() //  [R2]
         { []
         }
     {offset
       cgJ2w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgJ2Y; else goto cgJ2Z;
       cgJ2Y: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJ2Z: // global
           I64[Sp - 8] = block_cgJ2t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJ38; else goto cgJ2u;
       ugJ38: // global
           call _cgJ2t(R1) args: 0, res: 0, upd: 0;
       cgJ2u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgBbV_srt+360;
 },
 _cgJ2t() //  [R1]
         { []
         }
     {offset
       cgJ2t: // global
           I64[Sp - 8] = block_cgJ2z_info;
           _sgAn5::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAn5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJ37; else goto cgJ2A;
       ugJ37: // global
           call _cgJ2z(R1) args: 0, res: 0, upd: 0;
       cgJ2A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ2t_info" {
     block_cgJ2t_info:
         const _cgJ2t;
         const 0;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJ2z() //  [R1]
         { []
         }
     {offset
       cgJ2z: // global
           I64[Sp] = block_cgJ2E_info;
           _sgAn7::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAn7::F32;
           if (R1 & 7 != 0) goto ugJ39; else goto cgJ2F;
       ugJ39: // global
           call _cgJ2E(R1) args: 0, res: 0, upd: 0;
       cgJ2F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ2z_info" {
     block_cgJ2z_info:
         const _cgJ2z;
         const 1;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJ2E() //  [R1]
         { []
         }
     {offset
       cgJ2E: // global
           I64[Sp - 8] = block_cgJ2J_info;
           _sgAn9::F32 = F32[R1 + 7];
           F2 = _sgAn9::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgAn9::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ2E_info" {
     block_cgJ2E_info:
         const _cgJ2E;
         const 65;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJ2J() //  [F1]
         { []
         }
     {offset
       cgJ2J: // global
           _sgAn7::F32 = F32[Sp + 16];
           _sgAn9::F32 = F32[Sp + 8];
           _cgJ2O::F32 = F1;
           (_cgJ2N::F32) = call MO_F32_Log(_cgJ2O::F32);
           I64[Sp + 8] = block_cgJ2R_info;
           F2 = _sgAn9::F32;
           F1 = _sgAn7::F32;
           F32[Sp + 16] = _cgJ2N::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ2J_info" {
     block_cgJ2J_info:
         const _cgJ2J;
         const 194;
         const 30;
 },
 _cgJ2R() //  [F1]
         { []
         }
     {offset
       cgJ2R: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJ36; else goto cgJ35;
       cgJ36: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgJ35: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ2R_info" {
     block_cgJ2R_info:
         const _cgJ2R;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.681462084 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cabs1_closure" {
     Data.Complex.$fFloatingComplex_$s$cabs1_closure:
         const Data.Complex.$fFloatingComplex_$s$cabs1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cabs1_entry() //  [R2]
         { []
         }
     {offset
       cgJ3I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ41; else goto cgJ42;
       cgJ41: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cabs1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJ42: // global
           I64[Sp - 8] = block_cgJ3F_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJ4a; else goto cgJ3G;
       ugJ4a: // global
           call _cgJ3F(R1) args: 0, res: 0, upd: 0;
       cgJ3G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cabs1_info" {
     Data.Complex.$fFloatingComplex_$s$cabs1_info:
         const Data.Complex.$fFloatingComplex_$s$cabs1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgBbV_srt+360;
 },
 _cgJ3F() //  [R1]
         { []
         }
     {offset
       cgJ3F: // global
           I64[Sp - 8] = block_cgJ3L_info;
           _sgAni::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAni::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJ49; else goto cgJ3M;
       ugJ49: // global
           call _cgJ3L(R1) args: 0, res: 0, upd: 0;
       cgJ3M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ3F_info" {
     block_cgJ3F_info:
         const _cgJ3F;
         const 0;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJ3L() //  [R1]
         { []
         }
     {offset
       cgJ3L: // global
           I64[Sp] = block_cgJ3Q_info;
           _sgAnk::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAnk::F32;
           if (R1 & 7 != 0) goto ugJ4b; else goto cgJ3R;
       ugJ4b: // global
           call _cgJ3Q(R1) args: 0, res: 0, upd: 0;
       cgJ3R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ3L_info" {
     block_cgJ3L_info:
         const _cgJ3L;
         const 1;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJ3Q() //  [R1]
         { []
         }
     {offset
       cgJ3Q: // global
           _sgAnk::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgJ3V_info;
           F2 = F32[R1 + 7];
           F1 = _sgAnk::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ3Q_info" {
     block_cgJ3Q_info:
         const _cgJ3Q;
         const 65;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJ3V() //  [F1]
         { []
         }
     {offset
       cgJ3V: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgJ48; else goto cgJ47;
       cgJ48: // global
           HpAlloc = 40;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgJ47: // global
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ3V_info" {
     block_cgJ3V_info:
         const _cgJ3V;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.693664453 UTC

[section ""data" . Data.Complex.polar_$spolar_closure" {
     Data.Complex.polar_$spolar_closure:
         const Data.Complex.polar_$spolar_info;
         const 0;
 },
 sat_sgAnr_entry() //  [R1]
         { []
         }
     {offset
       cgJ4G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ4H; else goto cgJ4I;
       cgJ4H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ4I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFloatingComplex_$sphase_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAnr_info" {
     sat_sgAnr_info:
         const sat_sgAnr_entry;
         const 1;
         const 16;
 },
 sat_sgAnq_entry() //  [R1]
         { []
         }
     {offset
       cgJ4N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ4O; else goto cgJ4P;
       cgJ4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ4P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFloatingComplex_$smagnitude_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAnq_info" {
     sat_sgAnq_info:
         const sat_sgAnq_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+352;
 },
 Data.Complex.polar_$spolar_entry() //  [R2]
         { []
         }
     {offset
       cgJ4R: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgJ4V; else goto cgJ4U;
       cgJ4V: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Complex.polar_$spolar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJ4U: // global
           I64[Hp - 64] = sat_sgAnr_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sgAnq_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.polar_$spolar_info" {
     Data.Complex.polar_$spolar_info:
         const Data.Complex.polar_$spolar_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const SgBbV_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.702666827 UTC

[section ""data" . Data.Complex.polar_closure" {
     Data.Complex.polar_closure:
         const Data.Complex.polar_info;
         const 0;
 },
 sat_sgAnv_entry() //  [R1]
         { []
         }
     {offset
       cgJ5j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ5k; else goto cgJ5l;
       cgJ5k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ5l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.phase_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAnv_info" {
     sat_sgAnv_info:
         const sat_sgAnv_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+320;
 },
 sat_sgAnu_entry() //  [R1]
         { []
         }
     {offset
       cgJ5q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ5r; else goto cgJ5s;
       cgJ5r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ5s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.magnitude_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAnu_info" {
     sat_sgAnu_info:
         const sat_sgAnu_entry;
         const 2;
         const 18;
 },
 Data.Complex.polar_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJ5u: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgJ5y; else goto cgJ5x;
       cgJ5y: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.polar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJ5x: // global
           I64[Hp - 80] = sat_sgAnv_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sgAnu_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.polar_info" {
     Data.Complex.polar_info:
         const Data.Complex.polar_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const SgBbV_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.709837681 UTC

[section ""data" . Data.Complex.$fFloatingComplex1_closure" {
     Data.Complex.$fFloatingComplex1_closure:
         const GHC.Types.D#_con_info;
         const 0.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.711613656 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cpi_closure" {
     Data.Complex.$fFloatingComplex_$s$cpi_closure:
         const Data.Complex.:+_con_info;
         const GHC.Float.$fFloatingDouble_$cpi_closure;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.714850662 UTC

[section ""data" . Data.Complex.$w$cpi_closure" {
     Data.Complex.$w$cpi_closure:
         const Data.Complex.$w$cpi_info;
         const 0;
 },
 Data.Complex.$w$cpi_entry() //  [R2]
         { []
         }
     {offset
       cgJ5W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJ6e; else goto cgJ6f;
       cgJ6e: // global
           R2 = R2;
           R1 = Data.Complex.$w$cpi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJ6f: // global
           I64[Sp - 16] = block_cgJ5U_info;
           _sgAnw::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sgAnw::P64;
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cpi_info" {
     Data.Complex.$w$cpi_info:
         const Data.Complex.$w$cpi_entry;
         const 0;
         const 35188667056142;
         const 4294967301;
         const SgBbV_srt+304;
 },
 _cgJ5U() //  [R1]
         { []
         }
     {offset
       cgJ5U: // global
           I64[Sp] = block_cgJ5Z_info;
           R2 = R1;
           call GHC.Float.pi_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ5U_info" {
     block_cgJ5U_info:
         const _cgJ5U;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJ5Z() //  [R1]
         { []
         }
     {offset
       cgJ5Z: // global
           I64[Sp] = block_cgJ61_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ5Z_info" {
     block_cgJ5Z_info:
         const _cgJ5Z;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJ61() //  [R1]
         { []
         }
     {offset
       cgJ61: // global
           I64[Sp] = block_cgJ65_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ61_info" {
     block_cgJ61_info:
         const _cgJ61;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJ65() //  [R1]
         { []
         }
     {offset
       cgJ65: // global
           I64[Sp] = block_cgJ69_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ65_info" {
     block_cgJ65_info:
         const _cgJ65;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJ69() //  [R1]
         { []
         }
     {offset
       cgJ69: // global
           I64[Sp] = block_cgJ6d_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ69_info" {
     block_cgJ69_info:
         const _cgJ69;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJ6d() //  [R1]
         { []
         }
     {offset
       cgJ6d: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ6d_info" {
     block_cgJ6d_info:
         const _cgJ6d;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.728333739 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cpi_closure" {
     Data.Complex.$fFloatingComplex_$cpi_closure:
         const Data.Complex.$fFloatingComplex_$cpi_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cpi_entry() //  [R2]
         { []
         }
     {offset
       cgJ6S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgJ6T; else goto cgJ6U;
       cgJ6T: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cpi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJ6U: // global
           I64[Sp - 8] = block_cgJ6P_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$w$cpi_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cpi_info" {
     Data.Complex.$fFloatingComplex_$cpi_info:
         const Data.Complex.$fFloatingComplex_$cpi_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+408;
 },
 _cgJ6P() //  [R1, R2]
         { []
         }
     {offset
       cgJ6P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJ6X; else goto cgJ6W;
       cgJ6X: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJ6W: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ6P_info" {
     block_cgJ6P_info:
         const _cgJ6P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.73542643 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexp_closure" {
     Data.Complex.$fFloatingComplex_$s$cexp_closure:
         const Data.Complex.$fFloatingComplex_$s$cexp_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexp_entry() //  [R2]
         { []
         }
     {offset
       cgJ7e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ7M; else goto cgJ7N;
       cgJ7M: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJ7N: // global
           I64[Sp - 8] = block_cgJ7b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJ7U; else goto cgJ7c;
       ugJ7U: // global
           call _cgJ7b(R1) args: 0, res: 0, upd: 0;
       cgJ7c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexp_info" {
     Data.Complex.$fFloatingComplex_$s$cexp_info:
         const Data.Complex.$fFloatingComplex_$s$cexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgJ7b() //  [R1]
         { []
         }
     {offset
       cgJ7b: // global
           I64[Sp - 8] = block_cgJ7h_info;
           _sgAnK::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAnK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJ7T; else goto cgJ7i;
       ugJ7T: // global
           call _cgJ7h(R1) args: 0, res: 0, upd: 0;
       cgJ7i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ7b_info" {
     block_cgJ7b_info:
         const _cgJ7b;
         const 0;
         const 30;
 },
 _cgJ7h() //  [R1]
         { []
         }
     {offset
       cgJ7h: // global
           I64[Sp] = block_cgJ7m_info;
           _sgAnM::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAnM::F64;
           if (R1 & 7 != 0) goto ugJ7V; else goto cgJ7n;
       ugJ7V: // global
           call _cgJ7m(R1) args: 0, res: 0, upd: 0;
       cgJ7n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ7h_info" {
     block_cgJ7h_info:
         const _cgJ7h;
         const 1;
         const 30;
 },
 _cgJ7m() //  [R1]
         { []
         }
     {offset
       cgJ7m: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJ7S; else goto cgJ7R;
       cgJ7S: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJ7R: // global
           _sgAnO::F64 = F64[R1 + 7];
           (_cgJ7r::F64) = call MO_F64_Exp(F64[Sp + 8]);
           (_cgJ7v::F64) = call MO_F64_Sin(_sgAnO::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgJ7r::F64, _cgJ7v::F64);
           (_cgJ7D::F64) = call MO_F64_Cos(_sgAnO::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgJ7r::F64, _cgJ7D::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ7m_info" {
     block_cgJ7m_info:
         const _cgJ7m;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.747998395 UTC

[section ""data" . Data.Complex.$w$cexp_closure" {
     Data.Complex.$w$cexp_closure:
         const Data.Complex.$w$cexp_info;
 },
 $dFloating_sgAo2_entry() //  [R1]
         { []
         }
     {offset
       cgJ8E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJ8F; else goto cgJ8G;
       cgJ8F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ8G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgAo2_info" {
     $dFloating_sgAo2_info:
         const $dFloating_sgAo2_entry;
         const 1;
         const 16;
 },
 expx_sgAo3_entry() //  [R1]
         { []
         }
     {offset
       cgJ8L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJ8M; else goto cgJ8N;
       cgJ8M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ8N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . expx_sgAo3_info" {
     expx_sgAo3_info:
         const expx_sgAo3_entry;
         const 2;
         const 18;
 },
 sat_sgAo4_entry() //  [R1]
         { []
         }
     {offset
       cgJ8S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJ8T; else goto cgJ8U;
       cgJ8T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ8U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAo4_info" {
     sat_sgAo4_info:
         const sat_sgAo4_entry;
         const 2;
         const 18;
 },
 sat_sgAo6_entry() //  [R1]
         { []
         }
     {offset
       cgJ91: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJ92; else goto cgJ93;
       cgJ92: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJ93: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAo6_info" {
     sat_sgAo6_info:
         const sat_sgAo6_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$cexp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJ94: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgJ96; else goto cgJ97;
       cgJ96: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cexp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJ97: // global
           I64[Sp - 32] = block_cgJ8o_info;
           _sgAnW::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAnW::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cexp_info" {
     Data.Complex.$w$cexp_info:
         const Data.Complex.$w$cexp_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJ8o() //  [R1]
         { []
         }
     {offset
       cgJ8o: // global
           I64[Sp] = block_cgJ8s_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ8o_info" {
     block_cgJ8o_info:
         const _cgJ8o;
         const 3;
         const 30;
 },
 _cgJ8s() //  [R1]
         { []
         }
     {offset
       cgJ8s: // global
           I64[Sp] = block_cgJ8w_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ8s_info" {
     block_cgJ8s_info:
         const _cgJ8s;
         const 3;
         const 30;
 },
 _cgJ8w() //  [R1]
         { []
         }
     {offset
       cgJ8w: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgJ9c; else goto cgJ9b;
       cgJ9c: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJ9b: // global
           I64[Hp - 80] = $dFloating_sgAo2_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = expx_sgAo3_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgJ8A::P64 = Hp - 80;
           P64[Hp - 32] = _cgJ8A::P64;
           I64[Hp - 24] = sat_sgAo4_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgJ8A::P64;
           I64[Sp - 8] = block_cgJ8V_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           _cgJ8H::P64 = Hp - 56;
           P64[Sp - 24] = _cgJ8H::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp] = R1;
           P64[Sp + 8] = _cgJ8H::P64;
           P64[Sp + 16] = _cgJ8A::P64;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ8w_info" {
     block_cgJ8w_info:
         const _cgJ8w;
         const 3;
         const 30;
 },
 _cgJ8V() //  [R1]
         { []
         }
     {offset
       cgJ8V: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgJ9f; else goto cgJ9e;
       cgJ9f: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJ9e: // global
           I64[Hp - 24] = sat_sgAo6_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cgJ95_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ8V_info" {
     block_cgJ8V_info:
         const _cgJ8V;
         const 4;
         const 30;
 },
 _cgJ95() //  [R1]
         { []
         }
     {offset
       cgJ95: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJ95_info" {
     block_cgJ95_info:
         const _cgJ95;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.768074292 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cexp_closure" {
     Data.Complex.$fFloatingComplex_$cexp_closure:
         const Data.Complex.$fFloatingComplex_$cexp_info;
 },
 Data.Complex.$fFloatingComplex_$cexp_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJab: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJah; else goto cgJai;
       cgJah: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJai: // global
           I64[Sp - 16] = block_cgJa8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJan; else goto cgJa9;
       ugJan: // global
           call _cgJa8(R1) args: 0, res: 0, upd: 0;
       cgJa9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cexp_info" {
     Data.Complex.$fFloatingComplex_$cexp_info:
         const Data.Complex.$fFloatingComplex_$cexp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJa8() //  [R1]
         { []
         }
     {offset
       cgJa8: // global
           _sgAo8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJae_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAo8::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJa8_info" {
     block_cgJa8_info:
         const _cgJa8;
         const 1;
         const 30;
 },
 _cgJae() //  [R1, R2]
         { []
         }
     {offset
       cgJae: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJam; else goto cgJal;
       cgJam: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJal: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJae_info" {
     block_cgJae_info:
         const _cgJae;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.776964707 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog_closure" {
     Data.Complex.$fFloatingComplex_$s$clog_closure:
         const Data.Complex.$fFloatingComplex_$s$clog_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog_entry() //  [R2]
         { []
         }
     {offset
       cgJaI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgJba; else goto cgJbb;
       cgJba: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJbb: // global
           I64[Sp - 8] = block_cgJaF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJbk; else goto cgJaG;
       ugJbk: // global
           call _cgJaF(R1) args: 0, res: 0, upd: 0;
       cgJaG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog_info" {
     Data.Complex.$fFloatingComplex_$s$clog_info:
         const Data.Complex.$fFloatingComplex_$s$clog_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const SgBbV_srt+344;
 },
 _cgJaF() //  [R1]
         { []
         }
     {offset
       cgJaF: // global
           I64[Sp - 8] = block_cgJaL_info;
           _sgAoj::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAoj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJbj; else goto cgJaM;
       ugJbj: // global
           call _cgJaL(R1) args: 0, res: 0, upd: 0;
       cgJaM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJaF_info" {
     block_cgJaF_info:
         const _cgJaF;
         const 0;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJaL() //  [R1]
         { []
         }
     {offset
       cgJaL: // global
           I64[Sp] = block_cgJaQ_info;
           _sgAol::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAol::F64;
           if (R1 & 7 != 0) goto ugJbl; else goto cgJaR;
       ugJbl: // global
           call _cgJaQ(R1) args: 0, res: 0, upd: 0;
       cgJaR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJaL_info" {
     block_cgJaL_info:
         const _cgJaL;
         const 1;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJaQ() //  [R1]
         { []
         }
     {offset
       cgJaQ: // global
           I64[Sp - 8] = block_cgJaV_info;
           _sgAon::F64 = F64[R1 + 7];
           D2 = _sgAon::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgAon::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJaQ_info" {
     block_cgJaQ_info:
         const _cgJaQ;
         const 65;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJaV() //  [D1]
         { []
         }
     {offset
       cgJaV: // global
           _sgAol::F64 = F64[Sp + 16];
           _sgAon::F64 = F64[Sp + 8];
           _cgJb0::F64 = D1;
           (_cgJaZ::F64) = call MO_F64_Log(_cgJb0::F64);
           I64[Sp + 8] = block_cgJb3_info;
           D2 = _sgAon::F64;
           D1 = _sgAol::F64;
           F64[Sp + 16] = _cgJaZ::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJaV_info" {
     block_cgJaV_info:
         const _cgJaV;
         const 194;
         const 30;
 },
 _cgJb3() //  [D1]
         { []
         }
     {offset
       cgJb3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJbi; else goto cgJbh;
       cgJbi: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgJbh: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJb3_info" {
     block_cgJb3_info:
         const _cgJb3;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.790729577 UTC

[section ""data" . Data.Complex.$w$clog_closure" {
     Data.Complex.$w$clog_closure:
         const Data.Complex.$w$clog_info;
         const 0;
 },
 sat_sgAox_entry() //  [R1]
         { []
         }
     {offset
       cgJbV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJbW; else goto cgJbX;
       cgJbW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJbX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAox_info" {
     sat_sgAox_info:
         const sat_sgAox_entry;
         const 3;
         const 15;
 },
 Data.Complex.$w$clog_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJc0: // global
           _sgAov::P64 = R4;
           _sgAou::P64 = R3;
           _sgAot::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgJc6; else goto cgJc7;
       cgJc7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgJc9; else goto cgJc8;
       cgJc9: // global
           HpAlloc = 40;
           goto cgJc6;
       cgJc6: // global
           R4 = _sgAov::P64;
           R3 = _sgAou::P64;
           R2 = _sgAot::P64;
           R1 = Data.Complex.$w$clog_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJc8: // global
           I64[Hp - 32] = sat_sgAox_info;
           P64[Hp - 16] = _sgAot::P64;
           P64[Hp - 8] = _sgAou::P64;
           P64[Hp] = _sgAov::P64;
           I64[Sp - 40] = block_cgJbY_info;
           R2 = _sgAot::P64;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgAot::P64;
           P64[Sp - 16] = _sgAou::P64;
           P64[Sp - 8] = _sgAov::P64;
           Sp = Sp - 40;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$clog_info" {
     Data.Complex.$w$clog_info:
         const Data.Complex.$w$clog_entry;
         const 0;
         const 140741783322638;
         const 12884901911;
         const SgBbV_srt+312;
 },
 _cgJbY() //  [R1]
         { []
         }
     {offset
       cgJbY: // global
           _cgJbR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJc3_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _cgJbR::P64;
           Sp = Sp - 8;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJbY_info" {
     block_cgJbY_info:
         const _cgJbY;
         const 4;
         const 4294967326;
         const SgBbV_srt+312;
 },
 _cgJc3() //  [R1]
         { []
         }
     {offset
       cgJc3: // global
           _sgAou::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgJc5_info;
           R4 = P64[Sp + 24];
           R3 = _sgAou::P64;
           R2 = P64[Sp + 8];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJc3_info" {
     block_cgJc3_info:
         const _cgJc3;
         const 3;
         const 4294967326;
         const SgBbV_srt+312;
 },
 _cgJc5() //  [R1]
         { []
         }
     {offset
       cgJc5: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJc5_info" {
     block_cgJc5_info:
         const _cgJc5;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.802734607 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog_closure" {
     Data.Complex.$fFloatingComplex_$clog_closure:
         const Data.Complex.$fFloatingComplex_$clog_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$clog_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJcF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJcL; else goto cgJcM;
       cgJcL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJcM: // global
           I64[Sp - 16] = block_cgJcC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJcR; else goto cgJcD;
       ugJcR: // global
           call _cgJcC(R1) args: 0, res: 0, upd: 0;
       cgJcD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog_info" {
     Data.Complex.$fFloatingComplex_$clog_info:
         const Data.Complex.$fFloatingComplex_$clog_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+432;
 },
 _cgJcC() //  [R1]
         { []
         }
     {offset
       cgJcC: // global
           _sgAoA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJcI_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAoA::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJcC_info" {
     block_cgJcC_info:
         const _cgJcC;
         const 1;
         const 4294967326;
         const SgBbV_srt+432;
 },
 _cgJcI() //  [R1, R2]
         { []
         }
     {offset
       cgJcI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJcQ; else goto cgJcP;
       cgJcQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJcP: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJcI_info" {
     block_cgJcI_info:
         const _cgJcI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.812674715 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csin_closure" {
     Data.Complex.$fFloatingComplex_$s$csin_closure:
         const Data.Complex.$fFloatingComplex_$s$csin_info;
 },
 Data.Complex.$fFloatingComplex_$s$csin_entry() //  [R2]
         { []
         }
     {offset
       cgJdc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJdO; else goto cgJdP;
       cgJdO: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJdP: // global
           I64[Sp - 8] = block_cgJd9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJdW; else goto cgJda;
       ugJdW: // global
           call _cgJd9(R1) args: 0, res: 0, upd: 0;
       cgJda: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csin_info" {
     Data.Complex.$fFloatingComplex_$s$csin_info:
         const Data.Complex.$fFloatingComplex_$s$csin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgJd9() //  [R1]
         { []
         }
     {offset
       cgJd9: // global
           I64[Sp - 8] = block_cgJdf_info;
           _sgAoK::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAoK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJdV; else goto cgJdg;
       ugJdV: // global
           call _cgJdf(R1) args: 0, res: 0, upd: 0;
       cgJdg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJd9_info" {
     block_cgJd9_info:
         const _cgJd9;
         const 0;
         const 30;
 },
 _cgJdf() //  [R1]
         { []
         }
     {offset
       cgJdf: // global
           I64[Sp] = block_cgJdk_info;
           _sgAoN::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAoN::F64;
           if (R1 & 7 != 0) goto ugJdX; else goto cgJdl;
       ugJdX: // global
           call _cgJdk(R1) args: 0, res: 0, upd: 0;
       cgJdl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJdf_info" {
     block_cgJdf_info:
         const _cgJdf;
         const 1;
         const 30;
 },
 _cgJdk() //  [R1]
         { []
         }
     {offset
       cgJdk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJdU; else goto cgJdT;
       cgJdU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJdT: // global
           _sgAoN::F64 = F64[Sp + 8];
           _sgAoP::F64 = F64[R1 + 7];
           (_cgJdp::F64) = call MO_F64_Sinh(_sgAoN::F64);
           (_cgJdt::F64) = call MO_F64_Cos(_sgAoP::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgJdt::F64, _cgJdp::F64);
           (_cgJdB::F64) = call MO_F64_Cosh(_sgAoN::F64);
           (_cgJdF::F64) = call MO_F64_Sin(_sgAoP::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgJdF::F64, _cgJdB::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJdk_info" {
     block_cgJdk_info:
         const _cgJdk;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.826125704 UTC

[section ""data" . Data.Complex.$w$csin_closure" {
     Data.Complex.$w$csin_closure:
         const Data.Complex.$w$csin_info;
 },
 $dFloating_sgAp1_entry() //  [R1]
         { []
         }
     {offset
       cgJeu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJev; else goto cgJew;
       cgJev: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJew: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgAp1_info" {
     $dFloating_sgAp1_info:
         const $dFloating_sgAp1_entry;
         const 1;
         const 16;
 },
 sat_sgAp6_entry() //  [R1]
         { []
         }
     {offset
       cgJeN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJeO; else goto cgJeP;
       cgJeO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJeP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAp6_info" {
     sat_sgAp6_info:
         const sat_sgAp6_entry;
         const 2;
         const 18;
 },
 sat_sgAp5_entry() //  [R1]
         { []
         }
     {offset
       cgJeU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJeV; else goto cgJeW;
       cgJeV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJeW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAp5_info" {
     sat_sgAp5_info:
         const sat_sgAp5_entry;
         const 2;
         const 18;
 },
 sat_sgAp9_entry() //  [R1]
         { []
         }
     {offset
       cgJf3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJf4; else goto cgJf5;
       cgJf4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJf5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAp9_info" {
     sat_sgAp9_info:
         const sat_sgAp9_entry;
         const 2;
         const 18;
 },
 sat_sgAp8_entry() //  [R1]
         { []
         }
     {offset
       cgJfa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJfb; else goto cgJfc;
       cgJfb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJfc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAp8_info" {
     sat_sgAp8_info:
         const sat_sgAp8_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$csin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJfd: // global
           _sgAp0::P64 = R4;
           _sgAoZ::P64 = R3;
           _sgAoY::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgJff; else goto cgJfg;
       cgJfg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJfi; else goto cgJfh;
       cgJfi: // global
           HpAlloc = 24;
           goto cgJff;
       cgJff: // global
           R4 = _sgAp0::P64;
           R3 = _sgAoZ::P64;
           R2 = _sgAoY::P64;
           R1 = Data.Complex.$w$csin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJfh: // global
           I64[Hp - 16] = $dFloating_sgAp1_info;
           P64[Hp] = _sgAoY::P64;
           I64[Sp - 32] = block_cgJex_info;
           R2 = _sgAoY::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgAoZ::P64;
           P64[Sp - 8] = _sgAp0::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csin_info" {
     Data.Complex.$w$csin_info:
         const Data.Complex.$w$csin_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJex() //  [R1]
         { []
         }
     {offset
       cgJex: // global
           I64[Sp] = block_cgJeB_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJex_info" {
     block_cgJex_info:
         const _cgJex;
         const 3;
         const 30;
 },
 _cgJeB() //  [R1]
         { []
         }
     {offset
       cgJeB: // global
           I64[Sp] = block_cgJeF_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJeB_info" {
     block_cgJeB_info:
         const _cgJeB;
         const 3;
         const 30;
 },
 _cgJeF() //  [R1]
         { []
         }
     {offset
       cgJeF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJfn; else goto cgJfm;
       cgJfn: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJfm: // global
           I64[Hp - 56] = sat_sgAp6_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgJeq::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgJeq::P64;
           I64[Hp - 24] = sat_sgAp5_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgJeq::P64;
           I64[Sp - 8] = block_cgJeX_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJeF_info" {
     block_cgJeF_info:
         const _cgJeF;
         const 3;
         const 30;
 },
 _cgJeX() //  [R1]
         { []
         }
     {offset
       cgJeX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJfq; else goto cgJfp;
       cgJfq: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJfp: // global
           I64[Hp - 56] = sat_sgAp9_info;
           P64[Hp - 40] = P64[Sp + 32];
           _cgJeq::P64 = P64[Sp + 16];
           P64[Hp - 32] = _cgJeq::P64;
           I64[Hp - 24] = sat_sgAp8_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgJeq::P64;
           I64[Sp + 24] = block_cgJfe_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJeX_info" {
     block_cgJeX_info:
         const _cgJeX;
         const 4;
         const 30;
 },
 _cgJfe() //  [R1]
         { []
         }
     {offset
       cgJfe: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJfe_info" {
     block_cgJfe_info:
         const _cgJfe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.847375748 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$csin_closure" {
     Data.Complex.$fFloatingComplex_$csin_closure:
         const Data.Complex.$fFloatingComplex_$csin_info;
 },
 Data.Complex.$fFloatingComplex_$csin_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJgs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJgy; else goto cgJgz;
       cgJgy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$csin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJgz: // global
           I64[Sp - 16] = block_cgJgp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJgE; else goto cgJgq;
       ugJgE: // global
           call _cgJgp(R1) args: 0, res: 0, upd: 0;
       cgJgq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$csin_info" {
     Data.Complex.$fFloatingComplex_$csin_info:
         const Data.Complex.$fFloatingComplex_$csin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJgp() //  [R1]
         { []
         }
     {offset
       cgJgp: // global
           _sgApb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJgv_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgApb::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csin_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJgp_info" {
     block_cgJgp_info:
         const _cgJgp;
         const 1;
         const 30;
 },
 _cgJgv() //  [R1, R2]
         { []
         }
     {offset
       cgJgv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJgD; else goto cgJgC;
       cgJgD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJgC: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJgv_info" {
     block_cgJgv_info:
         const _cgJgv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.85586176 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccos_closure" {
     Data.Complex.$fFloatingComplex_$s$ccos_closure:
         const Data.Complex.$fFloatingComplex_$s$ccos_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccos_entry() //  [R2]
         { []
         }
     {offset
       cgJgZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJhE; else goto cgJhF;
       cgJhE: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJhF: // global
           I64[Sp - 8] = block_cgJgW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJhM; else goto cgJgX;
       ugJhM: // global
           call _cgJgW(R1) args: 0, res: 0, upd: 0;
       cgJgX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccos_info" {
     Data.Complex.$fFloatingComplex_$s$ccos_info:
         const Data.Complex.$fFloatingComplex_$s$ccos_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgJgW() //  [R1]
         { []
         }
     {offset
       cgJgW: // global
           I64[Sp - 8] = block_cgJh2_info;
           _sgApl::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgApl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJhL; else goto cgJh3;
       ugJhL: // global
           call _cgJh2(R1) args: 0, res: 0, upd: 0;
       cgJh3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJgW_info" {
     block_cgJgW_info:
         const _cgJgW;
         const 0;
         const 30;
 },
 _cgJh2() //  [R1]
         { []
         }
     {offset
       cgJh2: // global
           I64[Sp] = block_cgJh7_info;
           _sgApo::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgApo::F64;
           if (R1 & 7 != 0) goto ugJhN; else goto cgJh8;
       ugJhN: // global
           call _cgJh7(R1) args: 0, res: 0, upd: 0;
       cgJh8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJh2_info" {
     block_cgJh2_info:
         const _cgJh2;
         const 1;
         const 30;
 },
 _cgJh7() //  [R1]
         { []
         }
     {offset
       cgJh7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJhK; else goto cgJhJ;
       cgJhK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJhJ: // global
           _sgApo::F64 = F64[Sp + 8];
           _sgApq::F64 = F64[R1 + 7];
           (_cgJhc::F64) = call MO_F64_Sinh(_sgApo::F64);
           (_cgJhg::F64) = call MO_F64_Sin(_sgApq::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgJhg::F64,
                                                      _cgJhc::F64));
           (_cgJhr::F64) = call MO_F64_Cosh(_sgApo::F64);
           (_cgJhv::F64) = call MO_F64_Cos(_sgApq::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgJhv::F64, _cgJhr::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJh7_info" {
     block_cgJh7_info:
         const _cgJh7;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.874239995 UTC

[section ""data" . Data.Complex.$w$ccos_closure" {
     Data.Complex.$w$ccos_closure:
         const Data.Complex.$w$ccos_info;
 },
 $dFloating_sgApD_entry() //  [R1]
         { []
         }
     {offset
       cgJim: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJin; else goto cgJio;
       cgJin: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJio: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgApD_info" {
     $dFloating_sgApD_info:
         const $dFloating_sgApD_entry;
         const 1;
         const 16;
 },
 sat_sgApI_entry() //  [R1]
         { []
         }
     {offset
       cgJiF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJiG; else goto cgJiH;
       cgJiG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJiH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgApI_info" {
     sat_sgApI_info:
         const sat_sgApI_entry;
         const 2;
         const 18;
 },
 sat_sgApH_entry() //  [R1]
         { []
         }
     {offset
       cgJiM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJiN; else goto cgJiO;
       cgJiN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJiO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgApH_info" {
     sat_sgApH_info:
         const sat_sgApH_entry;
         const 2;
         const 18;
 },
 sat_sgApL_entry() //  [R1]
         { []
         }
     {offset
       cgJiZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJj0; else goto cgJj1;
       cgJj0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJj1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgApL_info" {
     sat_sgApL_info:
         const sat_sgApL_entry;
         const 2;
         const 18;
 },
 sat_sgApK_entry() //  [R1]
         { []
         }
     {offset
       cgJj6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJj7; else goto cgJj8;
       cgJj7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJj8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgApK_info" {
     sat_sgApK_info:
         const sat_sgApK_entry;
         const 2;
         const 18;
 },
 sat_sgApM_entry() //  [R1]
         { []
         }
     {offset
       cgJj9: // global
           _sgApM::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgJja; else goto cgJjb;
       cgJjb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJjd; else goto cgJjc;
       cgJjd: // global
           HpAlloc = 64;
           goto cgJja;
       cgJja: // global
           R1 = _sgApM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJjc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgApM::P64;
           _sgApB::P64 = P64[_sgApM::P64 + 16];
           _sgApC::P64 = P64[_sgApM::P64 + 24];
           _sgApD::P64 = P64[_sgApM::P64 + 32];
           _sgApG::P64 = P64[_sgApM::P64 + 40];
           I64[Hp - 56] = sat_sgApL_info;
           P64[Hp - 40] = _sgApC::P64;
           P64[Hp - 32] = _sgApD::P64;
           I64[Hp - 24] = sat_sgApK_info;
           P64[Hp - 8] = _sgApB::P64;
           P64[Hp] = _sgApD::P64;
           R2 = _sgApG::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgApM_info" {
     sat_sgApM_info:
         const sat_sgApM_entry;
         const 4;
         const 15;
 },
 Data.Complex.$w$ccos_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJje: // global
           _sgApC::P64 = R4;
           _sgApB::P64 = R3;
           _sgApA::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgJjg; else goto cgJjh;
       cgJjh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJjj; else goto cgJji;
       cgJjj: // global
           HpAlloc = 24;
           goto cgJjg;
       cgJjg: // global
           R4 = _sgApC::P64;
           R3 = _sgApB::P64;
           R2 = _sgApA::P64;
           R1 = Data.Complex.$w$ccos_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJji: // global
           I64[Hp - 16] = $dFloating_sgApD_info;
           P64[Hp] = _sgApA::P64;
           I64[Sp - 32] = block_cgJip_info;
           R2 = _sgApA::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgApB::P64;
           P64[Sp - 8] = _sgApC::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ccos_info" {
     Data.Complex.$w$ccos_info:
         const Data.Complex.$w$ccos_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJip() //  [R1]
         { []
         }
     {offset
       cgJip: // global
           I64[Sp] = block_cgJit_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJip_info" {
     block_cgJip_info:
         const _cgJip;
         const 3;
         const 30;
 },
 _cgJit() //  [R1]
         { []
         }
     {offset
       cgJit: // global
           I64[Sp] = block_cgJix_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJit_info" {
     block_cgJit_info:
         const _cgJit;
         const 3;
         const 30;
 },
 _cgJix() //  [R1]
         { []
         }
     {offset
       cgJix: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJjo; else goto cgJjn;
       cgJjo: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJjn: // global
           I64[Hp - 56] = sat_sgApI_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgJii::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgJii::P64;
           I64[Hp - 24] = sat_sgApH_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgJii::P64;
           I64[Sp - 8] = block_cgJiP_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJix_info" {
     block_cgJix_info:
         const _cgJix;
         const 3;
         const 30;
 },
 _cgJiP() //  [R1]
         { []
         }
     {offset
       cgJiP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgJjr; else goto cgJjq;
       cgJjr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJjq: // global
           I64[Hp - 40] = sat_sgApM_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 16];
           _sgApG::P64 = P64[Sp + 8];
           P64[Hp] = _sgApG::P64;
           I64[Sp + 24] = block_cgJjf_info;
           R2 = _sgApG::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = Hp - 40;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJiP_info" {
     block_cgJiP_info:
         const _cgJiP;
         const 4;
         const 30;
 },
 _cgJjf() //  [R1]
         { []
         }
     {offset
       cgJjf: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJjf_info" {
     block_cgJjf_info:
         const _cgJjf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.909973212 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ccos_closure" {
     Data.Complex.$fFloatingComplex_$ccos_closure:
         const Data.Complex.$fFloatingComplex_$ccos_info;
 },
 Data.Complex.$fFloatingComplex_$ccos_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJkz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJkF; else goto cgJkG;
       cgJkF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ccos_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJkG: // global
           I64[Sp - 16] = block_cgJkw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJkL; else goto cgJkx;
       ugJkL: // global
           call _cgJkw(R1) args: 0, res: 0, upd: 0;
       cgJkx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ccos_info" {
     Data.Complex.$fFloatingComplex_$ccos_info:
         const Data.Complex.$fFloatingComplex_$ccos_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJkw() //  [R1]
         { []
         }
     {offset
       cgJkw: // global
           _sgApO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJkC_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgApO::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ccos_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJkw_info" {
     block_cgJkw_info:
         const _cgJkw;
         const 1;
         const 30;
 },
 _cgJkC() //  [R1, R2]
         { []
         }
     {offset
       cgJkC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJkK; else goto cgJkJ;
       cgJkK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJkJ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJkC_info" {
     block_cgJkC_info:
         const _cgJkC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.923676391 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csinh_closure" {
     Data.Complex.$fFloatingComplex_$s$csinh_closure:
         const Data.Complex.$fFloatingComplex_$s$csinh_info;
 },
 Data.Complex.$fFloatingComplex_$s$csinh_entry() //  [R2]
         { []
         }
     {offset
       cgJl6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJlI; else goto cgJlJ;
       cgJlI: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJlJ: // global
           I64[Sp - 8] = block_cgJl3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJlQ; else goto cgJl4;
       ugJlQ: // global
           call _cgJl3(R1) args: 0, res: 0, upd: 0;
       cgJl4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csinh_info" {
     Data.Complex.$fFloatingComplex_$s$csinh_info:
         const Data.Complex.$fFloatingComplex_$s$csinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgJl3() //  [R1]
         { []
         }
     {offset
       cgJl3: // global
           I64[Sp - 8] = block_cgJl9_info;
           _sgApZ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgApZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJlP; else goto cgJla;
       ugJlP: // global
           call _cgJl9(R1) args: 0, res: 0, upd: 0;
       cgJla: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJl3_info" {
     block_cgJl3_info:
         const _cgJl3;
         const 0;
         const 30;
 },
 _cgJl9() //  [R1]
         { []
         }
     {offset
       cgJl9: // global
           I64[Sp] = block_cgJle_info;
           _sgAq1::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAq1::F64;
           if (R1 & 7 != 0) goto ugJlR; else goto cgJlf;
       ugJlR: // global
           call _cgJle(R1) args: 0, res: 0, upd: 0;
       cgJlf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJl9_info" {
     block_cgJl9_info:
         const _cgJl9;
         const 1;
         const 30;
 },
 _cgJle() //  [R1]
         { []
         }
     {offset
       cgJle: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJlO; else goto cgJlN;
       cgJlO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJlN: // global
           _sgAq1::F64 = F64[Sp + 8];
           _sgAq3::F64 = F64[R1 + 7];
           (_cgJlj::F64) = call MO_F64_Cosh(_sgAq1::F64);
           (_cgJln::F64) = call MO_F64_Sin(_sgAq3::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgJln::F64, _cgJlj::F64);
           (_cgJlv::F64) = call MO_F64_Sinh(_sgAq1::F64);
           (_cgJlz::F64) = call MO_F64_Cos(_sgAq3::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgJlz::F64, _cgJlv::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJle_info" {
     block_cgJle_info:
         const _cgJle;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.938935228 UTC

[section ""data" . Data.Complex.$w$csinh_closure" {
     Data.Complex.$w$csinh_closure:
         const Data.Complex.$w$csinh_info;
 },
 $dFloating_sgAqf_entry() //  [R1]
         { []
         }
     {offset
       cgJmo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJmp; else goto cgJmq;
       cgJmp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJmq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgAqf_info" {
     $dFloating_sgAqf_info:
         const $dFloating_sgAqf_entry;
         const 1;
         const 16;
 },
 sat_sgAqk_entry() //  [R1]
         { []
         }
     {offset
       cgJmH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJmI; else goto cgJmJ;
       cgJmI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJmJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqk_info" {
     sat_sgAqk_info:
         const sat_sgAqk_entry;
         const 2;
         const 18;
 },
 sat_sgAqj_entry() //  [R1]
         { []
         }
     {offset
       cgJmO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJmP; else goto cgJmQ;
       cgJmP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJmQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqj_info" {
     sat_sgAqj_info:
         const sat_sgAqj_entry;
         const 2;
         const 18;
 },
 sat_sgAqn_entry() //  [R1]
         { []
         }
     {offset
       cgJmX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJmY; else goto cgJmZ;
       cgJmY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJmZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqn_info" {
     sat_sgAqn_info:
         const sat_sgAqn_entry;
         const 2;
         const 18;
 },
 sat_sgAqm_entry() //  [R1]
         { []
         }
     {offset
       cgJn4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJn5; else goto cgJn6;
       cgJn5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJn6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqm_info" {
     sat_sgAqm_info:
         const sat_sgAqm_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$csinh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJn7: // global
           _sgAqe::P64 = R4;
           _sgAqd::P64 = R3;
           _sgAqc::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgJn9; else goto cgJna;
       cgJna: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJnc; else goto cgJnb;
       cgJnc: // global
           HpAlloc = 24;
           goto cgJn9;
       cgJn9: // global
           R4 = _sgAqe::P64;
           R3 = _sgAqd::P64;
           R2 = _sgAqc::P64;
           R1 = Data.Complex.$w$csinh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJnb: // global
           I64[Hp - 16] = $dFloating_sgAqf_info;
           P64[Hp] = _sgAqc::P64;
           I64[Sp - 32] = block_cgJmr_info;
           R2 = _sgAqc::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgAqd::P64;
           P64[Sp - 8] = _sgAqe::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csinh_info" {
     Data.Complex.$w$csinh_info:
         const Data.Complex.$w$csinh_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJmr() //  [R1]
         { []
         }
     {offset
       cgJmr: // global
           I64[Sp] = block_cgJmv_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJmr_info" {
     block_cgJmr_info:
         const _cgJmr;
         const 3;
         const 30;
 },
 _cgJmv() //  [R1]
         { []
         }
     {offset
       cgJmv: // global
           I64[Sp] = block_cgJmz_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJmv_info" {
     block_cgJmv_info:
         const _cgJmv;
         const 3;
         const 30;
 },
 _cgJmz() //  [R1]
         { []
         }
     {offset
       cgJmz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJnh; else goto cgJng;
       cgJnh: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJng: // global
           I64[Hp - 56] = sat_sgAqk_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgJmk::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgJmk::P64;
           I64[Hp - 24] = sat_sgAqj_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgJmk::P64;
           I64[Sp - 8] = block_cgJmR_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJmz_info" {
     block_cgJmz_info:
         const _cgJmz;
         const 3;
         const 30;
 },
 _cgJmR() //  [R1]
         { []
         }
     {offset
       cgJmR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJnk; else goto cgJnj;
       cgJnk: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJnj: // global
           I64[Hp - 56] = sat_sgAqn_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgJmk::P64 = P64[Sp + 16];
           P64[Hp - 32] = _cgJmk::P64;
           I64[Hp - 24] = sat_sgAqm_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _cgJmk::P64;
           I64[Sp + 24] = block_cgJn8_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJmR_info" {
     block_cgJmR_info:
         const _cgJmR;
         const 4;
         const 30;
 },
 _cgJn8() //  [R1]
         { []
         }
     {offset
       cgJn8: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJn8_info" {
     block_cgJn8_info:
         const _cgJn8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.961091646 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$csinh_closure" {
     Data.Complex.$fFloatingComplex_$csinh_closure:
         const Data.Complex.$fFloatingComplex_$csinh_info;
 },
 Data.Complex.$fFloatingComplex_$csinh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJom: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJos; else goto cgJot;
       cgJos: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$csinh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJot: // global
           I64[Sp - 16] = block_cgJoj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJoy; else goto cgJok;
       ugJoy: // global
           call _cgJoj(R1) args: 0, res: 0, upd: 0;
       cgJok: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$csinh_info" {
     Data.Complex.$fFloatingComplex_$csinh_info:
         const Data.Complex.$fFloatingComplex_$csinh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJoj() //  [R1]
         { []
         }
     {offset
       cgJoj: // global
           _sgAqp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJop_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAqp::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csinh_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJoj_info" {
     block_cgJoj_info:
         const _cgJoj;
         const 1;
         const 30;
 },
 _cgJop() //  [R1, R2]
         { []
         }
     {offset
       cgJop: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJox; else goto cgJow;
       cgJox: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJow: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJop_info" {
     block_cgJop_info:
         const _cgJop;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.96978332 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccosh_closure" {
     Data.Complex.$fFloatingComplex_$s$ccosh_closure:
         const Data.Complex.$fFloatingComplex_$s$ccosh_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccosh_entry() //  [R2]
         { []
         }
     {offset
       cgJoT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJpv; else goto cgJpw;
       cgJpv: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJpw: // global
           I64[Sp - 8] = block_cgJoQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJpD; else goto cgJoR;
       ugJpD: // global
           call _cgJoQ(R1) args: 0, res: 0, upd: 0;
       cgJoR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccosh_info" {
     Data.Complex.$fFloatingComplex_$s$ccosh_info:
         const Data.Complex.$fFloatingComplex_$s$ccosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgJoQ() //  [R1]
         { []
         }
     {offset
       cgJoQ: // global
           I64[Sp - 8] = block_cgJoW_info;
           _sgAqA::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAqA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJpC; else goto cgJoX;
       ugJpC: // global
           call _cgJoW(R1) args: 0, res: 0, upd: 0;
       cgJoX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJoQ_info" {
     block_cgJoQ_info:
         const _cgJoQ;
         const 0;
         const 30;
 },
 _cgJoW() //  [R1]
         { []
         }
     {offset
       cgJoW: // global
           I64[Sp] = block_cgJp1_info;
           _sgAqC::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAqC::F64;
           if (R1 & 7 != 0) goto ugJpE; else goto cgJp2;
       ugJpE: // global
           call _cgJp1(R1) args: 0, res: 0, upd: 0;
       cgJp2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJoW_info" {
     block_cgJoW_info:
         const _cgJoW;
         const 1;
         const 30;
 },
 _cgJp1() //  [R1]
         { []
         }
     {offset
       cgJp1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJpB; else goto cgJpA;
       cgJpB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJpA: // global
           _sgAqC::F64 = F64[Sp + 8];
           _sgAqE::F64 = F64[R1 + 7];
           (_cgJp6::F64) = call MO_F64_Sinh(_sgAqC::F64);
           (_cgJpa::F64) = call MO_F64_Sin(_sgAqE::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgJpa::F64, _cgJp6::F64);
           (_cgJpi::F64) = call MO_F64_Cosh(_sgAqC::F64);
           (_cgJpm::F64) = call MO_F64_Cos(_sgAqE::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgJpm::F64, _cgJpi::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJp1_info" {
     block_cgJp1_info:
         const _cgJp1;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:30.985350159 UTC

[section ""data" . Data.Complex.$w$ccosh_closure" {
     Data.Complex.$w$ccosh_closure:
         const Data.Complex.$w$ccosh_info;
 },
 $dFloating_sgAqQ_entry() //  [R1]
         { []
         }
     {offset
       cgJqb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJqc; else goto cgJqd;
       cgJqc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJqd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgAqQ_info" {
     $dFloating_sgAqQ_info:
         const $dFloating_sgAqQ_entry;
         const 1;
         const 16;
 },
 sat_sgAqV_entry() //  [R1]
         { []
         }
     {offset
       cgJqu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJqv; else goto cgJqw;
       cgJqv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJqw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqV_info" {
     sat_sgAqV_info:
         const sat_sgAqV_entry;
         const 2;
         const 18;
 },
 sat_sgAqU_entry() //  [R1]
         { []
         }
     {offset
       cgJqB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJqC; else goto cgJqD;
       cgJqC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJqD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqU_info" {
     sat_sgAqU_info:
         const sat_sgAqU_entry;
         const 2;
         const 18;
 },
 sat_sgAqY_entry() //  [R1]
         { []
         }
     {offset
       cgJqK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJqL; else goto cgJqM;
       cgJqL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJqM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqY_info" {
     sat_sgAqY_info:
         const sat_sgAqY_entry;
         const 2;
         const 18;
 },
 sat_sgAqX_entry() //  [R1]
         { []
         }
     {offset
       cgJqR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJqS; else goto cgJqT;
       cgJqS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJqT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAqX_info" {
     sat_sgAqX_info:
         const sat_sgAqX_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$ccosh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJqU: // global
           _sgAqP::P64 = R4;
           _sgAqO::P64 = R3;
           _sgAqN::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgJqW; else goto cgJqX;
       cgJqX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJqZ; else goto cgJqY;
       cgJqZ: // global
           HpAlloc = 24;
           goto cgJqW;
       cgJqW: // global
           R4 = _sgAqP::P64;
           R3 = _sgAqO::P64;
           R2 = _sgAqN::P64;
           R1 = Data.Complex.$w$ccosh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJqY: // global
           I64[Hp - 16] = $dFloating_sgAqQ_info;
           P64[Hp] = _sgAqN::P64;
           I64[Sp - 32] = block_cgJqe_info;
           R2 = _sgAqN::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgAqO::P64;
           P64[Sp - 8] = _sgAqP::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ccosh_info" {
     Data.Complex.$w$ccosh_info:
         const Data.Complex.$w$ccosh_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJqe() //  [R1]
         { []
         }
     {offset
       cgJqe: // global
           I64[Sp] = block_cgJqi_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJqe_info" {
     block_cgJqe_info:
         const _cgJqe;
         const 3;
         const 30;
 },
 _cgJqi() //  [R1]
         { []
         }
     {offset
       cgJqi: // global
           I64[Sp] = block_cgJqm_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJqi_info" {
     block_cgJqi_info:
         const _cgJqi;
         const 3;
         const 30;
 },
 _cgJqm() //  [R1]
         { []
         }
     {offset
       cgJqm: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJr4; else goto cgJr3;
       cgJr4: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJr3: // global
           I64[Hp - 56] = sat_sgAqV_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgJq7::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgJq7::P64;
           I64[Hp - 24] = sat_sgAqU_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgJq7::P64;
           I64[Sp - 8] = block_cgJqE_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJqm_info" {
     block_cgJqm_info:
         const _cgJqm;
         const 3;
         const 30;
 },
 _cgJqE() //  [R1]
         { []
         }
     {offset
       cgJqE: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgJr7; else goto cgJr6;
       cgJr7: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJr6: // global
           I64[Hp - 56] = sat_sgAqY_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgJq7::P64 = P64[Sp + 16];
           P64[Hp - 32] = _cgJq7::P64;
           I64[Hp - 24] = sat_sgAqX_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _cgJq7::P64;
           I64[Sp + 24] = block_cgJqV_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJqE_info" {
     block_cgJqE_info:
         const _cgJqE;
         const 4;
         const 30;
 },
 _cgJqV() //  [R1]
         { []
         }
     {offset
       cgJqV: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJqV_info" {
     block_cgJqV_info:
         const _cgJqV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.010905138 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ccosh_closure" {
     Data.Complex.$fFloatingComplex_$ccosh_closure:
         const Data.Complex.$fFloatingComplex_$ccosh_info;
 },
 Data.Complex.$fFloatingComplex_$ccosh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJs9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJsf; else goto cgJsg;
       cgJsf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ccosh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJsg: // global
           I64[Sp - 16] = block_cgJs6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJsl; else goto cgJs7;
       ugJsl: // global
           call _cgJs6(R1) args: 0, res: 0, upd: 0;
       cgJs7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ccosh_info" {
     Data.Complex.$fFloatingComplex_$ccosh_info:
         const Data.Complex.$fFloatingComplex_$ccosh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJs6() //  [R1]
         { []
         }
     {offset
       cgJs6: // global
           _sgAr0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJsc_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAr0::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ccosh_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJs6_info" {
     block_cgJs6_info:
         const _cgJs6;
         const 1;
         const 30;
 },
 _cgJsc() //  [R1, R2]
         { []
         }
     {offset
       cgJsc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJsk; else goto cgJsj;
       cgJsk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJsj: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJsc_info" {
     block_cgJsc_info:
         const _cgJsc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.020508569 UTC

[section ""data" . Data.Complex.$w$s$c/_closure" {
     Data.Complex.$w$s$c/_closure:
         const Data.Complex.$w$s$c/_info;
         const 0;
 },
 Data.Complex.$w$s$c/_slow() //  [R1]
         { []
         }
     {offset
       cgJsA: // global
           D4 = F64[Sp + 24];
           D3 = F64[Sp + 16];
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c/_entry() //  [D1, D2, D3, D4]
         { []
         }
     {offset
       cgJsG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgJsK; else goto cgJsL;
       cgJsK: // global
           R1 = Data.Complex.$w$s$c/_closure;
           F64[Sp - 32] = D1;
           F64[Sp - 24] = D2;
           F64[Sp - 16] = D3;
           F64[Sp - 8] = D4;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cgJsL: // global
           I64[Sp - 40] = block_cgJsE_info;
           _sgAr8::F64 = D1;
           D1 = D3;
           F64[Sp - 32] = _sgAr8::F64;
           F64[Sp - 24] = D2;
           F64[Sp - 16] = D3;
           F64[Sp - 8] = D4;
           Sp = Sp - 40;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c/_info" {
     Data.Complex.$w$s$c/_info:
         const Data.Complex.$w$s$c/_entry;
         const 0;
         const 140750373257230;
         const 17179869184;
         const SgBbV_srt+328;
         const 964;
         const Data.Complex.$w$s$c/_slow;
 },
 _cgJsE() //  [R1]
         { []
         }
     {offset
       cgJsE: // global
           I64[Sp - 8] = block_cgJsJ_info;
           D1 = F64[Sp + 32];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJsE_info" {
     block_cgJsE_info:
         const _cgJsE;
         const 964;
         const 12884901918;
         const SgBbV_srt+328;
 },
 _cgJsJ() //  [R1]
         { []
         }
     {offset
       cgJsJ: // global
           _sgAra::F64 = F64[Sp + 32];
           _sgArc::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgArc::I64, R1)) goto cgJtL; else goto cgJtM;
       cgJtL: // global
           _sgArf::I64 = -_sgArc::I64;
           goto sgAre;
       cgJtM: // global
           _sgArf::I64 = -R1;
           goto sgAre;
       sgAre: // global
           I64[Sp] = block_cgJsW_info;
           D1 = _sgAra::F64;
           R2 = _sgArf::I64;
           I64[Sp + 8] = _sgArf::I64;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJsJ_info" {
     block_cgJsJ_info:
         const _cgJsJ;
         const 1989;
         const 4294967326;
         const SgBbV_srt+328;
 },
 _cgJsW() //  [D1]
         { []
         }
     {offset
       cgJsW: // global
           I64[Sp] = block_cgJt0_info;
           _sgArg::F64 = D1;
           D1 = F64[Sp + 40];
           R2 = I64[Sp + 8];
           F64[Sp + 8] = _sgArg::F64;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJsW_info" {
     block_cgJsW_info:
         const _cgJsW;
         const 1989;
         const 4294967326;
         const SgBbV_srt+328;
 },
 _cgJt0() //  [D1]
         { []
         }
     {offset
       cgJt0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgJtH; else goto cgJtG;
       cgJtH: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgJtG: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           _sgAr8::F64 = F64[Sp + 16];
           _sgAr9::F64 = F64[Sp + 24];
           _sgArg::F64 = F64[Sp + 8];
           _sgAri::F64 = %MO_F_Add_W64(%MO_F_Mul_W64(F64[Sp + 32],
                                                     _sgArg::F64),
                                       %MO_F_Mul_W64(F64[Sp + 40], D1));
           F64[Hp - 16] = %MO_F_Quot_W64(%MO_F_Sub_W64(%MO_F_Mul_W64(_sgAr9::F64,
                                                                     _sgArg::F64),
                                                       %MO_F_Mul_W64(_sgAr8::F64, D1)),
                                         _sgAri::F64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(%MO_F_Add_W64(%MO_F_Mul_W64(_sgAr8::F64,
                                                                _sgArg::F64),
                                                  %MO_F_Mul_W64(_sgAr9::F64, D1)),
                                    _sgAri::F64);
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJt0_info" {
     block_cgJt0_info:
         const _cgJt0;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.034506807 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c/_closure" {
     Data.Complex.$fFloatingComplex_$s$c/_closure:
         const Data.Complex.$fFloatingComplex_$s$c/_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c/_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJuz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJv4; else goto cgJv5;
       cgJv4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c/_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJv5: // global
           I64[Sp - 16] = block_cgJuw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJvg; else goto cgJux;
       ugJvg: // global
           call _cgJuw(R1) args: 0, res: 0, upd: 0;
       cgJux: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c/_info" {
     Data.Complex.$fFloatingComplex_$s$c/_info:
         const Data.Complex.$fFloatingComplex_$s$c/_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+448;
 },
 _cgJuw() //  [R1]
         { []
         }
     {offset
       cgJuw: // global
           I64[Sp - 8] = block_cgJuC_info;
           _sgArC::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgArC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJvf; else goto cgJuD;
       ugJvf: // global
           call _cgJuC(R1) args: 0, res: 0, upd: 0;
       cgJuD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJuw_info" {
     block_cgJuw_info:
         const _cgJuw;
         const 1;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgJuC() //  [R1]
         { []
         }
     {offset
       cgJuC: // global
           I64[Sp] = block_cgJuH_info;
           _sgArE::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgArE::F64;
           if (R1 & 7 != 0) goto ugJvh; else goto cgJuI;
       ugJvh: // global
           call _cgJuH(R1) args: 0, res: 0, upd: 0;
       cgJuI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJuC_info" {
     block_cgJuC_info:
         const _cgJuC;
         const 2;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgJuH() //  [R1]
         { []
         }
     {offset
       cgJuH: // global
           I64[Sp] = block_cgJuM_info;
           _sgArG::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgArG::F64;
           if (R1 & 7 != 0) goto ugJvi; else goto cgJuN;
       ugJvi: // global
           call _cgJuM(R1) args: 0, res: 0, upd: 0;
       cgJuN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJuH_info" {
     block_cgJuH_info:
         const _cgJuH;
         const 66;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgJuM() //  [R1]
         { []
         }
     {offset
       cgJuM: // global
           I64[Sp - 8] = block_cgJuR_info;
           _sgArJ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgArJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJvj; else goto cgJuS;
       ugJvj: // global
           call _cgJuR(R1) args: 0, res: 0, upd: 0;
       cgJuS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJuM_info" {
     block_cgJuM_info:
         const _cgJuM;
         const 194;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgJuR() //  [R1]
         { []
         }
     {offset
       cgJuR: // global
           I64[Sp] = block_cgJuW_info;
           _sgArL::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgArL::F64;
           if (R1 & 7 != 0) goto ugJvk; else goto cgJuX;
       ugJvk: // global
           call _cgJuW(R1) args: 0, res: 0, upd: 0;
       cgJuX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJuR_info" {
     block_cgJuR_info:
         const _cgJuR;
         const 387;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgJuW() //  [R1]
         { []
         }
     {offset
       cgJuW: // global
           _sgArG::F64 = F64[Sp + 24];
           I64[Sp + 24] = block_cgJv1_info;
           D4 = F64[R1 + 7];
           D3 = F64[Sp + 8];
           D2 = _sgArG::F64;
           D1 = F64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJuW_info" {
     block_cgJuW_info:
         const _cgJuW;
         const 451;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgJv1() //  [R1, R2]
         { []
         }
     {offset
       cgJv1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJve; else goto cgJvd;
       cgJve: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJvd: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJv1_info" {
     block_cgJv1_info:
         const _cgJv1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.059045153 UTC

[section ""data" . Data.Complex.$w$c/_closure" {
     Data.Complex.$w$c/_closure:
         const Data.Complex.$w$c/_info;
 },
 $dReal_sgArY_entry() //  [R1]
         { []
         }
     {offset
       cgJw8: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_sgArY_info" {
     $dReal_sgArY_info:
         const $dReal_sgArY_entry;
         const 1;
         const 16;
 },
 $dNum_sgArZ_entry() //  [R1]
         { []
         }
     {offset
       cgJwf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJwg; else goto cgJwh;
       cgJwg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJwh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgArZ_info" {
     $dNum_sgArZ_info:
         const $dNum_sgArZ_entry;
         const 1;
         const 16;
 },
 k_sgAs0_entry() //  [R1]
         { []
         }
     {offset
       cgJwo: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgJws; else goto cgJwt;
       cgJws: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJwt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgJwm_info;
           _sgArR::P64 = P64[R1 + 16];
           R2 = _sgArR::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 32] = _sgArR::P64;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 56;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_sgAs0_info" {
     k_sgAs0_info:
         const k_sgAs0_entry;
         const 3;
         const 15;
 },
 _cgJwm() //  [R1]
         { []
         }
     {offset
       cgJwm: // global
           _sgArR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJwr_info;
           R2 = _sgArR::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgJwm_info" {
     block_cgJwm_info:
         const _cgJwm;
         const 2;
         const 30;
 },
 _cgJwr() //  [R1]
         { []
         }
     {offset
       cgJwr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgJwA; else goto cgJwz;
       cgJwA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgJwz: // global
           _sgAs2::I64 = I64[Sp + 8];
           _sgAs4::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_sgAs2::I64,
                            _sgAs4::I64)) goto cgJwJ; else goto cgJwP;
       cgJwJ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sgAs2::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cgJwP: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sgAs4::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgJwr_info" {
     block_cgJwr_info:
         const _cgJwr;
         const 65;
         const 30;
 },
 y''_sgAs8_entry() //  [R1]
         { []
         }
     {offset
       cgJwU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJwV; else goto cgJwW;
       cgJwV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJwW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . y''_sgAs8_info" {
     y''_sgAs8_info:
         const y''_sgAs8_entry;
         const 3;
         const 15;
 },
 x''_sgAs9_entry() //  [R1]
         { []
         }
     {offset
       cgJx1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJx2; else goto cgJx3;
       cgJx2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJx3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x''_sgAs9_info" {
     x''_sgAs9_info:
         const x''_sgAs9_entry;
         const 3;
         const 15;
 },
 sat_sgAsc_entry() //  [R1]
         { []
         }
     {offset
       cgJxc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJxd; else goto cgJxe;
       cgJxd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJxe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAsc_info" {
     sat_sgAsc_info:
         const sat_sgAsc_entry;
         const 3;
         const 15;
 },
 sat_sgAsb_entry() //  [R1]
         { []
         }
     {offset
       cgJxj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJxk; else goto cgJxl;
       cgJxk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJxl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAsb_info" {
     sat_sgAsb_info:
         const sat_sgAsb_entry;
         const 3;
         const 15;
 },
 d_sgAsa_entry() //  [R1]
         { []
         }
     {offset
       cgJxm: // global
           _sgAsa::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgJxn; else goto cgJxo;
       cgJxo: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgJxq; else goto cgJxp;
       cgJxq: // global
           HpAlloc = 80;
           goto cgJxn;
       cgJxn: // global
           R1 = _sgAsa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJxp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAsa::P64;
           _sgArU::P64 = P64[_sgAsa::P64 + 16];
           _sgArV::P64 = P64[_sgAsa::P64 + 24];
           _sgArZ::P64 = P64[_sgAsa::P64 + 32];
           _sgAs8::P64 = P64[_sgAsa::P64 + 40];
           _sgAs9::P64 = P64[_sgAsa::P64 + 48];
           I64[Hp - 72] = sat_sgAsc_info;
           P64[Hp - 56] = _sgArV::P64;
           P64[Hp - 48] = _sgArZ::P64;
           P64[Hp - 40] = _sgAs8::P64;
           I64[Hp - 32] = sat_sgAsb_info;
           P64[Hp - 16] = _sgArU::P64;
           P64[Hp - 8] = _sgArZ::P64;
           P64[Hp] = _sgAs9::P64;
           R2 = _sgArZ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . d_sgAsa_info" {
     d_sgAsa_info:
         const d_sgAsa_entry;
         const 5;
         const 15;
 },
 sat_sgAse_entry() //  [R1]
         { []
         }
     {offset
       cgJxz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJxA; else goto cgJxB;
       cgJxA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJxB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAse_info" {
     sat_sgAse_info:
         const sat_sgAse_entry;
         const 3;
         const 15;
 },
 sat_sgAsd_entry() //  [R1]
         { []
         }
     {offset
       cgJxG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJxH; else goto cgJxI;
       cgJxH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJxI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAsd_info" {
     sat_sgAsd_info:
         const sat_sgAsd_entry;
         const 3;
         const 15;
 },
 sat_sgAsf_entry() //  [R1]
         { []
         }
     {offset
       cgJxJ: // global
           _sgAsf::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgJxK; else goto cgJxL;
       cgJxL: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgJxN; else goto cgJxM;
       cgJxN: // global
           HpAlloc = 80;
           goto cgJxK;
       cgJxK: // global
           R1 = _sgAsf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJxM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAsf::P64;
           _sgArS::P64 = P64[_sgAsf::P64 + 16];
           _sgArT::P64 = P64[_sgAsf::P64 + 24];
           _sgArZ::P64 = P64[_sgAsf::P64 + 32];
           _sgAs8::P64 = P64[_sgAsf::P64 + 40];
           _sgAs9::P64 = P64[_sgAsf::P64 + 48];
           I64[Hp - 72] = sat_sgAse_info;
           P64[Hp - 56] = _sgArT::P64;
           P64[Hp - 48] = _sgArZ::P64;
           P64[Hp - 40] = _sgAs8::P64;
           I64[Hp - 32] = sat_sgAsd_info;
           P64[Hp - 16] = _sgArS::P64;
           P64[Hp - 8] = _sgArZ::P64;
           P64[Hp] = _sgAs9::P64;
           R2 = _sgArZ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAsf_info" {
     sat_sgAsf_info:
         const sat_sgAsf_entry;
         const 5;
         const 15;
 },
 sat_sgAsi_entry() //  [R1]
         { []
         }
     {offset
       cgJxY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJxZ; else goto cgJy0;
       cgJxZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJy0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAsi_info" {
     sat_sgAsi_info:
         const sat_sgAsi_entry;
         const 3;
         const 15;
 },
 sat_sgAsh_entry() //  [R1]
         { []
         }
     {offset
       cgJy5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJy6; else goto cgJy7;
       cgJy6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJy7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAsh_info" {
     sat_sgAsh_info:
         const sat_sgAsh_entry;
         const 3;
         const 15;
 },
 sat_sgAsj_entry() //  [R1]
         { []
         }
     {offset
       cgJy8: // global
           _sgAsj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgJy9; else goto cgJya;
       cgJya: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgJyc; else goto cgJyb;
       cgJyc: // global
           HpAlloc = 80;
           goto cgJy9;
       cgJy9: // global
           R1 = _sgAsj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJyb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAsj::P64;
           _sgArS::P64 = P64[_sgAsj::P64 + 16];
           _sgArT::P64 = P64[_sgAsj::P64 + 24];
           _sgArZ::P64 = P64[_sgAsj::P64 + 32];
           _sgAs8::P64 = P64[_sgAsj::P64 + 40];
           _sgAs9::P64 = P64[_sgAsj::P64 + 48];
           I64[Hp - 72] = sat_sgAsi_info;
           P64[Hp - 56] = _sgArS::P64;
           P64[Hp - 48] = _sgArZ::P64;
           P64[Hp - 40] = _sgAs8::P64;
           I64[Hp - 32] = sat_sgAsh_info;
           P64[Hp - 16] = _sgArT::P64;
           P64[Hp - 8] = _sgArZ::P64;
           P64[Hp] = _sgAs9::P64;
           R2 = _sgArZ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAsj_info" {
     sat_sgAsj_info:
         const sat_sgAsj_entry;
         const 5;
         const 15;
 },
 Data.Complex.$w$c/_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgJyd: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgJyf; else goto cgJyg;
       cgJyf: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c/_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJyg: // global
           I64[Sp - 48] = block_cgJvW_info;
           _sgArR::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _sgArR::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c/_info" {
     Data.Complex.$w$c/_info:
         const Data.Complex.$w$c/_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgJvW() //  [R1]
         { []
         }
     {offset
       cgJvW: // global
           I64[Sp - 8] = block_cgJw0_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJvW_info" {
     block_cgJvW_info:
         const _cgJvW;
         const 5;
         const 30;
 },
 _cgJw0() //  [R1]
         { []
         }
     {offset
       cgJw0: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto cgJyk; else goto cgJyj;
       cgJyk: // global
           HpAlloc = 280;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJyj: // global
           I64[Hp - 272] = $dReal_sgArY_info;
           P64[Hp - 256] = P64[Sp + 8];
           I64[Hp - 248] = $dNum_sgArZ_info;
           P64[Hp - 232] = Hp - 272;
           I64[Hp - 224] = k_sgAs0_info;
           _sgArR::P64 = P64[Sp + 16];
           P64[Hp - 208] = _sgArR::P64;
           _sgArU::P64 = P64[Sp + 40];
           P64[Hp - 200] = _sgArU::P64;
           _sgArV::P64 = P64[Sp + 48];
           P64[Hp - 192] = _sgArV::P64;
           I64[Hp - 184] = y''_sgAs8_info;
           P64[Hp - 168] = _sgArR::P64;
           P64[Hp - 160] = _sgArV::P64;
           _cgJwi::P64 = Hp - 224;
           P64[Hp - 152] = _cgJwi::P64;
           I64[Hp - 144] = x''_sgAs9_info;
           P64[Hp - 128] = _sgArR::P64;
           P64[Hp - 120] = _sgArU::P64;
           P64[Hp - 112] = _cgJwi::P64;
           I64[Hp - 104] = d_sgAsa_info;
           P64[Hp - 88] = _sgArU::P64;
           P64[Hp - 80] = _sgArV::P64;
           _cgJwb::P64 = Hp - 248;
           P64[Hp - 72] = _cgJwb::P64;
           _cgJwQ::P64 = Hp - 184;
           P64[Hp - 64] = _cgJwQ::P64;
           _cgJwX::P64 = Hp - 144;
           P64[Hp - 56] = _cgJwX::P64;
           I64[Hp - 48] = sat_sgAsf_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = _cgJwb::P64;
           P64[Hp - 8] = _cgJwQ::P64;
           P64[Hp] = _cgJwX::P64;
           I64[Sp - 8] = block_cgJxO_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 48;
           _cgJx4::P64 = Hp - 104;
           P64[Sp - 16] = _cgJx4::P64;
           P64[Sp] = R1;
           P64[Sp + 8] = _cgJx4::P64;
           P64[Sp + 16] = _cgJwX::P64;
           P64[Sp + 40] = _cgJwQ::P64;
           P64[Sp + 48] = _cgJwb::P64;
           Sp = Sp - 32;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJw0_info" {
     block_cgJw0_info:
         const _cgJw0;
         const 6;
         const 30;
 },
 _cgJxO() //  [R1]
         { []
         }
     {offset
       cgJxO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJyn; else goto cgJym;
       cgJyn: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJym: // global
           I64[Hp - 48] = sat_sgAsj_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 48] = block_cgJye_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 56] = R1;
           Sp = Sp + 24;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJxO_info" {
     block_cgJxO_info:
         const _cgJxO;
         const 7;
         const 30;
 },
 _cgJye() //  [R1]
         { []
         }
     {offset
       cgJye: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJye_info" {
     block_cgJye_info:
         const _cgJye;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.098875716 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c/_closure" {
     Data.Complex.$fFloatingComplex_$c/_closure:
         const Data.Complex.$fFloatingComplex_$c/_info;
 },
 Data.Complex.$fFloatingComplex_$c/_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJAu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJAF; else goto cgJAG;
       cgJAF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c/_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJAG: // global
           I64[Sp - 24] = block_cgJAr_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugJAN; else goto cgJAs;
       ugJAN: // global
           call _cgJAr(R1) args: 0, res: 0, upd: 0;
       cgJAs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c/_info" {
     Data.Complex.$fFloatingComplex_$c/_info:
         const Data.Complex.$fFloatingComplex_$c/_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJAr() //  [R1]
         { []
         }
     {offset
       cgJAr: // global
           I64[Sp - 8] = block_cgJAx_info;
           _sgAsp::P64 = P64[R1 + 7];
           _sgAsq::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAsq::P64;
           P64[Sp + 16] = _sgAsp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJAM; else goto cgJAy;
       ugJAM: // global
           call _cgJAx(R1) args: 0, res: 0, upd: 0;
       cgJAy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJAr_info" {
     block_cgJAr_info:
         const _cgJAr;
         const 2;
         const 30;
 },
 _cgJAx() //  [R1]
         { []
         }
     {offset
       cgJAx: // global
           _sgAsp::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgJAC_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgAsp::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJAx_info" {
     block_cgJAx_info:
         const _cgJAx;
         const 3;
         const 30;
 },
 _cgJAC() //  [R1, R2]
         { []
         }
     {offset
       cgJAC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJAL; else goto cgJAK;
       cgJAL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJAK: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJAC_info" {
     block_cgJAC_info:
         const _cgJAC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.108722527 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromRational_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromRational_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromRational_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       cgJBc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgJBk; else goto cgJBl;
       cgJBk: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJBl: // global
           I64[Sp - 8] = block_cgJB9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJBq; else goto cgJBa;
       ugJBq: // global
           call _cgJB9(R1) args: 0, res: 0, upd: 0;
       cgJBa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromRational_info" {
     Data.Complex.$fFloatingComplex_$s$cfromRational_info:
         const Data.Complex.$fFloatingComplex_$s$cfromRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+464;
 },
 _cgJB9() //  [R1]
         { []
         }
     {offset
       cgJB9: // global
           I64[Sp] = block_cgJBf_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Float.rationalToDouble_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJB9_info" {
     block_cgJB9_info:
         const _cgJB9;
         const 0;
         const 4294967326;
         const SgBbV_srt+464;
 },
 _cgJBf() //  [R1]
         { []
         }
     {offset
       cgJBf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJBp; else goto cgJBo;
       cgJBp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJBo: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJBf_info" {
     block_cgJBf_info:
         const _cgJBf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.117067167 UTC

[section ""data" . Data.Complex.$w$cfromRational_closure" {
     Data.Complex.$w$cfromRational_closure:
         const Data.Complex.$w$cfromRational_info;
         const 0;
 },
 Data.Complex.$w$cfromRational_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJBK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJC2; else goto cgJC3;
       cgJC2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJC3: // global
           I64[Sp - 16] = block_cgJBI_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cfromRational_info" {
     Data.Complex.$w$cfromRational_info:
         const Data.Complex.$w$cfromRational_entry;
         const 0;
         const 18014402804449294;
         const 8589934607;
         const SgBbV_srt+304;
 },
 _cgJBI() //  [R1]
         { []
         }
     {offset
       cgJBI: // global
           I64[Sp - 8] = block_cgJBN_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJBI_info" {
     block_cgJBI_info:
         const _cgJBI;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJBN() //  [R1]
         { []
         }
     {offset
       cgJBN: // global
           I64[Sp] = block_cgJBR_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJBN_info" {
     block_cgJBN_info:
         const _cgJBN;
         const 2;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJBR() //  [R1]
         { []
         }
     {offset
       cgJBR: // global
           _sgAsF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJBT_info;
           R2 = _sgAsF::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJBR_info" {
     block_cgJBR_info:
         const _cgJBR;
         const 130;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJBT() //  [R1]
         { []
         }
     {offset
       cgJBT: // global
           I64[Sp] = block_cgJBX_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJBT_info" {
     block_cgJBT_info:
         const _cgJBT;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJBX() //  [R1]
         { []
         }
     {offset
       cgJBX: // global
           I64[Sp] = block_cgJC1_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJBX_info" {
     block_cgJBX_info:
         const _cgJBX;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJC1() //  [R1]
         { []
         }
     {offset
       cgJC1: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJC1_info" {
     block_cgJC1_info:
         const _cgJC1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.130610567 UTC

[section ""data" . Data.Complex.$fFractionalComplex_$cfromRational_closure" {
     Data.Complex.$fFractionalComplex_$cfromRational_closure:
         const Data.Complex.$fFractionalComplex_$cfromRational_info;
         const 0;
 },
 Data.Complex.$fFractionalComplex_$cfromRational_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cgJCH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgJCI; else goto cgJCJ;
       cgJCI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFractionalComplex_$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJCJ: // global
           I64[Sp - 8] = block_cgJCE_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromRational_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFractionalComplex_$cfromRational_info" {
     Data.Complex.$fFractionalComplex_$cfromRational_info:
         const Data.Complex.$fFractionalComplex_$cfromRational_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+480;
 },
 _cgJCE() //  [R1, R2]
         { []
         }
     {offset
       cgJCE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJCM; else goto cgJCL;
       cgJCM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJCL: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJCE_info" {
     block_cgJCE_info:
         const _cgJCE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.138351986 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c+_closure" {
     Data.Complex.$fFloatingComplex_$s$c+_closure:
         const Data.Complex.$fFloatingComplex_$s$c+_info;
 },
 Data.Complex.$fFloatingComplex_$s$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJD3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJDE; else goto cgJDF;
       cgJDE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJDF: // global
           I64[Sp - 16] = block_cgJD0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJDP; else goto cgJD1;
       ugJDP: // global
           call _cgJD0(R1) args: 0, res: 0, upd: 0;
       cgJD1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c+_info" {
     Data.Complex.$fFloatingComplex_$s$c+_info:
         const Data.Complex.$fFloatingComplex_$s$c+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJD0() //  [R1]
         { []
         }
     {offset
       cgJD0: // global
           I64[Sp - 8] = block_cgJD6_info;
           _sgAsU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAsU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJDO; else goto cgJD7;
       ugJDO: // global
           call _cgJD6(R1) args: 0, res: 0, upd: 0;
       cgJD7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJD0_info" {
     block_cgJD0_info:
         const _cgJD0;
         const 1;
         const 30;
 },
 _cgJD6() //  [R1]
         { []
         }
     {offset
       cgJD6: // global
           I64[Sp] = block_cgJDb_info;
           _sgAsW::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAsW::F64;
           if (R1 & 7 != 0) goto ugJDQ; else goto cgJDc;
       ugJDQ: // global
           call _cgJDb(R1) args: 0, res: 0, upd: 0;
       cgJDc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJD6_info" {
     block_cgJD6_info:
         const _cgJD6;
         const 2;
         const 30;
 },
 _cgJDb() //  [R1]
         { []
         }
     {offset
       cgJDb: // global
           I64[Sp] = block_cgJDg_info;
           _sgAsY::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgAsY::F64;
           if (R1 & 7 != 0) goto ugJDR; else goto cgJDh;
       ugJDR: // global
           call _cgJDg(R1) args: 0, res: 0, upd: 0;
       cgJDh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJDb_info" {
     block_cgJDb_info:
         const _cgJDb;
         const 66;
         const 30;
 },
 _cgJDg() //  [R1]
         { []
         }
     {offset
       cgJDg: // global
           I64[Sp - 8] = block_cgJDl_info;
           _sgAt1::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAt1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJDS; else goto cgJDm;
       ugJDS: // global
           call _cgJDl(R1) args: 0, res: 0, upd: 0;
       cgJDm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJDg_info" {
     block_cgJDg_info:
         const _cgJDg;
         const 194;
         const 30;
 },
 _cgJDl() //  [R1]
         { []
         }
     {offset
       cgJDl: // global
           I64[Sp] = block_cgJDq_info;
           _sgAt3::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAt3::F64;
           if (R1 & 7 != 0) goto ugJDT; else goto cgJDr;
       ugJDT: // global
           call _cgJDq(R1) args: 0, res: 0, upd: 0;
       cgJDr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJDl_info" {
     block_cgJDl_info:
         const _cgJDl;
         const 387;
         const 30;
 },
 _cgJDq() //  [R1]
         { []
         }
     {offset
       cgJDq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJDN; else goto cgJDM;
       cgJDN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJDM: // global
           _sgAt8::F64 = %MO_F_Add_W64(F64[Sp + 24], F64[R1 + 7]);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _sgAt8::F64;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Add_W64(F64[Sp + 16], F64[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJDq_info" {
     block_cgJDq_info:
         const _cgJDq;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.152894806 UTC

[section ""data" . Data.Complex.$w$c+_closure" {
     Data.Complex.$w$c+_closure:
         const Data.Complex.$w$c+_info;
 },
 Data.Complex.$w$c+_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgJEA: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgJEO; else goto cgJEP;
       cgJEO: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c+_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJEP: // global
           I64[Sp - 40] = block_cgJEy_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c+_info" {
     Data.Complex.$w$c+_info:
         const Data.Complex.$w$c+_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgJEy() //  [R1]
         { []
         }
     {offset
       cgJEy: // global
           I64[Sp] = block_cgJED_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJEy_info" {
     block_cgJEy_info:
         const _cgJEy;
         const 4;
         const 30;
 },
 _cgJED() //  [R1]
         { []
         }
     {offset
       cgJED: // global
           I64[Sp] = block_cgJEH_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJED_info" {
     block_cgJED_info:
         const _cgJED;
         const 4;
         const 30;
 },
 _cgJEH() //  [R1]
         { []
         }
     {offset
       cgJEH: // global
           _sgAtb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJEL_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sgAtb::P64;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJEH_info" {
     block_cgJEH_info:
         const _cgJEH;
         const 4;
         const 30;
 },
 _cgJEL() //  [R1]
         { []
         }
     {offset
       cgJEL: // global
           _sgAth::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgJEN_info;
           R2 = _sgAth::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJEL_info" {
     block_cgJEL_info:
         const _cgJEL;
         const 3;
         const 30;
 },
 _cgJEN() //  [R1]
         { []
         }
     {offset
       cgJEN: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJEN_info" {
     block_cgJEN_info:
         const _cgJEN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.166380879 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c+_closure" {
     Data.Complex.$fFloatingComplex_$c+_closure:
         const Data.Complex.$fFloatingComplex_$c+_info;
 },
 Data.Complex.$fFloatingComplex_$c+_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJFr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJFC; else goto cgJFD;
       cgJFC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c+_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJFD: // global
           I64[Sp - 24] = block_cgJFo_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugJFK; else goto cgJFp;
       ugJFK: // global
           call _cgJFo(R1) args: 0, res: 0, upd: 0;
       cgJFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c+_info" {
     Data.Complex.$fFloatingComplex_$c+_info:
         const Data.Complex.$fFloatingComplex_$c+_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJFo() //  [R1]
         { []
         }
     {offset
       cgJFo: // global
           I64[Sp - 8] = block_cgJFu_info;
           _sgAto::P64 = P64[R1 + 7];
           _sgAtp::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAtp::P64;
           P64[Sp + 16] = _sgAto::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJFJ; else goto cgJFv;
       ugJFJ: // global
           call _cgJFu(R1) args: 0, res: 0, upd: 0;
       cgJFv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJFo_info" {
     block_cgJFo_info:
         const _cgJFo;
         const 2;
         const 30;
 },
 _cgJFu() //  [R1]
         { []
         }
     {offset
       cgJFu: // global
           _sgAto::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgJFz_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgAto::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJFu_info" {
     block_cgJFu_info:
         const _cgJFu;
         const 3;
         const 30;
 },
 _cgJFz() //  [R1, R2]
         { []
         }
     {offset
       cgJFz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJFI; else goto cgJFH;
       cgJFI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJFH: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJFz_info" {
     block_cgJFz_info:
         const _cgJFz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.17969125 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c-_closure" {
     Data.Complex.$fFloatingComplex_$s$c-_closure:
         const Data.Complex.$fFloatingComplex_$s$c-_info;
 },
 Data.Complex.$fFloatingComplex_$s$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJG9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJGK; else goto cgJGL;
       cgJGK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJGL: // global
           I64[Sp - 16] = block_cgJG6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJGV; else goto cgJG7;
       ugJGV: // global
           call _cgJG6(R1) args: 0, res: 0, upd: 0;
       cgJG7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c-_info" {
     Data.Complex.$fFloatingComplex_$s$c-_info:
         const Data.Complex.$fFloatingComplex_$s$c-_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJG6() //  [R1]
         { []
         }
     {offset
       cgJG6: // global
           I64[Sp - 8] = block_cgJGc_info;
           _sgAtA::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAtA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJGU; else goto cgJGd;
       ugJGU: // global
           call _cgJGc(R1) args: 0, res: 0, upd: 0;
       cgJGd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJG6_info" {
     block_cgJG6_info:
         const _cgJG6;
         const 1;
         const 30;
 },
 _cgJGc() //  [R1]
         { []
         }
     {offset
       cgJGc: // global
           I64[Sp] = block_cgJGh_info;
           _sgAtC::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAtC::F64;
           if (R1 & 7 != 0) goto ugJGW; else goto cgJGi;
       ugJGW: // global
           call _cgJGh(R1) args: 0, res: 0, upd: 0;
       cgJGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJGc_info" {
     block_cgJGc_info:
         const _cgJGc;
         const 2;
         const 30;
 },
 _cgJGh() //  [R1]
         { []
         }
     {offset
       cgJGh: // global
           I64[Sp] = block_cgJGm_info;
           _sgAtE::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgAtE::F64;
           if (R1 & 7 != 0) goto ugJGX; else goto cgJGn;
       ugJGX: // global
           call _cgJGm(R1) args: 0, res: 0, upd: 0;
       cgJGn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJGh_info" {
     block_cgJGh_info:
         const _cgJGh;
         const 66;
         const 30;
 },
 _cgJGm() //  [R1]
         { []
         }
     {offset
       cgJGm: // global
           I64[Sp - 8] = block_cgJGr_info;
           _sgAtH::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAtH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJGY; else goto cgJGs;
       ugJGY: // global
           call _cgJGr(R1) args: 0, res: 0, upd: 0;
       cgJGs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJGm_info" {
     block_cgJGm_info:
         const _cgJGm;
         const 194;
         const 30;
 },
 _cgJGr() //  [R1]
         { []
         }
     {offset
       cgJGr: // global
           I64[Sp] = block_cgJGw_info;
           _sgAtJ::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAtJ::F64;
           if (R1 & 7 != 0) goto ugJGZ; else goto cgJGx;
       ugJGZ: // global
           call _cgJGw(R1) args: 0, res: 0, upd: 0;
       cgJGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJGr_info" {
     block_cgJGr_info:
         const _cgJGr;
         const 387;
         const 30;
 },
 _cgJGw() //  [R1]
         { []
         }
     {offset
       cgJGw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJGT; else goto cgJGS;
       cgJGT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJGS: // global
           _sgAtO::F64 = %MO_F_Sub_W64(F64[Sp + 24], F64[R1 + 7]);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _sgAtO::F64;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Sub_W64(F64[Sp + 16], F64[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJGw_info" {
     block_cgJGw_info:
         const _cgJGw;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.194372724 UTC

[section ""data" . Data.Complex.$w$c-_closure" {
     Data.Complex.$w$c-_closure:
         const Data.Complex.$w$c-_info;
 },
 Data.Complex.$w$c-_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgJHG: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgJHU; else goto cgJHV;
       cgJHU: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c-_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJHV: // global
           I64[Sp - 40] = block_cgJHE_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c-_info" {
     Data.Complex.$w$c-_info:
         const Data.Complex.$w$c-_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgJHE() //  [R1]
         { []
         }
     {offset
       cgJHE: // global
           I64[Sp] = block_cgJHJ_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJHE_info" {
     block_cgJHE_info:
         const _cgJHE;
         const 4;
         const 30;
 },
 _cgJHJ() //  [R1]
         { []
         }
     {offset
       cgJHJ: // global
           I64[Sp] = block_cgJHN_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJHJ_info" {
     block_cgJHJ_info:
         const _cgJHJ;
         const 4;
         const 30;
 },
 _cgJHN() //  [R1]
         { []
         }
     {offset
       cgJHN: // global
           _sgAtR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJHR_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sgAtR::P64;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJHN_info" {
     block_cgJHN_info:
         const _cgJHN;
         const 4;
         const 30;
 },
 _cgJHR() //  [R1]
         { []
         }
     {offset
       cgJHR: // global
           _sgAtX::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgJHT_info;
           R2 = _sgAtX::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJHR_info" {
     block_cgJHR_info:
         const _cgJHR;
         const 3;
         const 30;
 },
 _cgJHT() //  [R1]
         { []
         }
     {offset
       cgJHT: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJHT_info" {
     block_cgJHT_info:
         const _cgJHT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.207187835 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c-_closure" {
     Data.Complex.$fFloatingComplex_$c-_closure:
         const Data.Complex.$fFloatingComplex_$c-_info;
 },
 Data.Complex.$fFloatingComplex_$c-_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJIx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJII; else goto cgJIJ;
       cgJII: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c-_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJIJ: // global
           I64[Sp - 24] = block_cgJIu_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugJIQ; else goto cgJIv;
       ugJIQ: // global
           call _cgJIu(R1) args: 0, res: 0, upd: 0;
       cgJIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c-_info" {
     Data.Complex.$fFloatingComplex_$c-_info:
         const Data.Complex.$fFloatingComplex_$c-_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJIu() //  [R1]
         { []
         }
     {offset
       cgJIu: // global
           I64[Sp - 8] = block_cgJIA_info;
           _sgAu4::P64 = P64[R1 + 7];
           _sgAu5::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAu5::P64;
           P64[Sp + 16] = _sgAu4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJIP; else goto cgJIB;
       ugJIP: // global
           call _cgJIA(R1) args: 0, res: 0, upd: 0;
       cgJIB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJIu_info" {
     block_cgJIu_info:
         const _cgJIu;
         const 2;
         const 30;
 },
 _cgJIA() //  [R1]
         { []
         }
     {offset
       cgJIA: // global
           _sgAu4::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgJIF_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgAu4::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJIA_info" {
     block_cgJIA_info:
         const _cgJIA;
         const 3;
         const 30;
 },
 _cgJIF() //  [R1, R2]
         { []
         }
     {offset
       cgJIF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJIO; else goto cgJIN;
       cgJIO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJIN: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJIF_info" {
     block_cgJIF_info:
         const _cgJIF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.218079013 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c*_closure" {
     Data.Complex.$fFloatingComplex_$s$c*_closure:
         const Data.Complex.$fFloatingComplex_$s$c*_info;
 },
 Data.Complex.$fFloatingComplex_$s$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJJf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJK2; else goto cgJK3;
       cgJK2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJK3: // global
           I64[Sp - 16] = block_cgJJc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJKd; else goto cgJJd;
       ugJKd: // global
           call _cgJJc(R1) args: 0, res: 0, upd: 0;
       cgJJd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c*_info" {
     Data.Complex.$fFloatingComplex_$s$c*_info:
         const Data.Complex.$fFloatingComplex_$s$c*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJJc() //  [R1]
         { []
         }
     {offset
       cgJJc: // global
           I64[Sp - 8] = block_cgJJi_info;
           _sgAug::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAug::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJKc; else goto cgJJj;
       ugJKc: // global
           call _cgJJi(R1) args: 0, res: 0, upd: 0;
       cgJJj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJJc_info" {
     block_cgJJc_info:
         const _cgJJc;
         const 1;
         const 30;
 },
 _cgJJi() //  [R1]
         { []
         }
     {offset
       cgJJi: // global
           I64[Sp] = block_cgJJn_info;
           _sgAui::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAui::F64;
           if (R1 & 7 != 0) goto ugJKe; else goto cgJJo;
       ugJKe: // global
           call _cgJJn(R1) args: 0, res: 0, upd: 0;
       cgJJo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJJi_info" {
     block_cgJJi_info:
         const _cgJJi;
         const 2;
         const 30;
 },
 _cgJJn() //  [R1]
         { []
         }
     {offset
       cgJJn: // global
           I64[Sp] = block_cgJJs_info;
           _sgAuk::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgAuk::F64;
           if (R1 & 7 != 0) goto ugJKf; else goto cgJJt;
       ugJKf: // global
           call _cgJJs(R1) args: 0, res: 0, upd: 0;
       cgJJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJJn_info" {
     block_cgJJn_info:
         const _cgJJn;
         const 66;
         const 30;
 },
 _cgJJs() //  [R1]
         { []
         }
     {offset
       cgJJs: // global
           I64[Sp - 8] = block_cgJJx_info;
           _sgAun::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAun::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJKg; else goto cgJJy;
       ugJKg: // global
           call _cgJJx(R1) args: 0, res: 0, upd: 0;
       cgJJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJJs_info" {
     block_cgJJs_info:
         const _cgJJs;
         const 194;
         const 30;
 },
 _cgJJx() //  [R1]
         { []
         }
     {offset
       cgJJx: // global
           I64[Sp] = block_cgJJC_info;
           _sgAup::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAup::F64;
           if (R1 & 7 != 0) goto ugJKh; else goto cgJJD;
       ugJKh: // global
           call _cgJJC(R1) args: 0, res: 0, upd: 0;
       cgJJD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJJx_info" {
     block_cgJJx_info:
         const _cgJJx;
         const 387;
         const 30;
 },
 _cgJJC() //  [R1]
         { []
         }
     {offset
       cgJJC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJKb; else goto cgJKa;
       cgJKb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJKa: // global
           _sgAur::F64 = F64[R1 + 7];
           I64[Hp - 48] = GHC.Types.D#_con_info;
           _sgAui::F64 = F64[Sp + 16];
           _sgAuk::F64 = F64[Sp + 24];
           _sgAup::F64 = F64[Sp + 8];
           F64[Hp - 40] = %MO_F_Add_W64(%MO_F_Mul_W64(_sgAui::F64,
                                                      _sgAur::F64),
                                        %MO_F_Mul_W64(_sgAuk::F64, _sgAup::F64));
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Sub_W64(%MO_F_Mul_W64(_sgAui::F64,
                                                      _sgAup::F64),
                                        %MO_F_Mul_W64(_sgAuk::F64, _sgAur::F64));
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJJC_info" {
     block_cgJJC_info:
         const _cgJJC;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.235220626 UTC

[section ""data" . Data.Complex.$w$c*_closure" {
     Data.Complex.$w$c*_closure:
         const Data.Complex.$w$c*_info;
 },
 sat_sgAuJ_entry() //  [R1]
         { []
         }
     {offset
       cgJLi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJLj; else goto cgJLk;
       cgJLj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJLk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAuJ_info" {
     sat_sgAuJ_info:
         const sat_sgAuJ_entry;
         const 3;
         const 15;
 },
 sat_sgAuI_entry() //  [R1]
         { []
         }
     {offset
       cgJLp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJLq; else goto cgJLr;
       cgJLq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJLr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAuI_info" {
     sat_sgAuI_info:
         const sat_sgAuI_entry;
         const 3;
         const 15;
 },
 sat_sgAuM_entry() //  [R1]
         { []
         }
     {offset
       cgJLy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJLz; else goto cgJLA;
       cgJLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAuM_info" {
     sat_sgAuM_info:
         const sat_sgAuM_entry;
         const 3;
         const 15;
 },
 sat_sgAuL_entry() //  [R1]
         { []
         }
     {offset
       cgJLF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJLG; else goto cgJLH;
       cgJLG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJLH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAuL_info" {
     sat_sgAuL_info:
         const sat_sgAuL_entry;
         const 3;
         const 15;
 },
 Data.Complex.$w$c*_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgJLI: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgJLK; else goto cgJLL;
       cgJLK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c*_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJLL: // global
           I64[Sp - 40] = block_cgJL2_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c*_info" {
     Data.Complex.$w$c*_info:
         const Data.Complex.$w$c*_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgJL2() //  [R1]
         { []
         }
     {offset
       cgJL2: // global
           I64[Sp] = block_cgJL6_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJL2_info" {
     block_cgJL2_info:
         const _cgJL2;
         const 4;
         const 30;
 },
 _cgJL6() //  [R1]
         { []
         }
     {offset
       cgJL6: // global
           I64[Sp] = block_cgJLa_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJL6_info" {
     block_cgJL6_info:
         const _cgJL6;
         const 4;
         const 30;
 },
 _cgJLa() //  [R1]
         { []
         }
     {offset
       cgJLa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgJLQ; else goto cgJLP;
       cgJLQ: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJLP: // global
           I64[Hp - 72] = sat_sgAuJ_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sgAuI_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgJLs_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 32;
           P64[Sp - 16] = Hp - 72;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJLa_info" {
     block_cgJLa_info:
         const _cgJLa;
         const 4;
         const 30;
 },
 _cgJLs() //  [R1]
         { []
         }
     {offset
       cgJLs: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgJLT; else goto cgJLS;
       cgJLT: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJLS: // global
           I64[Hp - 72] = sat_sgAuM_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           _sgAuH::P64 = P64[Sp + 8];
           P64[Hp - 40] = _sgAuH::P64;
           I64[Hp - 32] = sat_sgAuL_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgAuH::P64;
           I64[Sp + 32] = block_cgJLJ_info;
           R2 = _sgAuH::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 32;
           P64[Sp + 24] = Hp - 72;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJLs_info" {
     block_cgJLs_info:
         const _cgJLs;
         const 5;
         const 30;
 },
 _cgJLJ() //  [R1]
         { []
         }
     {offset
       cgJLJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJLJ_info" {
     block_cgJLJ_info:
         const _cgJLJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.255311932 UTC

[section ""data" . Data.Complex.$fNumComplex_$c*_closure" {
     Data.Complex.$fNumComplex_$c*_closure:
         const Data.Complex.$fNumComplex_$c*_info;
 },
 Data.Complex.$fNumComplex_$c*_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJMY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJN9; else goto cgJNa;
       cgJN9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_$c*_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJNa: // global
           I64[Sp - 24] = block_cgJMV_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugJNh; else goto cgJMW;
       ugJNh: // global
           call _cgJMV(R1) args: 0, res: 0, upd: 0;
       cgJMW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_$c*_info" {
     Data.Complex.$fNumComplex_$c*_info:
         const Data.Complex.$fNumComplex_$c*_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJMV() //  [R1]
         { []
         }
     {offset
       cgJMV: // global
           I64[Sp - 8] = block_cgJN1_info;
           _sgAuS::P64 = P64[R1 + 7];
           _sgAuT::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgAuT::P64;
           P64[Sp + 16] = _sgAuS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJNg; else goto cgJN2;
       ugJNg: // global
           call _cgJN1(R1) args: 0, res: 0, upd: 0;
       cgJN2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJMV_info" {
     block_cgJMV_info:
         const _cgJMV;
         const 2;
         const 30;
 },
 _cgJN1() //  [R1]
         { []
         }
     {offset
       cgJN1: // global
           _sgAuS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgJN6_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgAuS::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJN1_info" {
     block_cgJN1_info:
         const _cgJN1;
         const 3;
         const 30;
 },
 _cgJN6() //  [R1, R2]
         { []
         }
     {offset
       cgJN6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJNf; else goto cgJNe;
       cgJNf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJNe: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJN6_info" {
     block_cgJN6_info:
         const _cgJN6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.265446994 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cnegate_closure" {
     Data.Complex.$fFloatingComplex_$s$cnegate_closure:
         const Data.Complex.$fFloatingComplex_$s$cnegate_info;
 },
 Data.Complex.$fFloatingComplex_$s$cnegate_entry() //  [R2]
         { []
         }
     {offset
       cgJNG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJO2; else goto cgJO3;
       cgJO2: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJO3: // global
           I64[Sp - 8] = block_cgJND_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJOa; else goto cgJNE;
       ugJOa: // global
           call _cgJND(R1) args: 0, res: 0, upd: 0;
       cgJNE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cnegate_info" {
     Data.Complex.$fFloatingComplex_$s$cnegate_info:
         const Data.Complex.$fFloatingComplex_$s$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgJND() //  [R1]
         { []
         }
     {offset
       cgJND: // global
           I64[Sp - 8] = block_cgJNJ_info;
           _sgAv3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAv3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJO9; else goto cgJNK;
       ugJO9: // global
           call _cgJNJ(R1) args: 0, res: 0, upd: 0;
       cgJNK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJND_info" {
     block_cgJND_info:
         const _cgJND;
         const 0;
         const 30;
 },
 _cgJNJ() //  [R1]
         { []
         }
     {offset
       cgJNJ: // global
           I64[Sp] = block_cgJNO_info;
           _sgAv5::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAv5::F64;
           if (R1 & 7 != 0) goto ugJOb; else goto cgJNP;
       ugJOb: // global
           call _cgJNO(R1) args: 0, res: 0, upd: 0;
       cgJNP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJNJ_info" {
     block_cgJNJ_info:
         const _cgJNJ;
         const 1;
         const 30;
 },
 _cgJNO() //  [R1]
         { []
         }
     {offset
       cgJNO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJO8; else goto cgJO7;
       cgJO8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJO7: // global
           _sgAva::F64 = %MO_F_Neg_W64(F64[R1 + 7]);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _sgAva::F64;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJNO_info" {
     block_cgJNO_info:
         const _cgJNO;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.276392362 UTC

[section ""data" . Data.Complex.$w$cnegate_closure" {
     Data.Complex.$w$cnegate_closure:
         const Data.Complex.$w$cnegate_info;
 },
 Data.Complex.$w$cnegate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJOH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgJOV; else goto cgJOW;
       cgJOV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cnegate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJOW: // global
           I64[Sp - 24] = block_cgJOF_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cnegate_info" {
     Data.Complex.$w$cnegate_info:
         const Data.Complex.$w$cnegate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgJOF() //  [R1]
         { []
         }
     {offset
       cgJOF: // global
           I64[Sp] = block_cgJOK_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJOF_info" {
     block_cgJOF_info:
         const _cgJOF;
         const 2;
         const 30;
 },
 _cgJOK() //  [R1]
         { []
         }
     {offset
       cgJOK: // global
           I64[Sp] = block_cgJOO_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJOK_info" {
     block_cgJOK_info:
         const _cgJOK;
         const 2;
         const 30;
 },
 _cgJOO() //  [R1]
         { []
         }
     {offset
       cgJOO: // global
           I64[Sp] = block_cgJOS_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJOO_info" {
     block_cgJOO_info:
         const _cgJOO;
         const 2;
         const 30;
 },
 _cgJOS() //  [R1]
         { []
         }
     {offset
       cgJOS: // global
           _sgAvh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJOU_info;
           R2 = _sgAvh::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJOS_info" {
     block_cgJOS_info:
         const _cgJOS;
         const 2;
         const 30;
 },
 _cgJOU() //  [R1]
         { []
         }
     {offset
       cgJOU: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJOU_info" {
     block_cgJOU_info:
         const _cgJOU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.290376614 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cnegate_closure" {
     Data.Complex.$fFloatingComplex_$cnegate_closure:
         const Data.Complex.$fFloatingComplex_$cnegate_info;
 },
 Data.Complex.$fFloatingComplex_$cnegate_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJPx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJPD; else goto cgJPE;
       cgJPD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cnegate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJPE: // global
           I64[Sp - 16] = block_cgJPu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJPJ; else goto cgJPv;
       ugJPJ: // global
           call _cgJPu(R1) args: 0, res: 0, upd: 0;
       cgJPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cnegate_info" {
     Data.Complex.$fFloatingComplex_$cnegate_info:
         const Data.Complex.$fFloatingComplex_$cnegate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgJPu() //  [R1]
         { []
         }
     {offset
       cgJPu: // global
           _sgAvk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJPA_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAvk::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cnegate_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJPu_info" {
     block_cgJPu_info:
         const _cgJPu;
         const 1;
         const 30;
 },
 _cgJPA() //  [R1, R2]
         { []
         }
     {offset
       cgJPA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJPI; else goto cgJPH;
       cgJPI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJPH: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJPA_info" {
     block_cgJPA_info:
         const _cgJPA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.300067699 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cabs_closure" {
     Data.Complex.$fFloatingComplex_$s$cabs_closure:
         const Data.Complex.$fFloatingComplex_$s$cabs_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cabs_entry() //  [R2]
         { []
         }
     {offset
       cgJQ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJQn; else goto cgJQo;
       cgJQn: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cabs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJQo: // global
           I64[Sp - 8] = block_cgJQ1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJQw; else goto cgJQ2;
       ugJQw: // global
           call _cgJQ1(R1) args: 0, res: 0, upd: 0;
       cgJQ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cabs_info" {
     Data.Complex.$fFloatingComplex_$s$cabs_info:
         const Data.Complex.$fFloatingComplex_$s$cabs_entry;
         const 0;
         const 2251804108652558;
         const 4294967301;
         const SgBbV_srt+344;
 },
 _cgJQ1() //  [R1]
         { []
         }
     {offset
       cgJQ1: // global
           I64[Sp - 8] = block_cgJQ7_info;
           _sgAvv::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAvv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJQv; else goto cgJQ8;
       ugJQv: // global
           call _cgJQ7(R1) args: 0, res: 0, upd: 0;
       cgJQ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJQ1_info" {
     block_cgJQ1_info:
         const _cgJQ1;
         const 0;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJQ7() //  [R1]
         { []
         }
     {offset
       cgJQ7: // global
           I64[Sp] = block_cgJQc_info;
           _sgAvx::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAvx::F64;
           if (R1 & 7 != 0) goto ugJQx; else goto cgJQd;
       ugJQx: // global
           call _cgJQc(R1) args: 0, res: 0, upd: 0;
       cgJQd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJQ7_info" {
     block_cgJQ7_info:
         const _cgJQ7;
         const 1;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJQc() //  [R1]
         { []
         }
     {offset
       cgJQc: // global
           _sgAvx::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgJQh_info;
           D2 = F64[R1 + 7];
           D1 = _sgAvx::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJQc_info" {
     block_cgJQc_info:
         const _cgJQc;
         const 65;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJQh() //  [D1]
         { []
         }
     {offset
       cgJQh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgJQu; else goto cgJQt;
       cgJQu: // global
           HpAlloc = 40;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgJQt: // global
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = D1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJQh_info" {
     block_cgJQh_info:
         const _cgJQh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.312376375 UTC

[section ""data" . Data.Complex.$w$cabs_closure" {
     Data.Complex.$w$cabs_closure:
         const Data.Complex.$w$cabs_info;
         const 0;
 },
 Data.Complex.$w$cabs_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJR2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJRe; else goto cgJRf;
       cgJRe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cabs_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJRf: // global
           I64[Sp - 16] = block_cgJQY_info;
           R4 = R4;
           R3 = R3;
           _sgAvC::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sgAvC::P64;
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cabs_info" {
     Data.Complex.$w$cabs_info:
         const Data.Complex.$w$cabs_entry;
         const 0;
         const 144115192370823182;
         const 12884901911;
         const SgBbV_srt+304;
 },
 _cgJQY() //  [R1]
         { []
         }
     {offset
       cgJQY: // global
           I64[Sp] = block_cgJR0_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJQY_info" {
     block_cgJQY_info:
         const _cgJQY;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJR0() //  [R1]
         { []
         }
     {offset
       cgJR0: // global
           I64[Sp] = block_cgJR5_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJR0_info" {
     block_cgJR0_info:
         const _cgJR0;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJR5() //  [R1]
         { []
         }
     {offset
       cgJR5: // global
           I64[Sp] = block_cgJR9_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJR5_info" {
     block_cgJR5_info:
         const _cgJR5;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJR9() //  [R1]
         { []
         }
     {offset
       cgJR9: // global
           I64[Sp] = block_cgJRd_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJR9_info" {
     block_cgJR9_info:
         const _cgJR9;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJRd() //  [R1]
         { []
         }
     {offset
       cgJRd: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJRd_info" {
     block_cgJRd_info:
         const _cgJRd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.324678317 UTC

[section ""data" . Data.Complex.$fNumComplex_$cabs_closure" {
     Data.Complex.$fNumComplex_$cabs_closure:
         const Data.Complex.$fNumComplex_$cabs_info;
         const 0;
 },
 Data.Complex.$fNumComplex_$cabs_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJRO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJRU; else goto cgJRV;
       cgJRU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_$cabs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJRV: // global
           I64[Sp - 16] = block_cgJRL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugJS0; else goto cgJRM;
       ugJS0: // global
           call _cgJRL(R1) args: 0, res: 0, upd: 0;
       cgJRM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_$cabs_info" {
     Data.Complex.$fNumComplex_$cabs_info:
         const Data.Complex.$fNumComplex_$cabs_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+504;
 },
 _cgJRL() //  [R1]
         { []
         }
     {offset
       cgJRL: // global
           _sgAvK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgJRR_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAvK::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cabs_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJRL_info" {
     block_cgJRL_info:
         const _cgJRL;
         const 1;
         const 4294967326;
         const SgBbV_srt+504;
 },
 _cgJRR() //  [R1, R2]
         { []
         }
     {offset
       cgJRR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJRZ; else goto cgJRY;
       cgJRZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJRY: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJRR_info" {
     block_cgJRR_info:
         const _cgJRR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.332245986 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromInteger_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger_info;
 },
 Data.Complex.$fFloatingComplex_$s$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cgJSk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgJSp; else goto cgJSq;
       cgJSp: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJSq: // global
           I64[Sp - 8] = block_cgJSi_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromInteger_info" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger_info:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgJSi() //  [D1]
         { []
         }
     {offset
       cgJSi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgJSt; else goto cgJSs;
       cgJSt: // global
           HpAlloc = 40;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgJSs: // global
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = D1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJSi_info" {
     block_cgJSi_info:
         const _cgJSi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.338867703 UTC

[section ""data" . Data.Complex.$w$cfromInteger_closure" {
     Data.Complex.$w$cfromInteger_closure:
         const Data.Complex.$w$cfromInteger_info;
         const 0;
 },
 Data.Complex.$w$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJSK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJSY; else goto cgJSZ;
       cgJSY: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJSZ: // global
           I64[Sp - 16] = block_cgJSI_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cfromInteger_info" {
     Data.Complex.$w$cfromInteger_info:
         const Data.Complex.$w$cfromInteger_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const SgBbV_srt+304;
 },
 _cgJSI() //  [R1]
         { []
         }
     {offset
       cgJSI: // global
           I64[Sp] = block_cgJSN_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJSI_info" {
     block_cgJSI_info:
         const _cgJSI;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJSN() //  [R1]
         { []
         }
     {offset
       cgJSN: // global
           I64[Sp] = block_cgJSR_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJSN_info" {
     block_cgJSN_info:
         const _cgJSN;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJSR() //  [R1]
         { []
         }
     {offset
       cgJSR: // global
           I64[Sp] = block_cgJSV_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJSR_info" {
     block_cgJSR_info:
         const _cgJSR;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJSV() //  [R1]
         { []
         }
     {offset
       cgJSV: // global
           I64[Sp] = block_cgJSX_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJSV_info" {
     block_cgJSV_info:
         const _cgJSV;
         const 1;
         const 4294967326;
         const SgBbV_srt+304;
 },
 _cgJSX() //  [R1]
         { []
         }
     {offset
       cgJSX: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJSX_info" {
     block_cgJSX_info:
         const _cgJSX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.350473798 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cfromInteger_closure" {
     Data.Complex.$fFloatingComplex_$cfromInteger_closure:
         const Data.Complex.$fFloatingComplex_$cfromInteger_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       cgJTz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgJTA; else goto cgJTB;
       cgJTA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJTB: // global
           I64[Sp - 8] = block_cgJTw_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cfromInteger_info" {
     Data.Complex.$fFloatingComplex_$cfromInteger_info:
         const Data.Complex.$fFloatingComplex_$cfromInteger_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+520;
 },
 _cgJTw() //  [R1, R2]
         { []
         }
     {offset
       cgJTw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJTE; else goto cgJTD;
       cgJTE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgJTD: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJTw_info" {
     block_cgJTw_info:
         const _cgJTw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.355622613 UTC

[section ""data" . Data.Complex.$fFloatingComplex4_closure" {
     Data.Complex.$fFloatingComplex4_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.361287911 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csignum_closure" {
     Data.Complex.$fFloatingComplex_$s$csignum_closure:
         const Data.Complex.$fFloatingComplex_$s$csignum_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csignum_entry() //  [R2]
         { []
         }
     {offset
       cgJTW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgJU5; else goto cgJU6;
       cgJU5: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJU6: // global
           I64[Sp - 8] = block_cgJTT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJUY; else goto cgJTU;
       ugJUY: // global
           call _cgJTT(R1) args: 0, res: 0, upd: 0;
       cgJTU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csignum_info" {
     Data.Complex.$fFloatingComplex_$s$csignum_info:
         const Data.Complex.$fFloatingComplex_$s$csignum_entry;
         const 0;
         const 72057598332895246;
         const 4294967301;
         const SgBbV_srt+344;
 },
 _cgJTT() //  [R1]
         { []
         }
     {offset
       cgJTT: // global
           I64[Sp - 8] = block_cgJTZ_info;
           _sgAwa::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAwa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJUX; else goto cgJU0;
       ugJUX: // global
           call _cgJTZ(R1) args: 0, res: 0, upd: 0;
       cgJU0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJTT_info" {
     block_cgJTT_info:
         const _cgJTT;
         const 0;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJTZ() //  [R1]
         { []
         }
     {offset
       cgJTZ: // global
           I64[Sp] = block_cgJU4_info;
           _sgAwc::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAwc::F64;
           if (R1 & 7 != 0) goto ugJUZ; else goto cgJU9;
       ugJUZ: // global
           call _cgJU4(R1) args: 0, res: 0, upd: 0;
       cgJU9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJTZ_info" {
     block_cgJTZ_info:
         const _cgJTZ;
         const 1;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJU4() //  [R1]
         { []
         }
     {offset
       cgJU4: // global
           _sgAwc::F64 = F64[Sp + 8];
           _sgAwe::F64 = F64[R1 + 7];
           if (%MO_F_Eq_W64(_sgAwc::F64,
                            0.0 :: W64)) goto cgJUW; else goto cgJUv;
       cgJUW: // global
           if (%MO_F_Eq_W64(_sgAwe::F64,
                            0.0 :: W64)) goto cgJUV; else goto cgJUR;
       cgJUV: // global
           R1 = Data.Complex.$fFloatingComplex4_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgJUR: // global
           I64[Sp - 8] = block_cgJUD_info;
           D2 = _sgAwe::F64;
           D1 = _sgAwc::F64;
           F64[Sp] = _sgAwe::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
       cgJUv: // global
           I64[Sp - 8] = block_cgJUh_info;
           D2 = _sgAwe::F64;
           D1 = _sgAwc::F64;
           F64[Sp] = _sgAwe::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJU4_info" {
     block_cgJU4_info:
         const _cgJU4;
         const 65;
         const 4294967326;
         const SgBbV_srt+344;
 },
 _cgJUD() //  [D1]
         { []
         }
     {offset
       cgJUD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJUU; else goto cgJUT;
       cgJUU: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgJUT: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Quot_W64(F64[Sp + 8], D1);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Quot_W64(F64[Sp + 16], D1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJUD_info" {
     block_cgJUD_info:
         const _cgJUD;
         const 194;
         const 30;
 },
 _cgJUh() //  [D1]
         { []
         }
     {offset
       cgJUh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJUy; else goto cgJUx;
       cgJUy: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgJUx: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Quot_W64(F64[Sp + 8], D1);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Quot_W64(F64[Sp + 16], D1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJUh_info" {
     block_cgJUh_info:
         const _cgJUh;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.37330783 UTC

[section ""data" . Data.Complex.$fFloatingComplex12_closure" {
     Data.Complex.$fFloatingComplex12_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.378090511 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csignum1_closure" {
     Data.Complex.$fFloatingComplex_$s$csignum1_closure:
         const Data.Complex.$fFloatingComplex_$s$csignum1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csignum1_entry() //  [R2]
         { []
         }
     {offset
       cgJVO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgJVX; else goto cgJVY;
       cgJVX: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csignum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgJVY: // global
           I64[Sp - 8] = block_cgJVL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJWQ; else goto cgJVM;
       ugJWQ: // global
           call _cgJVL(R1) args: 0, res: 0, upd: 0;
       cgJVM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csignum1_info" {
     Data.Complex.$fFloatingComplex_$s$csignum1_info:
         const Data.Complex.$fFloatingComplex_$s$csignum1_entry;
         const 0;
         const 36028801313931278;
         const 4294967301;
         const SgBbV_srt+360;
 },
 _cgJVL() //  [R1]
         { []
         }
     {offset
       cgJVL: // global
           I64[Sp - 8] = block_cgJVR_info;
           _sgAwu::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAwu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugJWP; else goto cgJVS;
       ugJWP: // global
           call _cgJVR(R1) args: 0, res: 0, upd: 0;
       cgJVS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJVL_info" {
     block_cgJVL_info:
         const _cgJVL;
         const 0;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJVR() //  [R1]
         { []
         }
     {offset
       cgJVR: // global
           I64[Sp] = block_cgJVW_info;
           _sgAww::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAww::F32;
           if (R1 & 7 != 0) goto ugJWR; else goto cgJW1;
       ugJWR: // global
           call _cgJVW(R1) args: 0, res: 0, upd: 0;
       cgJW1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJVR_info" {
     block_cgJVR_info:
         const _cgJVR;
         const 1;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJVW() //  [R1]
         { []
         }
     {offset
       cgJVW: // global
           _sgAww::F32 = F32[Sp + 8];
           _sgAwy::F32 = F32[R1 + 7];
           if (%MO_F_Eq_W32(_sgAww::F32,
                            0.0 :: W32)) goto cgJWO; else goto cgJWn;
       cgJWO: // global
           if (%MO_F_Eq_W32(_sgAwy::F32,
                            0.0 :: W32)) goto cgJWN; else goto cgJWJ;
       cgJWN: // global
           R1 = Data.Complex.$fFloatingComplex12_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgJWJ: // global
           I64[Sp - 8] = block_cgJWv_info;
           F2 = _sgAwy::F32;
           F1 = _sgAww::F32;
           F32[Sp] = _sgAwy::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
       cgJWn: // global
           I64[Sp - 8] = block_cgJW9_info;
           F2 = _sgAwy::F32;
           F1 = _sgAww::F32;
           F32[Sp] = _sgAwy::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJVW_info" {
     block_cgJVW_info:
         const _cgJVW;
         const 65;
         const 4294967326;
         const SgBbV_srt+360;
 },
 _cgJWv() //  [F1]
         { []
         }
     {offset
       cgJWv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJWM; else goto cgJWL;
       cgJWM: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgJWL: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Quot_W32(F32[Sp + 8], F1);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Quot_W32(F32[Sp + 16], F1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJWv_info" {
     block_cgJWv_info:
         const _cgJWv;
         const 194;
         const 30;
 },
 _cgJW9() //  [F1]
         { []
         }
     {offset
       cgJW9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgJWq; else goto cgJWp;
       cgJWq: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgJWp: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Quot_W32(F32[Sp + 8], F1);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Quot_W32(F32[Sp + 16], F1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJW9_info" {
     block_cgJW9_info:
         const _cgJW9;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.396107032 UTC

[section ""data" . Data.Complex.$w$csignum_closure" {
     Data.Complex.$w$csignum_closure:
         const Data.Complex.$w$csignum_info;
         const 0;
 },
 $dNum_sgAwQ_entry() //  [R1]
         { []
         }
     {offset
       cgJXO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJXP; else goto cgJXQ;
       cgJXP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJXQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgAwQ_info" {
     $dNum_sgAwQ_info:
         const $dNum_sgAwQ_entry;
         const 1;
         const 16;
 },
 sat_sgAwZ_entry() //  [R1]
         { []
         }
     {offset
       cgJY3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJY4; else goto cgJY5;
       cgJY4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJY5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAwZ_info" {
     sat_sgAwZ_info:
         const sat_sgAwZ_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+304;
 },
 r_sgAwW_entry() //  [R1]
         { []
         }
     {offset
       cgJYj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgJYk; else goto cgJYl;
       cgJYk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJYl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . r_sgAwW_info" {
     r_sgAwW_info:
         const r_sgAwW_entry;
         const 3;
         const 15;
 },
 sat_sgAx1_entry() //  [R1]
         { []
         }
     {offset
       cgJYv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgJYw; else goto cgJYx;
       cgJYw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgJYx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAx1_info" {
     sat_sgAx1_info:
         const sat_sgAx1_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+304;
 },
 Data.Complex.$w$csignum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgJYy: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgJYz; else goto cgJYA;
       cgJYz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$csignum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgJYA: // global
           I64[Sp - 32] = block_cgJXC_info;
           _sgAwL::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAwL::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csignum_info" {
     Data.Complex.$w$csignum_info:
         const Data.Complex.$w$csignum_entry;
         const 0;
         const 9799832793453166606;
         const 12884901911;
         const SgBbV_srt+304;
 },
 _cgJXC() //  [R1]
         { []
         }
     {offset
       cgJXC: // global
           I64[Sp - 8] = block_cgJXG_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJXC_info" {
     block_cgJXC_info:
         const _cgJXC;
         const 3;
         const 576460756598390814;
         const SgBbV_srt+304;
 },
 _cgJXG() //  [R1]
         { []
         }
     {offset
       cgJXG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJYE; else goto cgJYD;
       cgJYE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJYD: // global
           I64[Hp - 16] = $dNum_sgAwQ_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgJXR_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJXG_info" {
     block_cgJXG_info:
         const _cgJXG;
         const 4;
         const 576460756598390814;
         const SgBbV_srt+304;
 },
 _cgJXR() //  [R1]
         { []
         }
     {offset
       cgJXR: // global
           I64[Sp] = block_cgJXV_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJXR_info" {
     block_cgJXR_info:
         const _cgJXR;
         const 5;
         const 576460756598390814;
         const SgBbV_srt+304;
 },
 _cgJXV() //  [R1]
         { []
         }
     {offset
       cgJXV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJYI; else goto cgJYH;
       cgJYI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJYH: // global
           I64[Hp - 16] = sat_sgAwZ_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgJYm_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJXV_info" {
     block_cgJXV_info:
         const _cgJXV;
         const 5;
         const 576460756598390814;
         const SgBbV_srt+304;
 },
 _cgJYm() //  [R1]
         { []
         }
     {offset
       cgJYm: // global
           if (R1 & 7 == 1) goto ugJZe; else goto cgJYY;
       ugJZe: // global
           Sp = Sp + 24;
           call _sgAwT() args: 0, res: 0, upd: 0;
       cgJYY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgJZ1; else goto cgJZ0;
       cgJZ1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJZ0: // global
           I64[Hp - 16] = sat_sgAx1_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cgJYX_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJYm_info" {
     block_cgJYm_info:
         const _cgJYm;
         const 6;
         const 576460756598390814;
         const SgBbV_srt+304;
 },
 _cgJYX() //  [R1]
         { []
         }
     {offset
       cgJYX: // global
           if (R1 & 7 == 1) goto ugJZf; else goto cgJZb;
       ugJZf: // global
           Sp = Sp + 8;
           call _sgAwT() args: 0, res: 0, upd: 0;
       cgJZb: // global
           R3 = Data.Complex.$fFloatingComplex17_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJYX_info" {
     block_cgJYX_info:
         const _cgJYX;
         const 4;
         const 576460756598390814;
         const SgBbV_srt+304;
 },
 _sgAwT() //  []
         { []
         }
     {offset
       sgAwT: // global
           _sgAwO::P64 = P64[Sp];
           I64[Sp] = block_cgJYb_info;
           R2 = _sgAwO::P64;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cgJYb() //  [R1]
         { []
         }
     {offset
       cgJYb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgJYP; else goto cgJYO;
       cgJYP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgJYO: // global
           I64[Hp - 32] = r_sgAwW_info;
           P64[Hp - 16] = P64[Sp + 8];
           _sgAwM::P64 = P64[Sp + 16];
           P64[Hp - 8] = _sgAwM::P64;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cgJYJ_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgAwM::P64;
           _cgJYf::P64 = Hp - 32;
           P64[Sp - 8] = _cgJYf::P64;
           P64[Sp + 8] = R1;
           P64[Sp + 16] = _cgJYf::P64;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJYb_info" {
     block_cgJYb_info:
         const _cgJYb;
         const 3;
         const 30;
 },
 _cgJYJ() //  [R1]
         { []
         }
     {offset
       cgJYJ: // global
           _cgJYf::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgJYL_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 8] = _cgJYf::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJYJ_info" {
     block_cgJYJ_info:
         const _cgJYJ;
         const 3;
         const 30;
 },
 _cgJYL() //  [R1]
         { []
         }
     {offset
       cgJYL: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgJYL_info" {
     block_cgJYL_info:
         const _cgJYL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.423396778 UTC

[section ""data" . Data.Complex.$fNumComplex_$csignum_closure" {
     Data.Complex.$fNumComplex_$csignum_closure:
         const Data.Complex.$fNumComplex_$csignum_info;
         const 0;
 },
 Data.Complex.$fNumComplex_$csignum_entry() //  [R2, R3]
         { []
         }
     {offset
       cgK0s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgK0y; else goto cgK0z;
       cgK0y: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_$csignum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgK0z: // global
           I64[Sp - 16] = block_cgK0p_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugK0E; else goto cgK0q;
       ugK0E: // global
           call _cgK0p(R1) args: 0, res: 0, upd: 0;
       cgK0q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_$csignum_info" {
     Data.Complex.$fNumComplex_$csignum_info:
         const Data.Complex.$fNumComplex_$csignum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+552;
 },
 _cgK0p() //  [R1]
         { []
         }
     {offset
       cgK0p: // global
           _sgAx3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgK0v_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAx3::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csignum_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK0p_info" {
     block_cgK0p_info:
         const _cgK0p;
         const 1;
         const 4294967326;
         const SgBbV_srt+552;
 },
 _cgK0v() //  [R1, R2]
         { []
         }
     {offset
       cgK0v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgK0D; else goto cgK0C;
       cgK0D: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgK0C: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK0v_info" {
     block_cgK0v_info:
         const _cgK0v;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.430268103 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fNumComplex_closure" {
     Data.Complex.$fFloatingComplex_$s$fNumComplex_closure:
         const GHC.Num.C:Num_con_info;
         const Data.Complex.$fFloatingComplex_$s$c+_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c-_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c*_closure+2;
         const Data.Complex.$fFloatingComplex_$s$cnegate_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cabs_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csignum_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.432253985 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fNumComplex1_closure" {
     Data.Complex.$fFloatingComplex_$s$fNumComplex1_closure:
         const GHC.Num.C:Num_con_info;
         const Data.Complex.$fFloatingComplex_$s$c+1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c-1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c*1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$cnegate1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cabs1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csignum1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.436819075 UTC

[section ""data" . Data.Complex.$fNumComplex_closure" {
     Data.Complex.$fNumComplex_closure:
         const Data.Complex.$fNumComplex_info;
         const 0;
 },
 sat_sgAxi_entry() //  [R1, R2]
         { []
         }
     {offset
       cgK13: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cfromInteger_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAxi_info" {
     sat_sgAxi_info:
         const sat_sgAxi_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+528;
 },
 sat_sgAxh_entry() //  [R1, R2]
         { []
         }
     {offset
       cgK1b: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fNumComplex_$csignum_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAxh_info" {
     sat_sgAxh_info:
         const sat_sgAxh_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+560;
 },
 sat_sgAxg_entry() //  [R1, R2]
         { []
         }
     {offset
       cgK1j: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fNumComplex_$cabs_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAxg_info" {
     sat_sgAxg_info:
         const sat_sgAxg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+512;
 },
 sat_sgAxf_entry() //  [R1, R2]
         { []
         }
     {offset
       cgK1r: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cnegate_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAxf_info" {
     sat_sgAxf_info:
         const sat_sgAxf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAxe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgK1z: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fNumComplex_$c*_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAxe_info" {
     sat_sgAxe_info:
         const sat_sgAxe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgAxd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgK1H: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c-_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAxd_info" {
     sat_sgAxd_info:
         const sat_sgAxd_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgAxc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgK1P: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c+_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAxc_info" {
     sat_sgAxc_info:
         const sat_sgAxc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Complex.$fNumComplex_entry() //  [R2]
         { []
         }
     {offset
       cgK1T: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cgK1X; else goto cgK1W;
       cgK1X: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgK1W: // global
           I64[Hp - 168] = sat_sgAxi_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sgAxh_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sgAxg_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sgAxf_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sgAxe_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgAxd_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgAxc_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_info" {
     Data.Complex.$fNumComplex_info:
         const Data.Complex.$fNumComplex_entry;
         const 0;
         const 846108557326;
         const 4294967301;
         const SgBbV_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.454710686 UTC

[section ""data" . Data.Complex.$w$s$csqrt1_closure" {
     Data.Complex.$w$s$csqrt1_closure:
         const Data.Complex.$w$s$csqrt1_info;
         const 0;
 },
 Data.Complex.$w$s$csqrt1_slow() //  [R1]
         { []
         }
     {offset
       cgK2w: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$csqrt1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgK2H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgK2I; else goto cgK2J;
       cgK2I: // global
           R1 = Data.Complex.$w$s$csqrt1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgK2J: // global
           _sgAxk::F32 = F2;
           _sgAxj::F32 = F1;
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto cgK2G; else goto sgAxl;
       cgK2G: // global
           if (%MO_F_Eq_W32(_sgAxk::F32,
                            0.0 :: W32)) goto cgK4y; else goto sgAxl;
       cgK4y: // global
           R2 = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Data.Complex.$fFloatingComplex9_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       sgAxl: // global
           if (%MO_F_Lt_W32(_sgAxj::F32,
                            0.0 :: W32)) goto cgK3L; else goto cgK2T;
       cgK3L: // global
           I64[Sp - 24] = block_cgK3K_info;
           F2 = _sgAxk::F32;
           F1 = _sgAxj::F32;
           F32[Sp - 16] = _sgAxj::F32;
           F32[Sp - 8] = _sgAxk::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
       cgK2T: // global
           I64[Sp - 24] = block_cgK2R_info;
           F2 = _sgAxk::F32;
           F1 = _sgAxj::F32;
           F32[Sp - 16] = _sgAxj::F32;
           F32[Sp - 8] = _sgAxk::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$csqrt1_info" {
     Data.Complex.$w$s$csqrt1_info:
         const Data.Complex.$w$s$csqrt1_entry;
         const 0;
         const 576460756598390798;
         const 8589934592;
         const SgBbV_srt+360;
         const 194;
         const Data.Complex.$w$s$csqrt1_slow;
 },
 _cgK3K() //  [F1]
         { []
         }
     {offset
       cgK3K: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgK3R; else goto cgK3Q;
       cgK3R: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgK3Q: // global
           _sgAxk::F32 = F32[Sp + 16];
           _sgAxF::F32 = F1;
           (_cgK3S::F32) = call MO_F32_Fabs(F32[Sp + 8]);
           (_cgK41::F32) = call MO_F32_Sqrt(%MO_F_Quot_W32(%MO_F_Add_W32(_sgAxF::F32,
                                                                         _cgK3S::F32),
                                                           2.0 :: W32));
           (_cgK48::F32) = call MO_F32_Fabs(_sgAxk::F32);
           _sgAxM::F32 = %MO_F_Quot_W32(_cgK48::F32,
                                        %MO_F_Add_W32(_cgK41::F32, _cgK41::F32));
           if (%MO_F_Lt_W32(_sgAxk::F32,
                            0.0 :: W32)) goto cgK4r; else goto cgK4k;
       cgK4r: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(_cgK41::F32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _sgAxM::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgK4k: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = _cgK41::F32;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _sgAxM::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK3K_info" {
     block_cgK3K_info:
         const _cgK3K;
         const 194;
         const 30;
 },
 _cgK2R() //  [F1]
         { []
         }
     {offset
       cgK2R: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgK2Z; else goto cgK2Y;
       cgK2Z: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgK2Y: // global
           _sgAxk::F32 = F32[Sp + 16];
           _sgAxo::F32 = F1;
           (_cgK30::F32) = call MO_F32_Fabs(F32[Sp + 8]);
           (_cgK39::F32) = call MO_F32_Sqrt(%MO_F_Quot_W32(%MO_F_Add_W32(_sgAxo::F32,
                                                                         _cgK30::F32),
                                                           2.0 :: W32));
           if (%MO_F_Lt_W32(_sgAxk::F32,
                            0.0 :: W32)) goto cgK3I; else goto cgK3s;
       cgK3I: // global
           (_cgK3x::F32) = call MO_F32_Fabs(_sgAxk::F32);
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(%MO_F_Quot_W32(_cgK3x::F32,
                                                       %MO_F_Add_W32(_cgK39::F32, _cgK39::F32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _cgK39::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgK3s: // global
           (_cgK3j::F32) = call MO_F32_Fabs(_sgAxk::F32);
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Quot_W32(_cgK3j::F32,
                                         %MO_F_Add_W32(_cgK39::F32, _cgK39::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _cgK39::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK2R_info" {
     block_cgK2R_info:
         const _cgK2R;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.466507533 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csqrt1_closure" {
     Data.Complex.$fFloatingComplex_$s$csqrt1_closure:
         const Data.Complex.$fFloatingComplex_$s$csqrt1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csqrt1_entry() //  [R2]
         { []
         }
     {offset
       cgK5G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgK5W; else goto cgK5X;
       cgK5W: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csqrt1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgK5X: // global
           I64[Sp - 8] = block_cgK5D_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugK65; else goto cgK5E;
       ugK65: // global
           call _cgK5D(R1) args: 0, res: 0, upd: 0;
       cgK5E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csqrt1_info" {
     Data.Complex.$fFloatingComplex_$s$csqrt1_info:
         const Data.Complex.$fFloatingComplex_$s$csqrt1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+576;
 },
 _cgK5D() //  [R1]
         { []
         }
     {offset
       cgK5D: // global
           I64[Sp - 8] = block_cgK5J_info;
           _sgAxY::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAxY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugK64; else goto cgK5K;
       ugK64: // global
           call _cgK5J(R1) args: 0, res: 0, upd: 0;
       cgK5K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK5D_info" {
     block_cgK5D_info:
         const _cgK5D;
         const 0;
         const 4294967326;
         const SgBbV_srt+576;
 },
 _cgK5J() //  [R1]
         { []
         }
     {offset
       cgK5J: // global
           I64[Sp] = block_cgK5O_info;
           _sgAy0::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAy0::F32;
           if (R1 & 7 != 0) goto ugK66; else goto cgK5P;
       ugK66: // global
           call _cgK5O(R1) args: 0, res: 0, upd: 0;
       cgK5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK5J_info" {
     block_cgK5J_info:
         const _cgK5J;
         const 1;
         const 4294967326;
         const SgBbV_srt+576;
 },
 _cgK5O() //  [R1]
         { []
         }
     {offset
       cgK5O: // global
           _sgAy0::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgK5T_info;
           F2 = F32[R1 + 7];
           F1 = _sgAy0::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK5O_info" {
     block_cgK5O_info:
         const _cgK5O;
         const 65;
         const 4294967326;
         const SgBbV_srt+576;
 },
 _cgK5T() //  [R1, R2]
         { []
         }
     {offset
       cgK5T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgK63; else goto cgK62;
       cgK63: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgK62: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK5T_info" {
     block_cgK5T_info:
         const _cgK5T;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.479592329 UTC

[section ""data" . Data.Complex.$w$s$csqrt_closure" {
     Data.Complex.$w$s$csqrt_closure:
         const Data.Complex.$w$s$csqrt_info;
         const 0;
 },
 Data.Complex.$w$s$csqrt_slow() //  [R1]
         { []
         }
     {offset
       cgK6t: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$csqrt_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$csqrt_entry() //  [D1, D2]
         { []
         }
     {offset
       cgK6E: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgK6F; else goto cgK6G;
       cgK6F: // global
           R1 = Data.Complex.$w$s$csqrt_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgK6G: // global
           _sgAy7::F64 = D2;
           _sgAy6::F64 = D1;
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto cgK6D; else goto sgAy8;
       cgK6D: // global
           if (%MO_F_Eq_W64(_sgAy7::F64,
                            0.0 :: W64)) goto cgK8v; else goto sgAy8;
       cgK8v: // global
           R2 = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Data.Complex.$fFloatingComplex1_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       sgAy8: // global
           if (%MO_F_Lt_W64(_sgAy6::F64,
                            0.0 :: W64)) goto cgK7I; else goto cgK6Q;
       cgK7I: // global
           I64[Sp - 24] = block_cgK7H_info;
           D2 = _sgAy7::F64;
           D1 = _sgAy6::F64;
           F64[Sp - 16] = _sgAy6::F64;
           F64[Sp - 8] = _sgAy7::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
       cgK6Q: // global
           I64[Sp - 24] = block_cgK6O_info;
           D2 = _sgAy7::F64;
           D1 = _sgAy6::F64;
           F64[Sp - 16] = _sgAy6::F64;
           F64[Sp - 8] = _sgAy7::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$csqrt_info" {
     Data.Complex.$w$s$csqrt_info:
         const Data.Complex.$w$s$csqrt_entry;
         const 0;
         const 9223372041149743118;
         const 8589934592;
         const SgBbV_srt+344;
         const 194;
         const Data.Complex.$w$s$csqrt_slow;
 },
 _cgK7H() //  [D1]
         { []
         }
     {offset
       cgK7H: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgK7O; else goto cgK7N;
       cgK7O: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgK7N: // global
           _sgAy7::F64 = F64[Sp + 16];
           _sgAys::F64 = D1;
           (_cgK7P::F64) = call MO_F64_Fabs(F64[Sp + 8]);
           (_cgK7Y::F64) = call MO_F64_Sqrt(%MO_F_Quot_W64(%MO_F_Add_W64(_sgAys::F64,
                                                                         _cgK7P::F64),
                                                           2.0 :: W64));
           (_cgK85::F64) = call MO_F64_Fabs(_sgAy7::F64);
           _sgAyz::F64 = %MO_F_Quot_W64(_cgK85::F64,
                                        %MO_F_Add_W64(_cgK7Y::F64, _cgK7Y::F64));
           if (%MO_F_Lt_W64(_sgAy7::F64,
                            0.0 :: W64)) goto cgK8o; else goto cgK8h;
       cgK8o: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(_cgK7Y::F64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _sgAyz::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgK8h: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = _cgK7Y::F64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _sgAyz::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK7H_info" {
     block_cgK7H_info:
         const _cgK7H;
         const 194;
         const 30;
 },
 _cgK6O() //  [D1]
         { []
         }
     {offset
       cgK6O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgK6W; else goto cgK6V;
       cgK6W: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgK6V: // global
           _sgAy7::F64 = F64[Sp + 16];
           _sgAyb::F64 = D1;
           (_cgK6X::F64) = call MO_F64_Fabs(F64[Sp + 8]);
           (_cgK76::F64) = call MO_F64_Sqrt(%MO_F_Quot_W64(%MO_F_Add_W64(_sgAyb::F64,
                                                                         _cgK6X::F64),
                                                           2.0 :: W64));
           if (%MO_F_Lt_W64(_sgAy7::F64,
                            0.0 :: W64)) goto cgK7F; else goto cgK7p;
       cgK7F: // global
           (_cgK7u::F64) = call MO_F64_Fabs(_sgAy7::F64);
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(%MO_F_Quot_W64(_cgK7u::F64,
                                                       %MO_F_Add_W64(_cgK76::F64, _cgK76::F64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _cgK76::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgK7p: // global
           (_cgK7g::F64) = call MO_F64_Fabs(_sgAy7::F64);
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Quot_W64(_cgK7g::F64,
                                         %MO_F_Add_W64(_cgK76::F64, _cgK76::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _cgK76::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK6O_info" {
     block_cgK6O_info:
         const _cgK6O;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.492484115 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csqrt_closure" {
     Data.Complex.$fFloatingComplex_$s$csqrt_closure:
         const Data.Complex.$fFloatingComplex_$s$csqrt_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csqrt_entry() //  [R2]
         { []
         }
     {offset
       cgK9D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgK9T; else goto cgK9U;
       cgK9T: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csqrt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgK9U: // global
           I64[Sp - 8] = block_cgK9A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKa2; else goto cgK9B;
       ugKa2: // global
           call _cgK9A(R1) args: 0, res: 0, upd: 0;
       cgK9B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csqrt_info" {
     Data.Complex.$fFloatingComplex_$s$csqrt_info:
         const Data.Complex.$fFloatingComplex_$s$csqrt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+592;
 },
 _cgK9A() //  [R1]
         { []
         }
     {offset
       cgK9A: // global
           I64[Sp - 8] = block_cgK9G_info;
           _sgAyL::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAyL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKa1; else goto cgK9H;
       ugKa1: // global
           call _cgK9G(R1) args: 0, res: 0, upd: 0;
       cgK9H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK9A_info" {
     block_cgK9A_info:
         const _cgK9A;
         const 0;
         const 4294967326;
         const SgBbV_srt+592;
 },
 _cgK9G() //  [R1]
         { []
         }
     {offset
       cgK9G: // global
           I64[Sp] = block_cgK9L_info;
           _sgAyN::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAyN::F64;
           if (R1 & 7 != 0) goto ugKa3; else goto cgK9M;
       ugKa3: // global
           call _cgK9L(R1) args: 0, res: 0, upd: 0;
       cgK9M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK9G_info" {
     block_cgK9G_info:
         const _cgK9G;
         const 1;
         const 4294967326;
         const SgBbV_srt+592;
 },
 _cgK9L() //  [R1]
         { []
         }
     {offset
       cgK9L: // global
           _sgAyN::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgK9Q_info;
           D2 = F64[R1 + 7];
           D1 = _sgAyN::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK9L_info" {
     block_cgK9L_info:
         const _cgK9L;
         const 65;
         const 4294967326;
         const SgBbV_srt+592;
 },
 _cgK9Q() //  [R1, R2]
         { []
         }
     {offset
       cgK9Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKa0; else goto cgK9Z;
       cgKa0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgK9Z: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgK9Q_info" {
     block_cgK9Q_info:
         const _cgK9Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.501797804 UTC

[section ""data" . sat_sgAyT_closure" {
     sat_sgAyT_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.503478046 UTC

[section ""data" . sat_sgAyU_closure" {
     sat_sgAyU_closure:
         const :_con_info;
         const sat_sgAyT_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.506432392 UTC

[section ""data" . Data.Complex.$fFloatingComplex21_closure" {
     Data.Complex.$fFloatingComplex21_closure:
         const Data.Complex.$fFloatingComplex21_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex21_entry() //  [R1]
         { []
         }
     {offset
       cgKax: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKay; else goto cgKaz;
       cgKay: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKaz: // global
           (_cgKau::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgKau::I64 == 0) goto cgKaw; else goto cgKav;
       cgKaw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgKav: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgKau::I64;
           R3 = sat_sgAyU_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex21_info" {
     Data.Complex.$fFloatingComplex21_info:
         const Data.Complex.$fFloatingComplex21_entry;
         const 0;
         const 4294967317;
         const SgBbV_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.522161058 UTC

[section ""data" . Data.Complex.$w$csqrt_closure" {
     Data.Complex.$w$csqrt_closure:
         const Data.Complex.$w$csqrt_info;
         const 0;
 },
 $dNum_sgAz1_entry() //  [R1]
         { []
         }
     {offset
       cgKbh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKbi; else goto cgKbj;
       cgKbi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKbj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgAz1_info" {
     $dNum_sgAz1_info:
         const $dNum_sgAz1_entry;
         const 1;
         const 16;
 },
 sat_sgAzr_entry() //  [R1]
         { []
         }
     {offset
       cgKbm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKbn; else goto cgKbo;
       cgKbn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKbo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzr_info" {
     sat_sgAzr_info:
         const sat_sgAzr_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+616;
 },
 $dFractional_sgAz5_entry() //  [R1]
         { []
         }
     {offset
       cgKbr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKbs; else goto cgKbt;
       cgKbs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKbt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgAz5_info" {
     $dFractional_sgAz5_info:
         const $dFractional_sgAz5_entry;
         const 1;
         const 16;
 },
 sat_sgAzb_entry() //  [R1]
         { []
         }
     {offset
       cgKbE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKbF; else goto cgKbG;
       cgKbF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKbG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzb_info" {
     sat_sgAzb_info:
         const sat_sgAzb_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+624;
 },
 sat_sgAz9_entry() //  [R1]
         { []
         }
     {offset
       cgKbP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKbQ; else goto cgKbR;
       cgKbQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKbR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAz9_info" {
     sat_sgAz9_info:
         const sat_sgAz9_entry;
         const 2;
         const 18;
 },
 sat_sgAz8_entry() //  [R1]
         { []
         }
     {offset
       cgKbW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKbX; else goto cgKbY;
       cgKbX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKbY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAz8_info" {
     sat_sgAz8_info:
         const sat_sgAz8_entry;
         const 3;
         const 15;
 },
 sat_sgAza_entry() //  [R1]
         { []
         }
     {offset
       cgKbZ: // global
           _sgAza::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgKc0; else goto cgKc1;
       cgKc1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgKc3; else goto cgKc2;
       cgKc3: // global
           HpAlloc = 72;
           goto cgKc0;
       cgKc0: // global
           R1 = _sgAza::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKc2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAza::P64;
           _sgAyV::P64 = P64[_sgAza::P64 + 16];
           _sgAyW::P64 = P64[_sgAza::P64 + 24];
           _sgAyX::P64 = P64[_sgAza::P64 + 32];
           _sgAz1::P64 = P64[_sgAza::P64 + 40];
           I64[Hp - 64] = sat_sgAz9_info;
           P64[Hp - 48] = _sgAyW::P64;
           P64[Hp - 40] = _sgAz1::P64;
           I64[Hp - 32] = sat_sgAz8_info;
           P64[Hp - 16] = _sgAyV::P64;
           P64[Hp - 8] = _sgAyW::P64;
           P64[Hp] = _sgAyX::P64;
           R2 = _sgAz1::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAza_info" {
     sat_sgAza_info:
         const sat_sgAza_entry;
         const 4;
         const 15;
 },
 sat_sgAzc_entry() //  [R1]
         { []
         }
     {offset
       cgKc4: // global
           _sgAzc::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgKc5; else goto cgKc6;
       cgKc6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgKc8; else goto cgKc7;
       cgKc8: // global
           HpAlloc = 72;
           goto cgKc5;
       cgKc5: // global
           R1 = _sgAzc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKc7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAzc::P64;
           _sgAyV::P64 = P64[_sgAzc::P64 + 16];
           _sgAyW::P64 = P64[_sgAzc::P64 + 24];
           _sgAyX::P64 = P64[_sgAzc::P64 + 32];
           _sgAz1::P64 = P64[_sgAzc::P64 + 40];
           _sgAz5::P64 = P64[_sgAzc::P64 + 48];
           I64[Hp - 64] = sat_sgAzb_info;
           P64[Hp - 48] = _sgAz1::P64;
           I64[Hp - 40] = sat_sgAza_info;
           P64[Hp - 24] = _sgAyV::P64;
           P64[Hp - 16] = _sgAyW::P64;
           P64[Hp - 8] = _sgAyX::P64;
           P64[Hp] = _sgAz1::P64;
           R2 = _sgAz5::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzc_info" {
     sat_sgAzc_info:
         const sat_sgAzc_entry;
         const 5;
         const 4294967311;
         const SgBbV_srt+624;
 },
 u'_sgAz6_entry() //  [R1]
         { []
         }
     {offset
       cgKcb: // global
           _sgAz6::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgKcc; else goto cgKcd;
       cgKcd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgKcf; else goto cgKce;
       cgKcf: // global
           HpAlloc = 56;
           goto cgKcc;
       cgKcc: // global
           R1 = _sgAz6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKce: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAz6::P64;
           _sgAyV::P64 = P64[_sgAz6::P64 + 16];
           _sgAyW::P64 = P64[_sgAz6::P64 + 24];
           _sgAyX::P64 = P64[_sgAz6::P64 + 32];
           _sgAz1::P64 = P64[_sgAz6::P64 + 40];
           _sgAz5::P64 = P64[_sgAz6::P64 + 48];
           I64[Hp - 48] = sat_sgAzc_info;
           P64[Hp - 32] = _sgAyV::P64;
           P64[Hp - 24] = _sgAyW::P64;
           P64[Hp - 16] = _sgAyX::P64;
           P64[Hp - 8] = _sgAz1::P64;
           P64[Hp] = _sgAz5::P64;
           I64[Sp - 32] = block_cgKc9_info;
           R2 = _sgAyV::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . u'_sgAz6_info" {
     u'_sgAz6_info:
         const u'_sgAz6_entry;
         const 5;
         const 4294967311;
         const SgBbV_srt+624;
 },
 _cgKc9() //  [R1]
         { []
         }
     {offset
       cgKc9: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgKc9_info" {
     block_cgKc9_info:
         const _cgKc9;
         const 1;
         const 30;
 },
 sat_sgAzf_entry() //  [R1]
         { []
         }
     {offset
       cgKcu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKcv; else goto cgKcw;
       cgKcv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKcw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzf_info" {
     sat_sgAzf_info:
         const sat_sgAzf_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+624;
 },
 sat_sgAzg_entry() //  [R1]
         { []
         }
     {offset
       cgKcx: // global
           _sgAzg::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgKcy; else goto cgKcz;
       cgKcz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKcB; else goto cgKcA;
       cgKcB: // global
           HpAlloc = 24;
           goto cgKcy;
       cgKcy: // global
           R1 = _sgAzg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKcA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAzg::P64;
           _sgAz1::P64 = P64[_sgAzg::P64 + 16];
           _sgAz6::P64 = P64[_sgAzg::P64 + 24];
           I64[Hp - 16] = sat_sgAzf_info;
           P64[Hp] = _sgAz1::P64;
           R2 = _sgAz1::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgAz6::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzg_info" {
     sat_sgAzg_info:
         const sat_sgAzg_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+624;
 },
 sat_sgAze_entry() //  [R1]
         { []
         }
     {offset
       cgKcG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKcH; else goto cgKcI;
       cgKcH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKcI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAze_info" {
     sat_sgAze_info:
         const sat_sgAze_entry;
         const 2;
         const 18;
 },
 v'_sgAzd_entry() //  [R1]
         { []
         }
     {offset
       cgKcJ: // global
           _sgAzd::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgKcK; else goto cgKcL;
       cgKcL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgKcN; else goto cgKcM;
       cgKcN: // global
           HpAlloc = 64;
           goto cgKcK;
       cgKcK: // global
           R1 = _sgAzd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKcM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAzd::P64;
           _sgAyX::P64 = P64[_sgAzd::P64 + 16];
           _sgAz1::P64 = P64[_sgAzd::P64 + 24];
           _sgAz5::P64 = P64[_sgAzd::P64 + 32];
           _sgAz6::P64 = P64[_sgAzd::P64 + 40];
           I64[Hp - 56] = sat_sgAzg_info;
           P64[Hp - 40] = _sgAz1::P64;
           P64[Hp - 32] = _sgAz6::P64;
           I64[Hp - 24] = sat_sgAze_info;
           P64[Hp - 8] = _sgAyX::P64;
           P64[Hp] = _sgAz1::P64;
           R2 = _sgAz5::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . v'_sgAzd_info" {
     v'_sgAzd_info:
         const v'_sgAzd_entry;
         const 4;
         const 4294967311;
         const SgBbV_srt+624;
 },
 sat_sgAzp_entry() //  [R1]
         { []
         }
     {offset
       cgKcS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKcT; else goto cgKcU;
       cgKcT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKcU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzp_info" {
     sat_sgAzp_info:
         const sat_sgAzp_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+616;
 },
 sat_sgAzl_entry() //  [R1]
         { []
         }
     {offset
       cgKd6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKd7; else goto cgKd8;
       cgKd7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKd8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzl_info" {
     sat_sgAzl_info:
         const sat_sgAzl_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+616;
 },
 sat_sgAzt_entry() //  [R1]
         { []
         }
     {offset
       cgKdi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKdj; else goto cgKdk;
       cgKdj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKdk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAzt_info" {
     sat_sgAzt_info:
         const sat_sgAzt_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+616;
 },
 Data.Complex.$w$csqrt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgKdl: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgKdm; else goto cgKdn;
       cgKdm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$csqrt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKdn: // global
           I64[Sp - 32] = block_cgKaL_info;
           _sgAyV::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAyV::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csqrt_info" {
     Data.Complex.$w$csqrt_info:
         const Data.Complex.$w$csqrt_entry;
         const 0;
         const 123149597278222;
         const 12884901911;
         const SgBbV_srt+520;
 },
 _cgKaL() //  [R1]
         { []
         }
     {offset
       cgKaL: // global
           I64[Sp - 8] = block_cgKaP_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKaL_info" {
     block_cgKaL_info:
         const _cgKaL;
         const 3;
         const 52780853100574;
         const SgBbV_srt+520;
 },
 _cgKaP() //  [R1]
         { []
         }
     {offset
       cgKaP: // global
           I64[Sp - 8] = block_cgKaT_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKaP_info" {
     block_cgKaP_info:
         const _cgKaP;
         const 4;
         const 52780853100574;
         const SgBbV_srt+520;
 },
 _cgKaT() //  [R1]
         { []
         }
     {offset
       cgKaT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKds; else goto cgKdr;
       cgKds: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKdr: // global
           I64[Hp - 16] = $dNum_sgAz1_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgKaZ_info;
           R2 = R1;
           P64[Sp] = R1;
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKaT_info" {
     block_cgKaT_info:
         const _cgKaT;
         const 5;
         const 52780853100574;
         const SgBbV_srt+520;
 },
 _cgKaZ() //  [R1]
         { []
         }
     {offset
       cgKaZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKdv; else goto cgKdu;
       cgKdv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKdu: // global
           I64[Hp - 16] = sat_sgAzr_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_cgKd9_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKaZ_info" {
     block_cgKaZ_info:
         const _cgKaZ;
         const 6;
         const 52780853100574;
         const SgBbV_srt+520;
 },
 _cgKd9() //  [R1]
         { []
         }
     {offset
       cgKd9: // global
           if (R1 & 7 == 1) goto ugKes; else goto cgKea;
       ugKes: // global
           Sp = Sp + 8;
           call _cgKb8() args: 0, res: 0, upd: 0;
       cgKea: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKed; else goto cgKec;
       cgKed: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKec: // global
           I64[Hp - 16] = sat_sgAzt_info;
           P64[Hp] = P64[Sp + 24];
           _sgAz2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKe9_info;
           R2 = _sgAz2::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKd9_info" {
     block_cgKd9_info:
         const _cgKd9;
         const 7;
         const 52780853100574;
         const SgBbV_srt+520;
 },
 _cgKe9() //  [R1]
         { []
         }
     {offset
       cgKe9: // global
           if (R1 & 7 == 1) goto ugKeu; else goto cgKen;
       ugKeu: // global
           call _cgKb8() args: 0, res: 0, upd: 0;
       cgKen: // global
           R3 = Data.Complex.$fFloatingComplex17_closure;
           R2 = P64[Sp + 32];
           Sp = Sp + 56;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKe9_info" {
     block_cgKe9_info:
         const _cgKe9;
         const 6;
         const 52780853100574;
         const SgBbV_srt+520;
 },
 _cgKb8() //  []
         { []
         }
     {offset
       cgKb8: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cgKdz; else goto cgKdy;
       cgKdz: // global
           HpAlloc = 152;
           I64[Sp] = block_cgKb8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cgKdy: // global
           I64[Hp - 144] = $dFractional_sgAz5_info;
           P64[Hp - 128] = P64[Sp + 24];
           I64[Hp - 120] = u'_sgAz6_info;
           P64[Hp - 104] = P64[Sp + 32];
           _sgAyW::P64 = P64[Sp + 40];
           P64[Hp - 96] = _sgAyW::P64;
           _sgAyX::P64 = P64[Sp + 48];
           P64[Hp - 88] = _sgAyX::P64;
           _cgKaX::P64 = P64[Sp + 16];
           P64[Hp - 80] = _cgKaX::P64;
           _cgKba::P64 = Hp - 144;
           P64[Hp - 72] = _cgKba::P64;
           I64[Hp - 64] = v'_sgAzd_info;
           P64[Hp - 48] = _sgAyX::P64;
           P64[Hp - 40] = _cgKaX::P64;
           P64[Hp - 32] = _cgKba::P64;
           _cgKbc::P64 = Hp - 120;
           P64[Hp - 24] = _cgKbc::P64;
           I64[Hp - 16] = sat_sgAzp_info;
           P64[Hp] = _cgKaX::P64;
           I64[Sp] = block_cgKdw_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgAyW::P64;
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 32] = Hp - 64;
           P64[Sp + 40] = _cgKbc::P64;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKb8_info" {
     block_cgKb8_info:
         const _cgKb8;
         const 6;
         const 12884901918;
         const SgBbV_srt+616;
 },
 _cgKdw() //  [R1]
         { []
         }
     {offset
       cgKdw: // global
           _cgKbc::P64 = P64[Sp + 40];
           _cgKbe::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cgKe0; else goto cgKe4;
       cgKe0: // global
           _sgAzj::P64 = _cgKbe::P64;
           _sgAzi::P64 = _cgKbc::P64;
           goto sgAzh;
       cgKe4: // global
           _sgAzj::P64 = _cgKbc::P64;
           _sgAzi::P64 = _cgKbe::P64;
           goto sgAzh;
       sgAzh: // global
           I64[Sp] = block_cgKd0_info;
           R1 = _sgAzi::P64;
           P64[Sp + 40] = _sgAzj::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKdw_info" {
     block_cgKdw_info:
         const _cgKdw;
         const 262;
         const 4294967326;
         const SgBbV_srt+616;
 },
 _cgKd0() //  [R1]
         { []
         }
     {offset
       cgKd0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKdE; else goto cgKdD;
       cgKdE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKdD: // global
           I64[Hp - 16] = sat_sgAzl_info;
           P64[Hp] = P64[Sp + 16];
           _sgAz0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKdA_info;
           R2 = _sgAz0::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = Hp - 16;
           P64[Sp + 48] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKd0_info" {
     block_cgKd0_info:
         const _cgKd0;
         const 774;
         const 4294967326;
         const SgBbV_srt+616;
 },
 _cgKdA() //  [R1]
         { []
         }
     {offset
       cgKdA: // global
           _sgAzj::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cgKdL; else goto cgKdS;
       cgKdL: // global
           I64[Sp + 32] = block_cgKdI_info;
           R1 = _sgAzj::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgKdS: // global
           I64[Sp + 32] = block_cgKdQ_info;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = _sgAzj::P64;
           Sp = Sp + 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKdA_info" {
     block_cgKdA_info:
         const _cgKdA;
         const 389;
         const 30;
 },
 _cgKdI() //  [R1]
         { []
         }
     {offset
       cgKdI: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKdI_info" {
     block_cgKdI_info:
         const _cgKdI;
         const 1;
         const 30;
 },
 _cgKdQ() //  [R1]
         { []
         }
     {offset
       cgKdQ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKdQ_info" {
     block_cgKdQ_info:
         const _cgKdQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.579331286 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$csqrt_closure" {
     Data.Complex.$fFloatingComplex_$csqrt_closure:
         const Data.Complex.$fFloatingComplex_$csqrt_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$csqrt_entry() //  [R2, R3]
         { []
         }
     {offset
       cgKgW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKh2; else goto cgKh3;
       cgKh2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$csqrt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKh3: // global
           I64[Sp - 16] = block_cgKgT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugKh8; else goto cgKgU;
       ugKh8: // global
           call _cgKgT(R1) args: 0, res: 0, upd: 0;
       cgKgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$csqrt_info" {
     Data.Complex.$fFloatingComplex_$csqrt_info:
         const Data.Complex.$fFloatingComplex_$csqrt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+632;
 },
 _cgKgT() //  [R1]
         { []
         }
     {offset
       cgKgT: // global
           _sgAzv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKgZ_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAzv::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKgT_info" {
     block_cgKgT_info:
         const _cgKgT;
         const 1;
         const 4294967326;
         const SgBbV_srt+632;
 },
 _cgKgZ() //  [R1, R2]
         { []
         }
     {offset
       cgKgZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKh7; else goto cgKh6;
       cgKh7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKh6: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKgZ_info" {
     block_cgKgZ_info:
         const _cgKgZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.587899592 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$crecip_closure" {
     Data.Complex.$fFloatingComplex_$s$crecip_closure:
         const Data.Complex.$fFloatingComplex_$s$crecip_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$crecip_entry() //  [R2]
         { []
         }
     {offset
       cgKht: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKhJ; else goto cgKhK;
       cgKhJ: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKhK: // global
           I64[Sp - 8] = block_cgKhq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKhS; else goto cgKhr;
       ugKhS: // global
           call _cgKhq(R1) args: 0, res: 0, upd: 0;
       cgKhr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$crecip_info" {
     Data.Complex.$fFloatingComplex_$s$crecip_info:
         const Data.Complex.$fFloatingComplex_$s$crecip_entry;
         const 0;
         const 144115192370823182;
         const 4294967301;
         const SgBbV_srt+448;
 },
 _cgKhq() //  [R1]
         { []
         }
     {offset
       cgKhq: // global
           I64[Sp - 8] = block_cgKhw_info;
           _sgAzG::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAzG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKhR; else goto cgKhx;
       ugKhR: // global
           call _cgKhw(R1) args: 0, res: 0, upd: 0;
       cgKhx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKhq_info" {
     block_cgKhq_info:
         const _cgKhq;
         const 0;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgKhw() //  [R1]
         { []
         }
     {offset
       cgKhw: // global
           I64[Sp] = block_cgKhB_info;
           _sgAzI::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAzI::F64;
           if (R1 & 7 != 0) goto ugKhT; else goto cgKhC;
       ugKhT: // global
           call _cgKhB(R1) args: 0, res: 0, upd: 0;
       cgKhC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKhw_info" {
     block_cgKhw_info:
         const _cgKhw;
         const 1;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgKhB() //  [R1]
         { []
         }
     {offset
       cgKhB: // global
           _sgAzI::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgKhG_info;
           D4 = F64[R1 + 7];
           D3 = _sgAzI::F64;
           D2 = 0.0 :: W64;
           D1 = 1.0 :: W64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKhB_info" {
     block_cgKhB_info:
         const _cgKhB;
         const 65;
         const 4294967326;
         const SgBbV_srt+448;
 },
 _cgKhG() //  [R1, R2]
         { []
         }
     {offset
       cgKhG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKhQ; else goto cgKhP;
       cgKhQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKhP: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKhG_info" {
     block_cgKhG_info:
         const _cgKhG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.599741382 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$crecip1_closure" {
     Data.Complex.$fFloatingComplex_$s$crecip1_closure:
         const Data.Complex.$fFloatingComplex_$s$crecip1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$crecip1_entry() //  [R2]
         { []
         }
     {offset
       cgKin: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKiD; else goto cgKiE;
       cgKiD: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$crecip1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKiE: // global
           I64[Sp - 8] = block_cgKik_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKiM; else goto cgKil;
       ugKiM: // global
           call _cgKik(R1) args: 0, res: 0, upd: 0;
       cgKil: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$crecip1_info" {
     Data.Complex.$fFloatingComplex_$s$crecip1_info:
         const Data.Complex.$fFloatingComplex_$s$crecip1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+656;
 },
 _cgKik() //  [R1]
         { []
         }
     {offset
       cgKik: // global
           I64[Sp - 8] = block_cgKiq_info;
           _sgAzR::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAzR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKiL; else goto cgKir;
       ugKiL: // global
           call _cgKiq(R1) args: 0, res: 0, upd: 0;
       cgKir: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKik_info" {
     block_cgKik_info:
         const _cgKik;
         const 0;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKiq() //  [R1]
         { []
         }
     {offset
       cgKiq: // global
           I64[Sp] = block_cgKiv_info;
           _sgAzT::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAzT::F32;
           if (R1 & 7 != 0) goto ugKiN; else goto cgKiw;
       ugKiN: // global
           call _cgKiv(R1) args: 0, res: 0, upd: 0;
       cgKiw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKiq_info" {
     block_cgKiq_info:
         const _cgKiq;
         const 1;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKiv() //  [R1]
         { []
         }
     {offset
       cgKiv: // global
           _sgAzT::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgKiA_info;
           F4 = F32[R1 + 7];
           F3 = _sgAzT::F32;
           F2 = 0.0 :: W32;
           F1 = 1.0 :: W32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKiv_info" {
     block_cgKiv_info:
         const _cgKiv;
         const 65;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKiA() //  [R1, R2]
         { []
         }
     {offset
       cgKiA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKiK; else goto cgKiJ;
       cgKiK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKiJ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKiA_info" {
     block_cgKiA_info:
         const _cgKiA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.610362127 UTC

[section ""data" . sat_sgAzZ_closure" {
     sat_sgAzZ_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.61230481 UTC

[section ""data" . sat_sgAA0_closure" {
     sat_sgAA0_closure:
         const :_con_info;
         const sat_sgAzZ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.615150694 UTC

[section ""data" . Data.Complex.$fFloatingComplex19_closure" {
     Data.Complex.$fFloatingComplex19_closure:
         const Data.Complex.$fFloatingComplex19_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex19_entry() //  [R1]
         { []
         }
     {offset
       cgKji: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKjj; else goto cgKjk;
       cgKjj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKjk: // global
           (_cgKjf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgKjf::I64 == 0) goto cgKjh; else goto cgKjg;
       cgKjh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgKjg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgKjf::I64;
           R3 = sat_sgAA0_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex19_info" {
     Data.Complex.$fFloatingComplex19_info:
         const Data.Complex.$fFloatingComplex19_entry;
         const 0;
         const 4294967317;
         const SgBbV_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.620480548 UTC

[section ""data" . Data.Complex.$fFractionalComplex_$crecip_closure" {
     Data.Complex.$fFractionalComplex_$crecip_closure:
         const Data.Complex.$fFractionalComplex_$crecip_info;
         const 0;
 },
 Data.Complex.$fFractionalComplex_$crecip_entry() //  [R2, R3]
         { []
         }
     {offset
       cgKjB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKjH; else goto cgKjI;
       cgKjH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFractionalComplex_$crecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKjI: // global
           I64[Sp - 24] = block_cgKjw_info;
           _sgAA2::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgAA1::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sgAA1::P64;
           P64[Sp - 8] = _sgAA2::P64;
           Sp = Sp - 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFractionalComplex_$crecip_info" {
     Data.Complex.$fFractionalComplex_$crecip_info:
         const Data.Complex.$fFractionalComplex_$crecip_entry;
         const 0;
         const 13510803177078798;
         const 8589934607;
         const SgBbV_srt+520;
 },
 _cgKjw() //  [R1, R2]
         { []
         }
     {offset
       cgKjw: // global
           I64[Sp - 8] = block_cgKjy_info;
           _sgAA4::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp] = R2;
           P64[Sp + 16] = _sgAA4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKjO; else goto cgKjz;
       ugKjO: // global
           call _cgKjy(R1) args: 0, res: 0, upd: 0;
       cgKjz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKjw_info" {
     block_cgKjw_info:
         const _cgKjw;
         const 2;
         const 30;
 },
 _cgKjy() //  [R1]
         { []
         }
     {offset
       cgKjy: // global
           _sgAA4::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgKjE_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgAA4::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKjy_info" {
     block_cgKjy_info:
         const _cgKjy;
         const 3;
         const 30;
 },
 _cgKjE() //  [R1, R2]
         { []
         }
     {offset
       cgKjE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKjN; else goto cgKjM;
       cgKjN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKjM: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKjE_info" {
     block_cgKjE_info:
         const _cgKjE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.62903203 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFractionalComplex_closure" {
     Data.Complex.$fFloatingComplex_$s$fFractionalComplex_closure:
         const GHC.Real.C:Fractional_con_info;
         const Data.Complex.$fFloatingComplex_$s$fNumComplex_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c/_closure+2;
         const Data.Complex.$fFloatingComplex_$s$crecip_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.630949074 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFractionalComplex1_closure" {
     Data.Complex.$fFloatingComplex_$s$fFractionalComplex1_closure:
         const GHC.Real.C:Fractional_con_info;
         const Data.Complex.$fFloatingComplex_$s$fNumComplex1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c/1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$crecip1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.634728875 UTC

[section ""data" . Data.Complex.$fFractionalComplex_closure" {
     Data.Complex.$fFractionalComplex_closure:
         const Data.Complex.$fFractionalComplex_info;
         const 0;
 },
 sat_sgAAg_entry() //  [R1, R2]
         { []
         }
     {offset
       cgKkg: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFractionalComplex_$cfromRational_entry(R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAAg_info" {
     sat_sgAAg_info:
         const sat_sgAAg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+488;
 },
 sat_sgAAf_entry() //  [R1, R2]
         { []
         }
     {offset
       cgKko: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFractionalComplex_$crecip_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAAf_info" {
     sat_sgAAf_info:
         const sat_sgAAf_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+688;
 },
 sat_sgAAe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgKkw: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c/_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAAe_info" {
     sat_sgAAe_info:
         const sat_sgAAe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgAAd_entry() //  [R1]
         { []
         }
     {offset
       cgKkD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKkE; else goto cgKkF;
       cgKkE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKkF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fNumComplex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAAd_info" {
     sat_sgAAd_info:
         const sat_sgAAd_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+568;
 },
 Data.Complex.$fFractionalComplex_entry() //  [R2]
         { []
         }
     {offset
       cgKkH: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgKkL; else goto cgKkK;
       cgKkL: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Complex.$fFractionalComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKkK: // global
           I64[Hp - 104] = sat_sgAAg_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgAAf_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgAAe_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgAAd_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 70;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFractionalComplex_info" {
     Data.Complex.$fFractionalComplex_info:
         const Data.Complex.$fFractionalComplex_entry;
         const 0;
         const 432349966569046030;
         const 4294967301;
         const SgBbV_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.64677018 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctan1_closure" {
     Data.Complex.$fFloatingComplex_$s$ctan1_closure:
         const Data.Complex.$fFloatingComplex_$s$ctan1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctan1_entry() //  [R2]
         { []
         }
     {offset
       cgKlf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKm0; else goto cgKm1;
       cgKm0: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKm1: // global
           I64[Sp - 8] = block_cgKlc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKm9; else goto cgKld;
       ugKm9: // global
           call _cgKlc(R1) args: 0, res: 0, upd: 0;
       cgKld: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctan1_info" {
     Data.Complex.$fFloatingComplex_$s$ctan1_info:
         const Data.Complex.$fFloatingComplex_$s$ctan1_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const SgBbV_srt+664;
 },
 _cgKlc() //  [R1]
         { []
         }
     {offset
       cgKlc: // global
           I64[Sp - 8] = block_cgKli_info;
           _sgAAk::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAAk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKm8; else goto cgKlj;
       ugKm8: // global
           call _cgKli(R1) args: 0, res: 0, upd: 0;
       cgKlj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKlc_info" {
     block_cgKlc_info:
         const _cgKlc;
         const 0;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKli() //  [R1]
         { []
         }
     {offset
       cgKli: // global
           I64[Sp] = block_cgKln_info;
           _sgAAm::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAAm::F32;
           if (R1 & 7 != 0) goto ugKma; else goto cgKlo;
       ugKma: // global
           call _cgKln(R1) args: 0, res: 0, upd: 0;
       cgKlo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKli_info" {
     block_cgKli_info:
         const _cgKli;
         const 1;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKln() //  [R1]
         { []
         }
     {offset
       cgKln: // global
           _sgAAm::F32 = F32[Sp + 8];
           _sgAAo::F32 = F32[R1 + 7];
           (_cgKls::F32) = call MO_F32_Cosh(_sgAAo::F32);
           (_cgKlw::F32) = call MO_F32_Sinh(_sgAAo::F32);
           (_cgKlA::F32) = call MO_F32_Cos(_sgAAm::F32);
           (_cgKlE::F32) = call MO_F32_Sin(_sgAAm::F32);
           I64[Sp + 8] = block_cgKlX_info;
           F4 = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgKlE::F32, _cgKlw::F32));
           F3 = %MO_F_Mul_W32(_cgKlA::F32, _cgKls::F32);
           F2 = %MO_F_Mul_W32(_cgKlA::F32, _cgKlw::F32);
           F1 = %MO_F_Mul_W32(_cgKlE::F32, _cgKls::F32);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKln_info" {
     block_cgKln_info:
         const _cgKln;
         const 65;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKlX() //  [R1, R2]
         { []
         }
     {offset
       cgKlX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKm7; else goto cgKm6;
       cgKm7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKm6: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKlX_info" {
     block_cgKlX_info:
         const _cgKlX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.66054453 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctan_closure" {
     Data.Complex.$fFloatingComplex_$s$ctan_closure:
         const Data.Complex.$fFloatingComplex_$s$ctan_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctan_entry() //  [R2]
         { []
         }
     {offset
       cgKmJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKnu; else goto cgKnv;
       cgKnu: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKnv: // global
           I64[Sp - 8] = block_cgKmG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKnD; else goto cgKmH;
       ugKnD: // global
           call _cgKmG(R1) args: 0, res: 0, upd: 0;
       cgKmH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctan_info" {
     Data.Complex.$fFloatingComplex_$s$ctan_info:
         const Data.Complex.$fFloatingComplex_$s$ctan_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+712;
 },
 _cgKmG() //  [R1]
         { []
         }
     {offset
       cgKmG: // global
           I64[Sp - 8] = block_cgKmM_info;
           _sgAAE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAAE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKnC; else goto cgKmN;
       ugKnC: // global
           call _cgKmM(R1) args: 0, res: 0, upd: 0;
       cgKmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKmG_info" {
     block_cgKmG_info:
         const _cgKmG;
         const 0;
         const 4294967326;
         const SgBbV_srt+720;
 },
 _cgKmM() //  [R1]
         { []
         }
     {offset
       cgKmM: // global
           I64[Sp] = block_cgKmR_info;
           _sgAAG::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAAG::F64;
           if (R1 & 7 != 0) goto ugKnE; else goto cgKmS;
       ugKnE: // global
           call _cgKmR(R1) args: 0, res: 0, upd: 0;
       cgKmS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKmM_info" {
     block_cgKmM_info:
         const _cgKmM;
         const 1;
         const 4294967326;
         const SgBbV_srt+720;
 },
 _cgKmR() //  [R1]
         { []
         }
     {offset
       cgKmR: // global
           _sgAAG::F64 = F64[Sp + 8];
           _sgAAI::F64 = F64[R1 + 7];
           (_cgKmW::F64) = call MO_F64_Cosh(_sgAAI::F64);
           (_cgKn0::F64) = call MO_F64_Sinh(_sgAAI::F64);
           (_cgKn4::F64) = call MO_F64_Cos(_sgAAG::F64);
           (_cgKn8::F64) = call MO_F64_Sin(_sgAAG::F64);
           I64[Sp + 8] = block_cgKnr_info;
           D4 = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgKn8::F64, _cgKn0::F64));
           D3 = %MO_F_Mul_W64(_cgKn4::F64, _cgKmW::F64);
           D2 = %MO_F_Mul_W64(_cgKn4::F64, _cgKn0::F64);
           D1 = %MO_F_Mul_W64(_cgKn8::F64, _cgKmW::F64);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKmR_info" {
     block_cgKmR_info:
         const _cgKmR;
         const 65;
         const 4294967326;
         const SgBbV_srt+720;
 },
 _cgKnr() //  [R1, R2]
         { []
         }
     {offset
       cgKnr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKnB; else goto cgKnA;
       cgKnB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKnA: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKnr_info" {
     block_cgKnr_info:
         const _cgKnr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.676265788 UTC

[section ""data" . Data.Complex.$w$ctan_closure" {
     Data.Complex.$w$ctan_closure:
         const Data.Complex.$w$ctan_info;
 },
 $dFloating_sgAB1_entry() //  [R1]
         { []
         }
     {offset
       cgKoq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKor; else goto cgKos;
       cgKor: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKos: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgAB1_info" {
     $dFloating_sgAB1_info:
         const $dFloating_sgAB1_entry;
         const 1;
         const 16;
 },
 coshy_sgAB2_entry() //  [R1]
         { []
         }
     {offset
       cgKox: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKoy; else goto cgKoz;
       cgKoy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKoz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . coshy_sgAB2_info" {
     coshy_sgAB2_info:
         const coshy_sgAB2_entry;
         const 2;
         const 18;
 },
 sinx_sgAB3_entry() //  [R1]
         { []
         }
     {offset
       cgKoE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKoF; else goto cgKoG;
       cgKoF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKoG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sinx_sgAB3_info" {
     sinx_sgAB3_info:
         const sinx_sgAB3_entry;
         const 2;
         const 18;
 },
 sinhy_sgAB5_entry() //  [R1]
         { []
         }
     {offset
       cgKoN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKoO; else goto cgKoP;
       cgKoO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKoP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sinhy_sgAB5_info" {
     sinhy_sgAB5_info:
         const sinhy_sgAB5_entry;
         const 2;
         const 18;
 },
 cosx_sgAB6_entry() //  [R1]
         { []
         }
     {offset
       cgKoU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKoV; else goto cgKoW;
       cgKoV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKoW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . cosx_sgAB6_info" {
     cosx_sgAB6_info:
         const cosx_sgAB6_entry;
         const 2;
         const 18;
 },
 sat_sgAB9_entry() //  [R1]
         { []
         }
     {offset
       cgKp5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgKp6; else goto cgKp7;
       cgKp6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKp7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAB9_info" {
     sat_sgAB9_info:
         const sat_sgAB9_entry;
         const 3;
         const 15;
 },
 Data.Complex.$w$ctan_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgKp8: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgKpa; else goto cgKpb;
       cgKpa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$ctan_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKpb: // global
           I64[Sp - 32] = block_cgKoa_info;
           _sgAAV::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAAV::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ctan_info" {
     Data.Complex.$w$ctan_info:
         const Data.Complex.$w$ctan_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgKoa() //  [R1]
         { []
         }
     {offset
       cgKoa: // global
           I64[Sp] = block_cgKoe_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKoa_info" {
     block_cgKoa_info:
         const _cgKoa;
         const 3;
         const 30;
 },
 _cgKoe() //  [R1]
         { []
         }
     {offset
       cgKoe: // global
           I64[Sp] = block_cgKoi_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKoe_info" {
     block_cgKoe_info:
         const _cgKoe;
         const 3;
         const 30;
 },
 _cgKoi() //  [R1]
         { []
         }
     {offset
       cgKoi: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgKpg; else goto cgKpf;
       cgKpg: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKpf: // global
           I64[Hp - 80] = $dFloating_sgAB1_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = coshy_sgAB2_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgKom::P64 = Hp - 80;
           P64[Hp - 32] = _cgKom::P64;
           I64[Hp - 24] = sinx_sgAB3_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgKom::P64;
           I64[Sp - 32] = block_cgKoH_info;
           R2 = R1;
           I64[Sp - 56] = stg_ap_pp_info;
           _cgKoA::P64 = Hp - 24;
           P64[Sp - 48] = _cgKoA::P64;
           _cgKot::P64 = Hp - 56;
           P64[Sp - 40] = _cgKot::P64;
           P64[Sp - 24] = _cgKot::P64;
           P64[Sp - 16] = _cgKoA::P64;
           P64[Sp - 8] = R1;
           P64[Sp] = _cgKom::P64;
           Sp = Sp - 56;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKoi_info" {
     block_cgKoi_info:
         const _cgKoi;
         const 3;
         const 30;
 },
 _cgKoH() //  [R1]
         { []
         }
     {offset
       cgKoH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgKpj; else goto cgKpi;
       cgKpj: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKpi: // global
           I64[Hp - 56] = sinhy_sgAB5_info;
           P64[Hp - 40] = P64[Sp + 56];
           _cgKom::P64 = P64[Sp + 32];
           P64[Hp - 32] = _cgKom::P64;
           I64[Hp - 24] = cosx_sgAB6_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = _cgKom::P64;
           I64[Sp] = block_cgKoX_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           _cgKoQ::P64 = Hp - 24;
           P64[Sp - 16] = _cgKoQ::P64;
           _cgKoJ::P64 = Hp - 56;
           P64[Sp - 8] = _cgKoJ::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 48] = _cgKoQ::P64;
           P64[Sp + 56] = _cgKoJ::P64;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKoH_info" {
     block_cgKoH_info:
         const _cgKoH;
         const 7;
         const 30;
 },
 _cgKoX() //  [R1]
         { []
         }
     {offset
       cgKoX: // global
           _cgKot::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKoZ_info;
           R2 = P64[Sp + 24];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _cgKot::P64;
           P64[Sp + 48] = R1;
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKoX_info" {
     block_cgKoX_info:
         const _cgKoX;
         const 7;
         const 30;
 },
 _cgKoZ() //  [R1]
         { []
         }
     {offset
       cgKoZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgKpn; else goto cgKpm;
       cgKpn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKpm: // global
           I64[Hp - 32] = sat_sgAB9_info;
           _sgAB0::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgAB0::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 48];
           I64[Sp + 16] = block_cgKp9_info;
           R2 = _sgAB0::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Hp - 32;
           P64[Sp + 48] = R1;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKoZ_info" {
     block_cgKoZ_info:
         const _cgKoZ;
         const 6;
         const 30;
 },
 _cgKp9() //  [R1]
         { []
         }
     {offset
       cgKp9: // global
           R6 = R1;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKp9_info" {
     block_cgKp9_info:
         const _cgKp9;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.704377467 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ctan_closure" {
     Data.Complex.$fFloatingComplex_$ctan_closure:
         const Data.Complex.$fFloatingComplex_$ctan_info;
 },
 Data.Complex.$fFloatingComplex_$ctan_entry() //  [R2, R3]
         { []
         }
     {offset
       cgKqA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKqG; else goto cgKqH;
       cgKqG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ctan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKqH: // global
           I64[Sp - 16] = block_cgKqx_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugKqM; else goto cgKqy;
       ugKqM: // global
           call _cgKqx(R1) args: 0, res: 0, upd: 0;
       cgKqy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ctan_info" {
     Data.Complex.$fFloatingComplex_$ctan_info:
         const Data.Complex.$fFloatingComplex_$ctan_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgKqx() //  [R1]
         { []
         }
     {offset
       cgKqx: // global
           _sgABb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKqD_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgABb::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ctan_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKqx_info" {
     block_cgKqx_info:
         const _cgKqx;
         const 1;
         const 30;
 },
 _cgKqD() //  [R1, R2]
         { []
         }
     {offset
       cgKqD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKqL; else goto cgKqK;
       cgKqL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKqK: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKqD_info" {
     block_cgKqD_info:
         const _cgKqD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.718596808 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctanh1_closure" {
     Data.Complex.$fFloatingComplex_$s$ctanh1_closure:
         const Data.Complex.$fFloatingComplex_$s$ctanh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctanh1_entry() //  [R2]
         { []
         }
     {offset
       cgKr7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKrP; else goto cgKrQ;
       cgKrP: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctanh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKrQ: // global
           I64[Sp - 8] = block_cgKr4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKrY; else goto cgKr5;
       ugKrY: // global
           call _cgKr4(R1) args: 0, res: 0, upd: 0;
       cgKr5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctanh1_info" {
     Data.Complex.$fFloatingComplex_$s$ctanh1_info:
         const Data.Complex.$fFloatingComplex_$s$ctanh1_entry;
         const 0;
         const 1103806595086;
         const 4294967301;
         const SgBbV_srt+664;
 },
 _cgKr4() //  [R1]
         { []
         }
     {offset
       cgKr4: // global
           I64[Sp - 8] = block_cgKra_info;
           _sgABm::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgABm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKrX; else goto cgKrb;
       ugKrX: // global
           call _cgKra(R1) args: 0, res: 0, upd: 0;
       cgKrb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKr4_info" {
     block_cgKr4_info:
         const _cgKr4;
         const 0;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKra() //  [R1]
         { []
         }
     {offset
       cgKra: // global
           I64[Sp] = block_cgKrf_info;
           _sgABo::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgABo::F32;
           if (R1 & 7 != 0) goto ugKrZ; else goto cgKrg;
       ugKrZ: // global
           call _cgKrf(R1) args: 0, res: 0, upd: 0;
       cgKrg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKra_info" {
     block_cgKra_info:
         const _cgKra;
         const 1;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKrf() //  [R1]
         { []
         }
     {offset
       cgKrf: // global
           _sgABo::F32 = F32[Sp + 8];
           _sgABq::F32 = F32[R1 + 7];
           (_cgKrk::F32) = call MO_F32_Cosh(_sgABo::F32);
           (_cgKro::F32) = call MO_F32_Sinh(_sgABo::F32);
           (_cgKrs::F32) = call MO_F32_Cos(_sgABq::F32);
           (_cgKrw::F32) = call MO_F32_Sin(_sgABq::F32);
           I64[Sp + 8] = block_cgKrM_info;
           F4 = %MO_F_Mul_W32(_cgKrw::F32, _cgKro::F32);
           F3 = %MO_F_Mul_W32(_cgKrs::F32, _cgKrk::F32);
           F2 = %MO_F_Mul_W32(_cgKrw::F32, _cgKrk::F32);
           F1 = %MO_F_Mul_W32(_cgKrs::F32, _cgKro::F32);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKrf_info" {
     block_cgKrf_info:
         const _cgKrf;
         const 65;
         const 4294967326;
         const SgBbV_srt+664;
 },
 _cgKrM() //  [R1, R2]
         { []
         }
     {offset
       cgKrM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKrW; else goto cgKrV;
       cgKrW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKrV: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKrM_info" {
     block_cgKrM_info:
         const _cgKrM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.737930238 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctanh_closure" {
     Data.Complex.$fFloatingComplex_$s$ctanh_closure:
         const Data.Complex.$fFloatingComplex_$s$ctanh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctanh_entry() //  [R2]
         { []
         }
     {offset
       cgKsw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKte; else goto cgKtf;
       cgKte: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKtf: // global
           I64[Sp - 8] = block_cgKst_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKtn; else goto cgKsu;
       ugKtn: // global
           call _cgKst(R1) args: 0, res: 0, upd: 0;
       cgKsu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctanh_info" {
     Data.Complex.$fFloatingComplex_$s$ctanh_info:
         const Data.Complex.$fFloatingComplex_$s$ctanh_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgBbV_srt+720;
 },
 _cgKst() //  [R1]
         { []
         }
     {offset
       cgKst: // global
           I64[Sp - 8] = block_cgKsz_info;
           _sgABF::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgABF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKtm; else goto cgKsA;
       ugKtm: // global
           call _cgKsz(R1) args: 0, res: 0, upd: 0;
       cgKsA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKst_info" {
     block_cgKst_info:
         const _cgKst;
         const 0;
         const 4294967326;
         const SgBbV_srt+720;
 },
 _cgKsz() //  [R1]
         { []
         }
     {offset
       cgKsz: // global
           I64[Sp] = block_cgKsE_info;
           _sgABH::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgABH::F64;
           if (R1 & 7 != 0) goto ugKto; else goto cgKsF;
       ugKto: // global
           call _cgKsE(R1) args: 0, res: 0, upd: 0;
       cgKsF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKsz_info" {
     block_cgKsz_info:
         const _cgKsz;
         const 1;
         const 4294967326;
         const SgBbV_srt+720;
 },
 _cgKsE() //  [R1]
         { []
         }
     {offset
       cgKsE: // global
           _sgABH::F64 = F64[Sp + 8];
           _sgABJ::F64 = F64[R1 + 7];
           (_cgKsJ::F64) = call MO_F64_Cosh(_sgABH::F64);
           (_cgKsN::F64) = call MO_F64_Sinh(_sgABH::F64);
           (_cgKsR::F64) = call MO_F64_Cos(_sgABJ::F64);
           (_cgKsV::F64) = call MO_F64_Sin(_sgABJ::F64);
           I64[Sp + 8] = block_cgKtb_info;
           D4 = %MO_F_Mul_W64(_cgKsV::F64, _cgKsN::F64);
           D3 = %MO_F_Mul_W64(_cgKsR::F64, _cgKsJ::F64);
           D2 = %MO_F_Mul_W64(_cgKsV::F64, _cgKsJ::F64);
           D1 = %MO_F_Mul_W64(_cgKsR::F64, _cgKsN::F64);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKsE_info" {
     block_cgKsE_info:
         const _cgKsE;
         const 65;
         const 4294967326;
         const SgBbV_srt+720;
 },
 _cgKtb() //  [R1, R2]
         { []
         }
     {offset
       cgKtb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKtl; else goto cgKtk;
       cgKtl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKtk: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKtb_info" {
     block_cgKtb_info:
         const _cgKtb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.763318606 UTC

[section ""data" . Data.Complex.$w$ctanh_closure" {
     Data.Complex.$w$ctanh_closure:
         const Data.Complex.$w$ctanh_info;
 },
 $dFloating_sgAC1_entry() //  [R1]
         { []
         }
     {offset
       cgKu8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKu9; else goto cgKua;
       cgKu9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKua: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgAC1_info" {
     $dFloating_sgAC1_info:
         const $dFloating_sgAC1_entry;
         const 1;
         const 16;
 },
 sinhx_sgAC2_entry() //  [R1]
         { []
         }
     {offset
       cgKuf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKug; else goto cgKuh;
       cgKug: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKuh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sinhx_sgAC2_info" {
     sinhx_sgAC2_info:
         const sinhx_sgAC2_entry;
         const 2;
         const 18;
 },
 cosy_sgAC3_entry() //  [R1]
         { []
         }
     {offset
       cgKum: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKun; else goto cgKuo;
       cgKun: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKuo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . cosy_sgAC3_info" {
     cosy_sgAC3_info:
         const cosy_sgAC3_entry;
         const 2;
         const 18;
 },
 coshx_sgAC5_entry() //  [R1]
         { []
         }
     {offset
       cgKuv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKuw; else goto cgKux;
       cgKuw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKux: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . coshx_sgAC5_info" {
     coshx_sgAC5_info:
         const coshx_sgAC5_entry;
         const 2;
         const 18;
 },
 siny_sgAC6_entry() //  [R1]
         { []
         }
     {offset
       cgKuC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKuD; else goto cgKuE;
       cgKuD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKuE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . siny_sgAC6_info" {
     siny_sgAC6_info:
         const siny_sgAC6_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$ctanh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgKuF: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgKuL; else goto cgKuM;
       cgKuL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$ctanh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKuM: // global
           I64[Sp - 32] = block_cgKtS_info;
           _sgABV::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgABV::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ctanh_info" {
     Data.Complex.$w$ctanh_info:
         const Data.Complex.$w$ctanh_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgKtS() //  [R1]
         { []
         }
     {offset
       cgKtS: // global
           I64[Sp] = block_cgKtW_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKtS_info" {
     block_cgKtS_info:
         const _cgKtS;
         const 3;
         const 30;
 },
 _cgKtW() //  [R1]
         { []
         }
     {offset
       cgKtW: // global
           I64[Sp] = block_cgKu0_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKtW_info" {
     block_cgKtW_info:
         const _cgKtW;
         const 3;
         const 30;
 },
 _cgKu0() //  [R1]
         { []
         }
     {offset
       cgKu0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgKuR; else goto cgKuQ;
       cgKuR: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKuQ: // global
           I64[Hp - 80] = $dFloating_sgAC1_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sinhx_sgAC2_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgKu4::P64 = Hp - 80;
           P64[Hp - 32] = _cgKu4::P64;
           I64[Hp - 24] = cosy_sgAC3_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgKu4::P64;
           I64[Sp - 32] = block_cgKup_info;
           R2 = R1;
           I64[Sp - 56] = stg_ap_pp_info;
           _cgKui::P64 = Hp - 24;
           P64[Sp - 48] = _cgKui::P64;
           _cgKub::P64 = Hp - 56;
           P64[Sp - 40] = _cgKub::P64;
           P64[Sp - 24] = _cgKub::P64;
           P64[Sp - 16] = _cgKui::P64;
           P64[Sp - 8] = R1;
           P64[Sp] = _cgKu4::P64;
           Sp = Sp - 56;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKu0_info" {
     block_cgKu0_info:
         const _cgKu0;
         const 3;
         const 30;
 },
 _cgKup() //  [R1]
         { []
         }
     {offset
       cgKup: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgKuU; else goto cgKuT;
       cgKuU: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKuT: // global
           I64[Hp - 56] = coshx_sgAC5_info;
           P64[Hp - 40] = P64[Sp + 48];
           _cgKu4::P64 = P64[Sp + 32];
           P64[Hp - 32] = _cgKu4::P64;
           I64[Hp - 24] = siny_sgAC6_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = _cgKu4::P64;
           I64[Sp] = block_cgKuG_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           _cgKuy::P64 = Hp - 24;
           P64[Sp - 16] = _cgKuy::P64;
           _cgKur::P64 = Hp - 56;
           P64[Sp - 8] = _cgKur::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 48] = _cgKuy::P64;
           P64[Sp + 56] = _cgKur::P64;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKup_info" {
     block_cgKup_info:
         const _cgKup;
         const 7;
         const 30;
 },
 _cgKuG() //  [R1]
         { []
         }
     {offset
       cgKuG: // global
           I64[Sp] = block_cgKuI_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp + 56] = R1;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKuG_info" {
     block_cgKuG_info:
         const _cgKuG;
         const 7;
         const 30;
 },
 _cgKuI() //  [R1]
         { []
         }
     {offset
       cgKuI: // global
           _sgAC0::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgKuK_info;
           R2 = _sgAC0::P64;
           I64[Sp] = stg_ap_pp_info;
           _cgKub::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 48];
           P64[Sp + 16] = _cgKub::P64;
           P64[Sp + 48] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKuI_info" {
     block_cgKuI_info:
         const _cgKuI;
         const 135;
         const 30;
 },
 _cgKuK() //  [R1]
         { []
         }
     {offset
       cgKuK: // global
           R6 = R1;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKuK_info" {
     block_cgKuK_info:
         const _cgKuK;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.795311919 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ctanh_closure" {
     Data.Complex.$fFloatingComplex_$ctanh_closure:
         const Data.Complex.$fFloatingComplex_$ctanh_info;
 },
 Data.Complex.$fFloatingComplex_$ctanh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgKw2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKw8; else goto cgKw9;
       cgKw8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ctanh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKw9: // global
           I64[Sp - 16] = block_cgKvZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugKwe; else goto cgKw0;
       ugKwe: // global
           call _cgKvZ(R1) args: 0, res: 0, upd: 0;
       cgKw0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ctanh_info" {
     Data.Complex.$fFloatingComplex_$ctanh_info:
         const Data.Complex.$fFloatingComplex_$ctanh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgKvZ() //  [R1]
         { []
         }
     {offset
       cgKvZ: // global
           _sgACa::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKw5_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgACa::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ctanh_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKvZ_info" {
     block_cgKvZ_info:
         const _cgKvZ;
         const 1;
         const 30;
 },
 _cgKw5() //  [R1, R2]
         { []
         }
     {offset
       cgKw5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKwd; else goto cgKwc;
       cgKwd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKwc: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKw5_info" {
     block_cgKw5_info:
         const _cgKw5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.811091113 UTC

[section ""data" . Data.Complex.$w$s$cacosh1_closure" {
     Data.Complex.$w$s$cacosh1_closure:
         const Data.Complex.$w$s$cacosh1_info;
         const 0;
 },
 Data.Complex.$w$s$cacosh1_slow() //  [R1]
         { []
         }
     {offset
       cgKwt: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacosh1_entry(F2,
                                                F1,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugKxU_srtd" {
     ugKxU_srtd:
         const SgBbV_srt+360;
         const 49;
         const 281475110928385;
 },
 Data.Complex.$w$s$cacosh1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgKwz: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgKxE; else goto cgKxF;
       cgKxE: // global
           R1 = Data.Complex.$w$s$cacosh1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKxF: // global
           I64[Sp - 24] = block_cgKwB_info;
           _sgACj::F32 = F2;
           F2 = F2;
           _sgACi::F32 = F1;
           F1 = %MO_F_Add_W32(F1, 1.0 :: W32);
           F32[Sp - 16] = _sgACi::F32;
           F32[Sp - 8] = _sgACj::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacosh1_info" {
     Data.Complex.$w$s$cacosh1_info:
         const Data.Complex.$w$s$cacosh1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugKxU_srtd;
         const 194;
         const Data.Complex.$w$s$cacosh1_slow;
 },
 _cgKwB() //  [R1, R2]
         { []
         }
     {offset
       cgKwB: // global
           I64[Sp - 8] = block_cgKwD_info;
           _sgACm::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgACm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKxQ; else goto cgKwE;
       ugKxQ: // global
           call _cgKwD(R1) args: 0, res: 0, upd: 0;
       cgKwE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKwB_info" {
     block_cgKwB_info:
         const _cgKwB;
         const 194;
         const 576460756598390814;
         const SgBbV_srt+360;
 },
 _cgKwD() //  [R1]
         { []
         }
     {offset
       cgKwD: // global
           I64[Sp] = block_cgKwI_info;
           _sgACp::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgACp::F32;
           if (R1 & 7 != 0) goto ugKxR; else goto cgKwJ;
       ugKxR: // global
           call _cgKwI(R1) args: 0, res: 0, upd: 0;
       cgKwJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKwD_info" {
     block_cgKwD_info:
         const _cgKwD;
         const 387;
         const 576460756598390814;
         const SgBbV_srt+360;
 },
 _cgKwI() //  [R1]
         { []
         }
     {offset
       cgKwI: // global
           I64[Sp - 8] = block_cgKwQ_info;
           F2 = F32[Sp + 24];
           F1 = %MO_F_Sub_W32(F32[Sp + 16], 1.0 :: W32);
           F32[Sp] = F32[R1 + 7];
           Sp = Sp - 8;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKwI_info" {
     block_cgKwI_info:
         const _cgKwI;
         const 451;
         const 576460756598390814;
         const SgBbV_srt+360;
 },
 _cgKwQ() //  [R1, R2]
         { []
         }
     {offset
       cgKwQ: // global
           I64[Sp - 8] = block_cgKwS_info;
           _sgACu::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgACu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKxS; else goto cgKwT;
       ugKxS: // global
           call _cgKwS(R1) args: 0, res: 0, upd: 0;
       cgKwT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKwQ_info" {
     block_cgKwQ_info:
         const _cgKwQ;
         const 964;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKwS() //  [R1]
         { []
         }
     {offset
       cgKwS: // global
           I64[Sp] = block_cgKwX_info;
           _sgACx::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgACx::F32;
           if (R1 & 7 != 0) goto ugKxT; else goto cgKwY;
       ugKxT: // global
           call _cgKwX(R1) args: 0, res: 0, upd: 0;
       cgKwY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKwS_info" {
     block_cgKwS_info:
         const _cgKwS;
         const 1925;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKwX() //  [R1]
         { []
         }
     {offset
       cgKwX: // global
           _sgACp::F32 = F32[Sp + 24];
           I64[Sp + 24] = block_cgKxq_info;
           _sgACr::F32 = F32[Sp + 16];
           _sgACx::F32 = F32[Sp + 8];
           _sgACz::F32 = F32[R1 + 7];
           _sgACA::F32 = %MO_F_Add_W32(F32[Sp + 40],
                                       %MO_F_Add_W32(%MO_F_Mul_W32(_sgACr::F32, _sgACx::F32),
                                                     %MO_F_Mul_W32(_sgACp::F32, _sgACz::F32)));
           F2 = _sgACA::F32;
           _sgACE::F32 = %MO_F_Add_W32(F32[Sp + 32],
                                       %MO_F_Sub_W32(%MO_F_Mul_W32(_sgACr::F32, _sgACz::F32),
                                                     %MO_F_Mul_W32(_sgACp::F32, _sgACx::F32)));
           F1 = _sgACE::F32;
           F32[Sp + 32] = _sgACE::F32;
           F32[Sp + 40] = _sgACA::F32;
           Sp = Sp + 24;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKwX_info" {
     block_cgKwX_info:
         const _cgKwX;
         const 1989;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKxq() //  [F1]
         { []
         }
     {offset
       cgKxq: // global
           _sgACA::F32 = F32[Sp + 16];
           _sgACE::F32 = F32[Sp + 8];
           _cgKxv::F32 = F1;
           (_cgKxu::F32) = call MO_F32_Log(_cgKxv::F32);
           I64[Sp + 8] = block_cgKxy_info;
           F2 = _sgACA::F32;
           F1 = _sgACE::F32;
           F32[Sp + 16] = _cgKxu::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKxq_info" {
     block_cgKxq_info:
         const _cgKxq;
         const 194;
         const 30;
 },
 _cgKxy() //  [F1]
         { []
         }
     {offset
       cgKxy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKxP; else goto cgKxO;
       cgKxP: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgKxO: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = F1;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F32[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKxy_info" {
     block_cgKxy_info:
         const _cgKxy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.842485728 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacosh1_closure" {
     Data.Complex.$fFloatingComplex_$s$cacosh1_closure:
         const Data.Complex.$fFloatingComplex_$s$cacosh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacosh1_entry() //  [R2]
         { []
         }
     {offset
       cgKyV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKzb; else goto cgKzc;
       cgKzb: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacosh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKzc: // global
           I64[Sp - 8] = block_cgKyS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKzk; else goto cgKyT;
       ugKzk: // global
           call _cgKyS(R1) args: 0, res: 0, upd: 0;
       cgKyT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacosh1_info" {
     Data.Complex.$fFloatingComplex_$s$cacosh1_info:
         const Data.Complex.$fFloatingComplex_$s$cacosh1_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgBbV_srt+744;
 },
 _cgKyS() //  [R1]
         { []
         }
     {offset
       cgKyS: // global
           I64[Sp - 8] = block_cgKyY_info;
           _sgACQ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgACQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKzj; else goto cgKyZ;
       ugKzj: // global
           call _cgKyY(R1) args: 0, res: 0, upd: 0;
       cgKyZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKyS_info" {
     block_cgKyS_info:
         const _cgKyS;
         const 0;
         const 4294967326;
         const SgBbV_srt+744;
 },
 _cgKyY() //  [R1]
         { []
         }
     {offset
       cgKyY: // global
           I64[Sp] = block_cgKz3_info;
           _sgACS::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgACS::F32;
           if (R1 & 7 != 0) goto ugKzl; else goto cgKz4;
       ugKzl: // global
           call _cgKz3(R1) args: 0, res: 0, upd: 0;
       cgKz4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKyY_info" {
     block_cgKyY_info:
         const _cgKyY;
         const 1;
         const 4294967326;
         const SgBbV_srt+744;
 },
 _cgKz3() //  [R1]
         { []
         }
     {offset
       cgKz3: // global
           _sgACS::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgKz8_info;
           F2 = F32[R1 + 7];
           F1 = _sgACS::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacosh1_entry(F2,
                                                F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKz3_info" {
     block_cgKz3_info:
         const _cgKz3;
         const 65;
         const 4294967326;
         const SgBbV_srt+744;
 },
 _cgKz8() //  [R1, R2]
         { []
         }
     {offset
       cgKz8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKzi; else goto cgKzh;
       cgKzi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKzh: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKz8_info" {
     block_cgKz8_info:
         const _cgKz8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.863413405 UTC

[section ""data" . Data.Complex.$w$s$cacosh_closure" {
     Data.Complex.$w$s$cacosh_closure:
         const Data.Complex.$w$s$cacosh_info;
         const 0;
 },
 Data.Complex.$w$s$cacosh_slow() //  [R1]
         { []
         }
     {offset
       cgKzI: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacosh_entry(D2,
                                               D1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugKB9_srtd" {
     ugKB9_srtd:
         const SgBbV_srt+344;
         const 54;
         const 9007201402224641;
 },
 Data.Complex.$w$s$cacosh_entry() //  [D1, D2]
         { []
         }
     {offset
       cgKzO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgKAT; else goto cgKAU;
       cgKAT: // global
           R1 = Data.Complex.$w$s$cacosh_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKAU: // global
           I64[Sp - 24] = block_cgKzQ_info;
           _sgACZ::F64 = D2;
           D2 = D2;
           _sgACY::F64 = D1;
           D1 = %MO_F_Add_W64(D1, 1.0 :: W64);
           F64[Sp - 16] = _sgACY::F64;
           F64[Sp - 8] = _sgACZ::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacosh_info" {
     Data.Complex.$w$s$cacosh_info:
         const Data.Complex.$w$s$cacosh_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugKB9_srtd;
         const 194;
         const Data.Complex.$w$s$cacosh_slow;
 },
 _cgKzQ() //  [R1, R2]
         { []
         }
     {offset
       cgKzQ: // global
           I64[Sp - 8] = block_cgKzS_info;
           _sgAD2::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgAD2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKB5; else goto cgKzT;
       ugKB5: // global
           call _cgKzS(R1) args: 0, res: 0, upd: 0;
       cgKzT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKzQ_info" {
     block_cgKzQ_info:
         const _cgKzQ;
         const 194;
         const 9223372041149743134;
         const SgBbV_srt+344;
 },
 _cgKzS() //  [R1]
         { []
         }
     {offset
       cgKzS: // global
           I64[Sp] = block_cgKzX_info;
           _sgAD5::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAD5::F64;
           if (R1 & 7 != 0) goto ugKB6; else goto cgKzY;
       ugKB6: // global
           call _cgKzX(R1) args: 0, res: 0, upd: 0;
       cgKzY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKzS_info" {
     block_cgKzS_info:
         const _cgKzS;
         const 387;
         const 9223372041149743134;
         const SgBbV_srt+344;
 },
 _cgKzX() //  [R1]
         { []
         }
     {offset
       cgKzX: // global
           I64[Sp - 8] = block_cgKA5_info;
           D2 = F64[Sp + 24];
           D1 = %MO_F_Sub_W64(F64[Sp + 16], 1.0 :: W64);
           F64[Sp] = F64[R1 + 7];
           Sp = Sp - 8;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKzX_info" {
     block_cgKzX_info:
         const _cgKzX;
         const 451;
         const 9223372041149743134;
         const SgBbV_srt+344;
 },
 _cgKA5() //  [R1, R2]
         { []
         }
     {offset
       cgKA5: // global
           I64[Sp - 8] = block_cgKA7_info;
           _sgADa::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgADa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKB7; else goto cgKA8;
       ugKB7: // global
           call _cgKA7(R1) args: 0, res: 0, upd: 0;
       cgKA8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKA5_info" {
     block_cgKA5_info:
         const _cgKA5;
         const 964;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKA7() //  [R1]
         { []
         }
     {offset
       cgKA7: // global
           I64[Sp] = block_cgKAc_info;
           _sgADd::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgADd::F64;
           if (R1 & 7 != 0) goto ugKB8; else goto cgKAd;
       ugKB8: // global
           call _cgKAc(R1) args: 0, res: 0, upd: 0;
       cgKAd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKA7_info" {
     block_cgKA7_info:
         const _cgKA7;
         const 1925;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKAc() //  [R1]
         { []
         }
     {offset
       cgKAc: // global
           _sgAD5::F64 = F64[Sp + 24];
           I64[Sp + 24] = block_cgKAF_info;
           _sgAD7::F64 = F64[Sp + 16];
           _sgADd::F64 = F64[Sp + 8];
           _sgADf::F64 = F64[R1 + 7];
           _sgADg::F64 = %MO_F_Add_W64(F64[Sp + 40],
                                       %MO_F_Add_W64(%MO_F_Mul_W64(_sgAD7::F64, _sgADd::F64),
                                                     %MO_F_Mul_W64(_sgAD5::F64, _sgADf::F64)));
           D2 = _sgADg::F64;
           _sgADk::F64 = %MO_F_Add_W64(F64[Sp + 32],
                                       %MO_F_Sub_W64(%MO_F_Mul_W64(_sgAD7::F64, _sgADf::F64),
                                                     %MO_F_Mul_W64(_sgAD5::F64, _sgADd::F64)));
           D1 = _sgADk::F64;
           F64[Sp + 32] = _sgADk::F64;
           F64[Sp + 40] = _sgADg::F64;
           Sp = Sp + 24;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKAc_info" {
     block_cgKAc_info:
         const _cgKAc;
         const 1989;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKAF() //  [D1]
         { []
         }
     {offset
       cgKAF: // global
           _sgADg::F64 = F64[Sp + 16];
           _sgADk::F64 = F64[Sp + 8];
           _cgKAK::F64 = D1;
           (_cgKAJ::F64) = call MO_F64_Log(_cgKAK::F64);
           I64[Sp + 8] = block_cgKAN_info;
           D2 = _sgADg::F64;
           D1 = _sgADk::F64;
           F64[Sp + 16] = _cgKAJ::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKAF_info" {
     block_cgKAF_info:
         const _cgKAF;
         const 194;
         const 30;
 },
 _cgKAN() //  [D1]
         { []
         }
     {offset
       cgKAN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKB4; else goto cgKB3;
       cgKB4: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgKB3: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = D1;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = F64[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKAN_info" {
     block_cgKAN_info:
         const _cgKAN;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.896310526 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacosh_closure" {
     Data.Complex.$fFloatingComplex_$s$cacosh_closure:
         const Data.Complex.$fFloatingComplex_$s$cacosh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacosh_entry() //  [R2]
         { []
         }
     {offset
       cgKCa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKCq; else goto cgKCr;
       cgKCq: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKCr: // global
           I64[Sp - 8] = block_cgKC7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKCz; else goto cgKC8;
       ugKCz: // global
           call _cgKC7(R1) args: 0, res: 0, upd: 0;
       cgKC8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacosh_info" {
     Data.Complex.$fFloatingComplex_$s$cacosh_info:
         const Data.Complex.$fFloatingComplex_$s$cacosh_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgBbV_srt+768;
 },
 _cgKC7() //  [R1]
         { []
         }
     {offset
       cgKC7: // global
           I64[Sp - 8] = block_cgKCd_info;
           _sgADw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgADw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKCy; else goto cgKCe;
       ugKCy: // global
           call _cgKCd(R1) args: 0, res: 0, upd: 0;
       cgKCe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKC7_info" {
     block_cgKC7_info:
         const _cgKC7;
         const 0;
         const 4294967326;
         const SgBbV_srt+768;
 },
 _cgKCd() //  [R1]
         { []
         }
     {offset
       cgKCd: // global
           I64[Sp] = block_cgKCi_info;
           _sgADy::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgADy::F64;
           if (R1 & 7 != 0) goto ugKCA; else goto cgKCj;
       ugKCA: // global
           call _cgKCi(R1) args: 0, res: 0, upd: 0;
       cgKCj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKCd_info" {
     block_cgKCd_info:
         const _cgKCd;
         const 1;
         const 4294967326;
         const SgBbV_srt+768;
 },
 _cgKCi() //  [R1]
         { []
         }
     {offset
       cgKCi: // global
           _sgADy::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgKCn_info;
           D2 = F64[R1 + 7];
           D1 = _sgADy::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacosh_entry(D2,
                                               D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKCi_info" {
     block_cgKCi_info:
         const _cgKCi;
         const 65;
         const 4294967326;
         const SgBbV_srt+768;
 },
 _cgKCn() //  [R1, R2]
         { []
         }
     {offset
       cgKCn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKCx; else goto cgKCw;
       cgKCx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKCw: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKCn_info" {
     block_cgKCn_info:
         const _cgKCn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.914890325 UTC

[section ""data" . Data.Complex.$w$cacosh_closure" {
     Data.Complex.$w$cacosh_closure:
         const Data.Complex.$w$cacosh_info;
         const 0;
 },
 section ""relreadonly" . ugKDo_srtd" {
     ugKDo_srtd:
         const SgBbV_srt+432;
         const 46;
         const 35186553128961;
 },
 Data.Complex.$w$cacosh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgKDe: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgKDf; else goto cgKDg;
       cgKDf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cacosh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKDg: // global
           I64[Sp - 32] = block_cgKD0_info;
           _sgADF::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgADE::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgADE::P64;
           P64[Sp - 16] = _sgADF::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cacosh_info" {
     Data.Complex.$w$cacosh_info:
         const Data.Complex.$w$cacosh_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugKDo_srtd;
 },
 _cgKD0() //  [R1, R2]
         { []
         }
     {offset
       cgKD0: // global
           I64[Sp - 16] = block_cgKD2_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           _sgADJ::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgADJ::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKD0_info" {
     block_cgKD0_info:
         const _cgKD0;
         const 3;
         const 144115192370823198;
         const SgBbV_srt+432;
 },
 _cgKD2() //  [R1, R2]
         { []
         }
     {offset
       cgKD2: // global
           I64[Sp] = block_cgKD4_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKD2_info" {
     block_cgKD2_info:
         const _cgKD2;
         const 5;
         const 144115192370823198;
         const SgBbV_srt+432;
 },
 _cgKD4() //  [R1, R2]
         { []
         }
     {offset
       cgKD4: // global
           I64[Sp] = block_cgKD6_info;
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           _sgADP::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp + 8] = _sgADP::P64;
           P64[Sp + 16] = R1;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKD4_info" {
     block_cgKD4_info:
         const _cgKD4;
         const 5;
         const 144115192370823198;
         const SgBbV_srt+432;
 },
 _cgKD6() //  [R1, R2]
         { []
         }
     {offset
       cgKD6: // global
           I64[Sp] = block_cgKD8_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKD6_info" {
     block_cgKD6_info:
         const _cgKD6;
         const 5;
         const 144115192370823198;
         const SgBbV_srt+432;
 },
 _cgKD8() //  [R1, R2]
         { []
         }
     {offset
       cgKD8: // global
           _sgADO::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgKDa_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgADO::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKD8_info" {
     block_cgKD8_info:
         const _cgKD8;
         const 5;
         const 4294967326;
         const SgBbV_srt+800;
 },
 _cgKDa() //  [R1, R2]
         { []
         }
     {offset
       cgKDa: // global
           I64[Sp] = block_cgKDc_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKDa_info" {
     block_cgKDa_info:
         const _cgKDa;
         const 3;
         const 4294967326;
         const SgBbV_srt+800;
 },
 _cgKDc() //  [R1, R2]
         { []
         }
     {offset
       cgKDc: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKDc_info" {
     block_cgKDc_info:
         const _cgKDc;
         const 387;
         const 4294967326;
         const SgBbV_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.938929494 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cacosh_closure" {
     Data.Complex.$fFloatingComplex_$cacosh_closure:
         const Data.Complex.$fFloatingComplex_$cacosh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cacosh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgKDX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKE3; else goto cgKE4;
       cgKE3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cacosh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKE4: // global
           I64[Sp - 16] = block_cgKDU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugKE9; else goto cgKDV;
       ugKE9: // global
           call _cgKDU(R1) args: 0, res: 0, upd: 0;
       cgKDV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cacosh_info" {
     Data.Complex.$fFloatingComplex_$cacosh_info:
         const Data.Complex.$fFloatingComplex_$cacosh_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SgBbV_srt+792;
 },
 _cgKDU() //  [R1]
         { []
         }
     {offset
       cgKDU: // global
           _sgAE2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKE0_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAE2::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cacosh_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKDU_info" {
     block_cgKDU_info:
         const _cgKDU;
         const 1;
         const 4294967326;
         const SgBbV_srt+792;
 },
 _cgKE0() //  [R1, R2]
         { []
         }
     {offset
       cgKE0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKE8; else goto cgKE7;
       cgKE8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKE7: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKE0_info" {
     block_cgKE0_info:
         const _cgKE0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.95636749 UTC

[section ""data" . Data.Complex.$w$s$casinh1_closure" {
     Data.Complex.$w$s$casinh1_closure:
         const Data.Complex.$w$s$casinh1_info;
         const 0;
 },
 Data.Complex.$w$s$casinh1_slow() //  [R1]
         { []
         }
     {offset
       cgKEo: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casinh1_entry(F2,
                                                F1,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$casinh1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgKEu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKFk; else goto cgKFl;
       cgKFk: // global
           R1 = Data.Complex.$w$s$casinh1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKFl: // global
           I64[Sp - 24] = block_cgKEO_info;
           _sgAEb::F32 = F2;
           _sgAEf::F32 = %MO_F_Add_W32(%MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1),
                                                     %MO_F_Mul_W32(F2, F2)),
                                       1.0 :: W32);
           F2 = %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1));
           _sgAEa::F32 = F1;
           F1 = _sgAEf::F32;
           F32[Sp - 16] = _sgAEa::F32;
           F32[Sp - 8] = _sgAEb::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casinh1_info" {
     Data.Complex.$w$s$casinh1_info:
         const Data.Complex.$w$s$casinh1_entry;
         const 0;
         const 4629700421231837198;
         const 8589934592;
         const SgBbV_srt+576;
         const 194;
         const Data.Complex.$w$s$casinh1_slow;
 },
 _cgKEO() //  [R1, R2]
         { []
         }
     {offset
       cgKEO: // global
           I64[Sp - 8] = block_cgKEQ_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKFt; else goto cgKER;
       ugKFt: // global
           call _cgKEQ(R1) args: 0, res: 0, upd: 0;
       cgKER: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKEO_info" {
     block_cgKEO_info:
         const _cgKEO;
         const 194;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKEQ() //  [R1]
         { []
         }
     {offset
       cgKEQ: // global
           I64[Sp] = block_cgKEV_info;
           _sgAEn::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAEn::F32;
           if (R1 & 7 != 0) goto ugKFu; else goto cgKEW;
       ugKFu: // global
           call _cgKEV(R1) args: 0, res: 0, upd: 0;
       cgKEW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKEQ_info" {
     block_cgKEQ_info:
         const _cgKEQ;
         const 387;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKEV() //  [R1]
         { []
         }
     {offset
       cgKEV: // global
           _sgAEq::F32 = %MO_F_Add_W32(F32[Sp + 24], F32[R1 + 7]);
           _sgAEr::F32 = %MO_F_Add_W32(F32[Sp + 16], F32[Sp + 8]);
           I64[Sp + 8] = block_cgKF6_info;
           F2 = _sgAEq::F32;
           F1 = _sgAEr::F32;
           F32[Sp + 16] = _sgAEr::F32;
           F32[Sp + 24] = _sgAEq::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKEV_info" {
     block_cgKEV_info:
         const _cgKEV;
         const 451;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKF6() //  [F1]
         { []
         }
     {offset
       cgKF6: // global
           _sgAEq::F32 = F32[Sp + 16];
           _sgAEr::F32 = F32[Sp + 8];
           _cgKFb::F32 = F1;
           (_cgKFa::F32) = call MO_F32_Log(_cgKFb::F32);
           I64[Sp + 8] = block_cgKFe_info;
           F2 = _sgAEq::F32;
           F1 = _sgAEr::F32;
           F32[Sp + 16] = _cgKFa::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKF6_info" {
     block_cgKF6_info:
         const _cgKF6;
         const 194;
         const 30;
 },
 _cgKFe() //  [F1]
         { []
         }
     {offset
       cgKFe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKFs; else goto cgKFr;
       cgKFs: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgKFr: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = F1;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F32[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKFe_info" {
     block_cgKFe_info:
         const _cgKFe;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:31.980744878 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casinh1_closure" {
     Data.Complex.$fFloatingComplex_$s$casinh1_closure:
         const Data.Complex.$fFloatingComplex_$s$casinh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casinh1_entry() //  [R2]
         { []
         }
     {offset
       cgKGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKGv; else goto cgKGw;
       cgKGv: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casinh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKGw: // global
           I64[Sp - 8] = block_cgKGc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKGE; else goto cgKGd;
       ugKGE: // global
           call _cgKGc(R1) args: 0, res: 0, upd: 0;
       cgKGd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casinh1_info" {
     Data.Complex.$fFloatingComplex_$s$casinh1_info:
         const Data.Complex.$fFloatingComplex_$s$casinh1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+816;
 },
 _cgKGc() //  [R1]
         { []
         }
     {offset
       cgKGc: // global
           I64[Sp - 8] = block_cgKGi_info;
           _sgAEA::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAEA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKGD; else goto cgKGj;
       ugKGD: // global
           call _cgKGi(R1) args: 0, res: 0, upd: 0;
       cgKGj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKGc_info" {
     block_cgKGc_info:
         const _cgKGc;
         const 0;
         const 4294967326;
         const SgBbV_srt+816;
 },
 _cgKGi() //  [R1]
         { []
         }
     {offset
       cgKGi: // global
           I64[Sp] = block_cgKGn_info;
           _sgAEC::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAEC::F32;
           if (R1 & 7 != 0) goto ugKGF; else goto cgKGo;
       ugKGF: // global
           call _cgKGn(R1) args: 0, res: 0, upd: 0;
       cgKGo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKGi_info" {
     block_cgKGi_info:
         const _cgKGi;
         const 1;
         const 4294967326;
         const SgBbV_srt+816;
 },
 _cgKGn() //  [R1]
         { []
         }
     {offset
       cgKGn: // global
           _sgAEC::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgKGs_info;
           F2 = F32[R1 + 7];
           F1 = _sgAEC::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casinh1_entry(F2,
                                                F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKGn_info" {
     block_cgKGn_info:
         const _cgKGn;
         const 65;
         const 4294967326;
         const SgBbV_srt+816;
 },
 _cgKGs() //  [R1, R2]
         { []
         }
     {offset
       cgKGs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKGC; else goto cgKGB;
       cgKGC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKGB: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKGs_info" {
     block_cgKGs_info:
         const _cgKGs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.000361619 UTC

[section ""data" . Data.Complex.$w$s$casinh_closure" {
     Data.Complex.$w$s$casinh_closure:
         const Data.Complex.$w$s$casinh_info;
         const 0;
 },
 Data.Complex.$w$s$casinh_slow() //  [R1]
         { []
         }
     {offset
       cgKH2: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casinh_entry(D2,
                                               D1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$casinh_entry() //  [D1, D2]
         { []
         }
     {offset
       cgKH8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKHY; else goto cgKHZ;
       cgKHY: // global
           R1 = Data.Complex.$w$s$casinh_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKHZ: // global
           I64[Sp - 24] = block_cgKHs_info;
           _sgAEJ::F64 = D2;
           _sgAEN::F64 = %MO_F_Add_W64(%MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1),
                                                     %MO_F_Mul_W64(D2, D2)),
                                       1.0 :: W64);
           D2 = %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1));
           _sgAEI::F64 = D1;
           D1 = _sgAEN::F64;
           F64[Sp - 16] = _sgAEI::F64;
           F64[Sp - 8] = _sgAEJ::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casinh_info" {
     Data.Complex.$w$s$casinh_info:
         const Data.Complex.$w$s$casinh_entry;
         const 0;
         const 4647714819741319182;
         const 8589934592;
         const SgBbV_srt+592;
         const 194;
         const Data.Complex.$w$s$casinh_slow;
 },
 _cgKHs() //  [R1, R2]
         { []
         }
     {offset
       cgKHs: // global
           I64[Sp - 8] = block_cgKHu_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKI7; else goto cgKHv;
       ugKI7: // global
           call _cgKHu(R1) args: 0, res: 0, upd: 0;
       cgKHv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKHs_info" {
     block_cgKHs_info:
         const _cgKHs;
         const 194;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKHu() //  [R1]
         { []
         }
     {offset
       cgKHu: // global
           I64[Sp] = block_cgKHz_info;
           _sgAEV::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAEV::F64;
           if (R1 & 7 != 0) goto ugKI8; else goto cgKHA;
       ugKI8: // global
           call _cgKHz(R1) args: 0, res: 0, upd: 0;
       cgKHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKHu_info" {
     block_cgKHu_info:
         const _cgKHu;
         const 387;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKHz() //  [R1]
         { []
         }
     {offset
       cgKHz: // global
           _sgAEY::F64 = %MO_F_Add_W64(F64[Sp + 24], F64[R1 + 7]);
           _sgAEZ::F64 = %MO_F_Add_W64(F64[Sp + 16], F64[Sp + 8]);
           I64[Sp + 8] = block_cgKHK_info;
           D2 = _sgAEY::F64;
           D1 = _sgAEZ::F64;
           F64[Sp + 16] = _sgAEZ::F64;
           F64[Sp + 24] = _sgAEY::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKHz_info" {
     block_cgKHz_info:
         const _cgKHz;
         const 451;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKHK() //  [D1]
         { []
         }
     {offset
       cgKHK: // global
           _sgAEY::F64 = F64[Sp + 16];
           _sgAEZ::F64 = F64[Sp + 8];
           _cgKHP::F64 = D1;
           (_cgKHO::F64) = call MO_F64_Log(_cgKHP::F64);
           I64[Sp + 8] = block_cgKHS_info;
           D2 = _sgAEY::F64;
           D1 = _sgAEZ::F64;
           F64[Sp + 16] = _cgKHO::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKHK_info" {
     block_cgKHK_info:
         const _cgKHK;
         const 194;
         const 30;
 },
 _cgKHS() //  [D1]
         { []
         }
     {offset
       cgKHS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKI6; else goto cgKI5;
       cgKI6: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgKI5: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = D1;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = F64[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKHS_info" {
     block_cgKHS_info:
         const _cgKHS;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.021346896 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casinh_closure" {
     Data.Complex.$fFloatingComplex_$s$casinh_closure:
         const Data.Complex.$fFloatingComplex_$s$casinh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casinh_entry() //  [R2]
         { []
         }
     {offset
       cgKIT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKJ9; else goto cgKJa;
       cgKJ9: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKJa: // global
           I64[Sp - 8] = block_cgKIQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKJi; else goto cgKIR;
       ugKJi: // global
           call _cgKIQ(R1) args: 0, res: 0, upd: 0;
       cgKIR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casinh_info" {
     Data.Complex.$fFloatingComplex_$s$casinh_info:
         const Data.Complex.$fFloatingComplex_$s$casinh_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+832;
 },
 _cgKIQ() //  [R1]
         { []
         }
     {offset
       cgKIQ: // global
           I64[Sp - 8] = block_cgKIW_info;
           _sgAF8::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAF8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKJh; else goto cgKIX;
       ugKJh: // global
           call _cgKIW(R1) args: 0, res: 0, upd: 0;
       cgKIX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKIQ_info" {
     block_cgKIQ_info:
         const _cgKIQ;
         const 0;
         const 4294967326;
         const SgBbV_srt+832;
 },
 _cgKIW() //  [R1]
         { []
         }
     {offset
       cgKIW: // global
           I64[Sp] = block_cgKJ1_info;
           _sgAFa::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAFa::F64;
           if (R1 & 7 != 0) goto ugKJj; else goto cgKJ2;
       ugKJj: // global
           call _cgKJ1(R1) args: 0, res: 0, upd: 0;
       cgKJ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKIW_info" {
     block_cgKIW_info:
         const _cgKIW;
         const 1;
         const 4294967326;
         const SgBbV_srt+832;
 },
 _cgKJ1() //  [R1]
         { []
         }
     {offset
       cgKJ1: // global
           _sgAFa::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgKJ6_info;
           D2 = F64[R1 + 7];
           D1 = _sgAFa::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casinh_entry(D2,
                                               D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKJ1_info" {
     block_cgKJ1_info:
         const _cgKJ1;
         const 65;
         const 4294967326;
         const SgBbV_srt+832;
 },
 _cgKJ6() //  [R1, R2]
         { []
         }
     {offset
       cgKJ6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKJg; else goto cgKJf;
       cgKJg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKJf: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKJ6_info" {
     block_cgKJ6_info:
         const _cgKJ6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.036199333 UTC

[section ""data" . Data.Complex.$w$casinh_closure" {
     Data.Complex.$w$casinh_closure:
         const Data.Complex.$w$casinh_info;
         const 0;
 },
 section ""relreadonly" . ugKK1_srtd" {
     ugKK1_srtd:
         const SgBbV_srt+520;
         const 42;
         const 2233384058881;
 },
 Data.Complex.$w$casinh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgKJT: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgKJU; else goto cgKJV;
       cgKJU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$casinh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKJV: // global
           I64[Sp - 32] = block_cgKJJ_info;
           _sgAFh::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgAFg::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAFg::P64;
           P64[Sp - 16] = _sgAFh::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$casinh_info" {
     Data.Complex.$w$casinh_info:
         const Data.Complex.$w$casinh_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugKK1_srtd;
 },
 _cgKJJ() //  [R1, R2]
         { []
         }
     {offset
       cgKJJ: // global
           I64[Sp - 16] = block_cgKJL_info;
           _sgAFi::P64 = P64[Sp + 24];
           R6 = _sgAFi::P64;
           _sgAFh::P64 = P64[Sp + 16];
           R5 = _sgAFh::P64;
           R4 = _sgAFi::P64;
           R3 = _sgAFh::P64;
           _sgAFl::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgAFl::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKJJ_info" {
     block_cgKJJ_info:
         const _cgKJJ;
         const 3;
         const 9007203549708318;
         const SgBbV_srt+632;
 },
 _cgKJL() //  [R1, R2]
         { []
         }
     {offset
       cgKJL: // global
           _sgAFk::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgKJN_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgAFk::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKJL_info" {
     block_cgKJL_info:
         const _cgKJL;
         const 5;
         const 9007203549708318;
         const SgBbV_srt+632;
 },
 _cgKJN() //  [R1, R2]
         { []
         }
     {offset
       cgKJN: // global
           I64[Sp] = block_cgKJP_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKJN_info" {
     block_cgKJN_info:
         const _cgKJN;
         const 3;
         const 9007203549708318;
         const SgBbV_srt+632;
 },
 _cgKJP() //  [R1, R2]
         { []
         }
     {offset
       cgKJP: // global
           I64[Sp] = block_cgKJR_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKJP_info" {
     block_cgKJP_info:
         const _cgKJP;
         const 3;
         const 4294967326;
         const SgBbV_srt+800;
 },
 _cgKJR() //  [R1, R2]
         { []
         }
     {offset
       cgKJR: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKJR_info" {
     block_cgKJR_info:
         const _cgKJR;
         const 387;
         const 4294967326;
         const SgBbV_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.056743876 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$casinh_closure" {
     Data.Complex.$fFloatingComplex_$casinh_closure:
         const Data.Complex.$fFloatingComplex_$casinh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$casinh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgKKu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKKA; else goto cgKKB;
       cgKKA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$casinh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKKB: // global
           I64[Sp - 16] = block_cgKKr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugKKG; else goto cgKKs;
       ugKKG: // global
           call _cgKKr(R1) args: 0, res: 0, upd: 0;
       cgKKs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$casinh_info" {
     Data.Complex.$fFloatingComplex_$casinh_info:
         const Data.Complex.$fFloatingComplex_$casinh_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+848;
 },
 _cgKKr() //  [R1]
         { []
         }
     {offset
       cgKKr: // global
           _sgAFy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKKx_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAFy::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$casinh_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKKr_info" {
     block_cgKKr_info:
         const _cgKKr;
         const 1;
         const 4294967326;
         const SgBbV_srt+848;
 },
 _cgKKx() //  [R1, R2]
         { []
         }
     {offset
       cgKKx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKKF; else goto cgKKE;
       cgKKF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKKE: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKKx_info" {
     block_cgKKx_info:
         const _cgKKx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.072154231 UTC

[section ""data" . Data.Complex.$w$s$catan1_closure" {
     Data.Complex.$w$s$catan1_closure:
         const Data.Complex.$w$s$catan1_info;
         const 0;
 },
 Data.Complex.$w$s$catan1_slow() //  [R1]
         { []
         }
     {offset
       cgKKV: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catan1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugKMj_srtd" {
     ugKMj_srtd:
         const SgBbV_srt+576;
         const 37;
         const 68723673089;
 },
 Data.Complex.$w$s$catan1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgKL1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKM3; else goto cgKM4;
       cgKM3: // global
           R1 = Data.Complex.$w$s$catan1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKM4: // global
           I64[Sp - 24] = block_cgKLl_info;
           _sgAFH::F32 = F2;
           _sgAFL::F32 = %MO_F_Add_W32(%MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1),
                                                     %MO_F_Mul_W32(F2, F2)),
                                       1.0 :: W32);
           F2 = %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1));
           _sgAFG::F32 = F1;
           F1 = _sgAFL::F32;
           F32[Sp - 16] = _sgAFG::F32;
           F32[Sp - 8] = _sgAFH::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catan1_info" {
     Data.Complex.$w$s$catan1_info:
         const Data.Complex.$w$s$catan1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugKMj_srtd;
         const 194;
         const Data.Complex.$w$s$catan1_slow;
 },
 _cgKLl() //  [R1, R2]
         { []
         }
     {offset
       cgKLl: // global
           I64[Sp - 8] = block_cgKLn_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKMf; else goto cgKLo;
       ugKMf: // global
           call _cgKLn(R1) args: 0, res: 0, upd: 0;
       cgKLo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLl_info" {
     block_cgKLl_info:
         const _cgKLl;
         const 194;
         const 8800387989534;
         const SgBbV_srt+664;
 },
 _cgKLn() //  [R1]
         { []
         }
     {offset
       cgKLn: // global
           I64[Sp] = block_cgKLs_info;
           _sgAFT::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAFT::F32;
           if (R1 & 7 != 0) goto ugKMg; else goto cgKLt;
       ugKMg: // global
           call _cgKLs(R1) args: 0, res: 0, upd: 0;
       cgKLt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLn_info" {
     block_cgKLn_info:
         const _cgKLn;
         const 387;
         const 8800387989534;
         const SgBbV_srt+664;
 },
 _cgKLs() //  [R1]
         { []
         }
     {offset
       cgKLs: // global
           _sgAFW::F32 = %MO_F_Sub_W32(1.0 :: W32, F32[Sp + 24]);
           I64[Sp + 24] = block_cgKLA_info;
           F4 = F32[R1 + 7];
           F3 = F32[Sp + 8];
           F2 = F32[Sp + 16];
           F1 = _sgAFW::F32;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLs_info" {
     block_cgKLs_info:
         const _cgKLs;
         const 451;
         const 8800387989534;
         const SgBbV_srt+664;
 },
 _cgKLA() //  [R1, R2]
         { []
         }
     {offset
       cgKLA: // global
           I64[Sp - 8] = block_cgKLC_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKMh; else goto cgKLD;
       ugKMh: // global
           call _cgKLC(R1) args: 0, res: 0, upd: 0;
       cgKLD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLA_info" {
     block_cgKLA_info:
         const _cgKLA;
         const 0;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKLC() //  [R1]
         { []
         }
     {offset
       cgKLC: // global
           I64[Sp] = block_cgKLH_info;
           _sgAG1::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAG1::F32;
           if (R1 & 7 != 0) goto ugKMi; else goto cgKLI;
       ugKMi: // global
           call _cgKLH(R1) args: 0, res: 0, upd: 0;
       cgKLI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLC_info" {
     block_cgKLC_info:
         const _cgKLC;
         const 1;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKLH() //  [R1]
         { []
         }
     {offset
       cgKLH: // global
           I64[Sp - 8] = block_cgKLM_info;
           _sgAG3::F32 = F32[R1 + 7];
           F2 = _sgAG3::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgAG3::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLH_info" {
     block_cgKLH_info:
         const _cgKLH;
         const 65;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKLM() //  [F1]
         { []
         }
     {offset
       cgKLM: // global
           _sgAG1::F32 = F32[Sp + 16];
           _sgAG3::F32 = F32[Sp + 8];
           _cgKLR::F32 = F1;
           (_cgKLQ::F32) = call MO_F32_Log(_cgKLR::F32);
           I64[Sp + 8] = block_cgKLU_info;
           F2 = _sgAG3::F32;
           F1 = _sgAG1::F32;
           F32[Sp + 16] = _cgKLQ::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLM_info" {
     block_cgKLM_info:
         const _cgKLM;
         const 194;
         const 30;
 },
 _cgKLU() //  [F1]
         { []
         }
     {offset
       cgKLU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKMe; else goto cgKMd;
       cgKMe: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgKMd: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKLU_info" {
     block_cgKLU_info:
         const _cgKLU;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.101050504 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catan1_closure" {
     Data.Complex.$fFloatingComplex_$s$catan1_closure:
         const Data.Complex.$fFloatingComplex_$s$catan1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catan1_entry() //  [R2]
         { []
         }
     {offset
       cgKNh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKNx; else goto cgKNy;
       cgKNx: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKNy: // global
           I64[Sp - 8] = block_cgKNe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKNG; else goto cgKNf;
       ugKNG: // global
           call _cgKNe(R1) args: 0, res: 0, upd: 0;
       cgKNf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catan1_info" {
     Data.Complex.$fFloatingComplex_$s$catan1_info:
         const Data.Complex.$fFloatingComplex_$s$catan1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+864;
 },
 _cgKNe() //  [R1]
         { []
         }
     {offset
       cgKNe: // global
           I64[Sp - 8] = block_cgKNk_info;
           _sgAGd::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAGd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKNF; else goto cgKNl;
       ugKNF: // global
           call _cgKNk(R1) args: 0, res: 0, upd: 0;
       cgKNl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKNe_info" {
     block_cgKNe_info:
         const _cgKNe;
         const 0;
         const 4294967326;
         const SgBbV_srt+864;
 },
 _cgKNk() //  [R1]
         { []
         }
     {offset
       cgKNk: // global
           I64[Sp] = block_cgKNp_info;
           _sgAGf::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAGf::F32;
           if (R1 & 7 != 0) goto ugKNH; else goto cgKNq;
       ugKNH: // global
           call _cgKNp(R1) args: 0, res: 0, upd: 0;
       cgKNq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKNk_info" {
     block_cgKNk_info:
         const _cgKNk;
         const 1;
         const 4294967326;
         const SgBbV_srt+864;
 },
 _cgKNp() //  [R1]
         { []
         }
     {offset
       cgKNp: // global
           _sgAGf::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgKNu_info;
           F2 = F32[R1 + 7];
           F1 = _sgAGf::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catan1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKNp_info" {
     block_cgKNp_info:
         const _cgKNp;
         const 65;
         const 4294967326;
         const SgBbV_srt+864;
 },
 _cgKNu() //  [R1, R2]
         { []
         }
     {offset
       cgKNu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKNE; else goto cgKND;
       cgKNE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKND: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKNu_info" {
     block_cgKNu_info:
         const _cgKNu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.11935452 UTC

[section ""data" . Data.Complex.$w$s$catan_closure" {
     Data.Complex.$w$s$catan_closure:
         const Data.Complex.$w$s$catan_info;
         const 0;
 },
 Data.Complex.$w$s$catan_slow() //  [R1]
         { []
         }
     {offset
       cgKO4: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catan_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugKPs_srtd" {
     ugKPs_srtd:
         const SgBbV_srt+592;
         const 37;
         const 68727930881;
 },
 Data.Complex.$w$s$catan_entry() //  [D1, D2]
         { []
         }
     {offset
       cgKOa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKPc; else goto cgKPd;
       cgKPc: // global
           R1 = Data.Complex.$w$s$catan_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKPd: // global
           I64[Sp - 24] = block_cgKOu_info;
           _sgAGm::F64 = D2;
           _sgAGq::F64 = %MO_F_Add_W64(%MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1),
                                                     %MO_F_Mul_W64(D2, D2)),
                                       1.0 :: W64);
           D2 = %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1));
           _sgAGl::F64 = D1;
           D1 = _sgAGq::F64;
           F64[Sp - 16] = _sgAGl::F64;
           F64[Sp - 8] = _sgAGm::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catan_info" {
     Data.Complex.$w$s$catan_info:
         const Data.Complex.$w$s$catan_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugKPs_srtd;
         const 194;
         const Data.Complex.$w$s$catan_slow;
 },
 _cgKOu() //  [R1, R2]
         { []
         }
     {offset
       cgKOu: // global
           I64[Sp - 8] = block_cgKOw_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKPo; else goto cgKOx;
       ugKPo: // global
           call _cgKOw(R1) args: 0, res: 0, upd: 0;
       cgKOx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKOu_info" {
     block_cgKOu_info:
         const _cgKOu;
         const 194;
         const 554050781214;
         const SgBbV_srt+720;
 },
 _cgKOw() //  [R1]
         { []
         }
     {offset
       cgKOw: // global
           I64[Sp] = block_cgKOB_info;
           _sgAGy::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAGy::F64;
           if (R1 & 7 != 0) goto ugKPp; else goto cgKOC;
       ugKPp: // global
           call _cgKOB(R1) args: 0, res: 0, upd: 0;
       cgKOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKOw_info" {
     block_cgKOw_info:
         const _cgKOw;
         const 387;
         const 554050781214;
         const SgBbV_srt+720;
 },
 _cgKOB() //  [R1]
         { []
         }
     {offset
       cgKOB: // global
           _sgAGB::F64 = %MO_F_Sub_W64(1.0 :: W64, F64[Sp + 24]);
           I64[Sp + 24] = block_cgKOJ_info;
           D4 = F64[R1 + 7];
           D3 = F64[Sp + 8];
           D2 = F64[Sp + 16];
           D1 = _sgAGB::F64;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKOB_info" {
     block_cgKOB_info:
         const _cgKOB;
         const 451;
         const 554050781214;
         const SgBbV_srt+720;
 },
 _cgKOJ() //  [R1, R2]
         { []
         }
     {offset
       cgKOJ: // global
           I64[Sp - 8] = block_cgKOL_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKPq; else goto cgKOM;
       ugKPq: // global
           call _cgKOL(R1) args: 0, res: 0, upd: 0;
       cgKOM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKOJ_info" {
     block_cgKOJ_info:
         const _cgKOJ;
         const 0;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKOL() //  [R1]
         { []
         }
     {offset
       cgKOL: // global
           I64[Sp] = block_cgKOQ_info;
           _sgAGG::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAGG::F64;
           if (R1 & 7 != 0) goto ugKPr; else goto cgKOR;
       ugKPr: // global
           call _cgKOQ(R1) args: 0, res: 0, upd: 0;
       cgKOR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKOL_info" {
     block_cgKOL_info:
         const _cgKOL;
         const 1;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKOQ() //  [R1]
         { []
         }
     {offset
       cgKOQ: // global
           I64[Sp - 8] = block_cgKOV_info;
           _sgAGI::F64 = F64[R1 + 7];
           D2 = _sgAGI::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgAGI::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKOQ_info" {
     block_cgKOQ_info:
         const _cgKOQ;
         const 65;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKOV() //  [D1]
         { []
         }
     {offset
       cgKOV: // global
           _sgAGG::F64 = F64[Sp + 16];
           _sgAGI::F64 = F64[Sp + 8];
           _cgKP0::F64 = D1;
           (_cgKOZ::F64) = call MO_F64_Log(_cgKP0::F64);
           I64[Sp + 8] = block_cgKP3_info;
           D2 = _sgAGI::F64;
           D1 = _sgAGG::F64;
           F64[Sp + 16] = _cgKOZ::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKOV_info" {
     block_cgKOV_info:
         const _cgKOV;
         const 194;
         const 30;
 },
 _cgKP3() //  [D1]
         { []
         }
     {offset
       cgKP3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKPn; else goto cgKPm;
       cgKPn: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgKPm: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKP3_info" {
     block_cgKP3_info:
         const _cgKP3;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.149049158 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catan_closure" {
     Data.Complex.$fFloatingComplex_$s$catan_closure:
         const Data.Complex.$fFloatingComplex_$s$catan_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catan_entry() //  [R2]
         { []
         }
     {offset
       cgKQq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKQG; else goto cgKQH;
       cgKQG: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKQH: // global
           I64[Sp - 8] = block_cgKQn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKQP; else goto cgKQo;
       ugKQP: // global
           call _cgKQn(R1) args: 0, res: 0, upd: 0;
       cgKQo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catan_info" {
     Data.Complex.$fFloatingComplex_$s$catan_info:
         const Data.Complex.$fFloatingComplex_$s$catan_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+880;
 },
 _cgKQn() //  [R1]
         { []
         }
     {offset
       cgKQn: // global
           I64[Sp - 8] = block_cgKQt_info;
           _sgAGS::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAGS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKQO; else goto cgKQu;
       ugKQO: // global
           call _cgKQt(R1) args: 0, res: 0, upd: 0;
       cgKQu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKQn_info" {
     block_cgKQn_info:
         const _cgKQn;
         const 0;
         const 4294967326;
         const SgBbV_srt+880;
 },
 _cgKQt() //  [R1]
         { []
         }
     {offset
       cgKQt: // global
           I64[Sp] = block_cgKQy_info;
           _sgAGU::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAGU::F64;
           if (R1 & 7 != 0) goto ugKQQ; else goto cgKQz;
       ugKQQ: // global
           call _cgKQy(R1) args: 0, res: 0, upd: 0;
       cgKQz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKQt_info" {
     block_cgKQt_info:
         const _cgKQt;
         const 1;
         const 4294967326;
         const SgBbV_srt+880;
 },
 _cgKQy() //  [R1]
         { []
         }
     {offset
       cgKQy: // global
           _sgAGU::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgKQD_info;
           D2 = F64[R1 + 7];
           D1 = _sgAGU::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catan_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKQy_info" {
     block_cgKQy_info:
         const _cgKQy;
         const 65;
         const 4294967326;
         const SgBbV_srt+880;
 },
 _cgKQD() //  [R1, R2]
         { []
         }
     {offset
       cgKQD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKQN; else goto cgKQM;
       cgKQN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKQM: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKQD_info" {
     block_cgKQD_info:
         const _cgKQD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.170328731 UTC

[section ""data" . Data.Complex.$w$catan_closure" {
     Data.Complex.$w$catan_closure:
         const Data.Complex.$w$catan_info;
         const 0;
 },
 sat_sgAH6_entry() //  [R1]
         { []
         }
     {offset
       cgKRw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKRx; else goto cgKRy;
       cgKRx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKRy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAH6_info" {
     sat_sgAH6_info:
         const sat_sgAH6_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+680;
 },
 sat_sgAHo_entry() //  [R1]
         { []
         }
     {offset
       cgKRP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKRQ; else goto cgKRR;
       cgKRQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgKRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAHo_info" {
     sat_sgAHo_info:
         const sat_sgAHo_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugKSm_srtd" {
     ugKSm_srtd:
         const SgBbV_srt+312;
         const 74;
         const 71468322914305;
         const 512;
 },
 Data.Complex.$w$catan_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgKRS: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgKS2; else goto cgKS3;
       cgKS2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$catan_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKS3: // global
           I64[Sp - 32] = block_cgKRg_info;
           _sgAH0::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAH0::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$catan_info" {
     Data.Complex.$w$catan_info:
         const Data.Complex.$w$catan_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugKSm_srtd;
 },
 section ""relreadonly" . ugKSn_srtd" {
     ugKSn_srtd:
         const SgBbV_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgKRg() //  [R1]
         { []
         }
     {offset
       cgKRg: // global
           I64[Sp] = block_cgKRk_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRg_info" {
     block_cgKRg_info:
         const _cgKRg;
         const 3;
         const 18446744069414584350;
         const ugKSn_srtd;
 },
 section ""relreadonly" . ugKSo_srtd" {
     ugKSo_srtd:
         const SgBbV_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgKRk() //  [R1]
         { []
         }
     {offset
       cgKRk: // global
           I64[Sp] = block_cgKRo_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRk_info" {
     block_cgKRk_info:
         const _cgKRk;
         const 3;
         const 18446744069414584350;
         const ugKSo_srtd;
 },
 section ""relreadonly" . ugKSp_srtd" {
     ugKSp_srtd:
         const SgBbV_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgKRo() //  [R1]
         { []
         }
     {offset
       cgKRo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKS8; else goto cgKS7;
       cgKS8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgKS7: // global
           I64[Hp - 16] = sat_sgAH6_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgKRz_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRo_info" {
     block_cgKRo_info:
         const _cgKRo;
         const 3;
         const 18446744069414584350;
         const ugKSp_srtd;
 },
 section ""relreadonly" . ugKSq_srtd" {
     ugKSq_srtd:
         const SgBbV_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgKRz() //  [R1]
         { []
         }
     {offset
       cgKRz: // global
           I64[Sp - 8] = block_cgKRB_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 16];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRz_info" {
     block_cgKRz_info:
         const _cgKRz;
         const 4;
         const 18446744069414584350;
         const ugKSq_srtd;
 },
 _cgKRB() //  [R1, R2]
         { []
         }
     {offset
       cgKRB: // global
           I64[Sp - 8] = block_cgKRD_info;
           _sgAH2::P64 = P64[Sp + 40];
           R6 = _sgAH2::P64;
           _sgAH1::P64 = P64[Sp + 32];
           R5 = _sgAH1::P64;
           R4 = _sgAH2::P64;
           R3 = _sgAH1::P64;
           _sgAHa::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp] = _sgAHa::P64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRB_info" {
     block_cgKRB_info:
         const _cgKRB;
         const 5;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgKRD() //  [R1, R2]
         { []
         }
     {offset
       cgKRD: // global
           _sgAHa::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKRF_info;
           R6 = R2;
           R5 = R1;
           R4 = _sgAHa::P64;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 32];
           Sp = Sp + 8;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRD_info" {
     block_cgKRD_info:
         const _cgKRD;
         const 6;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgKRF() //  [R1, R2]
         { []
         }
     {offset
       cgKRF: // global
           I64[Sp] = block_cgKRH_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRF_info" {
     block_cgKRF_info:
         const _cgKRF;
         const 1029;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgKRH() //  [R1, R2]
         { []
         }
     {offset
       cgKRH: // global
           _sgAH7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKRJ_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 32];
           R3 = _sgAH7::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRH_info" {
     block_cgKRH_info:
         const _cgKRH;
         const 1029;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgKRJ() //  [R1, R2]
         { []
         }
     {offset
       cgKRJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgKSg; else goto cgKSf;
       cgKSg: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKSf: // global
           I64[Hp - 32] = sat_sgAHo_info;
           _sgAH0::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgAH0::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp - 8] = block_cgKRT_info;
           _sgAHm::P64 = R2;
           R2 = _sgAH0::P64;
           P64[Sp] = _sgAHm::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRJ_info" {
     block_cgKRJ_info:
         const _cgKRJ;
         const 772;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgKRT() //  [R1]
         { []
         }
     {offset
       cgKRT: // global
           I64[Sp] = block_cgKRX_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRT_info" {
     block_cgKRT_info:
         const _cgKRT;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgKRX() //  [R1]
         { []
         }
     {offset
       cgKRX: // global
           _sgAHm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKRZ_info;
           R4 = _sgAHm::P64;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRX_info" {
     block_cgKRX_info:
         const _cgKRX;
         const 1029;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgKRZ() //  [R1]
         { []
         }
     {offset
       cgKRZ: // global
           I64[Sp + 24] = block_cgKS1_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKRZ_info" {
     block_cgKRZ_info:
         const _cgKRZ;
         const 388;
         const 30;
 },
 _cgKS1() //  [R1]
         { []
         }
     {offset
       cgKS1: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKS1_info" {
     block_cgKS1_info:
         const _cgKS1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.201750692 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$catan_closure" {
     Data.Complex.$fFloatingComplex_$catan_closure:
         const Data.Complex.$fFloatingComplex_$catan_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$catan_entry() //  [R2, R3]
         { []
         }
     {offset
       cgKTz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKTF; else goto cgKTG;
       cgKTF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$catan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgKTG: // global
           I64[Sp - 16] = block_cgKTw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugKTL; else goto cgKTx;
       ugKTL: // global
           call _cgKTw(R1) args: 0, res: 0, upd: 0;
       cgKTx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$catan_info" {
     Data.Complex.$fFloatingComplex_$catan_info:
         const Data.Complex.$fFloatingComplex_$catan_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgBbV_srt+896;
 },
 _cgKTw() //  [R1]
         { []
         }
     {offset
       cgKTw: // global
           _sgAHs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgKTC_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAHs::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$catan_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKTw_info" {
     block_cgKTw_info:
         const _cgKTw;
         const 1;
         const 4294967326;
         const SgBbV_srt+896;
 },
 _cgKTC() //  [R1, R2]
         { []
         }
     {offset
       cgKTC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKTK; else goto cgKTJ;
       cgKTK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKTJ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKTC_info" {
     block_cgKTC_info:
         const _cgKTC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.212192177 UTC

[section ""data" . Data.Complex.$w$s$cacos1_closure" {
     Data.Complex.$w$s$cacos1_closure:
         const Data.Complex.$w$s$cacos1_info;
         const 0;
 },
 Data.Complex.$w$s$cacos1_slow() //  [R1]
         { []
         }
     {offset
       cgKU0: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacos1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugKVg_srtd" {
     ugKVg_srtd:
         const SgBbV_srt+576;
         const 45;
         const 17592190238721;
 },
 Data.Complex.$w$s$cacos1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgKU6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKV5; else goto cgKV6;
       cgKV5: // global
           R1 = Data.Complex.$w$s$cacos1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKV6: // global
           I64[Sp - 24] = block_cgKUt_info;
           _sgAHB::F32 = F2;
           _sgAHF::F32 = %MO_F_Sub_W32(1.0 :: W32,
                                       %MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1), %MO_F_Mul_W32(F2, F2)));
           F2 = %MO_F_Sub_W32(0.0 :: W32,
                              %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1)));
           _sgAHA::F32 = F1;
           F1 = _sgAHF::F32;
           F32[Sp - 16] = _sgAHA::F32;
           F32[Sp - 8] = _sgAHB::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacos1_info" {
     Data.Complex.$w$s$cacos1_info:
         const Data.Complex.$w$s$cacos1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugKVg_srtd;
         const 194;
         const Data.Complex.$w$s$cacos1_slow;
 },
 _cgKUt() //  [R1, R2]
         { []
         }
     {offset
       cgKUt: // global
           I64[Sp - 8] = block_cgKUv_info;
           _sgAHL::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgAHL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKVe; else goto cgKUw;
       ugKVe: // global
           call _cgKUv(R1) args: 0, res: 0, upd: 0;
       cgKUw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKUt_info" {
     block_cgKUt_info:
         const _cgKUt;
         const 194;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKUv() //  [R1]
         { []
         }
     {offset
       cgKUv: // global
           I64[Sp] = block_cgKUA_info;
           _sgAHO::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAHO::F32;
           if (R1 & 7 != 0) goto ugKVf; else goto cgKUB;
       ugKVf: // global
           call _cgKUA(R1) args: 0, res: 0, upd: 0;
       cgKUB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKUv_info" {
     block_cgKUv_info:
         const _cgKUv;
         const 387;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKUA() //  [R1]
         { []
         }
     {offset
       cgKUA: // global
           _sgAHR::F32 = %MO_F_Add_W32(F32[Sp + 24], F32[R1 + 7]);
           _sgAHS::F32 = %MO_F_Add_W32(F32[Sp + 16],
                                       %MO_F_Neg_W32(F32[Sp + 8]));
           I64[Sp + 8] = block_cgKUO_info;
           F2 = _sgAHR::F32;
           F1 = _sgAHS::F32;
           F32[Sp + 16] = _sgAHS::F32;
           F32[Sp + 24] = _sgAHR::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKUA_info" {
     block_cgKUA_info:
         const _cgKUA;
         const 451;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgKUO() //  [F1]
         { []
         }
     {offset
       cgKUO: // global
           _sgAHR::F32 = F32[Sp + 16];
           _sgAHS::F32 = F32[Sp + 8];
           _cgKUT::F32 = F1;
           (_cgKUS::F32) = call MO_F32_Log(_cgKUT::F32);
           I64[Sp + 8] = block_cgKUW_info;
           F2 = _sgAHR::F32;
           F1 = _sgAHS::F32;
           F32[Sp + 16] = _cgKUS::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKUO_info" {
     block_cgKUO_info:
         const _cgKUO;
         const 194;
         const 30;
 },
 _cgKUW() //  [F1]
         { []
         }
     {offset
       cgKUW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKVd; else goto cgKVc;
       cgKVd: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgKVc: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKUW_info" {
     block_cgKUW_info:
         const _cgKUW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.233136931 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacos1_closure" {
     Data.Complex.$fFloatingComplex_$s$cacos1_closure:
         const Data.Complex.$fFloatingComplex_$s$cacos1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacos1_entry() //  [R2]
         { []
         }
     {offset
       cgKWa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKWq; else goto cgKWr;
       cgKWq: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacos1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKWr: // global
           I64[Sp - 8] = block_cgKW7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKWz; else goto cgKW8;
       ugKWz: // global
           call _cgKW7(R1) args: 0, res: 0, upd: 0;
       cgKW8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacos1_info" {
     Data.Complex.$fFloatingComplex_$s$cacos1_info:
         const Data.Complex.$fFloatingComplex_$s$cacos1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+928;
 },
 _cgKW7() //  [R1]
         { []
         }
     {offset
       cgKW7: // global
           I64[Sp - 8] = block_cgKWd_info;
           _sgAI3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAI3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKWy; else goto cgKWe;
       ugKWy: // global
           call _cgKWd(R1) args: 0, res: 0, upd: 0;
       cgKWe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKW7_info" {
     block_cgKW7_info:
         const _cgKW7;
         const 0;
         const 4294967326;
         const SgBbV_srt+928;
 },
 _cgKWd() //  [R1]
         { []
         }
     {offset
       cgKWd: // global
           I64[Sp] = block_cgKWi_info;
           _sgAI5::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAI5::F32;
           if (R1 & 7 != 0) goto ugKWA; else goto cgKWj;
       ugKWA: // global
           call _cgKWi(R1) args: 0, res: 0, upd: 0;
       cgKWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKWd_info" {
     block_cgKWd_info:
         const _cgKWd;
         const 1;
         const 4294967326;
         const SgBbV_srt+928;
 },
 _cgKWi() //  [R1]
         { []
         }
     {offset
       cgKWi: // global
           _sgAI5::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgKWn_info;
           F2 = F32[R1 + 7];
           F1 = _sgAI5::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacos1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKWi_info" {
     block_cgKWi_info:
         const _cgKWi;
         const 65;
         const 4294967326;
         const SgBbV_srt+928;
 },
 _cgKWn() //  [R1, R2]
         { []
         }
     {offset
       cgKWn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKWx; else goto cgKWw;
       cgKWx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKWw: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKWn_info" {
     block_cgKWn_info:
         const _cgKWn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.252233959 UTC

[section ""data" . Data.Complex.$w$s$cacos_closure" {
     Data.Complex.$w$s$cacos_closure:
         const Data.Complex.$w$s$cacos_info;
         const 0;
 },
 Data.Complex.$w$s$cacos_slow() //  [R1]
         { []
         }
     {offset
       cgKWX: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacos_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugKYd_srtd" {
     ugKYd_srtd:
         const SgBbV_srt+592;
         const 45;
         const 17592194433025;
 },
 Data.Complex.$w$s$cacos_entry() //  [D1, D2]
         { []
         }
     {offset
       cgKX3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgKY2; else goto cgKY3;
       cgKY2: // global
           R1 = Data.Complex.$w$s$cacos_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgKY3: // global
           I64[Sp - 24] = block_cgKXq_info;
           _sgAIc::F64 = D2;
           _sgAIg::F64 = %MO_F_Sub_W64(1.0 :: W64,
                                       %MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1), %MO_F_Mul_W64(D2, D2)));
           D2 = %MO_F_Sub_W64(0.0 :: W64,
                              %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1)));
           _sgAIb::F64 = D1;
           D1 = _sgAIg::F64;
           F64[Sp - 16] = _sgAIb::F64;
           F64[Sp - 8] = _sgAIc::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacos_info" {
     Data.Complex.$w$s$cacos_info:
         const Data.Complex.$w$s$cacos_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugKYd_srtd;
         const 194;
         const Data.Complex.$w$s$cacos_slow;
 },
 _cgKXq() //  [R1, R2]
         { []
         }
     {offset
       cgKXq: // global
           I64[Sp - 8] = block_cgKXs_info;
           _sgAIm::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgAIm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKYb; else goto cgKXt;
       ugKYb: // global
           call _cgKXs(R1) args: 0, res: 0, upd: 0;
       cgKXt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKXq_info" {
     block_cgKXq_info:
         const _cgKXq;
         const 194;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKXs() //  [R1]
         { []
         }
     {offset
       cgKXs: // global
           I64[Sp] = block_cgKXx_info;
           _sgAIp::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAIp::F64;
           if (R1 & 7 != 0) goto ugKYc; else goto cgKXy;
       ugKYc: // global
           call _cgKXx(R1) args: 0, res: 0, upd: 0;
       cgKXy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKXs_info" {
     block_cgKXs_info:
         const _cgKXs;
         const 387;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKXx() //  [R1]
         { []
         }
     {offset
       cgKXx: // global
           _sgAIs::F64 = %MO_F_Add_W64(F64[Sp + 24], F64[R1 + 7]);
           _sgAIt::F64 = %MO_F_Add_W64(F64[Sp + 16],
                                       %MO_F_Neg_W64(F64[Sp + 8]));
           I64[Sp + 8] = block_cgKXL_info;
           D2 = _sgAIs::F64;
           D1 = _sgAIt::F64;
           F64[Sp + 16] = _sgAIt::F64;
           F64[Sp + 24] = _sgAIs::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKXx_info" {
     block_cgKXx_info:
         const _cgKXx;
         const 451;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgKXL() //  [D1]
         { []
         }
     {offset
       cgKXL: // global
           _sgAIs::F64 = F64[Sp + 16];
           _sgAIt::F64 = F64[Sp + 8];
           _cgKXQ::F64 = D1;
           (_cgKXP::F64) = call MO_F64_Log(_cgKXQ::F64);
           I64[Sp + 8] = block_cgKXT_info;
           D2 = _sgAIs::F64;
           D1 = _sgAIt::F64;
           F64[Sp + 16] = _cgKXP::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKXL_info" {
     block_cgKXL_info:
         const _cgKXL;
         const 194;
         const 30;
 },
 _cgKXT() //  [D1]
         { []
         }
     {offset
       cgKXT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgKYa; else goto cgKY9;
       cgKYa: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgKY9: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKXT_info" {
     block_cgKXT_info:
         const _cgKXT;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.268925854 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacos_closure" {
     Data.Complex.$fFloatingComplex_$s$cacos_closure:
         const Data.Complex.$fFloatingComplex_$s$cacos_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacos_entry() //  [R2]
         { []
         }
     {offset
       cgKZ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgKZn; else goto cgKZo;
       cgKZn: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgKZo: // global
           I64[Sp - 8] = block_cgKZ4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKZw; else goto cgKZ5;
       ugKZw: // global
           call _cgKZ4(R1) args: 0, res: 0, upd: 0;
       cgKZ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacos_info" {
     Data.Complex.$fFloatingComplex_$s$cacos_info:
         const Data.Complex.$fFloatingComplex_$s$cacos_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+944;
 },
 _cgKZ4() //  [R1]
         { []
         }
     {offset
       cgKZ4: // global
           I64[Sp - 8] = block_cgKZa_info;
           _sgAIE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAIE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugKZv; else goto cgKZb;
       ugKZv: // global
           call _cgKZa(R1) args: 0, res: 0, upd: 0;
       cgKZb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKZ4_info" {
     block_cgKZ4_info:
         const _cgKZ4;
         const 0;
         const 4294967326;
         const SgBbV_srt+944;
 },
 _cgKZa() //  [R1]
         { []
         }
     {offset
       cgKZa: // global
           I64[Sp] = block_cgKZf_info;
           _sgAIG::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAIG::F64;
           if (R1 & 7 != 0) goto ugKZx; else goto cgKZg;
       ugKZx: // global
           call _cgKZf(R1) args: 0, res: 0, upd: 0;
       cgKZg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKZa_info" {
     block_cgKZa_info:
         const _cgKZa;
         const 1;
         const 4294967326;
         const SgBbV_srt+944;
 },
 _cgKZf() //  [R1]
         { []
         }
     {offset
       cgKZf: // global
           _sgAIG::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgKZk_info;
           D2 = F64[R1 + 7];
           D1 = _sgAIG::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacos_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKZf_info" {
     block_cgKZf_info:
         const _cgKZf;
         const 65;
         const 4294967326;
         const SgBbV_srt+944;
 },
 _cgKZk() //  [R1, R2]
         { []
         }
     {offset
       cgKZk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgKZu; else goto cgKZt;
       cgKZu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgKZt: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKZk_info" {
     block_cgKZk_info:
         const _cgKZk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.283137486 UTC

[section ""data" . Data.Complex.$w$cacos_closure" {
     Data.Complex.$w$cacos_closure:
         const Data.Complex.$w$cacos_info;
         const 0;
 },
 sat_sgAJ9_entry() //  [R1]
         { []
         }
     {offset
       cgL0p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgL0q; else goto cgL0r;
       cgL0q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgL0r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAJ9_info" {
     sat_sgAJ9_info:
         const sat_sgAJ9_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugL0U_srtd" {
     ugL0U_srtd:
         const SgBbV_srt+520;
         const 56;
         const 36873221950144513;
 },
 Data.Complex.$w$cacos_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgL0s: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgL0C; else goto cgL0D;
       cgL0C: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cacos_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgL0D: // global
           I64[Sp - 32] = block_cgKZX_info;
           _sgAIN::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgAIM::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAIM::P64;
           P64[Sp - 16] = _sgAIN::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cacos_info" {
     Data.Complex.$w$cacos_info:
         const Data.Complex.$w$cacos_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugL0U_srtd;
 },
 _cgKZX() //  [R1, R2]
         { []
         }
     {offset
       cgKZX: // global
           I64[Sp - 16] = block_cgKZZ_info;
           _sgAIO::P64 = P64[Sp + 24];
           R6 = _sgAIO::P64;
           _sgAIN::P64 = P64[Sp + 16];
           R5 = _sgAIN::P64;
           R4 = _sgAIO::P64;
           R3 = _sgAIN::P64;
           _sgAIR::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgAIR::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKZX_info" {
     block_cgKZX_info:
         const _cgKZX;
         const 3;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgKZZ() //  [R1, R2]
         { []
         }
     {offset
       cgKZZ: // global
           _sgAIQ::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgL01_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgAIQ::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgKZZ_info" {
     block_cgKZZ_info:
         const _cgKZZ;
         const 5;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgL01() //  [R1, R2]
         { []
         }
     {offset
       cgL01: // global
           I64[Sp] = block_cgL03_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL01_info" {
     block_cgL01_info:
         const _cgL01;
         const 3;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgL03() //  [R1, R2]
         { []
         }
     {offset
       cgL03: // global
           I64[Sp - 16] = block_cgL05_info;
           _sgAJ0::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgAJ0::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL03_info" {
     block_cgL03_info:
         const _cgL03;
         const 3;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL05() //  [R1]
         { []
         }
     {offset
       cgL05: // global
           I64[Sp] = block_cgL09_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL05_info" {
     block_cgL05_info:
         const _cgL05;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL09() //  [R1]
         { []
         }
     {offset
       cgL09: // global
           I64[Sp] = block_cgL0d_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL09_info" {
     block_cgL09_info:
         const _cgL09;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL0d() //  [R1]
         { []
         }
     {offset
       cgL0d: // global
           I64[Sp] = block_cgL0h_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL0d_info" {
     block_cgL0d_info:
         const _cgL0d;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL0h() //  [R1]
         { []
         }
     {offset
       cgL0h: // global
           I64[Sp] = block_cgL0j_info;
           R6 = P64[Sp + 16];
           R5 = R1;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL0h_info" {
     block_cgL0h_info:
         const _cgL0h;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL0j() //  [R1, R2]
         { []
         }
     {offset
       cgL0j: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgL0O; else goto cgL0N;
       cgL0O: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgL0N: // global
           I64[Hp - 32] = sat_sgAJ9_info;
           _sgAIM::P64 = P64[Sp + 24];
           P64[Hp - 16] = _sgAIM::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp] = block_cgL0t_info;
           _sgAJ7::P64 = R2;
           R2 = _sgAIM::P64;
           P64[Sp + 16] = _sgAJ7::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 40] = Hp - 32;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL0j_info" {
     block_cgL0j_info:
         const _cgL0j;
         const 1669;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL0t() //  [R1]
         { []
         }
     {offset
       cgL0t: // global
           I64[Sp] = block_cgL0x_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL0t_info" {
     block_cgL0t_info:
         const _cgL0t;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL0x() //  [R1]
         { []
         }
     {offset
       cgL0x: // global
           I64[Sp] = block_cgL0z_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = R1;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL0x_info" {
     block_cgL0x_info:
         const _cgL0x;
         const 1029;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL0z() //  [R1]
         { []
         }
     {offset
       cgL0z: // global
           I64[Sp + 32] = block_cgL0B_info;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp + 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL0z_info" {
     block_cgL0z_info:
         const _cgL0z;
         const 901;
         const 30;
 },
 _cgL0B() //  [R1]
         { []
         }
     {offset
       cgL0B: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL0B_info" {
     block_cgL0B_info:
         const _cgL0B;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.310357116 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cacos_closure" {
     Data.Complex.$fFloatingComplex_$cacos_closure:
         const Data.Complex.$fFloatingComplex_$cacos_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cacos_entry() //  [R2, R3]
         { []
         }
     {offset
       cgL1U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgL20; else goto cgL21;
       cgL20: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cacos_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgL21: // global
           I64[Sp - 16] = block_cgL1R_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugL26; else goto cgL1S;
       ugL26: // global
           call _cgL1R(R1) args: 0, res: 0, upd: 0;
       cgL1S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cacos_info" {
     Data.Complex.$fFloatingComplex_$cacos_info:
         const Data.Complex.$fFloatingComplex_$cacos_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+960;
 },
 _cgL1R() //  [R1]
         { []
         }
     {offset
       cgL1R: // global
           _sgAJd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgL1X_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAJd::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cacos_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL1R_info" {
     block_cgL1R_info:
         const _cgL1R;
         const 1;
         const 4294967326;
         const SgBbV_srt+960;
 },
 _cgL1X() //  [R1, R2]
         { []
         }
     {offset
       cgL1X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgL25; else goto cgL24;
       cgL25: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgL24: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL1X_info" {
     block_cgL1X_info:
         const _cgL1X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.319794749 UTC

[section ""data" . Data.Complex.$w$s$casin1_closure" {
     Data.Complex.$w$s$casin1_closure:
         const Data.Complex.$w$s$casin1_info;
         const 0;
 },
 Data.Complex.$w$s$casin1_slow() //  [R1]
         { []
         }
     {offset
       cgL2l: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casin1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugL3B_srtd" {
     ugL3B_srtd:
         const SgBbV_srt+576;
         const 51;
         const 1125899911036929;
 },
 Data.Complex.$w$s$casin1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgL2r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgL3q; else goto cgL3r;
       cgL3q: // global
           R1 = Data.Complex.$w$s$casin1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgL3r: // global
           I64[Sp - 24] = block_cgL2O_info;
           _sgAJm::F32 = F2;
           _sgAJq::F32 = %MO_F_Sub_W32(1.0 :: W32,
                                       %MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1), %MO_F_Mul_W32(F2, F2)));
           F2 = %MO_F_Sub_W32(0.0 :: W32,
                              %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1)));
           _sgAJl::F32 = F1;
           F1 = _sgAJq::F32;
           F32[Sp - 16] = _sgAJl::F32;
           F32[Sp - 8] = _sgAJm::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casin1_info" {
     Data.Complex.$w$s$casin1_info:
         const Data.Complex.$w$s$casin1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugL3B_srtd;
         const 194;
         const Data.Complex.$w$s$casin1_slow;
 },
 _cgL2O() //  [R1, R2]
         { []
         }
     {offset
       cgL2O: // global
           I64[Sp - 8] = block_cgL2Q_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugL3z; else goto cgL2R;
       ugL3z: // global
           call _cgL2Q(R1) args: 0, res: 0, upd: 0;
       cgL2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL2O_info" {
     block_cgL2O_info:
         const _cgL2O;
         const 194;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgL2Q() //  [R1]
         { []
         }
     {offset
       cgL2Q: // global
           I64[Sp] = block_cgL2V_info;
           _sgAJz::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAJz::F32;
           if (R1 & 7 != 0) goto ugL3A; else goto cgL2W;
       ugL3A: // global
           call _cgL2V(R1) args: 0, res: 0, upd: 0;
       cgL2W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL2Q_info" {
     block_cgL2Q_info:
         const _cgL2Q;
         const 387;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgL2V() //  [R1]
         { []
         }
     {offset
       cgL2V: // global
           _sgAJC::F32 = %MO_F_Add_W32(F32[Sp + 16], F32[R1 + 7]);
           _sgAJD::F32 = %MO_F_Add_W32(%MO_F_Neg_W32(F32[Sp + 24]),
                                       F32[Sp + 8]);
           I64[Sp + 8] = block_cgL39_info;
           F2 = _sgAJC::F32;
           F1 = _sgAJD::F32;
           F32[Sp + 16] = _sgAJD::F32;
           F32[Sp + 24] = _sgAJC::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL2V_info" {
     block_cgL2V_info:
         const _cgL2V;
         const 451;
         const 4294967326;
         const SgBbV_srt+752;
 },
 _cgL39() //  [F1]
         { []
         }
     {offset
       cgL39: // global
           _sgAJC::F32 = F32[Sp + 16];
           _sgAJD::F32 = F32[Sp + 8];
           _cgL3e::F32 = F1;
           (_cgL3d::F32) = call MO_F32_Log(_cgL3e::F32);
           I64[Sp + 8] = block_cgL3h_info;
           F2 = _sgAJC::F32;
           F1 = _sgAJD::F32;
           F32[Sp + 16] = _cgL3d::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL39_info" {
     block_cgL39_info:
         const _cgL39;
         const 194;
         const 30;
 },
 _cgL3h() //  [F1]
         { []
         }
     {offset
       cgL3h: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgL3y; else goto cgL3x;
       cgL3y: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgL3x: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL3h_info" {
     block_cgL3h_info:
         const _cgL3h;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.335307558 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casin1_closure" {
     Data.Complex.$fFloatingComplex_$s$casin1_closure:
         const Data.Complex.$fFloatingComplex_$s$casin1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casin1_entry() //  [R2]
         { []
         }
     {offset
       cgL4u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgL4K; else goto cgL4L;
       cgL4K: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgL4L: // global
           I64[Sp - 8] = block_cgL4r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugL4T; else goto cgL4s;
       ugL4T: // global
           call _cgL4r(R1) args: 0, res: 0, upd: 0;
       cgL4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casin1_info" {
     Data.Complex.$fFloatingComplex_$s$casin1_info:
         const Data.Complex.$fFloatingComplex_$s$casin1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+976;
 },
 _cgL4r() //  [R1]
         { []
         }
     {offset
       cgL4r: // global
           I64[Sp - 8] = block_cgL4x_info;
           _sgAJO::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAJO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugL4S; else goto cgL4y;
       ugL4S: // global
           call _cgL4x(R1) args: 0, res: 0, upd: 0;
       cgL4y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL4r_info" {
     block_cgL4r_info:
         const _cgL4r;
         const 0;
         const 4294967326;
         const SgBbV_srt+976;
 },
 _cgL4x() //  [R1]
         { []
         }
     {offset
       cgL4x: // global
           I64[Sp] = block_cgL4C_info;
           _sgAJQ::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAJQ::F32;
           if (R1 & 7 != 0) goto ugL4U; else goto cgL4D;
       ugL4U: // global
           call _cgL4C(R1) args: 0, res: 0, upd: 0;
       cgL4D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL4x_info" {
     block_cgL4x_info:
         const _cgL4x;
         const 1;
         const 4294967326;
         const SgBbV_srt+976;
 },
 _cgL4C() //  [R1]
         { []
         }
     {offset
       cgL4C: // global
           _sgAJQ::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgL4H_info;
           F2 = F32[R1 + 7];
           F1 = _sgAJQ::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casin1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL4C_info" {
     block_cgL4C_info:
         const _cgL4C;
         const 65;
         const 4294967326;
         const SgBbV_srt+976;
 },
 _cgL4H() //  [R1, R2]
         { []
         }
     {offset
       cgL4H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgL4R; else goto cgL4Q;
       cgL4R: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgL4Q: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL4H_info" {
     block_cgL4H_info:
         const _cgL4H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.348849931 UTC

[section ""data" . Data.Complex.$w$s$casin_closure" {
     Data.Complex.$w$s$casin_closure:
         const Data.Complex.$w$s$casin_info;
         const 0;
 },
 Data.Complex.$w$s$casin_slow() //  [R1]
         { []
         }
     {offset
       cgL5h: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casin_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugL6x_srtd" {
     ugL6x_srtd:
         const SgBbV_srt+592;
         const 51;
         const 1125899915231233;
 },
 Data.Complex.$w$s$casin_entry() //  [D1, D2]
         { []
         }
     {offset
       cgL5n: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgL6m; else goto cgL6n;
       cgL6m: // global
           R1 = Data.Complex.$w$s$casin_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgL6n: // global
           I64[Sp - 24] = block_cgL5K_info;
           _sgAJX::F64 = D2;
           _sgAK1::F64 = %MO_F_Sub_W64(1.0 :: W64,
                                       %MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1), %MO_F_Mul_W64(D2, D2)));
           D2 = %MO_F_Sub_W64(0.0 :: W64,
                              %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1)));
           _sgAJW::F64 = D1;
           D1 = _sgAK1::F64;
           F64[Sp - 16] = _sgAJW::F64;
           F64[Sp - 8] = _sgAJX::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casin_info" {
     Data.Complex.$w$s$casin_info:
         const Data.Complex.$w$s$casin_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugL6x_srtd;
         const 194;
         const Data.Complex.$w$s$casin_slow;
 },
 _cgL5K() //  [R1, R2]
         { []
         }
     {offset
       cgL5K: // global
           I64[Sp - 8] = block_cgL5M_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugL6v; else goto cgL5N;
       ugL6v: // global
           call _cgL5M(R1) args: 0, res: 0, upd: 0;
       cgL5N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL5K_info" {
     block_cgL5K_info:
         const _cgL5K;
         const 194;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgL5M() //  [R1]
         { []
         }
     {offset
       cgL5M: // global
           I64[Sp] = block_cgL5R_info;
           _sgAKa::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAKa::F64;
           if (R1 & 7 != 0) goto ugL6w; else goto cgL5S;
       ugL6w: // global
           call _cgL5R(R1) args: 0, res: 0, upd: 0;
       cgL5S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL5M_info" {
     block_cgL5M_info:
         const _cgL5M;
         const 387;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgL5R() //  [R1]
         { []
         }
     {offset
       cgL5R: // global
           _sgAKd::F64 = %MO_F_Add_W64(F64[Sp + 16], F64[R1 + 7]);
           _sgAKe::F64 = %MO_F_Add_W64(%MO_F_Neg_W64(F64[Sp + 24]),
                                       F64[Sp + 8]);
           I64[Sp + 8] = block_cgL65_info;
           D2 = _sgAKd::F64;
           D1 = _sgAKe::F64;
           F64[Sp + 16] = _sgAKe::F64;
           F64[Sp + 24] = _sgAKd::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL5R_info" {
     block_cgL5R_info:
         const _cgL5R;
         const 451;
         const 4294967326;
         const SgBbV_srt+776;
 },
 _cgL65() //  [D1]
         { []
         }
     {offset
       cgL65: // global
           _sgAKd::F64 = F64[Sp + 16];
           _sgAKe::F64 = F64[Sp + 8];
           _cgL6a::F64 = D1;
           (_cgL69::F64) = call MO_F64_Log(_cgL6a::F64);
           I64[Sp + 8] = block_cgL6d_info;
           D2 = _sgAKd::F64;
           D1 = _sgAKe::F64;
           F64[Sp + 16] = _cgL69::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL65_info" {
     block_cgL65_info:
         const _cgL65;
         const 194;
         const 30;
 },
 _cgL6d() //  [D1]
         { []
         }
     {offset
       cgL6d: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgL6u; else goto cgL6t;
       cgL6u: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgL6t: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL6d_info" {
     block_cgL6d_info:
         const _cgL6d;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.364460713 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casin_closure" {
     Data.Complex.$fFloatingComplex_$s$casin_closure:
         const Data.Complex.$fFloatingComplex_$s$casin_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casin_entry() //  [R2]
         { []
         }
     {offset
       cgL7q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgL7G; else goto cgL7H;
       cgL7G: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgL7H: // global
           I64[Sp - 8] = block_cgL7n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugL7P; else goto cgL7o;
       ugL7P: // global
           call _cgL7n(R1) args: 0, res: 0, upd: 0;
       cgL7o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casin_info" {
     Data.Complex.$fFloatingComplex_$s$casin_info:
         const Data.Complex.$fFloatingComplex_$s$casin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+992;
 },
 _cgL7n() //  [R1]
         { []
         }
     {offset
       cgL7n: // global
           I64[Sp - 8] = block_cgL7t_info;
           _sgAKp::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAKp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugL7O; else goto cgL7u;
       ugL7O: // global
           call _cgL7t(R1) args: 0, res: 0, upd: 0;
       cgL7u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL7n_info" {
     block_cgL7n_info:
         const _cgL7n;
         const 0;
         const 4294967326;
         const SgBbV_srt+992;
 },
 _cgL7t() //  [R1]
         { []
         }
     {offset
       cgL7t: // global
           I64[Sp] = block_cgL7y_info;
           _sgAKr::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAKr::F64;
           if (R1 & 7 != 0) goto ugL7Q; else goto cgL7z;
       ugL7Q: // global
           call _cgL7y(R1) args: 0, res: 0, upd: 0;
       cgL7z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL7t_info" {
     block_cgL7t_info:
         const _cgL7t;
         const 1;
         const 4294967326;
         const SgBbV_srt+992;
 },
 _cgL7y() //  [R1]
         { []
         }
     {offset
       cgL7y: // global
           _sgAKr::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgL7D_info;
           D2 = F64[R1 + 7];
           D1 = _sgAKr::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casin_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL7y_info" {
     block_cgL7y_info:
         const _cgL7y;
         const 65;
         const 4294967326;
         const SgBbV_srt+992;
 },
 _cgL7D() //  [R1, R2]
         { []
         }
     {offset
       cgL7D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgL7N; else goto cgL7M;
       cgL7N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgL7M: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL7D_info" {
     block_cgL7D_info:
         const _cgL7D;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.381577496 UTC

[section ""data" . Data.Complex.$w$casin_closure" {
     Data.Complex.$w$casin_closure:
         const Data.Complex.$w$casin_info;
         const 0;
 },
 sat_sgAKU_entry() //  [R1]
         { []
         }
     {offset
       cgL8I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgL8J; else goto cgL8K;
       cgL8J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgL8K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAKU_info" {
     sat_sgAKU_info:
         const sat_sgAKU_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugL9d_srtd" {
     ugL9d_srtd:
         const SgBbV_srt+520;
         const 62;
         const 2306687434144874497;
 },
 Data.Complex.$w$casin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgL8L: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgL8V; else goto cgL8W;
       cgL8V: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$casin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgL8W: // global
           I64[Sp - 32] = block_cgL8g_info;
           _sgAKx::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAKx::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$casin_info" {
     Data.Complex.$w$casin_info:
         const Data.Complex.$w$casin_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugL9d_srtd;
 },
 section ""relreadonly" . ugL9e_srtd" {
     ugL9e_srtd:
         const SgBbV_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgL8g() //  [R1]
         { []
         }
     {offset
       cgL8g: // global
           I64[Sp] = block_cgL8k_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8g_info" {
     block_cgL8g_info:
         const _cgL8g;
         const 3;
         const 18446744069414584350;
         const ugL9e_srtd;
 },
 section ""relreadonly" . ugL9f_srtd" {
     ugL9f_srtd:
         const SgBbV_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgL8k() //  [R1]
         { []
         }
     {offset
       cgL8k: // global
           I64[Sp] = block_cgL8o_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8k_info" {
     block_cgL8k_info:
         const _cgL8k;
         const 3;
         const 18446744069414584350;
         const ugL9f_srtd;
 },
 section ""relreadonly" . ugL9g_srtd" {
     ugL9g_srtd:
         const SgBbV_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgL8o() //  [R1]
         { []
         }
     {offset
       cgL8o: // global
           I64[Sp - 8] = block_cgL8s_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8o_info" {
     block_cgL8o_info:
         const _cgL8o;
         const 3;
         const 18446744069414584350;
         const ugL9g_srtd;
 },
 section ""relreadonly" . ugL9h_srtd" {
     ugL9h_srtd:
         const SgBbV_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgL8s() //  [R1]
         { []
         }
     {offset
       cgL8s: // global
           I64[Sp - 8] = block_cgL8u_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 16];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8s_info" {
     block_cgL8s_info:
         const _cgL8s;
         const 4;
         const 18446744069414584350;
         const ugL9h_srtd;
 },
 _cgL8u() //  [R1, R2]
         { []
         }
     {offset
       cgL8u: // global
           I64[Sp - 8] = block_cgL8w_info;
           _sgAKz::P64 = P64[Sp + 40];
           R6 = _sgAKz::P64;
           _sgAKy::P64 = P64[Sp + 32];
           R5 = _sgAKy::P64;
           R4 = _sgAKz::P64;
           R3 = _sgAKy::P64;
           _sgAKG::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp] = _sgAKG::P64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8u_info" {
     block_cgL8u_info:
         const _cgL8u;
         const 5;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgL8w() //  [R1, R2]
         { []
         }
     {offset
       cgL8w: // global
           _sgAKG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgL8y_info;
           R6 = R2;
           R5 = R1;
           R4 = _sgAKG::P64;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 32];
           Sp = Sp + 8;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8w_info" {
     block_cgL8w_info:
         const _cgL8w;
         const 6;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgL8y() //  [R1, R2]
         { []
         }
     {offset
       cgL8y: // global
           I64[Sp] = block_cgL8A_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8y_info" {
     block_cgL8y_info:
         const _cgL8y;
         const 1029;
         const 12884901918;
         const SgBbV_srt+904;
 },
 _cgL8A() //  [R1, R2]
         { []
         }
     {offset
       cgL8A: // global
           _sgAKD::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgL8C_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 32];
           R3 = _sgAKD::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8A_info" {
     block_cgL8A_info:
         const _cgL8A;
         const 1029;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL8C() //  [R1, R2]
         { []
         }
     {offset
       cgL8C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgL97; else goto cgL96;
       cgL97: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgL96: // global
           I64[Hp - 32] = sat_sgAKU_info;
           _sgAKx::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgAKx::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp - 8] = block_cgL8M_info;
           _sgAKS::P64 = R2;
           R2 = _sgAKx::P64;
           P64[Sp] = _sgAKS::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8C_info" {
     block_cgL8C_info:
         const _cgL8C;
         const 772;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL8M() //  [R1]
         { []
         }
     {offset
       cgL8M: // global
           I64[Sp] = block_cgL8Q_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8M_info" {
     block_cgL8M_info:
         const _cgL8M;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL8Q() //  [R1]
         { []
         }
     {offset
       cgL8Q: // global
           _sgAKS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgL8S_info;
           R4 = _sgAKS::P64;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8Q_info" {
     block_cgL8Q_info:
         const _cgL8Q;
         const 1029;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgL8S() //  [R1]
         { []
         }
     {offset
       cgL8S: // global
           I64[Sp + 24] = block_cgL8U_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8S_info" {
     block_cgL8S_info:
         const _cgL8S;
         const 388;
         const 30;
 },
 _cgL8U() //  [R1]
         { []
         }
     {offset
       cgL8U: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgL8U_info" {
     block_cgL8U_info:
         const _cgL8U;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.426718267 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$casin_closure" {
     Data.Complex.$fFloatingComplex_$casin_closure:
         const Data.Complex.$fFloatingComplex_$casin_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$casin_entry() //  [R2, R3]
         { []
         }
     {offset
       cgLal: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLar; else goto cgLas;
       cgLar: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$casin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLas: // global
           I64[Sp - 16] = block_cgLai_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugLax; else goto cgLaj;
       ugLax: // global
           call _cgLai(R1) args: 0, res: 0, upd: 0;
       cgLaj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$casin_info" {
     Data.Complex.$fFloatingComplex_$casin_info:
         const Data.Complex.$fFloatingComplex_$casin_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgBbV_srt+1008;
 },
 _cgLai() //  [R1]
         { []
         }
     {offset
       cgLai: // global
           _sgAKY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgLao_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAKY::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$casin_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLai_info" {
     block_cgLai_info:
         const _cgLai;
         const 1;
         const 4294967326;
         const SgBbV_srt+1008;
 },
 _cgLao() //  [R1, R2]
         { []
         }
     {offset
       cgLao: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLaw; else goto cgLav;
       cgLaw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLav: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLao_info" {
     block_cgLao_info:
         const _cgLao;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.441684467 UTC

[section ""data" . Data.Complex.$w$s$catanh1_closure" {
     Data.Complex.$w$s$catanh1_closure:
         const Data.Complex.$w$s$catanh1_info;
         const 0;
 },
 Data.Complex.$w$s$catanh1_slow() //  [R1]
         { []
         }
     {offset
       cgLaM: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catanh1_entry(F2,
                                                F1,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$catanh1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgLaS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLbI; else goto cgLbJ;
       cgLbI: // global
           R1 = Data.Complex.$w$s$catanh1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgLbJ: // global
           I64[Sp - 8] = block_cgLb0_info;
           F4 = %MO_F_Sub_W32(0.0 :: W32, F2);
           F3 = %MO_F_Sub_W32(1.0 :: W32, F1);
           F2 = F2;
           F1 = %MO_F_Add_W32(F1, 1.0 :: W32);
           Sp = Sp - 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catanh1_info" {
     Data.Complex.$w$s$catanh1_info:
         const Data.Complex.$w$s$catanh1_entry;
         const 0;
         const 30064771086;
         const 8589934592;
         const SgBbV_srt+1024;
         const 194;
         const Data.Complex.$w$s$catanh1_slow;
 },
 _cgLb0() //  [R1, R2]
         { []
         }
     {offset
       cgLb0: // global
           I64[Sp - 8] = block_cgLb2_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLbR; else goto cgLb3;
       ugLbR: // global
           call _cgLb2(R1) args: 0, res: 0, upd: 0;
       cgLb3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLb0_info" {
     block_cgLb0_info:
         const _cgLb0;
         const 0;
         const 4294967326;
         const SgBbV_srt+1032;
 },
 _cgLb2() //  [R1]
         { []
         }
     {offset
       cgLb2: // global
           I64[Sp] = block_cgLb7_info;
           _sgALf::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgALf::F32;
           if (R1 & 7 != 0) goto ugLbS; else goto cgLb8;
       ugLbS: // global
           call _cgLb7(R1) args: 0, res: 0, upd: 0;
       cgLb8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLb2_info" {
     block_cgLb2_info:
         const _cgLb2;
         const 1;
         const 4294967326;
         const SgBbV_srt+1032;
 },
 _cgLb7() //  [R1]
         { []
         }
     {offset
       cgLb7: // global
           I64[Sp - 8] = block_cgLbc_info;
           _sgALh::F32 = F32[R1 + 7];
           F2 = _sgALh::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgALh::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLb7_info" {
     block_cgLb7_info:
         const _cgLb7;
         const 65;
         const 4294967326;
         const SgBbV_srt+1032;
 },
 _cgLbc() //  [F1]
         { []
         }
     {offset
       cgLbc: // global
           _sgALf::F32 = F32[Sp + 16];
           _sgALh::F32 = F32[Sp + 8];
           _cgLbh::F32 = F1;
           (_cgLbg::F32) = call MO_F32_Log(_cgLbh::F32);
           I64[Sp + 8] = block_cgLbk_info;
           F2 = _sgALh::F32;
           F1 = _sgALf::F32;
           F32[Sp + 16] = _cgLbg::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLbc_info" {
     block_cgLbc_info:
         const _cgLbc;
         const 194;
         const 30;
 },
 _cgLbk() //  [F1]
         { []
         }
     {offset
       cgLbk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgLbQ; else goto cgLbP;
       cgLbQ: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgLbP: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           _sgALj::F32 = F32[Sp + 8];
           F32[Hp - 16] = %MO_F_Add_W32(%MO_F_Mul_W32(F1, 0.5 :: W32),
                                        %MO_F_Mul_W32(_sgALj::F32, 0.0 :: W32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Sub_W32(%MO_F_Mul_W32(_sgALj::F32, 0.5 :: W32),
                                   %MO_F_Mul_W32(F1, 0.0 :: W32));
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLbk_info" {
     block_cgLbk_info:
         const _cgLbk;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.458644331 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catanh1_closure" {
     Data.Complex.$fFloatingComplex_$s$catanh1_closure:
         const Data.Complex.$fFloatingComplex_$s$catanh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catanh1_entry() //  [R2]
         { []
         }
     {offset
       cgLcI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLcY; else goto cgLcZ;
       cgLcY: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catanh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgLcZ: // global
           I64[Sp - 8] = block_cgLcF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLd7; else goto cgLcG;
       ugLd7: // global
           call _cgLcF(R1) args: 0, res: 0, upd: 0;
       cgLcG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catanh1_info" {
     Data.Complex.$fFloatingComplex_$s$catanh1_info:
         const Data.Complex.$fFloatingComplex_$s$catanh1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgBbV_srt+1024;
 },
 _cgLcF() //  [R1]
         { []
         }
     {offset
       cgLcF: // global
           I64[Sp - 8] = block_cgLcL_info;
           _sgALw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgALw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLd6; else goto cgLcM;
       ugLd6: // global
           call _cgLcL(R1) args: 0, res: 0, upd: 0;
       cgLcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLcF_info" {
     block_cgLcF_info:
         const _cgLcF;
         const 0;
         const 4294967326;
         const SgBbV_srt+1024;
 },
 _cgLcL() //  [R1]
         { []
         }
     {offset
       cgLcL: // global
           I64[Sp] = block_cgLcQ_info;
           _sgALy::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgALy::F32;
           if (R1 & 7 != 0) goto ugLd8; else goto cgLcR;
       ugLd8: // global
           call _cgLcQ(R1) args: 0, res: 0, upd: 0;
       cgLcR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLcL_info" {
     block_cgLcL_info:
         const _cgLcL;
         const 1;
         const 4294967326;
         const SgBbV_srt+1024;
 },
 _cgLcQ() //  [R1]
         { []
         }
     {offset
       cgLcQ: // global
           _sgALy::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgLcV_info;
           F2 = F32[R1 + 7];
           F1 = _sgALy::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catanh1_entry(F2,
                                                F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLcQ_info" {
     block_cgLcQ_info:
         const _cgLcQ;
         const 65;
         const 4294967326;
         const SgBbV_srt+1024;
 },
 _cgLcV() //  [R1, R2]
         { []
         }
     {offset
       cgLcV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLd5; else goto cgLd4;
       cgLd5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLd4: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLcV_info" {
     block_cgLcV_info:
         const _cgLcV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.471116495 UTC

[section ""data" . Data.Complex.$w$s$catanh_closure" {
     Data.Complex.$w$s$catanh_closure:
         const Data.Complex.$w$s$catanh_info;
         const 0;
 },
 Data.Complex.$w$s$catanh_slow() //  [R1]
         { []
         }
     {offset
       cgLdv: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catanh_entry(D2,
                                               D1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$catanh_entry() //  [D1, D2]
         { []
         }
     {offset
       cgLdB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLer; else goto cgLes;
       cgLer: // global
           R1 = Data.Complex.$w$s$catanh_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgLes: // global
           I64[Sp - 8] = block_cgLdJ_info;
           D4 = %MO_F_Sub_W64(0.0 :: W64, D2);
           D3 = %MO_F_Sub_W64(1.0 :: W64, D1);
           D2 = D2;
           D1 = %MO_F_Add_W64(D1, 1.0 :: W64);
           Sp = Sp - 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catanh_info" {
     Data.Complex.$w$s$catanh_info:
         const Data.Complex.$w$s$catanh_entry;
         const 0;
         const 30064771086;
         const 8589934592;
         const SgBbV_srt+1056;
         const 194;
         const Data.Complex.$w$s$catanh_slow;
 },
 _cgLdJ() //  [R1, R2]
         { []
         }
     {offset
       cgLdJ: // global
           I64[Sp - 8] = block_cgLdL_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLeA; else goto cgLdM;
       ugLeA: // global
           call _cgLdL(R1) args: 0, res: 0, upd: 0;
       cgLdM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLdJ_info" {
     block_cgLdJ_info:
         const _cgLdJ;
         const 0;
         const 4294967326;
         const SgBbV_srt+1064;
 },
 _cgLdL() //  [R1]
         { []
         }
     {offset
       cgLdL: // global
           I64[Sp] = block_cgLdQ_info;
           _sgALN::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgALN::F64;
           if (R1 & 7 != 0) goto ugLeB; else goto cgLdR;
       ugLeB: // global
           call _cgLdQ(R1) args: 0, res: 0, upd: 0;
       cgLdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLdL_info" {
     block_cgLdL_info:
         const _cgLdL;
         const 1;
         const 4294967326;
         const SgBbV_srt+1064;
 },
 _cgLdQ() //  [R1]
         { []
         }
     {offset
       cgLdQ: // global
           I64[Sp - 8] = block_cgLdV_info;
           _sgALP::F64 = F64[R1 + 7];
           D2 = _sgALP::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgALP::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLdQ_info" {
     block_cgLdQ_info:
         const _cgLdQ;
         const 65;
         const 4294967326;
         const SgBbV_srt+1064;
 },
 _cgLdV() //  [D1]
         { []
         }
     {offset
       cgLdV: // global
           _sgALN::F64 = F64[Sp + 16];
           _sgALP::F64 = F64[Sp + 8];
           _cgLe0::F64 = D1;
           (_cgLdZ::F64) = call MO_F64_Log(_cgLe0::F64);
           I64[Sp + 8] = block_cgLe3_info;
           D2 = _sgALP::F64;
           D1 = _sgALN::F64;
           F64[Sp + 16] = _cgLdZ::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLdV_info" {
     block_cgLdV_info:
         const _cgLdV;
         const 194;
         const 30;
 },
 _cgLe3() //  [D1]
         { []
         }
     {offset
       cgLe3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgLez; else goto cgLey;
       cgLez: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgLey: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           _sgALR::F64 = F64[Sp + 8];
           F64[Hp - 16] = %MO_F_Add_W64(%MO_F_Mul_W64(D1, 0.5 :: W64),
                                        %MO_F_Mul_W64(_sgALR::F64, 0.0 :: W64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Sub_W64(%MO_F_Mul_W64(_sgALR::F64, 0.5 :: W64),
                                   %MO_F_Mul_W64(D1, 0.0 :: W64));
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLe3_info" {
     block_cgLe3_info:
         const _cgLe3;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.48679459 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catanh_closure" {
     Data.Complex.$fFloatingComplex_$s$catanh_closure:
         const Data.Complex.$fFloatingComplex_$s$catanh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catanh_entry() //  [R2]
         { []
         }
     {offset
       cgLfr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLfH; else goto cgLfI;
       cgLfH: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgLfI: // global
           I64[Sp - 8] = block_cgLfo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLfQ; else goto cgLfp;
       ugLfQ: // global
           call _cgLfo(R1) args: 0, res: 0, upd: 0;
       cgLfp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catanh_info" {
     Data.Complex.$fFloatingComplex_$s$catanh_info:
         const Data.Complex.$fFloatingComplex_$s$catanh_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgBbV_srt+1056;
 },
 _cgLfo() //  [R1]
         { []
         }
     {offset
       cgLfo: // global
           I64[Sp - 8] = block_cgLfu_info;
           _sgAM4::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAM4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLfP; else goto cgLfv;
       ugLfP: // global
           call _cgLfu(R1) args: 0, res: 0, upd: 0;
       cgLfv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLfo_info" {
     block_cgLfo_info:
         const _cgLfo;
         const 0;
         const 4294967326;
         const SgBbV_srt+1056;
 },
 _cgLfu() //  [R1]
         { []
         }
     {offset
       cgLfu: // global
           I64[Sp] = block_cgLfz_info;
           _sgAM6::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAM6::F64;
           if (R1 & 7 != 0) goto ugLfR; else goto cgLfA;
       ugLfR: // global
           call _cgLfz(R1) args: 0, res: 0, upd: 0;
       cgLfA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLfu_info" {
     block_cgLfu_info:
         const _cgLfu;
         const 1;
         const 4294967326;
         const SgBbV_srt+1056;
 },
 _cgLfz() //  [R1]
         { []
         }
     {offset
       cgLfz: // global
           _sgAM6::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgLfE_info;
           D2 = F64[R1 + 7];
           D1 = _sgAM6::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catanh_entry(D2,
                                               D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLfz_info" {
     block_cgLfz_info:
         const _cgLfz;
         const 65;
         const 4294967326;
         const SgBbV_srt+1056;
 },
 _cgLfE() //  [R1, R2]
         { []
         }
     {offset
       cgLfE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLfO; else goto cgLfN;
       cgLfO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLfN: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLfE_info" {
     block_cgLfE_info:
         const _cgLfE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.496700474 UTC

[section ""data" . Data.Complex.$fFloatingComplex20_closure" {
     Data.Complex.$fFloatingComplex20_closure:
         const GHC.Real.:%_con_info;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$fFloatingComplex21_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.498413335 UTC

[section ""data" . Data.Complex.$fFloatingComplex18_closure" {
     Data.Complex.$fFloatingComplex18_closure:
         const GHC.Real.:%_con_info;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$fFloatingComplex19_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.503805115 UTC

[section ""data" . Data.Complex.$w$catanh_closure" {
     Data.Complex.$w$catanh_closure:
         const Data.Complex.$w$catanh_info;
         const 0;
 },
 sat_sgAMv_entry() //  [R1]
         { []
         }
     {offset
       cgLgx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLgy; else goto cgLgz;
       cgLgy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLgz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAMv_info" {
     sat_sgAMv_info:
         const sat_sgAMv_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugLgV_srtd" {
     ugLgV_srtd:
         const SgBbV_srt+480;
         const 79;
         const 18014398509481985;
         const 28672;
 },
 Data.Complex.$w$catanh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgLgC: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgLgI; else goto cgLgJ;
       cgLgI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$catanh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLgJ: // global
           I64[Sp - 32] = block_cgLgj_info;
           _sgAMd::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex20_closure+1;
           _sgAMc::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgAMc::P64;
           P64[Sp - 16] = _sgAMd::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromRational_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$catanh_info" {
     Data.Complex.$w$catanh_info:
         const Data.Complex.$w$catanh_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugLgV_srtd;
 },
 section ""relreadonly" . ugLgW_srtd" {
     ugLgW_srtd:
         const SgBbV_srt+480;
         const 78;
         const 18014398509481985;
         const 8192;
 },
 _cgLgj() //  [R1, R2]
         { []
         }
     {offset
       cgLgj: // global
           I64[Sp - 16] = block_cgLgl_info;
           R3 = Data.Complex.$fFloatingComplex18_closure+1;
           _sgAMh::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgAMh::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$cfromRational_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgj_info" {
     block_cgLgj_info:
         const _cgLgj;
         const 3;
         const 18446744069414584350;
         const ugLgW_srtd;
 },
 _cgLgl() //  [R1, R2]
         { []
         }
     {offset
       cgLgl: // global
           I64[Sp - 16] = block_cgLgn_info;
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = R2;
           R3 = R1;
           _sgAMk::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _sgAMk::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgl_info" {
     block_cgLgl_info:
         const _cgLgl;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgLgn() //  [R1, R2]
         { []
         }
     {offset
       cgLgn: // global
           _sgAMj::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgLgp_info;
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 8];
           R3 = _sgAMj::P64;
           _sgAMn::P64 = R2;
           R2 = P64[Sp + 40];
           P64[Sp + 48] = _sgAMn::P64;
           P64[Sp + 56] = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgn_info" {
     block_cgLgn_info:
         const _cgLgn;
         const 7;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgLgp() //  [R1, R2]
         { []
         }
     {offset
       cgLgp: // global
           I64[Sp] = block_cgLgr_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 24];
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgp_info" {
     block_cgLgp_info:
         const _cgLgp;
         const 5;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgLgr() //  [R1, R2]
         { []
         }
     {offset
       cgLgr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgLgQ; else goto cgLgP;
       cgLgQ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLgP: // global
           I64[Hp - 32] = sat_sgAMv_info;
           _sgAMc::P64 = P64[Sp + 24];
           P64[Hp - 16] = _sgAMc::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp - 8] = block_cgLgA_info;
           _sgAMt::P64 = R2;
           R2 = _sgAMc::P64;
           P64[Sp] = _sgAMt::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 40] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgr_info" {
     block_cgLgr_info:
         const _cgLgr;
         const 1541;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgLgA() //  [R1]
         { []
         }
     {offset
       cgLgA: // global
           I64[Sp] = block_cgLgF_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgA_info" {
     block_cgLgA_info:
         const _cgLgA;
         const 6;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgLgF() //  [R1]
         { []
         }
     {offset
       cgLgF: // global
           _sgAMt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgLgH_info;
           R4 = _sgAMt::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 48] = R1;
           Sp = Sp + 8;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgF_info" {
     block_cgLgF_info:
         const _cgLgF;
         const 2054;
         const 4294967326;
         const SgBbV_srt+912;
 },
 _cgLgH() //  [R1]
         { []
         }
     {offset
       cgLgH: // global
           R6 = R1;
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 48;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLgH_info" {
     block_cgLgH_info:
         const _cgLgH;
         const 517;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.525079168 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$catanh_closure" {
     Data.Complex.$fFloatingComplex_$catanh_closure:
         const Data.Complex.$fFloatingComplex_$catanh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$catanh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgLhF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLhL; else goto cgLhM;
       cgLhL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$catanh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLhM: // global
           I64[Sp - 16] = block_cgLhC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugLhR; else goto cgLhD;
       ugLhR: // global
           call _cgLhC(R1) args: 0, res: 0, upd: 0;
       cgLhD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$catanh_info" {
     Data.Complex.$fFloatingComplex_$catanh_info:
         const Data.Complex.$fFloatingComplex_$catanh_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgBbV_srt+1088;
 },
 _cgLhC() //  [R1]
         { []
         }
     {offset
       cgLhC: // global
           _sgAMy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgLhI_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgAMy::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$catanh_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLhC_info" {
     block_cgLhC_info:
         const _cgLhC;
         const 1;
         const 4294967326;
         const SgBbV_srt+1088;
 },
 _cgLhI() //  [R1, R2]
         { []
         }
     {offset
       cgLhI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLhQ; else goto cgLhP;
       cgLhQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLhP: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLhI_info" {
     block_cgLhI_info:
         const _cgLhI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.532665501 UTC

[section ""data" . Data.Complex.$fFloatingComplex_nan_closure" {
     Data.Complex.$fFloatingComplex_nan_closure:
         const Data.Complex.$fFloatingComplex_nan_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_nan_entry() //  [R1]
         { []
         }
     {offset
       cgLid: // global
           _rgA2Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgLig; else goto cgLih;
       cgLih: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgLij; else goto cgLii;
       cgLij: // global
           HpAlloc = 16;
           goto cgLig;
       cgLig: // global
           R1 = _rgA2Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLii: // global
           (_cgLi8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA2Z::P64);
           if (_cgLi8::I64 == 0) goto cgLia; else goto cgLi9;
       cgLia: // global
           call (I64[I64[_rgA2Z::P64]])() args: 8, res: 0, upd: 8;
       cgLi9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLi8::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(0.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_nan_info" {
     Data.Complex.$fFloatingComplex_nan_info:
         const Data.Complex.$fFloatingComplex_nan_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.537460658 UTC

[section ""data" . Data.Complex.$fFloatingComplex_inf_closure" {
     Data.Complex.$fFloatingComplex_inf_closure:
         const Data.Complex.$fFloatingComplex_inf_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_inf_entry() //  [R1]
         { []
         }
     {offset
       cgLiD: // global
           _rgA32::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgLiG; else goto cgLiH;
       cgLiH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgLiJ; else goto cgLiI;
       cgLiJ: // global
           HpAlloc = 16;
           goto cgLiG;
       cgLiG: // global
           R1 = _rgA32::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLiI: // global
           (_cgLiy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA32::P64);
           if (_cgLiy::I64 == 0) goto cgLiA; else goto cgLiz;
       cgLiA: // global
           call (I64[I64[_rgA32::P64]])() args: 8, res: 0, upd: 8;
       cgLiz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLiy::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_inf_info" {
     Data.Complex.$fFloatingComplex_inf_info:
         const Data.Complex.$fFloatingComplex_inf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.541422504 UTC

[section ""data" . Data.Complex.$fFloatingComplex6_closure" {
     Data.Complex.$fFloatingComplex6_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_nan_closure;
         const Data.Complex.$fFloatingComplex_nan_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.544115295 UTC

[section ""data" . Data.Complex.$fFloatingComplex5_closure" {
     Data.Complex.$fFloatingComplex5_closure:
         const Data.Complex.$fFloatingComplex5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex5_entry() //  [R1]
         { []
         }
     {offset
       cgLj6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLj7; else goto cgLj8;
       cgLj7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLj8: // global
           (_cgLj0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgLj0::I64 == 0) goto cgLj2; else goto cgLj1;
       cgLj2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgLj1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLj0::I64;
           I64[Sp - 24] = block_cgLj3_info;
           R1 = Data.Complex.$fFloatingComplex_nan_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugLjc; else goto cgLj4;
       ugLjc: // global
           call _cgLj3() args: 0, res: 0, upd: 0;
       cgLj4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex5_info" {
     Data.Complex.$fFloatingComplex5_info:
         const Data.Complex.$fFloatingComplex5_entry;
         const 0;
         const 12884901909;
         const SgBbV_srt+1120;
 },
 _cgLj3() //  []
         { []
         }
     {offset
       cgLj3: // global
           R1 = Data.Complex.$fFloatingComplex6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgLj3_info" {
     block_cgLj3_info:
         const _cgLj3;
         const 0;
         const 4294967326;
         const SgBbV_srt+1120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.549891988 UTC

[section ""data" . Data.Complex.$fFloatingComplex8_closure" {
     Data.Complex.$fFloatingComplex8_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_inf_closure;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.552678253 UTC

[section ""data" . Data.Complex.$fFloatingComplex7_closure" {
     Data.Complex.$fFloatingComplex7_closure:
         const Data.Complex.$fFloatingComplex7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex7_entry() //  [R1]
         { []
         }
     {offset
       cgLjz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLjA; else goto cgLjB;
       cgLjA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLjB: // global
           (_cgLjt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgLjt::I64 == 0) goto cgLjv; else goto cgLju;
       cgLjv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgLju: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLjt::I64;
           I64[Sp - 24] = block_cgLjw_info;
           R1 = Data.Complex.$fFloatingComplex_inf_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugLjF; else goto cgLjx;
       ugLjF: // global
           call _cgLjw() args: 0, res: 0, upd: 0;
       cgLjx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex7_info" {
     Data.Complex.$fFloatingComplex7_info:
         const Data.Complex.$fFloatingComplex7_entry;
         const 0;
         const 12884901909;
         const SgBbV_srt+1136;
 },
 _cgLjw() //  []
         { []
         }
     {offset
       cgLjw: // global
           R1 = Data.Complex.$fFloatingComplex8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgLjw_info" {
     block_cgLjw_info:
         const _cgLjw;
         const 0;
         const 4294967326;
         const SgBbV_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.558944286 UTC

[section ""data" . Data.Complex.$fFloatingComplex3_closure" {
     Data.Complex.$fFloatingComplex3_closure:
         const GHC.Types.D#_con_info;
         const 1.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.560732078 UTC

[section ""data" . Data.Complex.$fFloatingComplex2_closure" {
     Data.Complex.$fFloatingComplex2_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex3_closure+1;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.567274436 UTC

[section ""data" . Data.Complex.$w$s$c**_closure" {
     Data.Complex.$w$s$c**_closure:
         const Data.Complex.$w$s$c**_info;
         const 0;
 },
 Data.Complex.$w$s$c**_slow() //  [R1]
         { []
         }
     {offset
       cgLjV: // global
           D2 = F64[Sp + 16];
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**_entry(D2,
                                            D1,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c**_entry() //  [R2, D1, D2]
         { []
         }
     {offset
       cgLk6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgLk7; else goto cgLk8;
       cgLk7: // global
           R1 = Data.Complex.$w$s$c**_closure;
           P64[Sp - 24] = R2;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       cgLk8: // global
           _sgAMO::F64 = D2;
           _sgAMN::F64 = D1;
           _sgAMM::P64 = R2;
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto cgLk5; else goto sgAMP;
       cgLk5: // global
           if (%MO_F_Eq_W64(_sgAMO::F64,
                            0.0 :: W64)) goto cgLmB; else goto sgAMP;
       cgLmB: // global
           R1 = Data.Complex.$fFloatingComplex2_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       sgAMP: // global
           I64[Sp - 24] = block_cgLkc_info;
           R1 = _sgAMM::P64;
           F64[Sp - 16] = _sgAMN::F64;
           F64[Sp - 8] = _sgAMO::F64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugLmC; else goto cgLkd;
       ugLmC: // global
           call _cgLkc(R1) args: 0, res: 0, upd: 0;
       cgLkd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c**_info" {
     Data.Complex.$w$s$c**_info:
         const Data.Complex.$w$s$c**_entry;
         const 0;
         const 61576946122766;
         const 12884901888;
         const SgBbV_srt+1064;
         const 387;
         const Data.Complex.$w$s$c**_slow;
 },
 _cgLkc() //  [R1]
         { []
         }
     {offset
       cgLkc: // global
           I64[Sp - 8] = block_cgLkh_info;
           _sgAMS::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgAMS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLmD; else goto cgLki;
       ugLmD: // global
           call _cgLkh(R1) args: 0, res: 0, upd: 0;
       cgLki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLkc_info" {
     block_cgLkc_info:
         const _cgLkc;
         const 194;
         const 52780853100574;
         const SgBbV_srt+1064;
 },
 _cgLkh() //  [R1]
         { []
         }
     {offset
       cgLkh: // global
           I64[Sp] = block_cgLkm_info;
           _sgAMV::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAMV::F64;
           if (R1 & 7 != 0) goto ugLmE; else goto cgLkq;
       ugLmE: // global
           call _cgLkm(R1) args: 0, res: 0, upd: 0;
       cgLkq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLkh_info" {
     block_cgLkh_info:
         const _cgLkh;
         const 387;
         const 52780853100574;
         const SgBbV_srt+1064;
 },
 _cgLkm() //  [R1]
         { []
         }
     {offset
       cgLkm: // global
           _sgAMN::F64 = F64[Sp + 16];
           _sgAMV::F64 = F64[Sp + 8];
           _sgAMX::F64 = F64[R1 + 7];
           if (%MO_F_Eq_W64(_sgAMX::F64,
                            0.0 :: W64)) goto cgLmu; else goto sgAMY;
       cgLmu: // global
           if (%MO_F_Eq_W64(_sgAMV::F64,
                            0.0 :: W64)) goto cgLmt; else goto sgAMY;
       cgLmt: // global
           if (%MO_F_Lt_W64(_sgAMN::F64,
                            0.0 :: W64)) goto cgLms; else goto cgLmr;
       cgLmr: // global
           if (%MO_F_Eq_W64(_sgAMN::F64,
                            0.0 :: W64)) goto cgLmp; else goto cgLmo;
       sgAMY: // global
           (_sgAN3::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(_sgAMX::F64);
           if (_sgAN3::I64 == 0) goto cgLm5; else goto cgLkR;
       cgLm5: // global
           (_sgANa::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(_sgAMV::F64);
           if (_sgANa::I64 == 0) goto cgLm0; else goto cgLl9;
       cgLm0: // global
           I64[Sp - 8] = block_cgLlb_info;
           D2 = _sgAMV::F64;
           D1 = _sgAMX::F64;
           F64[Sp] = _sgAMX::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
       cgLl9: // global
           if (%MO_F_Lt_W64(_sgAMN::F64,
                            0.0 :: W64)) goto cgLmo; else goto cgLl6;
       cgLl6: // global
           if (%MO_F_Eq_W64(_sgAMN::F64,
                            0.0 :: W64)) goto cgLmp; else goto cgLms;
       cgLkR: // global
           if (%MO_F_Lt_W64(_sgAMN::F64,
                            0.0 :: W64)) goto cgLmo; else goto cgLkO;
       cgLmo: // global
           R1 = Data.Complex.$fFloatingComplex4_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgLkO: // global
           if (%MO_F_Eq_W64(_sgAMN::F64,
                            0.0 :: W64)) goto cgLmp; else goto cgLms;
       cgLmp: // global
           R1 = Data.Complex.$fFloatingComplex5_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cgLms: // global
           R1 = Data.Complex.$fFloatingComplex7_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLkm_info" {
     block_cgLkm_info:
         const _cgLkm;
         const 451;
         const 52780853100574;
         const SgBbV_srt+1064;
 },
 _cgLlb() //  [D1]
         { []
         }
     {offset
       cgLlb: // global
           _sgAMV::F64 = F64[Sp + 16];
           _sgAMX::F64 = F64[Sp + 8];
           _cgLlg::F64 = D1;
           (_cgLlf::F64) = call MO_F64_Log(_cgLlg::F64);
           I64[Sp + 8] = block_cgLlj_info;
           D2 = _sgAMV::F64;
           D1 = _sgAMX::F64;
           F64[Sp + 16] = _cgLlf::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLlb_info" {
     block_cgLlb_info:
         const _cgLlb;
         const 964;
         const 30;
 },
 _cgLlj() //  [D1]
         { []
         }
     {offset
       cgLlj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLm4; else goto cgLm3;
       cgLm4: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgLm3: // global
           _sgAMN::F64 = F64[Sp + 16];
           _sgAMO::F64 = F64[Sp + 24];
           _sgANf::F64 = F64[Sp + 8];
           _sgANh::F64 = %MO_F_Add_W64(%MO_F_Mul_W64(_sgANf::F64,
                                                     _sgAMO::F64),
                                       %MO_F_Mul_W64(D1, _sgAMN::F64));
           _cgLlG::F64 = %MO_F_Sub_W64(%MO_F_Mul_W64(_sgANf::F64,
                                                     _sgAMN::F64),
                                       %MO_F_Mul_W64(D1, _sgAMO::F64));
           (_cgLlF::F64) = call MO_F64_Exp(_cgLlG::F64);
           (_cgLlJ::F64) = call MO_F64_Sin(_sgANh::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgLlF::F64, _cgLlJ::F64);
           (_cgLlR::F64) = call MO_F64_Cos(_sgANh::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgLlF::F64, _cgLlR::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLlj_info" {
     block_cgLlj_info:
         const _cgLlj;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.583810329 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c**_closure" {
     Data.Complex.$fFloatingComplex_$s$c**_closure:
         const Data.Complex.$fFloatingComplex_$s$c**_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c**_entry() //  [R2, R3]
         { []
         }
     {offset
       cgLnO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLnX; else goto cgLnY;
       cgLnX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c**_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLnY: // global
           I64[Sp - 16] = block_cgLnL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugLo7; else goto cgLnM;
       ugLo7: // global
           call _cgLnL(R1) args: 0, res: 0, upd: 0;
       cgLnM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c**_info" {
     Data.Complex.$fFloatingComplex_$s$c**_info:
         const Data.Complex.$fFloatingComplex_$s$c**_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgBbV_srt+1152;
 },
 _cgLnL() //  [R1]
         { []
         }
     {offset
       cgLnL: // global
           I64[Sp - 8] = block_cgLnR_info;
           _sgANE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgANE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLo6; else goto cgLnS;
       ugLo6: // global
           call _cgLnR(R1) args: 0, res: 0, upd: 0;
       cgLnS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLnL_info" {
     block_cgLnL_info:
         const _cgLnL;
         const 1;
         const 4294967326;
         const SgBbV_srt+1152;
 },
 _cgLnR() //  [R1]
         { []
         }
     {offset
       cgLnR: // global
           I64[Sp] = block_cgLnW_info;
           _sgANG::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgANG::F64;
           if (R1 & 7 != 0) goto ugLo8; else goto cgLo1;
       ugLo8: // global
           call _cgLnW(R1) args: 0, res: 0, upd: 0;
       cgLo1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLnR_info" {
     block_cgLnR_info:
         const _cgLnR;
         const 2;
         const 4294967326;
         const SgBbV_srt+1152;
 },
 _cgLnW() //  [R1]
         { []
         }
     {offset
       cgLnW: // global
           D2 = F64[R1 + 7];
           D1 = F64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**_entry(D2,
                                            D1,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLnW_info" {
     block_cgLnW_info:
         const _cgLnW;
         const 66;
         const 4294967326;
         const SgBbV_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.593059939 UTC

[section ""data" . Data.Complex.$fFloatingComplex_nan1_closure" {
     Data.Complex.$fFloatingComplex_nan1_closure:
         const Data.Complex.$fFloatingComplex_nan1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_nan1_entry() //  [R1]
         { []
         }
     {offset
       cgLoy: // global
           _rgA3V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgLoB; else goto cgLoC;
       cgLoC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgLoE; else goto cgLoD;
       cgLoE: // global
           HpAlloc = 16;
           goto cgLoB;
       cgLoB: // global
           R1 = _rgA3V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLoD: // global
           (_cgLot::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA3V::P64);
           if (_cgLot::I64 == 0) goto cgLov; else goto cgLou;
       cgLov: // global
           call (I64[I64[_rgA3V::P64]])() args: 8, res: 0, upd: 8;
       cgLou: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLot::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(0.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_nan1_info" {
     Data.Complex.$fFloatingComplex_nan1_info:
         const Data.Complex.$fFloatingComplex_nan1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.597946508 UTC

[section ""data" . Data.Complex.$fFloatingComplex_inf1_closure" {
     Data.Complex.$fFloatingComplex_inf1_closure:
         const Data.Complex.$fFloatingComplex_inf1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_inf1_entry() //  [R1]
         { []
         }
     {offset
       cgLoY: // global
           _rgA3Y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgLp1; else goto cgLp2;
       cgLp2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgLp4; else goto cgLp3;
       cgLp4: // global
           HpAlloc = 16;
           goto cgLp1;
       cgLp1: // global
           R1 = _rgA3Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLp3: // global
           (_cgLoT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA3Y::P64);
           if (_cgLoT::I64 == 0) goto cgLoV; else goto cgLoU;
       cgLoV: // global
           call (I64[I64[_rgA3Y::P64]])() args: 8, res: 0, upd: 8;
       cgLoU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLoT::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_inf1_info" {
     Data.Complex.$fFloatingComplex_inf1_info:
         const Data.Complex.$fFloatingComplex_inf1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.602823774 UTC

[section ""data" . Data.Complex.$fFloatingComplex14_closure" {
     Data.Complex.$fFloatingComplex14_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_nan1_closure;
         const Data.Complex.$fFloatingComplex_nan1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.605560186 UTC

[section ""data" . Data.Complex.$fFloatingComplex13_closure" {
     Data.Complex.$fFloatingComplex13_closure:
         const Data.Complex.$fFloatingComplex13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex13_entry() //  [R1]
         { []
         }
     {offset
       cgLpr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLps; else goto cgLpt;
       cgLps: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLpt: // global
           (_cgLpl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgLpl::I64 == 0) goto cgLpn; else goto cgLpm;
       cgLpn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgLpm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLpl::I64;
           I64[Sp - 24] = block_cgLpo_info;
           R1 = Data.Complex.$fFloatingComplex_nan1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugLpx; else goto cgLpp;
       ugLpx: // global
           call _cgLpo() args: 0, res: 0, upd: 0;
       cgLpp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex13_info" {
     Data.Complex.$fFloatingComplex13_info:
         const Data.Complex.$fFloatingComplex13_entry;
         const 0;
         const 12884901909;
         const SgBbV_srt+1184;
 },
 _cgLpo() //  []
         { []
         }
     {offset
       cgLpo: // global
           R1 = Data.Complex.$fFloatingComplex14_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgLpo_info" {
     block_cgLpo_info:
         const _cgLpo;
         const 0;
         const 4294967326;
         const SgBbV_srt+1184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.611125194 UTC

[section ""data" . Data.Complex.$fFloatingComplex16_closure" {
     Data.Complex.$fFloatingComplex16_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_inf1_closure;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.616545721 UTC

[section ""data" . Data.Complex.$fFloatingComplex15_closure" {
     Data.Complex.$fFloatingComplex15_closure:
         const Data.Complex.$fFloatingComplex15_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex15_entry() //  [R1]
         { []
         }
     {offset
       cgLpU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLpV; else goto cgLpW;
       cgLpV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLpW: // global
           (_cgLpO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgLpO::I64 == 0) goto cgLpQ; else goto cgLpP;
       cgLpQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgLpP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgLpO::I64;
           I64[Sp - 24] = block_cgLpR_info;
           R1 = Data.Complex.$fFloatingComplex_inf1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugLq0; else goto cgLpS;
       ugLq0: // global
           call _cgLpR() args: 0, res: 0, upd: 0;
       cgLpS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex15_info" {
     Data.Complex.$fFloatingComplex15_info:
         const Data.Complex.$fFloatingComplex15_entry;
         const 0;
         const 12884901909;
         const SgBbV_srt+1200;
 },
 _cgLpR() //  []
         { []
         }
     {offset
       cgLpR: // global
           R1 = Data.Complex.$fFloatingComplex16_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgLpR_info" {
     block_cgLpR_info:
         const _cgLpR;
         const 0;
         const 4294967326;
         const SgBbV_srt+1200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.622555985 UTC

[section ""data" . Data.Complex.$fFloatingComplex11_closure" {
     Data.Complex.$fFloatingComplex11_closure:
         const GHC.Types.F#_con_info;
         const 1.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.624553472 UTC

[section ""data" . Data.Complex.$fFloatingComplex10_closure" {
     Data.Complex.$fFloatingComplex10_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex11_closure+1;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.631086506 UTC

[section ""data" . Data.Complex.$w$s$c**1_closure" {
     Data.Complex.$w$s$c**1_closure:
         const Data.Complex.$w$s$c**1_info;
         const 0;
 },
 Data.Complex.$w$s$c**1_slow() //  [R1]
         { []
         }
     {offset
       cgLqg: // global
           F2 = F32[Sp + 16];
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**1_entry(F2,
                                             F1,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c**1_entry() //  [R2, F1, F2]
         { []
         }
     {offset
       cgLqr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgLqs; else goto cgLqt;
       cgLqs: // global
           R1 = Data.Complex.$w$s$c**1_closure;
           P64[Sp - 24] = R2;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       cgLqt: // global
           _sgANR::F32 = F2;
           _sgANQ::F32 = F1;
           _sgANP::P64 = R2;
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto cgLqq; else goto sgANS;
       cgLqq: // global
           if (%MO_F_Eq_W32(_sgANR::F32,
                            0.0 :: W32)) goto cgLsW; else goto sgANS;
       cgLsW: // global
           R1 = Data.Complex.$fFloatingComplex10_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       sgANS: // global
           I64[Sp - 24] = block_cgLqx_info;
           R1 = _sgANP::P64;
           F32[Sp - 16] = _sgANQ::F32;
           F32[Sp - 8] = _sgANR::F32;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugLsX; else goto cgLqy;
       ugLsX: // global
           call _cgLqx(R1) args: 0, res: 0, upd: 0;
       cgLqy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c**1_info" {
     Data.Complex.$w$s$c**1_info:
         const Data.Complex.$w$s$c**1_entry;
         const 0;
         const 252201583427715086;
         const 12884901888;
         const SgBbV_srt+1032;
         const 387;
         const Data.Complex.$w$s$c**1_slow;
 },
 _cgLqx() //  [R1]
         { []
         }
     {offset
       cgLqx: // global
           I64[Sp - 8] = block_cgLqC_info;
           _sgANV::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgANV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLsY; else goto cgLqD;
       ugLsY: // global
           call _cgLqC(R1) args: 0, res: 0, upd: 0;
       cgLqD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLqx_info" {
     block_cgLqx_info:
         const _cgLqx;
         const 194;
         const 216172786408751134;
         const SgBbV_srt+1032;
 },
 _cgLqC() //  [R1]
         { []
         }
     {offset
       cgLqC: // global
           I64[Sp] = block_cgLqH_info;
           _sgANY::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgANY::F32;
           if (R1 & 7 != 0) goto ugLsZ; else goto cgLqL;
       ugLsZ: // global
           call _cgLqH(R1) args: 0, res: 0, upd: 0;
       cgLqL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLqC_info" {
     block_cgLqC_info:
         const _cgLqC;
         const 387;
         const 216172786408751134;
         const SgBbV_srt+1032;
 },
 _cgLqH() //  [R1]
         { []
         }
     {offset
       cgLqH: // global
           _sgANQ::F32 = F32[Sp + 16];
           _sgANY::F32 = F32[Sp + 8];
           _sgAO0::F32 = F32[R1 + 7];
           if (%MO_F_Eq_W32(_sgAO0::F32,
                            0.0 :: W32)) goto cgLsP; else goto sgAO1;
       cgLsP: // global
           if (%MO_F_Eq_W32(_sgANY::F32,
                            0.0 :: W32)) goto cgLsO; else goto sgAO1;
       cgLsO: // global
           if (%MO_F_Lt_W32(_sgANQ::F32,
                            0.0 :: W32)) goto cgLsN; else goto cgLsM;
       cgLsM: // global
           if (%MO_F_Eq_W32(_sgANQ::F32,
                            0.0 :: W32)) goto cgLsK; else goto cgLsJ;
       sgAO1: // global
           (_sgAO6::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(_sgAO0::F32);
           if (_sgAO6::I64 == 0) goto cgLsq; else goto cgLrc;
       cgLsq: // global
           (_sgAOd::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(_sgANY::F32);
           if (_sgAOd::I64 == 0) goto cgLsl; else goto cgLru;
       cgLsl: // global
           I64[Sp - 8] = block_cgLrw_info;
           F2 = _sgANY::F32;
           F1 = _sgAO0::F32;
           F32[Sp] = _sgAO0::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
       cgLru: // global
           if (%MO_F_Lt_W32(_sgANQ::F32,
                            0.0 :: W32)) goto cgLsJ; else goto cgLrr;
       cgLrr: // global
           if (%MO_F_Eq_W32(_sgANQ::F32,
                            0.0 :: W32)) goto cgLsK; else goto cgLsN;
       cgLrc: // global
           if (%MO_F_Lt_W32(_sgANQ::F32,
                            0.0 :: W32)) goto cgLsJ; else goto cgLr9;
       cgLsJ: // global
           R1 = Data.Complex.$fFloatingComplex12_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgLr9: // global
           if (%MO_F_Eq_W32(_sgANQ::F32,
                            0.0 :: W32)) goto cgLsK; else goto cgLsN;
       cgLsK: // global
           R1 = Data.Complex.$fFloatingComplex13_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cgLsN: // global
           R1 = Data.Complex.$fFloatingComplex15_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLqH_info" {
     block_cgLqH_info:
         const _cgLqH;
         const 451;
         const 216172786408751134;
         const SgBbV_srt+1032;
 },
 _cgLrw() //  [F1]
         { []
         }
     {offset
       cgLrw: // global
           _sgANY::F32 = F32[Sp + 16];
           _sgAO0::F32 = F32[Sp + 8];
           _cgLrB::F32 = F1;
           (_cgLrA::F32) = call MO_F32_Log(_cgLrB::F32);
           I64[Sp + 8] = block_cgLrE_info;
           F2 = _sgANY::F32;
           F1 = _sgAO0::F32;
           F32[Sp + 16] = _cgLrA::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLrw_info" {
     block_cgLrw_info:
         const _cgLrw;
         const 964;
         const 30;
 },
 _cgLrE() //  [F1]
         { []
         }
     {offset
       cgLrE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLsp; else goto cgLso;
       cgLsp: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgLso: // global
           _sgANQ::F32 = F32[Sp + 16];
           _sgANR::F32 = F32[Sp + 24];
           _sgAOi::F32 = F32[Sp + 8];
           _sgAOk::F32 = %MO_F_Add_W32(%MO_F_Mul_W32(_sgAOi::F32,
                                                     _sgANR::F32),
                                       %MO_F_Mul_W32(F1, _sgANQ::F32));
           _cgLs1::F32 = %MO_F_Sub_W32(%MO_F_Mul_W32(_sgAOi::F32,
                                                     _sgANQ::F32),
                                       %MO_F_Mul_W32(F1, _sgANR::F32));
           (_cgLs0::F32) = call MO_F32_Exp(_cgLs1::F32);
           (_cgLs4::F32) = call MO_F32_Sin(_sgAOk::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgLs0::F32, _cgLs4::F32);
           (_cgLsc::F32) = call MO_F32_Cos(_sgAOk::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgLs0::F32, _cgLsc::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLrE_info" {
     block_cgLrE_info:
         const _cgLrE;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.649930307 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c**1_closure" {
     Data.Complex.$fFloatingComplex_$s$c**1_closure:
         const Data.Complex.$fFloatingComplex_$s$c**1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c**1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgLu9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLui; else goto cgLuj;
       cgLui: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c**1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLuj: // global
           I64[Sp - 16] = block_cgLu6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugLus; else goto cgLu7;
       ugLus: // global
           call _cgLu6(R1) args: 0, res: 0, upd: 0;
       cgLu7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c**1_info" {
     Data.Complex.$fFloatingComplex_$s$c**1_info:
         const Data.Complex.$fFloatingComplex_$s$c**1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgBbV_srt+1216;
 },
 _cgLu6() //  [R1]
         { []
         }
     {offset
       cgLu6: // global
           I64[Sp - 8] = block_cgLuc_info;
           _sgAOH::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAOH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLur; else goto cgLud;
       ugLur: // global
           call _cgLuc(R1) args: 0, res: 0, upd: 0;
       cgLud: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLu6_info" {
     block_cgLu6_info:
         const _cgLu6;
         const 1;
         const 4294967326;
         const SgBbV_srt+1216;
 },
 _cgLuc() //  [R1]
         { []
         }
     {offset
       cgLuc: // global
           I64[Sp] = block_cgLuh_info;
           _sgAOJ::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAOJ::F32;
           if (R1 & 7 != 0) goto ugLut; else goto cgLum;
       ugLut: // global
           call _cgLuh(R1) args: 0, res: 0, upd: 0;
       cgLum: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLuc_info" {
     block_cgLuc_info:
         const _cgLuc;
         const 2;
         const 4294967326;
         const SgBbV_srt+1216;
 },
 _cgLuh() //  [R1]
         { []
         }
     {offset
       cgLuh: // global
           F2 = F32[R1 + 7];
           F1 = F32[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**1_entry(F2,
                                             F1,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLuh_info" {
     block_cgLuh_info:
         const _cgLuh;
         const 66;
         const 4294967326;
         const SgBbV_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.674336407 UTC

[section ""data" . Data.Complex.$w$c**_closure" {
     Data.Complex.$w$c**_closure:
         const Data.Complex.$w$c**_info;
         const 0;
 },
 $dNum_sgAOU_entry() //  [R1]
         { []
         }
     {offset
       cgLv9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLva; else goto cgLvb;
       cgLva: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLvb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgAOU_info" {
     $dNum_sgAOU_info:
         const $dNum_sgAOU_entry;
         const 1;
         const 16;
 },
 sat_sgAPy_entry() //  [R1]
         { []
         }
     {offset
       cgLvg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLvh; else goto cgLvi;
       cgLvh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLvi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAPy_info" {
     sat_sgAPy_info:
         const sat_sgAPy_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 $dFractional_sgAP0_entry() //  [R1]
         { []
         }
     {offset
       cgLvx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLvy; else goto cgLvz;
       cgLvy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLvz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgAP0_info" {
     $dFractional_sgAP0_info:
         const $dFractional_sgAP0_entry;
         const 1;
         const 16;
 },
 sat_sgAP3_entry() //  [R1]
         { []
         }
     {offset
       cgLvI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLvJ; else goto cgLvK;
       cgLvJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLvK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAP3_info" {
     sat_sgAP3_info:
         const sat_sgAP3_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 sat_sgAP2_entry() //  [R1]
         { []
         }
     {offset
       cgLvP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLvQ; else goto cgLvR;
       cgLvQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLvR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAP2_info" {
     sat_sgAP2_info:
         const sat_sgAP2_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 nan_sgAP1_entry() //  [R1]
         { []
         }
     {offset
       cgLvS: // global
           _sgAP1::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgLvT; else goto cgLvU;
       cgLvU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgLvW; else goto cgLvV;
       cgLvW: // global
           HpAlloc = 48;
           goto cgLvT;
       cgLvT: // global
           R1 = _sgAP1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLvV: // global
           _sgAOU::P64 = P64[_sgAP1::P64 + 16];
           _sgAP0::P64 = P64[_sgAP1::P64 + 24];
           I64[Hp - 40] = sat_sgAP3_info;
           P64[Hp - 24] = _sgAOU::P64;
           I64[Hp - 16] = sat_sgAP2_info;
           P64[Hp] = _sgAOU::P64;
           R2 = _sgAP0::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . nan_sgAP1_info" {
     nan_sgAP1_info:
         const nan_sgAP1_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1248;
 },
 sat_sgAP6_entry() //  [R1]
         { []
         }
     {offset
       cgLw5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLw6; else goto cgLw7;
       cgLw6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLw7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAP6_info" {
     sat_sgAP6_info:
         const sat_sgAP6_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 sat_sgAP5_entry() //  [R1]
         { []
         }
     {offset
       cgLwc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLwd; else goto cgLwe;
       cgLwd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLwe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAP5_info" {
     sat_sgAP5_info:
         const sat_sgAP5_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 inf_sgAP4_entry() //  [R1]
         { []
         }
     {offset
       cgLwf: // global
           _sgAP4::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgLwg; else goto cgLwh;
       cgLwh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgLwj; else goto cgLwi;
       cgLwj: // global
           HpAlloc = 48;
           goto cgLwg;
       cgLwg: // global
           R1 = _sgAP4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLwi: // global
           _sgAOU::P64 = P64[_sgAP4::P64 + 16];
           _sgAP0::P64 = P64[_sgAP4::P64 + 24];
           I64[Hp - 40] = sat_sgAP6_info;
           P64[Hp - 24] = _sgAOU::P64;
           I64[Hp - 16] = sat_sgAP5_info;
           P64[Hp] = _sgAOU::P64;
           R2 = _sgAP0::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . inf_sgAP4_info" {
     inf_sgAP4_info:
         const inf_sgAP4_entry;
         const 2;
         const 12884901906;
         const SgBbV_srt+1248;
 },
 sat_sgAPo_entry() //  [R1]
         { []
         }
     {offset
       cgLwo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLwp; else goto cgLwq;
       cgLwp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLwq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAPo_info" {
     sat_sgAPo_info:
         const sat_sgAPo_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 sat_sgAPa_entry() //  [R1]
         { []
         }
     {offset
       cgLwF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLwG; else goto cgLwH;
       cgLwG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLwH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAPa_info" {
     sat_sgAPa_info:
         const sat_sgAPa_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 sat_sgAPq_entry() //  [R1]
         { []
         }
     {offset
       cgLwR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLwS; else goto cgLwT;
       cgLwS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLwT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAPq_info" {
     sat_sgAPq_info:
         const sat_sgAPq_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 sat_sgAPs_entry() //  [R1]
         { []
         }
     {offset
       cgLx3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLx4; else goto cgLx5;
       cgLx4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLx5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAPs_info" {
     sat_sgAPs_info:
         const sat_sgAPs_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 sat_sgAPA_entry() //  [R1]
         { []
         }
     {offset
       cgLxf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLxg; else goto cgLxh;
       cgLxg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLxh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAPA_info" {
     sat_sgAPA_info:
         const sat_sgAPA_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1248;
 },
 section ""relreadonly" . ugLzV_srtd" {
     ugLzV_srtd:
         const SgBbV_srt+800;
         const 59;
         const 504403158265495553;
 },
 Data.Complex.$w$c**_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgLxi: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cgLxj; else goto cgLxk;
       cgLxj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c**_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLxk: // global
           I64[Sp - 40] = block_cgLuP_info;
           _sgAOM::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _sgAOM::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c**_info" {
     Data.Complex.$w$c**_info:
         const Data.Complex.$w$c**_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const ugLzV_srtd;
 },
 section ""relreadonly" . ugLzW_srtd" {
     ugLzW_srtd:
         const SgBbV_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgLuP() //  [R1]
         { []
         }
     {offset
       cgLuP: // global
           I64[Sp - 8] = block_cgLuT_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLuP_info" {
     block_cgLuP_info:
         const _cgLuP;
         const 4;
         const 18446744069414584350;
         const ugLzW_srtd;
 },
 section ""relreadonly" . ugLzX_srtd" {
     ugLzX_srtd:
         const SgBbV_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgLuT() //  [R1]
         { []
         }
     {offset
       cgLuT: // global
           I64[Sp - 8] = block_cgLuX_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLuT_info" {
     block_cgLuT_info:
         const _cgLuT;
         const 5;
         const 18446744069414584350;
         const ugLzX_srtd;
 },
 section ""relreadonly" . ugLzY_srtd" {
     ugLzY_srtd:
         const SgBbV_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgLuX() //  [R1]
         { []
         }
     {offset
       cgLuX: // global
           I64[Sp - 8] = block_cgLv1_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLuX_info" {
     block_cgLuX_info:
         const _cgLuX;
         const 6;
         const 18446744069414584350;
         const ugLzY_srtd;
 },
 section ""relreadonly" . ugLzZ_srtd" {
     ugLzZ_srtd:
         const SgBbV_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgLv1() //  [R1]
         { []
         }
     {offset
       cgLv1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgLxq; else goto cgLxp;
       cgLxq: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLxp: // global
           I64[Hp - 40] = $dNum_sgAOU_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_sgAPy_info;
           _cgLv5::P64 = Hp - 40;
           P64[Hp] = _cgLv5::P64;
           I64[Sp - 8] = block_cgLx6_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 48];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgLv5::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLv1_info" {
     block_cgLv1_info:
         const _cgLv1;
         const 7;
         const 18446744069414584350;
         const ugLzZ_srtd;
 },
 section ""relreadonly" . ugLA0_srtd" {
     ugLA0_srtd:
         const SgBbV_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgLx6() //  [R1]
         { []
         }
     {offset
       cgLx6: // global
           if (R1 & 7 == 1) goto ugLzI; else goto cgLze;
       ugLzI: // global
           Sp = Sp + 8;
           call _sgAOV() args: 0, res: 0, upd: 0;
       cgLze: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLzh; else goto cgLzg;
       cgLzh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLzg: // global
           I64[Hp - 16] = sat_sgAPA_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cgLzd_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLx6_info" {
     block_cgLx6_info:
         const _cgLx6;
         const 8;
         const 18446744069414584350;
         const ugLA0_srtd;
 },
 section ""relreadonly" . ugLA1_srtd" {
     ugLA1_srtd:
         const SgBbV_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgLzd() //  [R1]
         { []
         }
     {offset
       cgLzd: // global
           if (R1 & 7 == 1) goto ugLzJ; else goto cgLzu;
       ugLzJ: // global
           Sp = Sp + 8;
           call _sgAOV() args: 0, res: 0, upd: 0;
       cgLzu: // global
           I64[Sp + 16] = block_cgLzq_info;
           R2 = P64[Sp + 24];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Data.Complex.$fFloatingComplex19_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLzd_info" {
     block_cgLzd_info:
         const _cgLzd;
         const 8;
         const 18446744069414584350;
         const ugLA1_srtd;
 },
 _sgAOV() //  []
         { []
         }
     {offset
       sgAOV: // global
           I64[Sp - 8] = block_cgLvo_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLzU; else goto cgLvp;
       ugLzU: // global
           call _cgLvo(R1) args: 0, res: 0, upd: 0;
       cgLvp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ugLA2_srtd" {
     ugLA2_srtd:
         const SgBbV_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgLvo() //  [R1]
         { []
         }
     {offset
       cgLvo: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgLxu; else goto cgLxt;
       cgLxu: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLxt: // global
           _sgAOY::P64 = P64[R1 + 7];
           _sgAOZ::P64 = P64[R1 + 15];
           I64[Hp - 104] = $dFractional_sgAP0_info;
           P64[Hp - 88] = P64[Sp + 32];
           I64[Hp - 80] = nan_sgAP1_info;
           _cgLv5::P64 = P64[Sp + 24];
           P64[Hp - 64] = _cgLv5::P64;
           _cgLvt::P64 = Hp - 104;
           P64[Hp - 56] = _cgLvt::P64;
           I64[Hp - 48] = inf_sgAP4_info;
           P64[Hp - 32] = _cgLv5::P64;
           P64[Hp - 24] = _cgLvt::P64;
           I64[Hp - 16] = sat_sgAPo_info;
           P64[Hp] = _cgLv5::P64;
           I64[Sp - 16] = block_cgLwI_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgAOY::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 8] = _sgAOZ::P64;
           P64[Sp] = _sgAOY::P64;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 48] = Hp - 80;
           Sp = Sp - 40;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLvo_info" {
     block_cgLvo_info:
         const _cgLvo;
         const 2056;
         const 18446744069414584350;
         const ugLA2_srtd;
 },
 section ""relreadonly" . ugLA3_srtd" {
     ugLA3_srtd:
         const SgBbV_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgLwI() //  [R1]
         { []
         }
     {offset
       cgLwI: // global
           if (R1 & 7 == 1) goto ugLzK; else goto cgLyw;
       ugLzK: // global
           Sp = Sp + 8;
           call _sgAP7() args: 0, res: 0, upd: 0;
       cgLyw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLyz; else goto cgLyy;
       cgLyz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLyy: // global
           I64[Hp - 16] = sat_sgAPq_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_cgLwU_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 8];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLwI_info" {
     block_cgLwI_info:
         const _cgLwI;
         const 10;
         const 18446744069414584350;
         const ugLA3_srtd;
 },
 section ""relreadonly" . ugLA4_srtd" {
     ugLA4_srtd:
         const SgBbV_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgLwU() //  [R1]
         { []
         }
     {offset
       cgLwU: // global
           if (R1 & 7 == 1) goto ugLzL; else goto cgLyF;
       ugLzL: // global
           Sp = Sp + 8;
           call _sgAP7() args: 0, res: 0, upd: 0;
       cgLyF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLyI; else goto cgLyH;
       cgLyI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLyH: // global
           I64[Hp - 16] = sat_sgAPs_info;
           P64[Hp] = P64[Sp + 40];
           _sgAOS::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cgLyE_info;
           R2 = _sgAOS::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 72];
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLwU_info" {
     block_cgLwU_info:
         const _cgLwU;
         const 266;
         const 18446744069414584350;
         const ugLA4_srtd;
 },
 _sgAP7() //  []
         { []
         }
     {offset
       sgAP7: // global
           I64[Sp - 8] = block_cgLxv_info;
           R2 = P64[Sp + 48];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 8];
           Sp = Sp - 24;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ugLA5_srtd" {
     ugLA5_srtd:
         const SgBbV_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgLxv() //  [R1]
         { []
         }
     {offset
       cgLxv: // global
           if (R1 & 7 == 1) goto cgLy7; else goto ugLzM;
       cgLy7: // global
           I64[Sp] = block_cgLy4_info;
           R2 = P64[Sp + 56];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
       ugLzM: // global
           Sp = Sp + 24;
           call _cgLwz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgLxv_info" {
     block_cgLxv_info:
         const _cgLxv;
         const 266;
         const 18446744069414584350;
         const ugLA5_srtd;
 },
 section ""relreadonly" . ugLA6_srtd" {
     ugLA6_srtd:
         const SgBbV_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgLy4() //  [R1]
         { []
         }
     {offset
       cgLy4: // global
           if (R1 & 7 == 1) goto cgLyg; else goto ugLzN;
       cgLyg: // global
           I64[Sp + 48] = block_cgLyb_info;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 56];
           Sp = Sp + 48;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
       ugLzN: // global
           Sp = Sp + 24;
           call _cgLwz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgLy4_info" {
     block_cgLy4_info:
         const _cgLy4;
         const 266;
         const 18446744069414584350;
         const ugLA6_srtd;
 },
 _cgLyb() //  [R1, R2]
         { []
         }
     {offset
       cgLyb: // global
           I64[Sp] = block_cgLyd_info;
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLyb_info" {
     block_cgLyb_info:
         const _cgLyb;
         const 132;
         const 30;
 },
 _cgLyd() //  [R1, R2]
         { []
         }
     {offset
       cgLyd: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLyd_info" {
     block_cgLyd_info:
         const _cgLyd;
         const 900;
         const 30;
 },
 _cgLwz() //  []
         { []
         }
     {offset
       cgLwz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLxA; else goto cgLxz;
       cgLxA: // global
           HpAlloc = 24;
           I64[Sp] = block_cgLwz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cgLxz: // global
           I64[Hp - 16] = sat_sgAPa_info;
           P64[Hp] = P64[Sp + 16];
           _sgAOS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgLxx_info;
           R2 = _sgAOS::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLwz_info" {
     block_cgLwz_info:
         const _cgLwz;
         const 4615;
         const 4294967326;
         const SgBbV_srt+1248;
 },
 _cgLxx() //  [R1]
         { []
         }
     {offset
       cgLxx: // global
           _cgLzF::P64 = R1 & 7;
           if (_cgLzF::P64 < 3) goto ugLzG; else goto cgLxX;
       ugLzG: // global
           if (_cgLzF::P64 < 2) goto cgLxH; else goto cgLxO;
       cgLxH: // global
           I64[Sp + 48] = block_cgLxE_info;
           R2 = P64[Sp + 8];
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp + 32;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
       cgLxO: // global
           I64[Sp + 48] = block_cgLxM_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgLxX: // global
           I64[Sp] = block_cgLxT_info;
           R1 = P64[Sp + 16];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLxx_info" {
     block_cgLxx_info:
         const _cgLxx;
         const 3334;
         const 4294967326;
         const SgBbV_srt+1248;
 },
 _cgLxE() //  [R1]
         { []
         }
     {offset
       cgLxE: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLxE_info" {
     block_cgLxE_info:
         const _cgLxE;
         const 0;
         const 30;
 },
 _cgLxM() //  [R1]
         { []
         }
     {offset
       cgLxM: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLxM_info" {
     block_cgLxM_info:
         const _cgLxM;
         const 0;
         const 30;
 },
 _cgLxT() //  [R1]
         { []
         }
     {offset
       cgLxT: // global
           I64[Sp + 40] = block_cgLxV_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 48] = R1;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLxT_info" {
     block_cgLxT_info:
         const _cgLxT;
         const 3974;
         const 4294967326;
         const SgBbV_srt+1248;
 },
 _cgLxV() //  [R1]
         { []
         }
     {offset
       cgLxV: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLxV_info" {
     block_cgLxV_info:
         const _cgLxV;
         const 1;
         const 30;
 },
 _cgLyE() //  [R1]
         { []
         }
     {offset
       cgLyE: // global
           _cgLzC::P64 = R1 & 7;
           if (_cgLzC::P64 < 3) goto ugLzH; else goto cgLz6;
       ugLzH: // global
           if (_cgLzC::P64 < 2) goto cgLyR; else goto cgLyZ;
       cgLyR: // global
           I64[Sp] = block_cgLyM_info;
           R1 = P64[Sp + 16];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgLyZ: // global
           I64[Sp + 48] = block_cgLyX_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgLz6: // global
           I64[Sp + 48] = block_cgLz4_info;
           R2 = P64[Sp + 8];
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp + 32;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLyE_info" {
     block_cgLyE_info:
         const _cgLyE;
         const 3334;
         const 4294967326;
         const SgBbV_srt+1248;
 },
 _cgLyM() //  [R1]
         { []
         }
     {offset
       cgLyM: // global
           I64[Sp + 40] = block_cgLyO_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 48] = R1;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLyM_info" {
     block_cgLyM_info:
         const _cgLyM;
         const 3974;
         const 4294967326;
         const SgBbV_srt+1248;
 },
 _cgLyO() //  [R1]
         { []
         }
     {offset
       cgLyO: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLyO_info" {
     block_cgLyO_info:
         const _cgLyO;
         const 1;
         const 30;
 },
 _cgLyX() //  [R1]
         { []
         }
     {offset
       cgLyX: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLyX_info" {
     block_cgLyX_info:
         const _cgLyX;
         const 0;
         const 30;
 },
 _cgLz4() //  [R1]
         { []
         }
     {offset
       cgLz4: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLz4_info" {
     block_cgLz4_info:
         const _cgLz4;
         const 0;
         const 30;
 },
 _cgLzq() //  [R1]
         { []
         }
     {offset
       cgLzq: // global
           I64[Sp + 40] = block_cgLzs_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 48] = R1;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLzq_info" {
     block_cgLzq_info:
         const _cgLzq;
         const 3974;
         const 4294967326;
         const SgBbV_srt+1248;
 },
 _cgLzs() //  [R1]
         { []
         }
     {offset
       cgLzs: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLzs_info" {
     block_cgLzs_info:
         const _cgLzs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.754922384 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c**_closure" {
     Data.Complex.$fFloatingComplex_$c**_closure:
         const Data.Complex.$fFloatingComplex_$c**_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$c**_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgLDu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLDA; else goto cgLDB;
       cgLDA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c**_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLDB: // global
           I64[Sp - 24] = block_cgLDr_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugLDG; else goto cgLDs;
       ugLDG: // global
           call _cgLDr(R1) args: 0, res: 0, upd: 0;
       cgLDs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c**_info" {
     Data.Complex.$fFloatingComplex_$c**_info:
         const Data.Complex.$fFloatingComplex_$c**_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgBbV_srt+1264;
 },
 _cgLDr() //  [R1]
         { []
         }
     {offset
       cgLDr: // global
           _sgAPF::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgLDx_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _sgAPF::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$w$c**_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLDr_info" {
     block_cgLDr_info:
         const _cgLDr;
         const 2;
         const 4294967326;
         const SgBbV_srt+1264;
 },
 _cgLDx() //  [R1, R2]
         { []
         }
     {offset
       cgLDx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLDF; else goto cgLDE;
       cgLDF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLDE: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLDx_info" {
     block_cgLDx_info:
         const _cgLDx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.764586906 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexpm2_closure" {
     Data.Complex.$fFloatingComplex_$s$cexpm2_closure:
         const Data.Complex.$fFloatingComplex_$s$cexpm2_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexpm2_entry() //  [R2]
         { []
         }
     {offset
       cgLE1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLEa; else goto cgLEb;
       cgLEa: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexpm2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgLEb: // global
           I64[Sp - 8] = block_cgLDY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLFE; else goto cgLDZ;
       ugLFE: // global
           call _cgLDY(R1) args: 0, res: 0, upd: 0;
       cgLDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexpm2_info" {
     Data.Complex.$fFloatingComplex_$s$cexpm2_info:
         const Data.Complex.$fFloatingComplex_$s$cexpm2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgLDY() //  [R1]
         { []
         }
     {offset
       cgLDY: // global
           I64[Sp - 8] = block_cgLE4_info;
           _sgAPQ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAPQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLFD; else goto cgLE5;
       ugLFD: // global
           call _cgLE4(R1) args: 0, res: 0, upd: 0;
       cgLE5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLDY_info" {
     block_cgLDY_info:
         const _cgLDY;
         const 0;
         const 30;
 },
 _cgLE4() //  [R1]
         { []
         }
     {offset
       cgLE4: // global
           I64[Sp] = block_cgLE9_info;
           _sgAPS::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAPS::F32;
           if (R1 & 7 != 0) goto ugLFF; else goto cgLEe;
       ugLFF: // global
           call _cgLE9(R1) args: 0, res: 0, upd: 0;
       cgLEe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLE4_info" {
     block_cgLE4_info:
         const _cgLE4;
         const 1;
         const 30;
 },
 _cgLE9() //  [R1]
         { []
         }
     {offset
       cgLE9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLEk; else goto cgLEj;
       cgLEk: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLEj: // global
           _sgAPS::F32 = F32[Sp + 8];
           _sgAPU::F32 = F32[R1 + 7];
           if (%MO_F_Lt_W32(%MO_F_Add_W32(%MO_F_Mul_W32(_sgAPS::F32,
                                                        _sgAPS::F32),
                                          %MO_F_Mul_W32(_sgAPU::F32, _sgAPU::F32)),
                            1.0 :: W32)) goto cgLFC; else goto cgLEW;
       cgLFC: // global
           (_sgAQa::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC0ZCbaseZCGHCziFloatZCexpm1f(_sgAPS::F32);
           (_cgLF3::F32) = call MO_F32_Sin(%MO_F_Quot_W32(_sgAPU::F32,
                                                          2.0 :: W32));
           (_cgLFg::F32) = call MO_F32_Sin(_sgAPU::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(%MO_F_Add_W32(_sgAQa::F32,
                                                      1.0 :: W32),
                                        _cgLFg::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           _sgAQd::F32 = %MO_F_Neg_W32(%MO_F_Mul_W32(%MO_F_Add_W32(_cgLF3::F32,
                                                                   _cgLF3::F32),
                                                     _cgLF3::F32));
           F32[Hp - 24] = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Mul_W32(_sgAQa::F32,
                                                                    _sgAQd::F32),
                                                      _sgAQa::F32),
                                        _sgAQd::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgLEW: // global
           (_cgLEx::F32) = call MO_F32_Exp(_sgAPS::F32);
           (_cgLEB::F32) = call MO_F32_Sin(_sgAPU::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgLEx::F32, _cgLEB::F32);
           (_cgLEJ::F32) = call MO_F32_Cos(_sgAPU::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Sub_W32(%MO_F_Mul_W32(_cgLEx::F32,
                                                      _cgLEJ::F32),
                                        1.0 :: W32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLE9_info" {
     block_cgLE9_info:
         const _cgLE9;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.77827821 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexpm1_closure" {
     Data.Complex.$fFloatingComplex_$s$cexpm1_closure:
         const Data.Complex.$fFloatingComplex_$s$cexpm1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexpm1_entry() //  [R2]
         { []
         }
     {offset
       cgLGB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLGK; else goto cgLGL;
       cgLGK: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexpm1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgLGL: // global
           I64[Sp - 8] = block_cgLGy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLIe; else goto cgLGz;
       ugLIe: // global
           call _cgLGy(R1) args: 0, res: 0, upd: 0;
       cgLGz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexpm1_info" {
     Data.Complex.$fFloatingComplex_$s$cexpm1_info:
         const Data.Complex.$fFloatingComplex_$s$cexpm1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgLGy() //  [R1]
         { []
         }
     {offset
       cgLGy: // global
           I64[Sp - 8] = block_cgLGE_info;
           _sgAQr::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAQr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLId; else goto cgLGF;
       ugLId: // global
           call _cgLGE(R1) args: 0, res: 0, upd: 0;
       cgLGF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLGy_info" {
     block_cgLGy_info:
         const _cgLGy;
         const 0;
         const 30;
 },
 _cgLGE() //  [R1]
         { []
         }
     {offset
       cgLGE: // global
           I64[Sp] = block_cgLGJ_info;
           _sgAQt::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAQt::F64;
           if (R1 & 7 != 0) goto ugLIf; else goto cgLGO;
       ugLIf: // global
           call _cgLGJ(R1) args: 0, res: 0, upd: 0;
       cgLGO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLGE_info" {
     block_cgLGE_info:
         const _cgLGE;
         const 1;
         const 30;
 },
 _cgLGJ() //  [R1]
         { []
         }
     {offset
       cgLGJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLGU; else goto cgLGT;
       cgLGU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLGT: // global
           _sgAQt::F64 = F64[Sp + 8];
           _sgAQv::F64 = F64[R1 + 7];
           if (%MO_F_Lt_W64(%MO_F_Add_W64(%MO_F_Mul_W64(_sgAQt::F64,
                                                        _sgAQt::F64),
                                          %MO_F_Mul_W64(_sgAQv::F64, _sgAQv::F64)),
                            1.0 :: W64)) goto cgLIc; else goto cgLHw;
       cgLIc: // global
           (_sgAQL::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC2ZCbaseZCGHCziFloatZCexpm1(_sgAQt::F64);
           (_cgLHD::F64) = call MO_F64_Sin(%MO_F_Quot_W64(_sgAQv::F64,
                                                          2.0 :: W64));
           (_cgLHQ::F64) = call MO_F64_Sin(_sgAQv::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(%MO_F_Add_W64(_sgAQL::F64,
                                                      1.0 :: W64),
                                        _cgLHQ::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           _sgAQO::F64 = %MO_F_Neg_W64(%MO_F_Mul_W64(%MO_F_Add_W64(_cgLHD::F64,
                                                                   _cgLHD::F64),
                                                     _cgLHD::F64));
           F64[Hp - 24] = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Mul_W64(_sgAQL::F64,
                                                                    _sgAQO::F64),
                                                      _sgAQL::F64),
                                        _sgAQO::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgLHw: // global
           (_cgLH7::F64) = call MO_F64_Exp(_sgAQt::F64);
           (_cgLHb::F64) = call MO_F64_Sin(_sgAQv::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgLH7::F64, _cgLHb::F64);
           (_cgLHj::F64) = call MO_F64_Cos(_sgAQv::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Sub_W64(%MO_F_Mul_W64(_cgLH7::F64,
                                                      _cgLHj::F64),
                                        1.0 :: W64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLGJ_info" {
     block_cgLGJ_info:
         const _cgLGJ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.801822145 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cexpm1_closure" {
     Data.Complex.$fFloatingComplex_$cexpm1_closure:
         const Data.Complex.$fFloatingComplex_$cexpm1_info;
         const 0;
 },
 $dNum_sgAR6_entry() //  [R1]
         { []
         }
     {offset
       cgLJp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLJq; else goto cgLJr;
       cgLJq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLJr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgAR6_info" {
     $dNum_sgAR6_info:
         const $dNum_sgAR6_entry;
         const 1;
         const 16;
 },
 sat_sgARb_entry() //  [R1]
         { []
         }
     {offset
       cgLJw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLJx; else goto cgLJy;
       cgLJx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLJy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARb_info" {
     sat_sgARb_info:
         const sat_sgARb_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgAR9_entry() //  [R1]
         { []
         }
     {offset
       cgLJH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgLJI; else goto cgLJJ;
       cgLJI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLJJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgAR3::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgAR3::P64;
           P64[Sp - 24] = _sgAR3::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAR9_info" {
     sat_sgAR9_info:
         const sat_sgAR9_entry;
         const 2;
         const 18;
 },
 sat_sgAR8_entry() //  [R1]
         { []
         }
     {offset
       cgLJO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgLJP; else goto cgLJQ;
       cgLJP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLJQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgAR2::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgAR2::P64;
           P64[Sp - 24] = _sgAR2::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAR8_info" {
     sat_sgAR8_info:
         const sat_sgAR8_entry;
         const 2;
         const 18;
 },
 sat_sgARa_entry() //  [R1]
         { []
         }
     {offset
       cgLJR: // global
           _sgARa::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLJS; else goto cgLJT;
       cgLJT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgLJV; else goto cgLJU;
       cgLJV: // global
           HpAlloc = 64;
           goto cgLJS;
       cgLJS: // global
           R1 = _sgARa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLJU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARa::P64;
           _sgAR2::P64 = P64[_sgARa::P64 + 16];
           _sgAR3::P64 = P64[_sgARa::P64 + 24];
           _sgAR6::P64 = P64[_sgARa::P64 + 32];
           I64[Hp - 56] = sat_sgAR9_info;
           P64[Hp - 40] = _sgAR3::P64;
           P64[Hp - 32] = _sgAR6::P64;
           I64[Hp - 24] = sat_sgAR8_info;
           P64[Hp - 8] = _sgAR2::P64;
           P64[Hp] = _sgAR6::P64;
           R2 = _sgAR6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARa_info" {
     sat_sgARa_info:
         const sat_sgARa_entry;
         const 3;
         const 15;
 },
 $dFloating_sgARm_entry() //  [R1]
         { []
         }
     {offset
       cgLK9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLKa; else goto cgLKb;
       cgLKa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLKb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgARm_info" {
     $dFloating_sgARm_info:
         const $dFloating_sgARm_entry;
         const 1;
         const 16;
 },
 u_sgARn_entry() //  [R1]
         { []
         }
     {offset
       cgLKg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLKh; else goto cgLKi;
       cgLKh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLKi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.expm1_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgARn_info" {
     u_sgARn_info:
         const u_sgARn_entry;
         const 2;
         const 18;
 },
 sat_sgARr_entry() //  [R1]
         { []
         }
     {offset
       cgLKD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLKE; else goto cgLKF;
       cgLKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARr_info" {
     sat_sgARr_info:
         const sat_sgARr_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1280;
 },
 sat_sgARs_entry() //  [R1]
         { []
         }
     {offset
       cgLKI: // global
           _sgARs::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLKJ; else goto cgLKK;
       cgLKK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLKM; else goto cgLKL;
       cgLKM: // global
           HpAlloc = 24;
           goto cgLKJ;
       cgLKJ: // global
           R1 = _sgARs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLKL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARs::P64;
           _sgAR3::P64 = P64[_sgARs::P64 + 16];
           _sgAR4::P64 = P64[_sgARs::P64 + 24];
           _sgAR6::P64 = P64[_sgARs::P64 + 32];
           I64[Hp - 16] = sat_sgARr_info;
           P64[Hp] = _sgAR6::P64;
           I64[Sp - 40] = block_cgLKG_info;
           R2 = _sgAR4::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgAR3::P64;
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARs_info" {
     sat_sgARs_info:
         const sat_sgARs_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1280;
 },
 _cgLKG() //  [R1]
         { []
         }
     {offset
       cgLKG: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _cgLKz::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cgLKz::P64;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgLKG_info" {
     block_cgLKG_info:
         const _cgLKG;
         const 2;
         const 30;
 },
 v_sgARp_entry() //  [R1]
         { []
         }
     {offset
       cgLKQ: // global
           _sgARp::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgLKR; else goto cgLKS;
       cgLKS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgLKU; else goto cgLKT;
       cgLKU: // global
           HpAlloc = 40;
           goto cgLKR;
       cgLKR: // global
           R1 = _sgARp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARp::P64;
           _sgAR3::P64 = P64[_sgARp::P64 + 16];
           _sgAR4::P64 = P64[_sgARp::P64 + 24];
           _sgAR6::P64 = P64[_sgARp::P64 + 32];
           _sgARm::P64 = P64[_sgARp::P64 + 40];
           I64[Hp - 32] = sat_sgARs_info;
           P64[Hp - 16] = _sgAR3::P64;
           P64[Hp - 8] = _sgAR4::P64;
           P64[Hp] = _sgAR6::P64;
           R2 = _sgARm::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . v_sgARp_info" {
     v_sgARp_info:
         const v_sgARp_entry;
         const 4;
         const 4294967311;
         const SgBbV_srt+1280;
 },
 sat_sgARt_entry() //  [R1]
         { []
         }
     {offset
       cgLL3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLL4; else goto cgLL5;
       cgLL4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLL5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARt_info" {
     sat_sgARt_info:
         const sat_sgARt_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1280;
 },
 sat_sgARu_entry() //  [R1]
         { []
         }
     {offset
       cgLL6: // global
           _sgARu::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLL7; else goto cgLL8;
       cgLL8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLLa; else goto cgLL9;
       cgLLa: // global
           HpAlloc = 24;
           goto cgLL7;
       cgLL7: // global
           R1 = _sgARu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLL9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARu::P64;
           _sgAR6::P64 = P64[_sgARu::P64 + 16];
           _sgARp::P64 = P64[_sgARu::P64 + 24];
           I64[Hp - 16] = sat_sgARt_info;
           P64[Hp] = _sgAR6::P64;
           R2 = _sgAR6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgARp::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARu_info" {
     sat_sgARu_info:
         const sat_sgARu_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1280;
 },
 sat_sgARv_entry() //  [R1]
         { []
         }
     {offset
       cgLLb: // global
           _sgARv::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLLc; else goto cgLLd;
       cgLLd: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgLLf; else goto cgLLe;
       cgLLf: // global
           HpAlloc = 80;
           goto cgLLc;
       cgLLc: // global
           R1 = _sgARv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLLe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARv::P64;
           _sgAR3::P64 = P64[_sgARv::P64 + 16];
           _sgAR4::P64 = P64[_sgARv::P64 + 24];
           _sgAR6::P64 = P64[_sgARv::P64 + 32];
           _sgARm::P64 = P64[_sgARv::P64 + 40];
           I64[Hp - 72] = v_sgARp_info;
           P64[Hp - 56] = _sgAR3::P64;
           P64[Hp - 48] = _sgAR4::P64;
           P64[Hp - 40] = _sgAR6::P64;
           P64[Hp - 32] = _sgARm::P64;
           I64[Hp - 24] = sat_sgARu_info;
           P64[Hp - 8] = _sgAR6::P64;
           _cgLKr::P64 = Hp - 72;
           P64[Hp] = _cgLKr::P64;
           R2 = _sgAR6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _cgLKr::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARv_info" {
     sat_sgARv_info:
         const sat_sgARv_entry;
         const 4;
         const 4294967311;
         const SgBbV_srt+1280;
 },
 w_sgARo_entry() //  [R1]
         { []
         }
     {offset
       cgLLg: // global
           _sgARo::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgLLh; else goto cgLLi;
       cgLLi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgLLk; else goto cgLLj;
       cgLLk: // global
           HpAlloc = 48;
           goto cgLLh;
       cgLLh: // global
           R1 = _sgARo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLLj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARo::P64;
           _sgAR3::P64 = P64[_sgARo::P64 + 16];
           _sgAR4::P64 = P64[_sgARo::P64 + 24];
           _sgAR6::P64 = P64[_sgARo::P64 + 32];
           _sgARm::P64 = P64[_sgARo::P64 + 40];
           I64[Hp - 40] = sat_sgARv_info;
           P64[Hp - 24] = _sgAR3::P64;
           P64[Hp - 16] = _sgAR4::P64;
           P64[Hp - 8] = _sgAR6::P64;
           P64[Hp] = _sgARm::P64;
           R2 = _sgAR6::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sgARo_info" {
     w_sgARo_info:
         const w_sgARo_entry;
         const 4;
         const 4294967311;
         const SgBbV_srt+1280;
 },
 sat_sgARw_entry() //  [R1]
         { []
         }
     {offset
       cgLLt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgLLu; else goto cgLLv;
       cgLLu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLLv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARw_info" {
     sat_sgARw_info:
         const sat_sgARw_entry;
         const 3;
         const 15;
 },
 sat_sgARx_entry() //  [R1]
         { []
         }
     {offset
       cgLLw: // global
           _sgARx::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLLx; else goto cgLLy;
       cgLLy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgLLA; else goto cgLLz;
       cgLLA: // global
           HpAlloc = 40;
           goto cgLLx;
       cgLLx: // global
           R1 = _sgARx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLLz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARx::P64;
           _sgAR6::P64 = P64[_sgARx::P64 + 16];
           _sgARn::P64 = P64[_sgARx::P64 + 24];
           _sgARo::P64 = P64[_sgARx::P64 + 32];
           I64[Hp - 32] = sat_sgARw_info;
           P64[Hp - 16] = _sgAR6::P64;
           P64[Hp - 8] = _sgARn::P64;
           P64[Hp] = _sgARo::P64;
           R2 = _sgAR6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgARn::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARx_info" {
     sat_sgARx_info:
         const sat_sgARx_entry;
         const 3;
         const 15;
 },
 sat_sgARB_entry() //  [R1]
         { []
         }
     {offset
       cgLLH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLLI; else goto cgLLJ;
       cgLLI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLLJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARB_info" {
     sat_sgARB_info:
         const sat_sgARB_entry;
         const 2;
         const 18;
 },
 sat_sgARz_entry() //  [R1]
         { []
         }
     {offset
       cgLLS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLLT; else goto cgLLU;
       cgLLT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLLU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARz_info" {
     sat_sgARz_info:
         const sat_sgARz_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgARA_entry() //  [R1]
         { []
         }
     {offset
       cgLLV: // global
           _sgARA::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLLW; else goto cgLLX;
       cgLLX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLLZ; else goto cgLLY;
       cgLLZ: // global
           HpAlloc = 24;
           goto cgLLW;
       cgLLW: // global
           R1 = _sgARA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLLY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgARA::P64;
           _sgAR6::P64 = P64[_sgARA::P64 + 16];
           _sgARn::P64 = P64[_sgARA::P64 + 24];
           I64[Hp - 16] = sat_sgARz_info;
           P64[Hp] = _sgAR6::P64;
           R2 = _sgAR6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgARn::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgARA_info" {
     sat_sgARA_info:
         const sat_sgARA_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1256;
 },
 section ""relreadonly" . ugLME_srtd" {
     ugLME_srtd:
         const SgBbV_srt+520;
         const 97;
         const 1;
         const 6710886400;
 },
 Data.Complex.$fFloatingComplex_$cexpm1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgLM0: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgLM1; else goto cgLM2;
       cgLM1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cexpm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLM2: // global
           I64[Sp - 16] = block_cgLJ8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugLMD; else goto cgLJ9;
       ugLMD: // global
           call _cgLJ8(R1) args: 0, res: 0, upd: 0;
       cgLJ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cexpm1_info" {
     Data.Complex.$fFloatingComplex_$cexpm1_info:
         const Data.Complex.$fFloatingComplex_$cexpm1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugLME_srtd;
 },
 section ""relreadonly" . ugLMF_srtd" {
     ugLMF_srtd:
         const SgBbV_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgLJ8() //  [R1]
         { []
         }
     {offset
       cgLJ8: // global
           I64[Sp - 16] = block_cgLJd_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLJ8_info" {
     block_cgLJ8_info:
         const _cgLJ8;
         const 1;
         const 18446744069414584350;
         const ugLMF_srtd;
 },
 section ""relreadonly" . ugLMG_srtd" {
     ugLMG_srtd:
         const SgBbV_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgLJd() //  [R1]
         { []
         }
     {offset
       cgLJd: // global
           I64[Sp - 8] = block_cgLJh_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLJd_info" {
     block_cgLJd_info:
         const _cgLJd;
         const 3;
         const 18446744069414584350;
         const ugLMG_srtd;
 },
 section ""relreadonly" . ugLMH_srtd" {
     ugLMH_srtd:
         const SgBbV_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgLJh() //  [R1]
         { []
         }
     {offset
       cgLJh: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgLM7; else goto cgLM6;
       cgLM7: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLM6: // global
           I64[Hp - 80] = $dNum_sgAR6_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sgARb_info;
           _cgLJl::P64 = Hp - 80;
           P64[Hp - 40] = _cgLJl::P64;
           I64[Hp - 32] = sat_sgARa_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgLJl::P64;
           I64[Sp - 24] = block_cgLJW_info;
           R2 = R1;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _cgLJl::P64;
           Sp = Sp - 24;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLJh_info" {
     block_cgLJh_info:
         const _cgLJh;
         const 4;
         const 18446744069414584350;
         const ugLMH_srtd;
 },
 section ""relreadonly" . ugLMI_srtd" {
     ugLMI_srtd:
         const SgBbV_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgLJW() //  [R1]
         { []
         }
     {offset
       cgLJW: // global
           _cgLJz::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgLK0_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _cgLJz::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLJW_info" {
     block_cgLJW_info:
         const _cgLJW;
         const 7;
         const 18446744069414584350;
         const ugLMI_srtd;
 },
 section ""relreadonly" . ugLMJ_srtd" {
     ugLMJ_srtd:
         const SgBbV_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgLK0() //  [R1]
         { []
         }
     {offset
       cgLK0: // global
           _sgAQZ::P64 = P64[Sp + 40];
           _sgAR2::P64 = P64[Sp + 32];
           _sgAR3::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cgLMj; else goto cgLMs;
       cgLMj: // global
           I64[Sp + 32] = block_cgLMa_info;
           R4 = _sgAR3::P64;
           R3 = _sgAR2::P64;
           R2 = _sgAQZ::P64;
           Sp = Sp + 32;
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
       cgLMs: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cgLMv; else goto cgLMu;
       cgLMv: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLMu: // global
           I64[Hp - 136] = $dFloating_sgARm_info;
           P64[Hp - 120] = _sgAQZ::P64;
           I64[Hp - 112] = u_sgARn_info;
           P64[Hp - 96] = _sgAR2::P64;
           _cgLK5::P64 = Hp - 136;
           P64[Hp - 88] = _cgLK5::P64;
           I64[Hp - 80] = w_sgARo_info;
           P64[Hp - 64] = _sgAR3::P64;
           P64[Hp - 56] = P64[Sp + 16];
           _cgLJl::P64 = P64[Sp + 8];
           P64[Hp - 48] = _cgLJl::P64;
           P64[Hp - 40] = _cgLK5::P64;
           I64[Hp - 32] = sat_sgARx_info;
           P64[Hp - 16] = _cgLJl::P64;
           _cgLKc::P64 = Hp - 112;
           P64[Hp - 8] = _cgLKc::P64;
           _cgLKj::P64 = Hp - 80;
           P64[Hp] = _cgLKj::P64;
           I64[Sp] = block_cgLLB_info;
           R2 = _cgLJl::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _cgLKj::P64;
           P64[Sp + 32] = _cgLKc::P64;
           P64[Sp + 40] = _cgLK5::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLK0_info" {
     block_cgLK0_info:
         const _cgLK0;
         const 5;
         const 18446744069414584350;
         const ugLMJ_srtd;
 },
 section ""relreadonly" . ugLMK_srtd" {
     ugLMK_srtd:
         const SgBbV_srt+520;
         const 93;
         const 1;
         const 268435456;
 },
 _cgLMa() //  [R1, R2]
         { []
         }
     {offset
       cgLMa: // global
           I64[Sp - 16] = block_cgLMc_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgARf::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgARf::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLMa_info" {
     block_cgLMa_info:
         const _cgLMa;
         const 1;
         const 18446744069414584350;
         const ugLMK_srtd;
 },
 _cgLMc() //  [R1, R2]
         { []
         }
     {offset
       cgLMc: // global
           _sgAQZ::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgLMe_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = _sgAQZ::P64;
           Sp = Sp + 24;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLMc_info" {
     block_cgLMc_info:
         const _cgLMc;
         const 3;
         const 30;
 },
 _cgLMe() //  [R1, R2]
         { []
         }
     {offset
       cgLMe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLMo; else goto cgLMn;
       cgLMo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLMn: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLMe_info" {
     block_cgLMe_info:
         const _cgLMe;
         const 0;
         const 30;
 },
 _cgLLB() //  [R1]
         { []
         }
     {offset
       cgLLB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgLMy; else goto cgLMx;
       cgLMy: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLMx: // global
           I64[Hp - 56] = sat_sgARB_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_sgARA_info;
           _cgLJl::P64 = P64[Sp + 8];
           P64[Hp - 8] = _cgLJl::P64;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cgLMp_info;
           R2 = _cgLJl::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 24] = Hp - 56;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLLB_info" {
     block_cgLLB_info:
         const _cgLLB;
         const 133;
         const 4294967326;
         const SgBbV_srt+1256;
 },
 _cgLMp() //  [R1]
         { []
         }
     {offset
       cgLMp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLMB; else goto cgLMA;
       cgLMB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLMA: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLMp_info" {
     block_cgLMp_info:
         const _cgLMp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.868624438 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1p1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1p1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1p1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1p1_entry() //  [R2]
         { []
         }
     {offset
       cgLPm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLPv; else goto cgLPw;
       cgLPv: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1p1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgLPw: // global
           I64[Sp - 8] = block_cgLPj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLRb; else goto cgLPk;
       ugLRb: // global
           call _cgLPj(R1) args: 0, res: 0, upd: 0;
       cgLPk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1p1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1p1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1p1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+1296;
 },
 _cgLPj() //  [R1]
         { []
         }
     {offset
       cgLPj: // global
           I64[Sp - 8] = block_cgLPp_info;
           _sgARG::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgARG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLRa; else goto cgLPq;
       ugLRa: // global
           call _cgLPp(R1) args: 0, res: 0, upd: 0;
       cgLPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLPj_info" {
     block_cgLPj_info:
         const _cgLPj;
         const 0;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgLPp() //  [R1]
         { []
         }
     {offset
       cgLPp: // global
           I64[Sp] = block_cgLPu_info;
           _sgARI::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgARI::F32;
           if (R1 & 7 != 0) goto ugLRc; else goto cgLPz;
       ugLRc: // global
           call _cgLPu(R1) args: 0, res: 0, upd: 0;
       cgLPz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLPp_info" {
     block_cgLPp_info:
         const _cgLPp;
         const 1;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgLPu() //  [R1]
         { []
         }
     {offset
       cgLPu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgLPF; else goto cgLPE;
       cgLPF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLPE: // global
           _sgARI::F32 = F32[Sp + 8];
           _sgARK::F32 = F32[R1 + 7];
           (_cgLPG::F32) = call MO_F32_Fabs(_sgARI::F32);
           if (%MO_F_Lt_W32(_cgLPG::F32,
                            0.5 :: W32)) goto cgLR9; else goto cgLQn;
       cgLR9: // global
           (_cgLQh::F32) = call MO_F32_Fabs(_sgARK::F32);
           if (%MO_F_Lt_W32(_cgLQh::F32,
                            0.5 :: W32)) goto cgLR5; else goto cgLQn;
       cgLR5: // global
           _sgARW::F32 = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Add_W32(_sgARI::F32,
                                                                   _sgARI::F32),
                                                     %MO_F_Mul_W32(_sgARI::F32, _sgARI::F32)),
                                       %MO_F_Mul_W32(_sgARK::F32, _sgARK::F32));
           (_cgLQI::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(_sgARW::F32,
                                                          1.0 :: W32));
           (_sgAS8::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Quot_W32(_sgARW::F32,
                                                                                                                                  %MO_F_Add_W32(_cgLQI::F32,
                                                                                                                                                1.0 :: W32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_sgARI::F32, 1.0 :: W32);
           I64[Sp] = block_cgLQY_info;
           F1 = _sgARK::F32;
           R2 = Hp - 7;
           F32[Sp + 8] = _sgAS8::F32;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
       cgLQn: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgLPR_info;
           F2 = _sgARK::F32;
           _sgARM::F32 = %MO_F_Add_W32(_sgARI::F32, 1.0 :: W32);
           F1 = _sgARM::F32;
           F32[Sp] = _sgARM::F32;
           F32[Sp + 8] = _sgARK::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLPu_info" {
     block_cgLPu_info:
         const _cgLPu;
         const 65;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgLQY() //  [F1]
         { []
         }
     {offset
       cgLQY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLR8; else goto cgLR7;
       cgLR8: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgLR7: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLQY_info" {
     block_cgLQY_info:
         const _cgLQY;
         const 65;
         const 30;
 },
 _cgLPR() //  [F1]
         { []
         }
     {offset
       cgLPR: // global
           _sgARK::F32 = F32[Sp + 16];
           _sgARM::F32 = F32[Sp + 8];
           _cgLPW::F32 = F1;
           (_cgLPV::F32) = call MO_F32_Log(_cgLPW::F32);
           I64[Sp + 8] = block_cgLPZ_info;
           F2 = _sgARK::F32;
           F1 = _sgARM::F32;
           F32[Sp + 16] = _cgLPV::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLPR_info" {
     block_cgLPR_info:
         const _cgLPR;
         const 194;
         const 30;
 },
 _cgLPZ() //  [F1]
         { []
         }
     {offset
       cgLPZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLQa; else goto cgLQ9;
       cgLQa: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgLQ9: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLPZ_info" {
     block_cgLPZ_info:
         const _cgLPZ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.888208963 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1p_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1p_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1p_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1p_entry() //  [R2]
         { []
         }
     {offset
       cgLSj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgLSs; else goto cgLSt;
       cgLSs: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1p_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgLSt: // global
           I64[Sp - 8] = block_cgLSg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLU8; else goto cgLSh;
       ugLU8: // global
           call _cgLSg(R1) args: 0, res: 0, upd: 0;
       cgLSh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1p_info" {
     Data.Complex.$fFloatingComplex_$s$clog1p_info:
         const Data.Complex.$fFloatingComplex_$s$clog1p_entry;
         const 0;
         const 9223372041149743118;
         const 4294967301;
         const SgBbV_srt+1064;
 },
 _cgLSg() //  [R1]
         { []
         }
     {offset
       cgLSg: // global
           I64[Sp - 8] = block_cgLSm_info;
           _sgASh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgASh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugLU7; else goto cgLSn;
       ugLU7: // global
           call _cgLSm(R1) args: 0, res: 0, upd: 0;
       cgLSn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLSg_info" {
     block_cgLSg_info:
         const _cgLSg;
         const 0;
         const 4294967326;
         const SgBbV_srt+1064;
 },
 _cgLSm() //  [R1]
         { []
         }
     {offset
       cgLSm: // global
           I64[Sp] = block_cgLSr_info;
           _sgASj::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgASj::F64;
           if (R1 & 7 != 0) goto ugLU9; else goto cgLSw;
       ugLU9: // global
           call _cgLSr(R1) args: 0, res: 0, upd: 0;
       cgLSw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLSm_info" {
     block_cgLSm_info:
         const _cgLSm;
         const 1;
         const 4294967326;
         const SgBbV_srt+1064;
 },
 _cgLSr() //  [R1]
         { []
         }
     {offset
       cgLSr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgLSC; else goto cgLSB;
       cgLSC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLSB: // global
           _sgASj::F64 = F64[Sp + 8];
           _sgASl::F64 = F64[R1 + 7];
           (_cgLSD::F64) = call MO_F64_Fabs(_sgASj::F64);
           if (%MO_F_Lt_W64(_cgLSD::F64,
                            0.5 :: W64)) goto cgLU6; else goto cgLTk;
       cgLU6: // global
           (_cgLTe::F64) = call MO_F64_Fabs(_sgASl::F64);
           if (%MO_F_Lt_W64(_cgLTe::F64,
                            0.5 :: W64)) goto cgLU2; else goto cgLTk;
       cgLU2: // global
           _sgASx::F64 = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Add_W64(_sgASj::F64,
                                                                   _sgASj::F64),
                                                     %MO_F_Mul_W64(_sgASj::F64, _sgASj::F64)),
                                       %MO_F_Mul_W64(_sgASl::F64, _sgASl::F64));
           (_cgLTF::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(_sgASx::F64,
                                                          1.0 :: W64));
           (_sgASJ::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Quot_W64(_sgASx::F64,
                                                                                                                                 %MO_F_Add_W64(_cgLTF::F64,
                                                                                                                                               1.0 :: W64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_sgASj::F64, 1.0 :: W64);
           I64[Sp] = block_cgLTV_info;
           D1 = _sgASl::F64;
           R2 = Hp - 7;
           F64[Sp + 8] = _sgASJ::F64;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
       cgLTk: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgLSO_info;
           D2 = _sgASl::F64;
           _sgASn::F64 = %MO_F_Add_W64(_sgASj::F64, 1.0 :: W64);
           D1 = _sgASn::F64;
           F64[Sp] = _sgASn::F64;
           F64[Sp + 8] = _sgASl::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLSr_info" {
     block_cgLSr_info:
         const _cgLSr;
         const 65;
         const 4294967326;
         const SgBbV_srt+1064;
 },
 _cgLTV() //  [D1]
         { []
         }
     {offset
       cgLTV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLU5; else goto cgLU4;
       cgLU5: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgLU4: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLTV_info" {
     block_cgLTV_info:
         const _cgLTV;
         const 65;
         const 30;
 },
 _cgLSO() //  [D1]
         { []
         }
     {offset
       cgLSO: // global
           _sgASl::F64 = F64[Sp + 16];
           _sgASn::F64 = F64[Sp + 8];
           _cgLST::F64 = D1;
           (_cgLSS::F64) = call MO_F64_Log(_cgLST::F64);
           I64[Sp + 8] = block_cgLSW_info;
           D2 = _sgASl::F64;
           D1 = _sgASn::F64;
           F64[Sp + 16] = _cgLSS::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLSO_info" {
     block_cgLSO_info:
         const _cgLSO;
         const 194;
         const 30;
 },
 _cgLSW() //  [D1]
         { []
         }
     {offset
       cgLSW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLT7; else goto cgLT6;
       cgLT7: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgLT6: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLSW_info" {
     block_cgLSW_info:
         const _cgLSW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.918794596 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog1p_closure" {
     Data.Complex.$fFloatingComplex_$clog1p_closure:
         const Data.Complex.$fFloatingComplex_$clog1p_info;
         const 0;
 },
 $dNum_sgASW_entry() //  [R1]
         { []
         }
     {offset
       cgLVu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLVv; else goto cgLVw;
       cgLVv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLVw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgASW_info" {
     $dNum_sgASW_info:
         const $dNum_sgASW_entry;
         const 1;
         const 16;
 },
 $dFractional_sgASY_entry() //  [R1]
         { []
         }
     {offset
       cgLVF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgLVG; else goto cgLVH;
       cgLVG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLVH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgASY_info" {
     $dFractional_sgASY_info:
         const $dFractional_sgASY_entry;
         const 1;
         const 16;
 },
 sat_sgAT0_entry() //  [R1]
         { []
         }
     {offset
       cgLVM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLVN; else goto cgLVO;
       cgLVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLVO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAT0_info" {
     sat_sgAT0_info:
         const sat_sgAT0_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1104;
 },
 sat_sgASZ_entry() //  [R1]
         { []
         }
     {offset
       cgLVT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLVU; else goto cgLVV;
       cgLVU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLVV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgASZ_info" {
     sat_sgASZ_info:
         const sat_sgASZ_entry;
         const 2;
         const 18;
 },
 sat_sgATc_entry() //  [R1]
         { []
         }
     {offset
       cgLW5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLW6; else goto cgLW7;
       cgLW6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLW7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATc_info" {
     sat_sgATc_info:
         const sat_sgATc_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1104;
 },
 sat_sgATb_entry() //  [R1]
         { []
         }
     {offset
       cgLWc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLWd; else goto cgLWe;
       cgLWd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLWe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATb_info" {
     sat_sgATb_info:
         const sat_sgATb_entry;
         const 2;
         const 18;
 },
 sat_sgATt_entry() //  [R1]
         { []
         }
     {offset
       cgLWA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgLWB; else goto cgLWC;
       cgLWB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLWC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgAST::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgAST::P64;
           P64[Sp - 24] = _sgAST::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATt_info" {
     sat_sgATt_info:
         const sat_sgATt_entry;
         const 2;
         const 18;
 },
 sat_sgATr_entry() //  [R1]
         { []
         }
     {offset
       cgLWL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgLWM; else goto cgLWN;
       cgLWM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLWN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgASS::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgASS::P64;
           P64[Sp - 24] = _sgASS::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATr_info" {
     sat_sgATr_info:
         const sat_sgATr_entry;
         const 2;
         const 18;
 },
 sat_sgATp_entry() //  [R1]
         { []
         }
     {offset
       cgLWW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLWX; else goto cgLWY;
       cgLWX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLWY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATp_info" {
     sat_sgATp_info:
         const sat_sgATp_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1280;
 },
 sat_sgATq_entry() //  [R1]
         { []
         }
     {offset
       cgLWZ: // global
           _sgATq::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLX0; else goto cgLX1;
       cgLX1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLX3; else goto cgLX2;
       cgLX3: // global
           HpAlloc = 24;
           goto cgLX0;
       cgLX0: // global
           R1 = _sgATq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLX2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATq::P64;
           _sgASS::P64 = P64[_sgATq::P64 + 16];
           _sgASW::P64 = P64[_sgATq::P64 + 24];
           I64[Hp - 16] = sat_sgATp_info;
           P64[Hp] = _sgASW::P64;
           R2 = _sgASW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgASS::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATq_info" {
     sat_sgATq_info:
         const sat_sgATq_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1280;
 },
 sat_sgATs_entry() //  [R1]
         { []
         }
     {offset
       cgLX4: // global
           _sgATs::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLX5; else goto cgLX6;
       cgLX6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgLX8; else goto cgLX7;
       cgLX8: // global
           HpAlloc = 64;
           goto cgLX5;
       cgLX5: // global
           R1 = _sgATs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLX7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATs::P64;
           _sgASS::P64 = P64[_sgATs::P64 + 16];
           _sgASW::P64 = P64[_sgATs::P64 + 24];
           I64[Hp - 56] = sat_sgATr_info;
           P64[Hp - 40] = _sgASS::P64;
           P64[Hp - 32] = _sgASW::P64;
           I64[Hp - 24] = sat_sgATq_info;
           P64[Hp - 8] = _sgASS::P64;
           P64[Hp] = _sgASW::P64;
           R2 = _sgASW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATs_info" {
     sat_sgATs_info:
         const sat_sgATs_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1280;
 },
 u_sgATo_entry() //  [R1]
         { []
         }
     {offset
       cgLX9: // global
           _sgATo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLXa; else goto cgLXb;
       cgLXb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgLXd; else goto cgLXc;
       cgLXd: // global
           HpAlloc = 64;
           goto cgLXa;
       cgLXa: // global
           R1 = _sgATo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLXc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATo::P64;
           _sgASS::P64 = P64[_sgATo::P64 + 16];
           _sgAST::P64 = P64[_sgATo::P64 + 24];
           _sgASW::P64 = P64[_sgATo::P64 + 32];
           I64[Hp - 56] = sat_sgATt_info;
           P64[Hp - 40] = _sgAST::P64;
           P64[Hp - 32] = _sgASW::P64;
           I64[Hp - 24] = sat_sgATs_info;
           P64[Hp - 8] = _sgASS::P64;
           P64[Hp] = _sgASW::P64;
           R2 = _sgASW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgATo_info" {
     u_sgATo_info:
         const u_sgATo_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1280;
 },
 sat_sgATv_entry() //  [R1]
         { []
         }
     {offset
       cgLXu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLXv; else goto cgLXw;
       cgLXv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLXw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATv_info" {
     sat_sgATv_info:
         const sat_sgATv_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgATw_entry() //  [R1]
         { []
         }
     {offset
       cgLXx: // global
           _sgATw::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLXy; else goto cgLXz;
       cgLXz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLXB; else goto cgLXA;
       cgLXB: // global
           HpAlloc = 24;
           goto cgLXy;
       cgLXy: // global
           R1 = _sgATw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLXA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATw::P64;
           _sgASW::P64 = P64[_sgATw::P64 + 16];
           _sgATo::P64 = P64[_sgATw::P64 + 24];
           I64[Hp - 16] = sat_sgATv_info;
           P64[Hp] = _sgASW::P64;
           R2 = _sgASW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgATo::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATw_info" {
     sat_sgATw_info:
         const sat_sgATw_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1256;
 },
 sat_sgATx_entry() //  [R1]
         { []
         }
     {offset
       cgLXC: // global
           _sgATx::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgLXD; else goto cgLXE;
       cgLXE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgLXG; else goto cgLXF;
       cgLXG: // global
           HpAlloc = 32;
           goto cgLXD;
       cgLXD: // global
           R1 = _sgATx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLXF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATx::P64;
           _sgASW::P64 = P64[_sgATx::P64 + 16];
           _sgATn::P64 = P64[_sgATx::P64 + 24];
           _sgATo::P64 = P64[_sgATx::P64 + 32];
           I64[Hp - 24] = sat_sgATw_info;
           P64[Hp - 8] = _sgASW::P64;
           P64[Hp] = _sgATo::P64;
           R2 = _sgATn::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATx_info" {
     sat_sgATx_info:
         const sat_sgATx_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1256;
 },
 sat_sgATu_entry() //  [R1]
         { []
         }
     {offset
       cgLXL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLXM; else goto cgLXN;
       cgLXM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLXN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATu_info" {
     sat_sgATu_info:
         const sat_sgATu_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgATy_entry() //  [R1]
         { []
         }
     {offset
       cgLXO: // global
           _sgATy::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLXP; else goto cgLXQ;
       cgLXQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgLXS; else goto cgLXR;
       cgLXS: // global
           HpAlloc = 64;
           goto cgLXP;
       cgLXP: // global
           R1 = _sgATy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLXR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATy::P64;
           _sgASW::P64 = P64[_sgATy::P64 + 16];
           _sgATn::P64 = P64[_sgATy::P64 + 24];
           _sgATo::P64 = P64[_sgATy::P64 + 32];
           I64[Hp - 56] = sat_sgATx_info;
           P64[Hp - 40] = _sgASW::P64;
           P64[Hp - 32] = _sgATn::P64;
           P64[Hp - 24] = _sgATo::P64;
           I64[Hp - 16] = sat_sgATu_info;
           P64[Hp] = _sgASW::P64;
           R2 = _sgASW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATy_info" {
     sat_sgATy_info:
         const sat_sgATy_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1256;
 },
 sat_sgATz_entry() //  [R1]
         { []
         }
     {offset
       cgLXT: // global
           _sgATz::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLXU; else goto cgLXV;
       cgLXV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgLXX; else goto cgLXW;
       cgLXX: // global
           HpAlloc = 80;
           goto cgLXU;
       cgLXU: // global
           R1 = _sgATz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLXW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATz::P64;
           _sgASS::P64 = P64[_sgATz::P64 + 16];
           _sgAST::P64 = P64[_sgATz::P64 + 24];
           _sgASW::P64 = P64[_sgATz::P64 + 32];
           _sgASY::P64 = P64[_sgATz::P64 + 40];
           _sgATn::P64 = P64[_sgATz::P64 + 48];
           I64[Hp - 72] = u_sgATo_info;
           P64[Hp - 56] = _sgASS::P64;
           P64[Hp - 48] = _sgAST::P64;
           P64[Hp - 40] = _sgASW::P64;
           I64[Hp - 32] = sat_sgATy_info;
           P64[Hp - 16] = _sgASW::P64;
           P64[Hp - 8] = _sgATn::P64;
           _cgLWs::P64 = Hp - 72;
           P64[Hp] = _cgLWs::P64;
           R2 = _sgASY::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _cgLWs::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATz_info" {
     sat_sgATz_info:
         const sat_sgATz_entry;
         const 5;
         const 38654705679;
         const SgBbV_srt+1256;
 },
 sat_sgATB_entry() //  [R1]
         { []
         }
     {offset
       cgLY8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgLY9; else goto cgLYa;
       cgLY9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLYa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATB_info" {
     sat_sgATB_info:
         const sat_sgATB_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgATC_entry() //  [R1]
         { []
         }
     {offset
       cgLYb: // global
           _sgATC::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgLYc; else goto cgLYd;
       cgLYd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLYf; else goto cgLYe;
       cgLYf: // global
           HpAlloc = 24;
           goto cgLYc;
       cgLYc: // global
           R1 = _sgATC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgLYe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgATC::P64;
           _sgASS::P64 = P64[_sgATC::P64 + 16];
           _sgASW::P64 = P64[_sgATC::P64 + 24];
           I64[Hp - 16] = sat_sgATB_info;
           P64[Hp] = _sgASW::P64;
           R2 = _sgASW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgASS::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgATC_info" {
     sat_sgATC_info:
         const sat_sgATC_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1256;
 },
 section ""relreadonly" . ugLZi_srtd" {
     ugLZi_srtd:
         const SgBbV_srt+520;
         const 101;
         const 34359738369;
         const 71135396352;
 },
 Data.Complex.$fFloatingComplex_$clog1p_entry() //  [R2, R3]
         { []
         }
     {offset
       cgLYg: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgLYh; else goto cgLYi;
       cgLYh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog1p_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgLYi: // global
           I64[Sp - 16] = block_cgLVd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugLZh; else goto cgLVe;
       ugLZh: // global
           call _cgLVd(R1) args: 0, res: 0, upd: 0;
       cgLVe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog1p_info" {
     Data.Complex.$fFloatingComplex_$clog1p_info:
         const Data.Complex.$fFloatingComplex_$clog1p_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugLZi_srtd;
 },
 section ""relreadonly" . ugLZj_srtd" {
     ugLZj_srtd:
         const SgBbV_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgLVd() //  [R1]
         { []
         }
     {offset
       cgLVd: // global
           I64[Sp - 16] = block_cgLVi_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLVd_info" {
     block_cgLVd_info:
         const _cgLVd;
         const 1;
         const 18446744069414584350;
         const ugLZj_srtd;
 },
 section ""relreadonly" . ugLZk_srtd" {
     ugLZk_srtd:
         const SgBbV_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgLVi() //  [R1]
         { []
         }
     {offset
       cgLVi: // global
           I64[Sp - 8] = block_cgLVm_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLVi_info" {
     block_cgLVi_info:
         const _cgLVi;
         const 3;
         const 18446744069414584350;
         const ugLZk_srtd;
 },
 section ""relreadonly" . ugLZl_srtd" {
     ugLZl_srtd:
         const SgBbV_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgLVm() //  [R1]
         { []
         }
     {offset
       cgLVm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLYn; else goto cgLYm;
       cgLYn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLYm: // global
           I64[Hp - 16] = $dNum_sgASW_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgLVx_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLVm_info" {
     block_cgLVm_info:
         const _cgLVm;
         const 4;
         const 18446744069414584350;
         const ugLZl_srtd;
 },
 section ""relreadonly" . ugLZm_srtd" {
     ugLZm_srtd:
         const SgBbV_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgLVx() //  [R1]
         { []
         }
     {offset
       cgLVx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgLYq; else goto cgLYp;
       cgLYq: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLYp: // global
           I64[Hp - 72] = $dFractional_sgASY_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_sgAT0_info;
           _cgLVB::P64 = Hp - 72;
           P64[Hp - 32] = _cgLVB::P64;
           I64[Hp - 24] = sat_sgASZ_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgLVW_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 48;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgLVB::P64;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLVx_info" {
     block_cgLVx_info:
         const _cgLVx;
         const 5;
         const 18446744069414584350;
         const ugLZm_srtd;
 },
 section ""relreadonly" . ugLZn_srtd" {
     ugLZn_srtd:
         const SgBbV_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgLVW() //  [R1]
         { []
         }
     {offset
       cgLVW: // global
           if (R1 & 7 == 1) goto cgLYB; else goto cgLYH;
       cgLYB: // global
           I64[Sp + 24] = block_cgLYs_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 48];
           Sp = Sp + 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgLYH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLYK; else goto cgLYJ;
       cgLYK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLYJ: // global
           I64[Hp - 48] = sat_sgATc_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sgATb_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           _sgASX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgLWf_info;
           R2 = _sgASX::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLVW_info" {
     block_cgLVW_info:
         const _cgLVW;
         const 6;
         const 18446744069414584350;
         const ugLZn_srtd;
 },
 _cgLYs() //  [R1, R2]
         { []
         }
     {offset
       cgLYs: // global
           _sgASS::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgLYu_info;
           R6 = P64[Sp + 8];
           R5 = _sgASS::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLYs_info" {
     block_cgLYs_info:
         const _cgLYs;
         const 3;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgLYu() //  [R1, R2]
         { []
         }
     {offset
       cgLYu: // global
           _sgASP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgLYw_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgASP::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLYu_info" {
     block_cgLYu_info:
         const _cgLYu;
         const 1;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgLYw() //  [R1, R2]
         { []
         }
     {offset
       cgLYw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLYG; else goto cgLYF;
       cgLYG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLYF: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLYw_info" {
     block_cgLYw_info:
         const _cgLYw;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugLZo_srtd" {
     ugLZo_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854872576;
 },
 _cgLWf() //  [R1]
         { []
         }
     {offset
       cgLWf: // global
           _sgASP::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cgLYV; else goto cgLZ5;
       cgLYV: // global
           I64[Sp + 16] = block_cgLYM_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = _sgASP::P64;
           Sp = Sp + 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgLZ5: // global
           I64[Sp] = block_cgLWk_info;
           R2 = _sgASP::P64;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLWf_info" {
     block_cgLWf_info:
         const _cgLWf;
         const 5;
         const 18446744069414584350;
         const ugLZo_srtd;
 },
 _cgLYM() //  [R1, R2]
         { []
         }
     {offset
       cgLYM: // global
           _sgASS::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgLYO_info;
           R6 = P64[Sp + 8];
           R5 = _sgASS::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLYM_info" {
     block_cgLYM_info:
         const _cgLYM;
         const 3;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgLYO() //  [R1, R2]
         { []
         }
     {offset
       cgLYO: // global
           _sgASP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgLYQ_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgASP::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLYO_info" {
     block_cgLYO_info:
         const _cgLYO;
         const 1;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgLYQ() //  [R1, R2]
         { []
         }
     {offset
       cgLYQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLZ0; else goto cgLYZ;
       cgLZ0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgLYZ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLYQ_info" {
     block_cgLYQ_info:
         const _cgLYQ;
         const 0;
         const 30;
 },
 _cgLWk() //  [R1]
         { []
         }
     {offset
       cgLWk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgLZ8; else goto cgLZ7;
       cgLZ8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLZ7: // global
           I64[Hp - 48] = sat_sgATz_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cgLXY_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLWk_info" {
     block_cgLWk_info:
         const _cgLWk;
         const 5;
         const 38654705694;
         const SgBbV_srt+1256;
 },
 _cgLXY() //  [R1]
         { []
         }
     {offset
       cgLXY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgLZb; else goto cgLZa;
       cgLZb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLZa: // global
           I64[Hp - 24] = sat_sgATC_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cgLZ1_info;
           R2 = P64[Sp + 40];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Float.atan2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLXY_info" {
     block_cgLXY_info:
         const _cgLXY;
         const 133;
         const 4294967326;
         const SgBbV_srt+1256;
 },
 _cgLZ1() //  [R1]
         { []
         }
     {offset
       cgLZ1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgLZe; else goto cgLZd;
       cgLZe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgLZd: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgLZ1_info" {
     block_cgLZ1_info:
         const _cgLZ1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:32.996089494 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1mexp1_entry() //  [R2]
         { []
         }
     {offset
       cgM2q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgM2z; else goto cgM2A;
       cgM2z: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgM2A: // global
           I64[Sp - 8] = block_cgM2n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugM4D; else goto cgM2o;
       ugM4D: // global
           call _cgM2n(R1) args: 0, res: 0, upd: 0;
       cgM2o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1mexp1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const SgBbV_srt+1304;
 },
 _cgM2n() //  [R1]
         { []
         }
     {offset
       cgM2n: // global
           I64[Sp - 8] = block_cgM2t_info;
           _sgATH::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgATH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugM4C; else goto cgM2u;
       ugM4C: // global
           call _cgM2t(R1) args: 0, res: 0, upd: 0;
       cgM2u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM2n_info" {
     block_cgM2n_info:
         const _cgM2n;
         const 0;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgM2t() //  [R1]
         { []
         }
     {offset
       cgM2t: // global
           I64[Sp] = block_cgM2y_info;
           _sgATJ::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgATJ::F32;
           if (R1 & 7 != 0) goto ugM4E; else goto cgM2D;
       ugM4E: // global
           call _cgM2y(R1) args: 0, res: 0, upd: 0;
       cgM2D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM2t_info" {
     block_cgM2t_info:
         const _cgM2t;
         const 1;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgM2y() //  [R1]
         { []
         }
     {offset
       cgM2y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgM2J; else goto cgM2I;
       cgM2J: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgM2I: // global
           _sgATL::F32 = F32[R1 + 7];
           (_cgM2K::F32) = call MO_F32_Exp(F32[Sp + 8]);
           (_cgM2O::F32) = call MO_F32_Cos(_sgATL::F32);
           (_cgM2Y::F32) = call MO_F32_Sin(_sgATL::F32);
           _sgATN::F32 = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgM2K::F32,
                                                     _cgM2O::F32));
           (_cgM38::F32) = call MO_F32_Fabs(_sgATN::F32);
           _sgATQ::F32 = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgM2K::F32,
                                                     _cgM2Y::F32));
           if (%MO_F_Lt_W32(_cgM38::F32,
                            0.5 :: W32)) goto cgM4B; else goto cgM3P;
       cgM4B: // global
           (_cgM3J::F32) = call MO_F32_Fabs(_sgATQ::F32);
           if (%MO_F_Lt_W32(_cgM3J::F32,
                            0.5 :: W32)) goto cgM4x; else goto cgM3P;
       cgM4x: // global
           _sgAU4::F32 = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Add_W32(_sgATN::F32,
                                                                   _sgATN::F32),
                                                     %MO_F_Mul_W32(_sgATN::F32, _sgATN::F32)),
                                       %MO_F_Mul_W32(_sgATQ::F32, _sgATQ::F32));
           (_cgM4a::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(_sgAU4::F32,
                                                          1.0 :: W32));
           (_sgAUg::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Quot_W32(_sgAU4::F32,
                                                                                                                                  %MO_F_Add_W32(_cgM4a::F32,
                                                                                                                                                1.0 :: W32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_sgATN::F32, 1.0 :: W32);
           I64[Sp] = block_cgM4q_info;
           F1 = _sgATQ::F32;
           R2 = Hp - 7;
           F32[Sp + 8] = _sgAUg::F32;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
       cgM3P: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgM3j_info;
           F2 = _sgATQ::F32;
           _sgATU::F32 = %MO_F_Add_W32(_sgATN::F32, 1.0 :: W32);
           F1 = _sgATU::F32;
           F32[Sp] = _sgATU::F32;
           F32[Sp + 8] = _sgATQ::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM2y_info" {
     block_cgM2y_info:
         const _cgM2y;
         const 65;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgM4q() //  [F1]
         { []
         }
     {offset
       cgM4q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgM4A; else goto cgM4z;
       cgM4A: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgM4z: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM4q_info" {
     block_cgM4q_info:
         const _cgM4q;
         const 65;
         const 30;
 },
 _cgM3j() //  [F1]
         { []
         }
     {offset
       cgM3j: // global
           _sgATQ::F32 = F32[Sp + 16];
           _sgATU::F32 = F32[Sp + 8];
           _cgM3o::F32 = F1;
           (_cgM3n::F32) = call MO_F32_Log(_cgM3o::F32);
           I64[Sp + 8] = block_cgM3r_info;
           F2 = _sgATQ::F32;
           F1 = _sgATU::F32;
           F32[Sp + 16] = _cgM3n::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM3j_info" {
     block_cgM3j_info:
         const _cgM3j;
         const 194;
         const 30;
 },
 _cgM3r() //  [F1]
         { []
         }
     {offset
       cgM3r: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgM3C; else goto cgM3B;
       cgM3C: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgM3B: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM3r_info" {
     block_cgM3r_info:
         const _cgM3r;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.015437172 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1mexp_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1mexp_entry() //  [R2]
         { []
         }
     {offset
       cgM5R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgM60; else goto cgM61;
       cgM60: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgM61: // global
           I64[Sp - 8] = block_cgM5O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugM84; else goto cgM5P;
       ugM84: // global
           call _cgM5O(R1) args: 0, res: 0, upd: 0;
       cgM5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1mexp_info" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp_info:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgBbV_srt+1344;
 },
 _cgM5O() //  [R1]
         { []
         }
     {offset
       cgM5O: // global
           I64[Sp - 8] = block_cgM5U_info;
           _sgAUp::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAUp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugM83; else goto cgM5V;
       ugM83: // global
           call _cgM5U(R1) args: 0, res: 0, upd: 0;
       cgM5V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM5O_info" {
     block_cgM5O_info:
         const _cgM5O;
         const 0;
         const 4294967326;
         const SgBbV_srt+1352;
 },
 _cgM5U() //  [R1]
         { []
         }
     {offset
       cgM5U: // global
           I64[Sp] = block_cgM5Z_info;
           _sgAUr::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAUr::F64;
           if (R1 & 7 != 0) goto ugM85; else goto cgM64;
       ugM85: // global
           call _cgM5Z(R1) args: 0, res: 0, upd: 0;
       cgM64: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM5U_info" {
     block_cgM5U_info:
         const _cgM5U;
         const 1;
         const 4294967326;
         const SgBbV_srt+1352;
 },
 _cgM5Z() //  [R1]
         { []
         }
     {offset
       cgM5Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgM6a; else goto cgM69;
       cgM6a: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgM69: // global
           _sgAUt::F64 = F64[R1 + 7];
           (_cgM6b::F64) = call MO_F64_Exp(F64[Sp + 8]);
           (_cgM6f::F64) = call MO_F64_Cos(_sgAUt::F64);
           (_cgM6p::F64) = call MO_F64_Sin(_sgAUt::F64);
           _sgAUv::F64 = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgM6b::F64,
                                                     _cgM6f::F64));
           (_cgM6z::F64) = call MO_F64_Fabs(_sgAUv::F64);
           _sgAUy::F64 = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgM6b::F64,
                                                     _cgM6p::F64));
           if (%MO_F_Lt_W64(_cgM6z::F64,
                            0.5 :: W64)) goto cgM82; else goto cgM7g;
       cgM82: // global
           (_cgM7a::F64) = call MO_F64_Fabs(_sgAUy::F64);
           if (%MO_F_Lt_W64(_cgM7a::F64,
                            0.5 :: W64)) goto cgM7Y; else goto cgM7g;
       cgM7Y: // global
           _sgAUM::F64 = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Add_W64(_sgAUv::F64,
                                                                   _sgAUv::F64),
                                                     %MO_F_Mul_W64(_sgAUv::F64, _sgAUv::F64)),
                                       %MO_F_Mul_W64(_sgAUy::F64, _sgAUy::F64));
           (_cgM7B::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(_sgAUM::F64,
                                                          1.0 :: W64));
           (_sgAUY::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Quot_W64(_sgAUM::F64,
                                                                                                                                 %MO_F_Add_W64(_cgM7B::F64,
                                                                                                                                               1.0 :: W64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_sgAUv::F64, 1.0 :: W64);
           I64[Sp] = block_cgM7R_info;
           D1 = _sgAUy::F64;
           R2 = Hp - 7;
           F64[Sp + 8] = _sgAUY::F64;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
       cgM7g: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgM6K_info;
           D2 = _sgAUy::F64;
           _sgAUC::F64 = %MO_F_Add_W64(_sgAUv::F64, 1.0 :: W64);
           D1 = _sgAUC::F64;
           F64[Sp] = _sgAUC::F64;
           F64[Sp + 8] = _sgAUy::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM5Z_info" {
     block_cgM5Z_info:
         const _cgM5Z;
         const 65;
         const 4294967326;
         const SgBbV_srt+1352;
 },
 _cgM7R() //  [D1]
         { []
         }
     {offset
       cgM7R: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgM81; else goto cgM80;
       cgM81: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgM80: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM7R_info" {
     block_cgM7R_info:
         const _cgM7R;
         const 65;
         const 30;
 },
 _cgM6K() //  [D1]
         { []
         }
     {offset
       cgM6K: // global
           _sgAUy::F64 = F64[Sp + 16];
           _sgAUC::F64 = F64[Sp + 8];
           _cgM6P::F64 = D1;
           (_cgM6O::F64) = call MO_F64_Log(_cgM6P::F64);
           I64[Sp + 8] = block_cgM6S_info;
           D2 = _sgAUy::F64;
           D1 = _sgAUC::F64;
           F64[Sp + 16] = _cgM6O::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM6K_info" {
     block_cgM6K_info:
         const _cgM6K;
         const 194;
         const 30;
 },
 _cgM6S() //  [D1]
         { []
         }
     {offset
       cgM6S: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgM73; else goto cgM72;
       cgM73: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgM72: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM6S_info" {
     block_cgM6S_info:
         const _cgM6S;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.045619755 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog1mexp_closure" {
     Data.Complex.$fFloatingComplex_$clog1mexp_closure:
         const Data.Complex.$fFloatingComplex_$clog1mexp_info;
         const 0;
 },
 $dNum_sgAVh_entry() //  [R1]
         { []
         }
     {offset
       cgM9A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgM9B; else goto cgM9C;
       cgM9B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgM9C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgAVh_info" {
     $dNum_sgAVh_info:
         const $dNum_sgAVh_entry;
         const 1;
         const 16;
 },
 $dFractional_sgAVj_entry() //  [R1]
         { []
         }
     {offset
       cgM9L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgM9M; else goto cgM9N;
       cgM9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgM9N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgAVj_info" {
     $dFractional_sgAVj_info:
         const $dFractional_sgAVj_entry;
         const 1;
         const 16;
 },
 sat_sgAVl_entry() //  [R1]
         { []
         }
     {offset
       cgM9S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgM9T; else goto cgM9U;
       cgM9T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgM9U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVl_info" {
     sat_sgAVl_info:
         const sat_sgAVl_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1104;
 },
 sat_sgAVk_entry() //  [R1]
         { []
         }
     {offset
       cgM9Z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMa0; else goto cgMa1;
       cgMa0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMa1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVk_info" {
     sat_sgAVk_info:
         const sat_sgAVk_entry;
         const 2;
         const 18;
 },
 sat_sgAVx_entry() //  [R1]
         { []
         }
     {offset
       cgMab: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMac; else goto cgMad;
       cgMac: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMad: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVx_info" {
     sat_sgAVx_info:
         const sat_sgAVx_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1104;
 },
 sat_sgAVw_entry() //  [R1]
         { []
         }
     {offset
       cgMai: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMaj; else goto cgMak;
       cgMaj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMak: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVw_info" {
     sat_sgAVw_info:
         const sat_sgAVw_entry;
         const 2;
         const 18;
 },
 sat_sgAVO_entry() //  [R1]
         { []
         }
     {offset
       cgMaG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgMaH; else goto cgMaI;
       cgMaH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMaI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgAVe::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgAVe::P64;
           P64[Sp - 24] = _sgAVe::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVO_info" {
     sat_sgAVO_info:
         const sat_sgAVO_entry;
         const 2;
         const 18;
 },
 sat_sgAVM_entry() //  [R1]
         { []
         }
     {offset
       cgMaR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgMaS; else goto cgMaT;
       cgMaS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMaT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgAVd::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgAVd::P64;
           P64[Sp - 24] = _sgAVd::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVM_info" {
     sat_sgAVM_info:
         const sat_sgAVM_entry;
         const 2;
         const 18;
 },
 sat_sgAVK_entry() //  [R1]
         { []
         }
     {offset
       cgMb2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMb3; else goto cgMb4;
       cgMb3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMb4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVK_info" {
     sat_sgAVK_info:
         const sat_sgAVK_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1280;
 },
 sat_sgAVL_entry() //  [R1]
         { []
         }
     {offset
       cgMb5: // global
           _sgAVL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMb6; else goto cgMb7;
       cgMb7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMb9; else goto cgMb8;
       cgMb9: // global
           HpAlloc = 24;
           goto cgMb6;
       cgMb6: // global
           R1 = _sgAVL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMb8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVL::P64;
           _sgAVd::P64 = P64[_sgAVL::P64 + 16];
           _sgAVh::P64 = P64[_sgAVL::P64 + 24];
           I64[Hp - 16] = sat_sgAVK_info;
           P64[Hp] = _sgAVh::P64;
           R2 = _sgAVh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgAVd::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVL_info" {
     sat_sgAVL_info:
         const sat_sgAVL_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1280;
 },
 sat_sgAVN_entry() //  [R1]
         { []
         }
     {offset
       cgMba: // global
           _sgAVN::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMbb; else goto cgMbc;
       cgMbc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgMbe; else goto cgMbd;
       cgMbe: // global
           HpAlloc = 64;
           goto cgMbb;
       cgMbb: // global
           R1 = _sgAVN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMbd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVN::P64;
           _sgAVd::P64 = P64[_sgAVN::P64 + 16];
           _sgAVh::P64 = P64[_sgAVN::P64 + 24];
           I64[Hp - 56] = sat_sgAVM_info;
           P64[Hp - 40] = _sgAVd::P64;
           P64[Hp - 32] = _sgAVh::P64;
           I64[Hp - 24] = sat_sgAVL_info;
           P64[Hp - 8] = _sgAVd::P64;
           P64[Hp] = _sgAVh::P64;
           R2 = _sgAVh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVN_info" {
     sat_sgAVN_info:
         const sat_sgAVN_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1280;
 },
 u_sgAVJ_entry() //  [R1]
         { []
         }
     {offset
       cgMbf: // global
           _sgAVJ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMbg; else goto cgMbh;
       cgMbh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgMbj; else goto cgMbi;
       cgMbj: // global
           HpAlloc = 64;
           goto cgMbg;
       cgMbg: // global
           R1 = _sgAVJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMbi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVJ::P64;
           _sgAVd::P64 = P64[_sgAVJ::P64 + 16];
           _sgAVe::P64 = P64[_sgAVJ::P64 + 24];
           _sgAVh::P64 = P64[_sgAVJ::P64 + 32];
           I64[Hp - 56] = sat_sgAVO_info;
           P64[Hp - 40] = _sgAVe::P64;
           P64[Hp - 32] = _sgAVh::P64;
           I64[Hp - 24] = sat_sgAVN_info;
           P64[Hp - 8] = _sgAVd::P64;
           P64[Hp] = _sgAVh::P64;
           R2 = _sgAVh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgAVJ_info" {
     u_sgAVJ_info:
         const u_sgAVJ_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1280;
 },
 sat_sgAVQ_entry() //  [R1]
         { []
         }
     {offset
       cgMbA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMbB; else goto cgMbC;
       cgMbB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMbC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVQ_info" {
     sat_sgAVQ_info:
         const sat_sgAVQ_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgAVR_entry() //  [R1]
         { []
         }
     {offset
       cgMbD: // global
           _sgAVR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMbE; else goto cgMbF;
       cgMbF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMbH; else goto cgMbG;
       cgMbH: // global
           HpAlloc = 24;
           goto cgMbE;
       cgMbE: // global
           R1 = _sgAVR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMbG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVR::P64;
           _sgAVh::P64 = P64[_sgAVR::P64 + 16];
           _sgAVJ::P64 = P64[_sgAVR::P64 + 24];
           I64[Hp - 16] = sat_sgAVQ_info;
           P64[Hp] = _sgAVh::P64;
           R2 = _sgAVh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgAVJ::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVR_info" {
     sat_sgAVR_info:
         const sat_sgAVR_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1256;
 },
 sat_sgAVS_entry() //  [R1]
         { []
         }
     {offset
       cgMbI: // global
           _sgAVS::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgMbJ; else goto cgMbK;
       cgMbK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgMbM; else goto cgMbL;
       cgMbM: // global
           HpAlloc = 32;
           goto cgMbJ;
       cgMbJ: // global
           R1 = _sgAVS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMbL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVS::P64;
           _sgAVh::P64 = P64[_sgAVS::P64 + 16];
           _sgAVI::P64 = P64[_sgAVS::P64 + 24];
           _sgAVJ::P64 = P64[_sgAVS::P64 + 32];
           I64[Hp - 24] = sat_sgAVR_info;
           P64[Hp - 8] = _sgAVh::P64;
           P64[Hp] = _sgAVJ::P64;
           R2 = _sgAVI::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVS_info" {
     sat_sgAVS_info:
         const sat_sgAVS_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1256;
 },
 sat_sgAVP_entry() //  [R1]
         { []
         }
     {offset
       cgMbR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMbS; else goto cgMbT;
       cgMbS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMbT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVP_info" {
     sat_sgAVP_info:
         const sat_sgAVP_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgAVT_entry() //  [R1]
         { []
         }
     {offset
       cgMbU: // global
           _sgAVT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMbV; else goto cgMbW;
       cgMbW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgMbY; else goto cgMbX;
       cgMbY: // global
           HpAlloc = 64;
           goto cgMbV;
       cgMbV: // global
           R1 = _sgAVT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMbX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVT::P64;
           _sgAVh::P64 = P64[_sgAVT::P64 + 16];
           _sgAVI::P64 = P64[_sgAVT::P64 + 24];
           _sgAVJ::P64 = P64[_sgAVT::P64 + 32];
           I64[Hp - 56] = sat_sgAVS_info;
           P64[Hp - 40] = _sgAVh::P64;
           P64[Hp - 32] = _sgAVI::P64;
           P64[Hp - 24] = _sgAVJ::P64;
           I64[Hp - 16] = sat_sgAVP_info;
           P64[Hp] = _sgAVh::P64;
           R2 = _sgAVh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVT_info" {
     sat_sgAVT_info:
         const sat_sgAVT_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1256;
 },
 sat_sgAVU_entry() //  [R1]
         { []
         }
     {offset
       cgMbZ: // global
           _sgAVU::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMc0; else goto cgMc1;
       cgMc1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgMc3; else goto cgMc2;
       cgMc3: // global
           HpAlloc = 80;
           goto cgMc0;
       cgMc0: // global
           R1 = _sgAVU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMc2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVU::P64;
           _sgAVd::P64 = P64[_sgAVU::P64 + 16];
           _sgAVe::P64 = P64[_sgAVU::P64 + 24];
           _sgAVh::P64 = P64[_sgAVU::P64 + 32];
           _sgAVj::P64 = P64[_sgAVU::P64 + 40];
           _sgAVI::P64 = P64[_sgAVU::P64 + 48];
           I64[Hp - 72] = u_sgAVJ_info;
           P64[Hp - 56] = _sgAVd::P64;
           P64[Hp - 48] = _sgAVe::P64;
           P64[Hp - 40] = _sgAVh::P64;
           I64[Hp - 32] = sat_sgAVT_info;
           P64[Hp - 16] = _sgAVh::P64;
           P64[Hp - 8] = _sgAVI::P64;
           _cgMay::P64 = Hp - 72;
           P64[Hp] = _cgMay::P64;
           R2 = _sgAVj::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _cgMay::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVU_info" {
     sat_sgAVU_info:
         const sat_sgAVU_entry;
         const 5;
         const 38654705679;
         const SgBbV_srt+1256;
 },
 sat_sgAVW_entry() //  [R1]
         { []
         }
     {offset
       cgMce: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMcf; else goto cgMcg;
       cgMcf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMcg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVW_info" {
     sat_sgAVW_info:
         const sat_sgAVW_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgAVX_entry() //  [R1]
         { []
         }
     {offset
       cgMch: // global
           _sgAVX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMci; else goto cgMcj;
       cgMcj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMcl; else goto cgMck;
       cgMcl: // global
           HpAlloc = 24;
           goto cgMci;
       cgMci: // global
           R1 = _sgAVX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMck: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAVX::P64;
           _sgAVd::P64 = P64[_sgAVX::P64 + 16];
           _sgAVh::P64 = P64[_sgAVX::P64 + 24];
           I64[Hp - 16] = sat_sgAVW_info;
           P64[Hp] = _sgAVh::P64;
           R2 = _sgAVh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgAVd::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAVX_info" {
     sat_sgAVX_info:
         const sat_sgAVX_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1256;
 },
 section ""relreadonly" . ugMdq_srtd" {
     ugMdq_srtd:
         const SgBbV_srt+520;
         const 106;
         const 1;
         const 2338878128640;
 },
 Data.Complex.$fFloatingComplex_$clog1mexp_entry() //  [R2, R3]
         { []
         }
     {offset
       cgMcm: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgMcn; else goto cgMco;
       cgMcn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog1mexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgMco: // global
           I64[Sp - 16] = block_cgM9f_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugMdp; else goto cgM9g;
       ugMdp: // global
           call _cgM9f(R1) args: 0, res: 0, upd: 0;
       cgM9g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog1mexp_info" {
     Data.Complex.$fFloatingComplex_$clog1mexp_info:
         const Data.Complex.$fFloatingComplex_$clog1mexp_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugMdq_srtd;
 },
 section ""relreadonly" . ugMdr_srtd" {
     ugMdr_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgM9f() //  [R1]
         { []
         }
     {offset
       cgM9f: // global
           I64[Sp] = block_cgM9k_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM9f_info" {
     block_cgM9f_info:
         const _cgM9f;
         const 1;
         const 18446744069414584350;
         const ugMdr_srtd;
 },
 section ""relreadonly" . ugMds_srtd" {
     ugMds_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgM9k() //  [R1, R2]
         { []
         }
     {offset
       cgM9k: // global
           I64[Sp] = block_cgM9m_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$cnegate_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM9k_info" {
     block_cgM9k_info:
         const _cgM9k;
         const 1;
         const 18446744069414584350;
         const ugMds_srtd;
 },
 section ""relreadonly" . ugMdt_srtd" {
     ugMdt_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgM9m() //  [R1, R2]
         { []
         }
     {offset
       cgM9m: // global
           I64[Sp - 16] = block_cgM9o_info;
           _sgAVe::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgAVe::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM9m_info" {
     block_cgM9m_info:
         const _cgM9m;
         const 1;
         const 18446744069414584350;
         const ugMdt_srtd;
 },
 section ""relreadonly" . ugMdu_srtd" {
     ugMdu_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgM9o() //  [R1]
         { []
         }
     {offset
       cgM9o: // global
           I64[Sp - 8] = block_cgM9s_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM9o_info" {
     block_cgM9o_info:
         const _cgM9o;
         const 3;
         const 18446744069414584350;
         const ugMdu_srtd;
 },
 section ""relreadonly" . ugMdv_srtd" {
     ugMdv_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgM9s() //  [R1]
         { []
         }
     {offset
       cgM9s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMcv; else goto cgMcu;
       cgMcv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMcu: // global
           I64[Hp - 16] = $dNum_sgAVh_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgM9D_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM9s_info" {
     block_cgM9s_info:
         const _cgM9s;
         const 4;
         const 18446744069414584350;
         const ugMdv_srtd;
 },
 section ""relreadonly" . ugMdw_srtd" {
     ugMdw_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgM9D() //  [R1]
         { []
         }
     {offset
       cgM9D: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgMcy; else goto cgMcx;
       cgMcy: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMcx: // global
           I64[Hp - 72] = $dFractional_sgAVj_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_sgAVl_info;
           _cgM9H::P64 = Hp - 72;
           P64[Hp - 32] = _cgM9H::P64;
           I64[Hp - 24] = sat_sgAVk_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgMa2_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 48;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgM9H::P64;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgM9D_info" {
     block_cgM9D_info:
         const _cgM9D;
         const 5;
         const 18446744069414584350;
         const ugMdw_srtd;
 },
 section ""relreadonly" . ugMdx_srtd" {
     ugMdx_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgMa2() //  [R1]
         { []
         }
     {offset
       cgMa2: // global
           if (R1 & 7 == 1) goto cgMcJ; else goto cgMcP;
       cgMcJ: // global
           I64[Sp + 24] = block_cgMcA_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 48];
           Sp = Sp + 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgMcP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMcS; else goto cgMcR;
       cgMcS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMcR: // global
           I64[Hp - 48] = sat_sgAVx_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sgAVw_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           _sgAVi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgMal_info;
           R2 = _sgAVi::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMa2_info" {
     block_cgMa2_info:
         const _cgMa2;
         const 6;
         const 18446744069414584350;
         const ugMdx_srtd;
 },
 _cgMcA() //  [R1, R2]
         { []
         }
     {offset
       cgMcA: // global
           _sgAVd::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgMcC_info;
           R6 = P64[Sp + 8];
           R5 = _sgAVd::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMcA_info" {
     block_cgMcA_info:
         const _cgMcA;
         const 3;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMcC() //  [R1, R2]
         { []
         }
     {offset
       cgMcC: // global
           _sgAV4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgMcE_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgAV4::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMcC_info" {
     block_cgMcC_info:
         const _cgMcC;
         const 1;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMcE() //  [R1, R2]
         { []
         }
     {offset
       cgMcE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMcO; else goto cgMcN;
       cgMcO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgMcN: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMcE_info" {
     block_cgMcE_info:
         const _cgMcE;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugMdy_srtd" {
     ugMdy_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854872576;
 },
 _cgMal() //  [R1]
         { []
         }
     {offset
       cgMal: // global
           _sgAV4::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cgMd3; else goto cgMdd;
       cgMd3: // global
           I64[Sp + 16] = block_cgMcU_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = _sgAV4::P64;
           Sp = Sp + 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgMdd: // global
           I64[Sp] = block_cgMaq_info;
           R2 = _sgAV4::P64;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMal_info" {
     block_cgMal_info:
         const _cgMal;
         const 5;
         const 18446744069414584350;
         const ugMdy_srtd;
 },
 _cgMcU() //  [R1, R2]
         { []
         }
     {offset
       cgMcU: // global
           _sgAVd::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgMcW_info;
           R6 = P64[Sp + 8];
           R5 = _sgAVd::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMcU_info" {
     block_cgMcU_info:
         const _cgMcU;
         const 3;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMcW() //  [R1, R2]
         { []
         }
     {offset
       cgMcW: // global
           _sgAV4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgMcY_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgAV4::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMcW_info" {
     block_cgMcW_info:
         const _cgMcW;
         const 1;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMcY() //  [R1, R2]
         { []
         }
     {offset
       cgMcY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMd8; else goto cgMd7;
       cgMd8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgMd7: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMcY_info" {
     block_cgMcY_info:
         const _cgMcY;
         const 0;
         const 30;
 },
 _cgMaq() //  [R1]
         { []
         }
     {offset
       cgMaq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMdg; else goto cgMdf;
       cgMdg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMdf: // global
           I64[Hp - 48] = sat_sgAVU_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cgMc4_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMaq_info" {
     block_cgMaq_info:
         const _cgMaq;
         const 5;
         const 38654705694;
         const SgBbV_srt+1256;
 },
 _cgMc4() //  [R1]
         { []
         }
     {offset
       cgMc4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgMdj; else goto cgMdi;
       cgMdj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMdi: // global
           I64[Hp - 24] = sat_sgAVX_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cgMd9_info;
           R2 = P64[Sp + 40];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Float.atan2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMc4_info" {
     block_cgMc4_info:
         const _cgMc4;
         const 133;
         const 4294967326;
         const SgBbV_srt+1256;
 },
 _cgMd9() //  [R1]
         { []
         }
     {offset
       cgMd9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMdm; else goto cgMdl;
       cgMdm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMdl: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMd9_info" {
     block_cgMd9_info:
         const _cgMd9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.122191263 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1pexp1_entry() //  [R2]
         { []
         }
     {offset
       cgMgG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgMgP; else goto cgMgQ;
       cgMgP: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgMgQ: // global
           I64[Sp - 8] = block_cgMgD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMiN; else goto cgMgE;
       ugMiN: // global
           call _cgMgD(R1) args: 0, res: 0, upd: 0;
       cgMgE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1pexp1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_entry;
         const 0;
         const 1103806595086;
         const 4294967301;
         const SgBbV_srt+1304;
 },
 _cgMgD() //  [R1]
         { []
         }
     {offset
       cgMgD: // global
           I64[Sp - 8] = block_cgMgJ_info;
           _sgAW2::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAW2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMiM; else goto cgMgK;
       ugMiM: // global
           call _cgMgJ(R1) args: 0, res: 0, upd: 0;
       cgMgK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMgD_info" {
     block_cgMgD_info:
         const _cgMgD;
         const 0;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgMgJ() //  [R1]
         { []
         }
     {offset
       cgMgJ: // global
           I64[Sp] = block_cgMgO_info;
           _sgAW4::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAW4::F32;
           if (R1 & 7 != 0) goto ugMiO; else goto cgMgT;
       ugMiO: // global
           call _cgMgO(R1) args: 0, res: 0, upd: 0;
       cgMgT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMgJ_info" {
     block_cgMgJ_info:
         const _cgMgJ;
         const 1;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgMgO() //  [R1]
         { []
         }
     {offset
       cgMgO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgMgZ; else goto cgMgY;
       cgMgZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMgY: // global
           _sgAW6::F32 = F32[R1 + 7];
           (_cgMh0::F32) = call MO_F32_Exp(F32[Sp + 8]);
           (_cgMh4::F32) = call MO_F32_Cos(_sgAW6::F32);
           (_cgMhb::F32) = call MO_F32_Sin(_sgAW6::F32);
           _sgAW8::F32 = %MO_F_Mul_W32(_cgMh0::F32, _cgMh4::F32);
           (_cgMhi::F32) = call MO_F32_Fabs(_sgAW8::F32);
           _sgAWa::F32 = %MO_F_Mul_W32(_cgMh0::F32, _cgMhb::F32);
           if (%MO_F_Lt_W32(_cgMhi::F32,
                            0.5 :: W32)) goto cgMiL; else goto cgMhZ;
       cgMiL: // global
           (_cgMhT::F32) = call MO_F32_Fabs(_sgAWa::F32);
           if (%MO_F_Lt_W32(_cgMhT::F32,
                            0.5 :: W32)) goto cgMiH; else goto cgMhZ;
       cgMiH: // global
           _sgAWn::F32 = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Add_W32(_sgAW8::F32,
                                                                   _sgAW8::F32),
                                                     %MO_F_Mul_W32(_sgAW8::F32, _sgAW8::F32)),
                                       %MO_F_Mul_W32(_sgAWa::F32, _sgAWa::F32));
           (_cgMik::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(_sgAWn::F32,
                                                          1.0 :: W32));
           (_sgAWz::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Quot_W32(_sgAWn::F32,
                                                                                                                                  %MO_F_Add_W32(_cgMik::F32,
                                                                                                                                                1.0 :: W32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_sgAW8::F32, 1.0 :: W32);
           I64[Sp] = block_cgMiA_info;
           F1 = _sgAWa::F32;
           R2 = Hp - 7;
           F32[Sp + 8] = _sgAWz::F32;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
       cgMhZ: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgMht_info;
           F2 = _sgAWa::F32;
           _sgAWd::F32 = %MO_F_Add_W32(_sgAW8::F32, 1.0 :: W32);
           F1 = _sgAWd::F32;
           F32[Sp] = _sgAWd::F32;
           F32[Sp + 8] = _sgAWa::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMgO_info" {
     block_cgMgO_info:
         const _cgMgO;
         const 65;
         const 4294967326;
         const SgBbV_srt+1304;
 },
 _cgMiA() //  [F1]
         { []
         }
     {offset
       cgMiA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMiK; else goto cgMiJ;
       cgMiK: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgMiJ: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMiA_info" {
     block_cgMiA_info:
         const _cgMiA;
         const 65;
         const 30;
 },
 _cgMht() //  [F1]
         { []
         }
     {offset
       cgMht: // global
           _sgAWa::F32 = F32[Sp + 16];
           _sgAWd::F32 = F32[Sp + 8];
           _cgMhy::F32 = F1;
           (_cgMhx::F32) = call MO_F32_Log(_cgMhy::F32);
           I64[Sp + 8] = block_cgMhB_info;
           F2 = _sgAWa::F32;
           F1 = _sgAWd::F32;
           F32[Sp + 16] = _cgMhx::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMht_info" {
     block_cgMht_info:
         const _cgMht;
         const 194;
         const 30;
 },
 _cgMhB() //  [F1]
         { []
         }
     {offset
       cgMhB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMhM; else goto cgMhL;
       cgMhM: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgMhL: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMhB_info" {
     block_cgMhB_info:
         const _cgMhB;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.141942185 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1pexp_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1pexp_entry() //  [R2]
         { []
         }
     {offset
       cgMjX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgMk6; else goto cgMk7;
       cgMk6: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgMk7: // global
           I64[Sp - 8] = block_cgMjU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMm4; else goto cgMjV;
       ugMm4: // global
           call _cgMjU(R1) args: 0, res: 0, upd: 0;
       cgMjV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1pexp_info" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp_info:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgBbV_srt+1352;
 },
 _cgMjU() //  [R1]
         { []
         }
     {offset
       cgMjU: // global
           I64[Sp - 8] = block_cgMk0_info;
           _sgAWI::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAWI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMm3; else goto cgMk1;
       ugMm3: // global
           call _cgMk0(R1) args: 0, res: 0, upd: 0;
       cgMk1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMjU_info" {
     block_cgMjU_info:
         const _cgMjU;
         const 0;
         const 4294967326;
         const SgBbV_srt+1352;
 },
 _cgMk0() //  [R1]
         { []
         }
     {offset
       cgMk0: // global
           I64[Sp] = block_cgMk5_info;
           _sgAWK::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAWK::F64;
           if (R1 & 7 != 0) goto ugMm5; else goto cgMka;
       ugMm5: // global
           call _cgMk5(R1) args: 0, res: 0, upd: 0;
       cgMka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMk0_info" {
     block_cgMk0_info:
         const _cgMk0;
         const 1;
         const 4294967326;
         const SgBbV_srt+1352;
 },
 _cgMk5() //  [R1]
         { []
         }
     {offset
       cgMk5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgMkg; else goto cgMkf;
       cgMkg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMkf: // global
           _sgAWM::F64 = F64[R1 + 7];
           (_cgMkh::F64) = call MO_F64_Exp(F64[Sp + 8]);
           (_cgMkl::F64) = call MO_F64_Cos(_sgAWM::F64);
           (_cgMks::F64) = call MO_F64_Sin(_sgAWM::F64);
           _sgAWO::F64 = %MO_F_Mul_W64(_cgMkh::F64, _cgMkl::F64);
           (_cgMkz::F64) = call MO_F64_Fabs(_sgAWO::F64);
           _sgAWQ::F64 = %MO_F_Mul_W64(_cgMkh::F64, _cgMks::F64);
           if (%MO_F_Lt_W64(_cgMkz::F64,
                            0.5 :: W64)) goto cgMm2; else goto cgMlg;
       cgMm2: // global
           (_cgMla::F64) = call MO_F64_Fabs(_sgAWQ::F64);
           if (%MO_F_Lt_W64(_cgMla::F64,
                            0.5 :: W64)) goto cgMlY; else goto cgMlg;
       cgMlY: // global
           _sgAX3::F64 = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Add_W64(_sgAWO::F64,
                                                                   _sgAWO::F64),
                                                     %MO_F_Mul_W64(_sgAWO::F64, _sgAWO::F64)),
                                       %MO_F_Mul_W64(_sgAWQ::F64, _sgAWQ::F64));
           (_cgMlB::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(_sgAX3::F64,
                                                          1.0 :: W64));
           (_sgAXf::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Quot_W64(_sgAX3::F64,
                                                                                                                                 %MO_F_Add_W64(_cgMlB::F64,
                                                                                                                                               1.0 :: W64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_sgAWO::F64, 1.0 :: W64);
           I64[Sp] = block_cgMlR_info;
           D1 = _sgAWQ::F64;
           R2 = Hp - 7;
           F64[Sp + 8] = _sgAXf::F64;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
       cgMlg: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgMkK_info;
           D2 = _sgAWQ::F64;
           _sgAWT::F64 = %MO_F_Add_W64(_sgAWO::F64, 1.0 :: W64);
           D1 = _sgAWT::F64;
           F64[Sp] = _sgAWT::F64;
           F64[Sp + 8] = _sgAWQ::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMk5_info" {
     block_cgMk5_info:
         const _cgMk5;
         const 65;
         const 4294967326;
         const SgBbV_srt+1352;
 },
 _cgMlR() //  [D1]
         { []
         }
     {offset
       cgMlR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMm1; else goto cgMm0;
       cgMm1: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgMm0: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMlR_info" {
     block_cgMlR_info:
         const _cgMlR;
         const 65;
         const 30;
 },
 _cgMkK() //  [D1]
         { []
         }
     {offset
       cgMkK: // global
           _sgAWQ::F64 = F64[Sp + 16];
           _sgAWT::F64 = F64[Sp + 8];
           _cgMkP::F64 = D1;
           (_cgMkO::F64) = call MO_F64_Log(_cgMkP::F64);
           I64[Sp + 8] = block_cgMkS_info;
           D2 = _sgAWQ::F64;
           D1 = _sgAWT::F64;
           F64[Sp + 16] = _cgMkO::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMkK_info" {
     block_cgMkK_info:
         const _cgMkK;
         const 194;
         const 30;
 },
 _cgMkS() //  [D1]
         { []
         }
     {offset
       cgMkS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMl3; else goto cgMl2;
       cgMl3: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgMl2: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMkS_info" {
     block_cgMkS_info:
         const _cgMkS;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.17165438 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog1pexp_closure" {
     Data.Complex.$fFloatingComplex_$clog1pexp_closure:
         const Data.Complex.$fFloatingComplex_$clog1pexp_info;
         const 0;
 },
 $dNum_sgAXv_entry() //  [R1]
         { []
         }
     {offset
       cgMnu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgMnv; else goto cgMnw;
       cgMnv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMnw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgAXv_info" {
     $dNum_sgAXv_info:
         const $dNum_sgAXv_entry;
         const 1;
         const 16;
 },
 $dFractional_sgAXx_entry() //  [R1]
         { []
         }
     {offset
       cgMnF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgMnG; else goto cgMnH;
       cgMnG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMnH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgAXx_info" {
     $dFractional_sgAXx_info:
         const $dFractional_sgAXx_entry;
         const 1;
         const 16;
 },
 sat_sgAXz_entry() //  [R1]
         { []
         }
     {offset
       cgMnM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMnN; else goto cgMnO;
       cgMnN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMnO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAXz_info" {
     sat_sgAXz_info:
         const sat_sgAXz_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1384;
 },
 sat_sgAXy_entry() //  [R1]
         { []
         }
     {offset
       cgMnT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMnU; else goto cgMnV;
       cgMnU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMnV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAXy_info" {
     sat_sgAXy_info:
         const sat_sgAXy_entry;
         const 2;
         const 18;
 },
 sat_sgAXL_entry() //  [R1]
         { []
         }
     {offset
       cgMo5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMo6; else goto cgMo7;
       cgMo6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMo7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAXL_info" {
     sat_sgAXL_info:
         const sat_sgAXL_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1384;
 },
 sat_sgAXK_entry() //  [R1]
         { []
         }
     {offset
       cgMoc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMod; else goto cgMoe;
       cgMod: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMoe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAXK_info" {
     sat_sgAXK_info:
         const sat_sgAXK_entry;
         const 2;
         const 18;
 },
 sat_sgAY2_entry() //  [R1]
         { []
         }
     {offset
       cgMoA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgMoB; else goto cgMoC;
       cgMoB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMoC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgAXs::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgAXs::P64;
           P64[Sp - 24] = _sgAXs::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY2_info" {
     sat_sgAY2_info:
         const sat_sgAY2_entry;
         const 2;
         const 18;
 },
 sat_sgAY0_entry() //  [R1]
         { []
         }
     {offset
       cgMoL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgMoM; else goto cgMoN;
       cgMoM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMoN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgAXr::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgAXr::P64;
           P64[Sp - 24] = _sgAXr::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY0_info" {
     sat_sgAY0_info:
         const sat_sgAY0_entry;
         const 2;
         const 18;
 },
 sat_sgAXY_entry() //  [R1]
         { []
         }
     {offset
       cgMoW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMoX; else goto cgMoY;
       cgMoX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMoY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAXY_info" {
     sat_sgAXY_info:
         const sat_sgAXY_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1280;
 },
 sat_sgAXZ_entry() //  [R1]
         { []
         }
     {offset
       cgMoZ: // global
           _sgAXZ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMp0; else goto cgMp1;
       cgMp1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMp3; else goto cgMp2;
       cgMp3: // global
           HpAlloc = 24;
           goto cgMp0;
       cgMp0: // global
           R1 = _sgAXZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMp2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAXZ::P64;
           _sgAXr::P64 = P64[_sgAXZ::P64 + 16];
           _sgAXv::P64 = P64[_sgAXZ::P64 + 24];
           I64[Hp - 16] = sat_sgAXY_info;
           P64[Hp] = _sgAXv::P64;
           R2 = _sgAXv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgAXr::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAXZ_info" {
     sat_sgAXZ_info:
         const sat_sgAXZ_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1280;
 },
 sat_sgAY1_entry() //  [R1]
         { []
         }
     {offset
       cgMp4: // global
           _sgAY1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMp5; else goto cgMp6;
       cgMp6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgMp8; else goto cgMp7;
       cgMp8: // global
           HpAlloc = 64;
           goto cgMp5;
       cgMp5: // global
           R1 = _sgAY1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMp7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAY1::P64;
           _sgAXr::P64 = P64[_sgAY1::P64 + 16];
           _sgAXv::P64 = P64[_sgAY1::P64 + 24];
           I64[Hp - 56] = sat_sgAY0_info;
           P64[Hp - 40] = _sgAXr::P64;
           P64[Hp - 32] = _sgAXv::P64;
           I64[Hp - 24] = sat_sgAXZ_info;
           P64[Hp - 8] = _sgAXr::P64;
           P64[Hp] = _sgAXv::P64;
           R2 = _sgAXv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY1_info" {
     sat_sgAY1_info:
         const sat_sgAY1_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1280;
 },
 u_sgAXX_entry() //  [R1]
         { []
         }
     {offset
       cgMp9: // global
           _sgAXX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMpa; else goto cgMpb;
       cgMpb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgMpd; else goto cgMpc;
       cgMpd: // global
           HpAlloc = 64;
           goto cgMpa;
       cgMpa: // global
           R1 = _sgAXX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMpc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAXX::P64;
           _sgAXr::P64 = P64[_sgAXX::P64 + 16];
           _sgAXs::P64 = P64[_sgAXX::P64 + 24];
           _sgAXv::P64 = P64[_sgAXX::P64 + 32];
           I64[Hp - 56] = sat_sgAY2_info;
           P64[Hp - 40] = _sgAXs::P64;
           P64[Hp - 32] = _sgAXv::P64;
           I64[Hp - 24] = sat_sgAY1_info;
           P64[Hp - 8] = _sgAXr::P64;
           P64[Hp] = _sgAXv::P64;
           R2 = _sgAXv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgAXX_info" {
     u_sgAXX_info:
         const u_sgAXX_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1280;
 },
 sat_sgAY4_entry() //  [R1]
         { []
         }
     {offset
       cgMpu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMpv; else goto cgMpw;
       cgMpv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMpw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY4_info" {
     sat_sgAY4_info:
         const sat_sgAY4_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgAY5_entry() //  [R1]
         { []
         }
     {offset
       cgMpx: // global
           _sgAY5::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMpy; else goto cgMpz;
       cgMpz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMpB; else goto cgMpA;
       cgMpB: // global
           HpAlloc = 24;
           goto cgMpy;
       cgMpy: // global
           R1 = _sgAY5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMpA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAY5::P64;
           _sgAXv::P64 = P64[_sgAY5::P64 + 16];
           _sgAXX::P64 = P64[_sgAY5::P64 + 24];
           I64[Hp - 16] = sat_sgAY4_info;
           P64[Hp] = _sgAXv::P64;
           R2 = _sgAXv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgAXX::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY5_info" {
     sat_sgAY5_info:
         const sat_sgAY5_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1256;
 },
 sat_sgAY6_entry() //  [R1]
         { []
         }
     {offset
       cgMpC: // global
           _sgAY6::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgMpD; else goto cgMpE;
       cgMpE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgMpG; else goto cgMpF;
       cgMpG: // global
           HpAlloc = 32;
           goto cgMpD;
       cgMpD: // global
           R1 = _sgAY6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMpF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAY6::P64;
           _sgAXv::P64 = P64[_sgAY6::P64 + 16];
           _sgAXW::P64 = P64[_sgAY6::P64 + 24];
           _sgAXX::P64 = P64[_sgAY6::P64 + 32];
           I64[Hp - 24] = sat_sgAY5_info;
           P64[Hp - 8] = _sgAXv::P64;
           P64[Hp] = _sgAXX::P64;
           R2 = _sgAXW::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY6_info" {
     sat_sgAY6_info:
         const sat_sgAY6_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1256;
 },
 sat_sgAY3_entry() //  [R1]
         { []
         }
     {offset
       cgMpL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMpM; else goto cgMpN;
       cgMpM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMpN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY3_info" {
     sat_sgAY3_info:
         const sat_sgAY3_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgAY7_entry() //  [R1]
         { []
         }
     {offset
       cgMpO: // global
           _sgAY7::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMpP; else goto cgMpQ;
       cgMpQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgMpS; else goto cgMpR;
       cgMpS: // global
           HpAlloc = 64;
           goto cgMpP;
       cgMpP: // global
           R1 = _sgAY7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMpR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAY7::P64;
           _sgAXv::P64 = P64[_sgAY7::P64 + 16];
           _sgAXW::P64 = P64[_sgAY7::P64 + 24];
           _sgAXX::P64 = P64[_sgAY7::P64 + 32];
           I64[Hp - 56] = sat_sgAY6_info;
           P64[Hp - 40] = _sgAXv::P64;
           P64[Hp - 32] = _sgAXW::P64;
           P64[Hp - 24] = _sgAXX::P64;
           I64[Hp - 16] = sat_sgAY3_info;
           P64[Hp] = _sgAXv::P64;
           R2 = _sgAXv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY7_info" {
     sat_sgAY7_info:
         const sat_sgAY7_entry;
         const 3;
         const 4294967311;
         const SgBbV_srt+1256;
 },
 sat_sgAY8_entry() //  [R1]
         { []
         }
     {offset
       cgMpT: // global
           _sgAY8::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMpU; else goto cgMpV;
       cgMpV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgMpX; else goto cgMpW;
       cgMpX: // global
           HpAlloc = 80;
           goto cgMpU;
       cgMpU: // global
           R1 = _sgAY8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMpW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAY8::P64;
           _sgAXr::P64 = P64[_sgAY8::P64 + 16];
           _sgAXs::P64 = P64[_sgAY8::P64 + 24];
           _sgAXv::P64 = P64[_sgAY8::P64 + 32];
           _sgAXx::P64 = P64[_sgAY8::P64 + 40];
           _sgAXW::P64 = P64[_sgAY8::P64 + 48];
           I64[Hp - 72] = u_sgAXX_info;
           P64[Hp - 56] = _sgAXr::P64;
           P64[Hp - 48] = _sgAXs::P64;
           P64[Hp - 40] = _sgAXv::P64;
           I64[Hp - 32] = sat_sgAY7_info;
           P64[Hp - 16] = _sgAXv::P64;
           P64[Hp - 8] = _sgAXW::P64;
           _cgMos::P64 = Hp - 72;
           P64[Hp] = _cgMos::P64;
           R2 = _sgAXx::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _cgMos::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAY8_info" {
     sat_sgAY8_info:
         const sat_sgAY8_entry;
         const 5;
         const 38654705679;
         const SgBbV_srt+1256;
 },
 sat_sgAYa_entry() //  [R1]
         { []
         }
     {offset
       cgMq8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMq9; else goto cgMqa;
       cgMq9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMqa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAYa_info" {
     sat_sgAYa_info:
         const sat_sgAYa_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1256;
 },
 sat_sgAYb_entry() //  [R1]
         { []
         }
     {offset
       cgMqb: // global
           _sgAYb::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgMqc; else goto cgMqd;
       cgMqd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMqf; else goto cgMqe;
       cgMqf: // global
           HpAlloc = 24;
           goto cgMqc;
       cgMqc: // global
           R1 = _sgAYb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMqe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgAYb::P64;
           _sgAXr::P64 = P64[_sgAYb::P64 + 16];
           _sgAXv::P64 = P64[_sgAYb::P64 + 24];
           I64[Hp - 16] = sat_sgAYa_info;
           P64[Hp] = _sgAXv::P64;
           R2 = _sgAXv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgAXr::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAYb_info" {
     sat_sgAYb_info:
         const sat_sgAYb_entry;
         const 2;
         const 4294967314;
         const SgBbV_srt+1256;
 },
 section ""relreadonly" . ugMrj_srtd" {
     ugMrj_srtd:
         const SgBbV_srt+520;
         const 110;
         const 1;
         const 52916413005824;
 },
 Data.Complex.$fFloatingComplex_$clog1pexp_entry() //  [R2, R3]
         { []
         }
     {offset
       cgMqg: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgMqh; else goto cgMqi;
       cgMqh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog1pexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgMqi: // global
           I64[Sp - 16] = block_cgMnb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugMri; else goto cgMnc;
       ugMri: // global
           call _cgMnb(R1) args: 0, res: 0, upd: 0;
       cgMnc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog1pexp_info" {
     Data.Complex.$fFloatingComplex_$clog1pexp_info:
         const Data.Complex.$fFloatingComplex_$clog1pexp_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugMrj_srtd;
 },
 section ""relreadonly" . ugMrk_srtd" {
     ugMrk_srtd:
         const SgBbV_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgMnb() //  [R1]
         { []
         }
     {offset
       cgMnb: // global
           I64[Sp] = block_cgMng_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMnb_info" {
     block_cgMnb_info:
         const _cgMnb;
         const 1;
         const 18446744069414584350;
         const ugMrk_srtd;
 },
 section ""relreadonly" . ugMrl_srtd" {
     ugMrl_srtd:
         const SgBbV_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgMng() //  [R1, R2]
         { []
         }
     {offset
       cgMng: // global
           I64[Sp - 16] = block_cgMni_info;
           _sgAXs::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgAXs::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMng_info" {
     block_cgMng_info:
         const _cgMng;
         const 1;
         const 18446744069414584350;
         const ugMrl_srtd;
 },
 section ""relreadonly" . ugMrm_srtd" {
     ugMrm_srtd:
         const SgBbV_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgMni() //  [R1]
         { []
         }
     {offset
       cgMni: // global
           I64[Sp - 8] = block_cgMnm_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMni_info" {
     block_cgMni_info:
         const _cgMni;
         const 3;
         const 18446744069414584350;
         const ugMrm_srtd;
 },
 section ""relreadonly" . ugMrn_srtd" {
     ugMrn_srtd:
         const SgBbV_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgMnm() //  [R1]
         { []
         }
     {offset
       cgMnm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMqo; else goto cgMqn;
       cgMqo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMqn: // global
           I64[Hp - 16] = $dNum_sgAXv_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgMnx_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMnm_info" {
     block_cgMnm_info:
         const _cgMnm;
         const 4;
         const 18446744069414584350;
         const ugMrn_srtd;
 },
 section ""relreadonly" . ugMro_srtd" {
     ugMro_srtd:
         const SgBbV_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgMnx() //  [R1]
         { []
         }
     {offset
       cgMnx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgMqr; else goto cgMqq;
       cgMqr: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMqq: // global
           I64[Hp - 72] = $dFractional_sgAXx_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_sgAXz_info;
           _cgMnB::P64 = Hp - 72;
           P64[Hp - 32] = _cgMnB::P64;
           I64[Hp - 24] = sat_sgAXy_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgMnW_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 48;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgMnB::P64;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMnx_info" {
     block_cgMnx_info:
         const _cgMnx;
         const 5;
         const 18446744069414584350;
         const ugMro_srtd;
 },
 section ""relreadonly" . ugMrp_srtd" {
     ugMrp_srtd:
         const SgBbV_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgMnW() //  [R1]
         { []
         }
     {offset
       cgMnW: // global
           if (R1 & 7 == 1) goto cgMqC; else goto cgMqI;
       cgMqC: // global
           I64[Sp + 24] = block_cgMqt_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 48];
           Sp = Sp + 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgMqI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMqL; else goto cgMqK;
       cgMqL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMqK: // global
           I64[Hp - 48] = sat_sgAXL_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sgAXK_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           _sgAXw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgMof_info;
           R2 = _sgAXw::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMnW_info" {
     block_cgMnW_info:
         const _cgMnW;
         const 6;
         const 18446744069414584350;
         const ugMrp_srtd;
 },
 _cgMqt() //  [R1, R2]
         { []
         }
     {offset
       cgMqt: // global
           _sgAXr::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgMqv_info;
           R6 = P64[Sp + 8];
           R5 = _sgAXr::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMqt_info" {
     block_cgMqt_info:
         const _cgMqt;
         const 3;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMqv() //  [R1, R2]
         { []
         }
     {offset
       cgMqv: // global
           _sgAXl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgMqx_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgAXl::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMqv_info" {
     block_cgMqv_info:
         const _cgMqv;
         const 1;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMqx() //  [R1, R2]
         { []
         }
     {offset
       cgMqx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMqH; else goto cgMqG;
       cgMqH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgMqG: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMqx_info" {
     block_cgMqx_info:
         const _cgMqx;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugMrq_srtd" {
     ugMrq_srtd:
         const SgBbV_srt+520;
         const 102;
         const 1;
         const 139854872576;
 },
 _cgMof() //  [R1]
         { []
         }
     {offset
       cgMof: // global
           _sgAXl::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cgMqW; else goto cgMr6;
       cgMqW: // global
           I64[Sp + 16] = block_cgMqN_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = _sgAXl::P64;
           Sp = Sp + 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgMr6: // global
           I64[Sp] = block_cgMok_info;
           R2 = _sgAXl::P64;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMof_info" {
     block_cgMof_info:
         const _cgMof;
         const 5;
         const 18446744069414584350;
         const ugMrq_srtd;
 },
 _cgMqN() //  [R1, R2]
         { []
         }
     {offset
       cgMqN: // global
           _sgAXr::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgMqP_info;
           R6 = P64[Sp + 8];
           R5 = _sgAXr::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMqN_info" {
     block_cgMqN_info:
         const _cgMqN;
         const 3;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMqP() //  [R1, R2]
         { []
         }
     {offset
       cgMqP: // global
           _sgAXl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgMqR_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgAXl::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMqP_info" {
     block_cgMqP_info:
         const _cgMqP;
         const 1;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMqR() //  [R1, R2]
         { []
         }
     {offset
       cgMqR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMr1; else goto cgMr0;
       cgMr1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgMr0: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMqR_info" {
     block_cgMqR_info:
         const _cgMqR;
         const 0;
         const 30;
 },
 _cgMok() //  [R1]
         { []
         }
     {offset
       cgMok: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgMr9; else goto cgMr8;
       cgMr9: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMr8: // global
           I64[Hp - 48] = sat_sgAY8_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cgMpY_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMok_info" {
     block_cgMok_info:
         const _cgMok;
         const 5;
         const 38654705694;
         const SgBbV_srt+1256;
 },
 _cgMpY() //  [R1]
         { []
         }
     {offset
       cgMpY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgMrc; else goto cgMrb;
       cgMrc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMrb: // global
           I64[Hp - 24] = sat_sgAYb_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cgMr2_info;
           R2 = P64[Sp + 40];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Float.atan2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMpY_info" {
     block_cgMpY_info:
         const _cgMpY;
         const 133;
         const 4294967326;
         const SgBbV_srt+1256;
 },
 _cgMr2() //  [R1]
         { []
         }
     {offset
       cgMr2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMrf; else goto cgMre;
       cgMrf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgMre: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMr2_info" {
     block_cgMr2_info:
         const _cgMr2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.246411462 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clogBase1_closure" {
     Data.Complex.$fFloatingComplex_$s$clogBase1_closure:
         const Data.Complex.$fFloatingComplex_$s$clogBase1_info;
         const 0;
 },
 section ""relreadonly" . ugMvI_srtd" {
     ugMvI_srtd:
         const SgBbV_srt+1040;
         const 46;
         const 35192962023425;
 },
 Data.Complex.$fFloatingComplex_$s$clogBase1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgMuu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgMvn; else goto cgMvo;
       cgMvn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clogBase1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgMvo: // global
           I64[Sp - 16] = block_cgMur_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugMvD; else goto cgMus;
       ugMvD: // global
           call _cgMur(R1) args: 0, res: 0, upd: 0;
       cgMus: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clogBase1_info" {
     Data.Complex.$fFloatingComplex_$s$clogBase1_info:
         const Data.Complex.$fFloatingComplex_$s$clogBase1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugMvI_srtd;
 },
 section ""relreadonly" . ugMvJ_srtd" {
     ugMvJ_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMur() //  [R1]
         { []
         }
     {offset
       cgMur: // global
           I64[Sp - 8] = block_cgMux_info;
           _sgAYh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAYh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMvC; else goto cgMuy;
       ugMvC: // global
           call _cgMux(R1) args: 0, res: 0, upd: 0;
       cgMuy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMur_info" {
     block_cgMur_info:
         const _cgMur;
         const 1;
         const 18446744069414584350;
         const ugMvJ_srtd;
 },
 section ""relreadonly" . ugMvK_srtd" {
     ugMvK_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMux() //  [R1]
         { []
         }
     {offset
       cgMux: // global
           I64[Sp] = block_cgMuC_info;
           _sgAYj::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAYj::F32;
           if (R1 & 7 != 0) goto ugMvE; else goto cgMuD;
       ugMvE: // global
           call _cgMuC(R1) args: 0, res: 0, upd: 0;
       cgMuD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMux_info" {
     block_cgMux_info:
         const _cgMux;
         const 2;
         const 18446744069414584350;
         const ugMvK_srtd;
 },
 section ""relreadonly" . ugMvL_srtd" {
     ugMvL_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMuC() //  [R1]
         { []
         }
     {offset
       cgMuC: // global
           I64[Sp - 8] = block_cgMuH_info;
           _sgAYl::F32 = F32[R1 + 7];
           F2 = _sgAYl::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgAYl::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMuC_info" {
     block_cgMuC_info:
         const _cgMuC;
         const 66;
         const 18446744069414584350;
         const ugMvL_srtd;
 },
 section ""relreadonly" . ugMvM_srtd" {
     ugMvM_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMuH() //  [F1]
         { []
         }
     {offset
       cgMuH: // global
           _sgAYj::F32 = F32[Sp + 16];
           _sgAYl::F32 = F32[Sp + 8];
           _cgMuM::F32 = F1;
           (_cgMuL::F32) = call MO_F32_Log(_cgMuM::F32);
           I64[Sp + 8] = block_cgMuP_info;
           F2 = _sgAYl::F32;
           F1 = _sgAYj::F32;
           F32[Sp + 16] = _cgMuL::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMuH_info" {
     block_cgMuH_info:
         const _cgMuH;
         const 195;
         const 18446744069414584350;
         const ugMvM_srtd;
 },
 section ""relreadonly" . ugMvN_srtd" {
     ugMvN_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMuP() //  [F1]
         { []
         }
     {offset
       cgMuP: // global
           I64[Sp] = block_cgMuT_info;
           R1 = P64[Sp + 16];
           F32[Sp + 16] = F1;
           if (R1 & 7 != 0) goto ugMvF; else goto cgMuU;
       ugMvF: // global
           call _cgMuT(R1) args: 0, res: 0, upd: 0;
       cgMuU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMuP_info" {
     block_cgMuP_info:
         const _cgMuP;
         const 66;
         const 18446744069414584350;
         const ugMvN_srtd;
 },
 section ""relreadonly" . ugMvO_srtd" {
     ugMvO_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMuT() //  [R1]
         { []
         }
     {offset
       cgMuT: // global
           I64[Sp - 8] = block_cgMuY_info;
           _sgAYr::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAYr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMvG; else goto cgMuZ;
       ugMvG: // global
           call _cgMuY(R1) args: 0, res: 0, upd: 0;
       cgMuZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMuT_info" {
     block_cgMuT_info:
         const _cgMuT;
         const 194;
         const 18446744069414584350;
         const ugMvO_srtd;
 },
 section ""relreadonly" . ugMvP_srtd" {
     ugMvP_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMuY() //  [R1]
         { []
         }
     {offset
       cgMuY: // global
           I64[Sp] = block_cgMv3_info;
           _sgAYt::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgAYt::F32;
           if (R1 & 7 != 0) goto ugMvH; else goto cgMv4;
       ugMvH: // global
           call _cgMv3(R1) args: 0, res: 0, upd: 0;
       cgMv4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMuY_info" {
     block_cgMuY_info:
         const _cgMuY;
         const 387;
         const 18446744069414584350;
         const ugMvP_srtd;
 },
 section ""relreadonly" . ugMvQ_srtd" {
     ugMvQ_srtd:
         const SgBbV_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgMv3() //  [R1]
         { []
         }
     {offset
       cgMv3: // global
           I64[Sp - 8] = block_cgMv8_info;
           _sgAYv::F32 = F32[R1 + 7];
           F2 = _sgAYv::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgAYv::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMv3_info" {
     block_cgMv3_info:
         const _cgMv3;
         const 451;
         const 18446744069414584350;
         const ugMvQ_srtd;
 },
 _cgMv8() //  [F1]
         { []
         }
     {offset
       cgMv8: // global
           _sgAYt::F32 = F32[Sp + 16];
           _sgAYv::F32 = F32[Sp + 8];
           _cgMvd::F32 = F1;
           (_cgMvc::F32) = call MO_F32_Log(_cgMvd::F32);
           I64[Sp + 8] = block_cgMvg_info;
           F2 = _sgAYv::F32;
           F1 = _sgAYt::F32;
           F32[Sp + 16] = _cgMvc::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMv8_info" {
     block_cgMv8_info:
         const _cgMv8;
         const 964;
         const 4294967326;
         const SgBbV_srt+1408;
 },
 _cgMvg() //  [F1]
         { []
         }
     {offset
       cgMvg: // global
           _sgAYo::F32 = F32[Sp + 24];
           I64[Sp + 24] = block_cgMvk_info;
           F4 = F1;
           F3 = F32[Sp + 8];
           F2 = _sgAYo::F32;
           F1 = F32[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMvg_info" {
     block_cgMvg_info:
         const _cgMvg;
         const 451;
         const 4294967326;
         const SgBbV_srt+1408;
 },
 _cgMvk() //  [R1, R2]
         { []
         }
     {offset
       cgMvk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMvB; else goto cgMvA;
       cgMvB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgMvA: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMvk_info" {
     block_cgMvk_info:
         const _cgMvk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.277183468 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clogBase_closure" {
     Data.Complex.$fFloatingComplex_$s$clogBase_closure:
         const Data.Complex.$fFloatingComplex_$s$clogBase_info;
         const 0;
 },
 section ""relreadonly" . ugMy4_srtd" {
     ugMy4_srtd:
         const SgBbV_srt+1072;
         const 44;
         const 8830452760577;
 },
 Data.Complex.$fFloatingComplex_$s$clogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       cgMwQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgMxJ; else goto cgMxK;
       cgMxJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgMxK: // global
           I64[Sp - 16] = block_cgMwN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugMxZ; else goto cgMwO;
       ugMxZ: // global
           call _cgMwN(R1) args: 0, res: 0, upd: 0;
       cgMwO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clogBase_info" {
     Data.Complex.$fFloatingComplex_$s$clogBase_info:
         const Data.Complex.$fFloatingComplex_$s$clogBase_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugMy4_srtd;
 },
 section ""relreadonly" . ugMy5_srtd" {
     ugMy5_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMwN() //  [R1]
         { []
         }
     {offset
       cgMwN: // global
           I64[Sp - 8] = block_cgMwT_info;
           _sgAYG::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAYG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMxY; else goto cgMwU;
       ugMxY: // global
           call _cgMwT(R1) args: 0, res: 0, upd: 0;
       cgMwU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMwN_info" {
     block_cgMwN_info:
         const _cgMwN;
         const 1;
         const 18446744069414584350;
         const ugMy5_srtd;
 },
 section ""relreadonly" . ugMy6_srtd" {
     ugMy6_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMwT() //  [R1]
         { []
         }
     {offset
       cgMwT: // global
           I64[Sp] = block_cgMwY_info;
           _sgAYI::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAYI::F64;
           if (R1 & 7 != 0) goto ugMy0; else goto cgMwZ;
       ugMy0: // global
           call _cgMwY(R1) args: 0, res: 0, upd: 0;
       cgMwZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMwT_info" {
     block_cgMwT_info:
         const _cgMwT;
         const 2;
         const 18446744069414584350;
         const ugMy6_srtd;
 },
 section ""relreadonly" . ugMy7_srtd" {
     ugMy7_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMwY() //  [R1]
         { []
         }
     {offset
       cgMwY: // global
           I64[Sp - 8] = block_cgMx3_info;
           _sgAYK::F64 = F64[R1 + 7];
           D2 = _sgAYK::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgAYK::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMwY_info" {
     block_cgMwY_info:
         const _cgMwY;
         const 66;
         const 18446744069414584350;
         const ugMy7_srtd;
 },
 section ""relreadonly" . ugMy8_srtd" {
     ugMy8_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMx3() //  [D1]
         { []
         }
     {offset
       cgMx3: // global
           _sgAYI::F64 = F64[Sp + 16];
           _sgAYK::F64 = F64[Sp + 8];
           _cgMx8::F64 = D1;
           (_cgMx7::F64) = call MO_F64_Log(_cgMx8::F64);
           I64[Sp + 8] = block_cgMxb_info;
           D2 = _sgAYK::F64;
           D1 = _sgAYI::F64;
           F64[Sp + 16] = _cgMx7::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMx3_info" {
     block_cgMx3_info:
         const _cgMx3;
         const 195;
         const 18446744069414584350;
         const ugMy8_srtd;
 },
 section ""relreadonly" . ugMy9_srtd" {
     ugMy9_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMxb() //  [D1]
         { []
         }
     {offset
       cgMxb: // global
           I64[Sp] = block_cgMxf_info;
           R1 = P64[Sp + 16];
           F64[Sp + 16] = D1;
           if (R1 & 7 != 0) goto ugMy1; else goto cgMxg;
       ugMy1: // global
           call _cgMxf(R1) args: 0, res: 0, upd: 0;
       cgMxg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMxb_info" {
     block_cgMxb_info:
         const _cgMxb;
         const 66;
         const 18446744069414584350;
         const ugMy9_srtd;
 },
 section ""relreadonly" . ugMya_srtd" {
     ugMya_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMxf() //  [R1]
         { []
         }
     {offset
       cgMxf: // global
           I64[Sp - 8] = block_cgMxk_info;
           _sgAYQ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgAYQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMy2; else goto cgMxl;
       ugMy2: // global
           call _cgMxk(R1) args: 0, res: 0, upd: 0;
       cgMxl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMxf_info" {
     block_cgMxf_info:
         const _cgMxf;
         const 194;
         const 18446744069414584350;
         const ugMya_srtd;
 },
 section ""relreadonly" . ugMyb_srtd" {
     ugMyb_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMxk() //  [R1]
         { []
         }
     {offset
       cgMxk: // global
           I64[Sp] = block_cgMxp_info;
           _sgAYS::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgAYS::F64;
           if (R1 & 7 != 0) goto ugMy3; else goto cgMxq;
       ugMy3: // global
           call _cgMxp(R1) args: 0, res: 0, upd: 0;
       cgMxq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMxk_info" {
     block_cgMxk_info:
         const _cgMxk;
         const 387;
         const 18446744069414584350;
         const ugMyb_srtd;
 },
 section ""relreadonly" . ugMyc_srtd" {
     ugMyc_srtd:
         const SgBbV_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgMxp() //  [R1]
         { []
         }
     {offset
       cgMxp: // global
           I64[Sp - 8] = block_cgMxu_info;
           _sgAYU::F64 = F64[R1 + 7];
           D2 = _sgAYU::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgAYU::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMxp_info" {
     block_cgMxp_info:
         const _cgMxp;
         const 451;
         const 18446744069414584350;
         const ugMyc_srtd;
 },
 _cgMxu() //  [D1]
         { []
         }
     {offset
       cgMxu: // global
           _sgAYS::F64 = F64[Sp + 16];
           _sgAYU::F64 = F64[Sp + 8];
           _cgMxz::F64 = D1;
           (_cgMxy::F64) = call MO_F64_Log(_cgMxz::F64);
           I64[Sp + 8] = block_cgMxC_info;
           D2 = _sgAYU::F64;
           D1 = _sgAYS::F64;
           F64[Sp + 16] = _cgMxy::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMxu_info" {
     block_cgMxu_info:
         const _cgMxu;
         const 964;
         const 4294967326;
         const SgBbV_srt+1424;
 },
 _cgMxC() //  [D1]
         { []
         }
     {offset
       cgMxC: // global
           _sgAYN::F64 = F64[Sp + 24];
           I64[Sp + 24] = block_cgMxG_info;
           D4 = D1;
           D3 = F64[Sp + 8];
           D2 = _sgAYN::F64;
           D1 = F64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMxC_info" {
     block_cgMxC_info:
         const _cgMxC;
         const 451;
         const 4294967326;
         const SgBbV_srt+1424;
 },
 _cgMxG() //  [R1, R2]
         { []
         }
     {offset
       cgMxG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMxX; else goto cgMxW;
       cgMxX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgMxW: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMxG_info" {
     block_cgMxG_info:
         const _cgMxG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.310470119 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clogBase_closure" {
     Data.Complex.$fFloatingComplex_$clogBase_closure:
         const Data.Complex.$fFloatingComplex_$clogBase_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$clogBase_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgMzc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgMzr; else goto cgMzs;
       cgMzr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clogBase_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgMzs: // global
           I64[Sp - 24] = block_cgMz9_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugMzA; else goto cgMza;
       ugMzA: // global
           call _cgMz9(R1) args: 0, res: 0, upd: 0;
       cgMza: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clogBase_info" {
     Data.Complex.$fFloatingComplex_$clogBase_info:
         const Data.Complex.$fFloatingComplex_$clogBase_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const SgBbV_srt+1328;
 },
 _cgMz9() //  [R1]
         { []
         }
     {offset
       cgMz9: // global
           I64[Sp] = block_cgMzf_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMz9_info" {
     block_cgMz9_info:
         const _cgMz9;
         const 2;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMzf() //  [R1, R2]
         { []
         }
     {offset
       cgMzf: // global
           I64[Sp - 8] = block_cgMzh_info;
           _sgAZ8::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp] = R2;
           P64[Sp + 16] = _sgAZ8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugMzB; else goto cgMzi;
       ugMzB: // global
           call _cgMzh(R1) args: 0, res: 0, upd: 0;
       cgMzi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMzf_info" {
     block_cgMzf_info:
         const _cgMzf;
         const 2;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMzh() //  [R1]
         { []
         }
     {offset
       cgMzh: // global
           I64[Sp] = block_cgMzm_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMzh_info" {
     block_cgMzh_info:
         const _cgMzh;
         const 3;
         const 4294967326;
         const SgBbV_srt+1328;
 },
 _cgMzm() //  [R1, R2]
         { []
         }
     {offset
       cgMzm: // global
           _sgAZ8::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgMzo_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgAZ8::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMzm_info" {
     block_cgMzm_info:
         const _cgMzm;
         const 3;
         const 30;
 },
 _cgMzo() //  [R1, R2]
         { []
         }
     {offset
       cgMzo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMzz; else goto cgMzy;
       cgMzz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgMzy: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgMzo_info" {
     block_cgMzo_info:
         const _cgMzo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.321761629 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFloatingComplex1_closure" {
     Data.Complex.$fFloatingComplex_$s$fFloatingComplex1_closure:
         const GHC.Float.C:Floating_con_info;
         const Data.Complex.$fFloatingComplex_$s$fFractionalComplex1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cpi1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexp1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csqrt1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c**1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$clogBase1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$csin1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccos1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctan1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casin1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacos1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catan1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csinh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccosh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctanh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casinh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacosh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catanh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1p1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexpm2_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.324016722 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFloatingComplex_closure" {
     Data.Complex.$fFloatingComplex_$s$fFloatingComplex_closure:
         const GHC.Float.C:Floating_con_info;
         const Data.Complex.$fFloatingComplex_$s$fFractionalComplex_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cpi_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexp_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csqrt_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c**_closure+2;
         const Data.Complex.$fFloatingComplex_$s$clogBase_closure+2;
         const Data.Complex.$fFloatingComplex_$s$csin_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccos_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctan_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casin_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacos_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catan_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csinh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccosh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctanh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casinh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacosh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catanh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1p_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexpm1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.333954768 UTC

[section ""data" . Data.Complex.$fFloatingComplex_closure" {
     Data.Complex.$fFloatingComplex_closure:
         const Data.Complex.$fFloatingComplex_info;
         const 0;
 },
 sat_sgAZG_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMAa: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog1mexp_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZG_info" {
     sat_sgAZG_info:
         const sat_sgAZG_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1360;
 },
 sat_sgAZF_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMAi: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog1pexp_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZF_info" {
     sat_sgAZF_info:
         const sat_sgAZF_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1392;
 },
 sat_sgAZE_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMAq: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cexpm1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZE_info" {
     sat_sgAZE_info:
         const sat_sgAZE_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1288;
 },
 sat_sgAZD_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMAy: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog1p_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZD_info" {
     sat_sgAZD_info:
         const sat_sgAZD_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1320;
 },
 sat_sgAZC_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMAG: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$catanh_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZC_info" {
     sat_sgAZC_info:
         const sat_sgAZC_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1440;
 },
 sat_sgAZB_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMAO: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cacosh_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZB_info" {
     sat_sgAZB_info:
         const sat_sgAZB_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1448;
 },
 sat_sgAZA_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMAW: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$casinh_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZA_info" {
     sat_sgAZA_info:
         const sat_sgAZA_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1456;
 },
 sat_sgAZz_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMB4: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ctanh_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZz_info" {
     sat_sgAZz_info:
         const sat_sgAZz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAZy_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMBc: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ccosh_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZy_info" {
     sat_sgAZy_info:
         const sat_sgAZy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAZx_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMBk: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$csinh_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZx_info" {
     sat_sgAZx_info:
         const sat_sgAZx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAZw_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMBs: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$catan_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZw_info" {
     sat_sgAZw_info:
         const sat_sgAZw_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1464;
 },
 sat_sgAZv_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMBA: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cacos_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZv_info" {
     sat_sgAZv_info:
         const sat_sgAZv_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1472;
 },
 sat_sgAZu_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMBI: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$casin_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZu_info" {
     sat_sgAZu_info:
         const sat_sgAZu_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1480;
 },
 sat_sgAZt_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMBQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ctan_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZt_info" {
     sat_sgAZt_info:
         const sat_sgAZt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAZs_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMBY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ccos_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZs_info" {
     sat_sgAZs_info:
         const sat_sgAZs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAZr_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMC6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$csin_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZr_info" {
     sat_sgAZr_info:
         const sat_sgAZr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAZq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgMCe: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$clogBase_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZq_info" {
     sat_sgAZq_info:
         const sat_sgAZq_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgBbV_srt+1432;
 },
 sat_sgAZp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgMCm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c**_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZp_info" {
     sat_sgAZp_info:
         const sat_sgAZp_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgBbV_srt+1272;
 },
 sat_sgAZo_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMCu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$csqrt_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZo_info" {
     sat_sgAZo_info:
         const sat_sgAZo_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1488;
 },
 sat_sgAZn_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMCC: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZn_info" {
     sat_sgAZn_info:
         const sat_sgAZn_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgBbV_srt+1496;
 },
 sat_sgAZm_entry() //  [R1, R2]
         { []
         }
     {offset
       cgMCK: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cexp_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgAZm_info" {
     sat_sgAZm_info:
         const sat_sgAZm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgAZl_entry() //  [R1]
         { []
         }
     {offset
       cgMCR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgMCS; else goto cgMCT;
       cgMCS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMCT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFloatingComplex_$cpi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAZl_info" {
     sat_sgAZl_info:
         const sat_sgAZl_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1504;
 },
 sat_sgAZk_entry() //  [R1]
         { []
         }
     {offset
       cgMCY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgMCZ; else goto cgMD0;
       cgMCZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgMD0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFractionalComplex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgAZk_info" {
     sat_sgAZk_info:
         const sat_sgAZk_entry;
         const 1;
         const 4294967312;
         const SgBbV_srt+1512;
 },
 Data.Complex.$fFloatingComplex_entry() //  [R2]
         { []
         }
     {offset
       cgMD2: // global
           Hp = Hp + 576;
           if (Hp > HpLim) (likely: False) goto cgMD6; else goto cgMD5;
       cgMD6: // global
           HpAlloc = 576;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgMD5: // global
           I64[Hp - 568] = sat_sgAZG_info;
           P64[Hp - 560] = R2;
           I64[Hp - 552] = sat_sgAZF_info;
           P64[Hp - 544] = R2;
           I64[Hp - 536] = sat_sgAZE_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_sgAZD_info;
           P64[Hp - 512] = R2;
           I64[Hp - 504] = sat_sgAZC_info;
           P64[Hp - 496] = R2;
           I64[Hp - 488] = sat_sgAZB_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_sgAZA_info;
           P64[Hp - 464] = R2;
           I64[Hp - 456] = sat_sgAZz_info;
           P64[Hp - 448] = R2;
           I64[Hp - 440] = sat_sgAZy_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_sgAZx_info;
           P64[Hp - 416] = R2;
           I64[Hp - 408] = sat_sgAZw_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = sat_sgAZv_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_sgAZu_info;
           P64[Hp - 368] = R2;
           I64[Hp - 360] = sat_sgAZt_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = sat_sgAZs_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_sgAZr_info;
           P64[Hp - 320] = R2;
           I64[Hp - 312] = sat_sgAZq_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = sat_sgAZp_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_sgAZo_info;
           P64[Hp - 272] = R2;
           I64[Hp - 264] = sat_sgAZn_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = sat_sgAZm_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sgAZl_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sgAZk_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 247;
           P64[Hp - 152] = Hp - 263;
           P64[Hp - 144] = Hp - 279;
           P64[Hp - 136] = Hp - 294;
           P64[Hp - 128] = Hp - 310;
           P64[Hp - 120] = Hp - 327;
           P64[Hp - 112] = Hp - 343;
           P64[Hp - 104] = Hp - 359;
           P64[Hp - 96] = Hp - 375;
           P64[Hp - 88] = Hp - 391;
           P64[Hp - 80] = Hp - 407;
           P64[Hp - 72] = Hp - 423;
           P64[Hp - 64] = Hp - 439;
           P64[Hp - 56] = Hp - 455;
           P64[Hp - 48] = Hp - 471;
           P64[Hp - 40] = Hp - 487;
           P64[Hp - 32] = Hp - 503;
           P64[Hp - 24] = Hp - 519;
           P64[Hp - 16] = Hp - 535;
           P64[Hp - 8] = Hp - 551;
           P64[Hp] = Hp - 567;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_info" {
     Data.Complex.$fFloatingComplex_info:
         const Data.Complex.$fFloatingComplex_entry;
         const 0;
         const 18442390304016302094;
         const 4294967301;
         const SgBbV_srt+1272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.372573445 UTC

[section ""data" . Data.Complex.:+_closure" {
     Data.Complex.:+_closure:
         const Data.Complex.:+_info;
 },
 Data.Complex.:+_entry() //  [R2, R3]
         { []
         }
     {offset
       cgMEN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgMER; else goto cgMEQ;
       cgMER: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.:+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgMEQ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.:+_info" {
     Data.Complex.:+_info:
         const Data.Complex.:+_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.37616351 UTC

[section ""cstring" . igHta_str" {
     igHta_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,67,111,109,112,108,101,120,46,58,43]
 },
 Data.Complex.:+_con_entry() //  [R1]
         { []
         }
     {offset
       cgMEX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.:+_con_info" {
     Data.Complex.:+_con_info:
         const Data.Complex.:+_con_entry;
         const 2;
         const 4;
         const igHta_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:33.381152185 UTC

[section ""relreadonly" . SgBbV_srt" {
     SgBbV_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Complex.$fReadComplex2_closure;
         const GHC.Read.list3_closure;
         const Data.Complex.$fReadComplex1_closure;
         const Data.Complex.$fReadComplex_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Complex.$fReadComplex_$creadListPrec_closure;
         const Data.Complex.$fReadComplex_$creadList_closure;
         const Data.Complex.$fReadComplex_closure;
         const GHC.Err.undefined_closure;
         const lvl12_rgA6q_closure;
         const Data.Complex.$fStorableComplex8_closure;
         const Data.Complex.$fStorableComplex7_closure;
         const Data.Complex.$fStorableComplex_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.List.badHead_closure;
         const Data.Complex.$fReadComplex3_closure;
         const go61_rgA6s_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Complex.$fDataComplex8_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Complex.$fDataComplex4_closure;
         const Data.Complex.$fDataComplex10_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Complex.$fDataComplex_$cdataCast1_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Complex.$fDataComplex_$cgmapQi_closure;
         const Data.Complex.$c:+_closure;
         const lvl14_rgA6z_closure;
         const Data.Complex.$tComplex_closure;
         const Data.Complex.$fDataComplex_closure;
         const lvl15_rgA6A_closure;
         const GHC.Float.$w$cexponent1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const Data.Complex.$fFloatingComplex_$s$c/1_closure;
         const GHC.Float.rationalToFloat_closure;
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_closure;
         const Data.Complex.$fFloatingComplex17_closure;
         const Data.Complex.$wphase_closure;
         const Data.Complex.phase_closure;
         const GHC.Float.$w$cscaleFloat_closure;
         const GHC.Float.$w$cexponent_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$fFloatingComplex_$smagnitude_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1_closure;
         const Data.Complex.$fFloatingComplex_$s$cabs1_closure;
         const Data.Complex.polar_$spolar_closure;
         const Data.Complex.polar_closure;
         const Data.Complex.$w$cpi_closure;
         const Data.Complex.$fFloatingComplex_$cpi_closure;
         const Data.Complex.$fFloatingComplex_$s$clog_closure;
         const Data.Complex.$w$clog_closure;
         const Data.Complex.$fFloatingComplex_$clog_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$s$c/_closure;
         const GHC.Float.rationalToDouble_closure;
         const Data.Complex.$fFloatingComplex_$s$cfromRational_closure;
         const Data.Complex.$w$cfromRational_closure;
         const Data.Complex.$fFractionalComplex_$cfromRational_closure;
         const Data.Complex.$fFloatingComplex_$s$cabs_closure;
         const Data.Complex.$w$cabs_closure;
         const Data.Complex.$fNumComplex_$cabs_closure;
         const Data.Complex.$w$cfromInteger_closure;
         const Data.Complex.$fFloatingComplex_$cfromInteger_closure;
         const Data.Complex.$fFloatingComplex_$s$csignum_closure;
         const Data.Complex.$fFloatingComplex_$s$csignum1_closure;
         const Data.Complex.$w$csignum_closure;
         const Data.Complex.$fNumComplex_$csignum_closure;
         const Data.Complex.$fNumComplex_closure;
         const Data.Complex.$w$s$csqrt1_closure;
         const Data.Complex.$fFloatingComplex_$s$csqrt1_closure;
         const Data.Complex.$w$s$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$s$csqrt_closure;
         const sat_sgAyU_closure;
         const Data.Complex.$fFloatingComplex17_closure;
         const Data.Complex.$fFloatingComplex21_closure;
         const Data.Complex.$w$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$s$crecip_closure;
         const Data.Complex.$fFloatingComplex_$s$crecip1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const sat_sgAA0_closure;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$fFractionalComplex_$crecip_closure;
         const Data.Complex.$fFractionalComplex_closure;
         const Data.Complex.$fFloatingComplex_$s$ctan1_closure;
         const Data.Complex.$fFloatingComplex_$s$ctan_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$s$ctanh1_closure;
         const Data.Complex.$fFloatingComplex_$s$ctanh_closure;
         const Data.Complex.$w$s$cacosh1_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$s$cacosh1_closure;
         const Data.Complex.$w$s$cacosh_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$fFloatingComplex_$s$cacosh_closure;
         const Data.Complex.$w$cacosh_closure;
         const Data.Complex.$w$clog_closure;
         const Data.Complex.$fFloatingComplex_$cacosh_closure;
         const Data.Complex.$w$s$casinh1_closure;
         const Data.Complex.$fFloatingComplex_$s$casinh1_closure;
         const Data.Complex.$w$s$casinh_closure;
         const Data.Complex.$fFloatingComplex_$s$casinh_closure;
         const Data.Complex.$w$casinh_closure;
         const Data.Complex.$fFloatingComplex_$casinh_closure;
         const Data.Complex.$w$s$catan1_closure;
         const Data.Complex.$fFloatingComplex_$s$catan1_closure;
         const Data.Complex.$w$s$catan_closure;
         const Data.Complex.$fFloatingComplex_$s$catan_closure;
         const Data.Complex.$w$catan_closure;
         const Data.Complex.$w$csqrt_closure;
         const Data.Complex.$wphase_closure;
         const Data.Complex.$fFloatingComplex_$catan_closure;
         const Data.Complex.$w$s$cacos1_closure;
         const Data.Complex.$fFloatingComplex_$s$cacos1_closure;
         const Data.Complex.$w$s$cacos_closure;
         const Data.Complex.$fFloatingComplex_$s$cacos_closure;
         const Data.Complex.$w$cacos_closure;
         const Data.Complex.$fFloatingComplex_$cacos_closure;
         const Data.Complex.$w$s$casin1_closure;
         const Data.Complex.$fFloatingComplex_$s$casin1_closure;
         const Data.Complex.$w$s$casin_closure;
         const Data.Complex.$fFloatingComplex_$s$casin_closure;
         const Data.Complex.$w$casin_closure;
         const Data.Complex.$fFloatingComplex_$casin_closure;
         const Data.Complex.$w$s$catanh1_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const Data.Complex.$fFloatingComplex_$s$catanh1_closure;
         const Data.Complex.$w$s$catanh_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$s$catanh_closure;
         const Data.Complex.$w$catanh_closure;
         const Data.Complex.$fFloatingComplex18_closure;
         const Data.Complex.$fFloatingComplex20_closure;
         const Data.Complex.$fFloatingComplex_$catanh_closure;
         const Data.Complex.$fFloatingComplex6_closure;
         const Data.Complex.$fFloatingComplex_nan_closure;
         const Data.Complex.$fFloatingComplex8_closure;
         const Data.Complex.$fFloatingComplex_inf_closure;
         const Data.Complex.$w$s$c**_closure;
         const Data.Complex.$fFloatingComplex5_closure;
         const Data.Complex.$fFloatingComplex7_closure;
         const Data.Complex.$fFloatingComplex_$s$c**_closure;
         const Data.Complex.$fFloatingComplex14_closure;
         const Data.Complex.$fFloatingComplex_nan1_closure;
         const Data.Complex.$fFloatingComplex16_closure;
         const Data.Complex.$fFloatingComplex_inf1_closure;
         const Data.Complex.$w$s$c**1_closure;
         const Data.Complex.$fFloatingComplex13_closure;
         const Data.Complex.$fFloatingComplex15_closure;
         const Data.Complex.$fFloatingComplex_$s$c**1_closure;
         const Data.Complex.$fFloatingComplex17_closure;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$w$c**_closure;
         const Data.Complex.$fFloatingComplex_$c**_closure;
         const Data.Complex.$fFloatingComplex21_closure;
         const Data.Complex.$fFloatingComplex_$cexpm1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1p1_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1p_closure;
         const Data.Complex.$fFloatingComplex_$clog1p_closure;
         const Data.Complex.$w$clog_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$fFloatingComplex_$clog1mexp_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_closure;
         const Data.Complex.$fFloatingComplex20_closure;
         const Data.Complex.$fFloatingComplex_$clog1pexp_closure;
         const Data.Complex.$fFloatingComplex_$s$clogBase1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const Data.Complex.$fFloatingComplex_$s$clogBase_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$clogBase_closure;
         const Data.Complex.$fFloatingComplex_$catanh_closure;
         const Data.Complex.$fFloatingComplex_$cacosh_closure;
         const Data.Complex.$fFloatingComplex_$casinh_closure;
         const Data.Complex.$fFloatingComplex_$catan_closure;
         const Data.Complex.$fFloatingComplex_$cacos_closure;
         const Data.Complex.$fFloatingComplex_$casin_closure;
         const Data.Complex.$fFloatingComplex_$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$clog_closure;
         const Data.Complex.$fFloatingComplex_$cpi_closure;
         const Data.Complex.$fFractionalComplex_closure;
         const Data.Complex.$fFloatingComplex_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.713699158 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:12:44.715940939 UTC

[section ""data" . Data.Complex.$W:+_closure" {
     Data.Complex.$W:+_closure:
         const Data.Complex.$W:+_info;
 },
 Data.Complex.$W:+_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNyh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNyi; else goto cgNyj;
       cgNyi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$W:+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNyj: // global
           I64[Sp - 16] = block_cgNyc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$W:+_info" {
     Data.Complex.$W:+_info:
         const Data.Complex.$W:+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNyc() //  [R1]
         { []
         }
     {offset
       cgNyc: // global
           I64[Sp] = block_cgNye_info;
           _sgMF6::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sgMF6::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNyc_info" {
     block_cgNyc_info:
         const _cgNyc;
         const 1;
         const 30;
 },
 _cgNye() //  [R1]
         { []
         }
     {offset
       cgNye: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNyn; else goto cgNym;
       cgNyn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNym: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNye_info" {
     block_cgNye_info:
         const _cgNye;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.722466971 UTC

[section ""data" . Data.Complex.$fStorableComplex2_closure" {
     Data.Complex.$fStorableComplex2_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.725451162 UTC

[section ""data" . Data.Complex.$fStorableComplex1_closure" {
     Data.Complex.$fStorableComplex1_closure:
         const Data.Complex.$fStorableComplex1_info;
 },
 Data.Complex.$fStorableComplex1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNyM: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgNyQ; else goto cgNyR;
       cgNyQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNyR: // global
           I64[Sp - 24] = block_cgNyJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNyV; else goto cgNyK;
       ugNyV: // global
           call _cgNyJ(R1) args: 0, res: 0, upd: 0;
       cgNyK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex1_info" {
     Data.Complex.$fStorableComplex1_info:
         const Data.Complex.$fStorableComplex1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cgNyJ() //  [R1]
         { []
         }
     {offset
       cgNyJ: // global
           I64[Sp - 8] = block_cgNyP_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_ppv_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNyJ_info" {
     block_cgNyJ_info:
         const _cgNyJ;
         const 2;
         const 30;
 },
 _cgNyP() //  []
         { []
         }
     {offset
       cgNyP: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppv_info;
           _sgMFe::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = Data.Complex.$fStorableComplex2_closure+1;
           P64[Sp + 24] = _sgMFe::P64;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNyP_info" {
     block_cgNyP_info:
         const _cgNyP;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.733745776 UTC

[section ""data" . Data.Complex.$fStorableComplex3_closure" {
     Data.Complex.$fStorableComplex3_closure:
         const Data.Complex.$fStorableComplex3_info;
 },
 sat_sgMFr_entry() //  [R1]
         { []
         }
     {offset
       cgNzt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNzu; else goto cgNzv;
       cgNzu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNzv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$W:+_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMFr_info" {
     sat_sgMFr_info:
         const sat_sgMFr_entry;
         const 2;
         const 18;
 },
 Data.Complex.$fStorableComplex3_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNzw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgNzx; else goto cgNzy;
       cgNzx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNzy: // global
           I64[Sp - 24] = block_cgNzl_info;
           _sgMFi::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_pv_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _sgMFi::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex3_info" {
     Data.Complex.$fStorableComplex3_info:
         const Data.Complex.$fStorableComplex3_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cgNzl() //  [R1]
         { []
         }
     {offset
       cgNzl: // global
           _sgMFi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgNzn_info;
           R2 = _sgMFi::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = Data.Complex.$fStorableComplex2_closure+1;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNzl_info" {
     block_cgNzl_info:
         const _cgNzl;
         const 2;
         const 30;
 },
 _cgNzn() //  [R1]
         { []
         }
     {offset
       cgNzn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNzC; else goto cgNzB;
       cgNzC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNzB: // global
           I64[Hp - 24] = sat_sgMFr_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNzn_info" {
     block_cgNzn_info:
         const _cgNzn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.744314375 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$cliftA2_closure" {
     Data.Complex.$fApplicativeComplex_$cliftA2_closure:
         const Data.Complex.$fApplicativeComplex_$cliftA2_info;
 },
 Data.Complex.$fApplicativeComplex_$cliftA2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNA9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNAm; else goto cgNAn;
       cgNAm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$cliftA2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNAn: // global
           I64[Sp - 24] = block_cgNA6_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNAv; else goto cgNA7;
       ugNAv: // global
           call _cgNA6(R1) args: 0, res: 0, upd: 0;
       cgNA7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$cliftA2_info" {
     Data.Complex.$fApplicativeComplex_$cliftA2_info:
         const Data.Complex.$fApplicativeComplex_$cliftA2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNA6() //  [R1]
         { []
         }
     {offset
       cgNA6: // global
           I64[Sp - 8] = block_cgNAc_info;
           _sgMFw::P64 = P64[R1 + 7];
           _sgMFx::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgMFx::P64;
           P64[Sp + 16] = _sgMFw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugNAu; else goto cgNAd;
       ugNAu: // global
           call _cgNAc(R1) args: 0, res: 0, upd: 0;
       cgNAd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNA6_info" {
     block_cgNA6_info:
         const _cgNA6;
         const 2;
         const 30;
 },
 _cgNAc() //  [R1]
         { []
         }
     {offset
       cgNAc: // global
           I64[Sp] = block_cgNAh_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           _sgMFA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 24] = _sgMFA::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNAc_info" {
     block_cgNAc_info:
         const _cgNAc;
         const 3;
         const 30;
 },
 _cgNAh() //  [R1]
         { []
         }
     {offset
       cgNAh: // global
           _sgMFs::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgNAj_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           _sgMFB::P64 = R1;
           R1 = _sgMFs::P64;
           P64[Sp + 24] = _sgMFB::P64;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNAh_info" {
     block_cgNAh_info:
         const _cgNAh;
         const 3;
         const 30;
 },
 _cgNAj() //  [R1]
         { []
         }
     {offset
       cgNAj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNAt; else goto cgNAs;
       cgNAt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNAs: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNAj_info" {
     block_cgNAj_info:
         const _cgNAj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.756582788 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$c<*>_closure" {
     Data.Complex.$fApplicativeComplex_$c<*>_closure:
         const Data.Complex.$fApplicativeComplex_$c<*>_info;
 },
 Data.Complex.$fApplicativeComplex_$c<*>_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNB3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNBg; else goto cgNBh;
       cgNBg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNBh: // global
           I64[Sp - 16] = block_cgNB0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNBp; else goto cgNB1;
       ugNBp: // global
           call _cgNB0(R1) args: 0, res: 0, upd: 0;
       cgNB1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$c<*>_info" {
     Data.Complex.$fApplicativeComplex_$c<*>_info:
         const Data.Complex.$fApplicativeComplex_$c<*>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNB0() //  [R1]
         { []
         }
     {offset
       cgNB0: // global
           I64[Sp - 8] = block_cgNB6_info;
           _sgMFG::P64 = P64[R1 + 7];
           _sgMFH::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgMFH::P64;
           P64[Sp + 8] = _sgMFG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugNBo; else goto cgNB7;
       ugNBo: // global
           call _cgNB6(R1) args: 0, res: 0, upd: 0;
       cgNB7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNB0_info" {
     block_cgNB0_info:
         const _cgNB0;
         const 1;
         const 30;
 },
 _cgNB6() //  [R1]
         { []
         }
     {offset
       cgNB6: // global
           I64[Sp] = block_cgNBb_info;
           R2 = P64[R1 + 7];
           _sgMFK::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sgMFK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNB6_info" {
     block_cgNB6_info:
         const _cgNB6;
         const 2;
         const 30;
 },
 _cgNBb() //  [R1]
         { []
         }
     {offset
       cgNBb: // global
           _sgMFH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgNBd_info;
           R2 = P64[Sp + 16];
           _sgMFL::P64 = R1;
           R1 = _sgMFH::P64;
           P64[Sp + 16] = _sgMFL::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNBb_info" {
     block_cgNBb_info:
         const _cgNBb;
         const 2;
         const 30;
 },
 _cgNBd() //  [R1]
         { []
         }
     {offset
       cgNBd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNBn; else goto cgNBm;
       cgNBn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNBm: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNBd_info" {
     block_cgNBd_info:
         const _cgNBd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.770968591 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$cpure_closure" {
     Data.Complex.$fApplicativeComplex_$cpure_closure:
         const Data.Complex.$fApplicativeComplex_$cpure_info;
 },
 Data.Complex.$fApplicativeComplex_$cpure_entry() //  [R2]
         { []
         }
     {offset
       cgNBU: // global
           R3 = R2;
           R2 = R2;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$cpure_info" {
     Data.Complex.$fApplicativeComplex_$cpure_info:
         const Data.Complex.$fApplicativeComplex_$cpure_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.775636886 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$ctraverse_closure" {
     Data.Complex.$fTraversableComplex_$ctraverse_closure:
         const Data.Complex.$fTraversableComplex_$ctraverse_info;
 },
 Data.Complex.$fTraversableComplex_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cgNC8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNC9; else goto cgNCa;
       cgNC9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNCa: // global
           I64[Sp - 24] = block_cgNC5_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNCi; else goto cgNC6;
       ugNCi: // global
           call _cgNC5(R1) args: 0, res: 0, upd: 0;
       cgNC6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$ctraverse_info" {
     Data.Complex.$fTraversableComplex_$ctraverse_info:
         const Data.Complex.$fTraversableComplex_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNC5() //  [R1]
         { []
         }
     {offset
       cgNC5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgNCf; else goto cgNCe;
       cgNCf: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNCe: // global
           _sgMFS::P64 = P64[R1 + 7];
           _sgMFT::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           _sgMFP::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgMFP::P64;
           P64[Hp - 32] = _sgMFT::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgMFP::P64;
           P64[Hp] = _sgMFS::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Data.Complex.$W:+_closure+2;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNC5_info" {
     block_cgNC5_info:
         const _cgNC5;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.781910765 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cnull_closure" {
     Data.Complex.$fFoldableComplex_$cnull_closure:
         const Data.Complex.$fFoldableComplex_$cnull_info;
 },
 Data.Complex.$fFoldableComplex_$cnull_entry() //  [R2]
         { []
         }
     {offset
       cgNCG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgNCH; else goto cgNCI;
       cgNCH: // global
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNCI: // global
           I64[Sp - 8] = block_cgNCD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugNCM; else goto cgNCE;
       ugNCM: // global
           call _cgNCD() args: 0, res: 0, upd: 0;
       cgNCE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cnull_info" {
     Data.Complex.$fFoldableComplex_$cnull_info:
         const Data.Complex.$fFoldableComplex_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgNCD() //  []
         { []
         }
     {offset
       cgNCD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNCD_info" {
     block_cgNCD_info:
         const _cgNCD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.788298728 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldr_closure" {
     Data.Complex.$fFoldableComplex_$cfoldr_closure:
         const Data.Complex.$fFoldableComplex_$cfoldr_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgND6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNDa; else goto cgNDb;
       cgNDa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNDb: // global
           I64[Sp - 24] = block_cgND3_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNDf; else goto cgND4;
       ugNDf: // global
           call _cgND3(R1) args: 0, res: 0, upd: 0;
       cgND4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldr_info" {
     Data.Complex.$fFoldableComplex_$cfoldr_info:
         const Data.Complex.$fFoldableComplex_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgND3() //  [R1]
         { []
         }
     {offset
       cgND3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgNDe; else goto cgNDd;
       cgNDe: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNDd: // global
           _sgMG4::P64 = P64[R1 + 7];
           _sgMG5::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           _sgMG0::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sgMG0::P64;
           P64[Hp - 8] = _sgMG5::P64;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 32;
           R2 = _sgMG4::P64;
           R1 = _sgMG0::P64;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgND3_info" {
     block_cgND3_info:
         const _cgND3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.795677138 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldMap_closure" {
     Data.Complex.$fFoldableComplex_$cfoldMap_closure:
         const Data.Complex.$fFoldableComplex_$cfoldMap_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNDz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNDA; else goto cgNDB;
       cgNDA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNDB: // global
           I64[Sp - 24] = block_cgNDw_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNDJ; else goto cgNDx;
       ugNDJ: // global
           call _cgNDw(R1) args: 0, res: 0, upd: 0;
       cgNDx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldMap_info" {
     Data.Complex.$fFoldableComplex_$cfoldMap_info:
         const Data.Complex.$fFoldableComplex_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNDw() //  [R1]
         { []
         }
     {offset
       cgNDw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgNDG; else goto cgNDF;
       cgNDG: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNDF: // global
           _sgMGb::P64 = P64[R1 + 7];
           _sgMGc::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           _sgMG8::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgMG8::P64;
           P64[Hp - 32] = _sgMGc::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgMG8::P64;
           P64[Hp] = _sgMGb::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNDw_info" {
     block_cgNDw_info:
         const _cgNDw;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.802243251 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfold_closure" {
     Data.Complex.$fFoldableComplex_$cfold_closure:
         const Data.Complex.$fFoldableComplex_$cfold_info;
 },
 Data.Complex.$fFoldableComplex_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNE6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNE7; else goto cgNE8;
       cgNE7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNE8: // global
           I64[Sp - 16] = block_cgNE3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNEc; else goto cgNE4;
       ugNEc: // global
           call _cgNE3(R1) args: 0, res: 0, upd: 0;
       cgNE4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfold_info" {
     Data.Complex.$fFoldableComplex_$cfold_info:
         const Data.Complex.$fFoldableComplex_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNE3() //  [R1]
         { []
         }
     {offset
       cgNE3: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNE3_info" {
     block_cgNE3_info:
         const _cgNE3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.808015372 UTC

[section ""data" . Data.Complex.$fFoldableComplex2_closure" {
     Data.Complex.$fFoldableComplex2_closure:
         const Data.Complex.$fFoldableComplex2_info;
 },
 Data.Complex.$fFoldableComplex2_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNEx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNEy; else goto cgNEz;
       cgNEy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNEz: // global
           I64[Sp - 16] = block_cgNEu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNED; else goto cgNEv;
       ugNED: // global
           call _cgNEu(R1) args: 0, res: 0, upd: 0;
       cgNEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex2_info" {
     Data.Complex.$fFoldableComplex2_info:
         const Data.Complex.$fFoldableComplex2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNEu() //  [R1]
         { []
         }
     {offset
       cgNEu: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNEu_info" {
     block_cgNEu_info:
         const _cgNEu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.814577392 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cminimum_closure" {
     Data.Complex.$fFoldableComplex_$cminimum_closure:
         const Data.Complex.$fFoldableComplex_$cminimum_info;
 },
 Data.Complex.$fFoldableComplex_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNEY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgNEZ; else goto cgNF0;
       cgNEZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNF0: // global
           I64[Sp - 16] = block_cgNEV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNFg; else goto cgNEW;
       ugNFg: // global
           call _cgNEV(R1) args: 0, res: 0, upd: 0;
       cgNEW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cminimum_info" {
     Data.Complex.$fFoldableComplex_$cminimum_info:
         const Data.Complex.$fFoldableComplex_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNEV() //  [R1]
         { []
         }
     {offset
       cgNEV: // global
           I64[Sp - 8] = block_cgNF3_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pp_info;
           _sgMGs::P64 = P64[R1 + 7];
           P64[Sp - 24] = _sgMGs::P64;
           _sgMGt::P64 = P64[R1 + 15];
           P64[Sp - 16] = _sgMGt::P64;
           P64[Sp] = _sgMGt::P64;
           P64[Sp + 8] = _sgMGs::P64;
           Sp = Sp - 32;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNEV_info" {
     block_cgNEV_info:
         const _cgNEV;
         const 1;
         const 30;
 },
 _cgNF3() //  [R1]
         { []
         }
     {offset
       cgNF3: // global
           if (R1 & 7 == 1) goto cgNFa; else goto cgNFe;
       cgNFa: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgNFe: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNF3_info" {
     block_cgNF3_info:
         const _cgNF3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.822563595 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cmaximum_closure" {
     Data.Complex.$fFoldableComplex_$cmaximum_closure:
         const Data.Complex.$fFoldableComplex_$cmaximum_info;
 },
 Data.Complex.$fFoldableComplex_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNFF: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgNFG; else goto cgNFH;
       cgNFG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNFH: // global
           I64[Sp - 16] = block_cgNFC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNFX; else goto cgNFD;
       ugNFX: // global
           call _cgNFC(R1) args: 0, res: 0, upd: 0;
       cgNFD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cmaximum_info" {
     Data.Complex.$fFoldableComplex_$cmaximum_info:
         const Data.Complex.$fFoldableComplex_$cmaximum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNFC() //  [R1]
         { []
         }
     {offset
       cgNFC: // global
           I64[Sp - 8] = block_cgNFK_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pp_info;
           _sgMGy::P64 = P64[R1 + 7];
           P64[Sp - 24] = _sgMGy::P64;
           _sgMGz::P64 = P64[R1 + 15];
           P64[Sp - 16] = _sgMGz::P64;
           P64[Sp] = _sgMGz::P64;
           P64[Sp + 8] = _sgMGy::P64;
           Sp = Sp - 32;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNFC_info" {
     block_cgNFC_info:
         const _cgNFC;
         const 1;
         const 30;
 },
 _cgNFK() //  [R1]
         { []
         }
     {offset
       cgNFK: // global
           if (R1 & 7 == 1) goto cgNFR; else goto cgNFV;
       cgNFR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgNFV: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNFK_info" {
     block_cgNFK_info:
         const _cgNFK;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.830967638 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$celem_closure" {
     Data.Complex.$fFoldableComplex_$celem_closure:
         const Data.Complex.$fFoldableComplex_$celem_info;
 },
 f_sgMGD_entry() //  [R1]
         { []
         }
     {offset
       cgNGn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNGo; else goto cgNGp;
       cgNGo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNGp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sgMGD_info" {
     f_sgMGD_info:
         const f_sgMGD_entry;
         const 2;
         const 18;
 },
 sat_sgMGJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cgNGy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNGz; else goto cgNGA;
       cgNGz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNGA: // global
           I64[Sp - 16] = block_cgNGv_info;
           _sgMGD::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sgMGD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNGQ; else goto cgNGw;
       ugNGQ: // global
           call _cgNGv(R1) args: 0, res: 0, upd: 0;
       cgNGw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMGJ_info" {
     sat_sgMGJ_info:
         const sat_sgMGJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgNGv() //  [R1]
         { []
         }
     {offset
       cgNGv: // global
           I64[Sp - 8] = block_cgNGD_info;
           R2 = P64[R1 + 7];
           _sgMGH::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgMGH::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNGv_info" {
     block_cgNGv_info:
         const _cgNGv;
         const 1;
         const 30;
 },
 _cgNGD() //  [R1]
         { []
         }
     {offset
       cgNGD: // global
           if (R1 & 7 == 1) goto cgNGK; else goto cgNGO;
       cgNGK: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cgNGO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNGD_info" {
     block_cgNGD_info:
         const _cgNGD;
         const 2;
         const 30;
 },
 Data.Complex.$fFoldableComplex_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNGR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgNGV; else goto cgNGU;
       cgNGV: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNGU: // global
           I64[Hp - 40] = f_sgMGD_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sgMGJ_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$celem_info" {
     Data.Complex.$fFoldableComplex_$celem_info:
         const Data.Complex.$fFoldableComplex_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.842547134 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldr1_closure" {
     Data.Complex.$fFoldableComplex_$cfoldr1_closure:
         const Data.Complex.$fFoldableComplex_$cfoldr1_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNHz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNHA; else goto cgNHB;
       cgNHA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNHB: // global
           I64[Sp - 16] = block_cgNHw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNHF; else goto cgNHx;
       ugNHF: // global
           call _cgNHw(R1) args: 0, res: 0, upd: 0;
       cgNHx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldr1_info" {
     Data.Complex.$fFoldableComplex_$cfoldr1_info:
         const Data.Complex.$fFoldableComplex_$cfoldr1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNHw() //  [R1]
         { []
         }
     {offset
       cgNHw: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNHw_info" {
     block_cgNHw_info:
         const _cgNHw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.848732096 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldl'_closure" {
     Data.Complex.$fFoldableComplex_$cfoldl'_closure:
         const Data.Complex.$fFoldableComplex_$cfoldl'_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNHX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNI1; else goto cgNI2;
       cgNI1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNI2: // global
           I64[Sp - 24] = block_cgNHU_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNI6; else goto cgNHV;
       ugNI6: // global
           call _cgNHU(R1) args: 0, res: 0, upd: 0;
       cgNHV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldl'_info" {
     Data.Complex.$fFoldableComplex_$cfoldl'_info:
         const Data.Complex.$fFoldableComplex_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNHU() //  [R1]
         { []
         }
     {offset
       cgNHU: // global
           I64[Sp] = block_cgNI0_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           _sgMGU::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _sgMGU::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNHU_info" {
     block_cgNHU_info:
         const _cgNHU;
         const 2;
         const 30;
 },
 _cgNI0() //  [R1]
         { []
         }
     {offset
       cgNI0: // global
           R3 = P64[Sp + 16];
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNI0_info" {
     block_cgNI0_info:
         const _cgNI0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.855068968 UTC

[section ""data" . lvl_rgA6e_closure" {
     lvl_rgA6e_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.857524474 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$clength_closure" {
     Data.Complex.$fFoldableComplex_$clength_closure:
         const Data.Complex.$fFoldableComplex_$clength_info;
 },
 Data.Complex.$fFoldableComplex_$clength_entry() //  [R2]
         { []
         }
     {offset
       cgNIt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgNIu; else goto cgNIv;
       cgNIu: // global
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNIv: // global
           I64[Sp - 8] = block_cgNIq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugNIz; else goto cgNIr;
       ugNIz: // global
           call _cgNIq() args: 0, res: 0, upd: 0;
       cgNIr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$clength_info" {
     Data.Complex.$fFoldableComplex_$clength_info:
         const Data.Complex.$fFoldableComplex_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgNIq() //  []
         { []
         }
     {offset
       cgNIq: // global
           R1 = lvl_rgA6e_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNIq_info" {
     block_cgNIq_info:
         const _cgNIq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.863807304 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldl_closure" {
     Data.Complex.$fFoldableComplex_$cfoldl_closure:
         const Data.Complex.$fFoldableComplex_$cfoldl_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNIS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNIW; else goto cgNIX;
       cgNIW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNIX: // global
           I64[Sp - 24] = block_cgNIP_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNJ1; else goto cgNIQ;
       ugNJ1: // global
           call _cgNIP(R1) args: 0, res: 0, upd: 0;
       cgNIQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldl_info" {
     Data.Complex.$fFoldableComplex_$cfoldl_info:
         const Data.Complex.$fFoldableComplex_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNIP() //  [R1]
         { []
         }
     {offset
       cgNIP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgNJ0; else goto cgNIZ;
       cgNJ0: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNIZ: // global
           _sgMH4::P64 = P64[R1 + 7];
           _sgMH5::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           _sgMH0::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sgMH0::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sgMH4::P64;
           R3 = _sgMH5::P64;
           R2 = Hp - 32;
           R1 = _sgMH0::P64;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNIP_info" {
     block_cgNIP_info:
         const _cgNIP;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.8707707 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$cfoldr'_closure" {
     Data.Complex.$fFoldableComplex_$cfoldr'_closure:
         const Data.Complex.$fFoldableComplex_$cfoldr'_info;
 },
 Data.Complex.$fFoldableComplex_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNJl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNJp; else goto cgNJq;
       cgNJp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNJq: // global
           I64[Sp - 24] = block_cgNJi_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNJu; else goto cgNJj;
       ugNJu: // global
           call _cgNJi(R1) args: 0, res: 0, upd: 0;
       cgNJj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$cfoldr'_info" {
     Data.Complex.$fFoldableComplex_$cfoldr'_info:
         const Data.Complex.$fFoldableComplex_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNJi() //  [R1]
         { []
         }
     {offset
       cgNJi: // global
           I64[Sp] = block_cgNJo_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 15];
           _sgMHb::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _sgMHb::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNJi_info" {
     block_cgNJi_info:
         const _cgNJi;
         const 2;
         const 30;
 },
 _cgNJo() //  [R1]
         { []
         }
     {offset
       cgNJo: // global
           R3 = R1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNJo_info" {
     block_cgNJo_info:
         const _cgNJo;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.878333097 UTC

[section ""data" . Data.Complex.$fFoldableComplex1_closure" {
     Data.Complex.$fFoldableComplex1_closure:
         const Data.Complex.$fFoldableComplex1_info;
 },
 Data.Complex.$fFoldableComplex1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNJQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNJR; else goto cgNJS;
       cgNJR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNJS: // global
           I64[Sp - 16] = block_cgNJN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNJW; else goto cgNJO;
       ugNJW: // global
           call _cgNJN(R1) args: 0, res: 0, upd: 0;
       cgNJO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex1_info" {
     Data.Complex.$fFoldableComplex1_info:
         const Data.Complex.$fFoldableComplex1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNJN() //  [R1]
         { []
         }
     {offset
       cgNJN: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNJN_info" {
     block_cgNJN_info:
         const _cgNJN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.884495546 UTC

[section ""data" . Data.Complex.$fFoldableComplex_$ctoList_closure" {
     Data.Complex.$fFoldableComplex_$ctoList_closure:
         const Data.Complex.$fFoldableComplex_$ctoList_info;
 },
 Data.Complex.$fFoldableComplex_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cgNKh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgNKm; else goto cgNKn;
       cgNKm: // global
           R2 = R2;
           R1 = Data.Complex.$fFoldableComplex_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNKn: // global
           I64[Sp - 8] = block_cgNKe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugNKr; else goto cgNKf;
       ugNKr: // global
           call _cgNKe(R1) args: 0, res: 0, upd: 0;
       cgNKf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFoldableComplex_$ctoList_info" {
     Data.Complex.$fFoldableComplex_$ctoList_info:
         const Data.Complex.$fFoldableComplex_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgNKe() //  [R1]
         { []
         }
     {offset
       cgNKe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgNKq; else goto cgNKp;
       cgNKq: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNKp: // global
           _sgMHl::P64 = P64[R1 + 7];
           _sgMHm::P64 = P64[R1 + 15];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sgMHm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgMHl::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNKe_info" {
     block_cgNKe_info:
         const _cgNKe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.890243603 UTC

[section ""data" . Data.Complex.$fFoldableComplex_closure" {
     Data.Complex.$fFoldableComplex_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Complex.$fFoldableComplex_$cfold_closure+2;
         const Data.Complex.$fFoldableComplex_$cfoldMap_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldr_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldr'_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldl_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldl'_closure+3;
         const Data.Complex.$fFoldableComplex_$cfoldr1_closure+2;
         const Data.Complex.$fFoldableComplex_$cfoldr1_closure+2;
         const Data.Complex.$fFoldableComplex_$ctoList_closure+1;
         const Data.Complex.$fFoldableComplex_$cnull_closure+1;
         const Data.Complex.$fFoldableComplex_$clength_closure+1;
         const Data.Complex.$fFoldableComplex_$celem_closure+2;
         const Data.Complex.$fFoldableComplex_$cmaximum_closure+2;
         const Data.Complex.$fFoldableComplex_$cminimum_closure+2;
         const Data.Complex.$fFoldableComplex2_closure+2;
         const Data.Complex.$fFoldableComplex1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.894429723 UTC

[section ""data" . Data.Complex.$fFunctorComplex_$c<$_closure" {
     Data.Complex.$fFunctorComplex_$c<$_closure:
         const Data.Complex.$fFunctorComplex_$c<$_info;
 },
 Data.Complex.$fFunctorComplex_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNKQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNKR; else goto cgNKS;
       cgNKR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFunctorComplex_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNKS: // global
           I64[Sp - 16] = block_cgNKN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNKW; else goto cgNKO;
       ugNKW: // global
           call _cgNKN() args: 0, res: 0, upd: 0;
       cgNKO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFunctorComplex_$c<$_info" {
     Data.Complex.$fFunctorComplex_$c<$_info:
         const Data.Complex.$fFunctorComplex_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNKN() //  []
         { []
         }
     {offset
       cgNKN: // global
           _sgMHo::P64 = P64[Sp + 8];
           R3 = _sgMHo::P64;
           R2 = _sgMHo::P64;
           Sp = Sp + 16;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNKN_info" {
     block_cgNKN_info:
         const _cgNKN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.902128265 UTC

[section ""data" . Data.Complex.$fFunctorComplex_$cfmap_closure" {
     Data.Complex.$fFunctorComplex_$cfmap_closure:
         const Data.Complex.$fFunctorComplex_$cfmap_info;
 },
 Data.Complex.$fFunctorComplex_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNLe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNLm; else goto cgNLn;
       cgNLm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFunctorComplex_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNLn: // global
           I64[Sp - 16] = block_cgNLb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNLt; else goto cgNLc;
       ugNLt: // global
           call _cgNLb(R1) args: 0, res: 0, upd: 0;
       cgNLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFunctorComplex_$cfmap_info" {
     Data.Complex.$fFunctorComplex_$cfmap_info:
         const Data.Complex.$fFunctorComplex_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNLb() //  [R1]
         { []
         }
     {offset
       cgNLb: // global
           I64[Sp - 8] = block_cgNLh_info;
           R2 = P64[R1 + 7];
           _sgMHx::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgMHx::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNLb_info" {
     block_cgNLb_info:
         const _cgNLb;
         const 1;
         const 30;
 },
 _cgNLh() //  [R1]
         { []
         }
     {offset
       cgNLh: // global
           _sgMHx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgNLj_info;
           R2 = _sgMHx::P64;
           _sgMHy::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sgMHy::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNLh_info" {
     block_cgNLh_info:
         const _cgNLh;
         const 2;
         const 30;
 },
 _cgNLj() //  [R1]
         { []
         }
     {offset
       cgNLj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNLs; else goto cgNLr;
       cgNLs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNLr: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNLj_info" {
     block_cgNLj_info:
         const _cgNLj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.911058487 UTC

[section ""data" . Data.Complex.$fFunctorComplex_closure" {
     Data.Complex.$fFunctorComplex_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Complex.$fFunctorComplex_$cfmap_closure+2;
         const Data.Complex.$fFunctorComplex_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.913894054 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$csequenceA_closure" {
     Data.Complex.$fTraversableComplex_$csequenceA_closure:
         const Data.Complex.$fTraversableComplex_$csequenceA_info;
 },
 Data.Complex.$fTraversableComplex_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNLX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNLY; else goto cgNLZ;
       cgNLY: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNLZ: // global
           I64[Sp - 16] = block_cgNLU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNM3; else goto cgNLV;
       ugNM3: // global
           call _cgNLU(R1) args: 0, res: 0, upd: 0;
       cgNLV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$csequenceA_info" {
     Data.Complex.$fTraversableComplex_$csequenceA_info:
         const Data.Complex.$fTraversableComplex_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNLU() //  [R1]
         { []
         }
     {offset
       cgNLU: // global
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = Data.Complex.$W:+_closure+2;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNLU_info" {
     block_cgNLU_info:
         const _cgNLU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.921384842 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$cmapM_closure" {
     Data.Complex.$fTraversableComplex_$cmapM_closure:
         const Data.Complex.$fTraversableComplex_$cmapM_info;
 },
 Data.Complex.$fTraversableComplex_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNMp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNMv; else goto cgNMw;
       cgNMv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNMw: // global
           I64[Sp - 24] = block_cgNMm_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNME; else goto cgNMn;
       ugNME: // global
           call _cgNMm(R1) args: 0, res: 0, upd: 0;
       cgNMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$cmapM_info" {
     Data.Complex.$fTraversableComplex_$cmapM_info:
         const Data.Complex.$fTraversableComplex_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNMm() //  [R1]
         { []
         }
     {offset
       cgNMm: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgNMz; else goto cgNMy;
       cgNMz: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNMy: // global
           _sgMHJ::P64 = P64[R1 + 7];
           _sgMHK::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           _sgMHG::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgMHG::P64;
           P64[Hp - 32] = _sgMHK::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgMHG::P64;
           P64[Hp] = _sgMHJ::P64;
           I64[Sp] = block_cgNMu_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNMm_info" {
     block_cgNMm_info:
         const _cgNMm;
         const 2;
         const 30;
 },
 _cgNMu() //  [R1]
         { []
         }
     {offset
       cgNMu: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Data.Complex.$W:+_closure+2;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNMu_info" {
     block_cgNMu_info:
         const _cgNMu;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.929165492 UTC

[section ""data" . Data.Complex.$fTraversableComplex_$csequence_closure" {
     Data.Complex.$fTraversableComplex_$csequence_closure:
         const Data.Complex.$fTraversableComplex_$csequence_info;
 },
 Data.Complex.$fTraversableComplex_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNN6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNNa; else goto cgNNb;
       cgNNa: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fTraversableComplex_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNNb: // global
           I64[Sp - 16] = block_cgNN3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNNh; else goto cgNN4;
       ugNNh: // global
           call _cgNN3(R1) args: 0, res: 0, upd: 0;
       cgNN4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fTraversableComplex_$csequence_info" {
     Data.Complex.$fTraversableComplex_$csequence_info:
         const Data.Complex.$fTraversableComplex_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNN3() //  [R1]
         { []
         }
     {offset
       cgNN3: // global
           I64[Sp - 8] = block_cgNN9_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNN3_info" {
     block_cgNN3_info:
         const _cgNN3;
         const 1;
         const 30;
 },
 _cgNN9() //  [R1]
         { []
         }
     {offset
       cgNN9: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Data.Complex.$W:+_closure+2;
           _sgMHS::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sgMHS::P64;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNN9_info" {
     block_cgNN9_info:
         const _cgNN9;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.935583053 UTC

[section ""data" . Data.Complex.$fTraversableComplex_closure" {
     Data.Complex.$fTraversableComplex_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Complex.$fFunctorComplex_closure+1;
         const Data.Complex.$fFoldableComplex_closure+1;
         const Data.Complex.$fTraversableComplex_$ctraverse_closure+3;
         const Data.Complex.$fTraversableComplex_$csequenceA_closure+2;
         const Data.Complex.$fTraversableComplex_$cmapM_closure+3;
         const Data.Complex.$fTraversableComplex_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.938620496 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$c*>_closure" {
     Data.Complex.$fApplicativeComplex_$c*>_closure:
         const Data.Complex.$fApplicativeComplex_$c*>_info;
 },
 Data.Complex.$fApplicativeComplex_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNNJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNNK; else goto cgNNL;
       cgNNK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNNL: // global
           I64[Sp - 16] = block_cgNNG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNNP; else goto cgNNH;
       ugNNP: // global
           call _cgNNG() args: 0, res: 0, upd: 0;
       cgNNH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$c*>_info" {
     Data.Complex.$fApplicativeComplex_$c*>_info:
         const Data.Complex.$fApplicativeComplex_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNNG() //  []
         { []
         }
     {offset
       cgNNG: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNNG_info" {
     block_cgNNG_info:
         const _cgNNG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.944693859 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_$c<*_closure" {
     Data.Complex.$fApplicativeComplex_$c<*_closure:
         const Data.Complex.$fApplicativeComplex_$c<*_info;
 },
 Data.Complex.$fApplicativeComplex_$c<*_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNO9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNOd; else goto cgNOe;
       cgNOd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fApplicativeComplex_$c<*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNOe: // global
           I64[Sp - 16] = block_cgNO6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugNOm; else goto cgNO7;
       ugNOm: // global
           call _cgNO6(R1) args: 0, res: 0, upd: 0;
       cgNO7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fApplicativeComplex_$c<*_info" {
     Data.Complex.$fApplicativeComplex_$c<*_info:
         const Data.Complex.$fApplicativeComplex_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgNO6() //  [R1]
         { []
         }
     {offset
       cgNO6: // global
           I64[Sp] = block_cgNOc_info;
           _sgMI1::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sgMI1::P64;
           if (R1 & 7 != 0) goto ugNOl; else goto cgNOg;
       ugNOl: // global
           call _cgNOc() args: 0, res: 0, upd: 0;
       cgNOg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNO6_info" {
     block_cgNO6_info:
         const _cgNO6;
         const 1;
         const 30;
 },
 _cgNOc() //  []
         { []
         }
     {offset
       cgNOc: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNOc_info" {
     block_cgNOc_info:
         const _cgNOc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.952138079 UTC

[section ""data" . Data.Complex.$fApplicativeComplex_closure" {
     Data.Complex.$fApplicativeComplex_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Complex.$fFunctorComplex_closure+1;
         const Data.Complex.$fApplicativeComplex_$cpure_closure+1;
         const Data.Complex.$fApplicativeComplex_$c<*>_closure+2;
         const Data.Complex.$fApplicativeComplex_$cliftA2_closure+3;
         const Data.Complex.$fApplicativeComplex_$c*>_closure+2;
         const Data.Complex.$fApplicativeComplex_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.95481908 UTC

[section ""data" . Data.Complex.$fGeneric1Complex_$cto1_closure" {
     Data.Complex.$fGeneric1Complex_$cto1_closure:
         const Data.Complex.$fGeneric1Complex_$cto1_info;
 },
 Data.Complex.$fGeneric1Complex_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cgNOL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgNOM; else goto cgNON;
       cgNOM: // global
           R2 = R2;
           R1 = Data.Complex.$fGeneric1Complex_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNON: // global
           I64[Sp - 8] = block_cgNOJ_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGeneric1Complex_$cto1_info" {
     Data.Complex.$fGeneric1Complex_$cto1_info:
         const Data.Complex.$fGeneric1Complex_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgNOJ() //  [R1]
         { []
         }
     {offset
       cgNOJ: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNOJ_info" {
     block_cgNOJ_info:
         const _cgNOJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.961171162 UTC

[section ""data" . Data.Complex.$fGeneric1Complex1_closure" {
     Data.Complex.$fGeneric1Complex1_closure:
         const Data.Complex.$fGeneric1Complex1_info;
 },
 Data.Complex.$fGeneric1Complex1_entry() //  [R2]
         { []
         }
     {offset
       cgNP7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgNPb; else goto cgNPc;
       cgNPb: // global
           R2 = R2;
           R1 = Data.Complex.$fGeneric1Complex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNPc: // global
           I64[Sp - 8] = block_cgNP4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugNPg; else goto cgNP5;
       ugNPg: // global
           call _cgNP4(R1) args: 0, res: 0, upd: 0;
       cgNP5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGeneric1Complex1_info" {
     Data.Complex.$fGeneric1Complex1_info:
         const Data.Complex.$fGeneric1Complex1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgNP4() //  [R1]
         { []
         }
     {offset
       cgNP4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNPf; else goto cgNPe;
       cgNPf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNPe: // global
           _sgMId::P64 = P64[R1 + 7];
           _sgMIe::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sgMId::P64;
           P64[Hp] = _sgMIe::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNP4_info" {
     block_cgNP4_info:
         const _cgNP4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.968583799 UTC

[section ""data" . Data.Complex.$fGeneric1Complex_closure" {
     Data.Complex.$fGeneric1Complex_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Complex.$fGeneric1Complex1_closure+1;
         const Data.Complex.$fGeneric1Complex_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.9718285 UTC

[section ""data" . Data.Complex.$fGenericComplex_$cto_closure" {
     Data.Complex.$fGenericComplex_$cto_closure:
         const Data.Complex.$fGenericComplex_$cto_info;
 },
 Data.Complex.$fGenericComplex_$cto_entry() //  [R2]
         { []
         }
     {offset
       cgNPA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgNPB; else goto cgNPC;
       cgNPB: // global
           R2 = R2;
           R1 = Data.Complex.$fGenericComplex_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNPC: // global
           I64[Sp - 8] = block_cgNPy_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGenericComplex_$cto_info" {
     Data.Complex.$fGenericComplex_$cto_info:
         const Data.Complex.$fGenericComplex_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgNPy() //  [R1]
         { []
         }
     {offset
       cgNPy: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Complex.$W:+_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNPy_info" {
     block_cgNPy_info:
         const _cgNPy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.977905558 UTC

[section ""data" . Data.Complex.$fGenericComplex1_closure" {
     Data.Complex.$fGenericComplex1_closure:
         const Data.Complex.$fGenericComplex1_info;
 },
 Data.Complex.$fGenericComplex1_entry() //  [R2]
         { []
         }
     {offset
       cgNPW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgNQ0; else goto cgNQ1;
       cgNQ0: // global
           R2 = R2;
           R1 = Data.Complex.$fGenericComplex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNQ1: // global
           I64[Sp - 8] = block_cgNPT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugNQ5; else goto cgNPU;
       ugNQ5: // global
           call _cgNPT(R1) args: 0, res: 0, upd: 0;
       cgNPU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fGenericComplex1_info" {
     Data.Complex.$fGenericComplex1_info:
         const Data.Complex.$fGenericComplex1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgNPT() //  [R1]
         { []
         }
     {offset
       cgNPT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNQ4; else goto cgNQ3;
       cgNQ4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNQ3: // global
           _sgMIl::P64 = P64[R1 + 7];
           _sgMIm::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sgMIl::P64;
           P64[Hp] = _sgMIm::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNPT_info" {
     block_cgNPT_info:
         const _cgNPT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.982982163 UTC

[section ""data" . Data.Complex.$fGenericComplex_closure" {
     Data.Complex.$fGenericComplex_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Complex.$fGenericComplex1_closure+1;
         const Data.Complex.$fGenericComplex_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.986836412 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgunfold_closure" {
     Data.Complex.$fDataComplex_$cgunfold_closure:
         const Data.Complex.$fDataComplex_$cgunfold_info;
 },
 sat_sgMIr_entry() //  [R1]
         { []
         }
     {offset
       cgNQv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNQw; else goto cgNQx;
       cgNQw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNQx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Complex.$W:+_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMIr_info" {
     sat_sgMIr_info:
         const sat_sgMIr_entry;
         const 1;
         const 16;
 },
 sat_sgMIs_entry() //  [R1]
         { []
         }
     {offset
       cgNQy: // global
           _sgMIs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgNQz; else goto cgNQA;
       cgNQA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNQC; else goto cgNQB;
       cgNQC: // global
           HpAlloc = 24;
           goto cgNQz;
       cgNQz: // global
           R1 = _sgMIs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNQB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMIs::P64;
           _sgMIn::P64 = P64[_sgMIs::P64 + 16];
           _sgMIo::P64 = P64[_sgMIs::P64 + 24];
           _sgMIp::P64 = P64[_sgMIs::P64 + 32];
           I64[Hp - 16] = sat_sgMIr_info;
           P64[Hp] = _sgMIp::P64;
           R3 = Hp - 16;
           R2 = _sgMIn::P64;
           R1 = _sgMIo::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMIs_info" {
     sat_sgMIs_info:
         const sat_sgMIs_entry;
         const 3;
         const 15;
 },
 Data.Complex.$fDataComplex_$cgunfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgNQD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgNQH; else goto cgNQG;
       cgNQH: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgunfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNQG: // global
           I64[Hp - 32] = sat_sgMIs_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _sgMIo::P64 = R3;
           R3 = Hp - 32;
           R2 = R2;
           R1 = _sgMIo::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgunfold_info" {
     Data.Complex.$fDataComplex_$cgunfold_info:
         const Data.Complex.$fDataComplex_$cgunfold_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:44.995956339 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgfoldl_closure" {
     Data.Complex.$fDataComplex_$cgfoldl_closure:
         const Data.Complex.$fDataComplex_$cgfoldl_info;
 },
 sat_sgMIA_entry() //  [R1]
         { []
         }
     {offset
       cgNRf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNRg; else goto cgNRh;
       cgNRg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNRh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Complex.$W:+_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMIA_info" {
     sat_sgMIA_info:
         const sat_sgMIA_entry;
         const 1;
         const 16;
 },
 sat_sgMIB_entry() //  [R1]
         { []
         }
     {offset
       cgNRi: // global
           _sgMIB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgNRj; else goto cgNRk;
       cgNRk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNRm; else goto cgNRl;
       cgNRm: // global
           HpAlloc = 24;
           goto cgNRj;
       cgNRj: // global
           R1 = _sgMIB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNRl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMIB::P64;
           _sgMIt::P64 = P64[_sgMIB::P64 + 16];
           _sgMIu::P64 = P64[_sgMIB::P64 + 24];
           _sgMIv::P64 = P64[_sgMIB::P64 + 32];
           _sgMIy::P64 = P64[_sgMIB::P64 + 40];
           I64[Hp - 16] = sat_sgMIA_info;
           P64[Hp] = _sgMIv::P64;
           R4 = _sgMIy::P64;
           R3 = Hp - 16;
           R2 = _sgMIt::P64;
           R1 = _sgMIu::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMIB_info" {
     sat_sgMIB_info:
         const sat_sgMIB_entry;
         const 4;
         const 15;
 },
 Data.Complex.$fDataComplex_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgNRn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNRo; else goto cgNRp;
       cgNRo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNRp: // global
           I64[Sp - 32] = block_cgNR2_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugNRt; else goto cgNR3;
       ugNRt: // global
           call _cgNR2(R1) args: 0, res: 0, upd: 0;
       cgNR3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgfoldl_info" {
     Data.Complex.$fDataComplex_$cgfoldl_info:
         const Data.Complex.$fDataComplex_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgNR2() //  [R1]
         { []
         }
     {offset
       cgNR2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgNRs; else goto cgNRr;
       cgNRs: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNRr: // global
           _sgMIy::P64 = P64[R1 + 7];
           _sgMIz::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_sgMIB_info;
           _sgMIt::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sgMIt::P64;
           _sgMIu::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgMIu::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sgMIy::P64;
           R4 = _sgMIz::P64;
           R3 = Hp - 40;
           R2 = _sgMIt::P64;
           R1 = _sgMIu::P64;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNR2_info" {
     block_cgNR2_info:
         const _cgNR2;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.004546113 UTC

[section ""data" . Data.Complex.$fReadComplex5_closure" {
     Data.Complex.$fReadComplex5_closure:
         const GHC.Types.I#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.006403942 UTC

[section ""cstring" . Data.Complex.$fReadComplex4_bytes" {
     Data.Complex.$fReadComplex4_bytes:
         I8[] [58,43]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.00870398 UTC

[section ""data" . Data.Complex.$fReadComplex3_closure" {
     Data.Complex.$fReadComplex3_closure:
         const Data.Complex.$fReadComplex3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fReadComplex3_entry() //  [R1]
         { []
         }
     {offset
       cgNRZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNS0; else goto cgNS1;
       cgNS0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNS1: // global
           (_cgNRW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgNRW::I64 == 0) goto cgNRY; else goto cgNRX;
       cgNRY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgNRX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgNRW::I64;
           R2 = Data.Complex.$fReadComplex4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex3_info" {
     Data.Complex.$fReadComplex3_info:
         const Data.Complex.$fReadComplex3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.01227233 UTC

[section ""data" . Data.Complex.$fReadComplex2_closure" {
     Data.Complex.$fReadComplex2_closure:
         const Text.Read.Lex.Symbol_con_info;
         const Data.Complex.$fReadComplex3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.018967745 UTC

[section ""data" . Data.Complex.$fReadComplex1_closure" {
     Data.Complex.$fReadComplex1_closure:
         const Data.Complex.$fReadComplex1_info;
         const 0;
 },
 ds1_sgMIF_entry() //  [R1]
         { []
         }
     {offset
       cgNSj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgNSk; else goto cgNSl;
       cgNSk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNSl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fReadComplex5_closure+1;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sgMIF_info" {
     ds1_sgMIF_info:
         const ds1_sgMIF_entry;
         const 1;
         const 16;
 },
 sat_sgMIO_entry() //  [R1]
         { []
         }
     {offset
       cgNST: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNSU; else goto cgNSV;
       cgNSU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNSV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$W:+_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMIO_info" {
     sat_sgMIO_info:
         const sat_sgMIO_entry;
         const 2;
         const 18;
 },
 sat_sgMIP_entry() //  [R1, R2]
         { []
         }
     {offset
       cgNSW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNT0; else goto cgNSZ;
       cgNT0: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNSZ: // global
           _sgMIH::P64 = P64[R1 + 7];
           _sgMIL::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sgMIO_info;
           P64[Hp - 8] = _sgMIL::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sgMIH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMIP_info" {
     sat_sgMIP_info:
         const sat_sgMIP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgMIQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cgNT1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNT5; else goto cgNT4;
       cgNT5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNT4: // global
           _sgMIF::P64 = P64[R1 + 7];
           _sgMIH::P64 = P64[R1 + 15];
           _sgMIL::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_sgMIP_info;
           P64[Hp - 8] = _sgMIH::P64;
           P64[Hp] = _sgMIL::P64;
           R2 = Hp - 15;
           R1 = _sgMIF::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMIQ_info" {
     sat_sgMIQ_info:
         const sat_sgMIQ_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sgMIT_entry() //  [R1, R2]
         { []
         }
     {offset
       cgNT9: // global
           _sgMIL::P64 = R2;
           _sgMIT::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cgNTa; else goto cgNTb;
       cgNTb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNTd; else goto cgNTc;
       cgNTd: // global
           HpAlloc = 32;
           goto cgNTa;
       cgNTa: // global
           R2 = _sgMIL::P64;
           R1 = _sgMIT::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNTc: // global
           _sgMIF::P64 = P64[_sgMIT::P64 + 7];
           _sgMIH::P64 = P64[_sgMIT::P64 + 15];
           I64[Hp - 24] = sat_sgMIQ_info;
           P64[Hp - 16] = _sgMIF::P64;
           P64[Hp - 8] = _sgMIH::P64;
           P64[Hp] = _sgMIL::P64;
           I64[Sp - 8] = block_cgNT6_info;
           R3 = Hp - 23;
           R2 = Data.Complex.$fReadComplex2_closure+5;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMIT_info" {
     sat_sgMIT_info:
         const sat_sgMIT_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SgNTw_srt;
 },
 _cgNT6() //  [R1]
         { []
         }
     {offset
       cgNT6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgNTg; else goto cgNTf;
       cgNTg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNTf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNT6_info" {
     block_cgNT6_info:
         const _cgNT6;
         const 0;
         const 30;
 },
 sat_sgMIU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgNTh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNTi; else goto cgNTj;
       cgNTi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNTj: // global
           I64[Sp - 24] = block_cgNSr_info;
           _sgMIF::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sgMIF::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNTq; else goto cgNSs;
       ugNTq: // global
           call _cgNSr(R1) args: 0, res: 0, upd: 0;
       cgNSs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMIU_info" {
     sat_sgMIU_info:
         const sat_sgMIU_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const SgNTw_srt;
 },
 _cgNSr() //  [R1]
         { []
         }
     {offset
       cgNSr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNTm; else goto cgNTl;
       cgNTm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgNTl: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 6)) goto cgNTo; else goto cgNTp;
       cgNTo: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgNTp: // global
           I64[Hp - 16] = sat_sgMIT_info;
           _sgMIF::P64 = P64[Sp + 8];
           P64[Hp - 8] = _sgMIF::P64;
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _sgMIF::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNSr_info" {
     block_cgNSr_info:
         const _cgNSr;
         const 2;
         const 12884901918;
         const SgNTw_srt;
 },
 Data.Complex.$fReadComplex1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNTr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgNTv; else goto cgNTu;
       cgNTv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNTu: // global
           I64[Hp - 32] = ds1_sgMIF_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sgMIU_info;
           P64[Hp] = Hp - 32;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex1_info" {
     Data.Complex.$fReadComplex1_info:
         const Data.Complex.$fReadComplex1_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SgNTw_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.037781966 UTC

[section ""data" . Data.Complex.$fReadComplex_$creadsPrec_closure" {
     Data.Complex.$fReadComplex_$creadsPrec_closure:
         const Data.Complex.$fReadComplex_$creadsPrec_info;
         const 0;
 },
 sat_sgMIX_entry() //  [R1]
         { []
         }
     {offset
       cgNUu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNUv; else goto cgNUw;
       cgNUv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNUw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMIX_info" {
     sat_sgMIX_info:
         const sat_sgMIX_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+24;
 },
 Data.Complex.$fReadComplex_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cgNUx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNUB; else goto cgNUA;
       cgNUB: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNUA: // global
           I64[Hp - 24] = sat_sgMIX_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_$creadsPrec_info" {
     Data.Complex.$fReadComplex_$creadsPrec_info:
         const Data.Complex.$fReadComplex_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.043618958 UTC

[section ""data" . Data.Complex.$fReadComplex_$creadListPrec_closure" {
     Data.Complex.$fReadComplex_$creadListPrec_closure:
         const Data.Complex.$fReadComplex_$creadListPrec_info;
         const 0;
 },
 sat_sgMIZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgNUX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMIZ_info" {
     sat_sgMIZ_info:
         const sat_sgMIZ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgNTw_srt+24;
 },
 Data.Complex.$fReadComplex_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cgNV0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgNV4; else goto cgNV3;
       cgNV4: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNV3: // global
           I64[Hp - 8] = sat_sgMIZ_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_$creadListPrec_info" {
     Data.Complex.$fReadComplex_$creadListPrec_info:
         const Data.Complex.$fReadComplex_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const SgNTw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.052134514 UTC

[section ""data" . Data.Complex.$fReadComplex_$creadList_closure" {
     Data.Complex.$fReadComplex_$creadList_closure:
         const Data.Complex.$fReadComplex_$creadList_info;
         const 0;
 },
 sat_sgMJ1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgNVq: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJ1_info" {
     sat_sgMJ1_info:
         const sat_sgMJ1_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgNTw_srt+24;
 },
 sat_sgMJ2_entry() //  [R1]
         { []
         }
     {offset
       cgNVt: // global
           _sgMJ2::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgNVu; else goto cgNVv;
       cgNVv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgNVx; else goto cgNVw;
       cgNVx: // global
           HpAlloc = 16;
           goto cgNVu;
       cgNVu: // global
           R1 = _sgMJ2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNVw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMJ2::P64;
           _sgMJ0::P64 = P64[_sgMJ2::P64 + 16];
           I64[Hp - 8] = sat_sgMJ1_info;
           P64[Hp] = _sgMJ0::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJ2_info" {
     sat_sgMJ2_info:
         const sat_sgMJ2_entry;
         const 1;
         const 21474836496;
         const SgNTw_srt+24;
 },
 Data.Complex.$fReadComplex_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cgNVy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNVC; else goto cgNVB;
       cgNVC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNVB: // global
           I64[Hp - 16] = sat_sgMJ2_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_$creadList_info" {
     Data.Complex.$fReadComplex_$creadList_info:
         const Data.Complex.$fReadComplex_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const SgNTw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.060794712 UTC

[section ""data" . Data.Complex.$fReadComplex_closure" {
     Data.Complex.$fReadComplex_closure:
         const Data.Complex.$fReadComplex_info;
         const 0;
 },
 sat_sgMJ7_entry() //  [R1]
         { []
         }
     {offset
       cgNW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNW5; else goto cgNW6;
       cgNW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNW6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fReadComplex_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJ7_info" {
     sat_sgMJ7_info:
         const sat_sgMJ7_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+48;
 },
 sat_sgMJ6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgNWc: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fReadComplex1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJ6_info" {
     sat_sgMJ6_info:
         const sat_sgMJ6_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgNTw_srt+24;
 },
 sat_sgMJ5_entry() //  [R1]
         { []
         }
     {offset
       cgNWj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgNWk; else goto cgNWl;
       cgNWk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNWl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fReadComplex_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJ5_info" {
     sat_sgMJ5_info:
         const sat_sgMJ5_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+56;
 },
 sat_sgMJ4_entry() //  [R1, R2]
         { []
         }
     {offset
       cgNWr: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fReadComplex_$creadsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJ4_info" {
     sat_sgMJ4_info:
         const sat_sgMJ4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+32;
 },
 Data.Complex.$fReadComplex_entry() //  [R2]
         { []
         }
     {offset
       cgNWv: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cgNWz; else goto cgNWy;
       cgNWz: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Complex.$fReadComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNWy: // global
           I64[Hp - 112] = sat_sgMJ7_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgMJ6_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgMJ5_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sgMJ4_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fReadComplex_info" {
     Data.Complex.$fReadComplex_info:
         const Data.Complex.$fReadComplex_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SgNTw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.071411234 UTC

[section ""cstring" . Data.Complex.$fShowComplex2_bytes" {
     Data.Complex.$fShowComplex2_bytes:
         I8[] [32,58,43,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.078074781 UTC

[section ""data" . Data.Complex.$w$cshowsPrec_closure" {
     Data.Complex.$w$cshowsPrec_closure:
         const Data.Complex.$w$cshowsPrec_info;
 },
 Data.Complex.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cgNX6: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Complex.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 f_sgMJc_entry() //  [R1]
         { []
         }
     {offset
       cgNXe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgNXf; else goto cgNXg;
       cgNXf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNXg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sgMJc_info" {
     f_sgMJc_info:
         const f_sgMJc_entry;
         const 2;
         const 18;
 },
 g_sgMJd_entry() //  [R1]
         { []
         }
     {offset
       cgNXl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgNXm; else goto cgNXn;
       cgNXm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNXn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sgMJd_info" {
     g_sgMJd_info:
         const g_sgMJd_entry;
         const 2;
         const 18;
 },
 sat_sgMJh_entry() //  [R1]
         { []
         }
     {offset
       cgNXB: // global
           _sgMJh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgNXC; else goto cgNXD;
       cgNXD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNXF; else goto cgNXE;
       cgNXF: // global
           HpAlloc = 32;
           goto cgNXC;
       cgNXC: // global
           R1 = _sgMJh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNXE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMJh::P64;
           _sgMJd::P64 = P64[_sgMJh::P64 + 16];
           _sgMJf::P64 = P64[_sgMJh::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgMJd::P64;
           P64[Hp] = _sgMJf::P64;
           R3 = Hp - 24;
           R2 = Data.Complex.$fShowComplex2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJh_info" {
     sat_sgMJh_info:
         const sat_sgMJh_entry;
         const 2;
         const 18;
 },
 sat_sgMJi_entry() //  [R1, R2]
         { []
         }
     {offset
       cgNXG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNXK; else goto cgNXJ;
       cgNXK: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNXJ: // global
           _sgMJc::P64 = P64[R1 + 7];
           _sgMJd::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sgMJh_info;
           P64[Hp - 8] = _sgMJd::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sgMJc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJi_info" {
     sat_sgMJi_info:
         const sat_sgMJi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgMJl_entry() //  [R1]
         { []
         }
     {offset
       cgNY4: // global
           _sgMJl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgNY5; else goto cgNY6;
       cgNY6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgNY8; else goto cgNY7;
       cgNY8: // global
           HpAlloc = 24;
           goto cgNY5;
       cgNY5: // global
           R1 = _sgMJl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNY7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMJl::P64;
           _sgMJd::P64 = P64[_sgMJl::P64 + 16];
           _sgMJj::P64 = P64[_sgMJl::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sgMJj::P64;
           R2 = Hp - 14;
           R1 = _sgMJd::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJl_info" {
     sat_sgMJl_info:
         const sat_sgMJl_entry;
         const 2;
         const 18;
 },
 sat_sgMJm_entry() //  [R1]
         { []
         }
     {offset
       cgNY9: // global
           _sgMJm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgNYa; else goto cgNYb;
       cgNYb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNYd; else goto cgNYc;
       cgNYd: // global
           HpAlloc = 32;
           goto cgNYa;
       cgNYa: // global
           R1 = _sgMJm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNYc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMJm::P64;
           _sgMJd::P64 = P64[_sgMJm::P64 + 16];
           _sgMJj::P64 = P64[_sgMJm::P64 + 24];
           I64[Hp - 24] = sat_sgMJl_info;
           P64[Hp - 8] = _sgMJd::P64;
           P64[Hp] = _sgMJj::P64;
           R3 = Hp - 24;
           R2 = Data.Complex.$fShowComplex2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJm_info" {
     sat_sgMJm_info:
         const sat_sgMJm_entry;
         const 2;
         const 18;
 },
 sat_sgMJn_entry() //  [R1]
         { []
         }
     {offset
       cgNYe: // global
           _sgMJn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgNYf; else goto cgNYg;
       cgNYg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgNYi; else goto cgNYh;
       cgNYi: // global
           HpAlloc = 32;
           goto cgNYf;
       cgNYf: // global
           R1 = _sgMJn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgNYh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMJn::P64;
           _sgMJc::P64 = P64[_sgMJn::P64 + 16];
           _sgMJd::P64 = P64[_sgMJn::P64 + 24];
           _sgMJj::P64 = P64[_sgMJn::P64 + 32];
           I64[Hp - 24] = sat_sgMJm_info;
           P64[Hp - 8] = _sgMJd::P64;
           P64[Hp] = _sgMJj::P64;
           R2 = Hp - 24;
           R1 = _sgMJc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJn_info" {
     sat_sgMJn_info:
         const sat_sgMJn_entry;
         const 3;
         const 15;
 },
 sat_sgMJo_entry() //  [R1, R2]
         { []
         }
     {offset
       cgNYk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgNYo; else goto cgNYn;
       cgNYo: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgNYn: // global
           _sgMJc::P64 = P64[R1 + 7];
           _sgMJd::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sgMJn_info;
           P64[Hp - 40] = _sgMJc::P64;
           P64[Hp - 32] = _sgMJd::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJo_info" {
     sat_sgMJo_info:
         const sat_sgMJo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Complex.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgNYs: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgNYw; else goto cgNYv;
       cgNYw: // global
           HpAlloc = 88;
           R1 = Data.Complex.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cgNYv: // global
           I64[Hp - 80] = f_sgMJc_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = g_sgMJd_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cgNXa::P64 = Hp - 80;
           _cgNXh::P64 = Hp - 48;
           if (%MO_S_Lt_W64(R3, 7)) goto cgNYq; else goto cgNYr;
       cgNYq: // global
           I64[Hp - 16] = sat_sgMJi_info;
           P64[Hp - 8] = _cgNXa::P64;
           P64[Hp] = _cgNXh::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgNYr: // global
           I64[Hp - 16] = sat_sgMJo_info;
           P64[Hp - 8] = _cgNXa::P64;
           P64[Hp] = _cgNXh::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cshowsPrec_info" {
     Data.Complex.$w$cshowsPrec_info:
         const Data.Complex.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 132;
         const Data.Complex.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.098509999 UTC

[section ""data" . Data.Complex.$fShowComplex_$cshowsPrec_closure" {
     Data.Complex.$fShowComplex_$cshowsPrec_closure:
         const Data.Complex.$fShowComplex_$cshowsPrec_info;
 },
 Data.Complex.$fShowComplex_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgNZH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgNZL; else goto cgNZM;
       cgNZL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgNZM: // global
           I64[Sp - 24] = block_cgNZE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugNZU; else goto cgNZF;
       ugNZU: // global
           call _cgNZE(R1) args: 0, res: 0, upd: 0;
       cgNZF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_$cshowsPrec_info" {
     Data.Complex.$fShowComplex_$cshowsPrec_info:
         const Data.Complex.$fShowComplex_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgNZE() //  [R1]
         { []
         }
     {offset
       cgNZE: // global
           I64[Sp] = block_cgNZK_info;
           _sgMJt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sgMJt::I64;
           if (R1 & 7 != 0) goto ugNZT; else goto cgNZO;
       ugNZT: // global
           call _cgNZK(R1) args: 0, res: 0, upd: 0;
       cgNZO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNZE_info" {
     block_cgNZE_info:
         const _cgNZE;
         const 2;
         const 30;
 },
 _cgNZK() //  [R1]
         { []
         }
     {offset
       cgNZK: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Complex.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgNZK_info" {
     block_cgNZK_info:
         const _cgNZK;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.106513453 UTC

[section ""data" . Data.Complex.$w$cshow_closure" {
     Data.Complex.$w$cshow_closure:
         const Data.Complex.$w$cshow_info;
 },
 sat_sgMJA_entry() //  [R1]
         { []
         }
     {offset
       cgO0m: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgO0n; else goto cgO0o;
       cgO0n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO0o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJA_info" {
     sat_sgMJA_info:
         const sat_sgMJA_entry;
         const 2;
         const 18;
 },
 sat_sgMJB_entry() //  [R1]
         { []
         }
     {offset
       cgO0p: // global
           _sgMJB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgO0q; else goto cgO0r;
       cgO0r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgO0t; else goto cgO0s;
       cgO0t: // global
           HpAlloc = 32;
           goto cgO0q;
       cgO0q: // global
           R1 = _sgMJB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO0s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMJB::P64;
           _sgMJx::P64 = P64[_sgMJB::P64 + 16];
           _sgMJz::P64 = P64[_sgMJB::P64 + 24];
           I64[Hp - 24] = sat_sgMJA_info;
           P64[Hp - 8] = _sgMJx::P64;
           P64[Hp] = _sgMJz::P64;
           R3 = Hp - 24;
           R2 = Data.Complex.$fShowComplex2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMJB_info" {
     sat_sgMJB_info:
         const sat_sgMJB_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgO0u: // global
           _sgMJz::P64 = R4;
           _sgMJy::P64 = R3;
           _sgMJx::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgO0v; else goto cgO0w;
       cgO0w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgO0y; else goto cgO0x;
       cgO0y: // global
           HpAlloc = 32;
           goto cgO0v;
       cgO0v: // global
           R4 = _sgMJz::P64;
           R3 = _sgMJy::P64;
           R2 = _sgMJx::P64;
           R1 = Data.Complex.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO0x: // global
           I64[Hp - 24] = sat_sgMJB_info;
           P64[Hp - 8] = _sgMJx::P64;
           P64[Hp] = _sgMJz::P64;
           R2 = _sgMJx::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Complex.$fReadComplex5_closure+1;
           P64[Sp - 16] = _sgMJy::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cshow_info" {
     Data.Complex.$w$cshow_info:
         const Data.Complex.$w$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.116064925 UTC

[section ""data" . Data.Complex.$fShowComplex_$cshow_closure" {
     Data.Complex.$fShowComplex_$cshow_closure:
         const Data.Complex.$fShowComplex_$cshow_info;
 },
 Data.Complex.$fShowComplex_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cgO15: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgO16; else goto cgO17;
       cgO16: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO17: // global
           I64[Sp - 16] = block_cgO12_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugO1b; else goto cgO13;
       ugO1b: // global
           call _cgO12(R1) args: 0, res: 0, upd: 0;
       cgO13: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_$cshow_info" {
     Data.Complex.$fShowComplex_$cshow_info:
         const Data.Complex.$fShowComplex_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgO12() //  [R1]
         { []
         }
     {offset
       cgO12: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$w$cshow_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO12_info" {
     block_cgO12_info:
         const _cgO12;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.12241272 UTC

[section ""data" . Data.Complex.$fShowComplex1_closure" {
     Data.Complex.$fShowComplex1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.125518741 UTC

[section ""data" . Data.Complex.$fShowComplex_$cshowList_closure" {
     Data.Complex.$fShowComplex_$cshowList_closure:
         const Data.Complex.$fShowComplex_$cshowList_info;
 },
 sat_sgMJO_entry() //  [R1, R2]
         { []
         }
     {offset
       cgO1z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgO1A; else goto cgO1B;
       cgO1A: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgO1B: // global
           I64[Sp - 16] = block_cgO1w_info;
           _sgMJH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sgMJH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugO1F; else goto cgO1x;
       ugO1F: // global
           call _cgO1w(R1) args: 0, res: 0, upd: 0;
       cgO1x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJO_info" {
     sat_sgMJO_info:
         const sat_sgMJO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgO1w() //  [R1]
         { []
         }
     {offset
       cgO1w: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO1w_info" {
     block_cgO1w_info:
         const _cgO1w;
         const 1;
         const 30;
 },
 Data.Complex.$fShowComplex_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgO1G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgO1K; else goto cgO1J;
       cgO1K: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO1J: // global
           I64[Hp - 8] = sat_sgMJO_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_$cshowList_info" {
     Data.Complex.$fShowComplex_$cshowList_info:
         const Data.Complex.$fShowComplex_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.134357723 UTC

[section ""data" . Data.Complex.$fShowComplex_closure" {
     Data.Complex.$fShowComplex_closure:
         const Data.Complex.$fShowComplex_info;
 },
 sat_sgMJS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgO28: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fShowComplex_$cshowList_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJS_info" {
     sat_sgMJS_info:
         const sat_sgMJS_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgMJR_entry() //  [R1, R2]
         { []
         }
     {offset
       cgO2g: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fShowComplex_$cshow_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJR_info" {
     sat_sgMJR_info:
         const sat_sgMJR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgMJQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgO2o: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fShowComplex_$cshowsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMJQ_info" {
     sat_sgMJQ_info:
         const sat_sgMJQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Complex.$fShowComplex_entry() //  [R2]
         { []
         }
     {offset
       cgO2s: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgO2w; else goto cgO2v;
       cgO2w: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Complex.$fShowComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgO2v: // global
           I64[Hp - 72] = sat_sgMJS_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgMJR_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sgMJQ_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fShowComplex_info" {
     Data.Complex.$fShowComplex_info:
         const Data.Complex.$fShowComplex_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.147345902 UTC

[section ""data" . Data.Complex.$fEqComplex_$c==_closure" {
     Data.Complex.$fEqComplex_$c==_closure:
         const Data.Complex.$fEqComplex_$c==_info;
 },
 Data.Complex.$fEqComplex_$c==_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgO2Z: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgO33; else goto cgO34;
       cgO33: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fEqComplex_$c==_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO34: // global
           I64[Sp - 24] = block_cgO2W_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugO3o; else goto cgO2X;
       ugO3o: // global
           call _cgO2W(R1) args: 0, res: 0, upd: 0;
       cgO2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fEqComplex_$c==_info" {
     Data.Complex.$fEqComplex_$c==_info:
         const Data.Complex.$fEqComplex_$c==_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgO2W() //  [R1]
         { []
         }
     {offset
       cgO2W: // global
           I64[Sp - 8] = block_cgO32_info;
           _sgMJX::P64 = P64[R1 + 7];
           _sgMJY::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgMJY::P64;
           P64[Sp + 16] = _sgMJX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugO3n; else goto cgO36;
       ugO3n: // global
           call _cgO32(R1) args: 0, res: 0, upd: 0;
       cgO36: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO2W_info" {
     block_cgO2W_info:
         const _cgO2W;
         const 2;
         const 30;
 },
 _cgO32() //  [R1]
         { []
         }
     {offset
       cgO32: // global
           I64[Sp] = block_cgO3a_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO32_info" {
     block_cgO32_info:
         const _cgO32;
         const 3;
         const 30;
 },
 _cgO3a() //  [R1]
         { []
         }
     {offset
       cgO3a: // global
           if (R1 & 7 == 1) goto cgO3h; else goto cgO3l;
       cgO3h: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgO3l: // global
           R2 = P64[Sp + 16];
           _sgMJY::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sgMJY::P64;
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO3a_info" {
     block_cgO3a_info:
         const _cgO3a;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.161984276 UTC

[section ""data" . Data.Complex.$fEqComplex_$c/=_closure" {
     Data.Complex.$fEqComplex_$c/=_closure:
         const Data.Complex.$fEqComplex_$c/=_info;
 },
 Data.Complex.$fEqComplex_$c/=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgO3Y: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgO42; else goto cgO43;
       cgO42: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fEqComplex_$c/=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO43: // global
           I64[Sp - 24] = block_cgO3V_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugO4B; else goto cgO3W;
       ugO4B: // global
           call _cgO3V(R1) args: 0, res: 0, upd: 0;
       cgO3W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fEqComplex_$c/=_info" {
     Data.Complex.$fEqComplex_$c/=_info:
         const Data.Complex.$fEqComplex_$c/=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgO3V() //  [R1]
         { []
         }
     {offset
       cgO3V: // global
           I64[Sp - 8] = block_cgO41_info;
           _sgMK7::P64 = P64[R1 + 7];
           _sgMK8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgMK8::P64;
           P64[Sp + 16] = _sgMK7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugO4A; else goto cgO45;
       ugO4A: // global
           call _cgO41(R1) args: 0, res: 0, upd: 0;
       cgO45: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO3V_info" {
     block_cgO3V_info:
         const _cgO3V;
         const 2;
         const 30;
 },
 _cgO41() //  [R1]
         { []
         }
     {offset
       cgO41: // global
           I64[Sp] = block_cgO49_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO41_info" {
     block_cgO41_info:
         const _cgO41;
         const 3;
         const 30;
 },
 _cgO49() //  [R1]
         { []
         }
     {offset
       cgO49: // global
           if (R1 & 7 == 1) goto ugO4y; else goto cgO4l;
       ugO4y: // global
           Sp = Sp + 32;
           call _cgO4r() args: 0, res: 0, upd: 0;
       cgO4l: // global
           _sgMKb::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgO4j_info;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = _sgMKb::P64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO49_info" {
     block_cgO49_info:
         const _cgO49;
         const 3;
         const 30;
 },
 _cgO4j() //  [R1]
         { []
         }
     {offset
       cgO4j: // global
           if (R1 & 7 == 1) goto ugO4z; else goto cgO4v;
       ugO4z: // global
           Sp = Sp + 8;
           call _cgO4r() args: 0, res: 0, upd: 0;
       cgO4v: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO4j_info" {
     block_cgO4j_info:
         const _cgO4j;
         const 0;
         const 30;
 },
 _cgO4r() //  []
         { []
         }
     {offset
       cgO4r: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.17851911 UTC

[section ""data" . Data.Complex.$fEqComplex_closure" {
     Data.Complex.$fEqComplex_closure:
         const Data.Complex.$fEqComplex_info;
 },
 sat_sgMKg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgO5p: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fEqComplex_$c/=_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMKg_info" {
     sat_sgMKg_info:
         const sat_sgMKg_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgMKf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgO5x: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fEqComplex_$c==_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMKf_info" {
     sat_sgMKf_info:
         const sat_sgMKf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Complex.$fEqComplex_entry() //  [R2]
         { []
         }
     {offset
       cgO5B: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgO5F; else goto cgO5E;
       cgO5F: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Complex.$fEqComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgO5E: // global
           I64[Hp - 48] = sat_sgMKg_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sgMKf_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fEqComplex_info" {
     Data.Complex.$fEqComplex_info:
         const Data.Complex.$fEqComplex_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.1888051 UTC

[section ""data" . Data.Complex.realPart_closure" {
     Data.Complex.realPart_closure:
         const Data.Complex.realPart_info;
 },
 Data.Complex.realPart_entry() //  [R2]
         { []
         }
     {offset
       cgO63: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgO64; else goto cgO65;
       cgO64: // global
           R2 = R2;
           R1 = Data.Complex.realPart_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgO65: // global
           I64[Sp - 8] = block_cgO60_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugO69; else goto cgO61;
       ugO69: // global
           call _cgO60(R1) args: 0, res: 0, upd: 0;
       cgO61: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.realPart_info" {
     Data.Complex.realPart_info:
         const Data.Complex.realPart_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgO60() //  [R1]
         { []
         }
     {offset
       cgO60: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO60_info" {
     block_cgO60_info:
         const _cgO60;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.197715506 UTC

[section ""data" . Data.Complex.$fStorableComplex_$csizeOf_closure" {
     Data.Complex.$fStorableComplex_$csizeOf_closure:
         const Data.Complex.$fStorableComplex_$csizeOf_info;
 },
 Data.Complex.$fStorableComplex_$csizeOf_entry() //  [R2, R3]
         { []
         }
     {offset
       cgO6r: // global
           _sgMKm::P64 = R3;
           _sgMKl::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgO6y; else goto cgO6z;
       cgO6z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgO6B; else goto cgO6A;
       cgO6B: // global
           HpAlloc = 24;
           goto cgO6y;
       cgO6y: // global
           R3 = _sgMKm::P64;
           R2 = _sgMKl::P64;
           R1 = Data.Complex.$fStorableComplex_$csizeOf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO6A: // global
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sgMKm::P64;
           I64[Sp - 8] = block_cgO6p_info;
           R2 = _sgMKl::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Hp - 16;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex_$csizeOf_info" {
     Data.Complex.$fStorableComplex_$csizeOf_info:
         const Data.Complex.$fStorableComplex_$csizeOf_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgO6p() //  [R1]
         { []
         }
     {offset
       cgO6p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgO6E; else goto cgO6D;
       cgO6E: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgO6D: // global
           _sgMKt::I64 = I64[R1 + 7] << 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sgMKt::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgO6p_info" {
     block_cgO6p_info:
         const _cgO6p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.207535535 UTC

[section ""data" . Data.Complex.$fStorableComplex_$calignment_closure" {
     Data.Complex.$fStorableComplex_$calignment_closure:
         const Data.Complex.$fStorableComplex_$calignment_info;
 },
 Data.Complex.$fStorableComplex_$calignment_entry() //  [R2, R3]
         { []
         }
     {offset
       cgO6Y: // global
           _sgMKv::P64 = R3;
           _sgMKu::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cgO6Z; else goto cgO70;
       cgO70: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgO72; else goto cgO71;
       cgO72: // global
           HpAlloc = 24;
           goto cgO6Z;
       cgO6Z: // global
           R3 = _sgMKv::P64;
           R2 = _sgMKu::P64;
           R1 = Data.Complex.$fStorableComplex_$calignment_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO71: // global
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sgMKv::P64;
           R2 = _sgMKu::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex_$calignment_info" {
     Data.Complex.$fStorableComplex_$calignment_info:
         const Data.Complex.$fStorableComplex_$calignment_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.216404538 UTC

[section ""data" . Data.Complex.$fStorableComplex5_closure" {
     Data.Complex.$fStorableComplex5_closure:
         const Data.Complex.$fStorableComplex5_info;
 },
 sat_sgMKJ_entry() //  [R1]
         { []
         }
     {offset
       cgO7m: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgO7y; else goto cgO7z;
       cgO7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO7z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgO7j_info;
           _sgMKC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sgMKC::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugO7F; else goto cgO7k;
       ugO7F: // global
           call _cgO7j(R1) args: 0, res: 0, upd: 0;
       cgO7k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMKJ_info" {
     sat_sgMKJ_info:
         const sat_sgMKJ_entry;
         const 2;
         const 18;
 },
 _cgO7j() //  [R1]
         { []
         }
     {offset
       cgO7j: // global
           I64[Sp] = block_cgO7p_info;
           _sgMKF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sgMKF::I64;
           if (R1 & 7 != 0) goto ugO7E; else goto cgO7q;
       ugO7E: // global
           call _cgO7p(R1) args: 0, res: 0, upd: 0;
       cgO7q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgO7j_info" {
     block_cgO7j_info:
         const _cgO7j;
         const 1;
         const 30;
 },
 _cgO7p() //  [R1]
         { []
         }
     {offset
       cgO7p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgO7D; else goto cgO7C;
       cgO7D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgO7C: // global
           _sgMKI::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgMKI::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgO7p_info" {
     block_cgO7p_info:
         const _cgO7p;
         const 65;
         const 30;
 },
 Data.Complex.$fStorableComplex5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgO7G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgO7K; else goto cgO7J;
       cgO7K: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgO7J: // global
           I64[Hp - 24] = sat_sgMKJ_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R3 = Hp - 24;
           R2 = R2;
           call Data.Complex.$fStorableComplex3_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex5_info" {
     Data.Complex.$fStorableComplex5_info:
         const Data.Complex.$fStorableComplex5_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.226532743 UTC

[section ""cstring" . lvl1_rgA6f_bytes" {
     lvl1_rgA6f_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.228949241 UTC

[section ""data" . lvl2_rgA6g_closure" {
     lvl2_rgA6g_closure:
         const lvl2_rgA6g_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rgA6g_entry() //  [R1]
         { []
         }
     {offset
       cgO8g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgO8h; else goto cgO8i;
       cgO8h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO8i: // global
           (_cgO8d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgO8d::I64 == 0) goto cgO8f; else goto cgO8e;
       cgO8f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgO8e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgO8d::I64;
           R2 = lvl1_rgA6f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rgA6g_info" {
     lvl2_rgA6g_info:
         const lvl2_rgA6g_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.232683626 UTC

[section ""cstring" . Data.Complex.$trModule4_bytes" {
     Data.Complex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.235085824 UTC

[section ""data" . lvl3_rgA6h_closure" {
     lvl3_rgA6h_closure:
         const lvl3_rgA6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rgA6h_entry() //  [R1]
         { []
         }
     {offset
       cgO8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgO8z; else goto cgO8A;
       cgO8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO8A: // global
           (_cgO8v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgO8v::I64 == 0) goto cgO8x; else goto cgO8w;
       cgO8x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgO8w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgO8v::I64;
           R2 = Data.Complex.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rgA6h_info" {
     lvl3_rgA6h_info:
         const lvl3_rgA6h_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.238645876 UTC

[section ""cstring" . lvl4_rgA6i_bytes" {
     lvl4_rgA6i_bytes:
         I8[] [70,111,114,101,105,103,110,46,83,116,111,114,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.240843099 UTC

[section ""data" . lvl5_rgA6j_closure" {
     lvl5_rgA6j_closure:
         const lvl5_rgA6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rgA6j_entry() //  [R1]
         { []
         }
     {offset
       cgO8Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgO8R; else goto cgO8S;
       cgO8R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO8S: // global
           (_cgO8N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgO8N::I64 == 0) goto cgO8P; else goto cgO8O;
       cgO8P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgO8O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgO8N::I64;
           R2 = lvl4_rgA6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rgA6j_info" {
     lvl5_rgA6j_info:
         const lvl5_rgA6j_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.244401547 UTC

[section ""cstring" . lvl6_rgA6k_bytes" {
     lvl6_rgA6k_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,83,116,111,114,97,98,108,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.24712253 UTC

[section ""data" . lvl7_rgA6l_closure" {
     lvl7_rgA6l_closure:
         const lvl7_rgA6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_rgA6l_entry() //  [R1]
         { []
         }
     {offset
       cgO98: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgO99; else goto cgO9a;
       cgO99: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO9a: // global
           (_cgO95::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgO95::I64 == 0) goto cgO97; else goto cgO96;
       cgO97: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgO96: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgO95::I64;
           R2 = lvl6_rgA6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_rgA6l_info" {
     lvl7_rgA6l_info:
         const lvl7_rgA6l_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.250512448 UTC

[section ""data" . lvl8_rgA6m_closure" {
     lvl8_rgA6m_closure:
         const GHC.Types.I#_con_info;
         const 137;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.252032987 UTC

[section ""data" . lvl9_rgA6n_closure" {
     lvl9_rgA6n_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.253752609 UTC

[section ""data" . lvl10_rgA6o_closure" {
     lvl10_rgA6o_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.255386122 UTC

[section ""data" . lvl11_rgA6p_closure" {
     lvl11_rgA6p_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_rgA6h_closure;
         const lvl5_rgA6j_closure;
         const lvl7_rgA6l_closure;
         const lvl8_rgA6m_closure+1;
         const lvl9_rgA6n_closure+1;
         const lvl8_rgA6m_closure+1;
         const lvl10_rgA6o_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.25702234 UTC

[section ""data" . lvl12_rgA6q_closure" {
     lvl12_rgA6q_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_rgA6g_closure;
         const lvl11_rgA6p_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.260007023 UTC

[section ""data" . Data.Complex.$fStorableComplex8_closure" {
     Data.Complex.$fStorableComplex8_closure:
         const Data.Complex.$fStorableComplex8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fStorableComplex8_entry() //  [R1]
         { []
         }
     {offset
       cgO9u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgO9v; else goto cgO9w;
       cgO9v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgO9w: // global
           (_cgO9r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgO9r::I64 == 0) goto cgO9t; else goto cgO9s;
       cgO9t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgO9s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgO9r::I64;
           R2 = lvl12_rgA6q_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex8_info" {
     Data.Complex.$fStorableComplex8_info:
         const Data.Complex.$fStorableComplex8_entry;
         const 0;
         const 12884901909;
         const SgNTw_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.265666617 UTC

[section ""data" . Data.Complex.$fStorableComplex7_closure" {
     Data.Complex.$fStorableComplex7_closure:
         const Data.Complex.$fStorableComplex7_info;
         const 0;
 },
 sat_sgMKY_entry() //  [R1]
         { []
         }
     {offset
       cgO9Q: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgOac; else goto cgOad;
       cgOac: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOad: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgO9N_info;
           _sgMKK::P64 = P64[R1 + 16];
           _sgMKM::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sgMKK::P64;
           P64[Sp - 24] = _sgMKM::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugOak; else goto cgO9O;
       ugOak: // global
           call _cgO9N(R1) args: 0, res: 0, upd: 0;
       cgO9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMKY_info" {
     sat_sgMKY_info:
         const sat_sgMKY_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+88;
 },
 _cgO9N() //  [R1]
         { []
         }
     {offset
       cgO9N: // global
           I64[Sp] = block_cgO9T_info;
           _sgMKP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sgMKP::I64;
           if (R1 & 7 != 0) goto ugOaj; else goto cgO9U;
       ugOaj: // global
           call _cgO9T(R1) args: 0, res: 0, upd: 0;
       cgO9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgO9N_info" {
     block_cgO9N_info:
         const _cgO9N;
         const 2;
         const 4294967326;
         const SgNTw_srt+88;
 },
 _cgO9T() //  [R1]
         { []
         }
     {offset
       cgO9T: // global
           I64[Sp] = block_cgO9Y_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fStorableComplex8_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgO9T_info" {
     block_cgO9T_info:
         const _cgO9T;
         const 130;
         const 4294967326;
         const SgNTw_srt+88;
 },
 _cgO9Y() //  [R1]
         { []
         }
     {offset
       cgO9Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgOai; else goto cgOah;
       cgOai: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgOah: // global
           _sgMKX::I64 = I64[Sp + 16] + I64[Sp + 8] * (I64[R1 + 7] << 1);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgMKX::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgO9Y_info" {
     block_cgO9Y_info:
         const _cgO9Y;
         const 194;
         const 30;
 },
 Data.Complex.$fStorableComplex7_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgOal: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgOap; else goto cgOao;
       cgOap: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex7_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOao: // global
           I64[Hp - 32] = sat_sgMKY_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R3 = Hp - 32;
           R2 = R2;
           call Data.Complex.$fStorableComplex3_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex7_info" {
     Data.Complex.$fStorableComplex7_info:
         const Data.Complex.$fStorableComplex7_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SgNTw_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.277965633 UTC

[section ""data" . Data.Complex.$fStorableComplex4_closure" {
     Data.Complex.$fStorableComplex4_closure:
         const Data.Complex.$fStorableComplex4_info;
 },
 w_sgML7_entry() //  [R1]
         { []
         }
     {offset
       cgObd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgObp; else goto cgObq;
       cgObp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgObq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgOba_info;
           _sgML1::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sgML1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugObw; else goto cgObb;
       ugObw: // global
           call _cgOba(R1) args: 0, res: 0, upd: 0;
       cgObb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w_sgML7_info" {
     w_sgML7_info:
         const w_sgML7_entry;
         const 2;
         const 18;
 },
 _cgOba() //  [R1]
         { []
         }
     {offset
       cgOba: // global
           I64[Sp] = block_cgObg_info;
           _sgML9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sgML9::I64;
           if (R1 & 7 != 0) goto ugObv; else goto cgObh;
       ugObv: // global
           call _cgObg(R1) args: 0, res: 0, upd: 0;
       cgObh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgOba_info" {
     block_cgOba_info:
         const _cgOba;
         const 1;
         const 30;
 },
 _cgObg() //  [R1]
         { []
         }
     {offset
       cgObg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgObu; else goto cgObt;
       cgObu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgObt: // global
           _sgMLc::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgMLc::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgObg_info" {
     block_cgObg_info:
         const _cgObg;
         const 65;
         const 30;
 },
 Data.Complex.$fStorableComplex4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgObx: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgObz; else goto cgObA;
       cgObz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgObA: // global
           I64[Sp - 32] = block_cgOb1_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugObG; else goto cgOb2;
       ugObG: // global
           call _cgOb1(R1) args: 0, res: 0, upd: 0;
       cgOb2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex4_info" {
     Data.Complex.$fStorableComplex4_info:
         const Data.Complex.$fStorableComplex4_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _cgOb1() //  [R1]
         { []
         }
     {offset
       cgOb1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgObD; else goto cgObC;
       cgObD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgObC: // global
           _sgML5::P64 = P64[R1 + 7];
           _sgML6::P64 = P64[R1 + 15];
           I64[Hp - 24] = w_sgML7_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cgOby_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_ppv_info;
           _cgOb6::P64 = Hp - 24;
           P64[Sp - 16] = _cgOb6::P64;
           P64[Sp - 8] = _sgML5::P64;
           P64[Sp + 16] = _sgML6::P64;
           P64[Sp + 24] = _cgOb6::P64;
           Sp = Sp - 24;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOb1_info" {
     block_cgOb1_info:
         const _cgOb1;
         const 3;
         const 30;
 },
 _cgOby() //  []
         { []
         }
     {offset
       cgOby: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pppv_info;
           P64[Sp + 8] = P64[Sp + 24];
           _sgML6::P64 = P64[Sp + 16];
           P64[Sp + 16] = Data.Complex.$fStorableComplex2_closure+1;
           P64[Sp + 24] = _sgML6::P64;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOby_info" {
     block_cgOby_info:
         const _cgOby;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.292425552 UTC

[section ""data" . Data.Complex.$w$cpokeElemOff_closure" {
     Data.Complex.$w$cpokeElemOff_closure:
         const Data.Complex.$w$cpokeElemOff_info;
 },
 w4_sgMLm_entry() //  [R1]
         { []
         }
     {offset
       cgOcw: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgOcS; else goto cgOcT;
       cgOcS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOcT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cgOct_info;
           _sgMLg::P64 = P64[R1 + 16];
           _sgMLi::P64 = P64[R1 + 32];
           _sgMLj::P64 = P64[R1 + 40];
           R1 = P64[R1 + 24];
           P64[Sp - 40] = _sgMLg::P64;
           P64[Sp - 32] = _sgMLi::P64;
           P64[Sp - 24] = _sgMLj::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ugOd0; else goto cgOcu;
       ugOd0: // global
           call _cgOct(R1) args: 0, res: 0, upd: 0;
       cgOcu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w4_sgMLm_info" {
     w4_sgMLm_info:
         const w4_sgMLm_entry;
         const 4;
         const 15;
 },
 _cgOct() //  [R1]
         { []
         }
     {offset
       cgOct: // global
           I64[Sp] = block_cgOcz_info;
           _sgMLo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sgMLo::I64;
           if (R1 & 7 != 0) goto ugOcZ; else goto cgOcA;
       ugOcZ: // global
           call _cgOcz(R1) args: 0, res: 0, upd: 0;
       cgOcA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgOct_info" {
     block_cgOct_info:
         const _cgOct;
         const 3;
         const 30;
 },
 _cgOcz() //  [R1]
         { []
         }
     {offset
       cgOcz: // global
           _sgMLg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgOcE_info;
           R2 = _sgMLg::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 24];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 8;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgOcz_info" {
     block_cgOcz_info:
         const _cgOcz;
         const 131;
         const 30;
 },
 _cgOcE() //  [R1]
         { []
         }
     {offset
       cgOcE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgOcY; else goto cgOcX;
       cgOcY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgOcX: // global
           _sgMLv::I64 = I64[Sp + 8] + I64[Sp + 16] * (I64[R1 + 7] << 1);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sgMLv::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgOcE_info" {
     block_cgOcE_info:
         const _cgOcE;
         const 194;
         const 30;
 },
 Data.Complex.$w$cpokeElemOff_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgOd3: // global
           _sgMLk::P64 = R6;
           _sgMLj::P64 = R5;
           _sgMLi::P64 = R4;
           _sgMLh::P64 = R3;
           _sgMLg::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgOd4; else goto cgOd5;
       cgOd5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgOd7; else goto cgOd6;
       cgOd7: // global
           HpAlloc = 48;
           goto cgOd4;
       cgOd4: // global
           R6 = _sgMLk::P64;
           R5 = _sgMLj::P64;
           R4 = _sgMLi::P64;
           R3 = _sgMLh::P64;
           R2 = _sgMLg::P64;
           R1 = Data.Complex.$w$cpokeElemOff_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOd6: // global
           I64[Hp - 40] = w4_sgMLm_info;
           P64[Hp - 24] = _sgMLg::P64;
           P64[Hp - 16] = _sgMLh::P64;
           P64[Hp - 8] = _sgMLi::P64;
           P64[Hp] = _sgMLj::P64;
           I64[Sp - 32] = block_cgOd1_info;
           R2 = _sgMLg::P64;
           I64[Sp - 56] = stg_ap_ppv_info;
           _cgOcp::P64 = Hp - 40;
           P64[Sp - 48] = _cgOcp::P64;
           P64[Sp - 40] = _sgMLj::P64;
           P64[Sp - 24] = _cgOcp::P64;
           P64[Sp - 16] = _sgMLg::P64;
           P64[Sp - 8] = _sgMLk::P64;
           Sp = Sp - 56;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cpokeElemOff_info" {
     Data.Complex.$w$cpokeElemOff_info:
         const Data.Complex.$w$cpokeElemOff_entry;
         const 0;
         const 14;
         const 25769803801;
 },
 _cgOd1() //  []
         { []
         }
     {offset
       cgOd1: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppv_info;
           P64[Sp + 16] = Data.Complex.$fStorableComplex2_closure+1;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOd1_info" {
     block_cgOd1_info:
         const _cgOd1;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.305111 UTC

[section ""data" . Data.Complex.$fStorableComplex6_closure" {
     Data.Complex.$fStorableComplex6_closure:
         const Data.Complex.$fStorableComplex6_info;
 },
 Data.Complex.$fStorableComplex6_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgOdV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOdW; else goto cgOdX;
       cgOdW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOdX: // global
           I64[Sp - 32] = block_cgOdS_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugOe1; else goto cgOdT;
       ugOe1: // global
           call _cgOdS(R1) args: 0, res: 0, upd: 0;
       cgOdT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex6_info" {
     Data.Complex.$fStorableComplex6_info:
         const Data.Complex.$fStorableComplex6_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _cgOdS() //  [R1]
         { []
         }
     {offset
       cgOdS: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$cpokeElemOff_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOdS_info" {
     block_cgOdS_info:
         const _cgOdS;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.313049876 UTC

[section ""data" . Data.Complex.$fStorableComplex_closure" {
     Data.Complex.$fStorableComplex_closure:
         const Data.Complex.$fStorableComplex_info;
         const 0;
 },
 sat_sgMLP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgOel: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fStorableComplex1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLP_info" {
     sat_sgMLP_info:
         const sat_sgMLP_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 sat_sgMLO_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOet: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fStorableComplex3_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLO_info" {
     sat_sgMLO_info:
         const sat_sgMLO_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_sgMLN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOeB: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fStorableComplex4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLN_info" {
     sat_sgMLN_info:
         const sat_sgMLN_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 sat_sgMLM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgOeJ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fStorableComplex5_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLM_info" {
     sat_sgMLM_info:
         const sat_sgMLM_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 sat_sgMLL_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOeR: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fStorableComplex6_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLL_info" {
     sat_sgMLL_info:
         const sat_sgMLL_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 sat_sgMLK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgOeZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fStorableComplex7_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLK_info" {
     sat_sgMLK_info:
         const sat_sgMLK_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SgNTw_srt+96;
 },
 sat_sgMLJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOf7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fStorableComplex_$calignment_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLJ_info" {
     sat_sgMLJ_info:
         const sat_sgMLJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgMLI_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOff: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fStorableComplex_$csizeOf_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMLI_info" {
     sat_sgMLI_info:
         const sat_sgMLI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Complex.$fStorableComplex_entry() //  [R2]
         { []
         }
     {offset
       cgOfj: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cgOfn; else goto cgOfm;
       cgOfn: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Complex.$fStorableComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOfm: // global
           I64[Hp - 192] = sat_sgMLP_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sgMLO_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sgMLN_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sgMLM_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sgMLL_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sgMLK_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sgMLJ_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sgMLI_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = Foreign.Storable.C:Storable_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 109;
           P64[Hp - 32] = Hp - 124;
           P64[Hp - 24] = Hp - 141;
           P64[Hp - 16] = Hp - 156;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fStorableComplex_info" {
     Data.Complex.$fStorableComplex_info:
         const Data.Complex.$fStorableComplex_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.332169346 UTC

[section ""data" . Data.Complex.imagPart_closure" {
     Data.Complex.imagPart_closure:
         const Data.Complex.imagPart_info;
 },
 Data.Complex.imagPart_entry() //  [R2]
         { []
         }
     {offset
       cgOgf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgOgg; else goto cgOgh;
       cgOgg: // global
           R2 = R2;
           R1 = Data.Complex.imagPart_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOgh: // global
           I64[Sp - 8] = block_cgOgc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOgl; else goto cgOgd;
       ugOgl: // global
           call _cgOgc(R1) args: 0, res: 0, upd: 0;
       cgOgd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.imagPart_info" {
     Data.Complex.imagPart_info:
         const Data.Complex.imagPart_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOgc() //  [R1]
         { []
         }
     {offset
       cgOgc: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOgc_info" {
     block_cgOgc_info:
         const _cgOgc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.33848171 UTC

[section ""data" . Data.Complex.$fMonadComplex_$c>>=_closure" {
     Data.Complex.$fMonadComplex_$c>>=_closure:
         const Data.Complex.$fMonadComplex_$c>>=_info;
 },
 Data.Complex.$fMonadComplex_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOgD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgOgP; else goto cgOgQ;
       cgOgP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fMonadComplex_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOgQ: // global
           I64[Sp - 16] = block_cgOgA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugOgW; else goto cgOgB;
       ugOgW: // global
           call _cgOgA(R1) args: 0, res: 0, upd: 0;
       cgOgB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fMonadComplex_$c>>=_info" {
     Data.Complex.$fMonadComplex_$c>>=_info:
         const Data.Complex.$fMonadComplex_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgOgA() //  [R1]
         { []
         }
     {offset
       cgOgA: // global
           I64[Sp - 8] = block_cgOgG_info;
           R2 = P64[R1 + 7];
           _sgMLY::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgMLY::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOgA_info" {
     block_cgOgA_info:
         const _cgOgA;
         const 1;
         const 30;
 },
 _cgOgG() //  [R1]
         { []
         }
     {offset
       cgOgG: // global
           _sgMLY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgOgK_info;
           R2 = _sgMLY::P64;
           _sgMM0::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sgMM0::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOgG_info" {
     block_cgOgG_info:
         const _cgOgG;
         const 2;
         const 30;
 },
 _cgOgK() //  [R1]
         { []
         }
     {offset
       cgOgK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOgV; else goto cgOgU;
       cgOgV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOgU: // global
           _sgMM4::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sgMM4::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOgK_info" {
     block_cgOgK_info:
         const _cgOgK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.346670494 UTC

[section ""data" . Data.Complex.$fMonadComplex_$c>>_closure" {
     Data.Complex.$fMonadComplex_$c>>_closure:
         const Data.Complex.$fMonadComplex_$c>>_info;
 },
 Data.Complex.$fMonadComplex_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOhm: // global
           R3 = R3;
           R2 = R2;
           call Data.Complex.$fApplicativeComplex_$c*>_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fMonadComplex_$c>>_info" {
     Data.Complex.$fMonadComplex_$c>>_info:
         const Data.Complex.$fMonadComplex_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.350285208 UTC

[section ""data" . lvl13_rgA6r_closure" {
     lvl13_rgA6r_closure:
         const lvl13_rgA6r_info;
         const 0;
 },
 lvl13_rgA6r_entry() //  [R2]
         { []
         }
     {offset
       cgOhx: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl13_rgA6r_info" {
     lvl13_rgA6r_info:
         const lvl13_rgA6r_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgNTw_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.353145277 UTC

[section ""data" . Data.Complex.$fMonadComplex_closure" {
     Data.Complex.$fMonadComplex_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Complex.$fApplicativeComplex_closure+1;
         const Data.Complex.$fMonadComplex_$c>>=_closure+2;
         const Data.Complex.$fMonadComplex_$c>>_closure+2;
         const Data.Complex.$fApplicativeComplex_$cpure_closure+1;
         const lvl13_rgA6r_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.355424718 UTC

[section ""cstring" . Data.Complex.$fDataComplex6_bytes" {
     Data.Complex.$fDataComplex6_bytes:
         I8[] [67,111,109,112,108,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.357962203 UTC

[section ""data" . Data.Complex.$fDataComplex9_closure" {
     Data.Complex.$fDataComplex9_closure:
         const Data.Complex.$fDataComplex9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fDataComplex9_entry() //  [R1]
         { []
         }
     {offset
       cgOhM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOhN; else goto cgOhO;
       cgOhN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOhO: // global
           (_cgOhJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgOhJ::I64 == 0) goto cgOhL; else goto cgOhK;
       cgOhL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgOhK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgOhJ::I64;
           R2 = Data.Complex.$fDataComplex6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex9_info" {
     Data.Complex.$fDataComplex9_info:
         const Data.Complex.$fDataComplex9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.363782021 UTC

[section ""data" . go61_rgA6s_closure" {
     go61_rgA6s_closure:
         const go61_rgA6s_info;
         const 0;
 },
 go61_rgA6s_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOi8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOi9; else goto ugOiM;
       cgOi9: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rgA6s_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ugOiM: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cgOhY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rgA6s_info" {
     go61_rgA6s_info:
         const go61_rgA6s_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SgNTw_srt+120;
 },
 _cgOhY() //  []
         { []
         }
     {offset
       cgOhY: // global
           _sgMM6::P64 = P64[Sp];
           I64[Sp] = block_cgOi1_info;
           R1 = _sgMM6::P64;
           if (R1 & 7 != 0) goto ugOiQ; else goto cgOi2;
       ugOiQ: // global
           call _cgOi1(R1) args: 0, res: 0, upd: 0;
       cgOi2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgOi1() //  [R1]
         { []
         }
     {offset
       cgOi1: // global
           if (R1 & 7 == 1) goto ugOiN; else goto cgOi6;
       ugOiN: // global
           Sp = Sp + 16;
           call _cgOio() args: 0, res: 0, upd: 0;
       cgOi6: // global
           I64[Sp - 8] = block_cgOig_info;
           _sgMM9::P64 = P64[R1 + 6];
           _sgMMa::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgMMa::P64;
           P64[Sp + 8] = _sgMM9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOiR; else goto cgOii;
       ugOiR: // global
           call _cgOig(R1) args: 0, res: 0, upd: 0;
       cgOii: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOi1_info" {
     block_cgOi1_info:
         const _cgOi1;
         const 1;
         const 12884901918;
         const SgNTw_srt+120;
 },
 _cgOig() //  [R1]
         { []
         }
     {offset
       cgOig: // global
           if (R1 & 7 == 1) goto ugOiO; else goto cgOit;
       ugOiO: // global
           Sp = Sp + 24;
           call _cgOio() args: 0, res: 0, upd: 0;
       cgOit: // global
           I64[Sp - 8] = block_cgOir_info;
           _sgMMc::P64 = P64[R1 + 6];
           _sgMMd::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgMMd::P64;
           P64[Sp + 16] = _sgMMc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOiU; else goto cgOiu;
       ugOiU: // global
           call _cgOir(R1) args: 0, res: 0, upd: 0;
       cgOiu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOig_info" {
     block_cgOig_info:
         const _cgOig;
         const 2;
         const 12884901918;
         const SgNTw_srt+120;
 },
 _cgOio() //  []
         { []
         }
     {offset
       cgOio: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgOir() //  [R1]
         { []
         }
     {offset
       cgOir: // global
           I64[Sp] = block_cgOiy_info;
           R3 = Data.Complex.$fReadComplex3_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOir_info" {
     block_cgOir_info:
         const _cgOir;
         const 3;
         const 12884901918;
         const SgNTw_srt+120;
 },
 _cgOiy() //  [R1]
         { []
         }
     {offset
       cgOiy: // global
           if (R1 & 7 == 1) goto cgOiF; else goto cgOiJ;
       cgOiF: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cgOhY() args: 0, res: 0, upd: 0;
       cgOiJ: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOiy_info" {
     block_cgOiy_info:
         const _cgOiy;
         const 3;
         const 12884901918;
         const SgNTw_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.376075721 UTC

[section ""data" . $c:+1_rgA6t_closure" {
     $c:+1_rgA6t_closure:
         const Data.Data.AlgConstr_con_info;
         const $c:+2_rgA6u_closure;
         const 0;
 },
 section ""data" . Data.Complex.$fDataComplex8_closure" {
     Data.Complex.$fDataComplex8_closure:
         const :_con_info;
         const Data.Complex.$c:+_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Complex.$fDataComplex7_closure" {
     Data.Complex.$fDataComplex7_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Complex.$fDataComplex8_closure+2;
         const 0;
 },
 section ""data" . Data.Complex.$tComplex_closure" {
     Data.Complex.$tComplex_closure:
         const Data.Data.DataType_con_info;
         const Data.Complex.$fDataComplex9_closure;
         const Data.Complex.$fDataComplex7_closure+1;
         const 0;
 },
 section ""data" . Data.Complex.$c:+_closure" {
     Data.Complex.$c:+_closure:
         const Data.Data.Constr_con_info;
         const $c:+1_rgA6t_closure+1;
         const Data.Complex.$fReadComplex3_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Infix_closure+2;
         const Data.Complex.$tComplex_closure+1;
         const 0;
 },
 section ""data" . $c:+2_rgA6u_closure" {
     $c:+2_rgA6u_closure:
         const $c:+2_rgA6u_info;
         const 0;
         const 0;
         const 0;
 },
 $c:+2_rgA6u_entry() //  [R1]
         { []
         }
     {offset
       cgOjF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOjG; else goto cgOjH;
       cgOjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOjH: // global
           (_cgOjC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgOjC::I64 == 0) goto cgOjE; else goto cgOjD;
       cgOjE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgOjD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgOjC::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Complex.$fDataComplex8_closure+2;
           Sp = Sp - 16;
           call go61_rgA6s_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $c:+2_rgA6u_info" {
     $c:+2_rgA6u_info:
         const $c:+2_rgA6u_entry;
         const 0;
         const 30064771093;
         const SgNTw_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.383146444 UTC

[section ""data" . Data.Complex.$trModule3_closure" {
     Data.Complex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.384770619 UTC

[section ""cstring" . Data.Complex.$trModule2_bytes" {
     Data.Complex.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,111,109,112,108,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.386415472 UTC

[section ""data" . Data.Complex.$trModule1_closure" {
     Data.Complex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.38852964 UTC

[section ""data" . Data.Complex.$trModule_closure" {
     Data.Complex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Complex.$trModule3_closure+1;
         const Data.Complex.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.390346317 UTC

[section ""data" . $krep_rgA6v_closure" {
     $krep_rgA6v_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.39196323 UTC

[section ""data" . Data.Complex.$fDataComplex5_closure" {
     Data.Complex.$fDataComplex5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$fDataComplex6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.393876971 UTC

[section ""data" . Data.Complex.$tcComplex_closure" {
     Data.Complex.$tcComplex_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Complex.$trModule_closure+1;
         const Data.Complex.$fDataComplex5_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 1343342814679332338;
         const 7004386227939987578;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.39565606 UTC

[section ""data" . $krep1_rgA6w_closure" {
     $krep1_rgA6w_closure:
         const :_con_info;
         const $krep_rgA6v_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.397355693 UTC

[section ""data" . $krep2_rgA6x_closure" {
     $krep2_rgA6x_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Complex.$tcComplex_closure+1;
         const $krep1_rgA6w_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.399056104 UTC

[section ""data" . $krep3_rgA6y_closure" {
     $krep3_rgA6y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgA6v_closure+2;
         const $krep2_rgA6x_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.400650134 UTC

[section ""data" . Data.Complex.$tc':+1_closure" {
     Data.Complex.$tc':+1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgA6v_closure+2;
         const $krep3_rgA6y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.402261328 UTC

[section ""cstring" . Data.Complex.$tc':+3_bytes" {
     Data.Complex.$tc':+3_bytes:
         I8[] [39,58,43]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.403821208 UTC

[section ""data" . Data.Complex.$tc':+2_closure" {
     Data.Complex.$tc':+2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Complex.$tc':+3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.406031303 UTC

[section ""data" . Data.Complex.$tc':+_closure" {
     Data.Complex.$tc':+_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Complex.$trModule_closure+1;
         const Data.Complex.$tc':+2_closure+1;
         const Data.Complex.$tc':+1_closure+4;
         const 6922641126191179007;
         const 8119904032930905711;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.409388522 UTC

[section ""data" . Data.Complex.$fDataComplex4_closure" {
     Data.Complex.$fDataComplex4_closure:
         const Data.Complex.$fDataComplex4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fDataComplex4_entry() //  [R1]
         { []
         }
     {offset
       cgOkk: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgOkl; else goto cgOkm;
       cgOkl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOkm: // global
           (_cgOkc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgOkc::I64 == 0) goto cgOke; else goto cgOkd;
       cgOke: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgOkd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgOkc::I64;
           I64[Sp - 24] = block_cgOkf_info;
           R6 = 0;
           R5 = Data.Complex.$fDataComplex5_closure+1;
           R4 = Data.Complex.$trModule_closure+1;
           R3 = 7004386227939987578;
           R2 = 1343342814679332338;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex4_info" {
     Data.Complex.$fDataComplex4_info:
         const Data.Complex.$fDataComplex4_entry;
         const 0;
         const 4294967317;
         const SgNTw_srt+160;
 },
 _cgOkf() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgOkf: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cgOkg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgOkf_info" {
     block_cgOkf_info:
         const _cgOkf;
         const 0;
         const 30;
 },
 _cgOkg() //  []
         { []
         }
     {offset
       cgOkg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgOkp; else goto cgOko;
       cgOkp: // global
           HpAlloc = 48;
           I64[Sp] = block_cgOkg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cgOko: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgOkg_info" {
     block_cgOkg_info:
         const _cgOkg;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.417212021 UTC

[section ""data" . Data.Complex.$fDataComplex10_closure" {
     Data.Complex.$fDataComplex10_closure:
         const Data.Complex.$fDataComplex10_info;
         const 0;
 },
 Data.Complex.$fDataComplex10_entry() //  [R2]
         { []
         }
     {offset
       cgOkY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgOkZ; else goto cgOl0;
       cgOkZ: // global
           R2 = R2;
           R1 = Data.Complex.$fDataComplex10_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOl0: // global
           I64[Sp - 8] = block_cgOkW_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex10_info" {
     Data.Complex.$fDataComplex10_info:
         const Data.Complex.$fDataComplex10_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SgNTw_srt+168;
 },
 _cgOkW() //  [R1]
         { []
         }
     {offset
       cgOkW: // global
           R3 = R1;
           R2 = Data.Complex.$fDataComplex4_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOkW_info" {
     block_cgOkW_info:
         const _cgOkW;
         const 0;
         const 12884901918;
         const SgNTw_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.425140679 UTC

[section ""data" . Data.Complex.$fDataComplex_$cdataCast1_closure" {
     Data.Complex.$fDataComplex_$cdataCast1_closure:
         const Data.Complex.$fDataComplex_$cdataCast1_info;
         const 0;
 },
 lvl17_sgMMv_entry() //  [R1]
         { []
         }
     {offset
       cgOll: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOlm; else goto cgOln;
       cgOlm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOln: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Complex.$fDataComplex4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgMMv_info" {
     lvl17_sgMMv_info:
         const lvl17_sgMMv_entry;
         const 1;
         const 21474836496;
         const SgNTw_srt+176;
 },
 sat_sgMMz_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOlA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgOlB; else goto cgOlC;
       cgOlB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOlC: // global
           I64[Sp - 24] = block_cgOlt_info;
           _sgMMt::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sgMMt::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugOlN; else goto cgOlu;
       ugOlN: // global
           call _cgOlt(R1) args: 0, res: 0, upd: 0;
       cgOlu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMMz_info" {
     sat_sgMMz_info:
         const sat_sgMMz_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgOlt() //  [R1]
         { []
         }
     {offset
       cgOlt: // global
           if (R1 & 7 == 1) goto cgOlx; else goto cgOly;
       cgOlx: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgOly: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgOlM; else goto cgOlL;
       cgOlM: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOlL: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOlt_info" {
     block_cgOlt_info:
         const _cgOlt;
         const 2;
         const 30;
 },
 Data.Complex.$fDataComplex_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOlO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgOlS; else goto cgOlR;
       cgOlS: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOlR: // global
           I64[Hp - 40] = lvl17_sgMMv_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgMMz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cdataCast1_info" {
     Data.Complex.$fDataComplex_$cdataCast1_info:
         const Data.Complex.$fDataComplex_$cdataCast1_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const SgNTw_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.434131325 UTC

[section ""data" . Data.Complex.$fDataComplex1_closure" {
     Data.Complex.$fDataComplex1_closure:
         const (,)_con_info;
         const Data.Complex.$W:+_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.444214304 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapMp_closure" {
     Data.Complex.$fDataComplex_$cgmapMp_closure:
         const Data.Complex.$fDataComplex_$cgmapMp_info;
 },
 lvl17_sgMME_entry() //  [R1]
         { []
         }
     {offset
       cgOmy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOmz; else goto cgOmA;
       cgOmz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOmA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgMME_info" {
     lvl17_sgMME_info:
         const lvl17_sgMME_entry;
         const 1;
         const 16;
 },
 sat_sgMN9_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOmN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOmO; else goto cgOmP;
       cgOmO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOmP: // global
           I64[Sp - 24] = block_cgOmK_info;
           _sgMME::P64 = P64[R1 + 7];
           _sgMMF::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgMME::P64;
           P64[Sp - 8] = _sgMMF::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugOn7; else goto cgOmL;
       ugOn7: // global
           call _cgOmK(R1) args: 0, res: 0, upd: 0;
       cgOmL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMN9_info" {
     sat_sgMN9_info:
         const sat_sgMN9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgOmK() //  [R1]
         { []
         }
     {offset
       cgOmK: // global
           I64[Sp - 8] = block_cgOmS_info;
           _sgMN6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMN6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOn6; else goto cgOmU;
       ugOn6: // global
           call _cgOmS(R1) args: 0, res: 0, upd: 0;
       cgOmU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOmK_info" {
     block_cgOmK_info:
         const _cgOmK;
         const 2;
         const 30;
 },
 _cgOmS() //  [R1]
         { []
         }
     {offset
       cgOmS: // global
           if (R1 & 7 == 1) goto cgOn0; else goto cgOn4;
       cgOn0: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgOn4: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOmS_info" {
     block_cgOmS_info:
         const _cgOmS;
         const 3;
         const 30;
 },
 sat_sgMMZ_entry() //  [R1]
         { []
         }
     {offset
       cgOnD: // global
           _sgMMZ::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgOnE; else goto cgOnF;
       cgOnF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOnH; else goto cgOnG;
       cgOnH: // global
           HpAlloc = 56;
           goto cgOnE;
       cgOnE: // global
           R1 = _sgMMZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOnG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMMZ::P64;
           _sgMMF::P64 = P64[_sgMMZ::P64 + 16];
           _sgMMM::P64 = P64[_sgMMZ::P64 + 24];
           _sgMMQ::P64 = P64[_sgMMZ::P64 + 32];
           _sgMMR::P64 = P64[_sgMMZ::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgMMQ::P64;
           P64[Hp - 24] = _sgMMM::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sgMMR::P64;
           R2 = _sgMMF::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMMZ_info" {
     sat_sgMMZ_info:
         const sat_sgMMZ_entry;
         const 4;
         const 15;
 },
 sat_sgMMV_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOnT: // global
           _sgMMS::P64 = R2;
           _sgMMV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOnU; else goto cgOnV;
       cgOnV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOnX; else goto cgOnW;
       cgOnX: // global
           HpAlloc = 56;
           goto cgOnU;
       cgOnU: // global
           R2 = _sgMMS::P64;
           R1 = _sgMMV::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOnW: // global
           _sgMMF::P64 = P64[_sgMMV::P64 + 7];
           _sgMMQ::P64 = P64[_sgMMV::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgMMQ::P64;
           P64[Hp - 24] = _sgMMS::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgMMF::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMMV_info" {
     sat_sgMMV_info:
         const sat_sgMMV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgMMW_entry() //  [R1]
         { []
         }
     {offset
       cgOnY: // global
           _sgMMW::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgOnZ; else goto cgOo0;
       cgOo0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOo2; else goto cgOo1;
       cgOo2: // global
           HpAlloc = 24;
           goto cgOnZ;
       cgOnZ: // global
           R1 = _sgMMW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOo1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMMW::P64;
           _sgMMF::P64 = P64[_sgMMW::P64 + 16];
           _sgMMN::P64 = P64[_sgMMW::P64 + 24];
           _sgMMQ::P64 = P64[_sgMMW::P64 + 32];
           I64[Hp - 16] = sat_sgMMV_info;
           P64[Hp - 8] = _sgMMF::P64;
           P64[Hp] = _sgMMQ::P64;
           R2 = _sgMMF::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgMMN::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMMW_info" {
     sat_sgMMW_info:
         const sat_sgMMW_entry;
         const 3;
         const 15;
 },
 sat_sgMN0_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOo3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgOo4; else goto cgOo5;
       cgOo4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOo5: // global
           I64[Sp - 40] = block_cgOns_info;
           _sgMMB::P64 = P64[R1 + 7];
           _sgMMF::P64 = P64[R1 + 15];
           _sgMMM::P64 = P64[R1 + 23];
           _sgMMN::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgMMB::P64;
           P64[Sp - 24] = _sgMMF::P64;
           P64[Sp - 16] = _sgMMM::P64;
           P64[Sp - 8] = _sgMMN::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugOo9; else goto cgOnt;
       ugOo9: // global
           call _cgOns(R1) args: 0, res: 0, upd: 0;
       cgOnt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMN0_info" {
     sat_sgMN0_info:
         const sat_sgMN0_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgOns() //  [R1]
         { []
         }
     {offset
       cgOns: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgOo8; else goto cgOo7;
       cgOo8: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOo7: // global
           _sgMMQ::P64 = P64[R1 + 7];
           _sgMMR::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgMMZ_info;
           _sgMMF::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sgMMF::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sgMMQ::P64;
           P64[Hp - 40] = _sgMMR::P64;
           I64[Hp - 32] = sat_sgMMW_info;
           P64[Hp - 16] = _sgMMF::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sgMMQ::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOns_info" {
     block_cgOns_info:
         const _cgOns;
         const 4;
         const 30;
 },
 k_sgMMJ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOoa: // global
           _sgMMM::P64 = R4;
           _sgMML::P64 = R3;
           _sgMMK::P64 = R2;
           _sgMMJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgOob; else goto cgOoc;
       cgOoc: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgOoe; else goto cgOod;
       cgOoe: // global
           HpAlloc = 80;
           goto cgOob;
       cgOob: // global
           R4 = _sgMMM::P64;
           R3 = _sgMML::P64;
           R2 = _sgMMK::P64;
           R1 = _sgMMJ::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOod: // global
           _sgMMB::P64 = P64[_sgMMJ::P64 + 5];
           _sgMMC::P64 = P64[_sgMMJ::P64 + 13];
           _sgMMF::P64 = P64[_sgMMJ::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sgMMC::P64;
           P64[Hp - 48] = _sgMMK::P64;
           P64[Hp - 40] = _sgMMM::P64;
           I64[Hp - 32] = sat_sgMN0_info;
           P64[Hp - 24] = _sgMMB::P64;
           P64[Hp - 16] = _sgMMF::P64;
           P64[Hp - 8] = _sgMMM::P64;
           P64[Hp] = Hp - 72;
           R2 = _sgMMF::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgMML::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sgMMJ_info" {
     k_sgMMJ_info:
         const k_sgMMJ_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sgMN1_entry() //  [R1]
         { []
         }
     {offset
       cgOon: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOoo; else goto cgOop;
       cgOoo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOop: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fDataComplex1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMN1_info" {
     sat_sgMN1_info:
         const sat_sgMN1_entry;
         const 1;
         const 16;
 },
 sat_sgMN2_entry() //  [R1]
         { []
         }
     {offset
       cgOoq: // global
           _sgMN2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOor; else goto cgOos;
       cgOos: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOou; else goto cgOot;
       cgOou: // global
           HpAlloc = 24;
           goto cgOor;
       cgOor: // global
           R1 = _sgMN2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMN2::P64;
           _sgMMA::P64 = P64[_sgMN2::P64 + 16];
           _sgMMF::P64 = P64[_sgMN2::P64 + 24];
           _sgMMH::P64 = P64[_sgMN2::P64 + 32];
           _sgMMJ::P64 = P64[_sgMN2::P64 + 40];
           I64[Hp - 16] = sat_sgMN1_info;
           P64[Hp] = _sgMMF::P64;
           R4 = _sgMMH::P64;
           R3 = Hp - 16;
           R2 = _sgMMA::P64;
           R1 = _sgMMJ::P64;
           Sp = Sp - 16;
           call k_sgMMJ_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMN2_info" {
     sat_sgMN2_info:
         const sat_sgMN2_entry;
         const 4;
         const 15;
 },
 sat_sgMN3_entry() //  [R1]
         { []
         }
     {offset
       cgOov: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgOow; else goto cgOox;
       cgOow: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOox: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgOnc_info;
           _sgMMA::P64 = P64[R1 + 16];
           _sgMMB::P64 = P64[R1 + 24];
           _sgMMC::P64 = P64[R1 + 32];
           _sgMMF::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _sgMMA::P64;
           P64[Sp - 40] = _sgMMB::P64;
           P64[Sp - 32] = _sgMMC::P64;
           P64[Sp - 24] = _sgMMF::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ugOoB; else goto cgOnd;
       ugOoB: // global
           call _cgOnc(R1) args: 0, res: 0, upd: 0;
       cgOnd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMN3_info" {
     sat_sgMN3_info:
         const sat_sgMN3_entry;
         const 5;
         const 15;
 },
 _cgOnc() //  [R1]
         { []
         }
     {offset
       cgOnc: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgOoA; else goto cgOoz;
       cgOoA: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgOoz: // global
           _sgMMH::P64 = P64[R1 + 7];
           _sgMMI::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sgMMJ_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           _sgMMF::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgMMF::P64;
           I64[Hp - 40] = sat_sgMN2_info;
           _sgMMA::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sgMMA::P64;
           P64[Hp - 16] = _sgMMF::P64;
           P64[Hp - 8] = _sgMMH::P64;
           _cgOnh::P64 = Hp - 69;
           P64[Hp] = _cgOnh::P64;
           R4 = _sgMMI::P64;
           R3 = Hp - 40;
           R2 = _sgMMA::P64;
           R1 = _cgOnh::P64;
           Sp = Sp + 40;
           call k_sgMMJ_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgOnc_info" {
     block_cgOnc_info:
         const _cgOnc;
         const 4;
         const 30;
 },
 Data.Complex.$fDataComplex_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgOoC: // global
           _sgMMD::P64 = R5;
           _sgMMC::P64 = R4;
           _sgMMB::P64 = R3;
           _sgMMA::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgOoD; else goto cgOoE;
       cgOoE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOoG; else goto cgOoF;
       cgOoG: // global
           HpAlloc = 24;
           goto cgOoD;
       cgOoD: // global
           R5 = _sgMMD::P64;
           R4 = _sgMMC::P64;
           R3 = _sgMMB::P64;
           R2 = _sgMMA::P64;
           R1 = Data.Complex.$fDataComplex_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOoF: // global
           I64[Hp - 16] = lvl17_sgMME_info;
           P64[Hp] = _sgMMB::P64;
           I64[Sp - 48] = block_cgOmB_info;
           R2 = _sgMMB::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgMMA::P64;
           P64[Sp - 24] = _sgMMB::P64;
           P64[Sp - 16] = _sgMMC::P64;
           P64[Sp - 8] = _sgMMD::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapMp_info" {
     Data.Complex.$fDataComplex_$cgmapMp_info:
         const Data.Complex.$fDataComplex_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgOmB() //  [R1]
         { []
         }
     {offset
       cgOmB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgOoJ; else goto cgOoI;
       cgOoJ: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOoI: // global
           I64[Hp - 72] = sat_sgMN9_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sgMN3_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOmB_info" {
     block_cgOmB_info:
         const _cgOmB;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.479747196 UTC

[section ""data" . Data.Complex.$w$cgmapM_closure" {
     Data.Complex.$w$cgmapM_closure:
         const Data.Complex.$w$cgmapM_info;
 },
 sat_sgMNn_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOr6: // global
           _sgMNl::P64 = R2;
           _sgMNn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOr7; else goto cgOr8;
       cgOr8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgOra; else goto cgOr9;
       cgOra: // global
           HpAlloc = 32;
           goto cgOr7;
       cgOr7: // global
           R2 = _sgMNl::P64;
           R1 = _sgMNn::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOr9: // global
           _sgMNb::P64 = P64[_sgMNn::P64 + 7];
           _sgMNk::P64 = P64[_sgMNn::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgMNk::P64;
           P64[Hp] = _sgMNl::P64;
           R2 = _sgMNb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMNn_info" {
     sat_sgMNn_info:
         const sat_sgMNn_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgMNo_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOrb: // global
           _sgMNk::P64 = R2;
           _sgMNo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgOrc; else goto cgOrd;
       cgOrd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOrf; else goto cgOre;
       cgOrf: // global
           HpAlloc = 24;
           goto cgOrc;
       cgOrc: // global
           R2 = _sgMNk::P64;
           R1 = _sgMNo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOre: // global
           _sgMNb::P64 = P64[_sgMNo::P64 + 7];
           _sgMNj::P64 = P64[_sgMNo::P64 + 15];
           I64[Hp - 16] = sat_sgMNn_info;
           P64[Hp - 8] = _sgMNb::P64;
           P64[Hp] = _sgMNk::P64;
           R2 = _sgMNb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgMNj::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMNo_info" {
     sat_sgMNo_info:
         const sat_sgMNo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k_sgMNf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOrg: // global
           _sgMNi::P64 = R4;
           _sgMNh::P64 = R3;
           _sgMNg::P64 = R2;
           _sgMNf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgOrh; else goto cgOri;
       cgOri: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgOrk; else goto cgOrj;
       cgOrk: // global
           HpAlloc = 64;
           goto cgOrh;
       cgOrh: // global
           R4 = _sgMNi::P64;
           R3 = _sgMNh::P64;
           R2 = _sgMNg::P64;
           R1 = _sgMNf::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOrj: // global
           _sgMNb::P64 = P64[_sgMNf::P64 + 5];
           _sgMNc::P64 = P64[_sgMNf::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sgMNc::P64;
           P64[Hp - 32] = _sgMNg::P64;
           P64[Hp - 24] = _sgMNi::P64;
           I64[Hp - 16] = sat_sgMNo_info;
           P64[Hp - 8] = _sgMNb::P64;
           P64[Hp] = Hp - 56;
           R2 = _sgMNb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgMNh::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sgMNf_info" {
     k_sgMNf_info:
         const k_sgMNf_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgMNp_entry() //  [R1]
         { []
         }
     {offset
       cgOrt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOru; else goto cgOrv;
       cgOru: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOrv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$W:+_closure+2;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMNp_info" {
     sat_sgMNp_info:
         const sat_sgMNp_entry;
         const 1;
         const 16;
 },
 sat_sgMNq_entry() //  [R1]
         { []
         }
     {offset
       cgOrw: // global
           _sgMNq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOrx; else goto cgOry;
       cgOry: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOrA; else goto cgOrz;
       cgOrA: // global
           HpAlloc = 24;
           goto cgOrx;
       cgOrx: // global
           R1 = _sgMNq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOrz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMNq::P64;
           _sgMNa::P64 = P64[_sgMNq::P64 + 16];
           _sgMNb::P64 = P64[_sgMNq::P64 + 24];
           _sgMNd::P64 = P64[_sgMNq::P64 + 32];
           _sgMNf::P64 = P64[_sgMNq::P64 + 40];
           I64[Hp - 16] = sat_sgMNp_info;
           P64[Hp] = _sgMNb::P64;
           R4 = _sgMNd::P64;
           R3 = Hp - 16;
           R2 = _sgMNa::P64;
           R1 = _sgMNf::P64;
           Sp = Sp - 16;
           call k_sgMNf_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMNq_info" {
     sat_sgMNq_info:
         const sat_sgMNq_entry;
         const 4;
         const 15;
 },
 Data.Complex.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgOrB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgOrF; else goto cgOrE;
       cgOrF: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOrE: // global
           I64[Hp - 64] = k_sgMNf_info;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sgMNq_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           _cgOqP::P64 = Hp - 61;
           P64[Hp] = _cgOqP::P64;
           R4 = R6;
           R3 = Hp - 40;
           R2 = R2;
           R1 = _cgOqP::P64;
           call k_sgMNf_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cgmapM_info" {
     Data.Complex.$w$cgmapM_info:
         const Data.Complex.$w$cgmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.493205113 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapM_closure" {
     Data.Complex.$fDataComplex_$cgmapM_closure:
         const Data.Complex.$fDataComplex_$cgmapM_info;
 },
 Data.Complex.$fDataComplex_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgOst: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOsu; else goto cgOsv;
       cgOsu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOsv: // global
           I64[Sp - 32] = block_cgOsq_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugOsz; else goto cgOsr;
       ugOsz: // global
           call _cgOsq(R1) args: 0, res: 0, upd: 0;
       cgOsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapM_info" {
     Data.Complex.$fDataComplex_$cgmapM_info:
         const Data.Complex.$fDataComplex_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgOsq() //  [R1]
         { []
         }
     {offset
       cgOsq: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$cgmapM_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOsq_info" {
     block_cgOsq_info:
         const _cgOsq;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.499907236 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapQi_closure" {
     Data.Complex.$fDataComplex_$cgmapQi_closure:
         const Data.Complex.$fDataComplex_$cgmapQi_info;
         const 0;
 },
 Data.Complex.$fDataComplex_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgOsR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgOsV; else goto cgOsW;
       cgOsV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOsW: // global
           I64[Sp - 32] = block_cgOsO_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugOta; else goto cgOsP;
       ugOta: // global
           call _cgOsO(R1) args: 0, res: 0, upd: 0;
       cgOsP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapQi_info" {
     Data.Complex.$fDataComplex_$cgmapQi_info:
         const Data.Complex.$fDataComplex_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgNTw_srt+208;
 },
 _cgOsO() //  [R1]
         { []
         }
     {offset
       cgOsO: // global
           I64[Sp - 8] = block_cgOsU_info;
           _sgMND::P64 = P64[R1 + 7];
           _sgMNE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgMNE::P64;
           P64[Sp + 16] = _sgMND::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOt9; else goto cgOsY;
       ugOt9: // global
           call _cgOsU(R1) args: 0, res: 0, upd: 0;
       cgOsY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOsO_info" {
     block_cgOsO_info:
         const _cgOsO;
         const 3;
         const 4294967326;
         const SgNTw_srt+208;
 },
 _cgOsU() //  [R1]
         { []
         }
     {offset
       cgOsU: // global
           _sgMNy::P64 = P64[Sp + 16];
           _sgMNA::P64 = P64[Sp + 32];
           _sgMNH::I64 = I64[R1 + 7];
           if (_sgMNH::I64 != 0) goto ugOt8; else goto cgOt6;
       ugOt8: // global
           if (_sgMNH::I64 != 1) goto cgOt5; else goto cgOt7;
       cgOt5: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgOt7: // global
           R3 = P64[Sp + 8];
           R2 = _sgMNy::P64;
           R1 = _sgMNA::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOt6: // global
           R3 = P64[Sp + 24];
           R2 = _sgMNy::P64;
           R1 = _sgMNA::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOsU_info" {
     block_cgOsU_info:
         const _cgOsU;
         const 4;
         const 4294967326;
         const SgNTw_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.50961658 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapQr_closure" {
     Data.Complex.$fDataComplex_$cgmapQr_closure:
         const Data.Complex.$fDataComplex_$cgmapQr_info;
 },
 sat_sgMNS_entry() //  [R1]
         { []
         }
     {offset
       cgOtE: // global
           _sgMNS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOtF; else goto cgOtG;
       cgOtG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgOtI; else goto cgOtH;
       cgOtI: // global
           HpAlloc = 40;
           goto cgOtF;
       cgOtF: // global
           R1 = _sgMNS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOtH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMNS::P64;
           _sgMNI::P64 = P64[_sgMNS::P64 + 16];
           _sgMNJ::P64 = P64[_sgMNS::P64 + 24];
           _sgMNK::P64 = P64[_sgMNS::P64 + 32];
           _sgMNL::P64 = P64[_sgMNS::P64 + 40];
           _sgMNP::P64 = P64[_sgMNS::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgMNL::P64;
           P64[Hp - 8] = _sgMNI::P64;
           P64[Hp] = _sgMNP::P64;
           R3 = _sgMNK::P64;
           R2 = Hp - 32;
           R1 = _sgMNJ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMNS_info" {
     sat_sgMNS_info:
         const sat_sgMNS_entry;
         const 5;
         const 15;
 },
 Data.Complex.$fDataComplex_$cgmapQr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cgOtJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgOtL; else goto cgOtM;
       cgOtL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapQr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOtM: // global
           I64[Sp - 40] = block_cgOtu_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugOtQ; else goto cgOtv;
       ugOtQ: // global
           call _cgOtu(R1) args: 0, res: 0, upd: 0;
       cgOtv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapQr_info" {
     Data.Complex.$fDataComplex_$cgmapQr_info:
         const Data.Complex.$fDataComplex_$cgmapQr_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgOtu() //  [R1]
         { []
         }
     {offset
       cgOtu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgOtP; else goto cgOtO;
       cgOtP: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOtO: // global
           _sgMNO::P64 = P64[R1 + 7];
           _sgMNP::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_sgMNS_info;
           _sgMNI::P64 = P64[Sp + 8];
           P64[Hp - 72] = _sgMNI::P64;
           _sgMNJ::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sgMNJ::P64;
           P64[Hp - 56] = P64[Sp + 24];
           _sgMNL::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgMNL::P64;
           P64[Hp - 40] = _sgMNP::P64;
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgMNL::P64;
           P64[Hp - 8] = _sgMNI::P64;
           P64[Hp] = _sgMNO::P64;
           R3 = Hp - 88;
           R2 = Hp - 32;
           R1 = _sgMNJ::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOtu_info" {
     block_cgOtu_info:
         const _cgOtu;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.518465513 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapQ_closure" {
     Data.Complex.$fDataComplex_$cgmapQ_closure:
         const Data.Complex.$fDataComplex_$cgmapQ_info;
 },
 Data.Complex.$fDataComplex_$cgmapQ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgOuh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgOuo; else goto cgOup;
       cgOuo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_$cgmapQ_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOup: // global
           I64[Sp - 24] = block_cgOue_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugOut; else goto cgOuf;
       ugOut: // global
           call _cgOue(R1) args: 0, res: 0, upd: 0;
       cgOuf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapQ_info" {
     Data.Complex.$fDataComplex_$cgmapQ_info:
         const Data.Complex.$fDataComplex_$cgmapQ_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgOue() //  [R1]
         { []
         }
     {offset
       cgOue: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgOus; else goto cgOur;
       cgOus: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOur: // global
           _sgMNX::P64 = P64[R1 + 7];
           _sgMNY::P64 = P64[R1 + 15];
           I64[Hp - 120] = stg_ap_3_upd_info;
           _sgMNU::P64 = P64[Sp + 16];
           P64[Hp - 104] = _sgMNU::P64;
           _sgMNT::P64 = P64[Sp + 8];
           P64[Hp - 96] = _sgMNT::P64;
           P64[Hp - 88] = _sgMNY::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = Hp - 120;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sgMNU::P64;
           P64[Hp - 32] = _sgMNT::P64;
           P64[Hp - 24] = _sgMNX::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 78;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOue_info" {
     block_cgOue_info:
         const _cgOue;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.525957729 UTC

[section ""data" . Data.Complex.$fDataComplex2_closure" {
     Data.Complex.$fDataComplex2_closure:
         const Data.Complex.$fDataComplex2_info;
 },
 sat_sgMOb_entry() //  [R1]
         { []
         }
     {offset
       cgOv3: // global
           _sgMOb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOv4; else goto cgOv5;
       cgOv5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgOv7; else goto cgOv6;
       cgOv7: // global
           HpAlloc = 40;
           goto cgOv4;
       cgOv4: // global
           R1 = _sgMOb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOv6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMOb::P64;
           _sgMO2::P64 = P64[_sgMOb::P64 + 16];
           _sgMO3::P64 = P64[_sgMOb::P64 + 24];
           _sgMO4::P64 = P64[_sgMOb::P64 + 32];
           _sgMO5::P64 = P64[_sgMOb::P64 + 40];
           _sgMO8::P64 = P64[_sgMOb::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgMO5::P64;
           P64[Hp - 8] = _sgMO2::P64;
           P64[Hp] = _sgMO8::P64;
           R3 = Hp - 32;
           R2 = _sgMO4::P64;
           R1 = _sgMO3::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMOb_info" {
     sat_sgMOb_info:
         const sat_sgMOb_entry;
         const 5;
         const 15;
 },
 Data.Complex.$fDataComplex2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgOv8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgOv9; else goto cgOva;
       cgOv9: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOva: // global
           I64[Sp - 40] = block_cgOuS_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugOve; else goto cgOuT;
       ugOve: // global
           call _cgOuS(R1) args: 0, res: 0, upd: 0;
       cgOuT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex2_info" {
     Data.Complex.$fDataComplex2_info:
         const Data.Complex.$fDataComplex2_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgOuS() //  [R1]
         { []
         }
     {offset
       cgOuS: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgOvd; else goto cgOvc;
       cgOvd: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOvc: // global
           _sgMO8::P64 = P64[R1 + 7];
           _sgMO9::P64 = P64[R1 + 15];
           I64[Hp - 88] = stg_ap_3_upd_info;
           _sgMO5::P64 = P64[Sp + 32];
           P64[Hp - 72] = _sgMO5::P64;
           _sgMO2::P64 = P64[Sp + 8];
           P64[Hp - 64] = _sgMO2::P64;
           P64[Hp - 56] = _sgMO9::P64;
           I64[Hp - 48] = sat_sgMOb_info;
           P64[Hp - 32] = _sgMO2::P64;
           _sgMO3::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sgMO3::P64;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sgMO5::P64;
           P64[Hp] = _sgMO8::P64;
           R3 = Hp - 88;
           R2 = Hp - 48;
           R1 = _sgMO3::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOuS_info" {
     block_cgOuS_info:
         const _cgOuS;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.534948583 UTC

[section ""data" . Data.Complex.$fDataComplex3_closure" {
     Data.Complex.$fDataComplex3_closure:
         const Data.Complex.$fDataComplex3_info;
 },
 Data.Complex.$fDataComplex3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgOvF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOvN; else goto cgOvO;
       cgOvN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOvO: // global
           I64[Sp - 24] = block_cgOvC_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugOvU; else goto cgOvD;
       ugOvU: // global
           call _cgOvC(R1) args: 0, res: 0, upd: 0;
       cgOvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex3_info" {
     Data.Complex.$fDataComplex3_info:
         const Data.Complex.$fDataComplex3_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgOvC() //  [R1]
         { []
         }
     {offset
       cgOvC: // global
           I64[Sp - 8] = block_cgOvI_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           _sgMOi::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgMOi::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOvC_info" {
     block_cgOvC_info:
         const _cgOvC;
         const 2;
         const 30;
 },
 _cgOvI() //  [R1]
         { []
         }
     {offset
       cgOvI: // global
           _sgMOd::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgOvK_info;
           R3 = P64[Sp + 8];
           R2 = _sgMOd::P64;
           _sgMOj::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sgMOj::P64;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOvI_info" {
     block_cgOvI_info:
         const _cgOvI;
         const 3;
         const 30;
 },
 _cgOvK() //  [R1]
         { []
         }
     {offset
       cgOvK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOvT; else goto cgOvS;
       cgOvT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOvS: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOvK_info" {
     block_cgOvK_info:
         const _cgOvK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.55242107 UTC

[section ""data" . Data.Complex.$fDataComplex_$cgmapMo_closure" {
     Data.Complex.$fDataComplex_$cgmapMo_closure:
         const Data.Complex.$fDataComplex_$cgmapMo_info;
 },
 lvl17_sgMOp_entry() //  [R1]
         { []
         }
     {offset
       cgOwo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOwp; else goto cgOwq;
       cgOwp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOwq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgMOp_info" {
     lvl17_sgMOp_info:
         const lvl17_sgMOp_entry;
         const 1;
         const 16;
 },
 sat_sgMOX_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOwD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOwE; else goto cgOwF;
       cgOwE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOwF: // global
           I64[Sp - 24] = block_cgOwA_info;
           _sgMOp::P64 = P64[R1 + 7];
           _sgMOq::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgMOp::P64;
           P64[Sp - 8] = _sgMOq::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugOwX; else goto cgOwB;
       ugOwX: // global
           call _cgOwA(R1) args: 0, res: 0, upd: 0;
       cgOwB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMOX_info" {
     sat_sgMOX_info:
         const sat_sgMOX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgOwA() //  [R1]
         { []
         }
     {offset
       cgOwA: // global
           I64[Sp - 8] = block_cgOwI_info;
           _sgMOU::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMOU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOwW; else goto cgOwK;
       ugOwW: // global
           call _cgOwI(R1) args: 0, res: 0, upd: 0;
       cgOwK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOwA_info" {
     block_cgOwA_info:
         const _cgOwA;
         const 2;
         const 30;
 },
 _cgOwI() //  [R1]
         { []
         }
     {offset
       cgOwI: // global
           if (R1 & 7 == 1) goto cgOwQ; else goto cgOwU;
       cgOwQ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgOwU: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOwI_info" {
     block_cgOwI_info:
         const _cgOwI;
         const 3;
         const 30;
 },
 sat_sgMOL_entry() //  [R1]
         { []
         }
     {offset
       cgOxy: // global
           _sgMOL::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgOxz; else goto cgOxA;
       cgOxA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOxC; else goto cgOxB;
       cgOxC: // global
           HpAlloc = 56;
           goto cgOxz;
       cgOxz: // global
           R1 = _sgMOL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOxB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMOL::P64;
           _sgMOq::P64 = P64[_sgMOL::P64 + 16];
           _sgMOx::P64 = P64[_sgMOL::P64 + 24];
           _sgMOB::P64 = P64[_sgMOL::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgMOB::P64;
           P64[Hp - 24] = _sgMOx::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sgMOq::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMOL_info" {
     sat_sgMOL_info:
         const sat_sgMOL_entry;
         const 3;
         const 15;
 },
 sat_sgMOH_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOxO: // global
           _sgMOE::P64 = R2;
           _sgMOH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOxP; else goto cgOxQ;
       cgOxQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOxS; else goto cgOxR;
       cgOxS: // global
           HpAlloc = 56;
           goto cgOxP;
       cgOxP: // global
           R2 = _sgMOE::P64;
           R1 = _sgMOH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOxR: // global
           _sgMOq::P64 = P64[_sgMOH::P64 + 7];
           _sgMOB::P64 = P64[_sgMOH::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgMOB::P64;
           P64[Hp - 24] = _sgMOE::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgMOq::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMOH_info" {
     sat_sgMOH_info:
         const sat_sgMOH_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgMOI_entry() //  [R1]
         { []
         }
     {offset
       cgOxT: // global
           _sgMOI::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgOxU; else goto cgOxV;
       cgOxV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOxX; else goto cgOxW;
       cgOxX: // global
           HpAlloc = 24;
           goto cgOxU;
       cgOxU: // global
           R1 = _sgMOI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOxW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMOI::P64;
           _sgMOq::P64 = P64[_sgMOI::P64 + 16];
           _sgMOy::P64 = P64[_sgMOI::P64 + 24];
           _sgMOB::P64 = P64[_sgMOI::P64 + 32];
           I64[Hp - 16] = sat_sgMOH_info;
           P64[Hp - 8] = _sgMOq::P64;
           P64[Hp] = _sgMOB::P64;
           R2 = _sgMOq::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgMOy::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMOI_info" {
     sat_sgMOI_info:
         const sat_sgMOI_entry;
         const 3;
         const 15;
 },
 sat_sgMOO_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOxY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgOxZ; else goto cgOy0;
       cgOxZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOy0: // global
           I64[Sp - 40] = block_cgOxi_info;
           _sgMOm::P64 = P64[R1 + 7];
           _sgMOq::P64 = P64[R1 + 15];
           _sgMOx::P64 = P64[R1 + 23];
           _sgMOy::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgMOm::P64;
           P64[Sp - 24] = _sgMOq::P64;
           P64[Sp - 16] = _sgMOx::P64;
           P64[Sp - 8] = _sgMOy::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugOyh; else goto cgOxj;
       ugOyh: // global
           call _cgOxi(R1) args: 0, res: 0, upd: 0;
       cgOxj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMOO_info" {
     sat_sgMOO_info:
         const sat_sgMOO_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgOxi() //  [R1]
         { []
         }
     {offset
       cgOxi: // global
           I64[Sp - 8] = block_cgOxn_info;
           _sgMOB::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMOB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOyg; else goto cgOxo;
       ugOyg: // global
           call _cgOxn(R1) args: 0, res: 0, upd: 0;
       cgOxo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOxi_info" {
     block_cgOxi_info:
         const _cgOxi;
         const 4;
         const 30;
 },
 _cgOxn() //  [R1]
         { []
         }
     {offset
       cgOxn: // global
           _sgMOq::P64 = P64[Sp + 24];
           _sgMOx::P64 = P64[Sp + 32];
           _sgMOB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cgOy3; else goto cgOy7;
       cgOy3: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgOy6; else goto cgOy5;
       cgOy6: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOy5: // global
           I64[Hp - 72] = sat_sgMOL_info;
           P64[Hp - 56] = _sgMOq::P64;
           P64[Hp - 48] = _sgMOx::P64;
           P64[Hp - 40] = _sgMOB::P64;
           I64[Hp - 32] = sat_sgMOI_info;
           P64[Hp - 16] = _sgMOq::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgMOB::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cgOy7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOyc; else goto cgOyb;
       cgOyc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOyb: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgMOB::P64;
           P64[Hp - 24] = _sgMOx::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgMOq::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOxn_info" {
     block_cgOxn_info:
         const _cgOxn;
         const 5;
         const 30;
 },
 k_sgMOu_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOyi: // global
           _sgMOx::P64 = R4;
           _sgMOw::P64 = R3;
           _sgMOv::P64 = R2;
           _sgMOu::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgOyj; else goto cgOyk;
       cgOyk: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgOym; else goto cgOyl;
       cgOym: // global
           HpAlloc = 80;
           goto cgOyj;
       cgOyj: // global
           R4 = _sgMOx::P64;
           R3 = _sgMOw::P64;
           R2 = _sgMOv::P64;
           R1 = _sgMOu::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOyl: // global
           _sgMOm::P64 = P64[_sgMOu::P64 + 5];
           _sgMOn::P64 = P64[_sgMOu::P64 + 13];
           _sgMOq::P64 = P64[_sgMOu::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sgMOn::P64;
           P64[Hp - 48] = _sgMOv::P64;
           P64[Hp - 40] = _sgMOx::P64;
           I64[Hp - 32] = sat_sgMOO_info;
           P64[Hp - 24] = _sgMOm::P64;
           P64[Hp - 16] = _sgMOq::P64;
           P64[Hp - 8] = _sgMOx::P64;
           P64[Hp] = Hp - 72;
           R2 = _sgMOq::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgMOw::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sgMOu_info" {
     k_sgMOu_info:
         const k_sgMOu_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sgMOP_entry() //  [R1]
         { []
         }
     {offset
       cgOyv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOyw; else goto cgOyx;
       cgOyw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOyx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fDataComplex1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMOP_info" {
     sat_sgMOP_info:
         const sat_sgMOP_entry;
         const 1;
         const 16;
 },
 sat_sgMOQ_entry() //  [R1]
         { []
         }
     {offset
       cgOyy: // global
           _sgMOQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgOyz; else goto cgOyA;
       cgOyA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOyC; else goto cgOyB;
       cgOyC: // global
           HpAlloc = 24;
           goto cgOyz;
       cgOyz: // global
           R1 = _sgMOQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOyB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMOQ::P64;
           _sgMOl::P64 = P64[_sgMOQ::P64 + 16];
           _sgMOq::P64 = P64[_sgMOQ::P64 + 24];
           _sgMOs::P64 = P64[_sgMOQ::P64 + 32];
           _sgMOu::P64 = P64[_sgMOQ::P64 + 40];
           I64[Hp - 16] = sat_sgMOP_info;
           P64[Hp] = _sgMOq::P64;
           R4 = _sgMOs::P64;
           R3 = Hp - 16;
           R2 = _sgMOl::P64;
           R1 = _sgMOu::P64;
           Sp = Sp - 16;
           call k_sgMOu_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMOQ_info" {
     sat_sgMOQ_info:
         const sat_sgMOQ_entry;
         const 4;
         const 15;
 },
 sat_sgMOR_entry() //  [R1]
         { []
         }
     {offset
       cgOyD: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgOyE; else goto cgOyF;
       cgOyE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgOyF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgOx2_info;
           _sgMOl::P64 = P64[R1 + 16];
           _sgMOm::P64 = P64[R1 + 24];
           _sgMOn::P64 = P64[R1 + 32];
           _sgMOq::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _sgMOl::P64;
           P64[Sp - 40] = _sgMOm::P64;
           P64[Sp - 32] = _sgMOn::P64;
           P64[Sp - 24] = _sgMOq::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ugOyJ; else goto cgOx3;
       ugOyJ: // global
           call _cgOx2(R1) args: 0, res: 0, upd: 0;
       cgOx3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMOR_info" {
     sat_sgMOR_info:
         const sat_sgMOR_entry;
         const 5;
         const 15;
 },
 _cgOx2() //  [R1]
         { []
         }
     {offset
       cgOx2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgOyI; else goto cgOyH;
       cgOyI: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgOyH: // global
           _sgMOs::P64 = P64[R1 + 7];
           _sgMOt::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sgMOu_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           _sgMOq::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgMOq::P64;
           I64[Hp - 40] = sat_sgMOQ_info;
           _sgMOl::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sgMOl::P64;
           P64[Hp - 16] = _sgMOq::P64;
           P64[Hp - 8] = _sgMOs::P64;
           _cgOx7::P64 = Hp - 69;
           P64[Hp] = _cgOx7::P64;
           R4 = _sgMOt::P64;
           R3 = Hp - 40;
           R2 = _sgMOl::P64;
           R1 = _cgOx7::P64;
           Sp = Sp + 40;
           call k_sgMOu_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgOx2_info" {
     block_cgOx2_info:
         const _cgOx2;
         const 4;
         const 30;
 },
 Data.Complex.$fDataComplex_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgOyK: // global
           _sgMOo::P64 = R5;
           _sgMOn::P64 = R4;
           _sgMOm::P64 = R3;
           _sgMOl::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgOyL; else goto cgOyM;
       cgOyM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOyO; else goto cgOyN;
       cgOyO: // global
           HpAlloc = 24;
           goto cgOyL;
       cgOyL: // global
           R5 = _sgMOo::P64;
           R4 = _sgMOn::P64;
           R3 = _sgMOm::P64;
           R2 = _sgMOl::P64;
           R1 = Data.Complex.$fDataComplex_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOyN: // global
           I64[Hp - 16] = lvl17_sgMOp_info;
           P64[Hp] = _sgMOm::P64;
           I64[Sp - 48] = block_cgOwr_info;
           R2 = _sgMOm::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgMOl::P64;
           P64[Sp - 24] = _sgMOm::P64;
           P64[Sp - 16] = _sgMOn::P64;
           P64[Sp - 8] = _sgMOo::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_$cgmapMo_info" {
     Data.Complex.$fDataComplex_$cgmapMo_info:
         const Data.Complex.$fDataComplex_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgOwr() //  [R1]
         { []
         }
     {offset
       cgOwr: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgOyR; else goto cgOyQ;
       cgOyR: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOyQ: // global
           I64[Hp - 72] = sat_sgMOX_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sgMOR_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOwr_info" {
     block_cgOwr_info:
         const _cgOwr;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.587203665 UTC

[section ""data" . lvl14_rgA6z_closure" {
     lvl14_rgA6z_closure:
         const lvl14_rgA6z_info;
         const 0;
 },
 lvl14_rgA6z_entry() //  [R2]
         { []
         }
     {offset
       cgOBf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgOBg; else goto cgOBh;
       cgOBg: // global
           R2 = R2;
           R1 = lvl14_rgA6z_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOBh: // global
           I64[Sp - 8] = block_cgOBc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOBl; else goto cgOBd;
       ugOBl: // global
           call _cgOBc() args: 0, res: 0, upd: 0;
       cgOBd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl14_rgA6z_info" {
     lvl14_rgA6z_info:
         const lvl14_rgA6z_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+224;
 },
 _cgOBc() //  []
         { []
         }
     {offset
       cgOBc: // global
           R1 = Data.Complex.$c:+_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOBc_info" {
     block_cgOBc_info:
         const _cgOBc;
         const 0;
         const 4294967326;
         const SgNTw_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.592421011 UTC

[section ""data" . lvl15_rgA6A_closure" {
     lvl15_rgA6A_closure:
         const lvl15_rgA6A_info;
         const 0;
 },
 lvl15_rgA6A_entry() //  []
         { []
         }
     {offset
       cgOBB: // global
           R1 = Data.Complex.$tComplex_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_rgA6A_info" {
     lvl15_rgA6A_info:
         const lvl15_rgA6A_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgNTw_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.596268538 UTC

[section ""data" . lvl16_rgA6B_closure" {
     lvl16_rgA6B_closure:
         const lvl16_rgA6B_info;
 },
 lvl16_rgA6B_entry() //  []
         { []
         }
     {offset
       cgOBN: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl16_rgA6B_info" {
     lvl16_rgA6B_info:
         const lvl16_rgA6B_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.603757407 UTC

[section ""data" . Data.Complex.$fDataComplex_closure" {
     Data.Complex.$fDataComplex_closure:
         const Data.Complex.$fDataComplex_info;
         const 0;
 },
 sat_sgMPh_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOC5: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapMo_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPh_info" {
     sat_sgMPh_info:
         const sat_sgMPh_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgMPg_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOCd: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapMp_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPg_info" {
     sat_sgMPg_info:
         const sat_sgMPg_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgMPf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOCl: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapM_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPf_info" {
     sat_sgMPf_info:
         const sat_sgMPf_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgMPe_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgOCt: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgmapQi_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPe_info" {
     sat_sgMPe_info:
         const sat_sgMPe_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SgNTw_srt+216;
 },
 sat_sgMPd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgOCB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fDataComplex_$cgmapQ_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPd_info" {
     sat_sgMPd_info:
         const sat_sgMPd_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgMPc_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgOCJ: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fDataComplex_$cgmapQr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPc_info" {
     sat_sgMPc_info:
         const sat_sgMPc_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sgMPb_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgOCR: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Complex.$fDataComplex2_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPb_info" {
     sat_sgMPb_info:
         const sat_sgMPb_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sgMPa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgOCZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fDataComplex3_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMPa_info" {
     sat_sgMPa_info:
         const sat_sgMPa_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgMP9_entry() //  [R1, R2]
         { []
         }
     {offset
       cgOD7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fDataComplex_$cdataCast1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMP9_info" {
     sat_sgMP9_info:
         const sat_sgMP9_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+200;
 },
 sat_sgMP8_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgODf: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgunfold_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMP8_info" {
     sat_sgMP8_info:
         const sat_sgMP8_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgMP7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgODn: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Complex.$fDataComplex_$cgfoldl_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgMP7_info" {
     sat_sgMP7_info:
         const sat_sgMP7_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sgMP6_entry() //  [R1]
         { []
         }
     {offset
       cgODu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgODv; else goto cgODw;
       cgODv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgODw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fDataComplex10_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMP6_info" {
     sat_sgMP6_info:
         const sat_sgMP6_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+184;
 },
 Data.Complex.$fDataComplex_entry() //  [R2]
         { []
         }
     {offset
       cgODy: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cgODC; else goto cgODB;
       cgODC: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Complex.$fDataComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgODB: // global
           I64[Hp - 320] = sat_sgMPh_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sgMPg_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sgMPf_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sgMPe_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sgMPd_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sgMPc_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sgMPb_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sgMPa_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sgMP9_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sgMP8_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sgMP7_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sgMP6_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl14_rgA6z_closure+1;
           P64[Hp - 80] = lvl15_rgA6A_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl16_rgA6B_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fDataComplex_info" {
     Data.Complex.$fDataComplex_info:
         const Data.Complex.$fDataComplex_entry;
         const 0;
         const 3663607103502;
         const 4294967301;
         const SgNTw_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.625711096 UTC

[section ""data" . Data.Complex.$fFloatingComplex9_closure" {
     Data.Complex.$fFloatingComplex9_closure:
         const GHC.Types.F#_con_info;
         const 0.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.627471479 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cpi1_closure" {
     Data.Complex.$fFloatingComplex_$s$cpi1_closure:
         const Data.Complex.:+_con_info;
         const GHC.Float.$fFloatingFloat_$cpi_closure;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.631138055 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexp1_closure" {
     Data.Complex.$fFloatingComplex_$s$cexp1_closure:
         const Data.Complex.$fFloatingComplex_$s$cexp1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexp1_entry() //  [R2]
         { []
         }
     {offset
       cgOEV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOFt; else goto cgOFu;
       cgOFt: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexp1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOFu: // global
           I64[Sp - 8] = block_cgOES_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOFB; else goto cgOET;
       ugOFB: // global
           call _cgOES(R1) args: 0, res: 0, upd: 0;
       cgOET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexp1_info" {
     Data.Complex.$fFloatingComplex_$s$cexp1_info:
         const Data.Complex.$fFloatingComplex_$s$cexp1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOES() //  [R1]
         { []
         }
     {offset
       cgOES: // global
           I64[Sp - 8] = block_cgOEY_info;
           _sgMPl::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMPl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOFA; else goto cgOEZ;
       ugOFA: // global
           call _cgOEY(R1) args: 0, res: 0, upd: 0;
       cgOEZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOES_info" {
     block_cgOES_info:
         const _cgOES;
         const 0;
         const 30;
 },
 _cgOEY() //  [R1]
         { []
         }
     {offset
       cgOEY: // global
           I64[Sp] = block_cgOF3_info;
           _sgMPn::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMPn::F32;
           if (R1 & 7 != 0) goto ugOFC; else goto cgOF4;
       ugOFC: // global
           call _cgOF3(R1) args: 0, res: 0, upd: 0;
       cgOF4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOEY_info" {
     block_cgOEY_info:
         const _cgOEY;
         const 1;
         const 30;
 },
 _cgOF3() //  [R1]
         { []
         }
     {offset
       cgOF3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOFz; else goto cgOFy;
       cgOFz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOFy: // global
           _sgMPp::F32 = F32[R1 + 7];
           (_cgOF8::F32) = call MO_F32_Exp(F32[Sp + 8]);
           (_cgOFc::F32) = call MO_F32_Sin(_sgMPp::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgOF8::F32, _cgOFc::F32);
           (_cgOFk::F32) = call MO_F32_Cos(_sgMPp::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgOF8::F32, _cgOFk::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOF3_info" {
     block_cgOF3_info:
         const _cgOF3;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.642624889 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csin1_closure" {
     Data.Complex.$fFloatingComplex_$s$csin1_closure:
         const Data.Complex.$fFloatingComplex_$s$csin1_info;
 },
 Data.Complex.$fFloatingComplex_$s$csin1_entry() //  [R2]
         { []
         }
     {offset
       cgOGe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOGQ; else goto cgOGR;
       cgOGQ: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOGR: // global
           I64[Sp - 8] = block_cgOGb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOGY; else goto cgOGc;
       ugOGY: // global
           call _cgOGb(R1) args: 0, res: 0, upd: 0;
       cgOGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csin1_info" {
     Data.Complex.$fFloatingComplex_$s$csin1_info:
         const Data.Complex.$fFloatingComplex_$s$csin1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOGb() //  [R1]
         { []
         }
     {offset
       cgOGb: // global
           I64[Sp - 8] = block_cgOGh_info;
           _sgMPz::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMPz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOGX; else goto cgOGi;
       ugOGX: // global
           call _cgOGh(R1) args: 0, res: 0, upd: 0;
       cgOGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOGb_info" {
     block_cgOGb_info:
         const _cgOGb;
         const 0;
         const 30;
 },
 _cgOGh() //  [R1]
         { []
         }
     {offset
       cgOGh: // global
           I64[Sp] = block_cgOGm_info;
           _sgMPC::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMPC::F32;
           if (R1 & 7 != 0) goto ugOGZ; else goto cgOGn;
       ugOGZ: // global
           call _cgOGm(R1) args: 0, res: 0, upd: 0;
       cgOGn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOGh_info" {
     block_cgOGh_info:
         const _cgOGh;
         const 1;
         const 30;
 },
 _cgOGm() //  [R1]
         { []
         }
     {offset
       cgOGm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOGW; else goto cgOGV;
       cgOGW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOGV: // global
           _sgMPC::F32 = F32[Sp + 8];
           _sgMPE::F32 = F32[R1 + 7];
           (_cgOGr::F32) = call MO_F32_Sinh(_sgMPC::F32);
           (_cgOGv::F32) = call MO_F32_Cos(_sgMPE::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgOGv::F32, _cgOGr::F32);
           (_cgOGD::F32) = call MO_F32_Cosh(_sgMPC::F32);
           (_cgOGH::F32) = call MO_F32_Sin(_sgMPE::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgOGH::F32, _cgOGD::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOGm_info" {
     block_cgOGm_info:
         const _cgOGm;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.653017794 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccos1_closure" {
     Data.Complex.$fFloatingComplex_$s$ccos1_closure:
         const Data.Complex.$fFloatingComplex_$s$ccos1_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccos1_entry() //  [R2]
         { []
         }
     {offset
       cgOHB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOIg; else goto cgOIh;
       cgOIg: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccos1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOIh: // global
           I64[Sp - 8] = block_cgOHy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOIo; else goto cgOHz;
       ugOIo: // global
           call _cgOHy(R1) args: 0, res: 0, upd: 0;
       cgOHz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccos1_info" {
     Data.Complex.$fFloatingComplex_$s$ccos1_info:
         const Data.Complex.$fFloatingComplex_$s$ccos1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOHy() //  [R1]
         { []
         }
     {offset
       cgOHy: // global
           I64[Sp - 8] = block_cgOHE_info;
           _sgMPP::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMPP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOIn; else goto cgOHF;
       ugOIn: // global
           call _cgOHE(R1) args: 0, res: 0, upd: 0;
       cgOHF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOHy_info" {
     block_cgOHy_info:
         const _cgOHy;
         const 0;
         const 30;
 },
 _cgOHE() //  [R1]
         { []
         }
     {offset
       cgOHE: // global
           I64[Sp] = block_cgOHJ_info;
           _sgMPS::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMPS::F32;
           if (R1 & 7 != 0) goto ugOIp; else goto cgOHK;
       ugOIp: // global
           call _cgOHJ(R1) args: 0, res: 0, upd: 0;
       cgOHK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOHE_info" {
     block_cgOHE_info:
         const _cgOHE;
         const 1;
         const 30;
 },
 _cgOHJ() //  [R1]
         { []
         }
     {offset
       cgOHJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOIm; else goto cgOIl;
       cgOIm: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOIl: // global
           _sgMPS::F32 = F32[Sp + 8];
           _sgMPU::F32 = F32[R1 + 7];
           (_cgOHO::F32) = call MO_F32_Sinh(_sgMPS::F32);
           (_cgOHS::F32) = call MO_F32_Sin(_sgMPU::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgOHS::F32,
                                                      _cgOHO::F32));
           (_cgOI3::F32) = call MO_F32_Cosh(_sgMPS::F32);
           (_cgOI7::F32) = call MO_F32_Cos(_sgMPU::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgOI7::F32, _cgOI3::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOHJ_info" {
     block_cgOHJ_info:
         const _cgOHJ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.66374499 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csinh1_closure" {
     Data.Complex.$fFloatingComplex_$s$csinh1_closure:
         const Data.Complex.$fFloatingComplex_$s$csinh1_info;
 },
 Data.Complex.$fFloatingComplex_$s$csinh1_entry() //  [R2]
         { []
         }
     {offset
       cgOJ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOJF; else goto cgOJG;
       cgOJF: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csinh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOJG: // global
           I64[Sp - 8] = block_cgOJ0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOJN; else goto cgOJ1;
       ugOJN: // global
           call _cgOJ0(R1) args: 0, res: 0, upd: 0;
       cgOJ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csinh1_info" {
     Data.Complex.$fFloatingComplex_$s$csinh1_info:
         const Data.Complex.$fFloatingComplex_$s$csinh1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOJ0() //  [R1]
         { []
         }
     {offset
       cgOJ0: // global
           I64[Sp - 8] = block_cgOJ6_info;
           _sgMQ7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMQ7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOJM; else goto cgOJ7;
       ugOJM: // global
           call _cgOJ6(R1) args: 0, res: 0, upd: 0;
       cgOJ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOJ0_info" {
     block_cgOJ0_info:
         const _cgOJ0;
         const 0;
         const 30;
 },
 _cgOJ6() //  [R1]
         { []
         }
     {offset
       cgOJ6: // global
           I64[Sp] = block_cgOJb_info;
           _sgMQ9::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMQ9::F32;
           if (R1 & 7 != 0) goto ugOJO; else goto cgOJc;
       ugOJO: // global
           call _cgOJb(R1) args: 0, res: 0, upd: 0;
       cgOJc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOJ6_info" {
     block_cgOJ6_info:
         const _cgOJ6;
         const 1;
         const 30;
 },
 _cgOJb() //  [R1]
         { []
         }
     {offset
       cgOJb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOJL; else goto cgOJK;
       cgOJL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOJK: // global
           _sgMQ9::F32 = F32[Sp + 8];
           _sgMQb::F32 = F32[R1 + 7];
           (_cgOJg::F32) = call MO_F32_Cosh(_sgMQ9::F32);
           (_cgOJk::F32) = call MO_F32_Sin(_sgMQb::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgOJk::F32, _cgOJg::F32);
           (_cgOJs::F32) = call MO_F32_Sinh(_sgMQ9::F32);
           (_cgOJw::F32) = call MO_F32_Cos(_sgMQb::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgOJw::F32, _cgOJs::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOJb_info" {
     block_cgOJb_info:
         const _cgOJb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.674372706 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccosh1_closure" {
     Data.Complex.$fFloatingComplex_$s$ccosh1_closure:
         const Data.Complex.$fFloatingComplex_$s$ccosh1_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccosh1_entry() //  [R2]
         { []
         }
     {offset
       cgOKq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOL2; else goto cgOL3;
       cgOL2: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccosh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOL3: // global
           I64[Sp - 8] = block_cgOKn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOLa; else goto cgOKo;
       ugOLa: // global
           call _cgOKn(R1) args: 0, res: 0, upd: 0;
       cgOKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccosh1_info" {
     Data.Complex.$fFloatingComplex_$s$ccosh1_info:
         const Data.Complex.$fFloatingComplex_$s$ccosh1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOKn() //  [R1]
         { []
         }
     {offset
       cgOKn: // global
           I64[Sp - 8] = block_cgOKt_info;
           _sgMQn::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMQn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOL9; else goto cgOKu;
       ugOL9: // global
           call _cgOKt(R1) args: 0, res: 0, upd: 0;
       cgOKu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOKn_info" {
     block_cgOKn_info:
         const _cgOKn;
         const 0;
         const 30;
 },
 _cgOKt() //  [R1]
         { []
         }
     {offset
       cgOKt: // global
           I64[Sp] = block_cgOKy_info;
           _sgMQp::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMQp::F32;
           if (R1 & 7 != 0) goto ugOLb; else goto cgOKz;
       ugOLb: // global
           call _cgOKy(R1) args: 0, res: 0, upd: 0;
       cgOKz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOKt_info" {
     block_cgOKt_info:
         const _cgOKt;
         const 1;
         const 30;
 },
 _cgOKy() //  [R1]
         { []
         }
     {offset
       cgOKy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOL8; else goto cgOL7;
       cgOL8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOL7: // global
           _sgMQp::F32 = F32[Sp + 8];
           _sgMQr::F32 = F32[R1 + 7];
           (_cgOKD::F32) = call MO_F32_Sinh(_sgMQp::F32);
           (_cgOKH::F32) = call MO_F32_Sin(_sgMQr::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgOKH::F32, _cgOKD::F32);
           (_cgOKP::F32) = call MO_F32_Cosh(_sgMQp::F32);
           (_cgOKT::F32) = call MO_F32_Cos(_sgMQr::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgOKT::F32, _cgOKP::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOKy_info" {
     block_cgOKy_info:
         const _cgOKy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.686588362 UTC

[section ""data" . Data.Complex.$w$s$c/1_closure" {
     Data.Complex.$w$s$c/1_closure:
         const Data.Complex.$w$s$c/1_info;
         const 0;
 },
 Data.Complex.$w$s$c/1_slow() //  [R1]
         { []
         }
     {offset
       cgOLH: // global
           F4 = F32[Sp + 24];
           F3 = F32[Sp + 16];
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c/1_entry() //  [F1, F2, F3, F4]
         { []
         }
     {offset
       cgOLN: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgOLR; else goto cgOLS;
       cgOLR: // global
           R1 = Data.Complex.$w$s$c/1_closure;
           F32[Sp - 32] = F1;
           F32[Sp - 24] = F2;
           F32[Sp - 16] = F3;
           F32[Sp - 8] = F4;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cgOLS: // global
           I64[Sp - 40] = block_cgOLL_info;
           _sgMQA::F32 = F1;
           F1 = F3;
           F32[Sp - 32] = _sgMQA::F32;
           F32[Sp - 24] = F2;
           F32[Sp - 16] = F3;
           F32[Sp - 8] = F4;
           Sp = Sp - 40;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c/1_info" {
     Data.Complex.$w$s$c/1_info:
         const Data.Complex.$w$s$c/1_entry;
         const 0;
         const 12884901902;
         const 17179869184;
         const SgNTw_srt+264;
         const 964;
         const Data.Complex.$w$s$c/1_slow;
 },
 _cgOLL() //  [R1]
         { []
         }
     {offset
       cgOLL: // global
           I64[Sp - 8] = block_cgOLQ_info;
           F1 = F32[Sp + 32];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOLL_info" {
     block_cgOLL_info:
         const _cgOLL;
         const 964;
         const 4294967326;
         const SgNTw_srt+264;
 },
 _cgOLQ() //  [R1]
         { []
         }
     {offset
       cgOLQ: // global
           _sgMQC::F32 = F32[Sp + 32];
           _sgMQE::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgMQE::I64, R1)) goto cgOMS; else goto cgOMT;
       cgOMS: // global
           _sgMQH::I64 = -_sgMQE::I64;
           goto sgMQG;
       cgOMT: // global
           _sgMQH::I64 = -R1;
           goto sgMQG;
       sgMQG: // global
           I64[Sp] = block_cgOM3_info;
           F1 = _sgMQC::F32;
           R2 = _sgMQH::I64;
           I64[Sp + 8] = _sgMQH::I64;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOLQ_info" {
     block_cgOLQ_info:
         const _cgOLQ;
         const 1989;
         const 30;
 },
 _cgOM3() //  [F1]
         { []
         }
     {offset
       cgOM3: // global
           I64[Sp] = block_cgOM7_info;
           _sgMQI::F32 = F1;
           F1 = F32[Sp + 40];
           R2 = I64[Sp + 8];
           F32[Sp + 8] = _sgMQI::F32;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOM3_info" {
     block_cgOM3_info:
         const _cgOM3;
         const 1989;
         const 30;
 },
 _cgOM7() //  [F1]
         { []
         }
     {offset
       cgOM7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgOMO; else goto cgOMN;
       cgOMO: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgOMN: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           _sgMQA::F32 = F32[Sp + 16];
           _sgMQB::F32 = F32[Sp + 24];
           _sgMQI::F32 = F32[Sp + 8];
           _sgMQK::F32 = %MO_F_Add_W32(%MO_F_Mul_W32(F32[Sp + 32],
                                                     _sgMQI::F32),
                                       %MO_F_Mul_W32(F32[Sp + 40], F1));
           F32[Hp - 16] = %MO_F_Quot_W32(%MO_F_Sub_W32(%MO_F_Mul_W32(_sgMQB::F32,
                                                                     _sgMQI::F32),
                                                       %MO_F_Mul_W32(_sgMQA::F32, F1)),
                                         _sgMQK::F32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(%MO_F_Add_W32(%MO_F_Mul_W32(_sgMQA::F32,
                                                                _sgMQI::F32),
                                                  %MO_F_Mul_W32(_sgMQB::F32, F1)),
                                    _sgMQK::F32);
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOM7_info" {
     block_cgOM7_info:
         const _cgOM7;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.700152838 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c/1_closure" {
     Data.Complex.$fFloatingComplex_$s$c/1_closure:
         const Data.Complex.$fFloatingComplex_$s$c/1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c/1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgONM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOOh; else goto cgOOi;
       cgOOh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c/1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOOi: // global
           I64[Sp - 16] = block_cgONJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugOOt; else goto cgONK;
       ugOOt: // global
           call _cgONJ(R1) args: 0, res: 0, upd: 0;
       cgONK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c/1_info" {
     Data.Complex.$fFloatingComplex_$s$c/1_info:
         const Data.Complex.$fFloatingComplex_$s$c/1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+272;
 },
 _cgONJ() //  [R1]
         { []
         }
     {offset
       cgONJ: // global
           I64[Sp - 8] = block_cgONP_info;
           _sgMR4::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMR4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOOs; else goto cgONQ;
       ugOOs: // global
           call _cgONP(R1) args: 0, res: 0, upd: 0;
       cgONQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgONJ_info" {
     block_cgONJ_info:
         const _cgONJ;
         const 1;
         const 4294967326;
         const SgNTw_srt+272;
 },
 _cgONP() //  [R1]
         { []
         }
     {offset
       cgONP: // global
           I64[Sp] = block_cgONU_info;
           _sgMR6::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMR6::F32;
           if (R1 & 7 != 0) goto ugOOu; else goto cgONV;
       ugOOu: // global
           call _cgONU(R1) args: 0, res: 0, upd: 0;
       cgONV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgONP_info" {
     block_cgONP_info:
         const _cgONP;
         const 2;
         const 4294967326;
         const SgNTw_srt+272;
 },
 _cgONU() //  [R1]
         { []
         }
     {offset
       cgONU: // global
           I64[Sp] = block_cgONZ_info;
           _sgMR8::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgMR8::F32;
           if (R1 & 7 != 0) goto ugOOv; else goto cgOO0;
       ugOOv: // global
           call _cgONZ(R1) args: 0, res: 0, upd: 0;
       cgOO0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgONU_info" {
     block_cgONU_info:
         const _cgONU;
         const 66;
         const 4294967326;
         const SgNTw_srt+272;
 },
 _cgONZ() //  [R1]
         { []
         }
     {offset
       cgONZ: // global
           I64[Sp - 8] = block_cgOO4_info;
           _sgMRb::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMRb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOOw; else goto cgOO5;
       ugOOw: // global
           call _cgOO4(R1) args: 0, res: 0, upd: 0;
       cgOO5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgONZ_info" {
     block_cgONZ_info:
         const _cgONZ;
         const 194;
         const 4294967326;
         const SgNTw_srt+272;
 },
 _cgOO4() //  [R1]
         { []
         }
     {offset
       cgOO4: // global
           I64[Sp] = block_cgOO9_info;
           _sgMRd::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMRd::F32;
           if (R1 & 7 != 0) goto ugOOx; else goto cgOOa;
       ugOOx: // global
           call _cgOO9(R1) args: 0, res: 0, upd: 0;
       cgOOa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOO4_info" {
     block_cgOO4_info:
         const _cgOO4;
         const 387;
         const 4294967326;
         const SgNTw_srt+272;
 },
 _cgOO9() //  [R1]
         { []
         }
     {offset
       cgOO9: // global
           _sgMR8::F32 = F32[Sp + 24];
           I64[Sp + 24] = block_cgOOe_info;
           F4 = F32[R1 + 7];
           F3 = F32[Sp + 8];
           F2 = _sgMR8::F32;
           F1 = F32[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOO9_info" {
     block_cgOO9_info:
         const _cgOO9;
         const 451;
         const 4294967326;
         const SgNTw_srt+272;
 },
 _cgOOe() //  [R1, R2]
         { []
         }
     {offset
       cgOOe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOOr; else goto cgOOq;
       cgOOr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgOOq: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOOe_info" {
     block_cgOOe_info:
         const _cgOOe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.716037728 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromRational1_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromRational1_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cfromRational1_entry() //  [R2]
         { []
         }
     {offset
       cgOPk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgOPs; else goto cgOPt;
       cgOPs: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromRational1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOPt: // global
           I64[Sp - 8] = block_cgOPh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOPy; else goto cgOPi;
       ugOPy: // global
           call _cgOPh(R1) args: 0, res: 0, upd: 0;
       cgOPi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromRational1_info" {
     Data.Complex.$fFloatingComplex_$s$cfromRational1_info:
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+288;
 },
 _cgOPh() //  [R1]
         { []
         }
     {offset
       cgOPh: // global
           I64[Sp] = block_cgOPn_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Float.rationalToFloat_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOPh_info" {
     block_cgOPh_info:
         const _cgOPh;
         const 0;
         const 4294967326;
         const SgNTw_srt+288;
 },
 _cgOPn() //  [R1]
         { []
         }
     {offset
       cgOPn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOPx; else goto cgOPw;
       cgOPx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOPw: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOPn_info" {
     block_cgOPn_info:
         const _cgOPn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.725125296 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c+1_closure" {
     Data.Complex.$fFloatingComplex_$s$c+1_closure:
         const Data.Complex.$fFloatingComplex_$s$c+1_info;
 },
 Data.Complex.$fFloatingComplex_$s$c+1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOPX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOQy; else goto cgOQz;
       cgOQy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c+1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOQz: // global
           I64[Sp - 16] = block_cgOPU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugOQJ; else goto cgOPV;
       ugOQJ: // global
           call _cgOPU(R1) args: 0, res: 0, upd: 0;
       cgOPV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c+1_info" {
     Data.Complex.$fFloatingComplex_$s$c+1_info:
         const Data.Complex.$fFloatingComplex_$s$c+1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgOPU() //  [R1]
         { []
         }
     {offset
       cgOPU: // global
           I64[Sp - 8] = block_cgOQ0_info;
           _sgMRt::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMRt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOQI; else goto cgOQ1;
       ugOQI: // global
           call _cgOQ0(R1) args: 0, res: 0, upd: 0;
       cgOQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOPU_info" {
     block_cgOPU_info:
         const _cgOPU;
         const 1;
         const 30;
 },
 _cgOQ0() //  [R1]
         { []
         }
     {offset
       cgOQ0: // global
           I64[Sp] = block_cgOQ5_info;
           _sgMRv::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMRv::F32;
           if (R1 & 7 != 0) goto ugOQK; else goto cgOQ6;
       ugOQK: // global
           call _cgOQ5(R1) args: 0, res: 0, upd: 0;
       cgOQ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOQ0_info" {
     block_cgOQ0_info:
         const _cgOQ0;
         const 2;
         const 30;
 },
 _cgOQ5() //  [R1]
         { []
         }
     {offset
       cgOQ5: // global
           I64[Sp] = block_cgOQa_info;
           _sgMRx::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgMRx::F32;
           if (R1 & 7 != 0) goto ugOQL; else goto cgOQb;
       ugOQL: // global
           call _cgOQa(R1) args: 0, res: 0, upd: 0;
       cgOQb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOQ5_info" {
     block_cgOQ5_info:
         const _cgOQ5;
         const 66;
         const 30;
 },
 _cgOQa() //  [R1]
         { []
         }
     {offset
       cgOQa: // global
           I64[Sp - 8] = block_cgOQf_info;
           _sgMRA::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMRA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOQM; else goto cgOQg;
       ugOQM: // global
           call _cgOQf(R1) args: 0, res: 0, upd: 0;
       cgOQg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOQa_info" {
     block_cgOQa_info:
         const _cgOQa;
         const 194;
         const 30;
 },
 _cgOQf() //  [R1]
         { []
         }
     {offset
       cgOQf: // global
           I64[Sp] = block_cgOQk_info;
           _sgMRC::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMRC::F32;
           if (R1 & 7 != 0) goto ugOQN; else goto cgOQl;
       ugOQN: // global
           call _cgOQk(R1) args: 0, res: 0, upd: 0;
       cgOQl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOQf_info" {
     block_cgOQf_info:
         const _cgOQf;
         const 387;
         const 30;
 },
 _cgOQk() //  [R1]
         { []
         }
     {offset
       cgOQk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOQH; else goto cgOQG;
       cgOQH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOQG: // global
           _sgMRH::F32 = %MO_F_Add_W32(F32[Sp + 24], F32[R1 + 7]);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = _sgMRH::F32;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Add_W32(F32[Sp + 16], F32[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOQk_info" {
     block_cgOQk_info:
         const _cgOQk;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.740693653 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c-1_closure" {
     Data.Complex.$fFloatingComplex_$s$c-1_closure:
         const Data.Complex.$fFloatingComplex_$s$c-1_info;
 },
 Data.Complex.$fFloatingComplex_$s$c-1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgORE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOSf; else goto cgOSg;
       cgOSf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c-1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOSg: // global
           I64[Sp - 16] = block_cgORB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugOSq; else goto cgORC;
       ugOSq: // global
           call _cgORB(R1) args: 0, res: 0, upd: 0;
       cgORC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c-1_info" {
     Data.Complex.$fFloatingComplex_$s$c-1_info:
         const Data.Complex.$fFloatingComplex_$s$c-1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgORB() //  [R1]
         { []
         }
     {offset
       cgORB: // global
           I64[Sp - 8] = block_cgORH_info;
           _sgMRN::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMRN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOSp; else goto cgORI;
       ugOSp: // global
           call _cgORH(R1) args: 0, res: 0, upd: 0;
       cgORI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgORB_info" {
     block_cgORB_info:
         const _cgORB;
         const 1;
         const 30;
 },
 _cgORH() //  [R1]
         { []
         }
     {offset
       cgORH: // global
           I64[Sp] = block_cgORM_info;
           _sgMRP::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMRP::F32;
           if (R1 & 7 != 0) goto ugOSr; else goto cgORN;
       ugOSr: // global
           call _cgORM(R1) args: 0, res: 0, upd: 0;
       cgORN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgORH_info" {
     block_cgORH_info:
         const _cgORH;
         const 2;
         const 30;
 },
 _cgORM() //  [R1]
         { []
         }
     {offset
       cgORM: // global
           I64[Sp] = block_cgORR_info;
           _sgMRR::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgMRR::F32;
           if (R1 & 7 != 0) goto ugOSs; else goto cgORS;
       ugOSs: // global
           call _cgORR(R1) args: 0, res: 0, upd: 0;
       cgORS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgORM_info" {
     block_cgORM_info:
         const _cgORM;
         const 66;
         const 30;
 },
 _cgORR() //  [R1]
         { []
         }
     {offset
       cgORR: // global
           I64[Sp - 8] = block_cgORW_info;
           _sgMRU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMRU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOSt; else goto cgORX;
       ugOSt: // global
           call _cgORW(R1) args: 0, res: 0, upd: 0;
       cgORX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgORR_info" {
     block_cgORR_info:
         const _cgORR;
         const 194;
         const 30;
 },
 _cgORW() //  [R1]
         { []
         }
     {offset
       cgORW: // global
           I64[Sp] = block_cgOS1_info;
           _sgMRW::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMRW::F32;
           if (R1 & 7 != 0) goto ugOSu; else goto cgOS2;
       ugOSu: // global
           call _cgOS1(R1) args: 0, res: 0, upd: 0;
       cgOS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgORW_info" {
     block_cgORW_info:
         const _cgORW;
         const 387;
         const 30;
 },
 _cgOS1() //  [R1]
         { []
         }
     {offset
       cgOS1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOSo; else goto cgOSn;
       cgOSo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOSn: // global
           _sgMS1::F32 = %MO_F_Sub_W32(F32[Sp + 24], F32[R1 + 7]);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = _sgMS1::F32;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Sub_W32(F32[Sp + 16], F32[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOS1_info" {
     block_cgOS1_info:
         const _cgOS1;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.756968531 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c*1_closure" {
     Data.Complex.$fFloatingComplex_$s$c*1_closure:
         const Data.Complex.$fFloatingComplex_$s$c*1_info;
 },
 Data.Complex.$fFloatingComplex_$s$c*1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOTl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOU8; else goto cgOU9;
       cgOU8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c*1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOU9: // global
           I64[Sp - 16] = block_cgOTi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugOUj; else goto cgOTj;
       ugOUj: // global
           call _cgOTi(R1) args: 0, res: 0, upd: 0;
       cgOTj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c*1_info" {
     Data.Complex.$fFloatingComplex_$s$c*1_info:
         const Data.Complex.$fFloatingComplex_$s$c*1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgOTi() //  [R1]
         { []
         }
     {offset
       cgOTi: // global
           I64[Sp - 8] = block_cgOTo_info;
           _sgMS7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMS7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOUi; else goto cgOTp;
       ugOUi: // global
           call _cgOTo(R1) args: 0, res: 0, upd: 0;
       cgOTp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOTi_info" {
     block_cgOTi_info:
         const _cgOTi;
         const 1;
         const 30;
 },
 _cgOTo() //  [R1]
         { []
         }
     {offset
       cgOTo: // global
           I64[Sp] = block_cgOTt_info;
           _sgMS9::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMS9::F32;
           if (R1 & 7 != 0) goto ugOUk; else goto cgOTu;
       ugOUk: // global
           call _cgOTt(R1) args: 0, res: 0, upd: 0;
       cgOTu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOTo_info" {
     block_cgOTo_info:
         const _cgOTo;
         const 2;
         const 30;
 },
 _cgOTt() //  [R1]
         { []
         }
     {offset
       cgOTt: // global
           I64[Sp] = block_cgOTy_info;
           _sgMSb::F32 = F32[R1 + 7];
           R1 = P64[Sp + 16];
           F32[Sp + 16] = _sgMSb::F32;
           if (R1 & 7 != 0) goto ugOUl; else goto cgOTz;
       ugOUl: // global
           call _cgOTy(R1) args: 0, res: 0, upd: 0;
       cgOTz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOTt_info" {
     block_cgOTt_info:
         const _cgOTt;
         const 66;
         const 30;
 },
 _cgOTy() //  [R1]
         { []
         }
     {offset
       cgOTy: // global
           I64[Sp - 8] = block_cgOTD_info;
           _sgMSe::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMSe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOUm; else goto cgOTE;
       ugOUm: // global
           call _cgOTD(R1) args: 0, res: 0, upd: 0;
       cgOTE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOTy_info" {
     block_cgOTy_info:
         const _cgOTy;
         const 194;
         const 30;
 },
 _cgOTD() //  [R1]
         { []
         }
     {offset
       cgOTD: // global
           I64[Sp] = block_cgOTI_info;
           _sgMSg::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMSg::F32;
           if (R1 & 7 != 0) goto ugOUn; else goto cgOTJ;
       ugOUn: // global
           call _cgOTI(R1) args: 0, res: 0, upd: 0;
       cgOTJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOTD_info" {
     block_cgOTD_info:
         const _cgOTD;
         const 387;
         const 30;
 },
 _cgOTI() //  [R1]
         { []
         }
     {offset
       cgOTI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOUh; else goto cgOUg;
       cgOUh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOUg: // global
           _sgMSi::F32 = F32[R1 + 7];
           I64[Hp - 48] = GHC.Types.F#_con_info;
           _sgMS9::F32 = F32[Sp + 16];
           _sgMSb::F32 = F32[Sp + 24];
           _sgMSg::F32 = F32[Sp + 8];
           F32[Hp - 40] = %MO_F_Add_W32(%MO_F_Mul_W32(_sgMS9::F32,
                                                      _sgMSi::F32),
                                        %MO_F_Mul_W32(_sgMSb::F32, _sgMSg::F32));
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Sub_W32(%MO_F_Mul_W32(_sgMS9::F32,
                                                      _sgMSg::F32),
                                        %MO_F_Mul_W32(_sgMSb::F32, _sgMSi::F32));
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOTI_info" {
     block_cgOTI_info:
         const _cgOTI;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.772049187 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cnegate1_closure" {
     Data.Complex.$fFloatingComplex_$s$cnegate1_closure:
         const Data.Complex.$fFloatingComplex_$s$cnegate1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cnegate1_entry() //  [R2]
         { []
         }
     {offset
       cgOVk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOVG; else goto cgOVH;
       cgOVG: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cnegate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOVH: // global
           I64[Sp - 8] = block_cgOVh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOVO; else goto cgOVi;
       ugOVO: // global
           call _cgOVh(R1) args: 0, res: 0, upd: 0;
       cgOVi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cnegate1_info" {
     Data.Complex.$fFloatingComplex_$s$cnegate1_info:
         const Data.Complex.$fFloatingComplex_$s$cnegate1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOVh() //  [R1]
         { []
         }
     {offset
       cgOVh: // global
           I64[Sp - 8] = block_cgOVn_info;
           _sgMSu::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMSu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOVN; else goto cgOVo;
       ugOVN: // global
           call _cgOVn(R1) args: 0, res: 0, upd: 0;
       cgOVo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOVh_info" {
     block_cgOVh_info:
         const _cgOVh;
         const 0;
         const 30;
 },
 _cgOVn() //  [R1]
         { []
         }
     {offset
       cgOVn: // global
           I64[Sp] = block_cgOVs_info;
           _sgMSw::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMSw::F32;
           if (R1 & 7 != 0) goto ugOVP; else goto cgOVt;
       ugOVP: // global
           call _cgOVs(R1) args: 0, res: 0, upd: 0;
       cgOVt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOVn_info" {
     block_cgOVn_info:
         const _cgOVn;
         const 1;
         const 30;
 },
 _cgOVs() //  [R1]
         { []
         }
     {offset
       cgOVs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOVM; else goto cgOVL;
       cgOVM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOVL: // global
           _sgMSB::F32 = %MO_F_Neg_W32(F32[R1 + 7]);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = _sgMSB::F32;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOVs_info" {
     block_cgOVs_info:
         const _cgOVs;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.781504048 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cfromInteger1_entry() //  [R2]
         { []
         }
     {offset
       cgOWr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgOWw; else goto cgOWx;
       cgOWw: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOWx: // global
           I64[Sp - 8] = block_cgOWp_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromInteger1_info" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger1_info:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOWp() //  [F1]
         { []
         }
     {offset
       cgOWp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgOWA; else goto cgOWz;
       cgOWA: // global
           HpAlloc = 40;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgOWz: // global
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOWp_info" {
     block_cgOWp_info:
         const _cgOWp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.788155765 UTC

[section ""data" . Data.Complex.conjugate_$sconjugate_closure" {
     Data.Complex.conjugate_$sconjugate_closure:
         const Data.Complex.conjugate_$sconjugate_info;
 },
 Data.Complex.conjugate_$sconjugate_entry() //  [R2]
         { []
         }
     {offset
       cgOWW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgOX9; else goto cgOXa;
       cgOX9: // global
           R2 = R2;
           R1 = Data.Complex.conjugate_$sconjugate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOXa: // global
           I64[Sp - 8] = block_cgOWT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOXg; else goto cgOWU;
       ugOXg: // global
           call _cgOWT(R1) args: 0, res: 0, upd: 0;
       cgOWU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.conjugate_$sconjugate_info" {
     Data.Complex.conjugate_$sconjugate_info:
         const Data.Complex.conjugate_$sconjugate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOWT() //  [R1]
         { []
         }
     {offset
       cgOWT: // global
           I64[Sp - 8] = block_cgOWZ_info;
           _sgMSI::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMSI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOXf; else goto cgOX0;
       ugOXf: // global
           call _cgOWZ(R1) args: 0, res: 0, upd: 0;
       cgOX0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOWT_info" {
     block_cgOWT_info:
         const _cgOWT;
         const 0;
         const 30;
 },
 _cgOWZ() //  [R1]
         { []
         }
     {offset
       cgOWZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgOXe; else goto cgOXd;
       cgOXe: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOXd: // global
           _sgMSM::F64 = %MO_F_Neg_W64(F64[R1 + 7]);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = _sgMSM::F64;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOWZ_info" {
     block_cgOWZ_info:
         const _cgOWZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.796817012 UTC

[section ""data" . Data.Complex.conjugate_closure" {
     Data.Complex.conjugate_closure:
         const Data.Complex.conjugate_info;
 },
 Data.Complex.conjugate_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOXK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgOXQ; else goto cgOXR;
       cgOXQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.conjugate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOXR: // global
           I64[Sp - 16] = block_cgOXH_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugOXW; else goto cgOXI;
       ugOXW: // global
           call _cgOXH(R1) args: 0, res: 0, upd: 0;
       cgOXI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.conjugate_info" {
     Data.Complex.conjugate_info:
         const Data.Complex.conjugate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgOXH() //  [R1]
         { []
         }
     {offset
       cgOXH: // global
           I64[Sp] = block_cgOXN_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOXH_info" {
     block_cgOXH_info:
         const _cgOXH;
         const 1;
         const 30;
 },
 _cgOXN() //  [R1]
         { []
         }
     {offset
       cgOXN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOXV; else goto cgOXU;
       cgOXV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOXU: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOXN_info" {
     block_cgOXN_info:
         const _cgOXN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.80457721 UTC

[section ""data" . Data.Complex.cis_$scis_closure" {
     Data.Complex.cis_$scis_closure:
         const Data.Complex.cis_$scis_info;
 },
 Data.Complex.cis_$scis_entry() //  [R2]
         { []
         }
     {offset
       cgOYo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgOYC; else goto cgOYD;
       cgOYC: // global
           R2 = R2;
           R1 = Data.Complex.cis_$scis_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgOYD: // global
           I64[Sp - 8] = block_cgOYl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugOYH; else goto cgOYm;
       ugOYH: // global
           call _cgOYl(R1) args: 0, res: 0, upd: 0;
       cgOYm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.cis_$scis_info" {
     Data.Complex.cis_$scis_info:
         const Data.Complex.cis_$scis_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgOYl() //  [R1]
         { []
         }
     {offset
       cgOYl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgOYG; else goto cgOYF;
       cgOYG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOYF: // global
           _sgMSW::F64 = F64[R1 + 7];
           (_cgOYr::F64) = call MO_F64_Sin(_sgMSW::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _cgOYr::F64;
           (_cgOYw::F64) = call MO_F64_Cos(_sgMSW::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = _cgOYw::F64;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOYl_info" {
     block_cgOYl_info:
         const _cgOYl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.810991183 UTC

[section ""data" . Data.Complex.cis_closure" {
     Data.Complex.cis_closure:
         const Data.Complex.cis_info;
 },
 Data.Complex.cis_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOZ7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgOZ8; else goto cgOZ9;
       cgOZ8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.cis_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgOZ9: // global
           I64[Sp - 24] = block_cgOZ2_info;
           _sgMT1::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _sgMT1::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Float.cos_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.cis_info" {
     Data.Complex.cis_info:
         const Data.Complex.cis_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgOZ2() //  [R1]
         { []
         }
     {offset
       cgOZ2: // global
           _sgMT1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgOZ4_info;
           R2 = _sgMT1::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Float.sin_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOZ2_info" {
     block_cgOZ2_info:
         const _cgOZ2;
         const 2;
         const 30;
 },
 _cgOZ4() //  [R1]
         { []
         }
     {offset
       cgOZ4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgOZd; else goto cgOZc;
       cgOZd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgOZc: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOZ4_info" {
     block_cgOZ4_info:
         const _cgOZ4;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.819172567 UTC

[section ""data" . Data.Complex.mkPolar_$smkPolar_closure" {
     Data.Complex.mkPolar_$smkPolar_closure:
         const Data.Complex.mkPolar_$smkPolar_info;
 },
 Data.Complex.mkPolar_$smkPolar_entry() //  [R2, R3]
         { []
         }
     {offset
       cgOZE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgP03; else goto cgP04;
       cgP03: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.mkPolar_$smkPolar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgP04: // global
           I64[Sp - 16] = block_cgOZB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugP0a; else goto cgOZC;
       ugP0a: // global
           call _cgOZB(R1) args: 0, res: 0, upd: 0;
       cgOZC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.mkPolar_$smkPolar_info" {
     Data.Complex.mkPolar_$smkPolar_info:
         const Data.Complex.mkPolar_$smkPolar_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgOZB() //  [R1]
         { []
         }
     {offset
       cgOZB: // global
           I64[Sp] = block_cgOZH_info;
           _sgMT8::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMT8::F64;
           if (R1 & 7 != 0) goto ugP09; else goto cgOZI;
       ugP09: // global
           call _cgOZH(R1) args: 0, res: 0, upd: 0;
       cgOZI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOZB_info" {
     block_cgOZB_info:
         const _cgOZB;
         const 1;
         const 30;
 },
 _cgOZH() //  [R1]
         { []
         }
     {offset
       cgOZH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgP08; else goto cgP07;
       cgP08: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgP07: // global
           _sgMT8::F64 = F64[Sp + 8];
           _sgMTa::F64 = F64[R1 + 7];
           (_cgOZM::F64) = call MO_F64_Sin(_sgMTa::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_sgMT8::F64, _cgOZM::F64);
           (_cgOZU::F64) = call MO_F64_Cos(_sgMTa::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_sgMT8::F64, _cgOZU::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgOZH_info" {
     block_cgOZH_info:
         const _cgOZH;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.829026347 UTC

[section ""data" . Data.Complex.$wmkPolar_closure" {
     Data.Complex.$wmkPolar_closure:
         const Data.Complex.$wmkPolar_info;
 },
 sat_sgMTm_entry() //  [R1]
         { []
         }
     {offset
       cgP0Q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgP0R; else goto cgP0S;
       cgP0R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgP0S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMTm_info" {
     sat_sgMTm_info:
         const sat_sgMTm_entry;
         const 2;
         const 18;
 },
 sat_sgMTo_entry() //  [R1]
         { []
         }
     {offset
       cgP0Z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgP10; else goto cgP11;
       cgP10: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgP11: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMTo_info" {
     sat_sgMTo_info:
         const sat_sgMTo_entry;
         const 2;
         const 18;
 },
 Data.Complex.$wmkPolar_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgP12: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgP14; else goto cgP15;
       cgP14: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$wmkPolar_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgP15: // global
           I64[Sp - 32] = block_cgP0E_info;
           _sgMTh::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgMTh::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$wmkPolar_info" {
     Data.Complex.$wmkPolar_info:
         const Data.Complex.$wmkPolar_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgP0E() //  [R1]
         { []
         }
     {offset
       cgP0E: // global
           I64[Sp] = block_cgP0I_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP0E_info" {
     block_cgP0E_info:
         const _cgP0E;
         const 3;
         const 30;
 },
 _cgP0I() //  [R1]
         { []
         }
     {offset
       cgP0I: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgP19; else goto cgP18;
       cgP19: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgP18: // global
           I64[Hp - 24] = sat_sgMTm_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 8] = block_cgP0T_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = Hp - 24;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP0I_info" {
     block_cgP0I_info:
         const _cgP0I;
         const 3;
         const 30;
 },
 _cgP0T() //  [R1]
         { []
         }
     {offset
       cgP0T: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgP1c; else goto cgP1b;
       cgP1c: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgP1b: // global
           I64[Hp - 24] = sat_sgMTo_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           _sgMTi::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgP13_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _sgMTi::P64;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP0T_info" {
     block_cgP0T_info:
         const _cgP0T;
         const 4;
         const 30;
 },
 _cgP13() //  [R1]
         { []
         }
     {offset
       cgP13: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP13_info" {
     block_cgP13_info:
         const _cgP13;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.843500753 UTC

[section ""data" . Data.Complex.mkPolar_closure" {
     Data.Complex.mkPolar_closure:
         const Data.Complex.mkPolar_info;
 },
 Data.Complex.mkPolar_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgP27: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgP28; else goto cgP29;
       cgP28: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.mkPolar_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgP29: // global
           I64[Sp - 8] = block_cgP24_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$wmkPolar_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.mkPolar_info" {
     Data.Complex.mkPolar_info:
         const Data.Complex.mkPolar_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgP24() //  [R1, R2]
         { []
         }
     {offset
       cgP24: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgP2c; else goto cgP2b;
       cgP2c: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgP2b: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP24_info" {
     block_cgP24_info:
         const _cgP24;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.849609107 UTC

[section ""data" . Data.Complex.$w$sphase_closure" {
     Data.Complex.$w$sphase_closure:
         const Data.Complex.$w$sphase_info;
 },
 Data.Complex.$w$sphase_slow() //  [R1]
         { []
         }
     {offset
       cgP2p: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$sphase_entry(D2,
                                             D1,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$sphase_entry() //  [D1, D2]
         { []
         }
     {offset
       cgP2y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgP2C; else goto cgP2B;
       cgP2C: // global
           HpAlloc = 16;
           R1 = Data.Complex.$w$sphase_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgP2B: // global
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto cgP2x; else goto cgP2w;
       cgP2x: // global
           if (%MO_F_Eq_W64(D2, 0.0 :: W64)) goto cgP2M; else goto cgP2L;
       cgP2M: // global
           Hp = Hp - 16;
           D1 = 0.0 :: W64;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       cgP2L: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D2;
           D1 = D1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 0, upd: 8;
       cgP2w: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D2;
           D1 = D1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$sphase_info" {
     Data.Complex.$w$sphase_info:
         const Data.Complex.$w$sphase_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 194;
         const Data.Complex.$w$sphase_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.855932038 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$sphase_closure" {
     Data.Complex.$fFloatingComplex_$sphase_closure:
         const Data.Complex.$fFloatingComplex_$sphase_info;
 },
 Data.Complex.$fFloatingComplex_$sphase_entry() //  [R2]
         { []
         }
     {offset
       cgP37: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgP3p; else goto cgP3q;
       cgP3p: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$sphase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgP3q: // global
           I64[Sp - 8] = block_cgP34_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugP3y; else goto cgP35;
       ugP3y: // global
           call _cgP34(R1) args: 0, res: 0, upd: 0;
       cgP35: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$sphase_info" {
     Data.Complex.$fFloatingComplex_$sphase_info:
         const Data.Complex.$fFloatingComplex_$sphase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgP34() //  [R1]
         { []
         }
     {offset
       cgP34: // global
           I64[Sp - 8] = block_cgP3a_info;
           _sgMTF::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMTF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugP3x; else goto cgP3b;
       ugP3x: // global
           call _cgP3a(R1) args: 0, res: 0, upd: 0;
       cgP3b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP34_info" {
     block_cgP34_info:
         const _cgP34;
         const 0;
         const 30;
 },
 _cgP3a() //  [R1]
         { []
         }
     {offset
       cgP3a: // global
           I64[Sp] = block_cgP3f_info;
           _sgMTH::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMTH::F64;
           if (R1 & 7 != 0) goto ugP3z; else goto cgP3g;
       ugP3z: // global
           call _cgP3f(R1) args: 0, res: 0, upd: 0;
       cgP3g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP3a_info" {
     block_cgP3a_info:
         const _cgP3a;
         const 1;
         const 30;
 },
 _cgP3f() //  [R1]
         { []
         }
     {offset
       cgP3f: // global
           _sgMTH::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgP3k_info;
           D2 = F64[R1 + 7];
           D1 = _sgMTH::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP3f_info" {
     block_cgP3f_info:
         const _cgP3f;
         const 65;
         const 30;
 },
 _cgP3k() //  [D1]
         { []
         }
     {offset
       cgP3k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgP3w; else goto cgP3v;
       cgP3w: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgP3v: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP3k_info" {
     block_cgP3k_info:
         const _cgP3k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.866611297 UTC

[section ""data" . Data.Complex.$w$sphase1_closure" {
     Data.Complex.$w$sphase1_closure:
         const Data.Complex.$w$sphase1_info;
 },
 Data.Complex.$w$sphase1_slow() //  [R1]
         { []
         }
     {offset
       cgP41: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$sphase1_entry(F2,
                                              F1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$sphase1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgP4a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgP4e; else goto cgP4d;
       cgP4e: // global
           HpAlloc = 16;
           R1 = Data.Complex.$w$sphase1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgP4d: // global
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto cgP49; else goto cgP48;
       cgP49: // global
           if (%MO_F_Eq_W32(F2, 0.0 :: W32)) goto cgP4o; else goto cgP4n;
       cgP4o: // global
           Hp = Hp - 16;
           F1 = 0.0 :: W32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       cgP4n: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F2;
           F1 = F1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 0, upd: 8;
       cgP48: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F2;
           F1 = F1;
           R2 = Hp - 7;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$sphase1_info" {
     Data.Complex.$w$sphase1_info:
         const Data.Complex.$w$sphase1_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 194;
         const Data.Complex.$w$sphase1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.873202349 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$sphase1_closure" {
     Data.Complex.$fFloatingComplex_$sphase1_closure:
         const Data.Complex.$fFloatingComplex_$sphase1_info;
 },
 Data.Complex.$fFloatingComplex_$sphase1_entry() //  [R2]
         { []
         }
     {offset
       cgP4J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgP51; else goto cgP52;
       cgP51: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$sphase1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgP52: // global
           I64[Sp - 8] = block_cgP4G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugP5a; else goto cgP4H;
       ugP5a: // global
           call _cgP4G(R1) args: 0, res: 0, upd: 0;
       cgP4H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$sphase1_info" {
     Data.Complex.$fFloatingComplex_$sphase1_info:
         const Data.Complex.$fFloatingComplex_$sphase1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgP4G() //  [R1]
         { []
         }
     {offset
       cgP4G: // global
           I64[Sp - 8] = block_cgP4M_info;
           _sgMTU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMTU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugP59; else goto cgP4N;
       ugP59: // global
           call _cgP4M(R1) args: 0, res: 0, upd: 0;
       cgP4N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP4G_info" {
     block_cgP4G_info:
         const _cgP4G;
         const 0;
         const 30;
 },
 _cgP4M() //  [R1]
         { []
         }
     {offset
       cgP4M: // global
           I64[Sp] = block_cgP4R_info;
           _sgMTW::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMTW::F32;
           if (R1 & 7 != 0) goto ugP5b; else goto cgP4S;
       ugP5b: // global
           call _cgP4R(R1) args: 0, res: 0, upd: 0;
       cgP4S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP4M_info" {
     block_cgP4M_info:
         const _cgP4M;
         const 1;
         const 30;
 },
 _cgP4R() //  [R1]
         { []
         }
     {offset
       cgP4R: // global
           _sgMTW::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgP4W_info;
           F2 = F32[R1 + 7];
           F1 = _sgMTW::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP4R_info" {
     block_cgP4R_info:
         const _cgP4R;
         const 65;
         const 30;
 },
 _cgP4W() //  [F1]
         { []
         }
     {offset
       cgP4W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgP58; else goto cgP57;
       cgP58: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgP57: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP4W_info" {
     block_cgP4W_info:
         const _cgP4W;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.883526584 UTC

[section ""data" . Data.Complex.$fFloatingComplex17_closure" {
     Data.Complex.$fFloatingComplex17_closure:
         const Data.Complex.$fFloatingComplex17_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex17_entry() //  [R1]
         { []
         }
     {offset
       cgP5I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgP5J; else goto cgP5K;
       cgP5J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgP5K: // global
           (_cgP5F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgP5F::I64 == 0) goto cgP5H; else goto cgP5G;
       cgP5H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgP5G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgP5F::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex17_info" {
     Data.Complex.$fFloatingComplex17_info:
         const Data.Complex.$fFloatingComplex17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.890817308 UTC

[section ""data" . Data.Complex.$wphase_closure" {
     Data.Complex.$wphase_closure:
         const Data.Complex.$wphase_info;
         const 0;
 },
 $dNum_sgMU5_entry() //  [R1]
         { []
         }
     {offset
       cgP6b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgP6c; else goto cgP6d;
       cgP6c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgP6d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgMU5_info" {
     $dNum_sgMU5_info:
         const $dNum_sgMU5_entry;
         const 1;
         const 16;
 },
 sat_sgMU8_entry() //  [R1]
         { []
         }
     {offset
       cgP6q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgP6r; else goto cgP6s;
       cgP6r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgP6s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMU8_info" {
     sat_sgMU8_info:
         const sat_sgMU8_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+304;
 },
 sat_sgMUa_entry() //  [R1]
         { []
         }
     {offset
       cgP6C: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgP6D; else goto cgP6E;
       cgP6D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgP6E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMUa_info" {
     sat_sgMUa_info:
         const sat_sgMUa_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+304;
 },
 Data.Complex.$wphase_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgP6F: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgP6G; else goto cgP6H;
       cgP6G: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$wphase_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgP6H: // global
           I64[Sp - 32] = block_cgP5Z_info;
           _sgMU0::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgMU0::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$wphase_info" {
     Data.Complex.$wphase_info:
         const Data.Complex.$wphase_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgNTw_srt+304;
 },
 _cgP5Z() //  [R1]
         { []
         }
     {offset
       cgP5Z: // global
           I64[Sp] = block_cgP63_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP5Z_info" {
     block_cgP5Z_info:
         const _cgP5Z;
         const 3;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgP63() //  [R1]
         { []
         }
     {offset
       cgP63: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgP6L; else goto cgP6K;
       cgP6L: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgP6K: // global
           I64[Hp - 16] = $dNum_sgMU5_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgP6e_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP63_info" {
     block_cgP63_info:
         const _cgP63;
         const 3;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgP6e() //  [R1]
         { []
         }
     {offset
       cgP6e: // global
           I64[Sp] = block_cgP6i_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP6e_info" {
     block_cgP6e_info:
         const _cgP6e;
         const 4;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgP6i() //  [R1]
         { []
         }
     {offset
       cgP6i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgP6P; else goto cgP6O;
       cgP6P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgP6O: // global
           I64[Hp - 16] = sat_sgMU8_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgP6t_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP6i_info" {
     block_cgP6i_info:
         const _cgP6i;
         const 4;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgP6t() //  [R1]
         { []
         }
     {offset
       cgP6t: // global
           if (R1 & 7 == 1) goto ugP7b; else goto cgP6V;
       ugP7b: // global
           Sp = Sp + 24;
           call _cgP74() args: 0, res: 0, upd: 0;
       cgP6V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgP6Y; else goto cgP6X;
       cgP6Y: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgP6X: // global
           I64[Hp - 16] = sat_sgMUa_info;
           P64[Hp] = P64[Sp + 16];
           _sgMU7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgP6U_info;
           R2 = _sgMU7::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP6t_info" {
     block_cgP6t_info:
         const _cgP6t;
         const 5;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgP6U() //  [R1]
         { []
         }
     {offset
       cgP6U: // global
           if (R1 & 7 == 1) goto ugP7c; else goto cgP78;
       ugP7c: // global
           Sp = Sp + 16;
           call _cgP74() args: 0, res: 0, upd: 0;
       cgP78: // global
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP6U_info" {
     block_cgP6U_info:
         const _cgP6U;
         const 4;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgP74() //  []
         { []
         }
     {offset
       cgP74: // global
           R2 = P64[Sp];
           I64[Sp] = stg_ap_pp_info;
           _sgMU1::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sgMU1::P64;
           call GHC.Float.atan2_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.910557524 UTC

[section ""data" . Data.Complex.phase_closure" {
     Data.Complex.phase_closure:
         const Data.Complex.phase_info;
         const 0;
 },
 Data.Complex.phase_entry() //  [R2, R3]
         { []
         }
     {offset
       cgP8u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgP8v; else goto cgP8w;
       cgP8v: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.phase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgP8w: // global
           I64[Sp - 16] = block_cgP8r_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugP8A; else goto cgP8s;
       ugP8A: // global
           call _cgP8r(R1) args: 0, res: 0, upd: 0;
       cgP8s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.phase_info" {
     Data.Complex.phase_info:
         const Data.Complex.phase_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+312;
 },
 _cgP8r() //  [R1]
         { []
         }
     {offset
       cgP8r: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP8r_info" {
     block_cgP8r_info:
         const _cgP8r;
         const 1;
         const 4294967326;
         const SgNTw_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.918179752 UTC

[section ""data" . Data.Complex.$w$smagnitude_closure" {
     Data.Complex.$w$smagnitude_closure:
         const Data.Complex.$w$smagnitude_info;
         const 0;
 },
 Data.Complex.$w$smagnitude_slow() //  [R1]
         { []
         }
     {offset
       cgP8M: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1,
                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$smagnitude_entry() //  [D1, D2]
         { []
         }
     {offset
       cgP8S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgP8W; else goto cgP8X;
       cgP8W: // global
           R1 = Data.Complex.$w$smagnitude_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgP8X: // global
           I64[Sp - 24] = block_cgP8Q_info;
           _sgMUh::F64 = D1;
           D1 = D1;
           F64[Sp - 16] = _sgMUh::F64;
           F64[Sp - 8] = D2;
           Sp = Sp - 24;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$smagnitude_info" {
     Data.Complex.$w$smagnitude_info:
         const Data.Complex.$w$smagnitude_entry;
         const 0;
         const 30064771086;
         const 8589934592;
         const SgNTw_srt+328;
         const 194;
         const Data.Complex.$w$smagnitude_slow;
 },
 _cgP8Q() //  [R1]
         { []
         }
     {offset
       cgP8Q: // global
           I64[Sp - 8] = block_cgP8V_info;
           D1 = F64[Sp + 16];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP8Q_info" {
     block_cgP8Q_info:
         const _cgP8Q;
         const 194;
         const 12884901918;
         const SgNTw_srt+328;
 },
 _cgP8V() //  [R1]
         { []
         }
     {offset
       cgP8V: // global
           _sgMUh::F64 = F64[Sp + 16];
           _sgMUj::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgMUj::I64, R1)) goto cgP9p; else goto cgP9q;
       cgP9p: // global
           _sgMUm::I64 = _sgMUj::I64;
           goto sgMUl;
       cgP9q: // global
           _sgMUm::I64 = R1;
           goto sgMUl;
       sgMUl: // global
           I64[Sp] = block_cgP9b_info;
           D1 = _sgMUh::F64;
           _sgMUn::I64 = -_sgMUm::I64;
           R2 = _sgMUn::I64;
           I64[Sp + 8] = _sgMUn::I64;
           I64[Sp + 16] = _sgMUm::I64;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP8V_info" {
     block_cgP8V_info:
         const _cgP8V;
         const 451;
         const 4294967326;
         const SgNTw_srt+328;
 },
 _cgP9b() //  [D1]
         { []
         }
     {offset
       cgP9b: // global
           _sgMUn::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cgP9f_info;
           _sgMUo::F64 = D1;
           D1 = F64[Sp + 24];
           R2 = _sgMUn::I64;
           F64[Sp + 24] = _sgMUo::F64;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP9b_info" {
     block_cgP9b_info:
         const _cgP9b;
         const 451;
         const 4294967326;
         const SgNTw_srt+328;
 },
 _cgP9f() //  [D1]
         { []
         }
     {offset
       cgP9f: // global
           _sgMUm::I64 = I64[Sp + 8];
           _sgMUo::F64 = F64[Sp + 16];
           _cgP9B::F64 = %MO_F_Add_W64(%MO_F_Mul_W64(_sgMUo::F64,
                                                     _sgMUo::F64),
                                       %MO_F_Mul_W64(D1, D1));
           (_cgP9A::F64) = call MO_F64_Sqrt(_cgP9B::F64);
           D1 = _cgP9A::F64;
           R2 = _sgMUm::I64;
           Sp = Sp + 24;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgP9f_info" {
     block_cgP9f_info:
         const _cgP9f;
         const 194;
         const 4294967326;
         const SgNTw_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.930302007 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$smagnitude_closure" {
     Data.Complex.$fFloatingComplex_$smagnitude_closure:
         const Data.Complex.$fFloatingComplex_$smagnitude_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$smagnitude_entry() //  [R2]
         { []
         }
     {offset
       cgPab: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPat; else goto cgPau;
       cgPat: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$smagnitude_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPau: // global
           I64[Sp - 8] = block_cgPa8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPaC; else goto cgPa9;
       ugPaC: // global
           call _cgPa8(R1) args: 0, res: 0, upd: 0;
       cgPa9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$smagnitude_info" {
     Data.Complex.$fFloatingComplex_$smagnitude_info:
         const Data.Complex.$fFloatingComplex_$smagnitude_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+344;
 },
 _cgPa8() //  [R1]
         { []
         }
     {offset
       cgPa8: // global
           I64[Sp - 8] = block_cgPae_info;
           _sgMUy::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMUy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPaB; else goto cgPaf;
       ugPaB: // global
           call _cgPae(R1) args: 0, res: 0, upd: 0;
       cgPaf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPa8_info" {
     block_cgPa8_info:
         const _cgPa8;
         const 0;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgPae() //  [R1]
         { []
         }
     {offset
       cgPae: // global
           I64[Sp] = block_cgPaj_info;
           _sgMUA::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMUA::F64;
           if (R1 & 7 != 0) goto ugPaD; else goto cgPak;
       ugPaD: // global
           call _cgPaj(R1) args: 0, res: 0, upd: 0;
       cgPak: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPae_info" {
     block_cgPae_info:
         const _cgPae;
         const 1;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgPaj() //  [R1]
         { []
         }
     {offset
       cgPaj: // global
           _sgMUA::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgPao_info;
           D2 = F64[R1 + 7];
           D1 = _sgMUA::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPaj_info" {
     block_cgPaj_info:
         const _cgPaj;
         const 65;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgPao() //  [D1]
         { []
         }
     {offset
       cgPao: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgPaA; else goto cgPaz;
       cgPaA: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgPaz: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPao_info" {
     block_cgPao_info:
         const _cgPao;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.941809879 UTC

[section ""data" . Data.Complex.$w$smagnitude1_closure" {
     Data.Complex.$w$smagnitude1_closure:
         const Data.Complex.$w$smagnitude1_info;
         const 0;
 },
 Data.Complex.$w$smagnitude1_slow() //  [R1]
         { []
         }
     {offset
       cgPb5: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$smagnitude1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgPbb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPbf; else goto cgPbg;
       cgPbf: // global
           R1 = Data.Complex.$w$smagnitude1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgPbg: // global
           I64[Sp - 24] = block_cgPb9_info;
           _sgMUE::F32 = F1;
           F1 = F1;
           F32[Sp - 16] = _sgMUE::F32;
           F32[Sp - 8] = F2;
           Sp = Sp - 24;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$smagnitude1_info" {
     Data.Complex.$w$smagnitude1_info:
         const Data.Complex.$w$smagnitude1_entry;
         const 0;
         const 17596481011726;
         const 8589934592;
         const SgNTw_srt+264;
         const 194;
         const Data.Complex.$w$smagnitude1_slow;
 },
 _cgPb9() //  [R1]
         { []
         }
     {offset
       cgPb9: // global
           I64[Sp - 8] = block_cgPbe_info;
           F1 = F32[Sp + 16];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPb9_info" {
     block_cgPb9_info:
         const _cgPb9;
         const 194;
         const 4294967326;
         const SgNTw_srt+264;
 },
 _cgPbe() //  [R1]
         { []
         }
     {offset
       cgPbe: // global
           _sgMUE::F32 = F32[Sp + 16];
           _sgMUG::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgMUG::I64, R1)) goto cgPbI; else goto cgPbJ;
       cgPbI: // global
           _sgMUJ::I64 = _sgMUG::I64;
           goto sgMUI;
       cgPbJ: // global
           _sgMUJ::I64 = R1;
           goto sgMUI;
       sgMUI: // global
           I64[Sp] = block_cgPbu_info;
           F1 = _sgMUE::F32;
           _sgMUK::I64 = -_sgMUJ::I64;
           R2 = _sgMUK::I64;
           I64[Sp + 8] = _sgMUK::I64;
           I64[Sp + 16] = _sgMUJ::I64;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPbe_info" {
     block_cgPbe_info:
         const _cgPbe;
         const 451;
         const 30;
 },
 _cgPbu() //  [F1]
         { []
         }
     {offset
       cgPbu: // global
           _sgMUK::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cgPby_info;
           _sgMUL::F32 = F1;
           F1 = F32[Sp + 24];
           R2 = _sgMUK::I64;
           F32[Sp + 24] = _sgMUL::F32;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPbu_info" {
     block_cgPbu_info:
         const _cgPbu;
         const 451;
         const 30;
 },
 _cgPby() //  [F1]
         { []
         }
     {offset
       cgPby: // global
           _sgMUJ::I64 = I64[Sp + 8];
           _sgMUL::F32 = F32[Sp + 16];
           _cgPbU::F32 = %MO_F_Add_W32(%MO_F_Mul_W32(_sgMUL::F32,
                                                     _sgMUL::F32),
                                       %MO_F_Mul_W32(F1, F1));
           (_cgPbT::F32) = call MO_F32_Sqrt(_cgPbU::F32);
           F1 = _cgPbT::F32;
           R2 = _sgMUJ::I64;
           Sp = Sp + 24;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPby_info" {
     block_cgPby_info:
         const _cgPby;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.954617545 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$smagnitude1_closure" {
     Data.Complex.$fFloatingComplex_$smagnitude1_closure:
         const Data.Complex.$fFloatingComplex_$smagnitude1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$smagnitude1_entry() //  [R2]
         { []
         }
     {offset
       cgPcu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPcM; else goto cgPcN;
       cgPcM: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$smagnitude1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPcN: // global
           I64[Sp - 8] = block_cgPcr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPcV; else goto cgPcs;
       ugPcV: // global
           call _cgPcr(R1) args: 0, res: 0, upd: 0;
       cgPcs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$smagnitude1_info" {
     Data.Complex.$fFloatingComplex_$smagnitude1_info:
         const Data.Complex.$fFloatingComplex_$smagnitude1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+360;
 },
 _cgPcr() //  [R1]
         { []
         }
     {offset
       cgPcr: // global
           I64[Sp - 8] = block_cgPcx_info;
           _sgMUV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMUV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPcU; else goto cgPcy;
       ugPcU: // global
           call _cgPcx(R1) args: 0, res: 0, upd: 0;
       cgPcy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPcr_info" {
     block_cgPcr_info:
         const _cgPcr;
         const 0;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPcx() //  [R1]
         { []
         }
     {offset
       cgPcx: // global
           I64[Sp] = block_cgPcC_info;
           _sgMUX::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMUX::F32;
           if (R1 & 7 != 0) goto ugPcW; else goto cgPcD;
       ugPcW: // global
           call _cgPcC(R1) args: 0, res: 0, upd: 0;
       cgPcD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPcx_info" {
     block_cgPcx_info:
         const _cgPcx;
         const 1;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPcC() //  [R1]
         { []
         }
     {offset
       cgPcC: // global
           _sgMUX::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgPcH_info;
           F2 = F32[R1 + 7];
           F1 = _sgMUX::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPcC_info" {
     block_cgPcC_info:
         const _cgPcC;
         const 65;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPcH() //  [F1]
         { []
         }
     {offset
       cgPcH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgPcT; else goto cgPcS;
       cgPcT: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgPcS: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPcH_info" {
     block_cgPcH_info:
         const _cgPcH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:45.970373292 UTC

[section ""data" . Data.Complex.$wmagnitude_closure" {
     Data.Complex.$wmagnitude_closure:
         const Data.Complex.$wmagnitude_info;
 },
 k_sgMV4_entry() //  [R1]
         { []
         }
     {offset
       cgPdx: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgPdB; else goto cgPdC;
       cgPdB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPdC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgPdv_info;
           _sgMV1::P64 = P64[R1 + 16];
           R2 = _sgMV1::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 32] = _sgMV1::P64;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 56;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_sgMV4_info" {
     k_sgMV4_info:
         const k_sgMV4_entry;
         const 3;
         const 15;
 },
 _cgPdv() //  [R1]
         { []
         }
     {offset
       cgPdv: // global
           I64[Sp] = block_cgPdA_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 8] = I64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPdv_info" {
     block_cgPdv_info:
         const _cgPdv;
         const 2;
         const 30;
 },
 _cgPdA() //  [R1]
         { []
         }
     {offset
       cgPdA: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto cgPdL; else goto cgPdM;
       cgPdL: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cgPdM: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPdA_info" {
     block_cgPdA_info:
         const _cgPdA;
         const 66;
         const 30;
 },
 mk_sgMVe_entry() //  [R1]
         { []
         }
     {offset
       cgPee: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgPel; else goto cgPem;
       cgPel: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPem: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgPeb_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugPeq; else goto cgPec;
       ugPeq: // global
           call _cgPeb(R1) args: 0, res: 0, upd: 0;
       cgPec: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . mk_sgMVe_info" {
     mk_sgMVe_info:
         const mk_sgMVe_entry;
         const 1;
         const 16;
 },
 _cgPeb() //  [R1]
         { []
         }
     {offset
       cgPeb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgPep; else goto cgPeo;
       cgPep: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgPeo: // global
           _sgMVh::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sgMVh::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPeb_info" {
     block_cgPeb_info:
         const _cgPeb;
         const 0;
         const 30;
 },
 z_sgMVk_entry() //  [R1]
         { []
         }
     {offset
       cgPez: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPeA; else goto cgPeB;
       cgPeA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPeB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sgMVk_info" {
     z_sgMVk_info:
         const z_sgMVk_entry;
         const 3;
         const 15;
 },
 sat_sgMVl_entry() //  [R1]
         { []
         }
     {offset
       cgPeC: // global
           _sgMVl::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgPeD; else goto cgPeE;
       cgPeE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgPeG; else goto cgPeF;
       cgPeG: // global
           HpAlloc = 40;
           goto cgPeD;
       cgPeD: // global
           R1 = _sgMVl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPeF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMVl::P64;
           _sgMV1::P64 = P64[_sgMVl::P64 + 16];
           _sgMV3::P64 = P64[_sgMVl::P64 + 24];
           _sgMVd::P64 = P64[_sgMVl::P64 + 32];
           _sgMVe::P64 = P64[_sgMVl::P64 + 40];
           I64[Hp - 32] = z_sgMVk_info;
           P64[Hp - 16] = _sgMV1::P64;
           P64[Hp - 8] = _sgMV3::P64;
           P64[Hp] = _sgMVe::P64;
           R2 = _sgMVd::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           _cgPev::P64 = Hp - 32;
           P64[Sp - 32] = _cgPev::P64;
           P64[Sp - 24] = _cgPev::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVl_info" {
     sat_sgMVl_info:
         const sat_sgMVl_entry;
         const 4;
         const 15;
 },
 z_sgMVi_entry() //  [R1]
         { []
         }
     {offset
       cgPeP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPeQ; else goto cgPeR;
       cgPeQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPeR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sgMVi_info" {
     z_sgMVi_info:
         const z_sgMVi_entry;
         const 3;
         const 15;
 },
 sat_sgMVj_entry() //  [R1]
         { []
         }
     {offset
       cgPeS: // global
           _sgMVj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgPeT; else goto cgPeU;
       cgPeU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgPeW; else goto cgPeV;
       cgPeW: // global
           HpAlloc = 40;
           goto cgPeT;
       cgPeT: // global
           R1 = _sgMVj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPeV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMVj::P64;
           _sgMV1::P64 = P64[_sgMVj::P64 + 16];
           _sgMV2::P64 = P64[_sgMVj::P64 + 24];
           _sgMVd::P64 = P64[_sgMVj::P64 + 32];
           _sgMVe::P64 = P64[_sgMVj::P64 + 40];
           I64[Hp - 32] = z_sgMVi_info;
           P64[Hp - 16] = _sgMV1::P64;
           P64[Hp - 8] = _sgMV2::P64;
           P64[Hp] = _sgMVe::P64;
           R2 = _sgMVd::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           _cgPeL::P64 = Hp - 32;
           P64[Sp - 32] = _cgPeL::P64;
           P64[Sp - 24] = _cgPeL::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVj_info" {
     sat_sgMVj_info:
         const sat_sgMVj_entry;
         const 4;
         const 15;
 },
 sat_sgMVm_entry() //  [R1]
         { []
         }
     {offset
       cgPeX: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgPeY; else goto cgPeZ;
       cgPeY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPeZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgPdV_info;
           _sgMV1::P64 = P64[R1 + 16];
           R2 = _sgMV1::P64;
           P64[Sp - 48] = _sgMV1::P64;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 56;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVm_info" {
     sat_sgMVm_info:
         const sat_sgMVm_entry;
         const 4;
         const 15;
 },
 _cgPdV() //  [R1]
         { []
         }
     {offset
       cgPdV: // global
           I64[Sp] = block_cgPdZ_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPdV_info" {
     block_cgPdV_info:
         const _cgPdV;
         const 4;
         const 30;
 },
 _cgPdZ() //  [R1]
         { []
         }
     {offset
       cgPdZ: // global
           I64[Sp] = block_cgPe3_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPdZ_info" {
     block_cgPdZ_info:
         const _cgPdZ;
         const 4;
         const 30;
 },
 _cgPe3() //  [R1]
         { []
         }
     {offset
       cgPe3: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cgPf4; else goto cgPf3;
       cgPf4: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgPf3: // global
           I64[Hp - 112] = mk_sgMVe_info;
           P64[Hp - 96] = P64[Sp + 32];
           I64[Hp - 88] = sat_sgMVl_info;
           _sgMV1::P64 = P64[Sp + 8];
           P64[Hp - 72] = _sgMV1::P64;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = R1;
           _cgPe7::P64 = Hp - 112;
           P64[Hp - 48] = _cgPe7::P64;
           I64[Hp - 40] = sat_sgMVj_info;
           P64[Hp - 24] = _sgMV1::P64;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           P64[Hp] = _cgPe7::P64;
           R2 = R1;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = Hp - 88;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPe3_info" {
     block_cgPe3_info:
         const _cgPe3;
         const 4;
         const 30;
 },
 sat_sgMVn_entry() //  [R1]
         { []
         }
     {offset
       cgPf7: // global
           _sgMVn::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgPf8; else goto cgPf9;
       cgPf9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgPfb; else goto cgPfa;
       cgPfb: // global
           HpAlloc = 48;
           goto cgPf8;
       cgPf8: // global
           R1 = _sgMVn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPfa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMVn::P64;
           _sgMV1::P64 = P64[_sgMVn::P64 + 16];
           _sgMV2::P64 = P64[_sgMVn::P64 + 24];
           _sgMV3::P64 = P64[_sgMVn::P64 + 32];
           _sgMV4::P64 = P64[_sgMVn::P64 + 40];
           I64[Hp - 40] = sat_sgMVm_info;
           P64[Hp - 24] = _sgMV1::P64;
           P64[Hp - 16] = _sgMV2::P64;
           P64[Hp - 8] = _sgMV3::P64;
           P64[Hp] = _sgMV4::P64;
           I64[Sp - 32] = block_cgPf5_info;
           R2 = _sgMV1::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVn_info" {
     sat_sgMVn_info:
         const sat_sgMVn_entry;
         const 4;
         const 15;
 },
 _cgPf5() //  [R1]
         { []
         }
     {offset
       cgPf5: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPf5_info" {
     block_cgPf5_info:
         const _cgPf5;
         const 1;
         const 30;
 },
 Data.Complex.$wmagnitude_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPff: // global
           _sgMV3::P64 = R4;
           _sgMV2::P64 = R3;
           _sgMV1::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgPfg; else goto cgPfh;
       cgPfh: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgPfj; else goto cgPfi;
       cgPfj: // global
           HpAlloc = 88;
           goto cgPfg;
       cgPfg: // global
           R4 = _sgMV3::P64;
           R3 = _sgMV2::P64;
           R2 = _sgMV1::P64;
           R1 = Data.Complex.$wmagnitude_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPfi: // global
           I64[Hp - 80] = k_sgMV4_info;
           P64[Hp - 64] = _sgMV1::P64;
           P64[Hp - 56] = _sgMV2::P64;
           P64[Hp - 48] = _sgMV3::P64;
           I64[Hp - 40] = sat_sgMVn_info;
           P64[Hp - 24] = _sgMV1::P64;
           P64[Hp - 16] = _sgMV2::P64;
           P64[Hp - 8] = _sgMV3::P64;
           _cgPdr::P64 = Hp - 80;
           P64[Hp] = _cgPdr::P64;
           R2 = _sgMV1::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _cgPdr::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Float.scaleFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$wmagnitude_info" {
     Data.Complex.$wmagnitude_info:
         const Data.Complex.$wmagnitude_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.000706005 UTC

[section ""data" . Data.Complex.magnitude_closure" {
     Data.Complex.magnitude_closure:
         const Data.Complex.magnitude_info;
 },
 Data.Complex.magnitude_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPhj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPhk; else goto cgPhl;
       cgPhk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.magnitude_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPhl: // global
           I64[Sp - 16] = block_cgPhg_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPhp; else goto cgPhh;
       ugPhp: // global
           call _cgPhg(R1) args: 0, res: 0, upd: 0;
       cgPhh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.magnitude_info" {
     Data.Complex.magnitude_info:
         const Data.Complex.magnitude_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgPhg() //  [R1]
         { []
         }
     {offset
       cgPhg: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPhg_info" {
     block_cgPhg_info:
         const _cgPhg;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.007271049 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1_entry() //  [R2]
         { []
         }
     {offset
       cgPhH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgPi9; else goto cgPia;
       cgPi9: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPia: // global
           I64[Sp - 8] = block_cgPhE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPij; else goto cgPhF;
       ugPij: // global
           call _cgPhE(R1) args: 0, res: 0, upd: 0;
       cgPhF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgNTw_srt+360;
 },
 _cgPhE() //  [R1]
         { []
         }
     {offset
       cgPhE: // global
           I64[Sp - 8] = block_cgPhK_info;
           _sgMVw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMVw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPii; else goto cgPhL;
       ugPii: // global
           call _cgPhK(R1) args: 0, res: 0, upd: 0;
       cgPhL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPhE_info" {
     block_cgPhE_info:
         const _cgPhE;
         const 0;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPhK() //  [R1]
         { []
         }
     {offset
       cgPhK: // global
           I64[Sp] = block_cgPhP_info;
           _sgMVy::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMVy::F32;
           if (R1 & 7 != 0) goto ugPik; else goto cgPhQ;
       ugPik: // global
           call _cgPhP(R1) args: 0, res: 0, upd: 0;
       cgPhQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPhK_info" {
     block_cgPhK_info:
         const _cgPhK;
         const 1;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPhP() //  [R1]
         { []
         }
     {offset
       cgPhP: // global
           I64[Sp - 8] = block_cgPhU_info;
           _sgMVA::F32 = F32[R1 + 7];
           F2 = _sgMVA::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgMVA::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPhP_info" {
     block_cgPhP_info:
         const _cgPhP;
         const 65;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPhU() //  [F1]
         { []
         }
     {offset
       cgPhU: // global
           _sgMVy::F32 = F32[Sp + 16];
           _sgMVA::F32 = F32[Sp + 8];
           _cgPhZ::F32 = F1;
           (_cgPhY::F32) = call MO_F32_Log(_cgPhZ::F32);
           I64[Sp + 8] = block_cgPi2_info;
           F2 = _sgMVA::F32;
           F1 = _sgMVy::F32;
           F32[Sp + 16] = _cgPhY::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPhU_info" {
     block_cgPhU_info:
         const _cgPhU;
         const 194;
         const 30;
 },
 _cgPi2() //  [F1]
         { []
         }
     {offset
       cgPi2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPih; else goto cgPig;
       cgPih: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgPig: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPi2_info" {
     block_cgPi2_info:
         const _cgPi2;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.020385046 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cabs1_closure" {
     Data.Complex.$fFloatingComplex_$s$cabs1_closure:
         const Data.Complex.$fFloatingComplex_$s$cabs1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cabs1_entry() //  [R2]
         { []
         }
     {offset
       cgPj1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPjk; else goto cgPjl;
       cgPjk: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cabs1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPjl: // global
           I64[Sp - 8] = block_cgPiY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPjt; else goto cgPiZ;
       ugPjt: // global
           call _cgPiY(R1) args: 0, res: 0, upd: 0;
       cgPiZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cabs1_info" {
     Data.Complex.$fFloatingComplex_$s$cabs1_info:
         const Data.Complex.$fFloatingComplex_$s$cabs1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgNTw_srt+360;
 },
 _cgPiY() //  [R1]
         { []
         }
     {offset
       cgPiY: // global
           I64[Sp - 8] = block_cgPj4_info;
           _sgMVJ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMVJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPjs; else goto cgPj5;
       ugPjs: // global
           call _cgPj4(R1) args: 0, res: 0, upd: 0;
       cgPj5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPiY_info" {
     block_cgPiY_info:
         const _cgPiY;
         const 0;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPj4() //  [R1]
         { []
         }
     {offset
       cgPj4: // global
           I64[Sp] = block_cgPj9_info;
           _sgMVL::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgMVL::F32;
           if (R1 & 7 != 0) goto ugPju; else goto cgPja;
       ugPju: // global
           call _cgPj9(R1) args: 0, res: 0, upd: 0;
       cgPja: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPj4_info" {
     block_cgPj4_info:
         const _cgPj4;
         const 1;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPj9() //  [R1]
         { []
         }
     {offset
       cgPj9: // global
           _sgMVL::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgPje_info;
           F2 = F32[R1 + 7];
           F1 = _sgMVL::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPj9_info" {
     block_cgPj9_info:
         const _cgPj9;
         const 65;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgPje() //  [F1]
         { []
         }
     {offset
       cgPje: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgPjr; else goto cgPjq;
       cgPjr: // global
           HpAlloc = 40;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgPjq: // global
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPje_info" {
     block_cgPje_info:
         const _cgPje;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.032061238 UTC

[section ""data" . Data.Complex.polar_$spolar_closure" {
     Data.Complex.polar_$spolar_closure:
         const Data.Complex.polar_$spolar_info;
         const 0;
 },
 sat_sgMVS_entry() //  [R1]
         { []
         }
     {offset
       cgPk6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPk7; else goto cgPk8;
       cgPk7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPk8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFloatingComplex_$sphase_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVS_info" {
     sat_sgMVS_info:
         const sat_sgMVS_entry;
         const 1;
         const 16;
 },
 sat_sgMVR_entry() //  [R1]
         { []
         }
     {offset
       cgPkd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPke; else goto cgPkf;
       cgPke: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPkf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFloatingComplex_$smagnitude_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVR_info" {
     sat_sgMVR_info:
         const sat_sgMVR_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+352;
 },
 Data.Complex.polar_$spolar_entry() //  [R2]
         { []
         }
     {offset
       cgPkh: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgPkl; else goto cgPkk;
       cgPkl: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Complex.polar_$spolar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPkk: // global
           I64[Hp - 64] = sat_sgMVS_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sgMVR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.polar_$spolar_info" {
     Data.Complex.polar_$spolar_info:
         const Data.Complex.polar_$spolar_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const SgNTw_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.040191481 UTC

[section ""data" . Data.Complex.polar_closure" {
     Data.Complex.polar_closure:
         const Data.Complex.polar_info;
         const 0;
 },
 sat_sgMVW_entry() //  [R1]
         { []
         }
     {offset
       cgPkO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPkP; else goto cgPkQ;
       cgPkP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPkQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.phase_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVW_info" {
     sat_sgMVW_info:
         const sat_sgMVW_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+320;
 },
 sat_sgMVV_entry() //  [R1]
         { []
         }
     {offset
       cgPkV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPkW; else goto cgPkX;
       cgPkW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPkX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.magnitude_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMVV_info" {
     sat_sgMVV_info:
         const sat_sgMVV_entry;
         const 2;
         const 18;
 },
 Data.Complex.polar_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPkZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgPl3; else goto cgPl2;
       cgPl3: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.polar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPl2: // global
           I64[Hp - 80] = sat_sgMVW_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sgMVV_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.polar_info" {
     Data.Complex.polar_info:
         const Data.Complex.polar_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const SgNTw_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.047042117 UTC

[section ""data" . Data.Complex.$fFloatingComplex1_closure" {
     Data.Complex.$fFloatingComplex1_closure:
         const GHC.Types.D#_con_info;
         const 0.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.04868941 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cpi_closure" {
     Data.Complex.$fFloatingComplex_$s$cpi_closure:
         const Data.Complex.:+_con_info;
         const GHC.Float.$fFloatingDouble_$cpi_closure;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.051804107 UTC

[section ""data" . Data.Complex.$w$cpi_closure" {
     Data.Complex.$w$cpi_closure:
         const Data.Complex.$w$cpi_info;
         const 0;
 },
 Data.Complex.$w$cpi_entry() //  [R2]
         { []
         }
     {offset
       cgPlw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPlO; else goto cgPlP;
       cgPlO: // global
           R2 = R2;
           R1 = Data.Complex.$w$cpi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPlP: // global
           I64[Sp - 16] = block_cgPlu_info;
           _sgMVX::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sgMVX::P64;
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cpi_info" {
     Data.Complex.$w$cpi_info:
         const Data.Complex.$w$cpi_entry;
         const 0;
         const 35188667056142;
         const 4294967301;
         const SgNTw_srt+304;
 },
 _cgPlu() //  [R1]
         { []
         }
     {offset
       cgPlu: // global
           I64[Sp] = block_cgPlz_info;
           R2 = R1;
           call GHC.Float.pi_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPlu_info" {
     block_cgPlu_info:
         const _cgPlu;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPlz() //  [R1]
         { []
         }
     {offset
       cgPlz: // global
           I64[Sp] = block_cgPlB_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPlz_info" {
     block_cgPlz_info:
         const _cgPlz;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPlB() //  [R1]
         { []
         }
     {offset
       cgPlB: // global
           I64[Sp] = block_cgPlF_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPlB_info" {
     block_cgPlB_info:
         const _cgPlB;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPlF() //  [R1]
         { []
         }
     {offset
       cgPlF: // global
           I64[Sp] = block_cgPlJ_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPlF_info" {
     block_cgPlF_info:
         const _cgPlF;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPlJ() //  [R1]
         { []
         }
     {offset
       cgPlJ: // global
           I64[Sp] = block_cgPlN_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPlJ_info" {
     block_cgPlJ_info:
         const _cgPlJ;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPlN() //  [R1]
         { []
         }
     {offset
       cgPlN: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPlN_info" {
     block_cgPlN_info:
         const _cgPlN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.065087275 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cpi_closure" {
     Data.Complex.$fFloatingComplex_$cpi_closure:
         const Data.Complex.$fFloatingComplex_$cpi_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cpi_entry() //  [R2]
         { []
         }
     {offset
       cgPmA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgPmB; else goto cgPmC;
       cgPmB: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cpi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPmC: // global
           I64[Sp - 8] = block_cgPmx_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$w$cpi_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cpi_info" {
     Data.Complex.$fFloatingComplex_$cpi_info:
         const Data.Complex.$fFloatingComplex_$cpi_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+408;
 },
 _cgPmx() //  [R1, R2]
         { []
         }
     {offset
       cgPmx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPmF; else goto cgPmE;
       cgPmF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPmE: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPmx_info" {
     block_cgPmx_info:
         const _cgPmx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.071853324 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexp_closure" {
     Data.Complex.$fFloatingComplex_$s$cexp_closure:
         const Data.Complex.$fFloatingComplex_$s$cexp_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexp_entry() //  [R2]
         { []
         }
     {offset
       cgPmY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPnw; else goto cgPnx;
       cgPnw: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPnx: // global
           I64[Sp - 8] = block_cgPmV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPnE; else goto cgPmW;
       ugPnE: // global
           call _cgPmV(R1) args: 0, res: 0, upd: 0;
       cgPmW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexp_info" {
     Data.Complex.$fFloatingComplex_$s$cexp_info:
         const Data.Complex.$fFloatingComplex_$s$cexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgPmV() //  [R1]
         { []
         }
     {offset
       cgPmV: // global
           I64[Sp - 8] = block_cgPn1_info;
           _sgMWb::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMWb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPnD; else goto cgPn2;
       ugPnD: // global
           call _cgPn1(R1) args: 0, res: 0, upd: 0;
       cgPn2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPmV_info" {
     block_cgPmV_info:
         const _cgPmV;
         const 0;
         const 30;
 },
 _cgPn1() //  [R1]
         { []
         }
     {offset
       cgPn1: // global
           I64[Sp] = block_cgPn6_info;
           _sgMWd::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMWd::F64;
           if (R1 & 7 != 0) goto ugPnF; else goto cgPn7;
       ugPnF: // global
           call _cgPn6(R1) args: 0, res: 0, upd: 0;
       cgPn7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPn1_info" {
     block_cgPn1_info:
         const _cgPn1;
         const 1;
         const 30;
 },
 _cgPn6() //  [R1]
         { []
         }
     {offset
       cgPn6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPnC; else goto cgPnB;
       cgPnC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPnB: // global
           _sgMWf::F64 = F64[R1 + 7];
           (_cgPnb::F64) = call MO_F64_Exp(F64[Sp + 8]);
           (_cgPnf::F64) = call MO_F64_Sin(_sgMWf::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgPnb::F64, _cgPnf::F64);
           (_cgPnn::F64) = call MO_F64_Cos(_sgMWf::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgPnb::F64, _cgPnn::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPn6_info" {
     block_cgPn6_info:
         const _cgPn6;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.08394416 UTC

[section ""data" . Data.Complex.$w$cexp_closure" {
     Data.Complex.$w$cexp_closure:
         const Data.Complex.$w$cexp_info;
 },
 $dFloating_sgMWt_entry() //  [R1]
         { []
         }
     {offset
       cgPou: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPov; else goto cgPow;
       cgPov: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPow: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgMWt_info" {
     $dFloating_sgMWt_info:
         const $dFloating_sgMWt_entry;
         const 1;
         const 16;
 },
 expx_sgMWu_entry() //  [R1]
         { []
         }
     {offset
       cgPoB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPoC; else goto cgPoD;
       cgPoC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPoD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . expx_sgMWu_info" {
     expx_sgMWu_info:
         const expx_sgMWu_entry;
         const 2;
         const 18;
 },
 sat_sgMWv_entry() //  [R1]
         { []
         }
     {offset
       cgPoI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPoJ; else goto cgPoK;
       cgPoJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPoK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMWv_info" {
     sat_sgMWv_info:
         const sat_sgMWv_entry;
         const 2;
         const 18;
 },
 sat_sgMWx_entry() //  [R1]
         { []
         }
     {offset
       cgPoR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPoS; else goto cgPoT;
       cgPoS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPoT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMWx_info" {
     sat_sgMWx_info:
         const sat_sgMWx_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$cexp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPoU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgPoW; else goto cgPoX;
       cgPoW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cexp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPoX: // global
           I64[Sp - 32] = block_cgPoe_info;
           _sgMWn::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgMWn::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cexp_info" {
     Data.Complex.$w$cexp_info:
         const Data.Complex.$w$cexp_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgPoe() //  [R1]
         { []
         }
     {offset
       cgPoe: // global
           I64[Sp] = block_cgPoi_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPoe_info" {
     block_cgPoe_info:
         const _cgPoe;
         const 3;
         const 30;
 },
 _cgPoi() //  [R1]
         { []
         }
     {offset
       cgPoi: // global
           I64[Sp] = block_cgPom_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPoi_info" {
     block_cgPoi_info:
         const _cgPoi;
         const 3;
         const 30;
 },
 _cgPom() //  [R1]
         { []
         }
     {offset
       cgPom: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgPp2; else goto cgPp1;
       cgPp2: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPp1: // global
           I64[Hp - 80] = $dFloating_sgMWt_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = expx_sgMWu_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgPoq::P64 = Hp - 80;
           P64[Hp - 32] = _cgPoq::P64;
           I64[Hp - 24] = sat_sgMWv_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgPoq::P64;
           I64[Sp - 8] = block_cgPoL_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           _cgPox::P64 = Hp - 56;
           P64[Sp - 24] = _cgPox::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp] = R1;
           P64[Sp + 8] = _cgPox::P64;
           P64[Sp + 16] = _cgPoq::P64;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPom_info" {
     block_cgPom_info:
         const _cgPom;
         const 3;
         const 30;
 },
 _cgPoL() //  [R1]
         { []
         }
     {offset
       cgPoL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgPp5; else goto cgPp4;
       cgPp5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPp4: // global
           I64[Hp - 24] = sat_sgMWx_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cgPoV_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPoL_info" {
     block_cgPoL_info:
         const _cgPoL;
         const 4;
         const 30;
 },
 _cgPoV() //  [R1]
         { []
         }
     {offset
       cgPoV: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPoV_info" {
     block_cgPoV_info:
         const _cgPoV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.102625632 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cexp_closure" {
     Data.Complex.$fFloatingComplex_$cexp_closure:
         const Data.Complex.$fFloatingComplex_$cexp_info;
 },
 Data.Complex.$fFloatingComplex_$cexp_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPqj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPqp; else goto cgPqq;
       cgPqp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPqq: // global
           I64[Sp - 16] = block_cgPqg_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPqv; else goto cgPqh;
       ugPqv: // global
           call _cgPqg(R1) args: 0, res: 0, upd: 0;
       cgPqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cexp_info" {
     Data.Complex.$fFloatingComplex_$cexp_info:
         const Data.Complex.$fFloatingComplex_$cexp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgPqg() //  [R1]
         { []
         }
     {offset
       cgPqg: // global
           _sgMWz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPqm_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgMWz::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPqg_info" {
     block_cgPqg_info:
         const _cgPqg;
         const 1;
         const 30;
 },
 _cgPqm() //  [R1, R2]
         { []
         }
     {offset
       cgPqm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPqu; else goto cgPqt;
       cgPqu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPqt: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPqm_info" {
     block_cgPqm_info:
         const _cgPqm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.116832496 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog_closure" {
     Data.Complex.$fFloatingComplex_$s$clog_closure:
         const Data.Complex.$fFloatingComplex_$s$clog_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog_entry() //  [R2]
         { []
         }
     {offset
       cgPqT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgPrl; else goto cgPrm;
       cgPrl: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPrm: // global
           I64[Sp - 8] = block_cgPqQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPrv; else goto cgPqR;
       ugPrv: // global
           call _cgPqQ(R1) args: 0, res: 0, upd: 0;
       cgPqR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog_info" {
     Data.Complex.$fFloatingComplex_$s$clog_info:
         const Data.Complex.$fFloatingComplex_$s$clog_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const SgNTw_srt+344;
 },
 _cgPqQ() //  [R1]
         { []
         }
     {offset
       cgPqQ: // global
           I64[Sp - 8] = block_cgPqW_info;
           _sgMWK::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMWK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPru; else goto cgPqX;
       ugPru: // global
           call _cgPqW(R1) args: 0, res: 0, upd: 0;
       cgPqX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPqQ_info" {
     block_cgPqQ_info:
         const _cgPqQ;
         const 0;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgPqW() //  [R1]
         { []
         }
     {offset
       cgPqW: // global
           I64[Sp] = block_cgPr1_info;
           _sgMWM::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMWM::F64;
           if (R1 & 7 != 0) goto ugPrw; else goto cgPr2;
       ugPrw: // global
           call _cgPr1(R1) args: 0, res: 0, upd: 0;
       cgPr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPqW_info" {
     block_cgPqW_info:
         const _cgPqW;
         const 1;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgPr1() //  [R1]
         { []
         }
     {offset
       cgPr1: // global
           I64[Sp - 8] = block_cgPr6_info;
           _sgMWO::F64 = F64[R1 + 7];
           D2 = _sgMWO::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgMWO::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPr1_info" {
     block_cgPr1_info:
         const _cgPr1;
         const 65;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgPr6() //  [D1]
         { []
         }
     {offset
       cgPr6: // global
           _sgMWM::F64 = F64[Sp + 16];
           _sgMWO::F64 = F64[Sp + 8];
           _cgPrb::F64 = D1;
           (_cgPra::F64) = call MO_F64_Log(_cgPrb::F64);
           I64[Sp + 8] = block_cgPre_info;
           D2 = _sgMWO::F64;
           D1 = _sgMWM::F64;
           F64[Sp + 16] = _cgPra::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPr6_info" {
     block_cgPr6_info:
         const _cgPr6;
         const 194;
         const 30;
 },
 _cgPre() //  [D1]
         { []
         }
     {offset
       cgPre: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPrt; else goto cgPrs;
       cgPrt: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgPrs: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPre_info" {
     block_cgPre_info:
         const _cgPre;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.132613375 UTC

[section ""data" . Data.Complex.$w$clog_closure" {
     Data.Complex.$w$clog_closure:
         const Data.Complex.$w$clog_info;
         const 0;
 },
 sat_sgMWY_entry() //  [R1]
         { []
         }
     {offset
       cgPse: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPsf; else goto cgPsg;
       cgPsf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPsg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMWY_info" {
     sat_sgMWY_info:
         const sat_sgMWY_entry;
         const 3;
         const 15;
 },
 Data.Complex.$w$clog_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPsj: // global
           _sgMWW::P64 = R4;
           _sgMWV::P64 = R3;
           _sgMWU::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgPsp; else goto cgPsq;
       cgPsq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgPss; else goto cgPsr;
       cgPss: // global
           HpAlloc = 40;
           goto cgPsp;
       cgPsp: // global
           R4 = _sgMWW::P64;
           R3 = _sgMWV::P64;
           R2 = _sgMWU::P64;
           R1 = Data.Complex.$w$clog_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPsr: // global
           I64[Hp - 32] = sat_sgMWY_info;
           P64[Hp - 16] = _sgMWU::P64;
           P64[Hp - 8] = _sgMWV::P64;
           P64[Hp] = _sgMWW::P64;
           I64[Sp - 40] = block_cgPsh_info;
           R2 = _sgMWU::P64;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgMWU::P64;
           P64[Sp - 16] = _sgMWV::P64;
           P64[Sp - 8] = _sgMWW::P64;
           Sp = Sp - 40;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$clog_info" {
     Data.Complex.$w$clog_info:
         const Data.Complex.$w$clog_entry;
         const 0;
         const 140741783322638;
         const 12884901911;
         const SgNTw_srt+312;
 },
 _cgPsh() //  [R1]
         { []
         }
     {offset
       cgPsh: // global
           _cgPsa::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPsm_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _cgPsa::P64;
           Sp = Sp - 8;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPsh_info" {
     block_cgPsh_info:
         const _cgPsh;
         const 4;
         const 4294967326;
         const SgNTw_srt+312;
 },
 _cgPsm() //  [R1]
         { []
         }
     {offset
       cgPsm: // global
           _sgMWV::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgPso_info;
           R4 = P64[Sp + 24];
           R3 = _sgMWV::P64;
           R2 = P64[Sp + 8];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPsm_info" {
     block_cgPsm_info:
         const _cgPsm;
         const 3;
         const 4294967326;
         const SgNTw_srt+312;
 },
 _cgPso() //  [R1]
         { []
         }
     {offset
       cgPso: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPso_info" {
     block_cgPso_info:
         const _cgPso;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.1456678 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog_closure" {
     Data.Complex.$fFloatingComplex_$clog_closure:
         const Data.Complex.$fFloatingComplex_$clog_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$clog_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPt4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPta; else goto cgPtb;
       cgPta: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPtb: // global
           I64[Sp - 16] = block_cgPt1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPtg; else goto cgPt2;
       ugPtg: // global
           call _cgPt1(R1) args: 0, res: 0, upd: 0;
       cgPt2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog_info" {
     Data.Complex.$fFloatingComplex_$clog_info:
         const Data.Complex.$fFloatingComplex_$clog_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+432;
 },
 _cgPt1() //  [R1]
         { []
         }
     {offset
       cgPt1: // global
           _sgMX1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPt7_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgMX1::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPt1_info" {
     block_cgPt1_info:
         const _cgPt1;
         const 1;
         const 4294967326;
         const SgNTw_srt+432;
 },
 _cgPt7() //  [R1, R2]
         { []
         }
     {offset
       cgPt7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPtf; else goto cgPte;
       cgPtf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPte: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPt7_info" {
     block_cgPt7_info:
         const _cgPt7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.154865448 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csin_closure" {
     Data.Complex.$fFloatingComplex_$s$csin_closure:
         const Data.Complex.$fFloatingComplex_$s$csin_info;
 },
 Data.Complex.$fFloatingComplex_$s$csin_entry() //  [R2]
         { []
         }
     {offset
       cgPtE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPug; else goto cgPuh;
       cgPug: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPuh: // global
           I64[Sp - 8] = block_cgPtB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPuo; else goto cgPtC;
       ugPuo: // global
           call _cgPtB(R1) args: 0, res: 0, upd: 0;
       cgPtC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csin_info" {
     Data.Complex.$fFloatingComplex_$s$csin_info:
         const Data.Complex.$fFloatingComplex_$s$csin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgPtB() //  [R1]
         { []
         }
     {offset
       cgPtB: // global
           I64[Sp - 8] = block_cgPtH_info;
           _sgMXb::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMXb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPun; else goto cgPtI;
       ugPun: // global
           call _cgPtH(R1) args: 0, res: 0, upd: 0;
       cgPtI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPtB_info" {
     block_cgPtB_info:
         const _cgPtB;
         const 0;
         const 30;
 },
 _cgPtH() //  [R1]
         { []
         }
     {offset
       cgPtH: // global
           I64[Sp] = block_cgPtM_info;
           _sgMXe::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMXe::F64;
           if (R1 & 7 != 0) goto ugPup; else goto cgPtN;
       ugPup: // global
           call _cgPtM(R1) args: 0, res: 0, upd: 0;
       cgPtN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPtH_info" {
     block_cgPtH_info:
         const _cgPtH;
         const 1;
         const 30;
 },
 _cgPtM() //  [R1]
         { []
         }
     {offset
       cgPtM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPum; else goto cgPul;
       cgPum: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPul: // global
           _sgMXe::F64 = F64[Sp + 8];
           _sgMXg::F64 = F64[R1 + 7];
           (_cgPtR::F64) = call MO_F64_Sinh(_sgMXe::F64);
           (_cgPtV::F64) = call MO_F64_Cos(_sgMXg::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgPtV::F64, _cgPtR::F64);
           (_cgPu3::F64) = call MO_F64_Cosh(_sgMXe::F64);
           (_cgPu7::F64) = call MO_F64_Sin(_sgMXg::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgPu7::F64, _cgPu3::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPtM_info" {
     block_cgPtM_info:
         const _cgPtM;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.167240583 UTC

[section ""data" . Data.Complex.$w$csin_closure" {
     Data.Complex.$w$csin_closure:
         const Data.Complex.$w$csin_info;
 },
 $dFloating_sgMXs_entry() //  [R1]
         { []
         }
     {offset
       cgPv2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPv3; else goto cgPv4;
       cgPv3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPv4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgMXs_info" {
     $dFloating_sgMXs_info:
         const $dFloating_sgMXs_entry;
         const 1;
         const 16;
 },
 sat_sgMXx_entry() //  [R1]
         { []
         }
     {offset
       cgPvl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPvm; else goto cgPvn;
       cgPvm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPvn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMXx_info" {
     sat_sgMXx_info:
         const sat_sgMXx_entry;
         const 2;
         const 18;
 },
 sat_sgMXw_entry() //  [R1]
         { []
         }
     {offset
       cgPvs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPvt; else goto cgPvu;
       cgPvt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPvu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMXw_info" {
     sat_sgMXw_info:
         const sat_sgMXw_entry;
         const 2;
         const 18;
 },
 sat_sgMXA_entry() //  [R1]
         { []
         }
     {offset
       cgPvB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPvC; else goto cgPvD;
       cgPvC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPvD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMXA_info" {
     sat_sgMXA_info:
         const sat_sgMXA_entry;
         const 2;
         const 18;
 },
 sat_sgMXz_entry() //  [R1]
         { []
         }
     {offset
       cgPvI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPvJ; else goto cgPvK;
       cgPvJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPvK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMXz_info" {
     sat_sgMXz_info:
         const sat_sgMXz_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$csin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPvL: // global
           _sgMXr::P64 = R4;
           _sgMXq::P64 = R3;
           _sgMXp::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgPvN; else goto cgPvO;
       cgPvO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPvQ; else goto cgPvP;
       cgPvQ: // global
           HpAlloc = 24;
           goto cgPvN;
       cgPvN: // global
           R4 = _sgMXr::P64;
           R3 = _sgMXq::P64;
           R2 = _sgMXp::P64;
           R1 = Data.Complex.$w$csin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPvP: // global
           I64[Hp - 16] = $dFloating_sgMXs_info;
           P64[Hp] = _sgMXp::P64;
           I64[Sp - 32] = block_cgPv5_info;
           R2 = _sgMXp::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgMXq::P64;
           P64[Sp - 8] = _sgMXr::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csin_info" {
     Data.Complex.$w$csin_info:
         const Data.Complex.$w$csin_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgPv5() //  [R1]
         { []
         }
     {offset
       cgPv5: // global
           I64[Sp] = block_cgPv9_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPv5_info" {
     block_cgPv5_info:
         const _cgPv5;
         const 3;
         const 30;
 },
 _cgPv9() //  [R1]
         { []
         }
     {offset
       cgPv9: // global
           I64[Sp] = block_cgPvd_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPv9_info" {
     block_cgPv9_info:
         const _cgPv9;
         const 3;
         const 30;
 },
 _cgPvd() //  [R1]
         { []
         }
     {offset
       cgPvd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPvV; else goto cgPvU;
       cgPvV: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPvU: // global
           I64[Hp - 56] = sat_sgMXx_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgPuY::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgPuY::P64;
           I64[Hp - 24] = sat_sgMXw_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgPuY::P64;
           I64[Sp - 8] = block_cgPvv_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPvd_info" {
     block_cgPvd_info:
         const _cgPvd;
         const 3;
         const 30;
 },
 _cgPvv() //  [R1]
         { []
         }
     {offset
       cgPvv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPvY; else goto cgPvX;
       cgPvY: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPvX: // global
           I64[Hp - 56] = sat_sgMXA_info;
           P64[Hp - 40] = P64[Sp + 32];
           _cgPuY::P64 = P64[Sp + 16];
           P64[Hp - 32] = _cgPuY::P64;
           I64[Hp - 24] = sat_sgMXz_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgPuY::P64;
           I64[Sp + 24] = block_cgPvM_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPvv_info" {
     block_cgPvv_info:
         const _cgPvv;
         const 4;
         const 30;
 },
 _cgPvM() //  [R1]
         { []
         }
     {offset
       cgPvM: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPvM_info" {
     block_cgPvM_info:
         const _cgPvM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.187631077 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$csin_closure" {
     Data.Complex.$fFloatingComplex_$csin_closure:
         const Data.Complex.$fFloatingComplex_$csin_info;
 },
 Data.Complex.$fFloatingComplex_$csin_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPxl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPxr; else goto cgPxs;
       cgPxr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$csin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPxs: // global
           I64[Sp - 16] = block_cgPxi_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPxx; else goto cgPxj;
       ugPxx: // global
           call _cgPxi(R1) args: 0, res: 0, upd: 0;
       cgPxj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$csin_info" {
     Data.Complex.$fFloatingComplex_$csin_info:
         const Data.Complex.$fFloatingComplex_$csin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgPxi() //  [R1]
         { []
         }
     {offset
       cgPxi: // global
           _sgMXC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPxo_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgMXC::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csin_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPxi_info" {
     block_cgPxi_info:
         const _cgPxi;
         const 1;
         const 30;
 },
 _cgPxo() //  [R1, R2]
         { []
         }
     {offset
       cgPxo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPxw; else goto cgPxv;
       cgPxw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPxv: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPxo_info" {
     block_cgPxo_info:
         const _cgPxo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.197144129 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccos_closure" {
     Data.Complex.$fFloatingComplex_$s$ccos_closure:
         const Data.Complex.$fFloatingComplex_$s$ccos_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccos_entry() //  [R2]
         { []
         }
     {offset
       cgPxV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPyA; else goto cgPyB;
       cgPyA: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPyB: // global
           I64[Sp - 8] = block_cgPxS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPyI; else goto cgPxT;
       ugPyI: // global
           call _cgPxS(R1) args: 0, res: 0, upd: 0;
       cgPxT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccos_info" {
     Data.Complex.$fFloatingComplex_$s$ccos_info:
         const Data.Complex.$fFloatingComplex_$s$ccos_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgPxS() //  [R1]
         { []
         }
     {offset
       cgPxS: // global
           I64[Sp - 8] = block_cgPxY_info;
           _sgMXM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgMXM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPyH; else goto cgPxZ;
       ugPyH: // global
           call _cgPxY(R1) args: 0, res: 0, upd: 0;
       cgPxZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPxS_info" {
     block_cgPxS_info:
         const _cgPxS;
         const 0;
         const 30;
 },
 _cgPxY() //  [R1]
         { []
         }
     {offset
       cgPxY: // global
           I64[Sp] = block_cgPy3_info;
           _sgMXP::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMXP::F64;
           if (R1 & 7 != 0) goto ugPyJ; else goto cgPy4;
       ugPyJ: // global
           call _cgPy3(R1) args: 0, res: 0, upd: 0;
       cgPy4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPxY_info" {
     block_cgPxY_info:
         const _cgPxY;
         const 1;
         const 30;
 },
 _cgPy3() //  [R1]
         { []
         }
     {offset
       cgPy3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPyG; else goto cgPyF;
       cgPyG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPyF: // global
           _sgMXP::F64 = F64[Sp + 8];
           _sgMXR::F64 = F64[R1 + 7];
           (_cgPy8::F64) = call MO_F64_Sinh(_sgMXP::F64);
           (_cgPyc::F64) = call MO_F64_Sin(_sgMXR::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgPyc::F64,
                                                      _cgPy8::F64));
           (_cgPyn::F64) = call MO_F64_Cosh(_sgMXP::F64);
           (_cgPyr::F64) = call MO_F64_Cos(_sgMXR::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgPyr::F64, _cgPyn::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPy3_info" {
     block_cgPy3_info:
         const _cgPy3;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.210531214 UTC

[section ""data" . Data.Complex.$w$ccos_closure" {
     Data.Complex.$w$ccos_closure:
         const Data.Complex.$w$ccos_info;
 },
 $dFloating_sgMY4_entry() //  [R1]
         { []
         }
     {offset
       cgPzo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPzp; else goto cgPzq;
       cgPzp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPzq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgMY4_info" {
     $dFloating_sgMY4_info:
         const $dFloating_sgMY4_entry;
         const 1;
         const 16;
 },
 sat_sgMY9_entry() //  [R1]
         { []
         }
     {offset
       cgPzH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPzI; else goto cgPzJ;
       cgPzI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPzJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMY9_info" {
     sat_sgMY9_info:
         const sat_sgMY9_entry;
         const 2;
         const 18;
 },
 sat_sgMY8_entry() //  [R1]
         { []
         }
     {offset
       cgPzO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPzP; else goto cgPzQ;
       cgPzP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPzQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMY8_info" {
     sat_sgMY8_info:
         const sat_sgMY8_entry;
         const 2;
         const 18;
 },
 sat_sgMYc_entry() //  [R1]
         { []
         }
     {offset
       cgPA1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPA2; else goto cgPA3;
       cgPA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMYc_info" {
     sat_sgMYc_info:
         const sat_sgMYc_entry;
         const 2;
         const 18;
 },
 sat_sgMYb_entry() //  [R1]
         { []
         }
     {offset
       cgPA8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPA9; else goto cgPAa;
       cgPA9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPAa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMYb_info" {
     sat_sgMYb_info:
         const sat_sgMYb_entry;
         const 2;
         const 18;
 },
 sat_sgMYd_entry() //  [R1]
         { []
         }
     {offset
       cgPAb: // global
           _sgMYd::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgPAc; else goto cgPAd;
       cgPAd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPAf; else goto cgPAe;
       cgPAf: // global
           HpAlloc = 64;
           goto cgPAc;
       cgPAc: // global
           R1 = _sgMYd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPAe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgMYd::P64;
           _sgMY2::P64 = P64[_sgMYd::P64 + 16];
           _sgMY3::P64 = P64[_sgMYd::P64 + 24];
           _sgMY4::P64 = P64[_sgMYd::P64 + 32];
           _sgMY7::P64 = P64[_sgMYd::P64 + 40];
           I64[Hp - 56] = sat_sgMYc_info;
           P64[Hp - 40] = _sgMY3::P64;
           P64[Hp - 32] = _sgMY4::P64;
           I64[Hp - 24] = sat_sgMYb_info;
           P64[Hp - 8] = _sgMY2::P64;
           P64[Hp] = _sgMY4::P64;
           R2 = _sgMY7::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMYd_info" {
     sat_sgMYd_info:
         const sat_sgMYd_entry;
         const 4;
         const 15;
 },
 Data.Complex.$w$ccos_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPAg: // global
           _sgMY3::P64 = R4;
           _sgMY2::P64 = R3;
           _sgMY1::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgPAi; else goto cgPAj;
       cgPAj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPAl; else goto cgPAk;
       cgPAl: // global
           HpAlloc = 24;
           goto cgPAi;
       cgPAi: // global
           R4 = _sgMY3::P64;
           R3 = _sgMY2::P64;
           R2 = _sgMY1::P64;
           R1 = Data.Complex.$w$ccos_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPAk: // global
           I64[Hp - 16] = $dFloating_sgMY4_info;
           P64[Hp] = _sgMY1::P64;
           I64[Sp - 32] = block_cgPzr_info;
           R2 = _sgMY1::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgMY2::P64;
           P64[Sp - 8] = _sgMY3::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ccos_info" {
     Data.Complex.$w$ccos_info:
         const Data.Complex.$w$ccos_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgPzr() //  [R1]
         { []
         }
     {offset
       cgPzr: // global
           I64[Sp] = block_cgPzv_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPzr_info" {
     block_cgPzr_info:
         const _cgPzr;
         const 3;
         const 30;
 },
 _cgPzv() //  [R1]
         { []
         }
     {offset
       cgPzv: // global
           I64[Sp] = block_cgPzz_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPzv_info" {
     block_cgPzv_info:
         const _cgPzv;
         const 3;
         const 30;
 },
 _cgPzz() //  [R1]
         { []
         }
     {offset
       cgPzz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPAq; else goto cgPAp;
       cgPAq: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPAp: // global
           I64[Hp - 56] = sat_sgMY9_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgPzk::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgPzk::P64;
           I64[Hp - 24] = sat_sgMY8_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgPzk::P64;
           I64[Sp - 8] = block_cgPzR_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPzz_info" {
     block_cgPzz_info:
         const _cgPzz;
         const 3;
         const 30;
 },
 _cgPzR() //  [R1]
         { []
         }
     {offset
       cgPzR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgPAt; else goto cgPAs;
       cgPAt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPAs: // global
           I64[Hp - 40] = sat_sgMYd_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 16];
           _sgMY7::P64 = P64[Sp + 8];
           P64[Hp] = _sgMY7::P64;
           I64[Sp + 24] = block_cgPAh_info;
           R2 = _sgMY7::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = Hp - 40;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPzR_info" {
     block_cgPzR_info:
         const _cgPzR;
         const 4;
         const 30;
 },
 _cgPAh() //  [R1]
         { []
         }
     {offset
       cgPAh: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPAh_info" {
     block_cgPAh_info:
         const _cgPAh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.23351396 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ccos_closure" {
     Data.Complex.$fFloatingComplex_$ccos_closure:
         const Data.Complex.$fFloatingComplex_$ccos_info;
 },
 Data.Complex.$fFloatingComplex_$ccos_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPBZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPC5; else goto cgPC6;
       cgPC5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ccos_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPC6: // global
           I64[Sp - 16] = block_cgPBW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPCb; else goto cgPBX;
       ugPCb: // global
           call _cgPBW(R1) args: 0, res: 0, upd: 0;
       cgPBX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ccos_info" {
     Data.Complex.$fFloatingComplex_$ccos_info:
         const Data.Complex.$fFloatingComplex_$ccos_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgPBW() //  [R1]
         { []
         }
     {offset
       cgPBW: // global
           _sgMYf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPC2_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgMYf::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ccos_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPBW_info" {
     block_cgPBW_info:
         const _cgPBW;
         const 1;
         const 30;
 },
 _cgPC2() //  [R1, R2]
         { []
         }
     {offset
       cgPC2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPCa; else goto cgPC9;
       cgPCa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPC9: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPC2_info" {
     block_cgPC2_info:
         const _cgPC2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.241974552 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csinh_closure" {
     Data.Complex.$fFloatingComplex_$s$csinh_closure:
         const Data.Complex.$fFloatingComplex_$s$csinh_info;
 },
 Data.Complex.$fFloatingComplex_$s$csinh_entry() //  [R2]
         { []
         }
     {offset
       cgPCz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPDb; else goto cgPDc;
       cgPDb: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPDc: // global
           I64[Sp - 8] = block_cgPCw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPDj; else goto cgPCx;
       ugPDj: // global
           call _cgPCw(R1) args: 0, res: 0, upd: 0;
       cgPCx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csinh_info" {
     Data.Complex.$fFloatingComplex_$s$csinh_info:
         const Data.Complex.$fFloatingComplex_$s$csinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgPCw() //  [R1]
         { []
         }
     {offset
       cgPCw: // global
           I64[Sp - 8] = block_cgPCC_info;
           _sgMYq::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMYq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPDi; else goto cgPCD;
       ugPDi: // global
           call _cgPCC(R1) args: 0, res: 0, upd: 0;
       cgPCD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPCw_info" {
     block_cgPCw_info:
         const _cgPCw;
         const 0;
         const 30;
 },
 _cgPCC() //  [R1]
         { []
         }
     {offset
       cgPCC: // global
           I64[Sp] = block_cgPCH_info;
           _sgMYs::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMYs::F64;
           if (R1 & 7 != 0) goto ugPDk; else goto cgPCI;
       ugPDk: // global
           call _cgPCH(R1) args: 0, res: 0, upd: 0;
       cgPCI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPCC_info" {
     block_cgPCC_info:
         const _cgPCC;
         const 1;
         const 30;
 },
 _cgPCH() //  [R1]
         { []
         }
     {offset
       cgPCH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPDh; else goto cgPDg;
       cgPDh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPDg: // global
           _sgMYs::F64 = F64[Sp + 8];
           _sgMYu::F64 = F64[R1 + 7];
           (_cgPCM::F64) = call MO_F64_Cosh(_sgMYs::F64);
           (_cgPCQ::F64) = call MO_F64_Sin(_sgMYu::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgPCQ::F64, _cgPCM::F64);
           (_cgPCY::F64) = call MO_F64_Sinh(_sgMYs::F64);
           (_cgPD2::F64) = call MO_F64_Cos(_sgMYu::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgPD2::F64, _cgPCY::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPCH_info" {
     block_cgPCH_info:
         const _cgPCH;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.254608106 UTC

[section ""data" . Data.Complex.$w$csinh_closure" {
     Data.Complex.$w$csinh_closure:
         const Data.Complex.$w$csinh_info;
 },
 $dFloating_sgMYG_entry() //  [R1]
         { []
         }
     {offset
       cgPDX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPDY; else goto cgPDZ;
       cgPDY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPDZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgMYG_info" {
     $dFloating_sgMYG_info:
         const $dFloating_sgMYG_entry;
         const 1;
         const 16;
 },
 sat_sgMYL_entry() //  [R1]
         { []
         }
     {offset
       cgPEg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPEh; else goto cgPEi;
       cgPEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPEi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMYL_info" {
     sat_sgMYL_info:
         const sat_sgMYL_entry;
         const 2;
         const 18;
 },
 sat_sgMYK_entry() //  [R1]
         { []
         }
     {offset
       cgPEn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPEo; else goto cgPEp;
       cgPEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPEp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMYK_info" {
     sat_sgMYK_info:
         const sat_sgMYK_entry;
         const 2;
         const 18;
 },
 sat_sgMYO_entry() //  [R1]
         { []
         }
     {offset
       cgPEw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPEx; else goto cgPEy;
       cgPEx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPEy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMYO_info" {
     sat_sgMYO_info:
         const sat_sgMYO_entry;
         const 2;
         const 18;
 },
 sat_sgMYN_entry() //  [R1]
         { []
         }
     {offset
       cgPED: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPEE; else goto cgPEF;
       cgPEE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPEF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMYN_info" {
     sat_sgMYN_info:
         const sat_sgMYN_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$csinh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPEG: // global
           _sgMYF::P64 = R4;
           _sgMYE::P64 = R3;
           _sgMYD::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgPEI; else goto cgPEJ;
       cgPEJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPEL; else goto cgPEK;
       cgPEL: // global
           HpAlloc = 24;
           goto cgPEI;
       cgPEI: // global
           R4 = _sgMYF::P64;
           R3 = _sgMYE::P64;
           R2 = _sgMYD::P64;
           R1 = Data.Complex.$w$csinh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPEK: // global
           I64[Hp - 16] = $dFloating_sgMYG_info;
           P64[Hp] = _sgMYD::P64;
           I64[Sp - 32] = block_cgPE0_info;
           R2 = _sgMYD::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgMYE::P64;
           P64[Sp - 8] = _sgMYF::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csinh_info" {
     Data.Complex.$w$csinh_info:
         const Data.Complex.$w$csinh_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgPE0() //  [R1]
         { []
         }
     {offset
       cgPE0: // global
           I64[Sp] = block_cgPE4_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPE0_info" {
     block_cgPE0_info:
         const _cgPE0;
         const 3;
         const 30;
 },
 _cgPE4() //  [R1]
         { []
         }
     {offset
       cgPE4: // global
           I64[Sp] = block_cgPE8_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPE4_info" {
     block_cgPE4_info:
         const _cgPE4;
         const 3;
         const 30;
 },
 _cgPE8() //  [R1]
         { []
         }
     {offset
       cgPE8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPEQ; else goto cgPEP;
       cgPEQ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPEP: // global
           I64[Hp - 56] = sat_sgMYL_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgPDT::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgPDT::P64;
           I64[Hp - 24] = sat_sgMYK_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgPDT::P64;
           I64[Sp - 8] = block_cgPEq_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPE8_info" {
     block_cgPE8_info:
         const _cgPE8;
         const 3;
         const 30;
 },
 _cgPEq() //  [R1]
         { []
         }
     {offset
       cgPEq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPET; else goto cgPES;
       cgPET: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPES: // global
           I64[Hp - 56] = sat_sgMYO_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgPDT::P64 = P64[Sp + 16];
           P64[Hp - 32] = _cgPDT::P64;
           I64[Hp - 24] = sat_sgMYN_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _cgPDT::P64;
           I64[Sp + 24] = block_cgPEH_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPEq_info" {
     block_cgPEq_info:
         const _cgPEq;
         const 4;
         const 30;
 },
 _cgPEH() //  [R1]
         { []
         }
     {offset
       cgPEH: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPEH_info" {
     block_cgPEH_info:
         const _cgPEH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.276011106 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$csinh_closure" {
     Data.Complex.$fFloatingComplex_$csinh_closure:
         const Data.Complex.$fFloatingComplex_$csinh_info;
 },
 Data.Complex.$fFloatingComplex_$csinh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPGg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPGm; else goto cgPGn;
       cgPGm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$csinh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPGn: // global
           I64[Sp - 16] = block_cgPGd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPGs; else goto cgPGe;
       ugPGs: // global
           call _cgPGd(R1) args: 0, res: 0, upd: 0;
       cgPGe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$csinh_info" {
     Data.Complex.$fFloatingComplex_$csinh_info:
         const Data.Complex.$fFloatingComplex_$csinh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgPGd() //  [R1]
         { []
         }
     {offset
       cgPGd: // global
           _sgMYQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPGj_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgMYQ::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csinh_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPGd_info" {
     block_cgPGd_info:
         const _cgPGd;
         const 1;
         const 30;
 },
 _cgPGj() //  [R1, R2]
         { []
         }
     {offset
       cgPGj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPGr; else goto cgPGq;
       cgPGr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPGq: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPGj_info" {
     block_cgPGj_info:
         const _cgPGj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.28426138 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ccosh_closure" {
     Data.Complex.$fFloatingComplex_$s$ccosh_closure:
         const Data.Complex.$fFloatingComplex_$s$ccosh_info;
 },
 Data.Complex.$fFloatingComplex_$s$ccosh_entry() //  [R2]
         { []
         }
     {offset
       cgPGQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPHs; else goto cgPHt;
       cgPHs: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ccosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPHt: // global
           I64[Sp - 8] = block_cgPGN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPHA; else goto cgPGO;
       ugPHA: // global
           call _cgPGN(R1) args: 0, res: 0, upd: 0;
       cgPGO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ccosh_info" {
     Data.Complex.$fFloatingComplex_$s$ccosh_info:
         const Data.Complex.$fFloatingComplex_$s$ccosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgPGN() //  [R1]
         { []
         }
     {offset
       cgPGN: // global
           I64[Sp - 8] = block_cgPGT_info;
           _sgMZ1::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgMZ1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPHz; else goto cgPGU;
       ugPHz: // global
           call _cgPGT(R1) args: 0, res: 0, upd: 0;
       cgPGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPGN_info" {
     block_cgPGN_info:
         const _cgPGN;
         const 0;
         const 30;
 },
 _cgPGT() //  [R1]
         { []
         }
     {offset
       cgPGT: // global
           I64[Sp] = block_cgPGY_info;
           _sgMZ3::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgMZ3::F64;
           if (R1 & 7 != 0) goto ugPHB; else goto cgPGZ;
       ugPHB: // global
           call _cgPGY(R1) args: 0, res: 0, upd: 0;
       cgPGZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPGT_info" {
     block_cgPGT_info:
         const _cgPGT;
         const 1;
         const 30;
 },
 _cgPGY() //  [R1]
         { []
         }
     {offset
       cgPGY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPHy; else goto cgPHx;
       cgPHy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPHx: // global
           _sgMZ3::F64 = F64[Sp + 8];
           _sgMZ5::F64 = F64[R1 + 7];
           (_cgPH3::F64) = call MO_F64_Sinh(_sgMZ3::F64);
           (_cgPH7::F64) = call MO_F64_Sin(_sgMZ5::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgPH7::F64, _cgPH3::F64);
           (_cgPHf::F64) = call MO_F64_Cosh(_sgMZ3::F64);
           (_cgPHj::F64) = call MO_F64_Cos(_sgMZ5::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgPHj::F64, _cgPHf::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPGY_info" {
     block_cgPGY_info:
         const _cgPGY;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.297460504 UTC

[section ""data" . Data.Complex.$w$ccosh_closure" {
     Data.Complex.$w$ccosh_closure:
         const Data.Complex.$w$ccosh_info;
 },
 $dFloating_sgMZh_entry() //  [R1]
         { []
         }
     {offset
       cgPIe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPIf; else goto cgPIg;
       cgPIf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPIg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgMZh_info" {
     $dFloating_sgMZh_info:
         const $dFloating_sgMZh_entry;
         const 1;
         const 16;
 },
 sat_sgMZm_entry() //  [R1]
         { []
         }
     {offset
       cgPIx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPIy; else goto cgPIz;
       cgPIy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPIz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMZm_info" {
     sat_sgMZm_info:
         const sat_sgMZm_entry;
         const 2;
         const 18;
 },
 sat_sgMZl_entry() //  [R1]
         { []
         }
     {offset
       cgPIE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPIF; else goto cgPIG;
       cgPIF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPIG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMZl_info" {
     sat_sgMZl_info:
         const sat_sgMZl_entry;
         const 2;
         const 18;
 },
 sat_sgMZp_entry() //  [R1]
         { []
         }
     {offset
       cgPIN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPIO; else goto cgPIP;
       cgPIO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPIP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMZp_info" {
     sat_sgMZp_info:
         const sat_sgMZp_entry;
         const 2;
         const 18;
 },
 sat_sgMZo_entry() //  [R1]
         { []
         }
     {offset
       cgPIU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPIV; else goto cgPIW;
       cgPIV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPIW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgMZo_info" {
     sat_sgMZo_info:
         const sat_sgMZo_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$ccosh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPIX: // global
           _sgMZg::P64 = R4;
           _sgMZf::P64 = R3;
           _sgMZe::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto cgPIZ; else goto cgPJ0;
       cgPJ0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPJ2; else goto cgPJ1;
       cgPJ2: // global
           HpAlloc = 24;
           goto cgPIZ;
       cgPIZ: // global
           R4 = _sgMZg::P64;
           R3 = _sgMZf::P64;
           R2 = _sgMZe::P64;
           R1 = Data.Complex.$w$ccosh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPJ1: // global
           I64[Hp - 16] = $dFloating_sgMZh_info;
           P64[Hp] = _sgMZe::P64;
           I64[Sp - 32] = block_cgPIh_info;
           R2 = _sgMZe::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgMZf::P64;
           P64[Sp - 8] = _sgMZg::P64;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ccosh_info" {
     Data.Complex.$w$ccosh_info:
         const Data.Complex.$w$ccosh_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgPIh() //  [R1]
         { []
         }
     {offset
       cgPIh: // global
           I64[Sp] = block_cgPIl_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPIh_info" {
     block_cgPIh_info:
         const _cgPIh;
         const 3;
         const 30;
 },
 _cgPIl() //  [R1]
         { []
         }
     {offset
       cgPIl: // global
           I64[Sp] = block_cgPIp_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPIl_info" {
     block_cgPIl_info:
         const _cgPIl;
         const 3;
         const 30;
 },
 _cgPIp() //  [R1]
         { []
         }
     {offset
       cgPIp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPJ7; else goto cgPJ6;
       cgPJ7: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPJ6: // global
           I64[Hp - 56] = sat_sgMZm_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgPIa::P64 = P64[Sp + 8];
           P64[Hp - 32] = _cgPIa::P64;
           I64[Hp - 24] = sat_sgMZl_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgPIa::P64;
           I64[Sp - 8] = block_cgPIH_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPIp_info" {
     block_cgPIp_info:
         const _cgPIp;
         const 3;
         const 30;
 },
 _cgPIH() //  [R1]
         { []
         }
     {offset
       cgPIH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgPJa; else goto cgPJ9;
       cgPJa: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPJ9: // global
           I64[Hp - 56] = sat_sgMZp_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgPIa::P64 = P64[Sp + 16];
           P64[Hp - 32] = _cgPIa::P64;
           I64[Hp - 24] = sat_sgMZo_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _cgPIa::P64;
           I64[Sp + 24] = block_cgPIY_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 56;
           P64[Sp + 32] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPIH_info" {
     block_cgPIH_info:
         const _cgPIH;
         const 4;
         const 30;
 },
 _cgPIY() //  [R1]
         { []
         }
     {offset
       cgPIY: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPIY_info" {
     block_cgPIY_info:
         const _cgPIY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.31915001 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ccosh_closure" {
     Data.Complex.$fFloatingComplex_$ccosh_closure:
         const Data.Complex.$fFloatingComplex_$ccosh_info;
 },
 Data.Complex.$fFloatingComplex_$ccosh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPKx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPKD; else goto cgPKE;
       cgPKD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ccosh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPKE: // global
           I64[Sp - 16] = block_cgPKu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPKJ; else goto cgPKv;
       ugPKJ: // global
           call _cgPKu(R1) args: 0, res: 0, upd: 0;
       cgPKv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ccosh_info" {
     Data.Complex.$fFloatingComplex_$ccosh_info:
         const Data.Complex.$fFloatingComplex_$ccosh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgPKu() //  [R1]
         { []
         }
     {offset
       cgPKu: // global
           _sgMZr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPKA_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgMZr::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ccosh_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPKu_info" {
     block_cgPKu_info:
         const _cgPKu;
         const 1;
         const 30;
 },
 _cgPKA() //  [R1, R2]
         { []
         }
     {offset
       cgPKA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPKI; else goto cgPKH;
       cgPKI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPKH: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPKA_info" {
     block_cgPKA_info:
         const _cgPKA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.328328516 UTC

[section ""data" . Data.Complex.$w$s$c/_closure" {
     Data.Complex.$w$s$c/_closure:
         const Data.Complex.$w$s$c/_info;
         const 0;
 },
 Data.Complex.$w$s$c/_slow() //  [R1]
         { []
         }
     {offset
       cgPL1: // global
           D4 = F64[Sp + 24];
           D3 = F64[Sp + 16];
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c/_entry() //  [D1, D2, D3, D4]
         { []
         }
     {offset
       cgPL7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgPLb; else goto cgPLc;
       cgPLb: // global
           R1 = Data.Complex.$w$s$c/_closure;
           F64[Sp - 32] = D1;
           F64[Sp - 24] = D2;
           F64[Sp - 16] = D3;
           F64[Sp - 8] = D4;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cgPLc: // global
           I64[Sp - 40] = block_cgPL5_info;
           _sgMZz::F64 = D1;
           D1 = D3;
           F64[Sp - 32] = _sgMZz::F64;
           F64[Sp - 24] = D2;
           F64[Sp - 16] = D3;
           F64[Sp - 8] = D4;
           Sp = Sp - 40;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c/_info" {
     Data.Complex.$w$s$c/_info:
         const Data.Complex.$w$s$c/_entry;
         const 0;
         const 140750373257230;
         const 17179869184;
         const SgNTw_srt+328;
         const 964;
         const Data.Complex.$w$s$c/_slow;
 },
 _cgPL5() //  [R1]
         { []
         }
     {offset
       cgPL5: // global
           I64[Sp - 8] = block_cgPLa_info;
           D1 = F64[Sp + 32];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPL5_info" {
     block_cgPL5_info:
         const _cgPL5;
         const 964;
         const 12884901918;
         const SgNTw_srt+328;
 },
 _cgPLa() //  [R1]
         { []
         }
     {offset
       cgPLa: // global
           _sgMZB::F64 = F64[Sp + 32];
           _sgMZD::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_sgMZD::I64, R1)) goto cgPMc; else goto cgPMd;
       cgPMc: // global
           _sgMZG::I64 = -_sgMZD::I64;
           goto sgMZF;
       cgPMd: // global
           _sgMZG::I64 = -R1;
           goto sgMZF;
       sgMZF: // global
           I64[Sp] = block_cgPLn_info;
           D1 = _sgMZB::F64;
           R2 = _sgMZG::I64;
           I64[Sp + 8] = _sgMZG::I64;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPLa_info" {
     block_cgPLa_info:
         const _cgPLa;
         const 1989;
         const 4294967326;
         const SgNTw_srt+328;
 },
 _cgPLn() //  [D1]
         { []
         }
     {offset
       cgPLn: // global
           I64[Sp] = block_cgPLr_info;
           _sgMZH::F64 = D1;
           D1 = F64[Sp + 40];
           R2 = I64[Sp + 8];
           F64[Sp + 8] = _sgMZH::F64;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPLn_info" {
     block_cgPLn_info:
         const _cgPLn;
         const 1989;
         const 4294967326;
         const SgNTw_srt+328;
 },
 _cgPLr() //  [D1]
         { []
         }
     {offset
       cgPLr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgPM8; else goto cgPM7;
       cgPM8: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgPM7: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           _sgMZz::F64 = F64[Sp + 16];
           _sgMZA::F64 = F64[Sp + 24];
           _sgMZH::F64 = F64[Sp + 8];
           _sgMZJ::F64 = %MO_F_Add_W64(%MO_F_Mul_W64(F64[Sp + 32],
                                                     _sgMZH::F64),
                                       %MO_F_Mul_W64(F64[Sp + 40], D1));
           F64[Hp - 16] = %MO_F_Quot_W64(%MO_F_Sub_W64(%MO_F_Mul_W64(_sgMZA::F64,
                                                                     _sgMZH::F64),
                                                       %MO_F_Mul_W64(_sgMZz::F64, D1)),
                                         _sgMZJ::F64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(%MO_F_Add_W64(%MO_F_Mul_W64(_sgMZz::F64,
                                                                _sgMZH::F64),
                                                  %MO_F_Mul_W64(_sgMZA::F64, D1)),
                                    _sgMZJ::F64);
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPLr_info" {
     block_cgPLr_info:
         const _cgPLr;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.342215439 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c/_closure" {
     Data.Complex.$fFloatingComplex_$s$c/_closure:
         const Data.Complex.$fFloatingComplex_$s$c/_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c/_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPN6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPNB; else goto cgPNC;
       cgPNB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c/_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPNC: // global
           I64[Sp - 16] = block_cgPN3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPNN; else goto cgPN4;
       ugPNN: // global
           call _cgPN3(R1) args: 0, res: 0, upd: 0;
       cgPN4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c/_info" {
     Data.Complex.$fFloatingComplex_$s$c/_info:
         const Data.Complex.$fFloatingComplex_$s$c/_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+448;
 },
 _cgPN3() //  [R1]
         { []
         }
     {offset
       cgPN3: // global
           I64[Sp - 8] = block_cgPN9_info;
           _sgN03::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN03::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPNM; else goto cgPNa;
       ugPNM: // global
           call _cgPN9(R1) args: 0, res: 0, upd: 0;
       cgPNa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPN3_info" {
     block_cgPN3_info:
         const _cgPN3;
         const 1;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgPN9() //  [R1]
         { []
         }
     {offset
       cgPN9: // global
           I64[Sp] = block_cgPNe_info;
           _sgN05::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN05::F64;
           if (R1 & 7 != 0) goto ugPNO; else goto cgPNf;
       ugPNO: // global
           call _cgPNe(R1) args: 0, res: 0, upd: 0;
       cgPNf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPN9_info" {
     block_cgPN9_info:
         const _cgPN9;
         const 2;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgPNe() //  [R1]
         { []
         }
     {offset
       cgPNe: // global
           I64[Sp] = block_cgPNj_info;
           _sgN07::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgN07::F64;
           if (R1 & 7 != 0) goto ugPNP; else goto cgPNk;
       ugPNP: // global
           call _cgPNj(R1) args: 0, res: 0, upd: 0;
       cgPNk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPNe_info" {
     block_cgPNe_info:
         const _cgPNe;
         const 66;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgPNj() //  [R1]
         { []
         }
     {offset
       cgPNj: // global
           I64[Sp - 8] = block_cgPNo_info;
           _sgN0a::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN0a::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPNQ; else goto cgPNp;
       ugPNQ: // global
           call _cgPNo(R1) args: 0, res: 0, upd: 0;
       cgPNp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPNj_info" {
     block_cgPNj_info:
         const _cgPNj;
         const 194;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgPNo() //  [R1]
         { []
         }
     {offset
       cgPNo: // global
           I64[Sp] = block_cgPNt_info;
           _sgN0c::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN0c::F64;
           if (R1 & 7 != 0) goto ugPNR; else goto cgPNu;
       ugPNR: // global
           call _cgPNt(R1) args: 0, res: 0, upd: 0;
       cgPNu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPNo_info" {
     block_cgPNo_info:
         const _cgPNo;
         const 387;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgPNt() //  [R1]
         { []
         }
     {offset
       cgPNt: // global
           _sgN07::F64 = F64[Sp + 24];
           I64[Sp + 24] = block_cgPNy_info;
           D4 = F64[R1 + 7];
           D3 = F64[Sp + 8];
           D2 = _sgN07::F64;
           D1 = F64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPNt_info" {
     block_cgPNt_info:
         const _cgPNt;
         const 451;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgPNy() //  [R1, R2]
         { []
         }
     {offset
       cgPNy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPNL; else goto cgPNK;
       cgPNL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPNK: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPNy_info" {
     block_cgPNy_info:
         const _cgPNy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.366033261 UTC

[section ""data" . Data.Complex.$w$c/_closure" {
     Data.Complex.$w$c/_closure:
         const Data.Complex.$w$c/_info;
 },
 $dReal_sgN0p_entry() //  [R1]
         { []
         }
     {offset
       cgPON: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_sgN0p_info" {
     $dReal_sgN0p_info:
         const $dReal_sgN0p_entry;
         const 1;
         const 16;
 },
 $dNum_sgN0q_entry() //  [R1]
         { []
         }
     {offset
       cgPOU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgPOV; else goto cgPOW;
       cgPOV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPOW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgN0q_info" {
     $dNum_sgN0q_info:
         const $dNum_sgN0q_entry;
         const 1;
         const 16;
 },
 k_sgN0r_entry() //  [R1]
         { []
         }
     {offset
       cgPP3: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgPP7; else goto cgPP8;
       cgPP7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPP8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgPP1_info;
           _sgN0i::P64 = P64[R1 + 16];
           R2 = _sgN0i::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 32] = _sgN0i::P64;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 56;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_sgN0r_info" {
     k_sgN0r_info:
         const k_sgN0r_entry;
         const 3;
         const 15;
 },
 _cgPP1() //  [R1]
         { []
         }
     {offset
       cgPP1: // global
           _sgN0i::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPP6_info;
           R2 = _sgN0i::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Float.exponent_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPP1_info" {
     block_cgPP1_info:
         const _cgPP1;
         const 2;
         const 30;
 },
 _cgPP6() //  [R1]
         { []
         }
     {offset
       cgPP6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgPPf; else goto cgPPe;
       cgPPf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgPPe: // global
           _sgN0t::I64 = I64[Sp + 8];
           _sgN0v::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_sgN0t::I64,
                            _sgN0v::I64)) goto cgPPo; else goto cgPPu;
       cgPPo: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sgN0t::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cgPPu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sgN0v::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgPP6_info" {
     block_cgPP6_info:
         const _cgPP6;
         const 65;
         const 30;
 },
 y''_sgN0z_entry() //  [R1]
         { []
         }
     {offset
       cgPPz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPPA; else goto cgPPB;
       cgPPA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPPB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . y''_sgN0z_info" {
     y''_sgN0z_info:
         const y''_sgN0z_entry;
         const 3;
         const 15;
 },
 x''_sgN0A_entry() //  [R1]
         { []
         }
     {offset
       cgPPG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPPH; else goto cgPPI;
       cgPPH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPPI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.scaleFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x''_sgN0A_info" {
     x''_sgN0A_info:
         const x''_sgN0A_entry;
         const 3;
         const 15;
 },
 sat_sgN0D_entry() //  [R1]
         { []
         }
     {offset
       cgPPR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPPS; else goto cgPPT;
       cgPPS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPPT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0D_info" {
     sat_sgN0D_info:
         const sat_sgN0D_entry;
         const 3;
         const 15;
 },
 sat_sgN0C_entry() //  [R1]
         { []
         }
     {offset
       cgPPY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPPZ; else goto cgPQ0;
       cgPPZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQ0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0C_info" {
     sat_sgN0C_info:
         const sat_sgN0C_entry;
         const 3;
         const 15;
 },
 d_sgN0B_entry() //  [R1]
         { []
         }
     {offset
       cgPQ1: // global
           _sgN0B::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgPQ2; else goto cgPQ3;
       cgPQ3: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgPQ5; else goto cgPQ4;
       cgPQ5: // global
           HpAlloc = 80;
           goto cgPQ2;
       cgPQ2: // global
           R1 = _sgN0B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN0B::P64;
           _sgN0l::P64 = P64[_sgN0B::P64 + 16];
           _sgN0m::P64 = P64[_sgN0B::P64 + 24];
           _sgN0q::P64 = P64[_sgN0B::P64 + 32];
           _sgN0z::P64 = P64[_sgN0B::P64 + 40];
           _sgN0A::P64 = P64[_sgN0B::P64 + 48];
           I64[Hp - 72] = sat_sgN0D_info;
           P64[Hp - 56] = _sgN0m::P64;
           P64[Hp - 48] = _sgN0q::P64;
           P64[Hp - 40] = _sgN0z::P64;
           I64[Hp - 32] = sat_sgN0C_info;
           P64[Hp - 16] = _sgN0l::P64;
           P64[Hp - 8] = _sgN0q::P64;
           P64[Hp] = _sgN0A::P64;
           R2 = _sgN0q::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . d_sgN0B_info" {
     d_sgN0B_info:
         const d_sgN0B_entry;
         const 5;
         const 15;
 },
 sat_sgN0F_entry() //  [R1]
         { []
         }
     {offset
       cgPQe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPQf; else goto cgPQg;
       cgPQf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0F_info" {
     sat_sgN0F_info:
         const sat_sgN0F_entry;
         const 3;
         const 15;
 },
 sat_sgN0E_entry() //  [R1]
         { []
         }
     {offset
       cgPQl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPQm; else goto cgPQn;
       cgPQm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0E_info" {
     sat_sgN0E_info:
         const sat_sgN0E_entry;
         const 3;
         const 15;
 },
 sat_sgN0G_entry() //  [R1]
         { []
         }
     {offset
       cgPQo: // global
           _sgN0G::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgPQp; else goto cgPQq;
       cgPQq: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgPQs; else goto cgPQr;
       cgPQs: // global
           HpAlloc = 80;
           goto cgPQp;
       cgPQp: // global
           R1 = _sgN0G::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN0G::P64;
           _sgN0j::P64 = P64[_sgN0G::P64 + 16];
           _sgN0k::P64 = P64[_sgN0G::P64 + 24];
           _sgN0q::P64 = P64[_sgN0G::P64 + 32];
           _sgN0z::P64 = P64[_sgN0G::P64 + 40];
           _sgN0A::P64 = P64[_sgN0G::P64 + 48];
           I64[Hp - 72] = sat_sgN0F_info;
           P64[Hp - 56] = _sgN0k::P64;
           P64[Hp - 48] = _sgN0q::P64;
           P64[Hp - 40] = _sgN0z::P64;
           I64[Hp - 32] = sat_sgN0E_info;
           P64[Hp - 16] = _sgN0j::P64;
           P64[Hp - 8] = _sgN0q::P64;
           P64[Hp] = _sgN0A::P64;
           R2 = _sgN0q::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0G_info" {
     sat_sgN0G_info:
         const sat_sgN0G_entry;
         const 5;
         const 15;
 },
 sat_sgN0J_entry() //  [R1]
         { []
         }
     {offset
       cgPQD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPQE; else goto cgPQF;
       cgPQE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0J_info" {
     sat_sgN0J_info:
         const sat_sgN0J_entry;
         const 3;
         const 15;
 },
 sat_sgN0I_entry() //  [R1]
         { []
         }
     {offset
       cgPQK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPQL; else goto cgPQM;
       cgPQL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0I_info" {
     sat_sgN0I_info:
         const sat_sgN0I_entry;
         const 3;
         const 15;
 },
 sat_sgN0K_entry() //  [R1]
         { []
         }
     {offset
       cgPQN: // global
           _sgN0K::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgPQO; else goto cgPQP;
       cgPQP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgPQR; else goto cgPQQ;
       cgPQR: // global
           HpAlloc = 80;
           goto cgPQO;
       cgPQO: // global
           R1 = _sgN0K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgPQQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN0K::P64;
           _sgN0j::P64 = P64[_sgN0K::P64 + 16];
           _sgN0k::P64 = P64[_sgN0K::P64 + 24];
           _sgN0q::P64 = P64[_sgN0K::P64 + 32];
           _sgN0z::P64 = P64[_sgN0K::P64 + 40];
           _sgN0A::P64 = P64[_sgN0K::P64 + 48];
           I64[Hp - 72] = sat_sgN0J_info;
           P64[Hp - 56] = _sgN0j::P64;
           P64[Hp - 48] = _sgN0q::P64;
           P64[Hp - 40] = _sgN0z::P64;
           I64[Hp - 32] = sat_sgN0I_info;
           P64[Hp - 16] = _sgN0k::P64;
           P64[Hp - 8] = _sgN0q::P64;
           P64[Hp] = _sgN0A::P64;
           R2 = _sgN0q::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN0K_info" {
     sat_sgN0K_info:
         const sat_sgN0K_entry;
         const 5;
         const 15;
 },
 Data.Complex.$w$c/_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgPQS: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgPQU; else goto cgPQV;
       cgPQU: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c/_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPQV: // global
           I64[Sp - 48] = block_cgPOB_info;
           _sgN0i::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _sgN0i::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c/_info" {
     Data.Complex.$w$c/_info:
         const Data.Complex.$w$c/_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgPOB() //  [R1]
         { []
         }
     {offset
       cgPOB: // global
           I64[Sp - 8] = block_cgPOF_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPOB_info" {
     block_cgPOB_info:
         const _cgPOB;
         const 5;
         const 30;
 },
 _cgPOF() //  [R1]
         { []
         }
     {offset
       cgPOF: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto cgPQZ; else goto cgPQY;
       cgPQZ: // global
           HpAlloc = 280;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPQY: // global
           I64[Hp - 272] = $dReal_sgN0p_info;
           P64[Hp - 256] = P64[Sp + 8];
           I64[Hp - 248] = $dNum_sgN0q_info;
           P64[Hp - 232] = Hp - 272;
           I64[Hp - 224] = k_sgN0r_info;
           _sgN0i::P64 = P64[Sp + 16];
           P64[Hp - 208] = _sgN0i::P64;
           _sgN0l::P64 = P64[Sp + 40];
           P64[Hp - 200] = _sgN0l::P64;
           _sgN0m::P64 = P64[Sp + 48];
           P64[Hp - 192] = _sgN0m::P64;
           I64[Hp - 184] = y''_sgN0z_info;
           P64[Hp - 168] = _sgN0i::P64;
           P64[Hp - 160] = _sgN0m::P64;
           _cgPOX::P64 = Hp - 224;
           P64[Hp - 152] = _cgPOX::P64;
           I64[Hp - 144] = x''_sgN0A_info;
           P64[Hp - 128] = _sgN0i::P64;
           P64[Hp - 120] = _sgN0l::P64;
           P64[Hp - 112] = _cgPOX::P64;
           I64[Hp - 104] = d_sgN0B_info;
           P64[Hp - 88] = _sgN0l::P64;
           P64[Hp - 80] = _sgN0m::P64;
           _cgPOQ::P64 = Hp - 248;
           P64[Hp - 72] = _cgPOQ::P64;
           _cgPPv::P64 = Hp - 184;
           P64[Hp - 64] = _cgPPv::P64;
           _cgPPC::P64 = Hp - 144;
           P64[Hp - 56] = _cgPPC::P64;
           I64[Hp - 48] = sat_sgN0G_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = _cgPOQ::P64;
           P64[Hp - 8] = _cgPPv::P64;
           P64[Hp] = _cgPPC::P64;
           I64[Sp - 8] = block_cgPQt_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 48;
           _cgPPJ::P64 = Hp - 104;
           P64[Sp - 16] = _cgPPJ::P64;
           P64[Sp] = R1;
           P64[Sp + 8] = _cgPPJ::P64;
           P64[Sp + 16] = _cgPPC::P64;
           P64[Sp + 40] = _cgPPv::P64;
           P64[Sp + 48] = _cgPOQ::P64;
           Sp = Sp - 32;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPOF_info" {
     block_cgPOF_info:
         const _cgPOF;
         const 6;
         const 30;
 },
 _cgPQt() //  [R1]
         { []
         }
     {offset
       cgPQt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPR2; else goto cgPR1;
       cgPR2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPR1: // global
           I64[Hp - 48] = sat_sgN0K_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 48] = block_cgPQT_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 56] = R1;
           Sp = Sp + 24;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPQt_info" {
     block_cgPQt_info:
         const _cgPQt;
         const 7;
         const 30;
 },
 _cgPQT() //  [R1]
         { []
         }
     {offset
       cgPQT: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPQT_info" {
     block_cgPQT_info:
         const _cgPQT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.406643213 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c/_closure" {
     Data.Complex.$fFloatingComplex_$c/_closure:
         const Data.Complex.$fFloatingComplex_$c/_info;
 },
 Data.Complex.$fFloatingComplex_$c/_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPTX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPU8; else goto cgPU9;
       cgPU8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c/_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPU9: // global
           I64[Sp - 24] = block_cgPTU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugPUg; else goto cgPTV;
       ugPUg: // global
           call _cgPTU(R1) args: 0, res: 0, upd: 0;
       cgPTV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c/_info" {
     Data.Complex.$fFloatingComplex_$c/_info:
         const Data.Complex.$fFloatingComplex_$c/_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgPTU() //  [R1]
         { []
         }
     {offset
       cgPTU: // global
           I64[Sp - 8] = block_cgPU0_info;
           _sgN0Q::P64 = P64[R1 + 7];
           _sgN0R::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgN0R::P64;
           P64[Sp + 16] = _sgN0Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPUf; else goto cgPU1;
       ugPUf: // global
           call _cgPU0(R1) args: 0, res: 0, upd: 0;
       cgPU1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPTU_info" {
     block_cgPTU_info:
         const _cgPTU;
         const 2;
         const 30;
 },
 _cgPU0() //  [R1]
         { []
         }
     {offset
       cgPU0: // global
           _sgN0Q::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgPU5_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgN0Q::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPU0_info" {
     block_cgPU0_info:
         const _cgPU0;
         const 3;
         const 30;
 },
 _cgPU5() //  [R1, R2]
         { []
         }
     {offset
       cgPU5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPUe; else goto cgPUd;
       cgPUe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPUd: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPU5_info" {
     block_cgPU5_info:
         const _cgPU5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.41610648 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromRational_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromRational_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromRational_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       cgPUJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgPUR; else goto cgPUS;
       cgPUR: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgPUS: // global
           I64[Sp - 8] = block_cgPUG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPUX; else goto cgPUH;
       ugPUX: // global
           call _cgPUG(R1) args: 0, res: 0, upd: 0;
       cgPUH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromRational_info" {
     Data.Complex.$fFloatingComplex_$s$cfromRational_info:
         const Data.Complex.$fFloatingComplex_$s$cfromRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+464;
 },
 _cgPUG() //  [R1]
         { []
         }
     {offset
       cgPUG: // global
           I64[Sp] = block_cgPUM_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Float.rationalToDouble_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPUG_info" {
     block_cgPUG_info:
         const _cgPUG;
         const 0;
         const 4294967326;
         const SgNTw_srt+464;
 },
 _cgPUM() //  [R1]
         { []
         }
     {offset
       cgPUM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPUW; else goto cgPUV;
       cgPUW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPUV: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPUM_info" {
     block_cgPUM_info:
         const _cgPUM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.424174609 UTC

[section ""data" . Data.Complex.$w$cfromRational_closure" {
     Data.Complex.$w$cfromRational_closure:
         const Data.Complex.$w$cfromRational_info;
         const 0;
 },
 Data.Complex.$w$cfromRational_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPVl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgPVD; else goto cgPVE;
       cgPVD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPVE: // global
           I64[Sp - 16] = block_cgPVj_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cfromRational_info" {
     Data.Complex.$w$cfromRational_info:
         const Data.Complex.$w$cfromRational_entry;
         const 0;
         const 18014402804449294;
         const 8589934607;
         const SgNTw_srt+304;
 },
 _cgPVj() //  [R1]
         { []
         }
     {offset
       cgPVj: // global
           I64[Sp - 8] = block_cgPVo_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPVj_info" {
     block_cgPVj_info:
         const _cgPVj;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPVo() //  [R1]
         { []
         }
     {offset
       cgPVo: // global
           I64[Sp] = block_cgPVs_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPVo_info" {
     block_cgPVo_info:
         const _cgPVo;
         const 2;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPVs() //  [R1]
         { []
         }
     {offset
       cgPVs: // global
           _sgN16::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPVu_info;
           R2 = _sgN16::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPVs_info" {
     block_cgPVs_info:
         const _cgPVs;
         const 130;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPVu() //  [R1]
         { []
         }
     {offset
       cgPVu: // global
           I64[Sp] = block_cgPVy_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPVu_info" {
     block_cgPVu_info:
         const _cgPVu;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPVy() //  [R1]
         { []
         }
     {offset
       cgPVy: // global
           I64[Sp] = block_cgPVC_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPVy_info" {
     block_cgPVy_info:
         const _cgPVy;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgPVC() //  [R1]
         { []
         }
     {offset
       cgPVC: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPVC_info" {
     block_cgPVC_info:
         const _cgPVC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.43783334 UTC

[section ""data" . Data.Complex.$fFractionalComplex_$cfromRational_closure" {
     Data.Complex.$fFractionalComplex_$cfromRational_closure:
         const Data.Complex.$fFractionalComplex_$cfromRational_info;
         const 0;
 },
 Data.Complex.$fFractionalComplex_$cfromRational_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cgPWr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgPWs; else goto cgPWt;
       cgPWs: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFractionalComplex_$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPWt: // global
           I64[Sp - 8] = block_cgPWo_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromRational_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFractionalComplex_$cfromRational_info" {
     Data.Complex.$fFractionalComplex_$cfromRational_info:
         const Data.Complex.$fFractionalComplex_$cfromRational_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+480;
 },
 _cgPWo() //  [R1, R2]
         { []
         }
     {offset
       cgPWo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPWw; else goto cgPWv;
       cgPWw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPWv: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPWo_info" {
     block_cgPWo_info:
         const _cgPWo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.445125646 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c+_closure" {
     Data.Complex.$fFloatingComplex_$s$c+_closure:
         const Data.Complex.$fFloatingComplex_$s$c+_info;
 },
 Data.Complex.$fFloatingComplex_$s$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       cgPWP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPXq; else goto cgPXr;
       cgPXq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPXr: // global
           I64[Sp - 16] = block_cgPWM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugPXB; else goto cgPWN;
       ugPXB: // global
           call _cgPWM(R1) args: 0, res: 0, upd: 0;
       cgPWN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c+_info" {
     Data.Complex.$fFloatingComplex_$s$c+_info:
         const Data.Complex.$fFloatingComplex_$s$c+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgPWM() //  [R1]
         { []
         }
     {offset
       cgPWM: // global
           I64[Sp - 8] = block_cgPWS_info;
           _sgN1l::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN1l::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPXA; else goto cgPWT;
       ugPXA: // global
           call _cgPWS(R1) args: 0, res: 0, upd: 0;
       cgPWT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPWM_info" {
     block_cgPWM_info:
         const _cgPWM;
         const 1;
         const 30;
 },
 _cgPWS() //  [R1]
         { []
         }
     {offset
       cgPWS: // global
           I64[Sp] = block_cgPWX_info;
           _sgN1n::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN1n::F64;
           if (R1 & 7 != 0) goto ugPXC; else goto cgPWY;
       ugPXC: // global
           call _cgPWX(R1) args: 0, res: 0, upd: 0;
       cgPWY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPWS_info" {
     block_cgPWS_info:
         const _cgPWS;
         const 2;
         const 30;
 },
 _cgPWX() //  [R1]
         { []
         }
     {offset
       cgPWX: // global
           I64[Sp] = block_cgPX2_info;
           _sgN1p::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgN1p::F64;
           if (R1 & 7 != 0) goto ugPXD; else goto cgPX3;
       ugPXD: // global
           call _cgPX2(R1) args: 0, res: 0, upd: 0;
       cgPX3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPWX_info" {
     block_cgPWX_info:
         const _cgPWX;
         const 66;
         const 30;
 },
 _cgPX2() //  [R1]
         { []
         }
     {offset
       cgPX2: // global
           I64[Sp - 8] = block_cgPX7_info;
           _sgN1s::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN1s::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPXE; else goto cgPX8;
       ugPXE: // global
           call _cgPX7(R1) args: 0, res: 0, upd: 0;
       cgPX8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPX2_info" {
     block_cgPX2_info:
         const _cgPX2;
         const 194;
         const 30;
 },
 _cgPX7() //  [R1]
         { []
         }
     {offset
       cgPX7: // global
           I64[Sp] = block_cgPXc_info;
           _sgN1u::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN1u::F64;
           if (R1 & 7 != 0) goto ugPXF; else goto cgPXd;
       ugPXF: // global
           call _cgPXc(R1) args: 0, res: 0, upd: 0;
       cgPXd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPX7_info" {
     block_cgPX7_info:
         const _cgPX7;
         const 387;
         const 30;
 },
 _cgPXc() //  [R1]
         { []
         }
     {offset
       cgPXc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgPXz; else goto cgPXy;
       cgPXz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgPXy: // global
           _sgN1z::F64 = %MO_F_Add_W64(F64[Sp + 24], F64[R1 + 7]);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _sgN1z::F64;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Add_W64(F64[Sp + 16], F64[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPXc_info" {
     block_cgPXc_info:
         const _cgPXc;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.459753041 UTC

[section ""data" . Data.Complex.$w$c+_closure" {
     Data.Complex.$w$c+_closure:
         const Data.Complex.$w$c+_info;
 },
 Data.Complex.$w$c+_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgPYv: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgPYJ; else goto cgPYK;
       cgPYJ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c+_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPYK: // global
           I64[Sp - 40] = block_cgPYt_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c+_info" {
     Data.Complex.$w$c+_info:
         const Data.Complex.$w$c+_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgPYt() //  [R1]
         { []
         }
     {offset
       cgPYt: // global
           I64[Sp] = block_cgPYy_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPYt_info" {
     block_cgPYt_info:
         const _cgPYt;
         const 4;
         const 30;
 },
 _cgPYy() //  [R1]
         { []
         }
     {offset
       cgPYy: // global
           I64[Sp] = block_cgPYC_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPYy_info" {
     block_cgPYy_info:
         const _cgPYy;
         const 4;
         const 30;
 },
 _cgPYC() //  [R1]
         { []
         }
     {offset
       cgPYC: // global
           _sgN1C::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgPYG_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sgN1C::P64;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPYC_info" {
     block_cgPYC_info:
         const _cgPYC;
         const 4;
         const 30;
 },
 _cgPYG() //  [R1]
         { []
         }
     {offset
       cgPYG: // global
           _sgN1I::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgPYI_info;
           R2 = _sgN1I::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPYG_info" {
     block_cgPYG_info:
         const _cgPYG;
         const 3;
         const 30;
 },
 _cgPYI() //  [R1]
         { []
         }
     {offset
       cgPYI: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPYI_info" {
     block_cgPYI_info:
         const _cgPYI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.471812709 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c+_closure" {
     Data.Complex.$fFloatingComplex_$c+_closure:
         const Data.Complex.$fFloatingComplex_$c+_info;
 },
 Data.Complex.$fFloatingComplex_$c+_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgPZt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgPZE; else goto cgPZF;
       cgPZE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c+_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgPZF: // global
           I64[Sp - 24] = block_cgPZq_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugPZM; else goto cgPZr;
       ugPZM: // global
           call _cgPZq(R1) args: 0, res: 0, upd: 0;
       cgPZr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c+_info" {
     Data.Complex.$fFloatingComplex_$c+_info:
         const Data.Complex.$fFloatingComplex_$c+_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgPZq() //  [R1]
         { []
         }
     {offset
       cgPZq: // global
           I64[Sp - 8] = block_cgPZw_info;
           _sgN1P::P64 = P64[R1 + 7];
           _sgN1Q::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgN1Q::P64;
           P64[Sp + 16] = _sgN1P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugPZL; else goto cgPZx;
       ugPZL: // global
           call _cgPZw(R1) args: 0, res: 0, upd: 0;
       cgPZx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPZq_info" {
     block_cgPZq_info:
         const _cgPZq;
         const 2;
         const 30;
 },
 _cgPZw() //  [R1]
         { []
         }
     {offset
       cgPZw: // global
           _sgN1P::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgPZB_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgN1P::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPZw_info" {
     block_cgPZw_info:
         const _cgPZw;
         const 3;
         const 30;
 },
 _cgPZB() //  [R1, R2]
         { []
         }
     {offset
       cgPZB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgPZK; else goto cgPZJ;
       cgPZK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgPZJ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgPZB_info" {
     block_cgPZB_info:
         const _cgPZB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.483205023 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c-_closure" {
     Data.Complex.$fFloatingComplex_$s$c-_closure:
         const Data.Complex.$fFloatingComplex_$s$c-_info;
 },
 Data.Complex.$fFloatingComplex_$s$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQ0f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQ0Q; else goto cgQ0R;
       cgQ0Q: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQ0R: // global
           I64[Sp - 16] = block_cgQ0c_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQ11; else goto cgQ0d;
       ugQ11: // global
           call _cgQ0c(R1) args: 0, res: 0, upd: 0;
       cgQ0d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c-_info" {
     Data.Complex.$fFloatingComplex_$s$c-_info:
         const Data.Complex.$fFloatingComplex_$s$c-_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgQ0c() //  [R1]
         { []
         }
     {offset
       cgQ0c: // global
           I64[Sp - 8] = block_cgQ0i_info;
           _sgN21::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN21::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ10; else goto cgQ0j;
       ugQ10: // global
           call _cgQ0i(R1) args: 0, res: 0, upd: 0;
       cgQ0j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ0c_info" {
     block_cgQ0c_info:
         const _cgQ0c;
         const 1;
         const 30;
 },
 _cgQ0i() //  [R1]
         { []
         }
     {offset
       cgQ0i: // global
           I64[Sp] = block_cgQ0n_info;
           _sgN23::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN23::F64;
           if (R1 & 7 != 0) goto ugQ12; else goto cgQ0o;
       ugQ12: // global
           call _cgQ0n(R1) args: 0, res: 0, upd: 0;
       cgQ0o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ0i_info" {
     block_cgQ0i_info:
         const _cgQ0i;
         const 2;
         const 30;
 },
 _cgQ0n() //  [R1]
         { []
         }
     {offset
       cgQ0n: // global
           I64[Sp] = block_cgQ0s_info;
           _sgN25::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgN25::F64;
           if (R1 & 7 != 0) goto ugQ13; else goto cgQ0t;
       ugQ13: // global
           call _cgQ0s(R1) args: 0, res: 0, upd: 0;
       cgQ0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ0n_info" {
     block_cgQ0n_info:
         const _cgQ0n;
         const 66;
         const 30;
 },
 _cgQ0s() //  [R1]
         { []
         }
     {offset
       cgQ0s: // global
           I64[Sp - 8] = block_cgQ0x_info;
           _sgN28::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN28::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ14; else goto cgQ0y;
       ugQ14: // global
           call _cgQ0x(R1) args: 0, res: 0, upd: 0;
       cgQ0y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ0s_info" {
     block_cgQ0s_info:
         const _cgQ0s;
         const 194;
         const 30;
 },
 _cgQ0x() //  [R1]
         { []
         }
     {offset
       cgQ0x: // global
           I64[Sp] = block_cgQ0C_info;
           _sgN2a::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN2a::F64;
           if (R1 & 7 != 0) goto ugQ15; else goto cgQ0D;
       ugQ15: // global
           call _cgQ0C(R1) args: 0, res: 0, upd: 0;
       cgQ0D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ0x_info" {
     block_cgQ0x_info:
         const _cgQ0x;
         const 387;
         const 30;
 },
 _cgQ0C() //  [R1]
         { []
         }
     {offset
       cgQ0C: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQ0Z; else goto cgQ0Y;
       cgQ0Z: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQ0Y: // global
           _sgN2f::F64 = %MO_F_Sub_W64(F64[Sp + 24], F64[R1 + 7]);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _sgN2f::F64;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Sub_W64(F64[Sp + 16], F64[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ0C_info" {
     block_cgQ0C_info:
         const _cgQ0C;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.497728376 UTC

[section ""data" . Data.Complex.$w$c-_closure" {
     Data.Complex.$w$c-_closure:
         const Data.Complex.$w$c-_info;
 },
 Data.Complex.$w$c-_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgQ1V: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgQ29; else goto cgQ2a;
       cgQ29: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c-_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQ2a: // global
           I64[Sp - 40] = block_cgQ1T_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c-_info" {
     Data.Complex.$w$c-_info:
         const Data.Complex.$w$c-_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgQ1T() //  [R1]
         { []
         }
     {offset
       cgQ1T: // global
           I64[Sp] = block_cgQ1Y_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ1T_info" {
     block_cgQ1T_info:
         const _cgQ1T;
         const 4;
         const 30;
 },
 _cgQ1Y() //  [R1]
         { []
         }
     {offset
       cgQ1Y: // global
           I64[Sp] = block_cgQ22_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ1Y_info" {
     block_cgQ1Y_info:
         const _cgQ1Y;
         const 4;
         const 30;
 },
 _cgQ22() //  [R1]
         { []
         }
     {offset
       cgQ22: // global
           _sgN2i::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQ26_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sgN2i::P64;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ22_info" {
     block_cgQ22_info:
         const _cgQ22;
         const 4;
         const 30;
 },
 _cgQ26() //  [R1]
         { []
         }
     {offset
       cgQ26: // global
           _sgN2o::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgQ28_info;
           R2 = _sgN2o::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ26_info" {
     block_cgQ26_info:
         const _cgQ26;
         const 3;
         const 30;
 },
 _cgQ28() //  [R1]
         { []
         }
     {offset
       cgQ28: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ28_info" {
     block_cgQ28_info:
         const _cgQ28;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.509783037 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c-_closure" {
     Data.Complex.$fFloatingComplex_$c-_closure:
         const Data.Complex.$fFloatingComplex_$c-_info;
 },
 Data.Complex.$fFloatingComplex_$c-_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQ2T: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQ34; else goto cgQ35;
       cgQ34: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c-_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQ35: // global
           I64[Sp - 24] = block_cgQ2Q_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugQ3c; else goto cgQ2R;
       ugQ3c: // global
           call _cgQ2Q(R1) args: 0, res: 0, upd: 0;
       cgQ2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c-_info" {
     Data.Complex.$fFloatingComplex_$c-_info:
         const Data.Complex.$fFloatingComplex_$c-_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgQ2Q() //  [R1]
         { []
         }
     {offset
       cgQ2Q: // global
           I64[Sp - 8] = block_cgQ2W_info;
           _sgN2v::P64 = P64[R1 + 7];
           _sgN2w::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgN2w::P64;
           P64[Sp + 16] = _sgN2v::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ3b; else goto cgQ2X;
       ugQ3b: // global
           call _cgQ2W(R1) args: 0, res: 0, upd: 0;
       cgQ2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ2Q_info" {
     block_cgQ2Q_info:
         const _cgQ2Q;
         const 2;
         const 30;
 },
 _cgQ2W() //  [R1]
         { []
         }
     {offset
       cgQ2W: // global
           _sgN2v::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgQ31_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgN2v::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ2W_info" {
     block_cgQ2W_info:
         const _cgQ2W;
         const 3;
         const 30;
 },
 _cgQ31() //  [R1, R2]
         { []
         }
     {offset
       cgQ31: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQ3a; else goto cgQ39;
       cgQ3a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQ39: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ31_info" {
     block_cgQ31_info:
         const _cgQ31;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.521208382 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c*_closure" {
     Data.Complex.$fFloatingComplex_$s$c*_closure:
         const Data.Complex.$fFloatingComplex_$s$c*_info;
 },
 Data.Complex.$fFloatingComplex_$s$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQ3F: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQ4s; else goto cgQ4t;
       cgQ4s: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQ4t: // global
           I64[Sp - 16] = block_cgQ3C_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQ4D; else goto cgQ3D;
       ugQ4D: // global
           call _cgQ3C(R1) args: 0, res: 0, upd: 0;
       cgQ3D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c*_info" {
     Data.Complex.$fFloatingComplex_$s$c*_info:
         const Data.Complex.$fFloatingComplex_$s$c*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgQ3C() //  [R1]
         { []
         }
     {offset
       cgQ3C: // global
           I64[Sp - 8] = block_cgQ3I_info;
           _sgN2H::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN2H::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ4C; else goto cgQ3J;
       ugQ4C: // global
           call _cgQ3I(R1) args: 0, res: 0, upd: 0;
       cgQ3J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ3C_info" {
     block_cgQ3C_info:
         const _cgQ3C;
         const 1;
         const 30;
 },
 _cgQ3I() //  [R1]
         { []
         }
     {offset
       cgQ3I: // global
           I64[Sp] = block_cgQ3N_info;
           _sgN2J::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN2J::F64;
           if (R1 & 7 != 0) goto ugQ4E; else goto cgQ3O;
       ugQ4E: // global
           call _cgQ3N(R1) args: 0, res: 0, upd: 0;
       cgQ3O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ3I_info" {
     block_cgQ3I_info:
         const _cgQ3I;
         const 2;
         const 30;
 },
 _cgQ3N() //  [R1]
         { []
         }
     {offset
       cgQ3N: // global
           I64[Sp] = block_cgQ3S_info;
           _sgN2L::F64 = F64[R1 + 7];
           R1 = P64[Sp + 16];
           F64[Sp + 16] = _sgN2L::F64;
           if (R1 & 7 != 0) goto ugQ4F; else goto cgQ3T;
       ugQ4F: // global
           call _cgQ3S(R1) args: 0, res: 0, upd: 0;
       cgQ3T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ3N_info" {
     block_cgQ3N_info:
         const _cgQ3N;
         const 66;
         const 30;
 },
 _cgQ3S() //  [R1]
         { []
         }
     {offset
       cgQ3S: // global
           I64[Sp - 8] = block_cgQ3X_info;
           _sgN2O::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN2O::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ4G; else goto cgQ3Y;
       ugQ4G: // global
           call _cgQ3X(R1) args: 0, res: 0, upd: 0;
       cgQ3Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ3S_info" {
     block_cgQ3S_info:
         const _cgQ3S;
         const 194;
         const 30;
 },
 _cgQ3X() //  [R1]
         { []
         }
     {offset
       cgQ3X: // global
           I64[Sp] = block_cgQ42_info;
           _sgN2Q::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN2Q::F64;
           if (R1 & 7 != 0) goto ugQ4H; else goto cgQ43;
       ugQ4H: // global
           call _cgQ42(R1) args: 0, res: 0, upd: 0;
       cgQ43: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ3X_info" {
     block_cgQ3X_info:
         const _cgQ3X;
         const 387;
         const 30;
 },
 _cgQ42() //  [R1]
         { []
         }
     {offset
       cgQ42: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQ4B; else goto cgQ4A;
       cgQ4B: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQ4A: // global
           _sgN2S::F64 = F64[R1 + 7];
           I64[Hp - 48] = GHC.Types.D#_con_info;
           _sgN2J::F64 = F64[Sp + 16];
           _sgN2L::F64 = F64[Sp + 24];
           _sgN2Q::F64 = F64[Sp + 8];
           F64[Hp - 40] = %MO_F_Add_W64(%MO_F_Mul_W64(_sgN2J::F64,
                                                      _sgN2S::F64),
                                        %MO_F_Mul_W64(_sgN2L::F64, _sgN2Q::F64));
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Sub_W64(%MO_F_Mul_W64(_sgN2J::F64,
                                                      _sgN2Q::F64),
                                        %MO_F_Mul_W64(_sgN2L::F64, _sgN2S::F64));
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ42_info" {
     block_cgQ42_info:
         const _cgQ42;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.53830013 UTC

[section ""data" . Data.Complex.$w$c*_closure" {
     Data.Complex.$w$c*_closure:
         const Data.Complex.$w$c*_info;
 },
 sat_sgN3a_entry() //  [R1]
         { []
         }
     {offset
       cgQ5R: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgQ5S; else goto cgQ5T;
       cgQ5S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQ5T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN3a_info" {
     sat_sgN3a_info:
         const sat_sgN3a_entry;
         const 3;
         const 15;
 },
 sat_sgN39_entry() //  [R1]
         { []
         }
     {offset
       cgQ5Y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgQ5Z; else goto cgQ60;
       cgQ5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQ60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN39_info" {
     sat_sgN39_info:
         const sat_sgN39_entry;
         const 3;
         const 15;
 },
 sat_sgN3d_entry() //  [R1]
         { []
         }
     {offset
       cgQ67: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgQ68; else goto cgQ69;
       cgQ68: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQ69: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN3d_info" {
     sat_sgN3d_info:
         const sat_sgN3d_entry;
         const 3;
         const 15;
 },
 sat_sgN3c_entry() //  [R1]
         { []
         }
     {offset
       cgQ6e: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgQ6f; else goto cgQ6g;
       cgQ6f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQ6g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN3c_info" {
     sat_sgN3c_info:
         const sat_sgN3c_entry;
         const 3;
         const 15;
 },
 Data.Complex.$w$c*_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgQ6h: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgQ6j; else goto cgQ6k;
       cgQ6j: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c*_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQ6k: // global
           I64[Sp - 40] = block_cgQ5B_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c*_info" {
     Data.Complex.$w$c*_info:
         const Data.Complex.$w$c*_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgQ5B() //  [R1]
         { []
         }
     {offset
       cgQ5B: // global
           I64[Sp] = block_cgQ5F_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ5B_info" {
     block_cgQ5B_info:
         const _cgQ5B;
         const 4;
         const 30;
 },
 _cgQ5F() //  [R1]
         { []
         }
     {offset
       cgQ5F: // global
           I64[Sp] = block_cgQ5J_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ5F_info" {
     block_cgQ5F_info:
         const _cgQ5F;
         const 4;
         const 30;
 },
 _cgQ5J() //  [R1]
         { []
         }
     {offset
       cgQ5J: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgQ6p; else goto cgQ6o;
       cgQ6p: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQ6o: // global
           I64[Hp - 72] = sat_sgN3a_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sgN39_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgQ61_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 32;
           P64[Sp - 16] = Hp - 72;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ5J_info" {
     block_cgQ5J_info:
         const _cgQ5J;
         const 4;
         const 30;
 },
 _cgQ61() //  [R1]
         { []
         }
     {offset
       cgQ61: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgQ6s; else goto cgQ6r;
       cgQ6s: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQ6r: // global
           I64[Hp - 72] = sat_sgN3d_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           _sgN38::P64 = P64[Sp + 8];
           P64[Hp - 40] = _sgN38::P64;
           I64[Hp - 32] = sat_sgN3c_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgN38::P64;
           I64[Sp + 32] = block_cgQ6i_info;
           R2 = _sgN38::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 32;
           P64[Sp + 24] = Hp - 72;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ61_info" {
     block_cgQ61_info:
         const _cgQ61;
         const 5;
         const 30;
 },
 _cgQ6i() //  [R1]
         { []
         }
     {offset
       cgQ6i: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ6i_info" {
     block_cgQ6i_info:
         const _cgQ6i;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.558537388 UTC

[section ""data" . Data.Complex.$fNumComplex_$c*_closure" {
     Data.Complex.$fNumComplex_$c*_closure:
         const Data.Complex.$fNumComplex_$c*_info;
 },
 Data.Complex.$fNumComplex_$c*_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQ7Q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQ81; else goto cgQ82;
       cgQ81: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_$c*_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQ82: // global
           I64[Sp - 24] = block_cgQ7N_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugQ89; else goto cgQ7O;
       ugQ89: // global
           call _cgQ7N(R1) args: 0, res: 0, upd: 0;
       cgQ7O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_$c*_info" {
     Data.Complex.$fNumComplex_$c*_info:
         const Data.Complex.$fNumComplex_$c*_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgQ7N() //  [R1]
         { []
         }
     {offset
       cgQ7N: // global
           I64[Sp - 8] = block_cgQ7T_info;
           _sgN3j::P64 = P64[R1 + 7];
           _sgN3k::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgN3k::P64;
           P64[Sp + 16] = _sgN3j::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ88; else goto cgQ7U;
       ugQ88: // global
           call _cgQ7T(R1) args: 0, res: 0, upd: 0;
       cgQ7U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ7N_info" {
     block_cgQ7N_info:
         const _cgQ7N;
         const 2;
         const 30;
 },
 _cgQ7T() //  [R1]
         { []
         }
     {offset
       cgQ7T: // global
           _sgN3j::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgQ7Y_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgN3j::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ7T_info" {
     block_cgQ7T_info:
         const _cgQ7T;
         const 3;
         const 30;
 },
 _cgQ7Y() //  [R1, R2]
         { []
         }
     {offset
       cgQ7Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQ87; else goto cgQ86;
       cgQ87: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQ86: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ7Y_info" {
     block_cgQ7Y_info:
         const _cgQ7Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.568161269 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cnegate_closure" {
     Data.Complex.$fFloatingComplex_$s$cnegate_closure:
         const Data.Complex.$fFloatingComplex_$s$cnegate_info;
 },
 Data.Complex.$fFloatingComplex_$s$cnegate_entry() //  [R2]
         { []
         }
     {offset
       cgQ8C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQ8Y; else goto cgQ8Z;
       cgQ8Y: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQ8Z: // global
           I64[Sp - 8] = block_cgQ8z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ96; else goto cgQ8A;
       ugQ96: // global
           call _cgQ8z(R1) args: 0, res: 0, upd: 0;
       cgQ8A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cnegate_info" {
     Data.Complex.$fFloatingComplex_$s$cnegate_info:
         const Data.Complex.$fFloatingComplex_$s$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgQ8z() //  [R1]
         { []
         }
     {offset
       cgQ8z: // global
           I64[Sp - 8] = block_cgQ8F_info;
           _sgN3u::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN3u::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQ95; else goto cgQ8G;
       ugQ95: // global
           call _cgQ8F(R1) args: 0, res: 0, upd: 0;
       cgQ8G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ8z_info" {
     block_cgQ8z_info:
         const _cgQ8z;
         const 0;
         const 30;
 },
 _cgQ8F() //  [R1]
         { []
         }
     {offset
       cgQ8F: // global
           I64[Sp] = block_cgQ8K_info;
           _sgN3w::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN3w::F64;
           if (R1 & 7 != 0) goto ugQ97; else goto cgQ8L;
       ugQ97: // global
           call _cgQ8K(R1) args: 0, res: 0, upd: 0;
       cgQ8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ8F_info" {
     block_cgQ8F_info:
         const _cgQ8F;
         const 1;
         const 30;
 },
 _cgQ8K() //  [R1]
         { []
         }
     {offset
       cgQ8K: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQ94; else goto cgQ93;
       cgQ94: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQ93: // global
           _sgN3B::F64 = %MO_F_Neg_W64(F64[R1 + 7]);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = _sgN3B::F64;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ8K_info" {
     block_cgQ8K_info:
         const _cgQ8K;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.578017117 UTC

[section ""data" . Data.Complex.$w$cnegate_closure" {
     Data.Complex.$w$cnegate_closure:
         const Data.Complex.$w$cnegate_info;
 },
 Data.Complex.$w$cnegate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQ9J: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgQ9X; else goto cgQ9Y;
       cgQ9X: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cnegate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQ9Y: // global
           I64[Sp - 24] = block_cgQ9H_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cnegate_info" {
     Data.Complex.$w$cnegate_info:
         const Data.Complex.$w$cnegate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgQ9H() //  [R1]
         { []
         }
     {offset
       cgQ9H: // global
           I64[Sp] = block_cgQ9M_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ9H_info" {
     block_cgQ9H_info:
         const _cgQ9H;
         const 2;
         const 30;
 },
 _cgQ9M() //  [R1]
         { []
         }
     {offset
       cgQ9M: // global
           I64[Sp] = block_cgQ9Q_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ9M_info" {
     block_cgQ9M_info:
         const _cgQ9M;
         const 2;
         const 30;
 },
 _cgQ9Q() //  [R1]
         { []
         }
     {offset
       cgQ9Q: // global
           I64[Sp] = block_cgQ9U_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ9Q_info" {
     block_cgQ9Q_info:
         const _cgQ9Q;
         const 2;
         const 30;
 },
 _cgQ9U() //  [R1]
         { []
         }
     {offset
       cgQ9U: // global
           _sgN3I::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQ9W_info;
           R2 = _sgN3I::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ9U_info" {
     block_cgQ9U_info:
         const _cgQ9U;
         const 2;
         const 30;
 },
 _cgQ9W() //  [R1]
         { []
         }
     {offset
       cgQ9W: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQ9W_info" {
     block_cgQ9W_info:
         const _cgQ9W;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.590591976 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cnegate_closure" {
     Data.Complex.$fFloatingComplex_$cnegate_closure:
         const Data.Complex.$fFloatingComplex_$cnegate_info;
 },
 Data.Complex.$fFloatingComplex_$cnegate_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQaG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQaM; else goto cgQaN;
       cgQaM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cnegate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQaN: // global
           I64[Sp - 16] = block_cgQaD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQaS; else goto cgQaE;
       ugQaS: // global
           call _cgQaD(R1) args: 0, res: 0, upd: 0;
       cgQaE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cnegate_info" {
     Data.Complex.$fFloatingComplex_$cnegate_info:
         const Data.Complex.$fFloatingComplex_$cnegate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgQaD() //  [R1]
         { []
         }
     {offset
       cgQaD: // global
           _sgN3L::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQaJ_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgN3L::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cnegate_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQaD_info" {
     block_cgQaD_info:
         const _cgQaD;
         const 1;
         const 30;
 },
 _cgQaJ() //  [R1, R2]
         { []
         }
     {offset
       cgQaJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQaR; else goto cgQaQ;
       cgQaR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQaQ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQaJ_info" {
     block_cgQaJ_info:
         const _cgQaJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.598932614 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cabs_closure" {
     Data.Complex.$fFloatingComplex_$s$cabs_closure:
         const Data.Complex.$fFloatingComplex_$s$cabs_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cabs_entry() //  [R2]
         { []
         }
     {offset
       cgQbg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQbz; else goto cgQbA;
       cgQbz: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cabs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQbA: // global
           I64[Sp - 8] = block_cgQbd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQbI; else goto cgQbe;
       ugQbI: // global
           call _cgQbd(R1) args: 0, res: 0, upd: 0;
       cgQbe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cabs_info" {
     Data.Complex.$fFloatingComplex_$s$cabs_info:
         const Data.Complex.$fFloatingComplex_$s$cabs_entry;
         const 0;
         const 2251804108652558;
         const 4294967301;
         const SgNTw_srt+344;
 },
 _cgQbd() //  [R1]
         { []
         }
     {offset
       cgQbd: // global
           I64[Sp - 8] = block_cgQbj_info;
           _sgN3W::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN3W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQbH; else goto cgQbk;
       ugQbH: // global
           call _cgQbj(R1) args: 0, res: 0, upd: 0;
       cgQbk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQbd_info" {
     block_cgQbd_info:
         const _cgQbd;
         const 0;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgQbj() //  [R1]
         { []
         }
     {offset
       cgQbj: // global
           I64[Sp] = block_cgQbo_info;
           _sgN3Y::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN3Y::F64;
           if (R1 & 7 != 0) goto ugQbJ; else goto cgQbp;
       ugQbJ: // global
           call _cgQbo(R1) args: 0, res: 0, upd: 0;
       cgQbp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQbj_info" {
     block_cgQbj_info:
         const _cgQbj;
         const 1;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgQbo() //  [R1]
         { []
         }
     {offset
       cgQbo: // global
           _sgN3Y::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgQbt_info;
           D2 = F64[R1 + 7];
           D1 = _sgN3Y::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQbo_info" {
     block_cgQbo_info:
         const _cgQbo;
         const 65;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgQbt() //  [D1]
         { []
         }
     {offset
       cgQbt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgQbG; else goto cgQbF;
       cgQbG: // global
           HpAlloc = 40;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgQbF: // global
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = D1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQbt_info" {
     block_cgQbt_info:
         const _cgQbt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.610109583 UTC

[section ""data" . Data.Complex.$w$cabs_closure" {
     Data.Complex.$w$cabs_closure:
         const Data.Complex.$w$cabs_info;
         const 0;
 },
 Data.Complex.$w$cabs_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQcl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQcx; else goto cgQcy;
       cgQcx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cabs_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQcy: // global
           I64[Sp - 16] = block_cgQch_info;
           R4 = R4;
           R3 = R3;
           _sgN43::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sgN43::P64;
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cabs_info" {
     Data.Complex.$w$cabs_info:
         const Data.Complex.$w$cabs_entry;
         const 0;
         const 144115192370823182;
         const 12884901911;
         const SgNTw_srt+304;
 },
 _cgQch() //  [R1]
         { []
         }
     {offset
       cgQch: // global
           I64[Sp] = block_cgQcj_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQch_info" {
     block_cgQch_info:
         const _cgQch;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQcj() //  [R1]
         { []
         }
     {offset
       cgQcj: // global
           I64[Sp] = block_cgQco_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQcj_info" {
     block_cgQcj_info:
         const _cgQcj;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQco() //  [R1]
         { []
         }
     {offset
       cgQco: // global
           I64[Sp] = block_cgQcs_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQco_info" {
     block_cgQco_info:
         const _cgQco;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQcs() //  [R1]
         { []
         }
     {offset
       cgQcs: // global
           I64[Sp] = block_cgQcw_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQcs_info" {
     block_cgQcs_info:
         const _cgQcs;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQcw() //  [R1]
         { []
         }
     {offset
       cgQcw: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQcw_info" {
     block_cgQcw_info:
         const _cgQcw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.621899276 UTC

[section ""data" . Data.Complex.$fNumComplex_$cabs_closure" {
     Data.Complex.$fNumComplex_$cabs_closure:
         const Data.Complex.$fNumComplex_$cabs_info;
         const 0;
 },
 Data.Complex.$fNumComplex_$cabs_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQde: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQdk; else goto cgQdl;
       cgQdk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_$cabs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQdl: // global
           I64[Sp - 16] = block_cgQdb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQdq; else goto cgQdc;
       ugQdq: // global
           call _cgQdb(R1) args: 0, res: 0, upd: 0;
       cgQdc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_$cabs_info" {
     Data.Complex.$fNumComplex_$cabs_info:
         const Data.Complex.$fNumComplex_$cabs_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+504;
 },
 _cgQdb() //  [R1]
         { []
         }
     {offset
       cgQdb: // global
           _sgN4b::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQdh_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgN4b::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cabs_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQdb_info" {
     block_cgQdb_info:
         const _cgQdb;
         const 1;
         const 4294967326;
         const SgNTw_srt+504;
 },
 _cgQdh() //  [R1, R2]
         { []
         }
     {offset
       cgQdh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQdp; else goto cgQdo;
       cgQdp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQdo: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQdh_info" {
     block_cgQdh_info:
         const _cgQdh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.630117462 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cfromInteger_closure" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger_closure:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger_info;
 },
 Data.Complex.$fFloatingComplex_$s$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cgQdN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgQdS; else goto cgQdT;
       cgQdS: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQdT: // global
           I64[Sp - 8] = block_cgQdL_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cfromInteger_info" {
     Data.Complex.$fFloatingComplex_$s$cfromInteger_info:
         const Data.Complex.$fFloatingComplex_$s$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgQdL() //  [D1]
         { []
         }
     {offset
       cgQdL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgQdW; else goto cgQdV;
       cgQdW: // global
           HpAlloc = 40;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgQdV: // global
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = D1;
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQdL_info" {
     block_cgQdL_info:
         const _cgQdL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.636342549 UTC

[section ""data" . Data.Complex.$w$cfromInteger_closure" {
     Data.Complex.$w$cfromInteger_closure:
         const Data.Complex.$w$cfromInteger_info;
         const 0;
 },
 Data.Complex.$w$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQeh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQev; else goto cgQew;
       cgQev: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQew: // global
           I64[Sp - 16] = block_cgQef_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cfromInteger_info" {
     Data.Complex.$w$cfromInteger_info:
         const Data.Complex.$w$cfromInteger_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const SgNTw_srt+304;
 },
 _cgQef() //  [R1]
         { []
         }
     {offset
       cgQef: // global
           I64[Sp] = block_cgQek_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQef_info" {
     block_cgQef_info:
         const _cgQef;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQek() //  [R1]
         { []
         }
     {offset
       cgQek: // global
           I64[Sp] = block_cgQeo_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQek_info" {
     block_cgQek_info:
         const _cgQek;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQeo() //  [R1]
         { []
         }
     {offset
       cgQeo: // global
           I64[Sp] = block_cgQes_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQeo_info" {
     block_cgQeo_info:
         const _cgQeo;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQes() //  [R1]
         { []
         }
     {offset
       cgQes: // global
           I64[Sp] = block_cgQeu_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQes_info" {
     block_cgQes_info:
         const _cgQes;
         const 1;
         const 4294967326;
         const SgNTw_srt+304;
 },
 _cgQeu() //  [R1]
         { []
         }
     {offset
       cgQeu: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQeu_info" {
     block_cgQeu_info:
         const _cgQeu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.647724623 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cfromInteger_closure" {
     Data.Complex.$fFloatingComplex_$cfromInteger_closure:
         const Data.Complex.$fFloatingComplex_$cfromInteger_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQfe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgQff; else goto cgQfg;
       cgQff: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQfg: // global
           I64[Sp - 8] = block_cgQfb_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cfromInteger_info" {
     Data.Complex.$fFloatingComplex_$cfromInteger_info:
         const Data.Complex.$fFloatingComplex_$cfromInteger_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+520;
 },
 _cgQfb() //  [R1, R2]
         { []
         }
     {offset
       cgQfb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQfj; else goto cgQfi;
       cgQfj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQfi: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQfb_info" {
     block_cgQfb_info:
         const _cgQfb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.652907685 UTC

[section ""data" . Data.Complex.$fFloatingComplex4_closure" {
     Data.Complex.$fFloatingComplex4_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.657188682 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csignum_closure" {
     Data.Complex.$fFloatingComplex_$s$csignum_closure:
         const Data.Complex.$fFloatingComplex_$s$csignum_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csignum_entry() //  [R2]
         { []
         }
     {offset
       cgQfD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgQfM; else goto cgQfN;
       cgQfM: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQfN: // global
           I64[Sp - 8] = block_cgQfA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQgF; else goto cgQfB;
       ugQgF: // global
           call _cgQfA(R1) args: 0, res: 0, upd: 0;
       cgQfB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csignum_info" {
     Data.Complex.$fFloatingComplex_$s$csignum_info:
         const Data.Complex.$fFloatingComplex_$s$csignum_entry;
         const 0;
         const 72057598332895246;
         const 4294967301;
         const SgNTw_srt+344;
 },
 _cgQfA() //  [R1]
         { []
         }
     {offset
       cgQfA: // global
           I64[Sp - 8] = block_cgQfG_info;
           _sgN4B::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN4B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQgE; else goto cgQfH;
       ugQgE: // global
           call _cgQfG(R1) args: 0, res: 0, upd: 0;
       cgQfH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQfA_info" {
     block_cgQfA_info:
         const _cgQfA;
         const 0;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgQfG() //  [R1]
         { []
         }
     {offset
       cgQfG: // global
           I64[Sp] = block_cgQfL_info;
           _sgN4D::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN4D::F64;
           if (R1 & 7 != 0) goto ugQgG; else goto cgQfQ;
       ugQgG: // global
           call _cgQfL(R1) args: 0, res: 0, upd: 0;
       cgQfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQfG_info" {
     block_cgQfG_info:
         const _cgQfG;
         const 1;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgQfL() //  [R1]
         { []
         }
     {offset
       cgQfL: // global
           _sgN4D::F64 = F64[Sp + 8];
           _sgN4F::F64 = F64[R1 + 7];
           if (%MO_F_Eq_W64(_sgN4D::F64,
                            0.0 :: W64)) goto cgQgD; else goto cgQgc;
       cgQgD: // global
           if (%MO_F_Eq_W64(_sgN4F::F64,
                            0.0 :: W64)) goto cgQgC; else goto cgQgy;
       cgQgC: // global
           R1 = Data.Complex.$fFloatingComplex4_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgQgy: // global
           I64[Sp - 8] = block_cgQgk_info;
           D2 = _sgN4F::F64;
           D1 = _sgN4D::F64;
           F64[Sp] = _sgN4F::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
       cgQgc: // global
           I64[Sp - 8] = block_cgQfY_info;
           D2 = _sgN4F::F64;
           D1 = _sgN4D::F64;
           F64[Sp] = _sgN4F::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQfL_info" {
     block_cgQfL_info:
         const _cgQfL;
         const 65;
         const 4294967326;
         const SgNTw_srt+344;
 },
 _cgQgk() //  [D1]
         { []
         }
     {offset
       cgQgk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQgB; else goto cgQgA;
       cgQgB: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgQgA: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Quot_W64(F64[Sp + 8], D1);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Quot_W64(F64[Sp + 16], D1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQgk_info" {
     block_cgQgk_info:
         const _cgQgk;
         const 194;
         const 30;
 },
 _cgQfY() //  [D1]
         { []
         }
     {offset
       cgQfY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQgf; else goto cgQge;
       cgQgf: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgQge: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Quot_W64(F64[Sp + 8], D1);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Quot_W64(F64[Sp + 16], D1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQfY_info" {
     block_cgQfY_info:
         const _cgQfY;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.67013848 UTC

[section ""data" . Data.Complex.$fFloatingComplex12_closure" {
     Data.Complex.$fFloatingComplex12_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.674483805 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csignum1_closure" {
     Data.Complex.$fFloatingComplex_$s$csignum1_closure:
         const Data.Complex.$fFloatingComplex_$s$csignum1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csignum1_entry() //  [R2]
         { []
         }
     {offset
       cgQhG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgQhP; else goto cgQhQ;
       cgQhP: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csignum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQhQ: // global
           I64[Sp - 8] = block_cgQhD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQiI; else goto cgQhE;
       ugQiI: // global
           call _cgQhD(R1) args: 0, res: 0, upd: 0;
       cgQhE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csignum1_info" {
     Data.Complex.$fFloatingComplex_$s$csignum1_info:
         const Data.Complex.$fFloatingComplex_$s$csignum1_entry;
         const 0;
         const 36028801313931278;
         const 4294967301;
         const SgNTw_srt+360;
 },
 _cgQhD() //  [R1]
         { []
         }
     {offset
       cgQhD: // global
           I64[Sp - 8] = block_cgQhJ_info;
           _sgN4V::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN4V::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQiH; else goto cgQhK;
       ugQiH: // global
           call _cgQhJ(R1) args: 0, res: 0, upd: 0;
       cgQhK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQhD_info" {
     block_cgQhD_info:
         const _cgQhD;
         const 0;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgQhJ() //  [R1]
         { []
         }
     {offset
       cgQhJ: // global
           I64[Sp] = block_cgQhO_info;
           _sgN4X::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgN4X::F32;
           if (R1 & 7 != 0) goto ugQiJ; else goto cgQhT;
       ugQiJ: // global
           call _cgQhO(R1) args: 0, res: 0, upd: 0;
       cgQhT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQhJ_info" {
     block_cgQhJ_info:
         const _cgQhJ;
         const 1;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgQhO() //  [R1]
         { []
         }
     {offset
       cgQhO: // global
           _sgN4X::F32 = F32[Sp + 8];
           _sgN4Z::F32 = F32[R1 + 7];
           if (%MO_F_Eq_W32(_sgN4X::F32,
                            0.0 :: W32)) goto cgQiG; else goto cgQif;
       cgQiG: // global
           if (%MO_F_Eq_W32(_sgN4Z::F32,
                            0.0 :: W32)) goto cgQiF; else goto cgQiB;
       cgQiF: // global
           R1 = Data.Complex.$fFloatingComplex12_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgQiB: // global
           I64[Sp - 8] = block_cgQin_info;
           F2 = _sgN4Z::F32;
           F1 = _sgN4X::F32;
           F32[Sp] = _sgN4Z::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
       cgQif: // global
           I64[Sp - 8] = block_cgQi1_info;
           F2 = _sgN4Z::F32;
           F1 = _sgN4X::F32;
           F32[Sp] = _sgN4Z::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQhO_info" {
     block_cgQhO_info:
         const _cgQhO;
         const 65;
         const 4294967326;
         const SgNTw_srt+360;
 },
 _cgQin() //  [F1]
         { []
         }
     {offset
       cgQin: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQiE; else goto cgQiD;
       cgQiE: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgQiD: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Quot_W32(F32[Sp + 8], F1);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Quot_W32(F32[Sp + 16], F1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQin_info" {
     block_cgQin_info:
         const _cgQin;
         const 194;
         const 30;
 },
 _cgQi1() //  [F1]
         { []
         }
     {offset
       cgQi1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQii; else goto cgQih;
       cgQii: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgQih: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Quot_W32(F32[Sp + 8], F1);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Quot_W32(F32[Sp + 16], F1);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQi1_info" {
     block_cgQi1_info:
         const _cgQi1;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.691433177 UTC

[section ""data" . Data.Complex.$w$csignum_closure" {
     Data.Complex.$w$csignum_closure:
         const Data.Complex.$w$csignum_info;
         const 0;
 },
 $dNum_sgN5h_entry() //  [R1]
         { []
         }
     {offset
       cgQjR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQjS; else goto cgQjT;
       cgQjS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQjT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgN5h_info" {
     $dNum_sgN5h_info:
         const $dNum_sgN5h_entry;
         const 1;
         const 16;
 },
 sat_sgN5q_entry() //  [R1]
         { []
         }
     {offset
       cgQk6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQk7; else goto cgQk8;
       cgQk7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQk8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN5q_info" {
     sat_sgN5q_info:
         const sat_sgN5q_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+304;
 },
 r_sgN5n_entry() //  [R1]
         { []
         }
     {offset
       cgQkm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQkn; else goto cgQko;
       cgQkn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQko: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . r_sgN5n_info" {
     r_sgN5n_info:
         const r_sgN5n_entry;
         const 3;
         const 15;
 },
 sat_sgN5s_entry() //  [R1]
         { []
         }
     {offset
       cgQky: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQkz; else goto cgQkA;
       cgQkz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQkA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN5s_info" {
     sat_sgN5s_info:
         const sat_sgN5s_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+304;
 },
 Data.Complex.$w$csignum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQkB: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgQkC; else goto cgQkD;
       cgQkC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$csignum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQkD: // global
           I64[Sp - 32] = block_cgQjF_info;
           _sgN5c::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgN5c::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csignum_info" {
     Data.Complex.$w$csignum_info:
         const Data.Complex.$w$csignum_entry;
         const 0;
         const 9799832793453166606;
         const 12884901911;
         const SgNTw_srt+304;
 },
 _cgQjF() //  [R1]
         { []
         }
     {offset
       cgQjF: // global
           I64[Sp - 8] = block_cgQjJ_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQjF_info" {
     block_cgQjF_info:
         const _cgQjF;
         const 3;
         const 576460756598390814;
         const SgNTw_srt+304;
 },
 _cgQjJ() //  [R1]
         { []
         }
     {offset
       cgQjJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQkH; else goto cgQkG;
       cgQkH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQkG: // global
           I64[Hp - 16] = $dNum_sgN5h_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgQjU_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQjJ_info" {
     block_cgQjJ_info:
         const _cgQjJ;
         const 4;
         const 576460756598390814;
         const SgNTw_srt+304;
 },
 _cgQjU() //  [R1]
         { []
         }
     {offset
       cgQjU: // global
           I64[Sp] = block_cgQjY_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQjU_info" {
     block_cgQjU_info:
         const _cgQjU;
         const 5;
         const 576460756598390814;
         const SgNTw_srt+304;
 },
 _cgQjY() //  [R1]
         { []
         }
     {offset
       cgQjY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQkL; else goto cgQkK;
       cgQkL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQkK: // global
           I64[Hp - 16] = sat_sgN5q_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgQkp_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQjY_info" {
     block_cgQjY_info:
         const _cgQjY;
         const 5;
         const 576460756598390814;
         const SgNTw_srt+304;
 },
 _cgQkp() //  [R1]
         { []
         }
     {offset
       cgQkp: // global
           if (R1 & 7 == 1) goto ugQlh; else goto cgQl1;
       ugQlh: // global
           Sp = Sp + 24;
           call _sgN5k() args: 0, res: 0, upd: 0;
       cgQl1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQl4; else goto cgQl3;
       cgQl4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQl3: // global
           I64[Hp - 16] = sat_sgN5s_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cgQl0_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQkp_info" {
     block_cgQkp_info:
         const _cgQkp;
         const 6;
         const 576460756598390814;
         const SgNTw_srt+304;
 },
 _cgQl0() //  [R1]
         { []
         }
     {offset
       cgQl0: // global
           if (R1 & 7 == 1) goto ugQli; else goto cgQle;
       ugQli: // global
           Sp = Sp + 8;
           call _sgN5k() args: 0, res: 0, upd: 0;
       cgQle: // global
           R3 = Data.Complex.$fFloatingComplex17_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQl0_info" {
     block_cgQl0_info:
         const _cgQl0;
         const 4;
         const 576460756598390814;
         const SgNTw_srt+304;
 },
 _sgN5k() //  []
         { []
         }
     {offset
       sgN5k: // global
           _sgN5f::P64 = P64[Sp];
           I64[Sp] = block_cgQke_info;
           R2 = _sgN5f::P64;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cgQke() //  [R1]
         { []
         }
     {offset
       cgQke: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgQkS; else goto cgQkR;
       cgQkS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQkR: // global
           I64[Hp - 32] = r_sgN5n_info;
           P64[Hp - 16] = P64[Sp + 8];
           _sgN5d::P64 = P64[Sp + 16];
           P64[Hp - 8] = _sgN5d::P64;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cgQkM_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgN5d::P64;
           _cgQki::P64 = Hp - 32;
           P64[Sp - 8] = _cgQki::P64;
           P64[Sp + 8] = R1;
           P64[Sp + 16] = _cgQki::P64;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQke_info" {
     block_cgQke_info:
         const _cgQke;
         const 3;
         const 30;
 },
 _cgQkM() //  [R1]
         { []
         }
     {offset
       cgQkM: // global
           _cgQki::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgQkO_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 8] = _cgQki::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Real./_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQkM_info" {
     block_cgQkM_info:
         const _cgQkM;
         const 3;
         const 30;
 },
 _cgQkO() //  [R1]
         { []
         }
     {offset
       cgQkO: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQkO_info" {
     block_cgQkO_info:
         const _cgQkO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.718176652 UTC

[section ""data" . Data.Complex.$fNumComplex_$csignum_closure" {
     Data.Complex.$fNumComplex_$csignum_closure:
         const Data.Complex.$fNumComplex_$csignum_info;
         const 0;
 },
 Data.Complex.$fNumComplex_$csignum_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQmU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQn0; else goto cgQn1;
       cgQn0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_$csignum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQn1: // global
           I64[Sp - 16] = block_cgQmR_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQn6; else goto cgQmS;
       ugQn6: // global
           call _cgQmR(R1) args: 0, res: 0, upd: 0;
       cgQmS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_$csignum_info" {
     Data.Complex.$fNumComplex_$csignum_info:
         const Data.Complex.$fNumComplex_$csignum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+552;
 },
 _cgQmR() //  [R1]
         { []
         }
     {offset
       cgQmR: // global
           _sgN5u::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQmX_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgN5u::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csignum_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQmR_info" {
     block_cgQmR_info:
         const _cgQmR;
         const 1;
         const 4294967326;
         const SgNTw_srt+552;
 },
 _cgQmX() //  [R1, R2]
         { []
         }
     {offset
       cgQmX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQn5; else goto cgQn4;
       cgQn5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQn4: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQmX_info" {
     block_cgQmX_info:
         const _cgQmX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.724801056 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fNumComplex_closure" {
     Data.Complex.$fFloatingComplex_$s$fNumComplex_closure:
         const GHC.Num.C:Num_con_info;
         const Data.Complex.$fFloatingComplex_$s$c+_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c-_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c*_closure+2;
         const Data.Complex.$fFloatingComplex_$s$cnegate_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cabs_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csignum_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.72674049 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fNumComplex1_closure" {
     Data.Complex.$fFloatingComplex_$s$fNumComplex1_closure:
         const GHC.Num.C:Num_con_info;
         const Data.Complex.$fFloatingComplex_$s$c+1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c-1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$c*1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$cnegate1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cabs1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csignum1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromInteger1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.731771033 UTC

[section ""data" . Data.Complex.$fNumComplex_closure" {
     Data.Complex.$fNumComplex_closure:
         const Data.Complex.$fNumComplex_info;
         const 0;
 },
 sat_sgN5J_entry() //  [R1, R2]
         { []
         }
     {offset
       cgQny: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cfromInteger_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN5J_info" {
     sat_sgN5J_info:
         const sat_sgN5J_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+528;
 },
 sat_sgN5I_entry() //  [R1, R2]
         { []
         }
     {offset
       cgQnG: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fNumComplex_$csignum_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN5I_info" {
     sat_sgN5I_info:
         const sat_sgN5I_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+560;
 },
 sat_sgN5H_entry() //  [R1, R2]
         { []
         }
     {offset
       cgQnO: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fNumComplex_$cabs_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN5H_info" {
     sat_sgN5H_info:
         const sat_sgN5H_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+512;
 },
 sat_sgN5G_entry() //  [R1, R2]
         { []
         }
     {offset
       cgQnW: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cnegate_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN5G_info" {
     sat_sgN5G_info:
         const sat_sgN5G_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgN5F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgQo4: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fNumComplex_$c*_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN5F_info" {
     sat_sgN5F_info:
         const sat_sgN5F_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgN5E_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgQoc: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c-_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN5E_info" {
     sat_sgN5E_info:
         const sat_sgN5E_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgN5D_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgQok: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c+_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN5D_info" {
     sat_sgN5D_info:
         const sat_sgN5D_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Complex.$fNumComplex_entry() //  [R2]
         { []
         }
     {offset
       cgQoo: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cgQos; else goto cgQor;
       cgQos: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = Data.Complex.$fNumComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQor: // global
           I64[Hp - 168] = sat_sgN5J_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sgN5I_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sgN5H_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sgN5G_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sgN5F_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgN5E_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgN5D_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fNumComplex_info" {
     Data.Complex.$fNumComplex_info:
         const Data.Complex.$fNumComplex_entry;
         const 0;
         const 846108557326;
         const 4294967301;
         const SgNTw_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.749545252 UTC

[section ""data" . Data.Complex.$w$s$csqrt1_closure" {
     Data.Complex.$w$s$csqrt1_closure:
         const Data.Complex.$w$s$csqrt1_info;
         const 0;
 },
 Data.Complex.$w$s$csqrt1_slow() //  [R1]
         { []
         }
     {offset
       cgQp9: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$csqrt1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgQpk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgQpl; else goto cgQpm;
       cgQpl: // global
           R1 = Data.Complex.$w$s$csqrt1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgQpm: // global
           _sgN5L::F32 = F2;
           _sgN5K::F32 = F1;
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto cgQpj; else goto sgN5M;
       cgQpj: // global
           if (%MO_F_Eq_W32(_sgN5L::F32,
                            0.0 :: W32)) goto cgQrb; else goto sgN5M;
       cgQrb: // global
           R2 = Data.Complex.$fFloatingComplex9_closure+1;
           R1 = Data.Complex.$fFloatingComplex9_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       sgN5M: // global
           if (%MO_F_Lt_W32(_sgN5K::F32,
                            0.0 :: W32)) goto cgQqo; else goto cgQpw;
       cgQqo: // global
           I64[Sp - 24] = block_cgQqn_info;
           F2 = _sgN5L::F32;
           F1 = _sgN5K::F32;
           F32[Sp - 16] = _sgN5K::F32;
           F32[Sp - 8] = _sgN5L::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
       cgQpw: // global
           I64[Sp - 24] = block_cgQpu_info;
           F2 = _sgN5L::F32;
           F1 = _sgN5K::F32;
           F32[Sp - 16] = _sgN5K::F32;
           F32[Sp - 8] = _sgN5L::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$csqrt1_info" {
     Data.Complex.$w$s$csqrt1_info:
         const Data.Complex.$w$s$csqrt1_entry;
         const 0;
         const 576460756598390798;
         const 8589934592;
         const SgNTw_srt+360;
         const 194;
         const Data.Complex.$w$s$csqrt1_slow;
 },
 _cgQqn() //  [F1]
         { []
         }
     {offset
       cgQqn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgQqu; else goto cgQqt;
       cgQqu: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgQqt: // global
           _sgN5L::F32 = F32[Sp + 16];
           _sgN66::F32 = F1;
           (_cgQqv::F32) = call MO_F32_Fabs(F32[Sp + 8]);
           (_cgQqE::F32) = call MO_F32_Sqrt(%MO_F_Quot_W32(%MO_F_Add_W32(_sgN66::F32,
                                                                         _cgQqv::F32),
                                                           2.0 :: W32));
           (_cgQqL::F32) = call MO_F32_Fabs(_sgN5L::F32);
           _sgN6d::F32 = %MO_F_Quot_W32(_cgQqL::F32,
                                        %MO_F_Add_W32(_cgQqE::F32, _cgQqE::F32));
           if (%MO_F_Lt_W32(_sgN5L::F32,
                            0.0 :: W32)) goto cgQr4; else goto cgQqX;
       cgQr4: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(_cgQqE::F32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _sgN6d::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgQqX: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = _cgQqE::F32;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _sgN6d::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQqn_info" {
     block_cgQqn_info:
         const _cgQqn;
         const 194;
         const 30;
 },
 _cgQpu() //  [F1]
         { []
         }
     {offset
       cgQpu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgQpC; else goto cgQpB;
       cgQpC: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgQpB: // global
           _sgN5L::F32 = F32[Sp + 16];
           _sgN5P::F32 = F1;
           (_cgQpD::F32) = call MO_F32_Fabs(F32[Sp + 8]);
           (_cgQpM::F32) = call MO_F32_Sqrt(%MO_F_Quot_W32(%MO_F_Add_W32(_sgN5P::F32,
                                                                         _cgQpD::F32),
                                                           2.0 :: W32));
           if (%MO_F_Lt_W32(_sgN5L::F32,
                            0.0 :: W32)) goto cgQql; else goto cgQq5;
       cgQql: // global
           (_cgQqa::F32) = call MO_F32_Fabs(_sgN5L::F32);
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(%MO_F_Quot_W32(_cgQqa::F32,
                                                       %MO_F_Add_W32(_cgQpM::F32, _cgQpM::F32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _cgQpM::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgQq5: // global
           (_cgQpW::F32) = call MO_F32_Fabs(_sgN5L::F32);
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Quot_W32(_cgQpW::F32,
                                         %MO_F_Add_W32(_cgQpM::F32, _cgQpM::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _cgQpM::F32;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQpu_info" {
     block_cgQpu_info:
         const _cgQpu;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.761040649 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csqrt1_closure" {
     Data.Complex.$fFloatingComplex_$s$csqrt1_closure:
         const Data.Complex.$fFloatingComplex_$s$csqrt1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csqrt1_entry() //  [R2]
         { []
         }
     {offset
       cgQst: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQsJ; else goto cgQsK;
       cgQsJ: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csqrt1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQsK: // global
           I64[Sp - 8] = block_cgQsq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQsS; else goto cgQsr;
       ugQsS: // global
           call _cgQsq(R1) args: 0, res: 0, upd: 0;
       cgQsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csqrt1_info" {
     Data.Complex.$fFloatingComplex_$s$csqrt1_info:
         const Data.Complex.$fFloatingComplex_$s$csqrt1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+576;
 },
 _cgQsq() //  [R1]
         { []
         }
     {offset
       cgQsq: // global
           I64[Sp - 8] = block_cgQsw_info;
           _sgN6p::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN6p::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQsR; else goto cgQsx;
       ugQsR: // global
           call _cgQsw(R1) args: 0, res: 0, upd: 0;
       cgQsx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQsq_info" {
     block_cgQsq_info:
         const _cgQsq;
         const 0;
         const 4294967326;
         const SgNTw_srt+576;
 },
 _cgQsw() //  [R1]
         { []
         }
     {offset
       cgQsw: // global
           I64[Sp] = block_cgQsB_info;
           _sgN6r::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgN6r::F32;
           if (R1 & 7 != 0) goto ugQsT; else goto cgQsC;
       ugQsT: // global
           call _cgQsB(R1) args: 0, res: 0, upd: 0;
       cgQsC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQsw_info" {
     block_cgQsw_info:
         const _cgQsw;
         const 1;
         const 4294967326;
         const SgNTw_srt+576;
 },
 _cgQsB() //  [R1]
         { []
         }
     {offset
       cgQsB: // global
           _sgN6r::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgQsG_info;
           F2 = F32[R1 + 7];
           F1 = _sgN6r::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQsB_info" {
     block_cgQsB_info:
         const _cgQsB;
         const 65;
         const 4294967326;
         const SgNTw_srt+576;
 },
 _cgQsG() //  [R1, R2]
         { []
         }
     {offset
       cgQsG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQsQ; else goto cgQsP;
       cgQsQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQsP: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQsG_info" {
     block_cgQsG_info:
         const _cgQsG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.774036917 UTC

[section ""data" . Data.Complex.$w$s$csqrt_closure" {
     Data.Complex.$w$s$csqrt_closure:
         const Data.Complex.$w$s$csqrt_info;
         const 0;
 },
 Data.Complex.$w$s$csqrt_slow() //  [R1]
         { []
         }
     {offset
       cgQtl: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$csqrt_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$csqrt_entry() //  [D1, D2]
         { []
         }
     {offset
       cgQtw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgQtx; else goto cgQty;
       cgQtx: // global
           R1 = Data.Complex.$w$s$csqrt_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgQty: // global
           _sgN6y::F64 = D2;
           _sgN6x::F64 = D1;
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto cgQtv; else goto sgN6z;
       cgQtv: // global
           if (%MO_F_Eq_W64(_sgN6y::F64,
                            0.0 :: W64)) goto cgQvn; else goto sgN6z;
       cgQvn: // global
           R2 = Data.Complex.$fFloatingComplex1_closure+1;
           R1 = Data.Complex.$fFloatingComplex1_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       sgN6z: // global
           if (%MO_F_Lt_W64(_sgN6x::F64,
                            0.0 :: W64)) goto cgQuA; else goto cgQtI;
       cgQuA: // global
           I64[Sp - 24] = block_cgQuz_info;
           D2 = _sgN6y::F64;
           D1 = _sgN6x::F64;
           F64[Sp - 16] = _sgN6x::F64;
           F64[Sp - 8] = _sgN6y::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
       cgQtI: // global
           I64[Sp - 24] = block_cgQtG_info;
           D2 = _sgN6y::F64;
           D1 = _sgN6x::F64;
           F64[Sp - 16] = _sgN6x::F64;
           F64[Sp - 8] = _sgN6y::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$csqrt_info" {
     Data.Complex.$w$s$csqrt_info:
         const Data.Complex.$w$s$csqrt_entry;
         const 0;
         const 9223372041149743118;
         const 8589934592;
         const SgNTw_srt+344;
         const 194;
         const Data.Complex.$w$s$csqrt_slow;
 },
 _cgQuz() //  [D1]
         { []
         }
     {offset
       cgQuz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgQuG; else goto cgQuF;
       cgQuG: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgQuF: // global
           _sgN6y::F64 = F64[Sp + 16];
           _sgN6T::F64 = D1;
           (_cgQuH::F64) = call MO_F64_Fabs(F64[Sp + 8]);
           (_cgQuQ::F64) = call MO_F64_Sqrt(%MO_F_Quot_W64(%MO_F_Add_W64(_sgN6T::F64,
                                                                         _cgQuH::F64),
                                                           2.0 :: W64));
           (_cgQuX::F64) = call MO_F64_Fabs(_sgN6y::F64);
           _sgN70::F64 = %MO_F_Quot_W64(_cgQuX::F64,
                                        %MO_F_Add_W64(_cgQuQ::F64, _cgQuQ::F64));
           if (%MO_F_Lt_W64(_sgN6y::F64,
                            0.0 :: W64)) goto cgQvg; else goto cgQv9;
       cgQvg: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(_cgQuQ::F64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _sgN70::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgQv9: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = _cgQuQ::F64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _sgN70::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQuz_info" {
     block_cgQuz_info:
         const _cgQuz;
         const 194;
         const 30;
 },
 _cgQtG() //  [D1]
         { []
         }
     {offset
       cgQtG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgQtO; else goto cgQtN;
       cgQtO: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgQtN: // global
           _sgN6y::F64 = F64[Sp + 16];
           _sgN6C::F64 = D1;
           (_cgQtP::F64) = call MO_F64_Fabs(F64[Sp + 8]);
           (_cgQtY::F64) = call MO_F64_Sqrt(%MO_F_Quot_W64(%MO_F_Add_W64(_sgN6C::F64,
                                                                         _cgQtP::F64),
                                                           2.0 :: W64));
           if (%MO_F_Lt_W64(_sgN6y::F64,
                            0.0 :: W64)) goto cgQux; else goto cgQuh;
       cgQux: // global
           (_cgQum::F64) = call MO_F64_Fabs(_sgN6y::F64);
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(%MO_F_Quot_W64(_cgQum::F64,
                                                       %MO_F_Add_W64(_cgQtY::F64, _cgQtY::F64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _cgQtY::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cgQuh: // global
           (_cgQu8::F64) = call MO_F64_Fabs(_sgN6y::F64);
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Quot_W64(_cgQu8::F64,
                                         %MO_F_Add_W64(_cgQtY::F64, _cgQtY::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _cgQtY::F64;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQtG_info" {
     block_cgQtG_info:
         const _cgQtG;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.785918133 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$csqrt_closure" {
     Data.Complex.$fFloatingComplex_$s$csqrt_closure:
         const Data.Complex.$fFloatingComplex_$s$csqrt_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$csqrt_entry() //  [R2]
         { []
         }
     {offset
       cgQwF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQwV; else goto cgQwW;
       cgQwV: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$csqrt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQwW: // global
           I64[Sp - 8] = block_cgQwC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQx4; else goto cgQwD;
       ugQx4: // global
           call _cgQwC(R1) args: 0, res: 0, upd: 0;
       cgQwD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$csqrt_info" {
     Data.Complex.$fFloatingComplex_$s$csqrt_info:
         const Data.Complex.$fFloatingComplex_$s$csqrt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+592;
 },
 _cgQwC() //  [R1]
         { []
         }
     {offset
       cgQwC: // global
           I64[Sp - 8] = block_cgQwI_info;
           _sgN7c::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN7c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQx3; else goto cgQwJ;
       ugQx3: // global
           call _cgQwI(R1) args: 0, res: 0, upd: 0;
       cgQwJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQwC_info" {
     block_cgQwC_info:
         const _cgQwC;
         const 0;
         const 4294967326;
         const SgNTw_srt+592;
 },
 _cgQwI() //  [R1]
         { []
         }
     {offset
       cgQwI: // global
           I64[Sp] = block_cgQwN_info;
           _sgN7e::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN7e::F64;
           if (R1 & 7 != 0) goto ugQx5; else goto cgQwO;
       ugQx5: // global
           call _cgQwN(R1) args: 0, res: 0, upd: 0;
       cgQwO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQwI_info" {
     block_cgQwI_info:
         const _cgQwI;
         const 1;
         const 4294967326;
         const SgNTw_srt+592;
 },
 _cgQwN() //  [R1]
         { []
         }
     {offset
       cgQwN: // global
           _sgN7e::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgQwS_info;
           D2 = F64[R1 + 7];
           D1 = _sgN7e::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQwN_info" {
     block_cgQwN_info:
         const _cgQwN;
         const 65;
         const 4294967326;
         const SgNTw_srt+592;
 },
 _cgQwS() //  [R1, R2]
         { []
         }
     {offset
       cgQwS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQx2; else goto cgQx1;
       cgQx2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQx1: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQwS_info" {
     block_cgQwS_info:
         const _cgQwS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.802062494 UTC

[section ""data" . sat_sgN7k_closure" {
     sat_sgN7k_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.80490288 UTC

[section ""data" . sat_sgN7l_closure" {
     sat_sgN7l_closure:
         const :_con_info;
         const sat_sgN7k_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.80820587 UTC

[section ""data" . Data.Complex.$fFloatingComplex21_closure" {
     Data.Complex.$fFloatingComplex21_closure:
         const Data.Complex.$fFloatingComplex21_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex21_entry() //  [R1]
         { []
         }
     {offset
       cgQxE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQxF; else goto cgQxG;
       cgQxF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQxG: // global
           (_cgQxB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgQxB::I64 == 0) goto cgQxD; else goto cgQxC;
       cgQxD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgQxC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgQxB::I64;
           R3 = sat_sgN7l_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex21_info" {
     Data.Complex.$fFloatingComplex21_info:
         const Data.Complex.$fFloatingComplex21_entry;
         const 0;
         const 4294967317;
         const SgNTw_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.823759646 UTC

[section ""data" . Data.Complex.$w$csqrt_closure" {
     Data.Complex.$w$csqrt_closure:
         const Data.Complex.$w$csqrt_info;
         const 0;
 },
 $dNum_sgN7s_entry() //  [R1]
         { []
         }
     {offset
       cgQyq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQyr; else goto cgQys;
       cgQyr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQys: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgN7s_info" {
     $dNum_sgN7s_info:
         const $dNum_sgN7s_entry;
         const 1;
         const 16;
 },
 sat_sgN7S_entry() //  [R1]
         { []
         }
     {offset
       cgQyv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQyw; else goto cgQyx;
       cgQyw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQyx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7S_info" {
     sat_sgN7S_info:
         const sat_sgN7S_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+616;
 },
 $dFractional_sgN7w_entry() //  [R1]
         { []
         }
     {offset
       cgQyA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQyB; else goto cgQyC;
       cgQyB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQyC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgN7w_info" {
     $dFractional_sgN7w_info:
         const $dFractional_sgN7w_entry;
         const 1;
         const 16;
 },
 sat_sgN7C_entry() //  [R1]
         { []
         }
     {offset
       cgQyN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQyO; else goto cgQyP;
       cgQyO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQyP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7C_info" {
     sat_sgN7C_info:
         const sat_sgN7C_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+624;
 },
 sat_sgN7A_entry() //  [R1]
         { []
         }
     {offset
       cgQyY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQyZ; else goto cgQz0;
       cgQyZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQz0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7A_info" {
     sat_sgN7A_info:
         const sat_sgN7A_entry;
         const 2;
         const 18;
 },
 sat_sgN7z_entry() //  [R1]
         { []
         }
     {offset
       cgQz5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQz6; else goto cgQz7;
       cgQz6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQz7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7z_info" {
     sat_sgN7z_info:
         const sat_sgN7z_entry;
         const 3;
         const 15;
 },
 sat_sgN7B_entry() //  [R1]
         { []
         }
     {offset
       cgQz8: // global
           _sgN7B::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgQz9; else goto cgQza;
       cgQza: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgQzc; else goto cgQzb;
       cgQzc: // global
           HpAlloc = 72;
           goto cgQz9;
       cgQz9: // global
           R1 = _sgN7B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQzb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN7B::P64;
           _sgN7m::P64 = P64[_sgN7B::P64 + 16];
           _sgN7n::P64 = P64[_sgN7B::P64 + 24];
           _sgN7o::P64 = P64[_sgN7B::P64 + 32];
           _sgN7s::P64 = P64[_sgN7B::P64 + 40];
           I64[Hp - 64] = sat_sgN7A_info;
           P64[Hp - 48] = _sgN7n::P64;
           P64[Hp - 40] = _sgN7s::P64;
           I64[Hp - 32] = sat_sgN7z_info;
           P64[Hp - 16] = _sgN7m::P64;
           P64[Hp - 8] = _sgN7n::P64;
           P64[Hp] = _sgN7o::P64;
           R2 = _sgN7s::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7B_info" {
     sat_sgN7B_info:
         const sat_sgN7B_entry;
         const 4;
         const 15;
 },
 sat_sgN7D_entry() //  [R1]
         { []
         }
     {offset
       cgQzd: // global
           _sgN7D::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgQze; else goto cgQzf;
       cgQzf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgQzh; else goto cgQzg;
       cgQzh: // global
           HpAlloc = 72;
           goto cgQze;
       cgQze: // global
           R1 = _sgN7D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQzg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN7D::P64;
           _sgN7m::P64 = P64[_sgN7D::P64 + 16];
           _sgN7n::P64 = P64[_sgN7D::P64 + 24];
           _sgN7o::P64 = P64[_sgN7D::P64 + 32];
           _sgN7s::P64 = P64[_sgN7D::P64 + 40];
           _sgN7w::P64 = P64[_sgN7D::P64 + 48];
           I64[Hp - 64] = sat_sgN7C_info;
           P64[Hp - 48] = _sgN7s::P64;
           I64[Hp - 40] = sat_sgN7B_info;
           P64[Hp - 24] = _sgN7m::P64;
           P64[Hp - 16] = _sgN7n::P64;
           P64[Hp - 8] = _sgN7o::P64;
           P64[Hp] = _sgN7s::P64;
           R2 = _sgN7w::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7D_info" {
     sat_sgN7D_info:
         const sat_sgN7D_entry;
         const 5;
         const 4294967311;
         const SgNTw_srt+624;
 },
 u'_sgN7x_entry() //  [R1]
         { []
         }
     {offset
       cgQzk: // global
           _sgN7x::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgQzl; else goto cgQzm;
       cgQzm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgQzo; else goto cgQzn;
       cgQzo: // global
           HpAlloc = 56;
           goto cgQzl;
       cgQzl: // global
           R1 = _sgN7x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQzn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN7x::P64;
           _sgN7m::P64 = P64[_sgN7x::P64 + 16];
           _sgN7n::P64 = P64[_sgN7x::P64 + 24];
           _sgN7o::P64 = P64[_sgN7x::P64 + 32];
           _sgN7s::P64 = P64[_sgN7x::P64 + 40];
           _sgN7w::P64 = P64[_sgN7x::P64 + 48];
           I64[Hp - 48] = sat_sgN7D_info;
           P64[Hp - 32] = _sgN7m::P64;
           P64[Hp - 24] = _sgN7n::P64;
           P64[Hp - 16] = _sgN7o::P64;
           P64[Hp - 8] = _sgN7s::P64;
           P64[Hp] = _sgN7w::P64;
           I64[Sp - 32] = block_cgQzi_info;
           R2 = _sgN7m::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . u'_sgN7x_info" {
     u'_sgN7x_info:
         const u'_sgN7x_entry;
         const 5;
         const 4294967311;
         const SgNTw_srt+624;
 },
 _cgQzi() //  [R1]
         { []
         }
     {offset
       cgQzi: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgQzi_info" {
     block_cgQzi_info:
         const _cgQzi;
         const 1;
         const 30;
 },
 sat_sgN7G_entry() //  [R1]
         { []
         }
     {offset
       cgQzD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQzE; else goto cgQzF;
       cgQzE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQzF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7G_info" {
     sat_sgN7G_info:
         const sat_sgN7G_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+624;
 },
 sat_sgN7H_entry() //  [R1]
         { []
         }
     {offset
       cgQzG: // global
           _sgN7H::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgQzH; else goto cgQzI;
       cgQzI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQzK; else goto cgQzJ;
       cgQzK: // global
           HpAlloc = 24;
           goto cgQzH;
       cgQzH: // global
           R1 = _sgN7H::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQzJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN7H::P64;
           _sgN7s::P64 = P64[_sgN7H::P64 + 16];
           _sgN7x::P64 = P64[_sgN7H::P64 + 24];
           I64[Hp - 16] = sat_sgN7G_info;
           P64[Hp] = _sgN7s::P64;
           R2 = _sgN7s::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgN7x::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7H_info" {
     sat_sgN7H_info:
         const sat_sgN7H_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+624;
 },
 sat_sgN7F_entry() //  [R1]
         { []
         }
     {offset
       cgQzP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQzQ; else goto cgQzR;
       cgQzQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQzR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7F_info" {
     sat_sgN7F_info:
         const sat_sgN7F_entry;
         const 2;
         const 18;
 },
 v'_sgN7E_entry() //  [R1]
         { []
         }
     {offset
       cgQzS: // global
           _sgN7E::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgQzT; else goto cgQzU;
       cgQzU: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgQzW; else goto cgQzV;
       cgQzW: // global
           HpAlloc = 64;
           goto cgQzT;
       cgQzT: // global
           R1 = _sgN7E::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQzV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgN7E::P64;
           _sgN7o::P64 = P64[_sgN7E::P64 + 16];
           _sgN7s::P64 = P64[_sgN7E::P64 + 24];
           _sgN7w::P64 = P64[_sgN7E::P64 + 32];
           _sgN7x::P64 = P64[_sgN7E::P64 + 40];
           I64[Hp - 56] = sat_sgN7H_info;
           P64[Hp - 40] = _sgN7s::P64;
           P64[Hp - 32] = _sgN7x::P64;
           I64[Hp - 24] = sat_sgN7F_info;
           P64[Hp - 8] = _sgN7o::P64;
           P64[Hp] = _sgN7s::P64;
           R2 = _sgN7w::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . v'_sgN7E_info" {
     v'_sgN7E_info:
         const v'_sgN7E_entry;
         const 4;
         const 4294967311;
         const SgNTw_srt+624;
 },
 sat_sgN7Q_entry() //  [R1]
         { []
         }
     {offset
       cgQA1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQA2; else goto cgQA3;
       cgQA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7Q_info" {
     sat_sgN7Q_info:
         const sat_sgN7Q_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+616;
 },
 sat_sgN7M_entry() //  [R1]
         { []
         }
     {offset
       cgQAf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQAg; else goto cgQAh;
       cgQAg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQAh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7M_info" {
     sat_sgN7M_info:
         const sat_sgN7M_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+616;
 },
 sat_sgN7U_entry() //  [R1]
         { []
         }
     {offset
       cgQAr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQAs; else goto cgQAt;
       cgQAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQAt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN7U_info" {
     sat_sgN7U_info:
         const sat_sgN7U_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+616;
 },
 Data.Complex.$w$csqrt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQAu: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgQAv; else goto cgQAw;
       cgQAv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$csqrt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQAw: // global
           I64[Sp - 32] = block_cgQxU_info;
           _sgN7m::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgN7m::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$csqrt_info" {
     Data.Complex.$w$csqrt_info:
         const Data.Complex.$w$csqrt_entry;
         const 0;
         const 123149597278222;
         const 12884901911;
         const SgNTw_srt+520;
 },
 _cgQxU() //  [R1]
         { []
         }
     {offset
       cgQxU: // global
           I64[Sp - 8] = block_cgQxY_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQxU_info" {
     block_cgQxU_info:
         const _cgQxU;
         const 3;
         const 52780853100574;
         const SgNTw_srt+520;
 },
 _cgQxY() //  [R1]
         { []
         }
     {offset
       cgQxY: // global
           I64[Sp - 8] = block_cgQy2_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQxY_info" {
     block_cgQxY_info:
         const _cgQxY;
         const 4;
         const 52780853100574;
         const SgNTw_srt+520;
 },
 _cgQy2() //  [R1]
         { []
         }
     {offset
       cgQy2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQAB; else goto cgQAA;
       cgQAB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQAA: // global
           I64[Hp - 16] = $dNum_sgN7s_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgQy8_info;
           R2 = R1;
           P64[Sp] = R1;
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQy2_info" {
     block_cgQy2_info:
         const _cgQy2;
         const 5;
         const 52780853100574;
         const SgNTw_srt+520;
 },
 _cgQy8() //  [R1]
         { []
         }
     {offset
       cgQy8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQAE; else goto cgQAD;
       cgQAE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQAD: // global
           I64[Hp - 16] = sat_sgN7S_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_cgQAi_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQy8_info" {
     block_cgQy8_info:
         const _cgQy8;
         const 6;
         const 52780853100574;
         const SgNTw_srt+520;
 },
 _cgQAi() //  [R1]
         { []
         }
     {offset
       cgQAi: // global
           if (R1 & 7 == 1) goto ugQBB; else goto cgQBj;
       ugQBB: // global
           Sp = Sp + 8;
           call _cgQyh() args: 0, res: 0, upd: 0;
       cgQBj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQBm; else goto cgQBl;
       cgQBm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQBl: // global
           I64[Hp - 16] = sat_sgN7U_info;
           P64[Hp] = P64[Sp + 24];
           _sgN7t::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQBi_info;
           R2 = _sgN7t::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQAi_info" {
     block_cgQAi_info:
         const _cgQAi;
         const 7;
         const 52780853100574;
         const SgNTw_srt+520;
 },
 _cgQBi() //  [R1]
         { []
         }
     {offset
       cgQBi: // global
           if (R1 & 7 == 1) goto ugQBD; else goto cgQBw;
       ugQBD: // global
           call _cgQyh() args: 0, res: 0, upd: 0;
       cgQBw: // global
           R3 = Data.Complex.$fFloatingComplex17_closure;
           R2 = P64[Sp + 32];
           Sp = Sp + 56;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQBi_info" {
     block_cgQBi_info:
         const _cgQBi;
         const 6;
         const 52780853100574;
         const SgNTw_srt+520;
 },
 _cgQyh() //  []
         { []
         }
     {offset
       cgQyh: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cgQAI; else goto cgQAH;
       cgQAI: // global
           HpAlloc = 152;
           I64[Sp] = block_cgQyh_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cgQAH: // global
           I64[Hp - 144] = $dFractional_sgN7w_info;
           P64[Hp - 128] = P64[Sp + 24];
           I64[Hp - 120] = u'_sgN7x_info;
           P64[Hp - 104] = P64[Sp + 32];
           _sgN7n::P64 = P64[Sp + 40];
           P64[Hp - 96] = _sgN7n::P64;
           _sgN7o::P64 = P64[Sp + 48];
           P64[Hp - 88] = _sgN7o::P64;
           _cgQy6::P64 = P64[Sp + 16];
           P64[Hp - 80] = _cgQy6::P64;
           _cgQyj::P64 = Hp - 144;
           P64[Hp - 72] = _cgQyj::P64;
           I64[Hp - 64] = v'_sgN7E_info;
           P64[Hp - 48] = _sgN7o::P64;
           P64[Hp - 40] = _cgQy6::P64;
           P64[Hp - 32] = _cgQyj::P64;
           _cgQyl::P64 = Hp - 120;
           P64[Hp - 24] = _cgQyl::P64;
           I64[Hp - 16] = sat_sgN7Q_info;
           P64[Hp] = _cgQy6::P64;
           I64[Sp] = block_cgQAF_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgN7n::P64;
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 32] = Hp - 64;
           P64[Sp + 40] = _cgQyl::P64;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQyh_info" {
     block_cgQyh_info:
         const _cgQyh;
         const 6;
         const 12884901918;
         const SgNTw_srt+616;
 },
 _cgQAF() //  [R1]
         { []
         }
     {offset
       cgQAF: // global
           _cgQyl::P64 = P64[Sp + 40];
           _cgQyn::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cgQB9; else goto cgQBd;
       cgQB9: // global
           _sgN7K::P64 = _cgQyn::P64;
           _sgN7J::P64 = _cgQyl::P64;
           goto sgN7I;
       cgQBd: // global
           _sgN7K::P64 = _cgQyl::P64;
           _sgN7J::P64 = _cgQyn::P64;
           goto sgN7I;
       sgN7I: // global
           I64[Sp] = block_cgQA9_info;
           R1 = _sgN7J::P64;
           P64[Sp + 40] = _sgN7K::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQAF_info" {
     block_cgQAF_info:
         const _cgQAF;
         const 262;
         const 4294967326;
         const SgNTw_srt+616;
 },
 _cgQA9() //  [R1]
         { []
         }
     {offset
       cgQA9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQAN; else goto cgQAM;
       cgQAN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQAM: // global
           I64[Hp - 16] = sat_sgN7M_info;
           P64[Hp] = P64[Sp + 16];
           _sgN7r::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQAJ_info;
           R2 = _sgN7r::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = Hp - 16;
           P64[Sp + 48] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQA9_info" {
     block_cgQA9_info:
         const _cgQA9;
         const 774;
         const 4294967326;
         const SgNTw_srt+616;
 },
 _cgQAJ() //  [R1]
         { []
         }
     {offset
       cgQAJ: // global
           _sgN7K::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cgQAU; else goto cgQB1;
       cgQAU: // global
           I64[Sp + 32] = block_cgQAR_info;
           R1 = _sgN7K::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgQB1: // global
           I64[Sp + 32] = block_cgQAZ_info;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = _sgN7K::P64;
           Sp = Sp + 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQAJ_info" {
     block_cgQAJ_info:
         const _cgQAJ;
         const 389;
         const 30;
 },
 _cgQAR() //  [R1]
         { []
         }
     {offset
       cgQAR: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQAR_info" {
     block_cgQAR_info:
         const _cgQAR;
         const 1;
         const 30;
 },
 _cgQAZ() //  [R1]
         { []
         }
     {offset
       cgQAZ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQAZ_info" {
     block_cgQAZ_info:
         const _cgQAZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.878487369 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$csqrt_closure" {
     Data.Complex.$fFloatingComplex_$csqrt_closure:
         const Data.Complex.$fFloatingComplex_$csqrt_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$csqrt_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQFc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQFi; else goto cgQFj;
       cgQFi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$csqrt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQFj: // global
           I64[Sp - 16] = block_cgQF9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQFo; else goto cgQFa;
       ugQFo: // global
           call _cgQF9(R1) args: 0, res: 0, upd: 0;
       cgQFa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$csqrt_info" {
     Data.Complex.$fFloatingComplex_$csqrt_info:
         const Data.Complex.$fFloatingComplex_$csqrt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+632;
 },
 _cgQF9() //  [R1]
         { []
         }
     {offset
       cgQF9: // global
           _sgN7W::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQFf_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgN7W::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQF9_info" {
     block_cgQF9_info:
         const _cgQF9;
         const 1;
         const 4294967326;
         const SgNTw_srt+632;
 },
 _cgQFf() //  [R1, R2]
         { []
         }
     {offset
       cgQFf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQFn; else goto cgQFm;
       cgQFn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQFm: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQFf_info" {
     block_cgQFf_info:
         const _cgQFf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.888408569 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$crecip_closure" {
     Data.Complex.$fFloatingComplex_$s$crecip_closure:
         const Data.Complex.$fFloatingComplex_$s$crecip_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$crecip_entry() //  [R2]
         { []
         }
     {offset
       cgQFM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQG2; else goto cgQG3;
       cgQG2: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQG3: // global
           I64[Sp - 8] = block_cgQFJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQGb; else goto cgQFK;
       ugQGb: // global
           call _cgQFJ(R1) args: 0, res: 0, upd: 0;
       cgQFK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$crecip_info" {
     Data.Complex.$fFloatingComplex_$s$crecip_info:
         const Data.Complex.$fFloatingComplex_$s$crecip_entry;
         const 0;
         const 144115192370823182;
         const 4294967301;
         const SgNTw_srt+448;
 },
 _cgQFJ() //  [R1]
         { []
         }
     {offset
       cgQFJ: // global
           I64[Sp - 8] = block_cgQFP_info;
           _sgN87::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN87::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQGa; else goto cgQFQ;
       ugQGa: // global
           call _cgQFP(R1) args: 0, res: 0, upd: 0;
       cgQFQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQFJ_info" {
     block_cgQFJ_info:
         const _cgQFJ;
         const 0;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgQFP() //  [R1]
         { []
         }
     {offset
       cgQFP: // global
           I64[Sp] = block_cgQFU_info;
           _sgN89::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN89::F64;
           if (R1 & 7 != 0) goto ugQGc; else goto cgQFV;
       ugQGc: // global
           call _cgQFU(R1) args: 0, res: 0, upd: 0;
       cgQFV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQFP_info" {
     block_cgQFP_info:
         const _cgQFP;
         const 1;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgQFU() //  [R1]
         { []
         }
     {offset
       cgQFU: // global
           _sgN89::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgQFZ_info;
           D4 = F64[R1 + 7];
           D3 = _sgN89::F64;
           D2 = 0.0 :: W64;
           D1 = 1.0 :: W64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQFU_info" {
     block_cgQFU_info:
         const _cgQFU;
         const 65;
         const 4294967326;
         const SgNTw_srt+448;
 },
 _cgQFZ() //  [R1, R2]
         { []
         }
     {offset
       cgQFZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQG9; else goto cgQG8;
       cgQG9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQG8: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQFZ_info" {
     block_cgQFZ_info:
         const _cgQFZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.90046348 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$crecip1_closure" {
     Data.Complex.$fFloatingComplex_$s$crecip1_closure:
         const Data.Complex.$fFloatingComplex_$s$crecip1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$crecip1_entry() //  [R2]
         { []
         }
     {offset
       cgQGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQH1; else goto cgQH2;
       cgQH1: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$crecip1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQH2: // global
           I64[Sp - 8] = block_cgQGI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQHa; else goto cgQGJ;
       ugQHa: // global
           call _cgQGI(R1) args: 0, res: 0, upd: 0;
       cgQGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$crecip1_info" {
     Data.Complex.$fFloatingComplex_$s$crecip1_info:
         const Data.Complex.$fFloatingComplex_$s$crecip1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+656;
 },
 _cgQGI() //  [R1]
         { []
         }
     {offset
       cgQGI: // global
           I64[Sp - 8] = block_cgQGO_info;
           _sgN8i::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN8i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQH9; else goto cgQGP;
       ugQH9: // global
           call _cgQGO(R1) args: 0, res: 0, upd: 0;
       cgQGP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQGI_info" {
     block_cgQGI_info:
         const _cgQGI;
         const 0;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQGO() //  [R1]
         { []
         }
     {offset
       cgQGO: // global
           I64[Sp] = block_cgQGT_info;
           _sgN8k::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgN8k::F32;
           if (R1 & 7 != 0) goto ugQHb; else goto cgQGU;
       ugQHb: // global
           call _cgQGT(R1) args: 0, res: 0, upd: 0;
       cgQGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQGO_info" {
     block_cgQGO_info:
         const _cgQGO;
         const 1;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQGT() //  [R1]
         { []
         }
     {offset
       cgQGT: // global
           _sgN8k::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgQGY_info;
           F4 = F32[R1 + 7];
           F3 = _sgN8k::F32;
           F2 = 0.0 :: W32;
           F1 = 1.0 :: W32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQGT_info" {
     block_cgQGT_info:
         const _cgQGT;
         const 65;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQGY() //  [R1, R2]
         { []
         }
     {offset
       cgQGY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQH8; else goto cgQH7;
       cgQH8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQH7: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQGY_info" {
     block_cgQGY_info:
         const _cgQGY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.910336543 UTC

[section ""data" . sat_sgN8q_closure" {
     sat_sgN8q_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.912062702 UTC

[section ""data" . sat_sgN8r_closure" {
     sat_sgN8r_closure:
         const :_con_info;
         const sat_sgN8q_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.914573657 UTC

[section ""data" . Data.Complex.$fFloatingComplex19_closure" {
     Data.Complex.$fFloatingComplex19_closure:
         const Data.Complex.$fFloatingComplex19_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex19_entry() //  [R1]
         { []
         }
     {offset
       cgQHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQHM; else goto cgQHN;
       cgQHM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQHN: // global
           (_cgQHI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgQHI::I64 == 0) goto cgQHK; else goto cgQHJ;
       cgQHK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgQHJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgQHI::I64;
           R3 = sat_sgN8r_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex19_info" {
     Data.Complex.$fFloatingComplex19_info:
         const Data.Complex.$fFloatingComplex19_entry;
         const 0;
         const 4294967317;
         const SgNTw_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.920588544 UTC

[section ""data" . Data.Complex.$fFractionalComplex_$crecip_closure" {
     Data.Complex.$fFractionalComplex_$crecip_closure:
         const Data.Complex.$fFractionalComplex_$crecip_info;
         const 0;
 },
 Data.Complex.$fFractionalComplex_$crecip_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQI6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQIc; else goto cgQId;
       cgQIc: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFractionalComplex_$crecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQId: // global
           I64[Sp - 24] = block_cgQI1_info;
           _sgN8t::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgN8s::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sgN8s::P64;
           P64[Sp - 8] = _sgN8t::P64;
           Sp = Sp - 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFractionalComplex_$crecip_info" {
     Data.Complex.$fFractionalComplex_$crecip_info:
         const Data.Complex.$fFractionalComplex_$crecip_entry;
         const 0;
         const 13510803177078798;
         const 8589934607;
         const SgNTw_srt+520;
 },
 _cgQI1() //  [R1, R2]
         { []
         }
     {offset
       cgQI1: // global
           I64[Sp - 8] = block_cgQI3_info;
           _sgN8v::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp] = R2;
           P64[Sp + 16] = _sgN8v::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQIj; else goto cgQI4;
       ugQIj: // global
           call _cgQI3(R1) args: 0, res: 0, upd: 0;
       cgQI4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQI1_info" {
     block_cgQI1_info:
         const _cgQI1;
         const 2;
         const 30;
 },
 _cgQI3() //  [R1]
         { []
         }
     {offset
       cgQI3: // global
           _sgN8v::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgQI9_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _sgN8v::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQI3_info" {
     block_cgQI3_info:
         const _cgQI3;
         const 3;
         const 30;
 },
 _cgQI9() //  [R1, R2]
         { []
         }
     {offset
       cgQI9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQIi; else goto cgQIh;
       cgQIi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQIh: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQI9_info" {
     block_cgQI9_info:
         const _cgQI9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.929368238 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFractionalComplex_closure" {
     Data.Complex.$fFloatingComplex_$s$fFractionalComplex_closure:
         const GHC.Real.C:Fractional_con_info;
         const Data.Complex.$fFloatingComplex_$s$fNumComplex_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c/_closure+2;
         const Data.Complex.$fFloatingComplex_$s$crecip_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.931125895 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFractionalComplex1_closure" {
     Data.Complex.$fFloatingComplex_$s$fFractionalComplex1_closure:
         const GHC.Real.C:Fractional_con_info;
         const Data.Complex.$fFloatingComplex_$s$fNumComplex1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c/1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$crecip1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.934739317 UTC

[section ""data" . Data.Complex.$fFractionalComplex_closure" {
     Data.Complex.$fFractionalComplex_closure:
         const Data.Complex.$fFractionalComplex_info;
         const 0;
 },
 sat_sgN8H_entry() //  [R1, R2]
         { []
         }
     {offset
       cgQIP: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFractionalComplex_$cfromRational_entry(R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN8H_info" {
     sat_sgN8H_info:
         const sat_sgN8H_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+488;
 },
 sat_sgN8G_entry() //  [R1, R2]
         { []
         }
     {offset
       cgQIX: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFractionalComplex_$crecip_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN8G_info" {
     sat_sgN8G_info:
         const sat_sgN8G_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+688;
 },
 sat_sgN8F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgQJ5: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c/_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgN8F_info" {
     sat_sgN8F_info:
         const sat_sgN8F_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgN8E_entry() //  [R1]
         { []
         }
     {offset
       cgQJc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQJd; else goto cgQJe;
       cgQJd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQJe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fNumComplex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN8E_info" {
     sat_sgN8E_info:
         const sat_sgN8E_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+568;
 },
 Data.Complex.$fFractionalComplex_entry() //  [R2]
         { []
         }
     {offset
       cgQJg: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgQJk; else goto cgQJj;
       cgQJk: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Complex.$fFractionalComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQJj: // global
           I64[Hp - 104] = sat_sgN8H_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgN8G_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgN8F_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgN8E_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 70;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFractionalComplex_info" {
     Data.Complex.$fFractionalComplex_info:
         const Data.Complex.$fFractionalComplex_entry;
         const 0;
         const 432349966569046030;
         const 4294967301;
         const SgNTw_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.946415526 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctan1_closure" {
     Data.Complex.$fFloatingComplex_$s$ctan1_closure:
         const Data.Complex.$fFloatingComplex_$s$ctan1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctan1_entry() //  [R2]
         { []
         }
     {offset
       cgQJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQKF; else goto cgQKG;
       cgQKF: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQKG: // global
           I64[Sp - 8] = block_cgQJR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQKO; else goto cgQJS;
       ugQKO: // global
           call _cgQJR(R1) args: 0, res: 0, upd: 0;
       cgQJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctan1_info" {
     Data.Complex.$fFloatingComplex_$s$ctan1_info:
         const Data.Complex.$fFloatingComplex_$s$ctan1_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const SgNTw_srt+664;
 },
 _cgQJR() //  [R1]
         { []
         }
     {offset
       cgQJR: // global
           I64[Sp - 8] = block_cgQJX_info;
           _sgN8L::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN8L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQKN; else goto cgQJY;
       ugQKN: // global
           call _cgQJX(R1) args: 0, res: 0, upd: 0;
       cgQJY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQJR_info" {
     block_cgQJR_info:
         const _cgQJR;
         const 0;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQJX() //  [R1]
         { []
         }
     {offset
       cgQJX: // global
           I64[Sp] = block_cgQK2_info;
           _sgN8N::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgN8N::F32;
           if (R1 & 7 != 0) goto ugQKP; else goto cgQK3;
       ugQKP: // global
           call _cgQK2(R1) args: 0, res: 0, upd: 0;
       cgQK3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQJX_info" {
     block_cgQJX_info:
         const _cgQJX;
         const 1;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQK2() //  [R1]
         { []
         }
     {offset
       cgQK2: // global
           _sgN8N::F32 = F32[Sp + 8];
           _sgN8P::F32 = F32[R1 + 7];
           (_cgQK7::F32) = call MO_F32_Cosh(_sgN8P::F32);
           (_cgQKb::F32) = call MO_F32_Sinh(_sgN8P::F32);
           (_cgQKf::F32) = call MO_F32_Cos(_sgN8N::F32);
           (_cgQKj::F32) = call MO_F32_Sin(_sgN8N::F32);
           I64[Sp + 8] = block_cgQKC_info;
           F4 = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgQKj::F32, _cgQKb::F32));
           F3 = %MO_F_Mul_W32(_cgQKf::F32, _cgQK7::F32);
           F2 = %MO_F_Mul_W32(_cgQKf::F32, _cgQKb::F32);
           F1 = %MO_F_Mul_W32(_cgQKj::F32, _cgQK7::F32);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQK2_info" {
     block_cgQK2_info:
         const _cgQK2;
         const 65;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQKC() //  [R1, R2]
         { []
         }
     {offset
       cgQKC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQKM; else goto cgQKL;
       cgQKM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQKL: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQKC_info" {
     block_cgQKC_info:
         const _cgQKC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.959568718 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctan_closure" {
     Data.Complex.$fFloatingComplex_$s$ctan_closure:
         const Data.Complex.$fFloatingComplex_$s$ctan_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctan_entry() //  [R2]
         { []
         }
     {offset
       cgQLt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQMe; else goto cgQMf;
       cgQMe: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQMf: // global
           I64[Sp - 8] = block_cgQLq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQMn; else goto cgQLr;
       ugQMn: // global
           call _cgQLq(R1) args: 0, res: 0, upd: 0;
       cgQLr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctan_info" {
     Data.Complex.$fFloatingComplex_$s$ctan_info:
         const Data.Complex.$fFloatingComplex_$s$ctan_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+712;
 },
 _cgQLq() //  [R1]
         { []
         }
     {offset
       cgQLq: // global
           I64[Sp - 8] = block_cgQLw_info;
           _sgN95::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN95::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQMm; else goto cgQLx;
       ugQMm: // global
           call _cgQLw(R1) args: 0, res: 0, upd: 0;
       cgQLx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQLq_info" {
     block_cgQLq_info:
         const _cgQLq;
         const 0;
         const 4294967326;
         const SgNTw_srt+720;
 },
 _cgQLw() //  [R1]
         { []
         }
     {offset
       cgQLw: // global
           I64[Sp] = block_cgQLB_info;
           _sgN97::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgN97::F64;
           if (R1 & 7 != 0) goto ugQMo; else goto cgQLC;
       ugQMo: // global
           call _cgQLB(R1) args: 0, res: 0, upd: 0;
       cgQLC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQLw_info" {
     block_cgQLw_info:
         const _cgQLw;
         const 1;
         const 4294967326;
         const SgNTw_srt+720;
 },
 _cgQLB() //  [R1]
         { []
         }
     {offset
       cgQLB: // global
           _sgN97::F64 = F64[Sp + 8];
           _sgN99::F64 = F64[R1 + 7];
           (_cgQLG::F64) = call MO_F64_Cosh(_sgN99::F64);
           (_cgQLK::F64) = call MO_F64_Sinh(_sgN99::F64);
           (_cgQLO::F64) = call MO_F64_Cos(_sgN97::F64);
           (_cgQLS::F64) = call MO_F64_Sin(_sgN97::F64);
           I64[Sp + 8] = block_cgQMb_info;
           D4 = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgQLS::F64, _cgQLK::F64));
           D3 = %MO_F_Mul_W64(_cgQLO::F64, _cgQLG::F64);
           D2 = %MO_F_Mul_W64(_cgQLO::F64, _cgQLK::F64);
           D1 = %MO_F_Mul_W64(_cgQLS::F64, _cgQLG::F64);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQLB_info" {
     block_cgQLB_info:
         const _cgQLB;
         const 65;
         const 4294967326;
         const SgNTw_srt+720;
 },
 _cgQMb() //  [R1, R2]
         { []
         }
     {offset
       cgQMb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQMl; else goto cgQMk;
       cgQMl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQMk: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQMb_info" {
     block_cgQMb_info:
         const _cgQMb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:46.975176823 UTC

[section ""data" . Data.Complex.$w$ctan_closure" {
     Data.Complex.$w$ctan_closure:
         const Data.Complex.$w$ctan_info;
 },
 $dFloating_sgN9s_entry() //  [R1]
         { []
         }
     {offset
       cgQNf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQNg; else goto cgQNh;
       cgQNg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQNh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgN9s_info" {
     $dFloating_sgN9s_info:
         const $dFloating_sgN9s_entry;
         const 1;
         const 16;
 },
 coshy_sgN9t_entry() //  [R1]
         { []
         }
     {offset
       cgQNm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQNn; else goto cgQNo;
       cgQNn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQNo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . coshy_sgN9t_info" {
     coshy_sgN9t_info:
         const coshy_sgN9t_entry;
         const 2;
         const 18;
 },
 sinx_sgN9u_entry() //  [R1]
         { []
         }
     {offset
       cgQNt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQNu; else goto cgQNv;
       cgQNu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQNv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sinx_sgN9u_info" {
     sinx_sgN9u_info:
         const sinx_sgN9u_entry;
         const 2;
         const 18;
 },
 sinhy_sgN9w_entry() //  [R1]
         { []
         }
     {offset
       cgQNC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQND; else goto cgQNE;
       cgQND: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQNE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sinhy_sgN9w_info" {
     sinhy_sgN9w_info:
         const sinhy_sgN9w_entry;
         const 2;
         const 18;
 },
 cosx_sgN9x_entry() //  [R1]
         { []
         }
     {offset
       cgQNJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQNK; else goto cgQNL;
       cgQNK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQNL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . cosx_sgN9x_info" {
     cosx_sgN9x_info:
         const cosx_sgN9x_entry;
         const 2;
         const 18;
 },
 sat_sgN9A_entry() //  [R1]
         { []
         }
     {offset
       cgQNU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgQNV; else goto cgQNW;
       cgQNV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQNW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgN9A_info" {
     sat_sgN9A_info:
         const sat_sgN9A_entry;
         const 3;
         const 15;
 },
 Data.Complex.$w$ctan_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQNX: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgQNZ; else goto cgQO0;
       cgQNZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$ctan_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQO0: // global
           I64[Sp - 32] = block_cgQMZ_info;
           _sgN9m::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgN9m::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ctan_info" {
     Data.Complex.$w$ctan_info:
         const Data.Complex.$w$ctan_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgQMZ() //  [R1]
         { []
         }
     {offset
       cgQMZ: // global
           I64[Sp] = block_cgQN3_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQMZ_info" {
     block_cgQMZ_info:
         const _cgQMZ;
         const 3;
         const 30;
 },
 _cgQN3() //  [R1]
         { []
         }
     {offset
       cgQN3: // global
           I64[Sp] = block_cgQN7_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQN3_info" {
     block_cgQN3_info:
         const _cgQN3;
         const 3;
         const 30;
 },
 _cgQN7() //  [R1]
         { []
         }
     {offset
       cgQN7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgQO5; else goto cgQO4;
       cgQO5: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQO4: // global
           I64[Hp - 80] = $dFloating_sgN9s_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = coshy_sgN9t_info;
           P64[Hp - 40] = P64[Sp + 24];
           _cgQNb::P64 = Hp - 80;
           P64[Hp - 32] = _cgQNb::P64;
           I64[Hp - 24] = sinx_sgN9u_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgQNb::P64;
           I64[Sp - 32] = block_cgQNw_info;
           R2 = R1;
           I64[Sp - 56] = stg_ap_pp_info;
           _cgQNp::P64 = Hp - 24;
           P64[Sp - 48] = _cgQNp::P64;
           _cgQNi::P64 = Hp - 56;
           P64[Sp - 40] = _cgQNi::P64;
           P64[Sp - 24] = _cgQNi::P64;
           P64[Sp - 16] = _cgQNp::P64;
           P64[Sp - 8] = R1;
           P64[Sp] = _cgQNb::P64;
           Sp = Sp - 56;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQN7_info" {
     block_cgQN7_info:
         const _cgQN7;
         const 3;
         const 30;
 },
 _cgQNw() //  [R1]
         { []
         }
     {offset
       cgQNw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgQO8; else goto cgQO7;
       cgQO8: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQO7: // global
           I64[Hp - 56] = sinhy_sgN9w_info;
           P64[Hp - 40] = P64[Sp + 56];
           _cgQNb::P64 = P64[Sp + 32];
           P64[Hp - 32] = _cgQNb::P64;
           I64[Hp - 24] = cosx_sgN9x_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = _cgQNb::P64;
           I64[Sp] = block_cgQNM_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           _cgQNF::P64 = Hp - 24;
           P64[Sp - 16] = _cgQNF::P64;
           _cgQNy::P64 = Hp - 56;
           P64[Sp - 8] = _cgQNy::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 48] = _cgQNF::P64;
           P64[Sp + 56] = _cgQNy::P64;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQNw_info" {
     block_cgQNw_info:
         const _cgQNw;
         const 7;
         const 30;
 },
 _cgQNM() //  [R1]
         { []
         }
     {offset
       cgQNM: // global
           _cgQNi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQNO_info;
           R2 = P64[Sp + 24];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _cgQNi::P64;
           P64[Sp + 48] = R1;
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQNM_info" {
     block_cgQNM_info:
         const _cgQNM;
         const 7;
         const 30;
 },
 _cgQNO() //  [R1]
         { []
         }
     {offset
       cgQNO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgQOc; else goto cgQOb;
       cgQOc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQOb: // global
           I64[Hp - 32] = sat_sgN9A_info;
           _sgN9r::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgN9r::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 48];
           I64[Sp + 16] = block_cgQNY_info;
           R2 = _sgN9r::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Hp - 32;
           P64[Sp + 48] = R1;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQNO_info" {
     block_cgQNO_info:
         const _cgQNO;
         const 6;
         const 30;
 },
 _cgQNY() //  [R1]
         { []
         }
     {offset
       cgQNY: // global
           R6 = R1;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQNY_info" {
     block_cgQNY_info:
         const _cgQNY;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.00173269 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ctan_closure" {
     Data.Complex.$fFloatingComplex_$ctan_closure:
         const Data.Complex.$fFloatingComplex_$ctan_info;
 },
 Data.Complex.$fFloatingComplex_$ctan_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQPR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQPX; else goto cgQPY;
       cgQPX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ctan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQPY: // global
           I64[Sp - 16] = block_cgQPO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQQ3; else goto cgQPP;
       ugQQ3: // global
           call _cgQPO(R1) args: 0, res: 0, upd: 0;
       cgQPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ctan_info" {
     Data.Complex.$fFloatingComplex_$ctan_info:
         const Data.Complex.$fFloatingComplex_$ctan_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgQPO() //  [R1]
         { []
         }
     {offset
       cgQPO: // global
           _sgN9C::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQPU_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgN9C::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ctan_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQPO_info" {
     block_cgQPO_info:
         const _cgQPO;
         const 1;
         const 30;
 },
 _cgQPU() //  [R1, R2]
         { []
         }
     {offset
       cgQPU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQQ2; else goto cgQQ1;
       cgQQ2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQQ1: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQPU_info" {
     block_cgQPU_info:
         const _cgQPU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.010207228 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctanh1_closure" {
     Data.Complex.$fFloatingComplex_$s$ctanh1_closure:
         const Data.Complex.$fFloatingComplex_$s$ctanh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctanh1_entry() //  [R2]
         { []
         }
     {offset
       cgQQr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQR9; else goto cgQRa;
       cgQR9: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctanh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQRa: // global
           I64[Sp - 8] = block_cgQQo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQRi; else goto cgQQp;
       ugQRi: // global
           call _cgQQo(R1) args: 0, res: 0, upd: 0;
       cgQQp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctanh1_info" {
     Data.Complex.$fFloatingComplex_$s$ctanh1_info:
         const Data.Complex.$fFloatingComplex_$s$ctanh1_entry;
         const 0;
         const 1103806595086;
         const 4294967301;
         const SgNTw_srt+664;
 },
 _cgQQo() //  [R1]
         { []
         }
     {offset
       cgQQo: // global
           I64[Sp - 8] = block_cgQQu_info;
           _sgN9N::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgN9N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQRh; else goto cgQQv;
       ugQRh: // global
           call _cgQQu(R1) args: 0, res: 0, upd: 0;
       cgQQv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQQo_info" {
     block_cgQQo_info:
         const _cgQQo;
         const 0;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQQu() //  [R1]
         { []
         }
     {offset
       cgQQu: // global
           I64[Sp] = block_cgQQz_info;
           _sgN9P::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgN9P::F32;
           if (R1 & 7 != 0) goto ugQRj; else goto cgQQA;
       ugQRj: // global
           call _cgQQz(R1) args: 0, res: 0, upd: 0;
       cgQQA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQQu_info" {
     block_cgQQu_info:
         const _cgQQu;
         const 1;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQQz() //  [R1]
         { []
         }
     {offset
       cgQQz: // global
           _sgN9P::F32 = F32[Sp + 8];
           _sgN9R::F32 = F32[R1 + 7];
           (_cgQQE::F32) = call MO_F32_Cosh(_sgN9P::F32);
           (_cgQQI::F32) = call MO_F32_Sinh(_sgN9P::F32);
           (_cgQQM::F32) = call MO_F32_Cos(_sgN9R::F32);
           (_cgQQQ::F32) = call MO_F32_Sin(_sgN9R::F32);
           I64[Sp + 8] = block_cgQR6_info;
           F4 = %MO_F_Mul_W32(_cgQQQ::F32, _cgQQI::F32);
           F3 = %MO_F_Mul_W32(_cgQQM::F32, _cgQQE::F32);
           F2 = %MO_F_Mul_W32(_cgQQQ::F32, _cgQQE::F32);
           F1 = %MO_F_Mul_W32(_cgQQM::F32, _cgQQI::F32);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQQz_info" {
     block_cgQQz_info:
         const _cgQQz;
         const 65;
         const 4294967326;
         const SgNTw_srt+664;
 },
 _cgQR6() //  [R1, R2]
         { []
         }
     {offset
       cgQR6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQRg; else goto cgQRf;
       cgQRg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQRf: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQR6_info" {
     block_cgQR6_info:
         const _cgQR6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.022656381 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$ctanh_closure" {
     Data.Complex.$fFloatingComplex_$s$ctanh_closure:
         const Data.Complex.$fFloatingComplex_$s$ctanh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$ctanh_entry() //  [R2]
         { []
         }
     {offset
       cgQRV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQSD; else goto cgQSE;
       cgQSD: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$ctanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQSE: // global
           I64[Sp - 8] = block_cgQRS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQSM; else goto cgQRT;
       ugQSM: // global
           call _cgQRS(R1) args: 0, res: 0, upd: 0;
       cgQRT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$ctanh_info" {
     Data.Complex.$fFloatingComplex_$s$ctanh_info:
         const Data.Complex.$fFloatingComplex_$s$ctanh_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgNTw_srt+720;
 },
 _cgQRS() //  [R1]
         { []
         }
     {offset
       cgQRS: // global
           I64[Sp - 8] = block_cgQRY_info;
           _sgNa6::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNa6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQSL; else goto cgQRZ;
       ugQSL: // global
           call _cgQRY(R1) args: 0, res: 0, upd: 0;
       cgQRZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQRS_info" {
     block_cgQRS_info:
         const _cgQRS;
         const 0;
         const 4294967326;
         const SgNTw_srt+720;
 },
 _cgQRY() //  [R1]
         { []
         }
     {offset
       cgQRY: // global
           I64[Sp] = block_cgQS3_info;
           _sgNa8::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNa8::F64;
           if (R1 & 7 != 0) goto ugQSN; else goto cgQS4;
       ugQSN: // global
           call _cgQS3(R1) args: 0, res: 0, upd: 0;
       cgQS4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQRY_info" {
     block_cgQRY_info:
         const _cgQRY;
         const 1;
         const 4294967326;
         const SgNTw_srt+720;
 },
 _cgQS3() //  [R1]
         { []
         }
     {offset
       cgQS3: // global
           _sgNa8::F64 = F64[Sp + 8];
           _sgNaa::F64 = F64[R1 + 7];
           (_cgQS8::F64) = call MO_F64_Cosh(_sgNa8::F64);
           (_cgQSc::F64) = call MO_F64_Sinh(_sgNa8::F64);
           (_cgQSg::F64) = call MO_F64_Cos(_sgNaa::F64);
           (_cgQSk::F64) = call MO_F64_Sin(_sgNaa::F64);
           I64[Sp + 8] = block_cgQSA_info;
           D4 = %MO_F_Mul_W64(_cgQSk::F64, _cgQSc::F64);
           D3 = %MO_F_Mul_W64(_cgQSg::F64, _cgQS8::F64);
           D2 = %MO_F_Mul_W64(_cgQSk::F64, _cgQS8::F64);
           D1 = %MO_F_Mul_W64(_cgQSg::F64, _cgQSc::F64);
           Sp = Sp + 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQS3_info" {
     block_cgQS3_info:
         const _cgQS3;
         const 65;
         const 4294967326;
         const SgNTw_srt+720;
 },
 _cgQSA() //  [R1, R2]
         { []
         }
     {offset
       cgQSA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQSK; else goto cgQSJ;
       cgQSK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQSJ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQSA_info" {
     block_cgQSA_info:
         const _cgQSA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.037982953 UTC

[section ""data" . Data.Complex.$w$ctanh_closure" {
     Data.Complex.$w$ctanh_closure:
         const Data.Complex.$w$ctanh_info;
 },
 $dFloating_sgNas_entry() //  [R1]
         { []
         }
     {offset
       cgQTC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQTD; else goto cgQTE;
       cgQTD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQTE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgNas_info" {
     $dFloating_sgNas_info:
         const $dFloating_sgNas_entry;
         const 1;
         const 16;
 },
 sinhx_sgNat_entry() //  [R1]
         { []
         }
     {offset
       cgQTJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQTK; else goto cgQTL;
       cgQTK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQTL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sinhx_sgNat_info" {
     sinhx_sgNat_info:
         const sinhx_sgNat_entry;
         const 2;
         const 18;
 },
 cosy_sgNau_entry() //  [R1]
         { []
         }
     {offset
       cgQTQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQTR; else goto cgQTS;
       cgQTR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQTS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . cosy_sgNau_info" {
     cosy_sgNau_info:
         const cosy_sgNau_entry;
         const 2;
         const 18;
 },
 coshx_sgNaw_entry() //  [R1]
         { []
         }
     {offset
       cgQTZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQU0; else goto cgQU1;
       cgQU0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQU1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . coshx_sgNaw_info" {
     coshx_sgNaw_info:
         const coshx_sgNaw_entry;
         const 2;
         const 18;
 },
 siny_sgNax_entry() //  [R1]
         { []
         }
     {offset
       cgQU6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgQU7; else goto cgQU8;
       cgQU7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgQU8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . siny_sgNax_info" {
     siny_sgNax_info:
         const siny_sgNax_entry;
         const 2;
         const 18;
 },
 Data.Complex.$w$ctanh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgQU9: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgQUf; else goto cgQUg;
       cgQUf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$ctanh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQUg: // global
           I64[Sp - 32] = block_cgQTm_info;
           _sgNam::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgNam::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$ctanh_info" {
     Data.Complex.$w$ctanh_info:
         const Data.Complex.$w$ctanh_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgQTm() //  [R1]
         { []
         }
     {offset
       cgQTm: // global
           I64[Sp] = block_cgQTq_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQTm_info" {
     block_cgQTm_info:
         const _cgQTm;
         const 3;
         const 30;
 },
 _cgQTq() //  [R1]
         { []
         }
     {offset
       cgQTq: // global
           I64[Sp] = block_cgQTu_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQTq_info" {
     block_cgQTq_info:
         const _cgQTq;
         const 3;
         const 30;
 },
 _cgQTu() //  [R1]
         { []
         }
     {offset
       cgQTu: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgQUl; else goto cgQUk;
       cgQUl: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQUk: // global
           I64[Hp - 80] = $dFloating_sgNas_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sinhx_sgNat_info;
           P64[Hp - 40] = P64[Sp + 16];
           _cgQTy::P64 = Hp - 80;
           P64[Hp - 32] = _cgQTy::P64;
           I64[Hp - 24] = cosy_sgNau_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _cgQTy::P64;
           I64[Sp - 32] = block_cgQTT_info;
           R2 = R1;
           I64[Sp - 56] = stg_ap_pp_info;
           _cgQTM::P64 = Hp - 24;
           P64[Sp - 48] = _cgQTM::P64;
           _cgQTF::P64 = Hp - 56;
           P64[Sp - 40] = _cgQTF::P64;
           P64[Sp - 24] = _cgQTF::P64;
           P64[Sp - 16] = _cgQTM::P64;
           P64[Sp - 8] = R1;
           P64[Sp] = _cgQTy::P64;
           Sp = Sp - 56;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQTu_info" {
     block_cgQTu_info:
         const _cgQTu;
         const 3;
         const 30;
 },
 _cgQTT() //  [R1]
         { []
         }
     {offset
       cgQTT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgQUo; else goto cgQUn;
       cgQUo: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgQUn: // global
           I64[Hp - 56] = coshx_sgNaw_info;
           P64[Hp - 40] = P64[Sp + 48];
           _cgQTy::P64 = P64[Sp + 32];
           P64[Hp - 32] = _cgQTy::P64;
           I64[Hp - 24] = siny_sgNax_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = _cgQTy::P64;
           I64[Sp] = block_cgQUa_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           _cgQU2::P64 = Hp - 24;
           P64[Sp - 16] = _cgQU2::P64;
           _cgQTV::P64 = Hp - 56;
           P64[Sp - 8] = _cgQTV::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 48] = _cgQU2::P64;
           P64[Sp + 56] = _cgQTV::P64;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQTT_info" {
     block_cgQTT_info:
         const _cgQTT;
         const 7;
         const 30;
 },
 _cgQUa() //  [R1]
         { []
         }
     {offset
       cgQUa: // global
           I64[Sp] = block_cgQUc_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp + 56] = R1;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQUa_info" {
     block_cgQUa_info:
         const _cgQUa;
         const 7;
         const 30;
 },
 _cgQUc() //  [R1]
         { []
         }
     {offset
       cgQUc: // global
           _sgNar::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgQUe_info;
           R2 = _sgNar::P64;
           I64[Sp] = stg_ap_pp_info;
           _cgQTF::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 48];
           P64[Sp + 16] = _cgQTF::P64;
           P64[Sp + 48] = R1;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQUc_info" {
     block_cgQUc_info:
         const _cgQUc;
         const 135;
         const 30;
 },
 _cgQUe() //  [R1]
         { []
         }
     {offset
       cgQUe: // global
           R6 = R1;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQUe_info" {
     block_cgQUe_info:
         const _cgQUe;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.062303579 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$ctanh_closure" {
     Data.Complex.$fFloatingComplex_$ctanh_closure:
         const Data.Complex.$fFloatingComplex_$ctanh_info;
 },
 Data.Complex.$fFloatingComplex_$ctanh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgQVV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQW1; else goto cgQW2;
       cgQW1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$ctanh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgQW2: // global
           I64[Sp - 16] = block_cgQVS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugQW7; else goto cgQVT;
       ugQW7: // global
           call _cgQVS(R1) args: 0, res: 0, upd: 0;
       cgQVT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$ctanh_info" {
     Data.Complex.$fFloatingComplex_$ctanh_info:
         const Data.Complex.$fFloatingComplex_$ctanh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgQVS() //  [R1]
         { []
         }
     {offset
       cgQVS: // global
           _sgNaB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgQVY_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgNaB::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$ctanh_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQVS_info" {
     block_cgQVS_info:
         const _cgQVS;
         const 1;
         const 30;
 },
 _cgQVY() //  [R1, R2]
         { []
         }
     {offset
       cgQVY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQW6; else goto cgQW5;
       cgQW6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQW5: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQVY_info" {
     block_cgQVY_info:
         const _cgQVY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.072833874 UTC

[section ""data" . Data.Complex.$w$s$cacosh1_closure" {
     Data.Complex.$w$s$cacosh1_closure:
         const Data.Complex.$w$s$cacosh1_info;
         const 0;
 },
 Data.Complex.$w$s$cacosh1_slow() //  [R1]
         { []
         }
     {offset
       cgQWp: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacosh1_entry(F2,
                                                F1,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugQXQ_srtd" {
     ugQXQ_srtd:
         const SgNTw_srt+360;
         const 49;
         const 281475110928385;
 },
 Data.Complex.$w$s$cacosh1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgQWv: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgQXA; else goto cgQXB;
       cgQXA: // global
           R1 = Data.Complex.$w$s$cacosh1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgQXB: // global
           I64[Sp - 24] = block_cgQWx_info;
           _sgNaK::F32 = F2;
           F2 = F2;
           _sgNaJ::F32 = F1;
           F1 = %MO_F_Add_W32(F1, 1.0 :: W32);
           F32[Sp - 16] = _sgNaJ::F32;
           F32[Sp - 8] = _sgNaK::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacosh1_info" {
     Data.Complex.$w$s$cacosh1_info:
         const Data.Complex.$w$s$cacosh1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugQXQ_srtd;
         const 194;
         const Data.Complex.$w$s$cacosh1_slow;
 },
 _cgQWx() //  [R1, R2]
         { []
         }
     {offset
       cgQWx: // global
           I64[Sp - 8] = block_cgQWz_info;
           _sgNaN::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgNaN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQXM; else goto cgQWA;
       ugQXM: // global
           call _cgQWz(R1) args: 0, res: 0, upd: 0;
       cgQWA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQWx_info" {
     block_cgQWx_info:
         const _cgQWx;
         const 194;
         const 576460756598390814;
         const SgNTw_srt+360;
 },
 _cgQWz() //  [R1]
         { []
         }
     {offset
       cgQWz: // global
           I64[Sp] = block_cgQWE_info;
           _sgNaQ::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNaQ::F32;
           if (R1 & 7 != 0) goto ugQXN; else goto cgQWF;
       ugQXN: // global
           call _cgQWE(R1) args: 0, res: 0, upd: 0;
       cgQWF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQWz_info" {
     block_cgQWz_info:
         const _cgQWz;
         const 387;
         const 576460756598390814;
         const SgNTw_srt+360;
 },
 _cgQWE() //  [R1]
         { []
         }
     {offset
       cgQWE: // global
           I64[Sp - 8] = block_cgQWM_info;
           F2 = F32[Sp + 24];
           F1 = %MO_F_Sub_W32(F32[Sp + 16], 1.0 :: W32);
           F32[Sp] = F32[R1 + 7];
           Sp = Sp - 8;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQWE_info" {
     block_cgQWE_info:
         const _cgQWE;
         const 451;
         const 576460756598390814;
         const SgNTw_srt+360;
 },
 _cgQWM() //  [R1, R2]
         { []
         }
     {offset
       cgQWM: // global
           I64[Sp - 8] = block_cgQWO_info;
           _sgNaV::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgNaV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQXO; else goto cgQWP;
       ugQXO: // global
           call _cgQWO(R1) args: 0, res: 0, upd: 0;
       cgQWP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQWM_info" {
     block_cgQWM_info:
         const _cgQWM;
         const 964;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgQWO() //  [R1]
         { []
         }
     {offset
       cgQWO: // global
           I64[Sp] = block_cgQWT_info;
           _sgNaY::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNaY::F32;
           if (R1 & 7 != 0) goto ugQXP; else goto cgQWU;
       ugQXP: // global
           call _cgQWT(R1) args: 0, res: 0, upd: 0;
       cgQWU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQWO_info" {
     block_cgQWO_info:
         const _cgQWO;
         const 1925;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgQWT() //  [R1]
         { []
         }
     {offset
       cgQWT: // global
           _sgNaQ::F32 = F32[Sp + 24];
           I64[Sp + 24] = block_cgQXm_info;
           _sgNaS::F32 = F32[Sp + 16];
           _sgNaY::F32 = F32[Sp + 8];
           _sgNb0::F32 = F32[R1 + 7];
           _sgNb1::F32 = %MO_F_Add_W32(F32[Sp + 40],
                                       %MO_F_Add_W32(%MO_F_Mul_W32(_sgNaS::F32, _sgNaY::F32),
                                                     %MO_F_Mul_W32(_sgNaQ::F32, _sgNb0::F32)));
           F2 = _sgNb1::F32;
           _sgNb5::F32 = %MO_F_Add_W32(F32[Sp + 32],
                                       %MO_F_Sub_W32(%MO_F_Mul_W32(_sgNaS::F32, _sgNb0::F32),
                                                     %MO_F_Mul_W32(_sgNaQ::F32, _sgNaY::F32)));
           F1 = _sgNb5::F32;
           F32[Sp + 32] = _sgNb5::F32;
           F32[Sp + 40] = _sgNb1::F32;
           Sp = Sp + 24;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQWT_info" {
     block_cgQWT_info:
         const _cgQWT;
         const 1989;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgQXm() //  [F1]
         { []
         }
     {offset
       cgQXm: // global
           _sgNb1::F32 = F32[Sp + 16];
           _sgNb5::F32 = F32[Sp + 8];
           _cgQXr::F32 = F1;
           (_cgQXq::F32) = call MO_F32_Log(_cgQXr::F32);
           I64[Sp + 8] = block_cgQXu_info;
           F2 = _sgNb1::F32;
           F1 = _sgNb5::F32;
           F32[Sp + 16] = _cgQXq::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQXm_info" {
     block_cgQXm_info:
         const _cgQXm;
         const 194;
         const 30;
 },
 _cgQXu() //  [F1]
         { []
         }
     {offset
       cgQXu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgQXL; else goto cgQXK;
       cgQXL: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgQXK: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = F1;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F32[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQXu_info" {
     block_cgQXu_info:
         const _cgQXu;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.093527937 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacosh1_closure" {
     Data.Complex.$fFloatingComplex_$s$cacosh1_closure:
         const Data.Complex.$fFloatingComplex_$s$cacosh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacosh1_entry() //  [R2]
         { []
         }
     {offset
       cgQZ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgQZh; else goto cgQZi;
       cgQZh: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacosh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgQZi: // global
           I64[Sp - 8] = block_cgQYY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQZq; else goto cgQYZ;
       ugQZq: // global
           call _cgQYY(R1) args: 0, res: 0, upd: 0;
       cgQYZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacosh1_info" {
     Data.Complex.$fFloatingComplex_$s$cacosh1_info:
         const Data.Complex.$fFloatingComplex_$s$cacosh1_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgNTw_srt+744;
 },
 _cgQYY() //  [R1]
         { []
         }
     {offset
       cgQYY: // global
           I64[Sp - 8] = block_cgQZ4_info;
           _sgNbh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNbh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugQZp; else goto cgQZ5;
       ugQZp: // global
           call _cgQZ4(R1) args: 0, res: 0, upd: 0;
       cgQZ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQYY_info" {
     block_cgQYY_info:
         const _cgQYY;
         const 0;
         const 4294967326;
         const SgNTw_srt+744;
 },
 _cgQZ4() //  [R1]
         { []
         }
     {offset
       cgQZ4: // global
           I64[Sp] = block_cgQZ9_info;
           _sgNbj::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNbj::F32;
           if (R1 & 7 != 0) goto ugQZr; else goto cgQZa;
       ugQZr: // global
           call _cgQZ9(R1) args: 0, res: 0, upd: 0;
       cgQZa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQZ4_info" {
     block_cgQZ4_info:
         const _cgQZ4;
         const 1;
         const 4294967326;
         const SgNTw_srt+744;
 },
 _cgQZ9() //  [R1]
         { []
         }
     {offset
       cgQZ9: // global
           _sgNbj::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgQZe_info;
           F2 = F32[R1 + 7];
           F1 = _sgNbj::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacosh1_entry(F2,
                                                F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQZ9_info" {
     block_cgQZ9_info:
         const _cgQZ9;
         const 65;
         const 4294967326;
         const SgNTw_srt+744;
 },
 _cgQZe() //  [R1, R2]
         { []
         }
     {offset
       cgQZe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgQZo; else goto cgQZn;
       cgQZo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgQZn: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgQZe_info" {
     block_cgQZe_info:
         const _cgQZe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.106425015 UTC

[section ""data" . Data.Complex.$w$s$cacosh_closure" {
     Data.Complex.$w$s$cacosh_closure:
         const Data.Complex.$w$s$cacosh_info;
         const 0;
 },
 Data.Complex.$w$s$cacosh_slow() //  [R1]
         { []
         }
     {offset
       cgQZT: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacosh_entry(D2,
                                               D1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugR1k_srtd" {
     ugR1k_srtd:
         const SgNTw_srt+344;
         const 54;
         const 9007201402224641;
 },
 Data.Complex.$w$s$cacosh_entry() //  [D1, D2]
         { []
         }
     {offset
       cgQZZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgR14; else goto cgR15;
       cgR14: // global
           R1 = Data.Complex.$w$s$cacosh_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgR15: // global
           I64[Sp - 24] = block_cgR01_info;
           _sgNbq::F64 = D2;
           D2 = D2;
           _sgNbp::F64 = D1;
           D1 = %MO_F_Add_W64(D1, 1.0 :: W64);
           F64[Sp - 16] = _sgNbp::F64;
           F64[Sp - 8] = _sgNbq::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacosh_info" {
     Data.Complex.$w$s$cacosh_info:
         const Data.Complex.$w$s$cacosh_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugR1k_srtd;
         const 194;
         const Data.Complex.$w$s$cacosh_slow;
 },
 _cgR01() //  [R1, R2]
         { []
         }
     {offset
       cgR01: // global
           I64[Sp - 8] = block_cgR03_info;
           _sgNbt::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgNbt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR1g; else goto cgR04;
       ugR1g: // global
           call _cgR03(R1) args: 0, res: 0, upd: 0;
       cgR04: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR01_info" {
     block_cgR01_info:
         const _cgR01;
         const 194;
         const 9223372041149743134;
         const SgNTw_srt+344;
 },
 _cgR03() //  [R1]
         { []
         }
     {offset
       cgR03: // global
           I64[Sp] = block_cgR08_info;
           _sgNbw::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNbw::F64;
           if (R1 & 7 != 0) goto ugR1h; else goto cgR09;
       ugR1h: // global
           call _cgR08(R1) args: 0, res: 0, upd: 0;
       cgR09: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR03_info" {
     block_cgR03_info:
         const _cgR03;
         const 387;
         const 9223372041149743134;
         const SgNTw_srt+344;
 },
 _cgR08() //  [R1]
         { []
         }
     {offset
       cgR08: // global
           I64[Sp - 8] = block_cgR0g_info;
           D2 = F64[Sp + 24];
           D1 = %MO_F_Sub_W64(F64[Sp + 16], 1.0 :: W64);
           F64[Sp] = F64[R1 + 7];
           Sp = Sp - 8;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR08_info" {
     block_cgR08_info:
         const _cgR08;
         const 451;
         const 9223372041149743134;
         const SgNTw_srt+344;
 },
 _cgR0g() //  [R1, R2]
         { []
         }
     {offset
       cgR0g: // global
           I64[Sp - 8] = block_cgR0i_info;
           _sgNbB::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgNbB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR1i; else goto cgR0j;
       ugR1i: // global
           call _cgR0i(R1) args: 0, res: 0, upd: 0;
       cgR0j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR0g_info" {
     block_cgR0g_info:
         const _cgR0g;
         const 964;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgR0i() //  [R1]
         { []
         }
     {offset
       cgR0i: // global
           I64[Sp] = block_cgR0n_info;
           _sgNbE::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNbE::F64;
           if (R1 & 7 != 0) goto ugR1j; else goto cgR0o;
       ugR1j: // global
           call _cgR0n(R1) args: 0, res: 0, upd: 0;
       cgR0o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR0i_info" {
     block_cgR0i_info:
         const _cgR0i;
         const 1925;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgR0n() //  [R1]
         { []
         }
     {offset
       cgR0n: // global
           _sgNbw::F64 = F64[Sp + 24];
           I64[Sp + 24] = block_cgR0Q_info;
           _sgNby::F64 = F64[Sp + 16];
           _sgNbE::F64 = F64[Sp + 8];
           _sgNbG::F64 = F64[R1 + 7];
           _sgNbH::F64 = %MO_F_Add_W64(F64[Sp + 40],
                                       %MO_F_Add_W64(%MO_F_Mul_W64(_sgNby::F64, _sgNbE::F64),
                                                     %MO_F_Mul_W64(_sgNbw::F64, _sgNbG::F64)));
           D2 = _sgNbH::F64;
           _sgNbL::F64 = %MO_F_Add_W64(F64[Sp + 32],
                                       %MO_F_Sub_W64(%MO_F_Mul_W64(_sgNby::F64, _sgNbG::F64),
                                                     %MO_F_Mul_W64(_sgNbw::F64, _sgNbE::F64)));
           D1 = _sgNbL::F64;
           F64[Sp + 32] = _sgNbL::F64;
           F64[Sp + 40] = _sgNbH::F64;
           Sp = Sp + 24;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR0n_info" {
     block_cgR0n_info:
         const _cgR0n;
         const 1989;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgR0Q() //  [D1]
         { []
         }
     {offset
       cgR0Q: // global
           _sgNbH::F64 = F64[Sp + 16];
           _sgNbL::F64 = F64[Sp + 8];
           _cgR0V::F64 = D1;
           (_cgR0U::F64) = call MO_F64_Log(_cgR0V::F64);
           I64[Sp + 8] = block_cgR0Y_info;
           D2 = _sgNbH::F64;
           D1 = _sgNbL::F64;
           F64[Sp + 16] = _cgR0U::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR0Q_info" {
     block_cgR0Q_info:
         const _cgR0Q;
         const 194;
         const 30;
 },
 _cgR0Y() //  [D1]
         { []
         }
     {offset
       cgR0Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgR1f; else goto cgR1e;
       cgR1f: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgR1e: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = D1;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = F64[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR0Y_info" {
     block_cgR0Y_info:
         const _cgR0Y;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.126826651 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacosh_closure" {
     Data.Complex.$fFloatingComplex_$s$cacosh_closure:
         const Data.Complex.$fFloatingComplex_$s$cacosh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacosh_entry() //  [R2]
         { []
         }
     {offset
       cgR2v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgR2L; else goto cgR2M;
       cgR2L: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgR2M: // global
           I64[Sp - 8] = block_cgR2s_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR2U; else goto cgR2t;
       ugR2U: // global
           call _cgR2s(R1) args: 0, res: 0, upd: 0;
       cgR2t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacosh_info" {
     Data.Complex.$fFloatingComplex_$s$cacosh_info:
         const Data.Complex.$fFloatingComplex_$s$cacosh_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SgNTw_srt+768;
 },
 _cgR2s() //  [R1]
         { []
         }
     {offset
       cgR2s: // global
           I64[Sp - 8] = block_cgR2y_info;
           _sgNbX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNbX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR2T; else goto cgR2z;
       ugR2T: // global
           call _cgR2y(R1) args: 0, res: 0, upd: 0;
       cgR2z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR2s_info" {
     block_cgR2s_info:
         const _cgR2s;
         const 0;
         const 4294967326;
         const SgNTw_srt+768;
 },
 _cgR2y() //  [R1]
         { []
         }
     {offset
       cgR2y: // global
           I64[Sp] = block_cgR2D_info;
           _sgNbZ::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNbZ::F64;
           if (R1 & 7 != 0) goto ugR2V; else goto cgR2E;
       ugR2V: // global
           call _cgR2D(R1) args: 0, res: 0, upd: 0;
       cgR2E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR2y_info" {
     block_cgR2y_info:
         const _cgR2y;
         const 1;
         const 4294967326;
         const SgNTw_srt+768;
 },
 _cgR2D() //  [R1]
         { []
         }
     {offset
       cgR2D: // global
           _sgNbZ::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgR2I_info;
           D2 = F64[R1 + 7];
           D1 = _sgNbZ::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacosh_entry(D2,
                                               D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR2D_info" {
     block_cgR2D_info:
         const _cgR2D;
         const 65;
         const 4294967326;
         const SgNTw_srt+768;
 },
 _cgR2I() //  [R1, R2]
         { []
         }
     {offset
       cgR2I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgR2S; else goto cgR2R;
       cgR2S: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgR2R: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR2I_info" {
     block_cgR2I_info:
         const _cgR2I;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.138990789 UTC

[section ""data" . Data.Complex.$w$cacosh_closure" {
     Data.Complex.$w$cacosh_closure:
         const Data.Complex.$w$cacosh_info;
         const 0;
 },
 section ""relreadonly" . ugR3O_srtd" {
     ugR3O_srtd:
         const SgNTw_srt+432;
         const 46;
         const 35186553128961;
 },
 Data.Complex.$w$cacosh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgR3E: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgR3F; else goto cgR3G;
       cgR3F: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cacosh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgR3G: // global
           I64[Sp - 32] = block_cgR3q_info;
           _sgNc6::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgNc5::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgNc5::P64;
           P64[Sp - 16] = _sgNc6::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cacosh_info" {
     Data.Complex.$w$cacosh_info:
         const Data.Complex.$w$cacosh_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugR3O_srtd;
 },
 _cgR3q() //  [R1, R2]
         { []
         }
     {offset
       cgR3q: // global
           I64[Sp - 16] = block_cgR3s_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           _sgNca::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNca::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR3q_info" {
     block_cgR3q_info:
         const _cgR3q;
         const 3;
         const 144115192370823198;
         const SgNTw_srt+432;
 },
 _cgR3s() //  [R1, R2]
         { []
         }
     {offset
       cgR3s: // global
           I64[Sp] = block_cgR3u_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR3s_info" {
     block_cgR3s_info:
         const _cgR3s;
         const 5;
         const 144115192370823198;
         const SgNTw_srt+432;
 },
 _cgR3u() //  [R1, R2]
         { []
         }
     {offset
       cgR3u: // global
           I64[Sp] = block_cgR3w_info;
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           _sgNcg::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp + 8] = _sgNcg::P64;
           P64[Sp + 16] = R1;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR3u_info" {
     block_cgR3u_info:
         const _cgR3u;
         const 5;
         const 144115192370823198;
         const SgNTw_srt+432;
 },
 _cgR3w() //  [R1, R2]
         { []
         }
     {offset
       cgR3w: // global
           I64[Sp] = block_cgR3y_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR3w_info" {
     block_cgR3w_info:
         const _cgR3w;
         const 5;
         const 144115192370823198;
         const SgNTw_srt+432;
 },
 _cgR3y() //  [R1, R2]
         { []
         }
     {offset
       cgR3y: // global
           _sgNcf::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgR3A_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgNcf::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR3y_info" {
     block_cgR3y_info:
         const _cgR3y;
         const 5;
         const 4294967326;
         const SgNTw_srt+800;
 },
 _cgR3A() //  [R1, R2]
         { []
         }
     {offset
       cgR3A: // global
           I64[Sp] = block_cgR3C_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR3A_info" {
     block_cgR3A_info:
         const _cgR3A;
         const 3;
         const 4294967326;
         const SgNTw_srt+800;
 },
 _cgR3C() //  [R1, R2]
         { []
         }
     {offset
       cgR3C: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR3C_info" {
     block_cgR3C_info:
         const _cgR3C;
         const 387;
         const 4294967326;
         const SgNTw_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.154498089 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cacosh_closure" {
     Data.Complex.$fFloatingComplex_$cacosh_closure:
         const Data.Complex.$fFloatingComplex_$cacosh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cacosh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgR4u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgR4A; else goto cgR4B;
       cgR4A: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cacosh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgR4B: // global
           I64[Sp - 16] = block_cgR4r_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugR4G; else goto cgR4s;
       ugR4G: // global
           call _cgR4r(R1) args: 0, res: 0, upd: 0;
       cgR4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cacosh_info" {
     Data.Complex.$fFloatingComplex_$cacosh_info:
         const Data.Complex.$fFloatingComplex_$cacosh_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SgNTw_srt+792;
 },
 _cgR4r() //  [R1]
         { []
         }
     {offset
       cgR4r: // global
           _sgNct::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgR4x_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgNct::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cacosh_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR4r_info" {
     block_cgR4r_info:
         const _cgR4r;
         const 1;
         const 4294967326;
         const SgNTw_srt+792;
 },
 _cgR4x() //  [R1, R2]
         { []
         }
     {offset
       cgR4x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgR4F; else goto cgR4E;
       cgR4F: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgR4E: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR4x_info" {
     block_cgR4x_info:
         const _cgR4x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.164588869 UTC

[section ""data" . Data.Complex.$w$s$casinh1_closure" {
     Data.Complex.$w$s$casinh1_closure:
         const Data.Complex.$w$s$casinh1_info;
         const 0;
 },
 Data.Complex.$w$s$casinh1_slow() //  [R1]
         { []
         }
     {offset
       cgR4Y: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casinh1_entry(F2,
                                                F1,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$casinh1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgR54: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgR5U; else goto cgR5V;
       cgR5U: // global
           R1 = Data.Complex.$w$s$casinh1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgR5V: // global
           I64[Sp - 24] = block_cgR5o_info;
           _sgNcC::F32 = F2;
           _sgNcG::F32 = %MO_F_Add_W32(%MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1),
                                                     %MO_F_Mul_W32(F2, F2)),
                                       1.0 :: W32);
           F2 = %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1));
           _sgNcB::F32 = F1;
           F1 = _sgNcG::F32;
           F32[Sp - 16] = _sgNcB::F32;
           F32[Sp - 8] = _sgNcC::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casinh1_info" {
     Data.Complex.$w$s$casinh1_info:
         const Data.Complex.$w$s$casinh1_entry;
         const 0;
         const 4629700421231837198;
         const 8589934592;
         const SgNTw_srt+576;
         const 194;
         const Data.Complex.$w$s$casinh1_slow;
 },
 _cgR5o() //  [R1, R2]
         { []
         }
     {offset
       cgR5o: // global
           I64[Sp - 8] = block_cgR5q_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR63; else goto cgR5r;
       ugR63: // global
           call _cgR5q(R1) args: 0, res: 0, upd: 0;
       cgR5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR5o_info" {
     block_cgR5o_info:
         const _cgR5o;
         const 194;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgR5q() //  [R1]
         { []
         }
     {offset
       cgR5q: // global
           I64[Sp] = block_cgR5v_info;
           _sgNcO::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNcO::F32;
           if (R1 & 7 != 0) goto ugR64; else goto cgR5w;
       ugR64: // global
           call _cgR5v(R1) args: 0, res: 0, upd: 0;
       cgR5w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR5q_info" {
     block_cgR5q_info:
         const _cgR5q;
         const 387;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgR5v() //  [R1]
         { []
         }
     {offset
       cgR5v: // global
           _sgNcR::F32 = %MO_F_Add_W32(F32[Sp + 24], F32[R1 + 7]);
           _sgNcS::F32 = %MO_F_Add_W32(F32[Sp + 16], F32[Sp + 8]);
           I64[Sp + 8] = block_cgR5G_info;
           F2 = _sgNcR::F32;
           F1 = _sgNcS::F32;
           F32[Sp + 16] = _sgNcS::F32;
           F32[Sp + 24] = _sgNcR::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR5v_info" {
     block_cgR5v_info:
         const _cgR5v;
         const 451;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgR5G() //  [F1]
         { []
         }
     {offset
       cgR5G: // global
           _sgNcR::F32 = F32[Sp + 16];
           _sgNcS::F32 = F32[Sp + 8];
           _cgR5L::F32 = F1;
           (_cgR5K::F32) = call MO_F32_Log(_cgR5L::F32);
           I64[Sp + 8] = block_cgR5O_info;
           F2 = _sgNcR::F32;
           F1 = _sgNcS::F32;
           F32[Sp + 16] = _cgR5K::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR5G_info" {
     block_cgR5G_info:
         const _cgR5G;
         const 194;
         const 30;
 },
 _cgR5O() //  [F1]
         { []
         }
     {offset
       cgR5O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgR62; else goto cgR61;
       cgR62: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgR61: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = F1;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F32[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR5O_info" {
     block_cgR5O_info:
         const _cgR5O;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.179089219 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casinh1_closure" {
     Data.Complex.$fFloatingComplex_$s$casinh1_closure:
         const Data.Complex.$fFloatingComplex_$s$casinh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casinh1_entry() //  [R2]
         { []
         }
     {offset
       cgR6W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgR7c; else goto cgR7d;
       cgR7c: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casinh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgR7d: // global
           I64[Sp - 8] = block_cgR6T_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR7l; else goto cgR6U;
       ugR7l: // global
           call _cgR6T(R1) args: 0, res: 0, upd: 0;
       cgR6U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casinh1_info" {
     Data.Complex.$fFloatingComplex_$s$casinh1_info:
         const Data.Complex.$fFloatingComplex_$s$casinh1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+816;
 },
 _cgR6T() //  [R1]
         { []
         }
     {offset
       cgR6T: // global
           I64[Sp - 8] = block_cgR6Z_info;
           _sgNd1::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNd1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR7k; else goto cgR70;
       ugR7k: // global
           call _cgR6Z(R1) args: 0, res: 0, upd: 0;
       cgR70: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR6T_info" {
     block_cgR6T_info:
         const _cgR6T;
         const 0;
         const 4294967326;
         const SgNTw_srt+816;
 },
 _cgR6Z() //  [R1]
         { []
         }
     {offset
       cgR6Z: // global
           I64[Sp] = block_cgR74_info;
           _sgNd3::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNd3::F32;
           if (R1 & 7 != 0) goto ugR7m; else goto cgR75;
       ugR7m: // global
           call _cgR74(R1) args: 0, res: 0, upd: 0;
       cgR75: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR6Z_info" {
     block_cgR6Z_info:
         const _cgR6Z;
         const 1;
         const 4294967326;
         const SgNTw_srt+816;
 },
 _cgR74() //  [R1]
         { []
         }
     {offset
       cgR74: // global
           _sgNd3::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgR79_info;
           F2 = F32[R1 + 7];
           F1 = _sgNd3::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casinh1_entry(F2,
                                                F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR74_info" {
     block_cgR74_info:
         const _cgR74;
         const 65;
         const 4294967326;
         const SgNTw_srt+816;
 },
 _cgR79() //  [R1, R2]
         { []
         }
     {offset
       cgR79: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgR7j; else goto cgR7i;
       cgR7j: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgR7i: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR79_info" {
     block_cgR79_info:
         const _cgR79;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.191592784 UTC

[section ""data" . Data.Complex.$w$s$casinh_closure" {
     Data.Complex.$w$s$casinh_closure:
         const Data.Complex.$w$s$casinh_info;
         const 0;
 },
 Data.Complex.$w$s$casinh_slow() //  [R1]
         { []
         }
     {offset
       cgR7O: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casinh_entry(D2,
                                               D1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$casinh_entry() //  [D1, D2]
         { []
         }
     {offset
       cgR7U: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgR8K; else goto cgR8L;
       cgR8K: // global
           R1 = Data.Complex.$w$s$casinh_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgR8L: // global
           I64[Sp - 24] = block_cgR8e_info;
           _sgNda::F64 = D2;
           _sgNde::F64 = %MO_F_Add_W64(%MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1),
                                                     %MO_F_Mul_W64(D2, D2)),
                                       1.0 :: W64);
           D2 = %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1));
           _sgNd9::F64 = D1;
           D1 = _sgNde::F64;
           F64[Sp - 16] = _sgNd9::F64;
           F64[Sp - 8] = _sgNda::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casinh_info" {
     Data.Complex.$w$s$casinh_info:
         const Data.Complex.$w$s$casinh_entry;
         const 0;
         const 4647714819741319182;
         const 8589934592;
         const SgNTw_srt+592;
         const 194;
         const Data.Complex.$w$s$casinh_slow;
 },
 _cgR8e() //  [R1, R2]
         { []
         }
     {offset
       cgR8e: // global
           I64[Sp - 8] = block_cgR8g_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugR8T; else goto cgR8h;
       ugR8T: // global
           call _cgR8g(R1) args: 0, res: 0, upd: 0;
       cgR8h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR8e_info" {
     block_cgR8e_info:
         const _cgR8e;
         const 194;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgR8g() //  [R1]
         { []
         }
     {offset
       cgR8g: // global
           I64[Sp] = block_cgR8l_info;
           _sgNdm::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNdm::F64;
           if (R1 & 7 != 0) goto ugR8U; else goto cgR8m;
       ugR8U: // global
           call _cgR8l(R1) args: 0, res: 0, upd: 0;
       cgR8m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR8g_info" {
     block_cgR8g_info:
         const _cgR8g;
         const 387;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgR8l() //  [R1]
         { []
         }
     {offset
       cgR8l: // global
           _sgNdp::F64 = %MO_F_Add_W64(F64[Sp + 24], F64[R1 + 7]);
           _sgNdq::F64 = %MO_F_Add_W64(F64[Sp + 16], F64[Sp + 8]);
           I64[Sp + 8] = block_cgR8w_info;
           D2 = _sgNdp::F64;
           D1 = _sgNdq::F64;
           F64[Sp + 16] = _sgNdq::F64;
           F64[Sp + 24] = _sgNdp::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR8l_info" {
     block_cgR8l_info:
         const _cgR8l;
         const 451;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgR8w() //  [D1]
         { []
         }
     {offset
       cgR8w: // global
           _sgNdp::F64 = F64[Sp + 16];
           _sgNdq::F64 = F64[Sp + 8];
           _cgR8B::F64 = D1;
           (_cgR8A::F64) = call MO_F64_Log(_cgR8B::F64);
           I64[Sp + 8] = block_cgR8E_info;
           D2 = _sgNdp::F64;
           D1 = _sgNdq::F64;
           F64[Sp + 16] = _cgR8A::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR8w_info" {
     block_cgR8w_info:
         const _cgR8w;
         const 194;
         const 30;
 },
 _cgR8E() //  [D1]
         { []
         }
     {offset
       cgR8E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgR8S; else goto cgR8R;
       cgR8S: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgR8R: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = D1;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = F64[Sp + 8];
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR8E_info" {
     block_cgR8E_info:
         const _cgR8E;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.20642569 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casinh_closure" {
     Data.Complex.$fFloatingComplex_$s$casinh_closure:
         const Data.Complex.$fFloatingComplex_$s$casinh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casinh_entry() //  [R2]
         { []
         }
     {offset
       cgR9M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRa2; else goto cgRa3;
       cgRa2: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRa3: // global
           I64[Sp - 8] = block_cgR9J_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRab; else goto cgR9K;
       ugRab: // global
           call _cgR9J(R1) args: 0, res: 0, upd: 0;
       cgR9K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casinh_info" {
     Data.Complex.$fFloatingComplex_$s$casinh_info:
         const Data.Complex.$fFloatingComplex_$s$casinh_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+832;
 },
 _cgR9J() //  [R1]
         { []
         }
     {offset
       cgR9J: // global
           I64[Sp - 8] = block_cgR9P_info;
           _sgNdz::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNdz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRaa; else goto cgR9Q;
       ugRaa: // global
           call _cgR9P(R1) args: 0, res: 0, upd: 0;
       cgR9Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR9J_info" {
     block_cgR9J_info:
         const _cgR9J;
         const 0;
         const 4294967326;
         const SgNTw_srt+832;
 },
 _cgR9P() //  [R1]
         { []
         }
     {offset
       cgR9P: // global
           I64[Sp] = block_cgR9U_info;
           _sgNdB::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNdB::F64;
           if (R1 & 7 != 0) goto ugRac; else goto cgR9V;
       ugRac: // global
           call _cgR9U(R1) args: 0, res: 0, upd: 0;
       cgR9V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR9P_info" {
     block_cgR9P_info:
         const _cgR9P;
         const 1;
         const 4294967326;
         const SgNTw_srt+832;
 },
 _cgR9U() //  [R1]
         { []
         }
     {offset
       cgR9U: // global
           _sgNdB::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgR9Z_info;
           D2 = F64[R1 + 7];
           D1 = _sgNdB::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casinh_entry(D2,
                                               D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR9U_info" {
     block_cgR9U_info:
         const _cgR9U;
         const 65;
         const 4294967326;
         const SgNTw_srt+832;
 },
 _cgR9Z() //  [R1, R2]
         { []
         }
     {offset
       cgR9Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRa9; else goto cgRa8;
       cgRa9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRa8: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgR9Z_info" {
     block_cgR9Z_info:
         const _cgR9Z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.217940143 UTC

[section ""data" . Data.Complex.$w$casinh_closure" {
     Data.Complex.$w$casinh_closure:
         const Data.Complex.$w$casinh_info;
         const 0;
 },
 section ""relreadonly" . ugRaZ_srtd" {
     ugRaZ_srtd:
         const SgNTw_srt+520;
         const 42;
         const 2233384058881;
 },
 Data.Complex.$w$casinh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgRaR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgRaS; else goto cgRaT;
       cgRaS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$casinh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRaT: // global
           I64[Sp - 32] = block_cgRaH_info;
           _sgNdI::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgNdH::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgNdH::P64;
           P64[Sp - 16] = _sgNdI::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$casinh_info" {
     Data.Complex.$w$casinh_info:
         const Data.Complex.$w$casinh_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugRaZ_srtd;
 },
 _cgRaH() //  [R1, R2]
         { []
         }
     {offset
       cgRaH: // global
           I64[Sp - 16] = block_cgRaJ_info;
           _sgNdJ::P64 = P64[Sp + 24];
           R6 = _sgNdJ::P64;
           _sgNdI::P64 = P64[Sp + 16];
           R5 = _sgNdI::P64;
           R4 = _sgNdJ::P64;
           R3 = _sgNdI::P64;
           _sgNdM::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNdM::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRaH_info" {
     block_cgRaH_info:
         const _cgRaH;
         const 3;
         const 9007203549708318;
         const SgNTw_srt+632;
 },
 _cgRaJ() //  [R1, R2]
         { []
         }
     {offset
       cgRaJ: // global
           _sgNdL::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgRaL_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgNdL::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRaJ_info" {
     block_cgRaJ_info:
         const _cgRaJ;
         const 5;
         const 9007203549708318;
         const SgNTw_srt+632;
 },
 _cgRaL() //  [R1, R2]
         { []
         }
     {offset
       cgRaL: // global
           I64[Sp] = block_cgRaN_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRaL_info" {
     block_cgRaL_info:
         const _cgRaL;
         const 3;
         const 9007203549708318;
         const SgNTw_srt+632;
 },
 _cgRaN() //  [R1, R2]
         { []
         }
     {offset
       cgRaN: // global
           I64[Sp] = block_cgRaP_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRaN_info" {
     block_cgRaN_info:
         const _cgRaN;
         const 3;
         const 4294967326;
         const SgNTw_srt+800;
 },
 _cgRaP() //  [R1, R2]
         { []
         }
     {offset
       cgRaP: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRaP_info" {
     block_cgRaP_info:
         const _cgRaP;
         const 387;
         const 4294967326;
         const SgNTw_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.230522562 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$casinh_closure" {
     Data.Complex.$fFloatingComplex_$casinh_closure:
         const Data.Complex.$fFloatingComplex_$casinh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$casinh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgRbx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRbD; else goto cgRbE;
       cgRbD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$casinh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRbE: // global
           I64[Sp - 16] = block_cgRbu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugRbJ; else goto cgRbv;
       ugRbJ: // global
           call _cgRbu(R1) args: 0, res: 0, upd: 0;
       cgRbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$casinh_info" {
     Data.Complex.$fFloatingComplex_$casinh_info:
         const Data.Complex.$fFloatingComplex_$casinh_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+848;
 },
 _cgRbu() //  [R1]
         { []
         }
     {offset
       cgRbu: // global
           _sgNdZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRbA_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgNdZ::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$casinh_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRbu_info" {
     block_cgRbu_info:
         const _cgRbu;
         const 1;
         const 4294967326;
         const SgNTw_srt+848;
 },
 _cgRbA() //  [R1, R2]
         { []
         }
     {offset
       cgRbA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRbI; else goto cgRbH;
       cgRbI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRbH: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRbA_info" {
     block_cgRbA_info:
         const _cgRbA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.241209702 UTC

[section ""data" . Data.Complex.$w$s$catan1_closure" {
     Data.Complex.$w$s$catan1_closure:
         const Data.Complex.$w$s$catan1_info;
         const 0;
 },
 Data.Complex.$w$s$catan1_slow() //  [R1]
         { []
         }
     {offset
       cgRc1: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catan1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugRdp_srtd" {
     ugRdp_srtd:
         const SgNTw_srt+576;
         const 37;
         const 68723673089;
 },
 Data.Complex.$w$s$catan1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgRc7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRd9; else goto cgRda;
       cgRd9: // global
           R1 = Data.Complex.$w$s$catan1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRda: // global
           I64[Sp - 24] = block_cgRcr_info;
           _sgNe8::F32 = F2;
           _sgNec::F32 = %MO_F_Add_W32(%MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1),
                                                     %MO_F_Mul_W32(F2, F2)),
                                       1.0 :: W32);
           F2 = %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1));
           _sgNe7::F32 = F1;
           F1 = _sgNec::F32;
           F32[Sp - 16] = _sgNe7::F32;
           F32[Sp - 8] = _sgNe8::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catan1_info" {
     Data.Complex.$w$s$catan1_info:
         const Data.Complex.$w$s$catan1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugRdp_srtd;
         const 194;
         const Data.Complex.$w$s$catan1_slow;
 },
 _cgRcr() //  [R1, R2]
         { []
         }
     {offset
       cgRcr: // global
           I64[Sp - 8] = block_cgRct_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRdl; else goto cgRcu;
       ugRdl: // global
           call _cgRct(R1) args: 0, res: 0, upd: 0;
       cgRcu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRcr_info" {
     block_cgRcr_info:
         const _cgRcr;
         const 194;
         const 8800387989534;
         const SgNTw_srt+664;
 },
 _cgRct() //  [R1]
         { []
         }
     {offset
       cgRct: // global
           I64[Sp] = block_cgRcy_info;
           _sgNek::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNek::F32;
           if (R1 & 7 != 0) goto ugRdm; else goto cgRcz;
       ugRdm: // global
           call _cgRcy(R1) args: 0, res: 0, upd: 0;
       cgRcz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRct_info" {
     block_cgRct_info:
         const _cgRct;
         const 387;
         const 8800387989534;
         const SgNTw_srt+664;
 },
 _cgRcy() //  [R1]
         { []
         }
     {offset
       cgRcy: // global
           _sgNen::F32 = %MO_F_Sub_W32(1.0 :: W32, F32[Sp + 24]);
           I64[Sp + 24] = block_cgRcG_info;
           F4 = F32[R1 + 7];
           F3 = F32[Sp + 8];
           F2 = F32[Sp + 16];
           F1 = _sgNen::F32;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRcy_info" {
     block_cgRcy_info:
         const _cgRcy;
         const 451;
         const 8800387989534;
         const SgNTw_srt+664;
 },
 _cgRcG() //  [R1, R2]
         { []
         }
     {offset
       cgRcG: // global
           I64[Sp - 8] = block_cgRcI_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRdn; else goto cgRcJ;
       ugRdn: // global
           call _cgRcI(R1) args: 0, res: 0, upd: 0;
       cgRcJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRcG_info" {
     block_cgRcG_info:
         const _cgRcG;
         const 0;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRcI() //  [R1]
         { []
         }
     {offset
       cgRcI: // global
           I64[Sp] = block_cgRcN_info;
           _sgNes::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNes::F32;
           if (R1 & 7 != 0) goto ugRdo; else goto cgRcO;
       ugRdo: // global
           call _cgRcN(R1) args: 0, res: 0, upd: 0;
       cgRcO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRcI_info" {
     block_cgRcI_info:
         const _cgRcI;
         const 1;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRcN() //  [R1]
         { []
         }
     {offset
       cgRcN: // global
           I64[Sp - 8] = block_cgRcS_info;
           _sgNeu::F32 = F32[R1 + 7];
           F2 = _sgNeu::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgNeu::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRcN_info" {
     block_cgRcN_info:
         const _cgRcN;
         const 65;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRcS() //  [F1]
         { []
         }
     {offset
       cgRcS: // global
           _sgNes::F32 = F32[Sp + 16];
           _sgNeu::F32 = F32[Sp + 8];
           _cgRcX::F32 = F1;
           (_cgRcW::F32) = call MO_F32_Log(_cgRcX::F32);
           I64[Sp + 8] = block_cgRd0_info;
           F2 = _sgNeu::F32;
           F1 = _sgNes::F32;
           F32[Sp + 16] = _cgRcW::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRcS_info" {
     block_cgRcS_info:
         const _cgRcS;
         const 194;
         const 30;
 },
 _cgRd0() //  [F1]
         { []
         }
     {offset
       cgRd0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRdk; else goto cgRdj;
       cgRdk: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgRdj: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRd0_info" {
     block_cgRd0_info:
         const _cgRd0;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.261554634 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catan1_closure" {
     Data.Complex.$fFloatingComplex_$s$catan1_closure:
         const Data.Complex.$fFloatingComplex_$s$catan1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catan1_entry() //  [R2]
         { []
         }
     {offset
       cgRex: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgReN; else goto cgReO;
       cgReN: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgReO: // global
           I64[Sp - 8] = block_cgReu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugReW; else goto cgRev;
       ugReW: // global
           call _cgReu(R1) args: 0, res: 0, upd: 0;
       cgRev: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catan1_info" {
     Data.Complex.$fFloatingComplex_$s$catan1_info:
         const Data.Complex.$fFloatingComplex_$s$catan1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+864;
 },
 _cgReu() //  [R1]
         { []
         }
     {offset
       cgReu: // global
           I64[Sp - 8] = block_cgReA_info;
           _sgNeE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNeE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugReV; else goto cgReB;
       ugReV: // global
           call _cgReA(R1) args: 0, res: 0, upd: 0;
       cgReB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgReu_info" {
     block_cgReu_info:
         const _cgReu;
         const 0;
         const 4294967326;
         const SgNTw_srt+864;
 },
 _cgReA() //  [R1]
         { []
         }
     {offset
       cgReA: // global
           I64[Sp] = block_cgReF_info;
           _sgNeG::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNeG::F32;
           if (R1 & 7 != 0) goto ugReX; else goto cgReG;
       ugReX: // global
           call _cgReF(R1) args: 0, res: 0, upd: 0;
       cgReG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgReA_info" {
     block_cgReA_info:
         const _cgReA;
         const 1;
         const 4294967326;
         const SgNTw_srt+864;
 },
 _cgReF() //  [R1]
         { []
         }
     {offset
       cgReF: // global
           _sgNeG::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgReK_info;
           F2 = F32[R1 + 7];
           F1 = _sgNeG::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catan1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgReF_info" {
     block_cgReF_info:
         const _cgReF;
         const 65;
         const 4294967326;
         const SgNTw_srt+864;
 },
 _cgReK() //  [R1, R2]
         { []
         }
     {offset
       cgReK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgReU; else goto cgReT;
       cgReU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgReT: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgReK_info" {
     block_cgReK_info:
         const _cgReK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.274749934 UTC

[section ""data" . Data.Complex.$w$s$catan_closure" {
     Data.Complex.$w$s$catan_closure:
         const Data.Complex.$w$s$catan_info;
         const 0;
 },
 Data.Complex.$w$s$catan_slow() //  [R1]
         { []
         }
     {offset
       cgRfp: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catan_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugRgN_srtd" {
     ugRgN_srtd:
         const SgNTw_srt+592;
         const 37;
         const 68727930881;
 },
 Data.Complex.$w$s$catan_entry() //  [D1, D2]
         { []
         }
     {offset
       cgRfv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRgx; else goto cgRgy;
       cgRgx: // global
           R1 = Data.Complex.$w$s$catan_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRgy: // global
           I64[Sp - 24] = block_cgRfP_info;
           _sgNeN::F64 = D2;
           _sgNeR::F64 = %MO_F_Add_W64(%MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1),
                                                     %MO_F_Mul_W64(D2, D2)),
                                       1.0 :: W64);
           D2 = %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1));
           _sgNeM::F64 = D1;
           D1 = _sgNeR::F64;
           F64[Sp - 16] = _sgNeM::F64;
           F64[Sp - 8] = _sgNeN::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catan_info" {
     Data.Complex.$w$s$catan_info:
         const Data.Complex.$w$s$catan_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugRgN_srtd;
         const 194;
         const Data.Complex.$w$s$catan_slow;
 },
 _cgRfP() //  [R1, R2]
         { []
         }
     {offset
       cgRfP: // global
           I64[Sp - 8] = block_cgRfR_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRgJ; else goto cgRfS;
       ugRgJ: // global
           call _cgRfR(R1) args: 0, res: 0, upd: 0;
       cgRfS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRfP_info" {
     block_cgRfP_info:
         const _cgRfP;
         const 194;
         const 554050781214;
         const SgNTw_srt+720;
 },
 _cgRfR() //  [R1]
         { []
         }
     {offset
       cgRfR: // global
           I64[Sp] = block_cgRfW_info;
           _sgNeZ::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNeZ::F64;
           if (R1 & 7 != 0) goto ugRgK; else goto cgRfX;
       ugRgK: // global
           call _cgRfW(R1) args: 0, res: 0, upd: 0;
       cgRfX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRfR_info" {
     block_cgRfR_info:
         const _cgRfR;
         const 387;
         const 554050781214;
         const SgNTw_srt+720;
 },
 _cgRfW() //  [R1]
         { []
         }
     {offset
       cgRfW: // global
           _sgNf2::F64 = %MO_F_Sub_W64(1.0 :: W64, F64[Sp + 24]);
           I64[Sp + 24] = block_cgRg4_info;
           D4 = F64[R1 + 7];
           D3 = F64[Sp + 8];
           D2 = F64[Sp + 16];
           D1 = _sgNf2::F64;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRfW_info" {
     block_cgRfW_info:
         const _cgRfW;
         const 451;
         const 554050781214;
         const SgNTw_srt+720;
 },
 _cgRg4() //  [R1, R2]
         { []
         }
     {offset
       cgRg4: // global
           I64[Sp - 8] = block_cgRg6_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRgL; else goto cgRg7;
       ugRgL: // global
           call _cgRg6(R1) args: 0, res: 0, upd: 0;
       cgRg7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRg4_info" {
     block_cgRg4_info:
         const _cgRg4;
         const 0;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRg6() //  [R1]
         { []
         }
     {offset
       cgRg6: // global
           I64[Sp] = block_cgRgb_info;
           _sgNf7::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNf7::F64;
           if (R1 & 7 != 0) goto ugRgM; else goto cgRgc;
       ugRgM: // global
           call _cgRgb(R1) args: 0, res: 0, upd: 0;
       cgRgc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRg6_info" {
     block_cgRg6_info:
         const _cgRg6;
         const 1;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRgb() //  [R1]
         { []
         }
     {offset
       cgRgb: // global
           I64[Sp - 8] = block_cgRgg_info;
           _sgNf9::F64 = F64[R1 + 7];
           D2 = _sgNf9::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgNf9::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRgb_info" {
     block_cgRgb_info:
         const _cgRgb;
         const 65;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRgg() //  [D1]
         { []
         }
     {offset
       cgRgg: // global
           _sgNf7::F64 = F64[Sp + 16];
           _sgNf9::F64 = F64[Sp + 8];
           _cgRgl::F64 = D1;
           (_cgRgk::F64) = call MO_F64_Log(_cgRgl::F64);
           I64[Sp + 8] = block_cgRgo_info;
           D2 = _sgNf9::F64;
           D1 = _sgNf7::F64;
           F64[Sp + 16] = _cgRgk::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRgg_info" {
     block_cgRgg_info:
         const _cgRgg;
         const 194;
         const 30;
 },
 _cgRgo() //  [D1]
         { []
         }
     {offset
       cgRgo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRgI; else goto cgRgH;
       cgRgI: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgRgH: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRgo_info" {
     block_cgRgo_info:
         const _cgRgo;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.294830844 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catan_closure" {
     Data.Complex.$fFloatingComplex_$s$catan_closure:
         const Data.Complex.$fFloatingComplex_$s$catan_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catan_entry() //  [R2]
         { []
         }
     {offset
       cgRhV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRib; else goto cgRic;
       cgRib: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRic: // global
           I64[Sp - 8] = block_cgRhS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRik; else goto cgRhT;
       ugRik: // global
           call _cgRhS(R1) args: 0, res: 0, upd: 0;
       cgRhT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catan_info" {
     Data.Complex.$fFloatingComplex_$s$catan_info:
         const Data.Complex.$fFloatingComplex_$s$catan_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+880;
 },
 _cgRhS() //  [R1]
         { []
         }
     {offset
       cgRhS: // global
           I64[Sp - 8] = block_cgRhY_info;
           _sgNfj::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNfj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRij; else goto cgRhZ;
       ugRij: // global
           call _cgRhY(R1) args: 0, res: 0, upd: 0;
       cgRhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRhS_info" {
     block_cgRhS_info:
         const _cgRhS;
         const 0;
         const 4294967326;
         const SgNTw_srt+880;
 },
 _cgRhY() //  [R1]
         { []
         }
     {offset
       cgRhY: // global
           I64[Sp] = block_cgRi3_info;
           _sgNfl::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNfl::F64;
           if (R1 & 7 != 0) goto ugRil; else goto cgRi4;
       ugRil: // global
           call _cgRi3(R1) args: 0, res: 0, upd: 0;
       cgRi4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRhY_info" {
     block_cgRhY_info:
         const _cgRhY;
         const 1;
         const 4294967326;
         const SgNTw_srt+880;
 },
 _cgRi3() //  [R1]
         { []
         }
     {offset
       cgRi3: // global
           _sgNfl::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgRi8_info;
           D2 = F64[R1 + 7];
           D1 = _sgNfl::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catan_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRi3_info" {
     block_cgRi3_info:
         const _cgRi3;
         const 65;
         const 4294967326;
         const SgNTw_srt+880;
 },
 _cgRi8() //  [R1, R2]
         { []
         }
     {offset
       cgRi8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRii; else goto cgRih;
       cgRii: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRih: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRi8_info" {
     block_cgRi8_info:
         const _cgRi8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.309117099 UTC

[section ""data" . Data.Complex.$w$catan_closure" {
     Data.Complex.$w$catan_closure:
         const Data.Complex.$w$catan_info;
         const 0;
 },
 sat_sgNfx_entry() //  [R1]
         { []
         }
     {offset
       cgRj6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRj7; else goto cgRj8;
       cgRj7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRj8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNfx_info" {
     sat_sgNfx_info:
         const sat_sgNfx_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+680;
 },
 sat_sgNfP_entry() //  [R1]
         { []
         }
     {offset
       cgRjp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRjq; else goto cgRjr;
       cgRjq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRjr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNfP_info" {
     sat_sgNfP_info:
         const sat_sgNfP_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugRjW_srtd" {
     ugRjW_srtd:
         const SgNTw_srt+312;
         const 74;
         const 71468322914305;
         const 512;
 },
 Data.Complex.$w$catan_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgRjs: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgRjC; else goto cgRjD;
       cgRjC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$catan_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRjD: // global
           I64[Sp - 32] = block_cgRiQ_info;
           _sgNfr::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgNfr::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$catan_info" {
     Data.Complex.$w$catan_info:
         const Data.Complex.$w$catan_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugRjW_srtd;
 },
 section ""relreadonly" . ugRjX_srtd" {
     ugRjX_srtd:
         const SgNTw_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgRiQ() //  [R1]
         { []
         }
     {offset
       cgRiQ: // global
           I64[Sp] = block_cgRiU_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRiQ_info" {
     block_cgRiQ_info:
         const _cgRiQ;
         const 3;
         const 18446744069414584350;
         const ugRjX_srtd;
 },
 section ""relreadonly" . ugRjY_srtd" {
     ugRjY_srtd:
         const SgNTw_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgRiU() //  [R1]
         { []
         }
     {offset
       cgRiU: // global
           I64[Sp] = block_cgRiY_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRiU_info" {
     block_cgRiU_info:
         const _cgRiU;
         const 3;
         const 18446744069414584350;
         const ugRjY_srtd;
 },
 section ""relreadonly" . ugRjZ_srtd" {
     ugRjZ_srtd:
         const SgNTw_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgRiY() //  [R1]
         { []
         }
     {offset
       cgRiY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRjI; else goto cgRjH;
       cgRjI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgRjH: // global
           I64[Hp - 16] = sat_sgNfx_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgRj9_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRiY_info" {
     block_cgRiY_info:
         const _cgRiY;
         const 3;
         const 18446744069414584350;
         const ugRjZ_srtd;
 },
 section ""relreadonly" . ugRk0_srtd" {
     ugRk0_srtd:
         const SgNTw_srt+312;
         const 47;
         const 71468322914305;
 },
 _cgRj9() //  [R1]
         { []
         }
     {offset
       cgRj9: // global
           I64[Sp - 8] = block_cgRjb_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 16];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRj9_info" {
     block_cgRj9_info:
         const _cgRj9;
         const 4;
         const 18446744069414584350;
         const ugRk0_srtd;
 },
 _cgRjb() //  [R1, R2]
         { []
         }
     {offset
       cgRjb: // global
           I64[Sp - 8] = block_cgRjd_info;
           _sgNft::P64 = P64[Sp + 40];
           R6 = _sgNft::P64;
           _sgNfs::P64 = P64[Sp + 32];
           R5 = _sgNfs::P64;
           R4 = _sgNft::P64;
           R3 = _sgNfs::P64;
           _sgNfB::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp] = _sgNfB::P64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjb_info" {
     block_cgRjb_info:
         const _cgRjb;
         const 5;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRjd() //  [R1, R2]
         { []
         }
     {offset
       cgRjd: // global
           _sgNfB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRjf_info;
           R6 = R2;
           R5 = R1;
           R4 = _sgNfB::P64;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 32];
           Sp = Sp + 8;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjd_info" {
     block_cgRjd_info:
         const _cgRjd;
         const 6;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRjf() //  [R1, R2]
         { []
         }
     {offset
       cgRjf: // global
           I64[Sp] = block_cgRjh_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjf_info" {
     block_cgRjf_info:
         const _cgRjf;
         const 1029;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRjh() //  [R1, R2]
         { []
         }
     {offset
       cgRjh: // global
           _sgNfy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRjj_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 32];
           R3 = _sgNfy::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjh_info" {
     block_cgRjh_info:
         const _cgRjh;
         const 1029;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRjj() //  [R1, R2]
         { []
         }
     {offset
       cgRjj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgRjQ; else goto cgRjP;
       cgRjQ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRjP: // global
           I64[Hp - 32] = sat_sgNfP_info;
           _sgNfr::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgNfr::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp - 8] = block_cgRjt_info;
           _sgNfN::P64 = R2;
           R2 = _sgNfr::P64;
           P64[Sp] = _sgNfN::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjj_info" {
     block_cgRjj_info:
         const _cgRjj;
         const 772;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRjt() //  [R1]
         { []
         }
     {offset
       cgRjt: // global
           I64[Sp] = block_cgRjx_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjt_info" {
     block_cgRjt_info:
         const _cgRjt;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRjx() //  [R1]
         { []
         }
     {offset
       cgRjx: // global
           _sgNfN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRjz_info;
           R4 = _sgNfN::P64;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjx_info" {
     block_cgRjx_info:
         const _cgRjx;
         const 1029;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRjz() //  [R1]
         { []
         }
     {offset
       cgRjz: // global
           I64[Sp + 24] = block_cgRjB_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjz_info" {
     block_cgRjz_info:
         const _cgRjz;
         const 388;
         const 30;
 },
 _cgRjB() //  [R1]
         { []
         }
     {offset
       cgRjB: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRjB_info" {
     block_cgRjB_info:
         const _cgRjB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.340238494 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$catan_closure" {
     Data.Complex.$fFloatingComplex_$catan_closure:
         const Data.Complex.$fFloatingComplex_$catan_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$catan_entry() //  [R2, R3]
         { []
         }
     {offset
       cgRlv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRlB; else goto cgRlC;
       cgRlB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$catan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRlC: // global
           I64[Sp - 16] = block_cgRls_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugRlH; else goto cgRlt;
       ugRlH: // global
           call _cgRls(R1) args: 0, res: 0, upd: 0;
       cgRlt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$catan_info" {
     Data.Complex.$fFloatingComplex_$catan_info:
         const Data.Complex.$fFloatingComplex_$catan_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgNTw_srt+896;
 },
 _cgRls() //  [R1]
         { []
         }
     {offset
       cgRls: // global
           _sgNfT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRly_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgNfT::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$catan_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRls_info" {
     block_cgRls_info:
         const _cgRls;
         const 1;
         const 4294967326;
         const SgNTw_srt+896;
 },
 _cgRly() //  [R1, R2]
         { []
         }
     {offset
       cgRly: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRlG; else goto cgRlF;
       cgRlG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRlF: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRly_info" {
     block_cgRly_info:
         const _cgRly;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.350617511 UTC

[section ""data" . Data.Complex.$w$s$cacos1_closure" {
     Data.Complex.$w$s$cacos1_closure:
         const Data.Complex.$w$s$cacos1_info;
         const 0;
 },
 Data.Complex.$w$s$cacos1_slow() //  [R1]
         { []
         }
     {offset
       cgRlZ: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacos1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugRnf_srtd" {
     ugRnf_srtd:
         const SgNTw_srt+576;
         const 45;
         const 17592190238721;
 },
 Data.Complex.$w$s$cacos1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgRm5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRn4; else goto cgRn5;
       cgRn4: // global
           R1 = Data.Complex.$w$s$cacos1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRn5: // global
           I64[Sp - 24] = block_cgRms_info;
           _sgNg2::F32 = F2;
           _sgNg6::F32 = %MO_F_Sub_W32(1.0 :: W32,
                                       %MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1), %MO_F_Mul_W32(F2, F2)));
           F2 = %MO_F_Sub_W32(0.0 :: W32,
                              %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1)));
           _sgNg1::F32 = F1;
           F1 = _sgNg6::F32;
           F32[Sp - 16] = _sgNg1::F32;
           F32[Sp - 8] = _sgNg2::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacos1_info" {
     Data.Complex.$w$s$cacos1_info:
         const Data.Complex.$w$s$cacos1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugRnf_srtd;
         const 194;
         const Data.Complex.$w$s$cacos1_slow;
 },
 _cgRms() //  [R1, R2]
         { []
         }
     {offset
       cgRms: // global
           I64[Sp - 8] = block_cgRmu_info;
           _sgNgc::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgNgc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRnd; else goto cgRmv;
       ugRnd: // global
           call _cgRmu(R1) args: 0, res: 0, upd: 0;
       cgRmv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRms_info" {
     block_cgRms_info:
         const _cgRms;
         const 194;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRmu() //  [R1]
         { []
         }
     {offset
       cgRmu: // global
           I64[Sp] = block_cgRmz_info;
           _sgNgf::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNgf::F32;
           if (R1 & 7 != 0) goto ugRne; else goto cgRmA;
       ugRne: // global
           call _cgRmz(R1) args: 0, res: 0, upd: 0;
       cgRmA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRmu_info" {
     block_cgRmu_info:
         const _cgRmu;
         const 387;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRmz() //  [R1]
         { []
         }
     {offset
       cgRmz: // global
           _sgNgi::F32 = %MO_F_Add_W32(F32[Sp + 24], F32[R1 + 7]);
           _sgNgj::F32 = %MO_F_Add_W32(F32[Sp + 16],
                                       %MO_F_Neg_W32(F32[Sp + 8]));
           I64[Sp + 8] = block_cgRmN_info;
           F2 = _sgNgi::F32;
           F1 = _sgNgj::F32;
           F32[Sp + 16] = _sgNgj::F32;
           F32[Sp + 24] = _sgNgi::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRmz_info" {
     block_cgRmz_info:
         const _cgRmz;
         const 451;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRmN() //  [F1]
         { []
         }
     {offset
       cgRmN: // global
           _sgNgi::F32 = F32[Sp + 16];
           _sgNgj::F32 = F32[Sp + 8];
           _cgRmS::F32 = F1;
           (_cgRmR::F32) = call MO_F32_Log(_cgRmS::F32);
           I64[Sp + 8] = block_cgRmV_info;
           F2 = _sgNgi::F32;
           F1 = _sgNgj::F32;
           F32[Sp + 16] = _cgRmR::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRmN_info" {
     block_cgRmN_info:
         const _cgRmN;
         const 194;
         const 30;
 },
 _cgRmV() //  [F1]
         { []
         }
     {offset
       cgRmV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRnc; else goto cgRnb;
       cgRnc: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgRnb: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRmV_info" {
     block_cgRmV_info:
         const _cgRmV;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.366398903 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacos1_closure" {
     Data.Complex.$fFloatingComplex_$s$cacos1_closure:
         const Data.Complex.$fFloatingComplex_$s$cacos1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacos1_entry() //  [R2]
         { []
         }
     {offset
       cgRog: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRow; else goto cgRox;
       cgRow: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacos1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRox: // global
           I64[Sp - 8] = block_cgRod_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRoF; else goto cgRoe;
       ugRoF: // global
           call _cgRod(R1) args: 0, res: 0, upd: 0;
       cgRoe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacos1_info" {
     Data.Complex.$fFloatingComplex_$s$cacos1_info:
         const Data.Complex.$fFloatingComplex_$s$cacos1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+928;
 },
 _cgRod() //  [R1]
         { []
         }
     {offset
       cgRod: // global
           I64[Sp - 8] = block_cgRoj_info;
           _sgNgu::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNgu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRoE; else goto cgRok;
       ugRoE: // global
           call _cgRoj(R1) args: 0, res: 0, upd: 0;
       cgRok: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRod_info" {
     block_cgRod_info:
         const _cgRod;
         const 0;
         const 4294967326;
         const SgNTw_srt+928;
 },
 _cgRoj() //  [R1]
         { []
         }
     {offset
       cgRoj: // global
           I64[Sp] = block_cgRoo_info;
           _sgNgw::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNgw::F32;
           if (R1 & 7 != 0) goto ugRoG; else goto cgRop;
       ugRoG: // global
           call _cgRoo(R1) args: 0, res: 0, upd: 0;
       cgRop: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRoj_info" {
     block_cgRoj_info:
         const _cgRoj;
         const 1;
         const 4294967326;
         const SgNTw_srt+928;
 },
 _cgRoo() //  [R1]
         { []
         }
     {offset
       cgRoo: // global
           _sgNgw::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgRot_info;
           F2 = F32[R1 + 7];
           F1 = _sgNgw::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacos1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRoo_info" {
     block_cgRoo_info:
         const _cgRoo;
         const 65;
         const 4294967326;
         const SgNTw_srt+928;
 },
 _cgRot() //  [R1, R2]
         { []
         }
     {offset
       cgRot: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRoD; else goto cgRoC;
       cgRoD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRoC: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRot_info" {
     block_cgRot_info:
         const _cgRot;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.378708403 UTC

[section ""data" . Data.Complex.$w$s$cacos_closure" {
     Data.Complex.$w$s$cacos_closure:
         const Data.Complex.$w$s$cacos_info;
         const 0;
 },
 Data.Complex.$w$s$cacos_slow() //  [R1]
         { []
         }
     {offset
       cgRp8: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$cacos_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugRqo_srtd" {
     ugRqo_srtd:
         const SgNTw_srt+592;
         const 45;
         const 17592194433025;
 },
 Data.Complex.$w$s$cacos_entry() //  [D1, D2]
         { []
         }
     {offset
       cgRpe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRqd; else goto cgRqe;
       cgRqd: // global
           R1 = Data.Complex.$w$s$cacos_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRqe: // global
           I64[Sp - 24] = block_cgRpB_info;
           _sgNgD::F64 = D2;
           _sgNgH::F64 = %MO_F_Sub_W64(1.0 :: W64,
                                       %MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1), %MO_F_Mul_W64(D2, D2)));
           D2 = %MO_F_Sub_W64(0.0 :: W64,
                              %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1)));
           _sgNgC::F64 = D1;
           D1 = _sgNgH::F64;
           F64[Sp - 16] = _sgNgC::F64;
           F64[Sp - 8] = _sgNgD::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$cacos_info" {
     Data.Complex.$w$s$cacos_info:
         const Data.Complex.$w$s$cacos_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugRqo_srtd;
         const 194;
         const Data.Complex.$w$s$cacos_slow;
 },
 _cgRpB() //  [R1, R2]
         { []
         }
     {offset
       cgRpB: // global
           I64[Sp - 8] = block_cgRpD_info;
           _sgNgN::P64 = R1;
           R1 = R2;
           P64[Sp] = _sgNgN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRqm; else goto cgRpE;
       ugRqm: // global
           call _cgRpD(R1) args: 0, res: 0, upd: 0;
       cgRpE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRpB_info" {
     block_cgRpB_info:
         const _cgRpB;
         const 194;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRpD() //  [R1]
         { []
         }
     {offset
       cgRpD: // global
           I64[Sp] = block_cgRpI_info;
           _sgNgQ::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNgQ::F64;
           if (R1 & 7 != 0) goto ugRqn; else goto cgRpJ;
       ugRqn: // global
           call _cgRpI(R1) args: 0, res: 0, upd: 0;
       cgRpJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRpD_info" {
     block_cgRpD_info:
         const _cgRpD;
         const 387;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRpI() //  [R1]
         { []
         }
     {offset
       cgRpI: // global
           _sgNgT::F64 = %MO_F_Add_W64(F64[Sp + 24], F64[R1 + 7]);
           _sgNgU::F64 = %MO_F_Add_W64(F64[Sp + 16],
                                       %MO_F_Neg_W64(F64[Sp + 8]));
           I64[Sp + 8] = block_cgRpW_info;
           D2 = _sgNgT::F64;
           D1 = _sgNgU::F64;
           F64[Sp + 16] = _sgNgU::F64;
           F64[Sp + 24] = _sgNgT::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRpI_info" {
     block_cgRpI_info:
         const _cgRpI;
         const 451;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRpW() //  [D1]
         { []
         }
     {offset
       cgRpW: // global
           _sgNgT::F64 = F64[Sp + 16];
           _sgNgU::F64 = F64[Sp + 8];
           _cgRq1::F64 = D1;
           (_cgRq0::F64) = call MO_F64_Log(_cgRq1::F64);
           I64[Sp + 8] = block_cgRq4_info;
           D2 = _sgNgT::F64;
           D1 = _sgNgU::F64;
           F64[Sp + 16] = _cgRq0::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRpW_info" {
     block_cgRpW_info:
         const _cgRpW;
         const 194;
         const 30;
 },
 _cgRq4() //  [D1]
         { []
         }
     {offset
       cgRq4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRql; else goto cgRqk;
       cgRql: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgRqk: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRq4_info" {
     block_cgRq4_info:
         const _cgRq4;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.394682932 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cacos_closure" {
     Data.Complex.$fFloatingComplex_$s$cacos_closure:
         const Data.Complex.$fFloatingComplex_$s$cacos_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$cacos_entry() //  [R2]
         { []
         }
     {offset
       cgRrp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRrF; else goto cgRrG;
       cgRrF: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cacos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRrG: // global
           I64[Sp - 8] = block_cgRrm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRrO; else goto cgRrn;
       ugRrO: // global
           call _cgRrm(R1) args: 0, res: 0, upd: 0;
       cgRrn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cacos_info" {
     Data.Complex.$fFloatingComplex_$s$cacos_info:
         const Data.Complex.$fFloatingComplex_$s$cacos_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+944;
 },
 _cgRrm() //  [R1]
         { []
         }
     {offset
       cgRrm: // global
           I64[Sp - 8] = block_cgRrs_info;
           _sgNh5::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNh5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRrN; else goto cgRrt;
       ugRrN: // global
           call _cgRrs(R1) args: 0, res: 0, upd: 0;
       cgRrt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRrm_info" {
     block_cgRrm_info:
         const _cgRrm;
         const 0;
         const 4294967326;
         const SgNTw_srt+944;
 },
 _cgRrs() //  [R1]
         { []
         }
     {offset
       cgRrs: // global
           I64[Sp] = block_cgRrx_info;
           _sgNh7::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNh7::F64;
           if (R1 & 7 != 0) goto ugRrP; else goto cgRry;
       ugRrP: // global
           call _cgRrx(R1) args: 0, res: 0, upd: 0;
       cgRry: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRrs_info" {
     block_cgRrs_info:
         const _cgRrs;
         const 1;
         const 4294967326;
         const SgNTw_srt+944;
 },
 _cgRrx() //  [R1]
         { []
         }
     {offset
       cgRrx: // global
           _sgNh7::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgRrC_info;
           D2 = F64[R1 + 7];
           D1 = _sgNh7::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$cacos_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRrx_info" {
     block_cgRrx_info:
         const _cgRrx;
         const 65;
         const 4294967326;
         const SgNTw_srt+944;
 },
 _cgRrC() //  [R1, R2]
         { []
         }
     {offset
       cgRrC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRrM; else goto cgRrL;
       cgRrM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRrL: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRrC_info" {
     block_cgRrC_info:
         const _cgRrC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.408531412 UTC

[section ""data" . Data.Complex.$w$cacos_closure" {
     Data.Complex.$w$cacos_closure:
         const Data.Complex.$w$cacos_info;
         const 0;
 },
 sat_sgNhA_entry() //  [R1]
         { []
         }
     {offset
       cgRsM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRsN; else goto cgRsO;
       cgRsN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRsO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNhA_info" {
     sat_sgNhA_info:
         const sat_sgNhA_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugRth_srtd" {
     ugRth_srtd:
         const SgNTw_srt+520;
         const 56;
         const 36873221950144513;
 },
 Data.Complex.$w$cacos_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgRsP: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgRsZ; else goto cgRt0;
       cgRsZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$cacos_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRt0: // global
           I64[Sp - 32] = block_cgRsk_info;
           _sgNhe::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgNhd::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgNhd::P64;
           P64[Sp - 16] = _sgNhe::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$cacos_info" {
     Data.Complex.$w$cacos_info:
         const Data.Complex.$w$cacos_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugRth_srtd;
 },
 _cgRsk() //  [R1, R2]
         { []
         }
     {offset
       cgRsk: // global
           I64[Sp - 16] = block_cgRsm_info;
           _sgNhf::P64 = P64[Sp + 24];
           R6 = _sgNhf::P64;
           _sgNhe::P64 = P64[Sp + 16];
           R5 = _sgNhe::P64;
           R4 = _sgNhf::P64;
           R3 = _sgNhe::P64;
           _sgNhi::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNhi::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsk_info" {
     block_cgRsk_info:
         const _cgRsk;
         const 3;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRsm() //  [R1, R2]
         { []
         }
     {offset
       cgRsm: // global
           _sgNhh::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgRso_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgNhh::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsm_info" {
     block_cgRsm_info:
         const _cgRsm;
         const 5;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRso() //  [R1, R2]
         { []
         }
     {offset
       cgRso: // global
           I64[Sp] = block_cgRsq_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRso_info" {
     block_cgRso_info:
         const _cgRso;
         const 3;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRsq() //  [R1, R2]
         { []
         }
     {offset
       cgRsq: // global
           I64[Sp - 16] = block_cgRss_info;
           _sgNhr::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNhr::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsq_info" {
     block_cgRsq_info:
         const _cgRsq;
         const 3;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRss() //  [R1]
         { []
         }
     {offset
       cgRss: // global
           I64[Sp] = block_cgRsw_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRss_info" {
     block_cgRss_info:
         const _cgRss;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRsw() //  [R1]
         { []
         }
     {offset
       cgRsw: // global
           I64[Sp] = block_cgRsA_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsw_info" {
     block_cgRsw_info:
         const _cgRsw;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRsA() //  [R1]
         { []
         }
     {offset
       cgRsA: // global
           I64[Sp] = block_cgRsE_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsA_info" {
     block_cgRsA_info:
         const _cgRsA;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRsE() //  [R1]
         { []
         }
     {offset
       cgRsE: // global
           I64[Sp] = block_cgRsG_info;
           R6 = P64[Sp + 16];
           R5 = R1;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsE_info" {
     block_cgRsE_info:
         const _cgRsE;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRsG() //  [R1, R2]
         { []
         }
     {offset
       cgRsG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgRtb; else goto cgRta;
       cgRtb: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRta: // global
           I64[Hp - 32] = sat_sgNhA_info;
           _sgNhd::P64 = P64[Sp + 24];
           P64[Hp - 16] = _sgNhd::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp] = block_cgRsQ_info;
           _sgNhy::P64 = R2;
           R2 = _sgNhd::P64;
           P64[Sp + 16] = _sgNhy::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 40] = Hp - 32;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsG_info" {
     block_cgRsG_info:
         const _cgRsG;
         const 1669;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRsQ() //  [R1]
         { []
         }
     {offset
       cgRsQ: // global
           I64[Sp] = block_cgRsU_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsQ_info" {
     block_cgRsQ_info:
         const _cgRsQ;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRsU() //  [R1]
         { []
         }
     {offset
       cgRsU: // global
           I64[Sp] = block_cgRsW_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = R1;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsU_info" {
     block_cgRsU_info:
         const _cgRsU;
         const 1029;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRsW() //  [R1]
         { []
         }
     {offset
       cgRsW: // global
           I64[Sp + 32] = block_cgRsY_info;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp + 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsW_info" {
     block_cgRsW_info:
         const _cgRsW;
         const 901;
         const 30;
 },
 _cgRsY() //  [R1]
         { []
         }
     {offset
       cgRsY: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRsY_info" {
     block_cgRsY_info:
         const _cgRsY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.43550026 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cacos_closure" {
     Data.Complex.$fFloatingComplex_$cacos_closure:
         const Data.Complex.$fFloatingComplex_$cacos_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$cacos_entry() //  [R2, R3]
         { []
         }
     {offset
       cgRuz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRuF; else goto cgRuG;
       cgRuF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cacos_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRuG: // global
           I64[Sp - 16] = block_cgRuw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugRuL; else goto cgRux;
       ugRuL: // global
           call _cgRuw(R1) args: 0, res: 0, upd: 0;
       cgRux: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cacos_info" {
     Data.Complex.$fFloatingComplex_$cacos_info:
         const Data.Complex.$fFloatingComplex_$cacos_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+960;
 },
 _cgRuw() //  [R1]
         { []
         }
     {offset
       cgRuw: // global
           _sgNhE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRuC_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgNhE::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$cacos_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRuw_info" {
     block_cgRuw_info:
         const _cgRuw;
         const 1;
         const 4294967326;
         const SgNTw_srt+960;
 },
 _cgRuC() //  [R1, R2]
         { []
         }
     {offset
       cgRuC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRuK; else goto cgRuJ;
       cgRuK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRuJ: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRuC_info" {
     block_cgRuC_info:
         const _cgRuC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.446240868 UTC

[section ""data" . Data.Complex.$w$s$casin1_closure" {
     Data.Complex.$w$s$casin1_closure:
         const Data.Complex.$w$s$casin1_info;
         const 0;
 },
 Data.Complex.$w$s$casin1_slow() //  [R1]
         { []
         }
     {offset
       cgRv3: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casin1_entry(F2,
                                               F1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugRwj_srtd" {
     ugRwj_srtd:
         const SgNTw_srt+576;
         const 51;
         const 1125899911036929;
 },
 Data.Complex.$w$s$casin1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgRv9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRw8; else goto cgRw9;
       cgRw8: // global
           R1 = Data.Complex.$w$s$casin1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRw9: // global
           I64[Sp - 24] = block_cgRvw_info;
           _sgNhN::F32 = F2;
           _sgNhR::F32 = %MO_F_Sub_W32(1.0 :: W32,
                                       %MO_F_Sub_W32(%MO_F_Mul_W32(F1, F1), %MO_F_Mul_W32(F2, F2)));
           F2 = %MO_F_Sub_W32(0.0 :: W32,
                              %MO_F_Add_W32(%MO_F_Mul_W32(F1, F2), %MO_F_Mul_W32(F2, F1)));
           _sgNhM::F32 = F1;
           F1 = _sgNhR::F32;
           F32[Sp - 16] = _sgNhM::F32;
           F32[Sp - 8] = _sgNhN::F32;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casin1_info" {
     Data.Complex.$w$s$casin1_info:
         const Data.Complex.$w$s$casin1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugRwj_srtd;
         const 194;
         const Data.Complex.$w$s$casin1_slow;
 },
 _cgRvw() //  [R1, R2]
         { []
         }
     {offset
       cgRvw: // global
           I64[Sp - 8] = block_cgRvy_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRwh; else goto cgRvz;
       ugRwh: // global
           call _cgRvy(R1) args: 0, res: 0, upd: 0;
       cgRvz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRvw_info" {
     block_cgRvw_info:
         const _cgRvw;
         const 194;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRvy() //  [R1]
         { []
         }
     {offset
       cgRvy: // global
           I64[Sp] = block_cgRvD_info;
           _sgNi0::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNi0::F32;
           if (R1 & 7 != 0) goto ugRwi; else goto cgRvE;
       ugRwi: // global
           call _cgRvD(R1) args: 0, res: 0, upd: 0;
       cgRvE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRvy_info" {
     block_cgRvy_info:
         const _cgRvy;
         const 387;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRvD() //  [R1]
         { []
         }
     {offset
       cgRvD: // global
           _sgNi3::F32 = %MO_F_Add_W32(F32[Sp + 16], F32[R1 + 7]);
           _sgNi4::F32 = %MO_F_Add_W32(%MO_F_Neg_W32(F32[Sp + 24]),
                                       F32[Sp + 8]);
           I64[Sp + 8] = block_cgRvR_info;
           F2 = _sgNi3::F32;
           F1 = _sgNi4::F32;
           F32[Sp + 16] = _sgNi4::F32;
           F32[Sp + 24] = _sgNi3::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRvD_info" {
     block_cgRvD_info:
         const _cgRvD;
         const 451;
         const 4294967326;
         const SgNTw_srt+752;
 },
 _cgRvR() //  [F1]
         { []
         }
     {offset
       cgRvR: // global
           _sgNi3::F32 = F32[Sp + 16];
           _sgNi4::F32 = F32[Sp + 8];
           _cgRvW::F32 = F1;
           (_cgRvV::F32) = call MO_F32_Log(_cgRvW::F32);
           I64[Sp + 8] = block_cgRvZ_info;
           F2 = _sgNi3::F32;
           F1 = _sgNi4::F32;
           F32[Sp + 16] = _cgRvV::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRvR_info" {
     block_cgRvR_info:
         const _cgRvR;
         const 194;
         const 30;
 },
 _cgRvZ() //  [F1]
         { []
         }
     {offset
       cgRvZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRwg; else goto cgRwf;
       cgRwg: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgRwf: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           F32[Hp - 16] = %MO_F_Neg_W32(F32[Sp + 8]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRvZ_info" {
     block_cgRvZ_info:
         const _cgRvZ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.465912102 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casin1_closure" {
     Data.Complex.$fFloatingComplex_$s$casin1_closure:
         const Data.Complex.$fFloatingComplex_$s$casin1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casin1_entry() //  [R2]
         { []
         }
     {offset
       cgRxj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRxz; else goto cgRxA;
       cgRxz: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRxA: // global
           I64[Sp - 8] = block_cgRxg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRxI; else goto cgRxh;
       ugRxI: // global
           call _cgRxg(R1) args: 0, res: 0, upd: 0;
       cgRxh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casin1_info" {
     Data.Complex.$fFloatingComplex_$s$casin1_info:
         const Data.Complex.$fFloatingComplex_$s$casin1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+976;
 },
 _cgRxg() //  [R1]
         { []
         }
     {offset
       cgRxg: // global
           I64[Sp - 8] = block_cgRxm_info;
           _sgNif::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNif::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRxH; else goto cgRxn;
       ugRxH: // global
           call _cgRxm(R1) args: 0, res: 0, upd: 0;
       cgRxn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRxg_info" {
     block_cgRxg_info:
         const _cgRxg;
         const 0;
         const 4294967326;
         const SgNTw_srt+976;
 },
 _cgRxm() //  [R1]
         { []
         }
     {offset
       cgRxm: // global
           I64[Sp] = block_cgRxr_info;
           _sgNih::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNih::F32;
           if (R1 & 7 != 0) goto ugRxJ; else goto cgRxs;
       ugRxJ: // global
           call _cgRxr(R1) args: 0, res: 0, upd: 0;
       cgRxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRxm_info" {
     block_cgRxm_info:
         const _cgRxm;
         const 1;
         const 4294967326;
         const SgNTw_srt+976;
 },
 _cgRxr() //  [R1]
         { []
         }
     {offset
       cgRxr: // global
           _sgNih::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgRxw_info;
           F2 = F32[R1 + 7];
           F1 = _sgNih::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casin1_entry(F2,
                                               F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRxr_info" {
     block_cgRxr_info:
         const _cgRxr;
         const 65;
         const 4294967326;
         const SgNTw_srt+976;
 },
 _cgRxw() //  [R1, R2]
         { []
         }
     {offset
       cgRxw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRxG; else goto cgRxF;
       cgRxG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRxF: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRxw_info" {
     block_cgRxw_info:
         const _cgRxw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.48072396 UTC

[section ""data" . Data.Complex.$w$s$casin_closure" {
     Data.Complex.$w$s$casin_closure:
         const Data.Complex.$w$s$casin_info;
         const 0;
 },
 Data.Complex.$w$s$casin_slow() //  [R1]
         { []
         }
     {offset
       cgRyb: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$casin_entry(D2,
                                              D1,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ugRzr_srtd" {
     ugRzr_srtd:
         const SgNTw_srt+592;
         const 51;
         const 1125899915231233;
 },
 Data.Complex.$w$s$casin_entry() //  [D1, D2]
         { []
         }
     {offset
       cgRyh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRzg; else goto cgRzh;
       cgRzg: // global
           R1 = Data.Complex.$w$s$casin_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRzh: // global
           I64[Sp - 24] = block_cgRyE_info;
           _sgNio::F64 = D2;
           _sgNis::F64 = %MO_F_Sub_W64(1.0 :: W64,
                                       %MO_F_Sub_W64(%MO_F_Mul_W64(D1, D1), %MO_F_Mul_W64(D2, D2)));
           D2 = %MO_F_Sub_W64(0.0 :: W64,
                              %MO_F_Add_W64(%MO_F_Mul_W64(D1, D2), %MO_F_Mul_W64(D2, D1)));
           _sgNin::F64 = D1;
           D1 = _sgNis::F64;
           F64[Sp - 16] = _sgNin::F64;
           F64[Sp - 8] = _sgNio::F64;
           Sp = Sp - 24;
           call Data.Complex.$w$s$csqrt_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$casin_info" {
     Data.Complex.$w$s$casin_info:
         const Data.Complex.$w$s$casin_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const ugRzr_srtd;
         const 194;
         const Data.Complex.$w$s$casin_slow;
 },
 _cgRyE() //  [R1, R2]
         { []
         }
     {offset
       cgRyE: // global
           I64[Sp - 8] = block_cgRyG_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRzp; else goto cgRyH;
       ugRzp: // global
           call _cgRyG(R1) args: 0, res: 0, upd: 0;
       cgRyH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRyE_info" {
     block_cgRyE_info:
         const _cgRyE;
         const 194;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRyG() //  [R1]
         { []
         }
     {offset
       cgRyG: // global
           I64[Sp] = block_cgRyL_info;
           _sgNiB::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNiB::F64;
           if (R1 & 7 != 0) goto ugRzq; else goto cgRyM;
       ugRzq: // global
           call _cgRyL(R1) args: 0, res: 0, upd: 0;
       cgRyM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRyG_info" {
     block_cgRyG_info:
         const _cgRyG;
         const 387;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRyL() //  [R1]
         { []
         }
     {offset
       cgRyL: // global
           _sgNiE::F64 = %MO_F_Add_W64(F64[Sp + 16], F64[R1 + 7]);
           _sgNiF::F64 = %MO_F_Add_W64(%MO_F_Neg_W64(F64[Sp + 24]),
                                       F64[Sp + 8]);
           I64[Sp + 8] = block_cgRyZ_info;
           D2 = _sgNiE::F64;
           D1 = _sgNiF::F64;
           F64[Sp + 16] = _sgNiF::F64;
           F64[Sp + 24] = _sgNiE::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRyL_info" {
     block_cgRyL_info:
         const _cgRyL;
         const 451;
         const 4294967326;
         const SgNTw_srt+776;
 },
 _cgRyZ() //  [D1]
         { []
         }
     {offset
       cgRyZ: // global
           _sgNiE::F64 = F64[Sp + 16];
           _sgNiF::F64 = F64[Sp + 8];
           _cgRz4::F64 = D1;
           (_cgRz3::F64) = call MO_F64_Log(_cgRz4::F64);
           I64[Sp + 8] = block_cgRz7_info;
           D2 = _sgNiE::F64;
           D1 = _sgNiF::F64;
           F64[Sp + 16] = _cgRz3::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRyZ_info" {
     block_cgRyZ_info:
         const _cgRyZ;
         const 194;
         const 30;
 },
 _cgRz7() //  [D1]
         { []
         }
     {offset
       cgRz7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRzo; else goto cgRzn;
       cgRzo: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgRzn: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           F64[Hp - 16] = %MO_F_Neg_W64(F64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRz7_info" {
     block_cgRz7_info:
         const _cgRz7;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.497637194 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$casin_closure" {
     Data.Complex.$fFloatingComplex_$s$casin_closure:
         const Data.Complex.$fFloatingComplex_$s$casin_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$casin_entry() //  [R2]
         { []
         }
     {offset
       cgRAr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRAH; else goto cgRAI;
       cgRAH: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$casin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRAI: // global
           I64[Sp - 8] = block_cgRAo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRAQ; else goto cgRAp;
       ugRAQ: // global
           call _cgRAo(R1) args: 0, res: 0, upd: 0;
       cgRAp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$casin_info" {
     Data.Complex.$fFloatingComplex_$s$casin_info:
         const Data.Complex.$fFloatingComplex_$s$casin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+992;
 },
 _cgRAo() //  [R1]
         { []
         }
     {offset
       cgRAo: // global
           I64[Sp - 8] = block_cgRAu_info;
           _sgNiQ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNiQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRAP; else goto cgRAv;
       ugRAP: // global
           call _cgRAu(R1) args: 0, res: 0, upd: 0;
       cgRAv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRAo_info" {
     block_cgRAo_info:
         const _cgRAo;
         const 0;
         const 4294967326;
         const SgNTw_srt+992;
 },
 _cgRAu() //  [R1]
         { []
         }
     {offset
       cgRAu: // global
           I64[Sp] = block_cgRAz_info;
           _sgNiS::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNiS::F64;
           if (R1 & 7 != 0) goto ugRAR; else goto cgRAA;
       ugRAR: // global
           call _cgRAz(R1) args: 0, res: 0, upd: 0;
       cgRAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRAu_info" {
     block_cgRAu_info:
         const _cgRAu;
         const 1;
         const 4294967326;
         const SgNTw_srt+992;
 },
 _cgRAz() //  [R1]
         { []
         }
     {offset
       cgRAz: // global
           _sgNiS::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgRAE_info;
           D2 = F64[R1 + 7];
           D1 = _sgNiS::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$casin_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRAz_info" {
     block_cgRAz_info:
         const _cgRAz;
         const 65;
         const 4294967326;
         const SgNTw_srt+992;
 },
 _cgRAE() //  [R1, R2]
         { []
         }
     {offset
       cgRAE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRAO; else goto cgRAN;
       cgRAO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRAN: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRAE_info" {
     block_cgRAE_info:
         const _cgRAE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.511017564 UTC

[section ""data" . Data.Complex.$w$casin_closure" {
     Data.Complex.$w$casin_closure:
         const Data.Complex.$w$casin_info;
         const 0;
 },
 sat_sgNjl_entry() //  [R1]
         { []
         }
     {offset
       cgRBO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRBP; else goto cgRBQ;
       cgRBP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRBQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNjl_info" {
     sat_sgNjl_info:
         const sat_sgNjl_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugRCj_srtd" {
     ugRCj_srtd:
         const SgNTw_srt+520;
         const 62;
         const 2306687434144874497;
 },
 Data.Complex.$w$casin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgRBR: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgRC1; else goto cgRC2;
       cgRC1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$casin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRC2: // global
           I64[Sp - 32] = block_cgRBm_info;
           _sgNiY::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgNiY::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$casin_info" {
     Data.Complex.$w$casin_info:
         const Data.Complex.$w$casin_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugRCj_srtd;
 },
 section ""relreadonly" . ugRCk_srtd" {
     ugRCk_srtd:
         const SgNTw_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgRBm() //  [R1]
         { []
         }
     {offset
       cgRBm: // global
           I64[Sp] = block_cgRBq_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBm_info" {
     block_cgRBm_info:
         const _cgRBm;
         const 3;
         const 18446744069414584350;
         const ugRCk_srtd;
 },
 section ""relreadonly" . ugRCl_srtd" {
     ugRCl_srtd:
         const SgNTw_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgRBq() //  [R1]
         { []
         }
     {offset
       cgRBq: // global
           I64[Sp] = block_cgRBu_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBq_info" {
     block_cgRBq_info:
         const _cgRBq;
         const 3;
         const 18446744069414584350;
         const ugRCl_srtd;
 },
 section ""relreadonly" . ugRCm_srtd" {
     ugRCm_srtd:
         const SgNTw_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgRBu() //  [R1]
         { []
         }
     {offset
       cgRBu: // global
           I64[Sp - 8] = block_cgRBy_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBu_info" {
     block_cgRBu_info:
         const _cgRBu;
         const 3;
         const 18446744069414584350;
         const ugRCm_srtd;
 },
 section ""relreadonly" . ugRCn_srtd" {
     ugRCn_srtd:
         const SgNTw_srt+520;
         const 50;
         const 844424931180545;
 },
 _cgRBy() //  [R1]
         { []
         }
     {offset
       cgRBy: // global
           I64[Sp - 8] = block_cgRBA_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 16];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBy_info" {
     block_cgRBy_info:
         const _cgRBy;
         const 4;
         const 18446744069414584350;
         const ugRCn_srtd;
 },
 _cgRBA() //  [R1, R2]
         { []
         }
     {offset
       cgRBA: // global
           I64[Sp - 8] = block_cgRBC_info;
           _sgNj0::P64 = P64[Sp + 40];
           R6 = _sgNj0::P64;
           _sgNiZ::P64 = P64[Sp + 32];
           R5 = _sgNiZ::P64;
           R4 = _sgNj0::P64;
           R3 = _sgNiZ::P64;
           _sgNj7::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp] = _sgNj7::P64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBA_info" {
     block_cgRBA_info:
         const _cgRBA;
         const 5;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRBC() //  [R1, R2]
         { []
         }
     {offset
       cgRBC: // global
           _sgNj7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRBE_info;
           R6 = R2;
           R5 = R1;
           R4 = _sgNj7::P64;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 32];
           Sp = Sp + 8;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBC_info" {
     block_cgRBC_info:
         const _cgRBC;
         const 6;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRBE() //  [R1, R2]
         { []
         }
     {offset
       cgRBE: // global
           I64[Sp] = block_cgRBG_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           call Data.Complex.$w$csqrt_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBE_info" {
     block_cgRBE_info:
         const _cgRBE;
         const 1029;
         const 12884901918;
         const SgNTw_srt+904;
 },
 _cgRBG() //  [R1, R2]
         { []
         }
     {offset
       cgRBG: // global
           _sgNj4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRBI_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 32];
           R3 = _sgNj4::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBG_info" {
     block_cgRBG_info:
         const _cgRBG;
         const 1029;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRBI() //  [R1, R2]
         { []
         }
     {offset
       cgRBI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgRCd; else goto cgRCc;
       cgRCd: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRCc: // global
           I64[Hp - 32] = sat_sgNjl_info;
           _sgNiY::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgNiY::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp - 8] = block_cgRBS_info;
           _sgNjj::P64 = R2;
           R2 = _sgNiY::P64;
           P64[Sp] = _sgNjj::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBI_info" {
     block_cgRBI_info:
         const _cgRBI;
         const 772;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRBS() //  [R1]
         { []
         }
     {offset
       cgRBS: // global
           I64[Sp] = block_cgRBW_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBS_info" {
     block_cgRBS_info:
         const _cgRBS;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRBW() //  [R1]
         { []
         }
     {offset
       cgRBW: // global
           _sgNjj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRBY_info;
           R4 = _sgNjj::P64;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBW_info" {
     block_cgRBW_info:
         const _cgRBW;
         const 1029;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRBY() //  [R1]
         { []
         }
     {offset
       cgRBY: // global
           I64[Sp + 24] = block_cgRC0_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRBY_info" {
     block_cgRBY_info:
         const _cgRBY;
         const 388;
         const 30;
 },
 _cgRC0() //  [R1]
         { []
         }
     {offset
       cgRC0: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRC0_info" {
     block_cgRC0_info:
         const _cgRC0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.540005014 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$casin_closure" {
     Data.Complex.$fFloatingComplex_$casin_closure:
         const Data.Complex.$fFloatingComplex_$casin_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$casin_entry() //  [R2, R3]
         { []
         }
     {offset
       cgRDJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRDP; else goto cgRDQ;
       cgRDP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$casin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRDQ: // global
           I64[Sp - 16] = block_cgRDG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugRDV; else goto cgRDH;
       ugRDV: // global
           call _cgRDG(R1) args: 0, res: 0, upd: 0;
       cgRDH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$casin_info" {
     Data.Complex.$fFloatingComplex_$casin_info:
         const Data.Complex.$fFloatingComplex_$casin_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgNTw_srt+1008;
 },
 _cgRDG() //  [R1]
         { []
         }
     {offset
       cgRDG: // global
           _sgNjp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRDM_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgNjp::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$casin_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRDG_info" {
     block_cgRDG_info:
         const _cgRDG;
         const 1;
         const 4294967326;
         const SgNTw_srt+1008;
 },
 _cgRDM() //  [R1, R2]
         { []
         }
     {offset
       cgRDM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRDU; else goto cgRDT;
       cgRDU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRDT: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRDM_info" {
     block_cgRDM_info:
         const _cgRDM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.549190838 UTC

[section ""data" . Data.Complex.$w$s$catanh1_closure" {
     Data.Complex.$w$s$catanh1_closure:
         const Data.Complex.$w$s$catanh1_info;
         const 0;
 },
 Data.Complex.$w$s$catanh1_slow() //  [R1]
         { []
         }
     {offset
       cgREd: // global
           F2 = F32[Sp + 8];
           F1 = F32[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catanh1_entry(F2,
                                                F1,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$catanh1_entry() //  [F1, F2]
         { []
         }
     {offset
       cgREj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRF9; else goto cgRFa;
       cgRF9: // global
           R1 = Data.Complex.$w$s$catanh1_closure;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRFa: // global
           I64[Sp - 8] = block_cgREr_info;
           F4 = %MO_F_Sub_W32(0.0 :: W32, F2);
           F3 = %MO_F_Sub_W32(1.0 :: W32, F1);
           F2 = F2;
           F1 = %MO_F_Add_W32(F1, 1.0 :: W32);
           Sp = Sp - 8;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catanh1_info" {
     Data.Complex.$w$s$catanh1_info:
         const Data.Complex.$w$s$catanh1_entry;
         const 0;
         const 30064771086;
         const 8589934592;
         const SgNTw_srt+1024;
         const 194;
         const Data.Complex.$w$s$catanh1_slow;
 },
 _cgREr() //  [R1, R2]
         { []
         }
     {offset
       cgREr: // global
           I64[Sp - 8] = block_cgREt_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRFi; else goto cgREu;
       ugRFi: // global
           call _cgREt(R1) args: 0, res: 0, upd: 0;
       cgREu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgREr_info" {
     block_cgREr_info:
         const _cgREr;
         const 0;
         const 4294967326;
         const SgNTw_srt+1032;
 },
 _cgREt() //  [R1]
         { []
         }
     {offset
       cgREt: // global
           I64[Sp] = block_cgREy_info;
           _sgNjG::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNjG::F32;
           if (R1 & 7 != 0) goto ugRFj; else goto cgREz;
       ugRFj: // global
           call _cgREy(R1) args: 0, res: 0, upd: 0;
       cgREz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgREt_info" {
     block_cgREt_info:
         const _cgREt;
         const 1;
         const 4294967326;
         const SgNTw_srt+1032;
 },
 _cgREy() //  [R1]
         { []
         }
     {offset
       cgREy: // global
           I64[Sp - 8] = block_cgRED_info;
           _sgNjI::F32 = F32[R1 + 7];
           F2 = _sgNjI::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgNjI::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgREy_info" {
     block_cgREy_info:
         const _cgREy;
         const 65;
         const 4294967326;
         const SgNTw_srt+1032;
 },
 _cgRED() //  [F1]
         { []
         }
     {offset
       cgRED: // global
           _sgNjG::F32 = F32[Sp + 16];
           _sgNjI::F32 = F32[Sp + 8];
           _cgREI::F32 = F1;
           (_cgREH::F32) = call MO_F32_Log(_cgREI::F32);
           I64[Sp + 8] = block_cgREL_info;
           F2 = _sgNjI::F32;
           F1 = _sgNjG::F32;
           F32[Sp + 16] = _cgREH::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRED_info" {
     block_cgRED_info:
         const _cgRED;
         const 194;
         const 30;
 },
 _cgREL() //  [F1]
         { []
         }
     {offset
       cgREL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRFh; else goto cgRFg;
       cgRFh: // global
           HpAlloc = 32;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgRFg: // global
           I64[Hp - 24] = GHC.Types.F#_con_info;
           _sgNjK::F32 = F32[Sp + 8];
           F32[Hp - 16] = %MO_F_Add_W32(%MO_F_Mul_W32(F1, 0.5 :: W32),
                                        %MO_F_Mul_W32(_sgNjK::F32, 0.0 :: W32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Sub_W32(%MO_F_Mul_W32(_sgNjK::F32, 0.5 :: W32),
                                   %MO_F_Mul_W32(F1, 0.0 :: W32));
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgREL_info" {
     block_cgREL_info:
         const _cgREL;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.564453556 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catanh1_closure" {
     Data.Complex.$fFloatingComplex_$s$catanh1_closure:
         const Data.Complex.$fFloatingComplex_$s$catanh1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catanh1_entry() //  [R2]
         { []
         }
     {offset
       cgRGg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRGw; else goto cgRGx;
       cgRGw: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catanh1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRGx: // global
           I64[Sp - 8] = block_cgRGd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRGF; else goto cgRGe;
       ugRGF: // global
           call _cgRGd(R1) args: 0, res: 0, upd: 0;
       cgRGe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catanh1_info" {
     Data.Complex.$fFloatingComplex_$s$catanh1_info:
         const Data.Complex.$fFloatingComplex_$s$catanh1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgNTw_srt+1024;
 },
 _cgRGd() //  [R1]
         { []
         }
     {offset
       cgRGd: // global
           I64[Sp - 8] = block_cgRGj_info;
           _sgNjX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNjX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRGE; else goto cgRGk;
       ugRGE: // global
           call _cgRGj(R1) args: 0, res: 0, upd: 0;
       cgRGk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRGd_info" {
     block_cgRGd_info:
         const _cgRGd;
         const 0;
         const 4294967326;
         const SgNTw_srt+1024;
 },
 _cgRGj() //  [R1]
         { []
         }
     {offset
       cgRGj: // global
           I64[Sp] = block_cgRGo_info;
           _sgNjZ::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNjZ::F32;
           if (R1 & 7 != 0) goto ugRGG; else goto cgRGp;
       ugRGG: // global
           call _cgRGo(R1) args: 0, res: 0, upd: 0;
       cgRGp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRGj_info" {
     block_cgRGj_info:
         const _cgRGj;
         const 1;
         const 4294967326;
         const SgNTw_srt+1024;
 },
 _cgRGo() //  [R1]
         { []
         }
     {offset
       cgRGo: // global
           _sgNjZ::F32 = F32[Sp + 8];
           I64[Sp + 8] = block_cgRGt_info;
           F2 = F32[R1 + 7];
           F1 = _sgNjZ::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catanh1_entry(F2,
                                                F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRGo_info" {
     block_cgRGo_info:
         const _cgRGo;
         const 65;
         const 4294967326;
         const SgNTw_srt+1024;
 },
 _cgRGt() //  [R1, R2]
         { []
         }
     {offset
       cgRGt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRGD; else goto cgRGC;
       cgRGD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRGC: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRGt_info" {
     block_cgRGt_info:
         const _cgRGt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.576584175 UTC

[section ""data" . Data.Complex.$w$s$catanh_closure" {
     Data.Complex.$w$s$catanh_closure:
         const Data.Complex.$w$s$catanh_info;
         const 0;
 },
 Data.Complex.$w$s$catanh_slow() //  [R1]
         { []
         }
     {offset
       cgRH8: // global
           D2 = F64[Sp + 8];
           D1 = F64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$s$catanh_entry(D2,
                                               D1,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$catanh_entry() //  [D1, D2]
         { []
         }
     {offset
       cgRHe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRI4; else goto cgRI5;
       cgRI4: // global
           R1 = Data.Complex.$w$s$catanh_closure;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       cgRI5: // global
           I64[Sp - 8] = block_cgRHm_info;
           D4 = %MO_F_Sub_W64(0.0 :: W64, D2);
           D3 = %MO_F_Sub_W64(1.0 :: W64, D1);
           D2 = D2;
           D1 = %MO_F_Add_W64(D1, 1.0 :: W64);
           Sp = Sp - 8;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$catanh_info" {
     Data.Complex.$w$s$catanh_info:
         const Data.Complex.$w$s$catanh_entry;
         const 0;
         const 30064771086;
         const 8589934592;
         const SgNTw_srt+1056;
         const 194;
         const Data.Complex.$w$s$catanh_slow;
 },
 _cgRHm() //  [R1, R2]
         { []
         }
     {offset
       cgRHm: // global
           I64[Sp - 8] = block_cgRHo_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRId; else goto cgRHp;
       ugRId: // global
           call _cgRHo(R1) args: 0, res: 0, upd: 0;
       cgRHp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRHm_info" {
     block_cgRHm_info:
         const _cgRHm;
         const 0;
         const 4294967326;
         const SgNTw_srt+1064;
 },
 _cgRHo() //  [R1]
         { []
         }
     {offset
       cgRHo: // global
           I64[Sp] = block_cgRHt_info;
           _sgNke::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNke::F64;
           if (R1 & 7 != 0) goto ugRIe; else goto cgRHu;
       ugRIe: // global
           call _cgRHt(R1) args: 0, res: 0, upd: 0;
       cgRHu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRHo_info" {
     block_cgRHo_info:
         const _cgRHo;
         const 1;
         const 4294967326;
         const SgNTw_srt+1064;
 },
 _cgRHt() //  [R1]
         { []
         }
     {offset
       cgRHt: // global
           I64[Sp - 8] = block_cgRHy_info;
           _sgNkg::F64 = F64[R1 + 7];
           D2 = _sgNkg::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgNkg::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRHt_info" {
     block_cgRHt_info:
         const _cgRHt;
         const 65;
         const 4294967326;
         const SgNTw_srt+1064;
 },
 _cgRHy() //  [D1]
         { []
         }
     {offset
       cgRHy: // global
           _sgNke::F64 = F64[Sp + 16];
           _sgNkg::F64 = F64[Sp + 8];
           _cgRHD::F64 = D1;
           (_cgRHC::F64) = call MO_F64_Log(_cgRHD::F64);
           I64[Sp + 8] = block_cgRHG_info;
           D2 = _sgNkg::F64;
           D1 = _sgNke::F64;
           F64[Sp + 16] = _cgRHC::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRHy_info" {
     block_cgRHy_info:
         const _cgRHy;
         const 194;
         const 30;
 },
 _cgRHG() //  [D1]
         { []
         }
     {offset
       cgRHG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgRIc; else goto cgRIb;
       cgRIc: // global
           HpAlloc = 32;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgRIb: // global
           I64[Hp - 24] = GHC.Types.D#_con_info;
           _sgNki::F64 = F64[Sp + 8];
           F64[Hp - 16] = %MO_F_Add_W64(%MO_F_Mul_W64(D1, 0.5 :: W64),
                                        %MO_F_Mul_W64(_sgNki::F64, 0.0 :: W64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Sub_W64(%MO_F_Mul_W64(_sgNki::F64, 0.5 :: W64),
                                   %MO_F_Mul_W64(D1, 0.0 :: W64));
           R2 = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRHG_info" {
     block_cgRHG_info:
         const _cgRHG;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.590757767 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$catanh_closure" {
     Data.Complex.$fFloatingComplex_$s$catanh_closure:
         const Data.Complex.$fFloatingComplex_$s$catanh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$catanh_entry() //  [R2]
         { []
         }
     {offset
       cgRJb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRJr; else goto cgRJs;
       cgRJr: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$catanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgRJs: // global
           I64[Sp - 8] = block_cgRJ8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRJA; else goto cgRJ9;
       ugRJA: // global
           call _cgRJ8(R1) args: 0, res: 0, upd: 0;
       cgRJ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$catanh_info" {
     Data.Complex.$fFloatingComplex_$s$catanh_info:
         const Data.Complex.$fFloatingComplex_$s$catanh_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgNTw_srt+1056;
 },
 _cgRJ8() //  [R1]
         { []
         }
     {offset
       cgRJ8: // global
           I64[Sp - 8] = block_cgRJe_info;
           _sgNkv::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNkv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRJz; else goto cgRJf;
       ugRJz: // global
           call _cgRJe(R1) args: 0, res: 0, upd: 0;
       cgRJf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRJ8_info" {
     block_cgRJ8_info:
         const _cgRJ8;
         const 0;
         const 4294967326;
         const SgNTw_srt+1056;
 },
 _cgRJe() //  [R1]
         { []
         }
     {offset
       cgRJe: // global
           I64[Sp] = block_cgRJj_info;
           _sgNkx::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNkx::F64;
           if (R1 & 7 != 0) goto ugRJB; else goto cgRJk;
       ugRJB: // global
           call _cgRJj(R1) args: 0, res: 0, upd: 0;
       cgRJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRJe_info" {
     block_cgRJe_info:
         const _cgRJe;
         const 1;
         const 4294967326;
         const SgNTw_srt+1056;
 },
 _cgRJj() //  [R1]
         { []
         }
     {offset
       cgRJj: // global
           _sgNkx::F64 = F64[Sp + 8];
           I64[Sp + 8] = block_cgRJo_info;
           D2 = F64[R1 + 7];
           D1 = _sgNkx::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$s$catanh_entry(D2,
                                               D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRJj_info" {
     block_cgRJj_info:
         const _cgRJj;
         const 65;
         const 4294967326;
         const SgNTw_srt+1056;
 },
 _cgRJo() //  [R1, R2]
         { []
         }
     {offset
       cgRJo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRJy; else goto cgRJx;
       cgRJy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRJx: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRJo_info" {
     block_cgRJo_info:
         const _cgRJo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.600907627 UTC

[section ""data" . Data.Complex.$fFloatingComplex20_closure" {
     Data.Complex.$fFloatingComplex20_closure:
         const GHC.Real.:%_con_info;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$fFloatingComplex21_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.602579431 UTC

[section ""data" . Data.Complex.$fFloatingComplex18_closure" {
     Data.Complex.$fFloatingComplex18_closure:
         const GHC.Real.:%_con_info;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$fFloatingComplex19_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.607892397 UTC

[section ""data" . Data.Complex.$w$catanh_closure" {
     Data.Complex.$w$catanh_closure:
         const Data.Complex.$w$catanh_info;
         const 0;
 },
 sat_sgNkW_entry() //  [R1]
         { []
         }
     {offset
       cgRKm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRKn; else goto cgRKo;
       cgRKn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRKo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$wmagnitude_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNkW_info" {
     sat_sgNkW_info:
         const sat_sgNkW_entry;
         const 3;
         const 15;
 },
 section ""relreadonly" . ugRKK_srtd" {
     ugRKK_srtd:
         const SgNTw_srt+480;
         const 79;
         const 18014398509481985;
         const 28672;
 },
 Data.Complex.$w$catanh_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgRKr: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgRKx; else goto cgRKy;
       cgRKx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$catanh_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRKy: // global
           I64[Sp - 32] = block_cgRK8_info;
           _sgNkE::P64 = R3;
           R3 = Data.Complex.$fFloatingComplex20_closure+1;
           _sgNkD::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgNkD::P64;
           P64[Sp - 16] = _sgNkE::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Complex.$w$cfromRational_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$catanh_info" {
     Data.Complex.$w$catanh_info:
         const Data.Complex.$w$catanh_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugRKK_srtd;
 },
 section ""relreadonly" . ugRKL_srtd" {
     ugRKL_srtd:
         const SgNTw_srt+480;
         const 78;
         const 18014398509481985;
         const 8192;
 },
 _cgRK8() //  [R1, R2]
         { []
         }
     {offset
       cgRK8: // global
           I64[Sp - 16] = block_cgRKa_info;
           R3 = Data.Complex.$fFloatingComplex18_closure+1;
           _sgNkI::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNkI::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$cfromRational_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRK8_info" {
     block_cgRK8_info:
         const _cgRK8;
         const 3;
         const 18446744069414584350;
         const ugRKL_srtd;
 },
 _cgRKa() //  [R1, R2]
         { []
         }
     {offset
       cgRKa: // global
           I64[Sp - 16] = block_cgRKc_info;
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = R2;
           R3 = R1;
           _sgNkL::P64 = R2;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _sgNkL::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRKa_info" {
     block_cgRKa_info:
         const _cgRKa;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRKc() //  [R1, R2]
         { []
         }
     {offset
       cgRKc: // global
           _sgNkK::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgRKe_info;
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 8];
           R3 = _sgNkK::P64;
           _sgNkO::P64 = R2;
           R2 = P64[Sp + 40];
           P64[Sp + 48] = _sgNkO::P64;
           P64[Sp + 56] = R1;
           Sp = Sp + 16;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRKc_info" {
     block_cgRKc_info:
         const _cgRKc;
         const 7;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRKe() //  [R1, R2]
         { []
         }
     {offset
       cgRKe: // global
           I64[Sp] = block_cgRKg_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 24];
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRKe_info" {
     block_cgRKe_info:
         const _cgRKe;
         const 5;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRKg() //  [R1, R2]
         { []
         }
     {offset
       cgRKg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgRKF; else goto cgRKE;
       cgRKF: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRKE: // global
           I64[Hp - 32] = sat_sgNkW_info;
           _sgNkD::P64 = P64[Sp + 24];
           P64[Hp - 16] = _sgNkD::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp - 8] = block_cgRKp_info;
           _sgNkU::P64 = R2;
           R2 = _sgNkD::P64;
           P64[Sp] = _sgNkU::P64;
           P64[Sp + 32] = R1;
           P64[Sp + 40] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRKg_info" {
     block_cgRKg_info:
         const _cgRKg;
         const 1541;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRKp() //  [R1]
         { []
         }
     {offset
       cgRKp: // global
           I64[Sp] = block_cgRKu_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRKp_info" {
     block_cgRKp_info:
         const _cgRKp;
         const 6;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRKu() //  [R1]
         { []
         }
     {offset
       cgRKu: // global
           _sgNkU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRKw_info;
           R4 = _sgNkU::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 48] = R1;
           Sp = Sp + 8;
           call Data.Complex.$wphase_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRKu_info" {
     block_cgRKu_info:
         const _cgRKu;
         const 2054;
         const 4294967326;
         const SgNTw_srt+912;
 },
 _cgRKw() //  [R1]
         { []
         }
     {offset
       cgRKw: // global
           R6 = R1;
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 48;
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRKw_info" {
     block_cgRKw_info:
         const _cgRKw;
         const 517;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.628194891 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$catanh_closure" {
     Data.Complex.$fFloatingComplex_$catanh_closure:
         const Data.Complex.$fFloatingComplex_$catanh_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$catanh_entry() //  [R2, R3]
         { []
         }
     {offset
       cgRLF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRLL; else goto cgRLM;
       cgRLL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$catanh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRLM: // global
           I64[Sp - 16] = block_cgRLC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugRLR; else goto cgRLD;
       ugRLR: // global
           call _cgRLC(R1) args: 0, res: 0, upd: 0;
       cgRLD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$catanh_info" {
     Data.Complex.$fFloatingComplex_$catanh_info:
         const Data.Complex.$fFloatingComplex_$catanh_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgNTw_srt+1088;
 },
 _cgRLC() //  [R1]
         { []
         }
     {offset
       cgRLC: // global
           _sgNkZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgRLI_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _sgNkZ::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$catanh_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRLC_info" {
     block_cgRLC_info:
         const _cgRLC;
         const 1;
         const 4294967326;
         const SgNTw_srt+1088;
 },
 _cgRLI() //  [R1, R2]
         { []
         }
     {offset
       cgRLI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgRLQ; else goto cgRLP;
       cgRLQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgRLP: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRLI_info" {
     block_cgRLI_info:
         const _cgRLI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.636286108 UTC

[section ""data" . Data.Complex.$fFloatingComplex_nan_closure" {
     Data.Complex.$fFloatingComplex_nan_closure:
         const Data.Complex.$fFloatingComplex_nan_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_nan_entry() //  [R1]
         { []
         }
     {offset
       cgRMg: // global
           _rgA2Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgRMj; else goto cgRMk;
       cgRMk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgRMm; else goto cgRMl;
       cgRMm: // global
           HpAlloc = 16;
           goto cgRMj;
       cgRMj: // global
           R1 = _rgA2Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRMl: // global
           (_cgRMb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA2Z::P64);
           if (_cgRMb::I64 == 0) goto cgRMd; else goto cgRMc;
       cgRMd: // global
           call (I64[I64[_rgA2Z::P64]])() args: 8, res: 0, upd: 8;
       cgRMc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRMb::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(0.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_nan_info" {
     Data.Complex.$fFloatingComplex_nan_info:
         const Data.Complex.$fFloatingComplex_nan_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.64081668 UTC

[section ""data" . Data.Complex.$fFloatingComplex_inf_closure" {
     Data.Complex.$fFloatingComplex_inf_closure:
         const Data.Complex.$fFloatingComplex_inf_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_inf_entry() //  [R1]
         { []
         }
     {offset
       cgRMI: // global
           _rgA32::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgRML; else goto cgRMM;
       cgRMM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgRMO; else goto cgRMN;
       cgRMO: // global
           HpAlloc = 16;
           goto cgRML;
       cgRML: // global
           R1 = _rgA32::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRMN: // global
           (_cgRMD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA32::P64);
           if (_cgRMD::I64 == 0) goto cgRMF; else goto cgRME;
       cgRMF: // global
           call (I64[I64[_rgA32::P64]])() args: 8, res: 0, upd: 8;
       cgRME: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRMD::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_inf_info" {
     Data.Complex.$fFloatingComplex_inf_info:
         const Data.Complex.$fFloatingComplex_inf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.644607713 UTC

[section ""data" . Data.Complex.$fFloatingComplex6_closure" {
     Data.Complex.$fFloatingComplex6_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_nan_closure;
         const Data.Complex.$fFloatingComplex_nan_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.647367946 UTC

[section ""data" . Data.Complex.$fFloatingComplex5_closure" {
     Data.Complex.$fFloatingComplex5_closure:
         const Data.Complex.$fFloatingComplex5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex5_entry() //  [R1]
         { []
         }
     {offset
       cgRNd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRNe; else goto cgRNf;
       cgRNe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRNf: // global
           (_cgRN7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgRN7::I64 == 0) goto cgRN9; else goto cgRN8;
       cgRN9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgRN8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRN7::I64;
           I64[Sp - 24] = block_cgRNa_info;
           R1 = Data.Complex.$fFloatingComplex_nan_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugRNj; else goto cgRNb;
       ugRNj: // global
           call _cgRNa() args: 0, res: 0, upd: 0;
       cgRNb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex5_info" {
     Data.Complex.$fFloatingComplex5_info:
         const Data.Complex.$fFloatingComplex5_entry;
         const 0;
         const 12884901909;
         const SgNTw_srt+1120;
 },
 _cgRNa() //  []
         { []
         }
     {offset
       cgRNa: // global
           R1 = Data.Complex.$fFloatingComplex6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgRNa_info" {
     block_cgRNa_info:
         const _cgRNa;
         const 0;
         const 4294967326;
         const SgNTw_srt+1120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.652409441 UTC

[section ""data" . Data.Complex.$fFloatingComplex8_closure" {
     Data.Complex.$fFloatingComplex8_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_inf_closure;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.655125267 UTC

[section ""data" . Data.Complex.$fFloatingComplex7_closure" {
     Data.Complex.$fFloatingComplex7_closure:
         const Data.Complex.$fFloatingComplex7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex7_entry() //  [R1]
         { []
         }
     {offset
       cgRNI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRNJ; else goto cgRNK;
       cgRNJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRNK: // global
           (_cgRNC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgRNC::I64 == 0) goto cgRNE; else goto cgRND;
       cgRNE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgRND: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRNC::I64;
           I64[Sp - 24] = block_cgRNF_info;
           R1 = Data.Complex.$fFloatingComplex_inf_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugRNO; else goto cgRNG;
       ugRNO: // global
           call _cgRNF() args: 0, res: 0, upd: 0;
       cgRNG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex7_info" {
     Data.Complex.$fFloatingComplex7_info:
         const Data.Complex.$fFloatingComplex7_entry;
         const 0;
         const 12884901909;
         const SgNTw_srt+1136;
 },
 _cgRNF() //  []
         { []
         }
     {offset
       cgRNF: // global
           R1 = Data.Complex.$fFloatingComplex8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgRNF_info" {
     block_cgRNF_info:
         const _cgRNF;
         const 0;
         const 4294967326;
         const SgNTw_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.660436492 UTC

[section ""data" . Data.Complex.$fFloatingComplex3_closure" {
     Data.Complex.$fFloatingComplex3_closure:
         const GHC.Types.D#_con_info;
         const 1.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.662185351 UTC

[section ""data" . Data.Complex.$fFloatingComplex2_closure" {
     Data.Complex.$fFloatingComplex2_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex3_closure+1;
         const Data.Complex.$fFloatingComplex1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.668805671 UTC

[section ""data" . Data.Complex.$w$s$c**_closure" {
     Data.Complex.$w$s$c**_closure:
         const Data.Complex.$w$s$c**_info;
         const 0;
 },
 Data.Complex.$w$s$c**_slow() //  [R1]
         { []
         }
     {offset
       cgRO6: // global
           D2 = F64[Sp + 16];
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**_entry(D2,
                                            D1,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c**_entry() //  [R2, D1, D2]
         { []
         }
     {offset
       cgROh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgROi; else goto cgROj;
       cgROi: // global
           R1 = Data.Complex.$w$s$c**_closure;
           P64[Sp - 24] = R2;
           F64[Sp - 16] = D1;
           F64[Sp - 8] = D2;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       cgROj: // global
           _sgNlf::F64 = D2;
           _sgNle::F64 = D1;
           _sgNld::P64 = R2;
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto cgROg; else goto sgNlg;
       cgROg: // global
           if (%MO_F_Eq_W64(_sgNlf::F64,
                            0.0 :: W64)) goto cgRQM; else goto sgNlg;
       cgRQM: // global
           R1 = Data.Complex.$fFloatingComplex2_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       sgNlg: // global
           I64[Sp - 24] = block_cgROn_info;
           R1 = _sgNld::P64;
           F64[Sp - 16] = _sgNle::F64;
           F64[Sp - 8] = _sgNlf::F64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugRQN; else goto cgROo;
       ugRQN: // global
           call _cgROn(R1) args: 0, res: 0, upd: 0;
       cgROo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c**_info" {
     Data.Complex.$w$s$c**_info:
         const Data.Complex.$w$s$c**_entry;
         const 0;
         const 61576946122766;
         const 12884901888;
         const SgNTw_srt+1064;
         const 387;
         const Data.Complex.$w$s$c**_slow;
 },
 _cgROn() //  [R1]
         { []
         }
     {offset
       cgROn: // global
           I64[Sp - 8] = block_cgROs_info;
           _sgNlj::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgNlj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRQO; else goto cgROt;
       ugRQO: // global
           call _cgROs(R1) args: 0, res: 0, upd: 0;
       cgROt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgROn_info" {
     block_cgROn_info:
         const _cgROn;
         const 194;
         const 52780853100574;
         const SgNTw_srt+1064;
 },
 _cgROs() //  [R1]
         { []
         }
     {offset
       cgROs: // global
           I64[Sp] = block_cgROx_info;
           _sgNlm::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNlm::F64;
           if (R1 & 7 != 0) goto ugRQP; else goto cgROB;
       ugRQP: // global
           call _cgROx(R1) args: 0, res: 0, upd: 0;
       cgROB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgROs_info" {
     block_cgROs_info:
         const _cgROs;
         const 387;
         const 52780853100574;
         const SgNTw_srt+1064;
 },
 _cgROx() //  [R1]
         { []
         }
     {offset
       cgROx: // global
           _sgNle::F64 = F64[Sp + 16];
           _sgNlm::F64 = F64[Sp + 8];
           _sgNlo::F64 = F64[R1 + 7];
           if (%MO_F_Eq_W64(_sgNlo::F64,
                            0.0 :: W64)) goto cgRQF; else goto sgNlp;
       cgRQF: // global
           if (%MO_F_Eq_W64(_sgNlm::F64,
                            0.0 :: W64)) goto cgRQE; else goto sgNlp;
       cgRQE: // global
           if (%MO_F_Lt_W64(_sgNle::F64,
                            0.0 :: W64)) goto cgRQD; else goto cgRQC;
       cgRQC: // global
           if (%MO_F_Eq_W64(_sgNle::F64,
                            0.0 :: W64)) goto cgRQA; else goto cgRQz;
       sgNlp: // global
           (_sgNlu::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(_sgNlo::F64);
           if (_sgNlu::I64 == 0) goto cgRQg; else goto cgRP2;
       cgRQg: // global
           (_sgNlB::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(_sgNlm::F64);
           if (_sgNlB::I64 == 0) goto cgRQb; else goto cgRPk;
       cgRQb: // global
           I64[Sp - 8] = block_cgRPm_info;
           D2 = _sgNlm::F64;
           D1 = _sgNlo::F64;
           F64[Sp] = _sgNlo::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
       cgRPk: // global
           if (%MO_F_Lt_W64(_sgNle::F64,
                            0.0 :: W64)) goto cgRQz; else goto cgRPh;
       cgRPh: // global
           if (%MO_F_Eq_W64(_sgNle::F64,
                            0.0 :: W64)) goto cgRQA; else goto cgRQD;
       cgRP2: // global
           if (%MO_F_Lt_W64(_sgNle::F64,
                            0.0 :: W64)) goto cgRQz; else goto cgROZ;
       cgRQz: // global
           R1 = Data.Complex.$fFloatingComplex4_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgROZ: // global
           if (%MO_F_Eq_W64(_sgNle::F64,
                            0.0 :: W64)) goto cgRQA; else goto cgRQD;
       cgRQA: // global
           R1 = Data.Complex.$fFloatingComplex5_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cgRQD: // global
           R1 = Data.Complex.$fFloatingComplex7_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgROx_info" {
     block_cgROx_info:
         const _cgROx;
         const 451;
         const 52780853100574;
         const SgNTw_srt+1064;
 },
 _cgRPm() //  [D1]
         { []
         }
     {offset
       cgRPm: // global
           _sgNlm::F64 = F64[Sp + 16];
           _sgNlo::F64 = F64[Sp + 8];
           _cgRPr::F64 = D1;
           (_cgRPq::F64) = call MO_F64_Log(_cgRPr::F64);
           I64[Sp + 8] = block_cgRPu_info;
           D2 = _sgNlm::F64;
           D1 = _sgNlo::F64;
           F64[Sp + 16] = _cgRPq::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRPm_info" {
     block_cgRPm_info:
         const _cgRPm;
         const 964;
         const 30;
 },
 _cgRPu() //  [D1]
         { []
         }
     {offset
       cgRPu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgRQf; else goto cgRQe;
       cgRQf: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgRQe: // global
           _sgNle::F64 = F64[Sp + 16];
           _sgNlf::F64 = F64[Sp + 24];
           _sgNlG::F64 = F64[Sp + 8];
           _sgNlI::F64 = %MO_F_Add_W64(%MO_F_Mul_W64(_sgNlG::F64,
                                                     _sgNlf::F64),
                                       %MO_F_Mul_W64(D1, _sgNle::F64));
           _cgRPR::F64 = %MO_F_Sub_W64(%MO_F_Mul_W64(_sgNlG::F64,
                                                     _sgNle::F64),
                                       %MO_F_Mul_W64(D1, _sgNlf::F64));
           (_cgRPQ::F64) = call MO_F64_Exp(_cgRPR::F64);
           (_cgRPU::F64) = call MO_F64_Sin(_sgNlI::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgRPQ::F64, _cgRPU::F64);
           (_cgRQ2::F64) = call MO_F64_Cos(_sgNlI::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Mul_W64(_cgRPQ::F64, _cgRQ2::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRPu_info" {
     block_cgRPu_info:
         const _cgRPu;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.685224032 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c**_closure" {
     Data.Complex.$fFloatingComplex_$s$c**_closure:
         const Data.Complex.$fFloatingComplex_$s$c**_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c**_entry() //  [R2, R3]
         { []
         }
     {offset
       cgRS7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRSg; else goto cgRSh;
       cgRSg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c**_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRSh: // global
           I64[Sp - 16] = block_cgRS4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugRSq; else goto cgRS5;
       ugRSq: // global
           call _cgRS4(R1) args: 0, res: 0, upd: 0;
       cgRS5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c**_info" {
     Data.Complex.$fFloatingComplex_$s$c**_info:
         const Data.Complex.$fFloatingComplex_$s$c**_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgNTw_srt+1152;
 },
 _cgRS4() //  [R1]
         { []
         }
     {offset
       cgRS4: // global
           I64[Sp - 8] = block_cgRSa_info;
           _sgNm5::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNm5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRSp; else goto cgRSb;
       ugRSp: // global
           call _cgRSa(R1) args: 0, res: 0, upd: 0;
       cgRSb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRS4_info" {
     block_cgRS4_info:
         const _cgRS4;
         const 1;
         const 4294967326;
         const SgNTw_srt+1152;
 },
 _cgRSa() //  [R1]
         { []
         }
     {offset
       cgRSa: // global
           I64[Sp] = block_cgRSf_info;
           _sgNm7::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNm7::F64;
           if (R1 & 7 != 0) goto ugRSr; else goto cgRSk;
       ugRSr: // global
           call _cgRSf(R1) args: 0, res: 0, upd: 0;
       cgRSk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRSa_info" {
     block_cgRSa_info:
         const _cgRSa;
         const 2;
         const 4294967326;
         const SgNTw_srt+1152;
 },
 _cgRSf() //  [R1]
         { []
         }
     {offset
       cgRSf: // global
           D2 = F64[R1 + 7];
           D1 = F64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**_entry(D2,
                                            D1,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRSf_info" {
     block_cgRSf_info:
         const _cgRSf;
         const 66;
         const 4294967326;
         const SgNTw_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.694520316 UTC

[section ""data" . Data.Complex.$fFloatingComplex_nan1_closure" {
     Data.Complex.$fFloatingComplex_nan1_closure:
         const Data.Complex.$fFloatingComplex_nan1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_nan1_entry() //  [R1]
         { []
         }
     {offset
       cgRSU: // global
           _rgA3V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgRSX; else goto cgRSY;
       cgRSY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgRT0; else goto cgRSZ;
       cgRT0: // global
           HpAlloc = 16;
           goto cgRSX;
       cgRSX: // global
           R1 = _rgA3V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRSZ: // global
           (_cgRSP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA3V::P64);
           if (_cgRSP::I64 == 0) goto cgRSR; else goto cgRSQ;
       cgRSR: // global
           call (I64[I64[_rgA3V::P64]])() args: 8, res: 0, upd: 8;
       cgRSQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRSP::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(0.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_nan1_info" {
     Data.Complex.$fFloatingComplex_nan1_info:
         const Data.Complex.$fFloatingComplex_nan1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.699411475 UTC

[section ""data" . Data.Complex.$fFloatingComplex_inf1_closure" {
     Data.Complex.$fFloatingComplex_inf1_closure:
         const Data.Complex.$fFloatingComplex_inf1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex_inf1_entry() //  [R1]
         { []
         }
     {offset
       cgRTm: // global
           _rgA3Y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgRTp; else goto cgRTq;
       cgRTq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgRTs; else goto cgRTr;
       cgRTs: // global
           HpAlloc = 16;
           goto cgRTp;
       cgRTp: // global
           R1 = _rgA3Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRTr: // global
           (_cgRTh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgA3Y::P64);
           if (_cgRTh::I64 == 0) goto cgRTj; else goto cgRTi;
       cgRTj: // global
           call (I64[I64[_rgA3Y::P64]])() args: 8, res: 0, upd: 8;
       cgRTi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRTh::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_inf1_info" {
     Data.Complex.$fFloatingComplex_inf1_info:
         const Data.Complex.$fFloatingComplex_inf1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.703244995 UTC

[section ""data" . Data.Complex.$fFloatingComplex14_closure" {
     Data.Complex.$fFloatingComplex14_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_nan1_closure;
         const Data.Complex.$fFloatingComplex_nan1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.706095701 UTC

[section ""data" . Data.Complex.$fFloatingComplex13_closure" {
     Data.Complex.$fFloatingComplex13_closure:
         const Data.Complex.$fFloatingComplex13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex13_entry() //  [R1]
         { []
         }
     {offset
       cgRTR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRTS; else goto cgRTT;
       cgRTS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRTT: // global
           (_cgRTL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgRTL::I64 == 0) goto cgRTN; else goto cgRTM;
       cgRTN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgRTM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRTL::I64;
           I64[Sp - 24] = block_cgRTO_info;
           R1 = Data.Complex.$fFloatingComplex_nan1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugRTX; else goto cgRTP;
       ugRTX: // global
           call _cgRTO() args: 0, res: 0, upd: 0;
       cgRTP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex13_info" {
     Data.Complex.$fFloatingComplex13_info:
         const Data.Complex.$fFloatingComplex13_entry;
         const 0;
         const 12884901909;
         const SgNTw_srt+1184;
 },
 _cgRTO() //  []
         { []
         }
     {offset
       cgRTO: // global
           R1 = Data.Complex.$fFloatingComplex14_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgRTO_info" {
     block_cgRTO_info:
         const _cgRTO;
         const 0;
         const 4294967326;
         const SgNTw_srt+1184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.712099853 UTC

[section ""data" . Data.Complex.$fFloatingComplex16_closure" {
     Data.Complex.$fFloatingComplex16_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex_inf1_closure;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.714802912 UTC

[section ""data" . Data.Complex.$fFloatingComplex15_closure" {
     Data.Complex.$fFloatingComplex15_closure:
         const Data.Complex.$fFloatingComplex15_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Complex.$fFloatingComplex15_entry() //  [R1]
         { []
         }
     {offset
       cgRUm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRUn; else goto cgRUo;
       cgRUn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRUo: // global
           (_cgRUg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgRUg::I64 == 0) goto cgRUi; else goto cgRUh;
       cgRUi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgRUh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgRUg::I64;
           I64[Sp - 24] = block_cgRUj_info;
           R1 = Data.Complex.$fFloatingComplex_inf1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugRUs; else goto cgRUk;
       ugRUs: // global
           call _cgRUj() args: 0, res: 0, upd: 0;
       cgRUk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex15_info" {
     Data.Complex.$fFloatingComplex15_info:
         const Data.Complex.$fFloatingComplex15_entry;
         const 0;
         const 12884901909;
         const SgNTw_srt+1200;
 },
 _cgRUj() //  []
         { []
         }
     {offset
       cgRUj: // global
           R1 = Data.Complex.$fFloatingComplex16_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgRUj_info" {
     block_cgRUj_info:
         const _cgRUj;
         const 0;
         const 4294967326;
         const SgNTw_srt+1200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.720612005 UTC

[section ""data" . Data.Complex.$fFloatingComplex11_closure" {
     Data.Complex.$fFloatingComplex11_closure:
         const GHC.Types.F#_con_info;
         const 1.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.723369984 UTC

[section ""data" . Data.Complex.$fFloatingComplex10_closure" {
     Data.Complex.$fFloatingComplex10_closure:
         const Data.Complex.:+_con_info;
         const Data.Complex.$fFloatingComplex11_closure+1;
         const Data.Complex.$fFloatingComplex9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.730168701 UTC

[section ""data" . Data.Complex.$w$s$c**1_closure" {
     Data.Complex.$w$s$c**1_closure:
         const Data.Complex.$w$s$c**1_info;
         const 0;
 },
 Data.Complex.$w$s$c**1_slow() //  [R1]
         { []
         }
     {offset
       cgRUK: // global
           F2 = F32[Sp + 16];
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**1_entry(F2,
                                             F1,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Complex.$w$s$c**1_entry() //  [R2, F1, F2]
         { []
         }
     {offset
       cgRUV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgRUW; else goto cgRUX;
       cgRUW: // global
           R1 = Data.Complex.$w$s$c**1_closure;
           P64[Sp - 24] = R2;
           F32[Sp - 16] = F1;
           F32[Sp - 8] = F2;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       cgRUX: // global
           _sgNmi::F32 = F2;
           _sgNmh::F32 = F1;
           _sgNmg::P64 = R2;
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto cgRUU; else goto sgNmj;
       cgRUU: // global
           if (%MO_F_Eq_W32(_sgNmi::F32,
                            0.0 :: W32)) goto cgRXq; else goto sgNmj;
       cgRXq: // global
           R1 = Data.Complex.$fFloatingComplex10_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       sgNmj: // global
           I64[Sp - 24] = block_cgRV1_info;
           R1 = _sgNmg::P64;
           F32[Sp - 16] = _sgNmh::F32;
           F32[Sp - 8] = _sgNmi::F32;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugRXr; else goto cgRV2;
       ugRXr: // global
           call _cgRV1(R1) args: 0, res: 0, upd: 0;
       cgRV2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$s$c**1_info" {
     Data.Complex.$w$s$c**1_info:
         const Data.Complex.$w$s$c**1_entry;
         const 0;
         const 252201583427715086;
         const 12884901888;
         const SgNTw_srt+1032;
         const 387;
         const Data.Complex.$w$s$c**1_slow;
 },
 _cgRV1() //  [R1]
         { []
         }
     {offset
       cgRV1: // global
           I64[Sp - 8] = block_cgRV6_info;
           _sgNmm::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgNmm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRXs; else goto cgRV7;
       ugRXs: // global
           call _cgRV6(R1) args: 0, res: 0, upd: 0;
       cgRV7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRV1_info" {
     block_cgRV1_info:
         const _cgRV1;
         const 194;
         const 216172786408751134;
         const SgNTw_srt+1032;
 },
 _cgRV6() //  [R1]
         { []
         }
     {offset
       cgRV6: // global
           I64[Sp] = block_cgRVb_info;
           _sgNmp::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNmp::F32;
           if (R1 & 7 != 0) goto ugRXt; else goto cgRVf;
       ugRXt: // global
           call _cgRVb(R1) args: 0, res: 0, upd: 0;
       cgRVf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRV6_info" {
     block_cgRV6_info:
         const _cgRV6;
         const 387;
         const 216172786408751134;
         const SgNTw_srt+1032;
 },
 _cgRVb() //  [R1]
         { []
         }
     {offset
       cgRVb: // global
           _sgNmh::F32 = F32[Sp + 16];
           _sgNmp::F32 = F32[Sp + 8];
           _sgNmr::F32 = F32[R1 + 7];
           if (%MO_F_Eq_W32(_sgNmr::F32,
                            0.0 :: W32)) goto cgRXj; else goto sgNms;
       cgRXj: // global
           if (%MO_F_Eq_W32(_sgNmp::F32,
                            0.0 :: W32)) goto cgRXi; else goto sgNms;
       cgRXi: // global
           if (%MO_F_Lt_W32(_sgNmh::F32,
                            0.0 :: W32)) goto cgRXh; else goto cgRXg;
       cgRXg: // global
           if (%MO_F_Eq_W32(_sgNmh::F32,
                            0.0 :: W32)) goto cgRXe; else goto cgRXd;
       sgNms: // global
           (_sgNmx::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(_sgNmr::F32);
           if (_sgNmx::I64 == 0) goto cgRWU; else goto cgRVG;
       cgRWU: // global
           (_sgNmE::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(_sgNmp::F32);
           if (_sgNmE::I64 == 0) goto cgRWP; else goto cgRVY;
       cgRWP: // global
           I64[Sp - 8] = block_cgRW0_info;
           F2 = _sgNmp::F32;
           F1 = _sgNmr::F32;
           F32[Sp] = _sgNmr::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
       cgRVY: // global
           if (%MO_F_Lt_W32(_sgNmh::F32,
                            0.0 :: W32)) goto cgRXd; else goto cgRVV;
       cgRVV: // global
           if (%MO_F_Eq_W32(_sgNmh::F32,
                            0.0 :: W32)) goto cgRXe; else goto cgRXh;
       cgRVG: // global
           if (%MO_F_Lt_W32(_sgNmh::F32,
                            0.0 :: W32)) goto cgRXd; else goto cgRVD;
       cgRXd: // global
           R1 = Data.Complex.$fFloatingComplex12_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgRVD: // global
           if (%MO_F_Eq_W32(_sgNmh::F32,
                            0.0 :: W32)) goto cgRXe; else goto cgRXh;
       cgRXe: // global
           R1 = Data.Complex.$fFloatingComplex13_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cgRXh: // global
           R1 = Data.Complex.$fFloatingComplex15_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRVb_info" {
     block_cgRVb_info:
         const _cgRVb;
         const 451;
         const 216172786408751134;
         const SgNTw_srt+1032;
 },
 _cgRW0() //  [F1]
         { []
         }
     {offset
       cgRW0: // global
           _sgNmp::F32 = F32[Sp + 16];
           _sgNmr::F32 = F32[Sp + 8];
           _cgRW5::F32 = F1;
           (_cgRW4::F32) = call MO_F32_Log(_cgRW5::F32);
           I64[Sp + 8] = block_cgRW8_info;
           F2 = _sgNmp::F32;
           F1 = _sgNmr::F32;
           F32[Sp + 16] = _cgRW4::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRW0_info" {
     block_cgRW0_info:
         const _cgRW0;
         const 964;
         const 30;
 },
 _cgRW8() //  [F1]
         { []
         }
     {offset
       cgRW8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgRWT; else goto cgRWS;
       cgRWT: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgRWS: // global
           _sgNmh::F32 = F32[Sp + 16];
           _sgNmi::F32 = F32[Sp + 24];
           _sgNmJ::F32 = F32[Sp + 8];
           _sgNmL::F32 = %MO_F_Add_W32(%MO_F_Mul_W32(_sgNmJ::F32,
                                                     _sgNmi::F32),
                                       %MO_F_Mul_W32(F1, _sgNmh::F32));
           _cgRWv::F32 = %MO_F_Sub_W32(%MO_F_Mul_W32(_sgNmJ::F32,
                                                     _sgNmh::F32),
                                       %MO_F_Mul_W32(F1, _sgNmi::F32));
           (_cgRWu::F32) = call MO_F32_Exp(_cgRWv::F32);
           (_cgRWy::F32) = call MO_F32_Sin(_sgNmL::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgRWu::F32, _cgRWy::F32);
           (_cgRWG::F32) = call MO_F32_Cos(_sgNmL::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Mul_W32(_cgRWu::F32, _cgRWG::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRW8_info" {
     block_cgRW8_info:
         const _cgRW8;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.746638741 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$c**1_closure" {
     Data.Complex.$fFloatingComplex_$s$c**1_closure:
         const Data.Complex.$fFloatingComplex_$s$c**1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$c**1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgRYL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgRYU; else goto cgRYV;
       cgRYU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$c**1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgRYV: // global
           I64[Sp - 16] = block_cgRYI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugRZ4; else goto cgRYJ;
       ugRZ4: // global
           call _cgRYI(R1) args: 0, res: 0, upd: 0;
       cgRYJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$c**1_info" {
     Data.Complex.$fFloatingComplex_$s$c**1_info:
         const Data.Complex.$fFloatingComplex_$s$c**1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SgNTw_srt+1216;
 },
 _cgRYI() //  [R1]
         { []
         }
     {offset
       cgRYI: // global
           I64[Sp - 8] = block_cgRYO_info;
           _sgNn8::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNn8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugRZ3; else goto cgRYP;
       ugRZ3: // global
           call _cgRYO(R1) args: 0, res: 0, upd: 0;
       cgRYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRYI_info" {
     block_cgRYI_info:
         const _cgRYI;
         const 1;
         const 4294967326;
         const SgNTw_srt+1216;
 },
 _cgRYO() //  [R1]
         { []
         }
     {offset
       cgRYO: // global
           I64[Sp] = block_cgRYT_info;
           _sgNna::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNna::F32;
           if (R1 & 7 != 0) goto ugRZ5; else goto cgRYY;
       ugRZ5: // global
           call _cgRYT(R1) args: 0, res: 0, upd: 0;
       cgRYY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRYO_info" {
     block_cgRYO_info:
         const _cgRYO;
         const 2;
         const 4294967326;
         const SgNTw_srt+1216;
 },
 _cgRYT() //  [R1]
         { []
         }
     {offset
       cgRYT: // global
           F2 = F32[R1 + 7];
           F1 = F32[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c**1_entry(F2,
                                             F1,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRYT_info" {
     block_cgRYT_info:
         const _cgRYT;
         const 66;
         const 4294967326;
         const SgNTw_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.77130255 UTC

[section ""data" . Data.Complex.$w$c**_closure" {
     Data.Complex.$w$c**_closure:
         const Data.Complex.$w$c**_info;
         const 0;
 },
 $dNum_sgNnl_entry() //  [R1]
         { []
         }
     {offset
       cgRZO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgRZP; else goto cgRZQ;
       cgRZP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRZQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgNnl_info" {
     $dNum_sgNnl_info:
         const $dNum_sgNnl_entry;
         const 1;
         const 16;
 },
 sat_sgNnZ_entry() //  [R1]
         { []
         }
     {offset
       cgRZV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgRZW; else goto cgRZX;
       cgRZW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgRZX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnZ_info" {
     sat_sgNnZ_info:
         const sat_sgNnZ_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 $dFractional_sgNnr_entry() //  [R1]
         { []
         }
     {offset
       cgS0c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgS0d; else goto cgS0e;
       cgS0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgNnr_info" {
     $dFractional_sgNnr_info:
         const $dFractional_sgNnr_entry;
         const 1;
         const 16;
 },
 sat_sgNnu_entry() //  [R1]
         { []
         }
     {offset
       cgS0n: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS0o; else goto cgS0p;
       cgS0o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS0p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnu_info" {
     sat_sgNnu_info:
         const sat_sgNnu_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 sat_sgNnt_entry() //  [R1]
         { []
         }
     {offset
       cgS0u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS0v; else goto cgS0w;
       cgS0v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS0w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnt_info" {
     sat_sgNnt_info:
         const sat_sgNnt_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 nan_sgNns_entry() //  [R1]
         { []
         }
     {offset
       cgS0x: // global
           _sgNns::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgS0y; else goto cgS0z;
       cgS0z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgS0B; else goto cgS0A;
       cgS0B: // global
           HpAlloc = 48;
           goto cgS0y;
       cgS0y: // global
           R1 = _sgNns::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS0A: // global
           _sgNnl::P64 = P64[_sgNns::P64 + 16];
           _sgNnr::P64 = P64[_sgNns::P64 + 24];
           I64[Hp - 40] = sat_sgNnu_info;
           P64[Hp - 24] = _sgNnl::P64;
           I64[Hp - 16] = sat_sgNnt_info;
           P64[Hp] = _sgNnl::P64;
           R2 = _sgNnr::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . nan_sgNns_info" {
     nan_sgNns_info:
         const nan_sgNns_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1248;
 },
 sat_sgNnx_entry() //  [R1]
         { []
         }
     {offset
       cgS0K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS0L; else goto cgS0M;
       cgS0L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS0M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnx_info" {
     sat_sgNnx_info:
         const sat_sgNnx_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 sat_sgNnw_entry() //  [R1]
         { []
         }
     {offset
       cgS0R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS0S; else goto cgS0T;
       cgS0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS0T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnw_info" {
     sat_sgNnw_info:
         const sat_sgNnw_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 inf_sgNnv_entry() //  [R1]
         { []
         }
     {offset
       cgS0U: // global
           _sgNnv::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgS0V; else goto cgS0W;
       cgS0W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgS0Y; else goto cgS0X;
       cgS0Y: // global
           HpAlloc = 48;
           goto cgS0V;
       cgS0V: // global
           R1 = _sgNnv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS0X: // global
           _sgNnl::P64 = P64[_sgNnv::P64 + 16];
           _sgNnr::P64 = P64[_sgNnv::P64 + 24];
           I64[Hp - 40] = sat_sgNnx_info;
           P64[Hp - 24] = _sgNnl::P64;
           I64[Hp - 16] = sat_sgNnw_info;
           P64[Hp] = _sgNnl::P64;
           R2 = _sgNnr::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . inf_sgNnv_info" {
     inf_sgNnv_info:
         const inf_sgNnv_entry;
         const 2;
         const 12884901906;
         const SgNTw_srt+1248;
 },
 sat_sgNnP_entry() //  [R1]
         { []
         }
     {offset
       cgS13: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS14; else goto cgS15;
       cgS14: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS15: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnP_info" {
     sat_sgNnP_info:
         const sat_sgNnP_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 sat_sgNnB_entry() //  [R1]
         { []
         }
     {offset
       cgS1k: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS1l; else goto cgS1m;
       cgS1l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS1m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnB_info" {
     sat_sgNnB_info:
         const sat_sgNnB_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 sat_sgNnR_entry() //  [R1]
         { []
         }
     {offset
       cgS1w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS1x; else goto cgS1y;
       cgS1x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS1y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnR_info" {
     sat_sgNnR_info:
         const sat_sgNnR_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 sat_sgNnT_entry() //  [R1]
         { []
         }
     {offset
       cgS1I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS1J; else goto cgS1K;
       cgS1J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS1K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNnT_info" {
     sat_sgNnT_info:
         const sat_sgNnT_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 sat_sgNo1_entry() //  [R1]
         { []
         }
     {offset
       cgS1U: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgS1V; else goto cgS1W;
       cgS1V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgS1W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNo1_info" {
     sat_sgNo1_info:
         const sat_sgNo1_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1248;
 },
 section ""relreadonly" . ugS4A_srtd" {
     ugS4A_srtd:
         const SgNTw_srt+800;
         const 59;
         const 504403158265495553;
 },
 Data.Complex.$w$c**_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgS1X: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cgS1Y; else goto cgS1Z;
       cgS1Y: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$w$c**_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgS1Z: // global
           I64[Sp - 40] = block_cgRZu_info;
           _sgNnd::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _sgNnd::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$w$c**_info" {
     Data.Complex.$w$c**_info:
         const Data.Complex.$w$c**_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const ugS4A_srtd;
 },
 section ""relreadonly" . ugS4B_srtd" {
     ugS4B_srtd:
         const SgNTw_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgRZu() //  [R1]
         { []
         }
     {offset
       cgRZu: // global
           I64[Sp - 8] = block_cgRZy_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRZu_info" {
     block_cgRZu_info:
         const _cgRZu;
         const 4;
         const 18446744069414584350;
         const ugS4B_srtd;
 },
 section ""relreadonly" . ugS4C_srtd" {
     ugS4C_srtd:
         const SgNTw_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgRZy() //  [R1]
         { []
         }
     {offset
       cgRZy: // global
           I64[Sp - 8] = block_cgRZC_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRZy_info" {
     block_cgRZy_info:
         const _cgRZy;
         const 5;
         const 18446744069414584350;
         const ugS4C_srtd;
 },
 section ""relreadonly" . ugS4D_srtd" {
     ugS4D_srtd:
         const SgNTw_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgRZC() //  [R1]
         { []
         }
     {offset
       cgRZC: // global
           I64[Sp - 8] = block_cgRZG_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRZC_info" {
     block_cgRZC_info:
         const _cgRZC;
         const 6;
         const 18446744069414584350;
         const ugS4D_srtd;
 },
 section ""relreadonly" . ugS4E_srtd" {
     ugS4E_srtd:
         const SgNTw_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgRZG() //  [R1]
         { []
         }
     {offset
       cgRZG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgS25; else goto cgS24;
       cgS25: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgS24: // global
           I64[Hp - 40] = $dNum_sgNnl_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_sgNnZ_info;
           _cgRZK::P64 = Hp - 40;
           P64[Hp] = _cgRZK::P64;
           I64[Sp - 8] = block_cgS1L_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 48];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgRZK::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgRZG_info" {
     block_cgRZG_info:
         const _cgRZG;
         const 7;
         const 18446744069414584350;
         const ugS4E_srtd;
 },
 section ""relreadonly" . ugS4F_srtd" {
     ugS4F_srtd:
         const SgNTw_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgS1L() //  [R1]
         { []
         }
     {offset
       cgS1L: // global
           if (R1 & 7 == 1) goto ugS4n; else goto cgS3T;
       ugS4n: // global
           Sp = Sp + 8;
           call _sgNnm() args: 0, res: 0, upd: 0;
       cgS3T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgS3W; else goto cgS3V;
       cgS3W: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgS3V: // global
           I64[Hp - 16] = sat_sgNo1_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cgS3S_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS1L_info" {
     block_cgS1L_info:
         const _cgS1L;
         const 8;
         const 18446744069414584350;
         const ugS4F_srtd;
 },
 section ""relreadonly" . ugS4G_srtd" {
     ugS4G_srtd:
         const SgNTw_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgS3S() //  [R1]
         { []
         }
     {offset
       cgS3S: // global
           if (R1 & 7 == 1) goto ugS4o; else goto cgS49;
       ugS4o: // global
           Sp = Sp + 8;
           call _sgNnm() args: 0, res: 0, upd: 0;
       cgS49: // global
           I64[Sp + 16] = block_cgS45_info;
           R2 = P64[Sp + 24];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Data.Complex.$fFloatingComplex19_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS3S_info" {
     block_cgS3S_info:
         const _cgS3S;
         const 8;
         const 18446744069414584350;
         const ugS4G_srtd;
 },
 _sgNnm() //  []
         { []
         }
     {offset
       sgNnm: // global
           I64[Sp - 8] = block_cgS03_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugS4z; else goto cgS04;
       ugS4z: // global
           call _cgS03(R1) args: 0, res: 0, upd: 0;
       cgS04: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ugS4H_srtd" {
     ugS4H_srtd:
         const SgNTw_srt+800;
         const 58;
         const 216172782113783809;
 },
 _cgS03() //  [R1]
         { []
         }
     {offset
       cgS03: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgS29; else goto cgS28;
       cgS29: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgS28: // global
           _sgNnp::P64 = P64[R1 + 7];
           _sgNnq::P64 = P64[R1 + 15];
           I64[Hp - 104] = $dFractional_sgNnr_info;
           P64[Hp - 88] = P64[Sp + 32];
           I64[Hp - 80] = nan_sgNns_info;
           _cgRZK::P64 = P64[Sp + 24];
           P64[Hp - 64] = _cgRZK::P64;
           _cgS08::P64 = Hp - 104;
           P64[Hp - 56] = _cgS08::P64;
           I64[Hp - 48] = inf_sgNnv_info;
           P64[Hp - 32] = _cgRZK::P64;
           P64[Hp - 24] = _cgS08::P64;
           I64[Hp - 16] = sat_sgNnP_info;
           P64[Hp] = _cgRZK::P64;
           I64[Sp - 16] = block_cgS1n_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgNnp::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 8] = _sgNnq::P64;
           P64[Sp] = _sgNnp::P64;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 48] = Hp - 80;
           Sp = Sp - 40;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS03_info" {
     block_cgS03_info:
         const _cgS03;
         const 2056;
         const 18446744069414584350;
         const ugS4H_srtd;
 },
 section ""relreadonly" . ugS4I_srtd" {
     ugS4I_srtd:
         const SgNTw_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgS1n() //  [R1]
         { []
         }
     {offset
       cgS1n: // global
           if (R1 & 7 == 1) goto ugS4p; else goto cgS3b;
       ugS4p: // global
           Sp = Sp + 8;
           call _sgNny() args: 0, res: 0, upd: 0;
       cgS3b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgS3e; else goto cgS3d;
       cgS3e: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgS3d: // global
           I64[Hp - 16] = sat_sgNnR_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_cgS1z_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 8];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS1n_info" {
     block_cgS1n_info:
         const _cgS1n;
         const 10;
         const 18446744069414584350;
         const ugS4I_srtd;
 },
 section ""relreadonly" . ugS4J_srtd" {
     ugS4J_srtd:
         const SgNTw_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgS1z() //  [R1]
         { []
         }
     {offset
       cgS1z: // global
           if (R1 & 7 == 1) goto ugS4q; else goto cgS3k;
       ugS4q: // global
           Sp = Sp + 8;
           call _sgNny() args: 0, res: 0, upd: 0;
       cgS3k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgS3n; else goto cgS3m;
       cgS3n: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgS3m: // global
           I64[Hp - 16] = sat_sgNnT_info;
           P64[Hp] = P64[Sp + 40];
           _sgNnj::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cgS3j_info;
           R2 = _sgNnj::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 72];
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS1z_info" {
     block_cgS1z_info:
         const _cgS1z;
         const 266;
         const 18446744069414584350;
         const ugS4J_srtd;
 },
 _sgNny() //  []
         { []
         }
     {offset
       sgNny: // global
           I64[Sp - 8] = block_cgS2a_info;
           R2 = P64[Sp + 48];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 8];
           Sp = Sp - 24;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ugS4K_srtd" {
     ugS4K_srtd:
         const SgNTw_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgS2a() //  [R1]
         { []
         }
     {offset
       cgS2a: // global
           if (R1 & 7 == 1) goto cgS2M; else goto ugS4r;
       cgS2M: // global
           I64[Sp] = block_cgS2J_info;
           R2 = P64[Sp + 56];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
       ugS4r: // global
           Sp = Sp + 24;
           call _cgS1e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgS2a_info" {
     block_cgS2a_info:
         const _cgS2a;
         const 266;
         const 18446744069414584350;
         const ugS4K_srtd;
 },
 section ""relreadonly" . ugS4L_srtd" {
     ugS4L_srtd:
         const SgNTw_srt+800;
         const 57;
         const 72057594037927937;
 },
 _cgS2J() //  [R1]
         { []
         }
     {offset
       cgS2J: // global
           if (R1 & 7 == 1) goto cgS2V; else goto ugS4s;
       cgS2V: // global
           I64[Sp + 48] = block_cgS2Q_info;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 56];
           Sp = Sp + 48;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
       ugS4s: // global
           Sp = Sp + 24;
           call _cgS1e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgS2J_info" {
     block_cgS2J_info:
         const _cgS2J;
         const 266;
         const 18446744069414584350;
         const ugS4L_srtd;
 },
 _cgS2Q() //  [R1, R2]
         { []
         }
     {offset
       cgS2Q: // global
           I64[Sp] = block_cgS2S_info;
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$c*_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS2Q_info" {
     block_cgS2Q_info:
         const _cgS2Q;
         const 132;
         const 30;
 },
 _cgS2S() //  [R1, R2]
         { []
         }
     {offset
       cgS2S: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS2S_info" {
     block_cgS2S_info:
         const _cgS2S;
         const 900;
         const 30;
 },
 _cgS1e() //  []
         { []
         }
     {offset
       cgS1e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgS2f; else goto cgS2e;
       cgS2f: // global
           HpAlloc = 24;
           I64[Sp] = block_cgS1e_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cgS2e: // global
           I64[Hp - 16] = sat_sgNnB_info;
           P64[Hp] = P64[Sp + 16];
           _sgNnj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgS2c_info;
           R2 = _sgNnj::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS1e_info" {
     block_cgS1e_info:
         const _cgS1e;
         const 4615;
         const 4294967326;
         const SgNTw_srt+1248;
 },
 _cgS2c() //  [R1]
         { []
         }
     {offset
       cgS2c: // global
           _cgS4k::P64 = R1 & 7;
           if (_cgS4k::P64 < 3) goto ugS4l; else goto cgS2C;
       ugS4l: // global
           if (_cgS4k::P64 < 2) goto cgS2m; else goto cgS2t;
       cgS2m: // global
           I64[Sp + 48] = block_cgS2j_info;
           R2 = P64[Sp + 8];
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp + 32;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
       cgS2t: // global
           I64[Sp + 48] = block_cgS2r_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgS2C: // global
           I64[Sp] = block_cgS2y_info;
           R1 = P64[Sp + 16];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS2c_info" {
     block_cgS2c_info:
         const _cgS2c;
         const 3334;
         const 4294967326;
         const SgNTw_srt+1248;
 },
 _cgS2j() //  [R1]
         { []
         }
     {offset
       cgS2j: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS2j_info" {
     block_cgS2j_info:
         const _cgS2j;
         const 0;
         const 30;
 },
 _cgS2r() //  [R1]
         { []
         }
     {offset
       cgS2r: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS2r_info" {
     block_cgS2r_info:
         const _cgS2r;
         const 0;
         const 30;
 },
 _cgS2y() //  [R1]
         { []
         }
     {offset
       cgS2y: // global
           I64[Sp + 40] = block_cgS2A_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 48] = R1;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS2y_info" {
     block_cgS2y_info:
         const _cgS2y;
         const 3974;
         const 4294967326;
         const SgNTw_srt+1248;
 },
 _cgS2A() //  [R1]
         { []
         }
     {offset
       cgS2A: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS2A_info" {
     block_cgS2A_info:
         const _cgS2A;
         const 1;
         const 30;
 },
 _cgS3j() //  [R1]
         { []
         }
     {offset
       cgS3j: // global
           _cgS4h::P64 = R1 & 7;
           if (_cgS4h::P64 < 3) goto ugS4m; else goto cgS3L;
       ugS4m: // global
           if (_cgS4h::P64 < 2) goto cgS3w; else goto cgS3E;
       cgS3w: // global
           I64[Sp] = block_cgS3r_info;
           R1 = P64[Sp + 16];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgS3E: // global
           I64[Sp + 48] = block_cgS3C_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       cgS3L: // global
           I64[Sp + 48] = block_cgS3J_info;
           R2 = P64[Sp + 8];
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Data.Complex.$fFloatingComplex17_closure;
           Sp = Sp + 32;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS3j_info" {
     block_cgS3j_info:
         const _cgS3j;
         const 3334;
         const 4294967326;
         const SgNTw_srt+1248;
 },
 _cgS3r() //  [R1]
         { []
         }
     {offset
       cgS3r: // global
           I64[Sp + 40] = block_cgS3t_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 48] = R1;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS3r_info" {
     block_cgS3r_info:
         const _cgS3r;
         const 3974;
         const 4294967326;
         const SgNTw_srt+1248;
 },
 _cgS3t() //  [R1]
         { []
         }
     {offset
       cgS3t: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS3t_info" {
     block_cgS3t_info:
         const _cgS3t;
         const 1;
         const 30;
 },
 _cgS3C() //  [R1]
         { []
         }
     {offset
       cgS3C: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS3C_info" {
     block_cgS3C_info:
         const _cgS3C;
         const 0;
         const 30;
 },
 _cgS3J() //  [R1]
         { []
         }
     {offset
       cgS3J: // global
           R2 = R1;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS3J_info" {
     block_cgS3J_info:
         const _cgS3J;
         const 0;
         const 30;
 },
 _cgS45() //  [R1]
         { []
         }
     {offset
       cgS45: // global
           I64[Sp + 40] = block_cgS47_info;
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Data.Complex.$fFloatingComplex17_closure;
           P64[Sp + 48] = R1;
           Sp = Sp + 24;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS45_info" {
     block_cgS45_info:
         const _cgS45;
         const 3974;
         const 4294967326;
         const SgNTw_srt+1248;
 },
 _cgS47() //  [R1]
         { []
         }
     {offset
       cgS47: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS47_info" {
     block_cgS47_info:
         const _cgS47;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.878975338 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$c**_closure" {
     Data.Complex.$fFloatingComplex_$c**_closure:
         const Data.Complex.$fFloatingComplex_$c**_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$c**_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgS9F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgS9L; else goto cgS9M;
       cgS9L: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$c**_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgS9M: // global
           I64[Sp - 24] = block_cgS9C_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugS9R; else goto cgS9D;
       ugS9R: // global
           call _cgS9C(R1) args: 0, res: 0, upd: 0;
       cgS9D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$c**_info" {
     Data.Complex.$fFloatingComplex_$c**_info:
         const Data.Complex.$fFloatingComplex_$c**_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgNTw_srt+1264;
 },
 _cgS9C() //  [R1]
         { []
         }
     {offset
       cgS9C: // global
           _sgNo6::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgS9I_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _sgNo6::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Complex.$w$c**_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS9C_info" {
     block_cgS9C_info:
         const _cgS9C;
         const 2;
         const 4294967326;
         const SgNTw_srt+1264;
 },
 _cgS9I() //  [R1, R2]
         { []
         }
     {offset
       cgS9I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgS9Q; else goto cgS9P;
       cgS9Q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgS9P: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgS9I_info" {
     block_cgS9I_info:
         const _cgS9I;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.891093791 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexpm2_closure" {
     Data.Complex.$fFloatingComplex_$s$cexpm2_closure:
         const Data.Complex.$fFloatingComplex_$s$cexpm2_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexpm2_entry() //  [R2]
         { []
         }
     {offset
       cgSaf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSao; else goto cgSap;
       cgSao: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexpm2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSap: // global
           I64[Sp - 8] = block_cgSac_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSbS; else goto cgSad;
       ugSbS: // global
           call _cgSac(R1) args: 0, res: 0, upd: 0;
       cgSad: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexpm2_info" {
     Data.Complex.$fFloatingComplex_$s$cexpm2_info:
         const Data.Complex.$fFloatingComplex_$s$cexpm2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgSac() //  [R1]
         { []
         }
     {offset
       cgSac: // global
           I64[Sp - 8] = block_cgSai_info;
           _sgNoh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNoh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSbR; else goto cgSaj;
       ugSbR: // global
           call _cgSai(R1) args: 0, res: 0, upd: 0;
       cgSaj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSac_info" {
     block_cgSac_info:
         const _cgSac;
         const 0;
         const 30;
 },
 _cgSai() //  [R1]
         { []
         }
     {offset
       cgSai: // global
           I64[Sp] = block_cgSan_info;
           _sgNoj::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNoj::F32;
           if (R1 & 7 != 0) goto ugSbT; else goto cgSas;
       ugSbT: // global
           call _cgSan(R1) args: 0, res: 0, upd: 0;
       cgSas: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSai_info" {
     block_cgSai_info:
         const _cgSai;
         const 1;
         const 30;
 },
 _cgSan() //  [R1]
         { []
         }
     {offset
       cgSan: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSay; else goto cgSax;
       cgSay: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSax: // global
           _sgNoj::F32 = F32[Sp + 8];
           _sgNol::F32 = F32[R1 + 7];
           if (%MO_F_Lt_W32(%MO_F_Add_W32(%MO_F_Mul_W32(_sgNoj::F32,
                                                        _sgNoj::F32),
                                          %MO_F_Mul_W32(_sgNol::F32, _sgNol::F32)),
                            1.0 :: W32)) goto cgSbQ; else goto cgSba;
       cgSbQ: // global
           (_sgNoB::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC0ZCbaseZCGHCziFloatZCexpm1f(_sgNoj::F32);
           (_cgSbh::F32) = call MO_F32_Sin(%MO_F_Quot_W32(_sgNol::F32,
                                                          2.0 :: W32));
           (_cgSbu::F32) = call MO_F32_Sin(_sgNol::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(%MO_F_Add_W32(_sgNoB::F32,
                                                      1.0 :: W32),
                                        _cgSbu::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           _sgNoE::F32 = %MO_F_Neg_W32(%MO_F_Mul_W32(%MO_F_Add_W32(_cgSbh::F32,
                                                                   _cgSbh::F32),
                                                     _cgSbh::F32));
           F32[Hp - 24] = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Mul_W32(_sgNoB::F32,
                                                                    _sgNoE::F32),
                                                      _sgNoB::F32),
                                        _sgNoE::F32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgSba: // global
           (_cgSaL::F32) = call MO_F32_Exp(_sgNoj::F32);
           (_cgSaP::F32) = call MO_F32_Sin(_sgNol::F32);
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = %MO_F_Mul_W32(_cgSaL::F32, _cgSaP::F32);
           (_cgSaX::F32) = call MO_F32_Cos(_sgNol::F32);
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = %MO_F_Sub_W32(%MO_F_Mul_W32(_cgSaL::F32,
                                                      _cgSaX::F32),
                                        1.0 :: W32);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSan_info" {
     block_cgSan_info:
         const _cgSan;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.90397605 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$cexpm1_closure" {
     Data.Complex.$fFloatingComplex_$s$cexpm1_closure:
         const Data.Complex.$fFloatingComplex_$s$cexpm1_info;
 },
 Data.Complex.$fFloatingComplex_$s$cexpm1_entry() //  [R2]
         { []
         }
     {offset
       cgScY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSd7; else goto cgSd8;
       cgSd7: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$cexpm1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSd8: // global
           I64[Sp - 8] = block_cgScV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSeB; else goto cgScW;
       ugSeB: // global
           call _cgScV(R1) args: 0, res: 0, upd: 0;
       cgScW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$cexpm1_info" {
     Data.Complex.$fFloatingComplex_$s$cexpm1_info:
         const Data.Complex.$fFloatingComplex_$s$cexpm1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgScV() //  [R1]
         { []
         }
     {offset
       cgScV: // global
           I64[Sp - 8] = block_cgSd1_info;
           _sgNoS::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNoS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSeA; else goto cgSd2;
       ugSeA: // global
           call _cgSd1(R1) args: 0, res: 0, upd: 0;
       cgSd2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgScV_info" {
     block_cgScV_info:
         const _cgScV;
         const 0;
         const 30;
 },
 _cgSd1() //  [R1]
         { []
         }
     {offset
       cgSd1: // global
           I64[Sp] = block_cgSd6_info;
           _sgNoU::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNoU::F64;
           if (R1 & 7 != 0) goto ugSeC; else goto cgSdb;
       ugSeC: // global
           call _cgSd6(R1) args: 0, res: 0, upd: 0;
       cgSdb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSd1_info" {
     block_cgSd1_info:
         const _cgSd1;
         const 1;
         const 30;
 },
 _cgSd6() //  [R1]
         { []
         }
     {offset
       cgSd6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSdh; else goto cgSdg;
       cgSdh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSdg: // global
           _sgNoU::F64 = F64[Sp + 8];
           _sgNoW::F64 = F64[R1 + 7];
           if (%MO_F_Lt_W64(%MO_F_Add_W64(%MO_F_Mul_W64(_sgNoU::F64,
                                                        _sgNoU::F64),
                                          %MO_F_Mul_W64(_sgNoW::F64, _sgNoW::F64)),
                            1.0 :: W64)) goto cgSez; else goto cgSdT;
       cgSez: // global
           (_sgNpc::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC2ZCbaseZCGHCziFloatZCexpm1(_sgNoU::F64);
           (_cgSe0::F64) = call MO_F64_Sin(%MO_F_Quot_W64(_sgNoW::F64,
                                                          2.0 :: W64));
           (_cgSed::F64) = call MO_F64_Sin(_sgNoW::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(%MO_F_Add_W64(_sgNpc::F64,
                                                      1.0 :: W64),
                                        _cgSed::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           _sgNpf::F64 = %MO_F_Neg_W64(%MO_F_Mul_W64(%MO_F_Add_W64(_cgSe0::F64,
                                                                   _cgSe0::F64),
                                                     _cgSe0::F64));
           F64[Hp - 24] = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Mul_W64(_sgNpc::F64,
                                                                    _sgNpf::F64),
                                                      _sgNpc::F64),
                                        _sgNpf::F64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgSdT: // global
           (_cgSdu::F64) = call MO_F64_Exp(_sgNoU::F64);
           (_cgSdy::F64) = call MO_F64_Sin(_sgNoW::F64);
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = %MO_F_Mul_W64(_cgSdu::F64, _cgSdy::F64);
           (_cgSdG::F64) = call MO_F64_Cos(_sgNoW::F64);
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = %MO_F_Sub_W64(%MO_F_Mul_W64(_cgSdu::F64,
                                                      _cgSdG::F64),
                                        1.0 :: W64);
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSd6_info" {
     block_cgSd6_info:
         const _cgSd6;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.928163522 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$cexpm1_closure" {
     Data.Complex.$fFloatingComplex_$cexpm1_closure:
         const Data.Complex.$fFloatingComplex_$cexpm1_info;
         const 0;
 },
 $dNum_sgNpx_entry() //  [R1]
         { []
         }
     {offset
       cgSfV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSfW; else goto cgSfX;
       cgSfW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSfX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgNpx_info" {
     $dNum_sgNpx_info:
         const $dNum_sgNpx_entry;
         const 1;
         const 16;
 },
 sat_sgNpC_entry() //  [R1]
         { []
         }
     {offset
       cgSg2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSg3; else goto cgSg4;
       cgSg3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSg4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpC_info" {
     sat_sgNpC_info:
         const sat_sgNpC_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNpA_entry() //  [R1]
         { []
         }
     {offset
       cgSgd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgSge; else goto cgSgf;
       cgSge: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSgf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNpu::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNpu::P64;
           P64[Sp - 24] = _sgNpu::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpA_info" {
     sat_sgNpA_info:
         const sat_sgNpA_entry;
         const 2;
         const 18;
 },
 sat_sgNpz_entry() //  [R1]
         { []
         }
     {offset
       cgSgk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgSgl; else goto cgSgm;
       cgSgl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSgm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNpt::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNpt::P64;
           P64[Sp - 24] = _sgNpt::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpz_info" {
     sat_sgNpz_info:
         const sat_sgNpz_entry;
         const 2;
         const 18;
 },
 sat_sgNpB_entry() //  [R1]
         { []
         }
     {offset
       cgSgn: // global
           _sgNpB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSgo; else goto cgSgp;
       cgSgp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSgr; else goto cgSgq;
       cgSgr: // global
           HpAlloc = 64;
           goto cgSgo;
       cgSgo: // global
           R1 = _sgNpB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSgq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNpB::P64;
           _sgNpt::P64 = P64[_sgNpB::P64 + 16];
           _sgNpu::P64 = P64[_sgNpB::P64 + 24];
           _sgNpx::P64 = P64[_sgNpB::P64 + 32];
           I64[Hp - 56] = sat_sgNpA_info;
           P64[Hp - 40] = _sgNpu::P64;
           P64[Hp - 32] = _sgNpx::P64;
           I64[Hp - 24] = sat_sgNpz_info;
           P64[Hp - 8] = _sgNpt::P64;
           P64[Hp] = _sgNpx::P64;
           R2 = _sgNpx::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpB_info" {
     sat_sgNpB_info:
         const sat_sgNpB_entry;
         const 3;
         const 15;
 },
 $dFloating_sgNpN_entry() //  [R1]
         { []
         }
     {offset
       cgSgF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSgG; else goto cgSgH;
       cgSgG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSgH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_sgNpN_info" {
     $dFloating_sgNpN_info:
         const $dFloating_sgNpN_entry;
         const 1;
         const 16;
 },
 u_sgNpO_entry() //  [R1]
         { []
         }
     {offset
       cgSgM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSgN; else goto cgSgO;
       cgSgN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSgO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.expm1_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgNpO_info" {
     u_sgNpO_info:
         const u_sgNpO_entry;
         const 2;
         const 18;
 },
 sat_sgNpS_entry() //  [R1]
         { []
         }
     {offset
       cgSh9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSha; else goto cgShb;
       cgSha: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgShb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpS_info" {
     sat_sgNpS_info:
         const sat_sgNpS_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1280;
 },
 sat_sgNpT_entry() //  [R1]
         { []
         }
     {offset
       cgShe: // global
           _sgNpT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgShf; else goto cgShg;
       cgShg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgShi; else goto cgShh;
       cgShi: // global
           HpAlloc = 24;
           goto cgShf;
       cgShf: // global
           R1 = _sgNpT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgShh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNpT::P64;
           _sgNpu::P64 = P64[_sgNpT::P64 + 16];
           _sgNpv::P64 = P64[_sgNpT::P64 + 24];
           _sgNpx::P64 = P64[_sgNpT::P64 + 32];
           I64[Hp - 16] = sat_sgNpS_info;
           P64[Hp] = _sgNpx::P64;
           I64[Sp - 40] = block_cgShc_info;
           R2 = _sgNpv::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNpu::P64;
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpT_info" {
     sat_sgNpT_info:
         const sat_sgNpT_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1280;
 },
 _cgShc() //  [R1]
         { []
         }
     {offset
       cgShc: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _cgSh5::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cgSh5::P64;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgShc_info" {
     block_cgShc_info:
         const _cgShc;
         const 2;
         const 30;
 },
 v_sgNpQ_entry() //  [R1]
         { []
         }
     {offset
       cgShm: // global
           _sgNpQ::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgShn; else goto cgSho;
       cgSho: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgShq; else goto cgShp;
       cgShq: // global
           HpAlloc = 40;
           goto cgShn;
       cgShn: // global
           R1 = _sgNpQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgShp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNpQ::P64;
           _sgNpu::P64 = P64[_sgNpQ::P64 + 16];
           _sgNpv::P64 = P64[_sgNpQ::P64 + 24];
           _sgNpx::P64 = P64[_sgNpQ::P64 + 32];
           _sgNpN::P64 = P64[_sgNpQ::P64 + 40];
           I64[Hp - 32] = sat_sgNpT_info;
           P64[Hp - 16] = _sgNpu::P64;
           P64[Hp - 8] = _sgNpv::P64;
           P64[Hp] = _sgNpx::P64;
           R2 = _sgNpN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . v_sgNpQ_info" {
     v_sgNpQ_info:
         const v_sgNpQ_entry;
         const 4;
         const 4294967311;
         const SgNTw_srt+1280;
 },
 sat_sgNpU_entry() //  [R1]
         { []
         }
     {offset
       cgShz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgShA; else goto cgShB;
       cgShA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgShB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpU_info" {
     sat_sgNpU_info:
         const sat_sgNpU_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1280;
 },
 sat_sgNpV_entry() //  [R1]
         { []
         }
     {offset
       cgShC: // global
           _sgNpV::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgShD; else goto cgShE;
       cgShE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgShG; else goto cgShF;
       cgShG: // global
           HpAlloc = 24;
           goto cgShD;
       cgShD: // global
           R1 = _sgNpV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgShF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNpV::P64;
           _sgNpx::P64 = P64[_sgNpV::P64 + 16];
           _sgNpQ::P64 = P64[_sgNpV::P64 + 24];
           I64[Hp - 16] = sat_sgNpU_info;
           P64[Hp] = _sgNpx::P64;
           R2 = _sgNpx::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNpQ::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpV_info" {
     sat_sgNpV_info:
         const sat_sgNpV_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1280;
 },
 sat_sgNpW_entry() //  [R1]
         { []
         }
     {offset
       cgShH: // global
           _sgNpW::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgShI; else goto cgShJ;
       cgShJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgShL; else goto cgShK;
       cgShL: // global
           HpAlloc = 80;
           goto cgShI;
       cgShI: // global
           R1 = _sgNpW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgShK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNpW::P64;
           _sgNpu::P64 = P64[_sgNpW::P64 + 16];
           _sgNpv::P64 = P64[_sgNpW::P64 + 24];
           _sgNpx::P64 = P64[_sgNpW::P64 + 32];
           _sgNpN::P64 = P64[_sgNpW::P64 + 40];
           I64[Hp - 72] = v_sgNpQ_info;
           P64[Hp - 56] = _sgNpu::P64;
           P64[Hp - 48] = _sgNpv::P64;
           P64[Hp - 40] = _sgNpx::P64;
           P64[Hp - 32] = _sgNpN::P64;
           I64[Hp - 24] = sat_sgNpV_info;
           P64[Hp - 8] = _sgNpx::P64;
           _cgSgX::P64 = Hp - 72;
           P64[Hp] = _cgSgX::P64;
           R2 = _sgNpx::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _cgSgX::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpW_info" {
     sat_sgNpW_info:
         const sat_sgNpW_entry;
         const 4;
         const 4294967311;
         const SgNTw_srt+1280;
 },
 w_sgNpP_entry() //  [R1]
         { []
         }
     {offset
       cgShM: // global
           _sgNpP::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgShN; else goto cgShO;
       cgShO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgShQ; else goto cgShP;
       cgShQ: // global
           HpAlloc = 48;
           goto cgShN;
       cgShN: // global
           R1 = _sgNpP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgShP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNpP::P64;
           _sgNpu::P64 = P64[_sgNpP::P64 + 16];
           _sgNpv::P64 = P64[_sgNpP::P64 + 24];
           _sgNpx::P64 = P64[_sgNpP::P64 + 32];
           _sgNpN::P64 = P64[_sgNpP::P64 + 40];
           I64[Hp - 40] = sat_sgNpW_info;
           P64[Hp - 24] = _sgNpu::P64;
           P64[Hp - 16] = _sgNpv::P64;
           P64[Hp - 8] = _sgNpx::P64;
           P64[Hp] = _sgNpN::P64;
           R2 = _sgNpx::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sgNpP_info" {
     w_sgNpP_info:
         const w_sgNpP_entry;
         const 4;
         const 4294967311;
         const SgNTw_srt+1280;
 },
 sat_sgNpX_entry() //  [R1]
         { []
         }
     {offset
       cgShZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgSi0; else goto cgSi1;
       cgSi0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSi1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpX_info" {
     sat_sgNpX_info:
         const sat_sgNpX_entry;
         const 3;
         const 15;
 },
 sat_sgNpY_entry() //  [R1]
         { []
         }
     {offset
       cgSi2: // global
           _sgNpY::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSi3; else goto cgSi4;
       cgSi4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgSi6; else goto cgSi5;
       cgSi6: // global
           HpAlloc = 40;
           goto cgSi3;
       cgSi3: // global
           R1 = _sgNpY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSi5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNpY::P64;
           _sgNpx::P64 = P64[_sgNpY::P64 + 16];
           _sgNpO::P64 = P64[_sgNpY::P64 + 24];
           _sgNpP::P64 = P64[_sgNpY::P64 + 32];
           I64[Hp - 32] = sat_sgNpX_info;
           P64[Hp - 16] = _sgNpx::P64;
           P64[Hp - 8] = _sgNpO::P64;
           P64[Hp] = _sgNpP::P64;
           R2 = _sgNpx::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgNpO::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNpY_info" {
     sat_sgNpY_info:
         const sat_sgNpY_entry;
         const 3;
         const 15;
 },
 sat_sgNq2_entry() //  [R1]
         { []
         }
     {offset
       cgSid: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSie; else goto cgSif;
       cgSie: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSif: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNq2_info" {
     sat_sgNq2_info:
         const sat_sgNq2_entry;
         const 2;
         const 18;
 },
 sat_sgNq0_entry() //  [R1]
         { []
         }
     {offset
       cgSio: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSip; else goto cgSiq;
       cgSip: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSiq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNq0_info" {
     sat_sgNq0_info:
         const sat_sgNq0_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNq1_entry() //  [R1]
         { []
         }
     {offset
       cgSir: // global
           _sgNq1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSis; else goto cgSit;
       cgSit: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSiv; else goto cgSiu;
       cgSiv: // global
           HpAlloc = 24;
           goto cgSis;
       cgSis: // global
           R1 = _sgNq1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSiu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNq1::P64;
           _sgNpx::P64 = P64[_sgNq1::P64 + 16];
           _sgNpO::P64 = P64[_sgNq1::P64 + 24];
           I64[Hp - 16] = sat_sgNq0_info;
           P64[Hp] = _sgNpx::P64;
           R2 = _sgNpx::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgNpO::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNq1_info" {
     sat_sgNq1_info:
         const sat_sgNq1_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1256;
 },
 section ""relreadonly" . ugSja_srtd" {
     ugSja_srtd:
         const SgNTw_srt+520;
         const 97;
         const 1;
         const 6710886400;
 },
 Data.Complex.$fFloatingComplex_$cexpm1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgSiw: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgSix; else goto cgSiy;
       cgSix: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$cexpm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgSiy: // global
           I64[Sp - 16] = block_cgSfE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugSj9; else goto cgSfF;
       ugSj9: // global
           call _cgSfE(R1) args: 0, res: 0, upd: 0;
       cgSfF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$cexpm1_info" {
     Data.Complex.$fFloatingComplex_$cexpm1_info:
         const Data.Complex.$fFloatingComplex_$cexpm1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugSja_srtd;
 },
 section ""relreadonly" . ugSjb_srtd" {
     ugSjb_srtd:
         const SgNTw_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgSfE() //  [R1]
         { []
         }
     {offset
       cgSfE: // global
           I64[Sp - 16] = block_cgSfJ_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSfE_info" {
     block_cgSfE_info:
         const _cgSfE;
         const 1;
         const 18446744069414584350;
         const ugSjb_srtd;
 },
 section ""relreadonly" . ugSjc_srtd" {
     ugSjc_srtd:
         const SgNTw_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgSfJ() //  [R1]
         { []
         }
     {offset
       cgSfJ: // global
           I64[Sp - 8] = block_cgSfN_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSfJ_info" {
     block_cgSfJ_info:
         const _cgSfJ;
         const 3;
         const 18446744069414584350;
         const ugSjc_srtd;
 },
 section ""relreadonly" . ugSjd_srtd" {
     ugSjd_srtd:
         const SgNTw_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgSfN() //  [R1]
         { []
         }
     {offset
       cgSfN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgSiD; else goto cgSiC;
       cgSiD: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSiC: // global
           I64[Hp - 80] = $dNum_sgNpx_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sgNpC_info;
           _cgSfR::P64 = Hp - 80;
           P64[Hp - 40] = _cgSfR::P64;
           I64[Hp - 32] = sat_sgNpB_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _cgSfR::P64;
           I64[Sp - 24] = block_cgSgs_info;
           R2 = R1;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _cgSfR::P64;
           Sp = Sp - 24;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSfN_info" {
     block_cgSfN_info:
         const _cgSfN;
         const 4;
         const 18446744069414584350;
         const ugSjd_srtd;
 },
 section ""relreadonly" . ugSje_srtd" {
     ugSje_srtd:
         const SgNTw_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgSgs() //  [R1]
         { []
         }
     {offset
       cgSgs: // global
           _cgSg5::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgSgw_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _cgSg5::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSgs_info" {
     block_cgSgs_info:
         const _cgSgs;
         const 7;
         const 18446744069414584350;
         const ugSje_srtd;
 },
 section ""relreadonly" . ugSjf_srtd" {
     ugSjf_srtd:
         const SgNTw_srt+520;
         const 96;
         const 1;
         const 2415919104;
 },
 _cgSgw() //  [R1]
         { []
         }
     {offset
       cgSgw: // global
           _sgNpq::P64 = P64[Sp + 40];
           _sgNpt::P64 = P64[Sp + 32];
           _sgNpu::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cgSiP; else goto cgSiY;
       cgSiP: // global
           I64[Sp + 32] = block_cgSiG_info;
           R4 = _sgNpu::P64;
           R3 = _sgNpt::P64;
           R2 = _sgNpq::P64;
           Sp = Sp + 32;
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
       cgSiY: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cgSj1; else goto cgSj0;
       cgSj1: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSj0: // global
           I64[Hp - 136] = $dFloating_sgNpN_info;
           P64[Hp - 120] = _sgNpq::P64;
           I64[Hp - 112] = u_sgNpO_info;
           P64[Hp - 96] = _sgNpt::P64;
           _cgSgB::P64 = Hp - 136;
           P64[Hp - 88] = _cgSgB::P64;
           I64[Hp - 80] = w_sgNpP_info;
           P64[Hp - 64] = _sgNpu::P64;
           P64[Hp - 56] = P64[Sp + 16];
           _cgSfR::P64 = P64[Sp + 8];
           P64[Hp - 48] = _cgSfR::P64;
           P64[Hp - 40] = _cgSgB::P64;
           I64[Hp - 32] = sat_sgNpY_info;
           P64[Hp - 16] = _cgSfR::P64;
           _cgSgI::P64 = Hp - 112;
           P64[Hp - 8] = _cgSgI::P64;
           _cgSgP::P64 = Hp - 80;
           P64[Hp] = _cgSgP::P64;
           I64[Sp] = block_cgSi7_info;
           R2 = _cgSfR::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _cgSgP::P64;
           P64[Sp + 32] = _cgSgI::P64;
           P64[Sp + 40] = _cgSgB::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSgw_info" {
     block_cgSgw_info:
         const _cgSgw;
         const 5;
         const 18446744069414584350;
         const ugSjf_srtd;
 },
 section ""relreadonly" . ugSjg_srtd" {
     ugSjg_srtd:
         const SgNTw_srt+520;
         const 93;
         const 1;
         const 268435456;
 },
 _cgSiG() //  [R1, R2]
         { []
         }
     {offset
       cgSiG: // global
           I64[Sp - 16] = block_cgSiI_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           _sgNpG::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNpG::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSiG_info" {
     block_cgSiG_info:
         const _cgSiG;
         const 1;
         const 18446744069414584350;
         const ugSjg_srtd;
 },
 _cgSiI() //  [R1, R2]
         { []
         }
     {offset
       cgSiI: // global
           _sgNpq::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgSiK_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = _sgNpq::P64;
           Sp = Sp + 24;
           call Data.Complex.$w$c-_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSiI_info" {
     block_cgSiI_info:
         const _cgSiI;
         const 3;
         const 30;
 },
 _cgSiK() //  [R1, R2]
         { []
         }
     {offset
       cgSiK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSiU; else goto cgSiT;
       cgSiU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgSiT: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSiK_info" {
     block_cgSiK_info:
         const _cgSiK;
         const 0;
         const 30;
 },
 _cgSi7() //  [R1]
         { []
         }
     {offset
       cgSi7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSj4; else goto cgSj3;
       cgSj4: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSj3: // global
           I64[Hp - 56] = sat_sgNq2_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_sgNq1_info;
           _cgSfR::P64 = P64[Sp + 8];
           P64[Hp - 8] = _cgSfR::P64;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cgSiV_info;
           R2 = _cgSfR::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 24] = Hp - 56;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSi7_info" {
     block_cgSi7_info:
         const _cgSi7;
         const 133;
         const 4294967326;
         const SgNTw_srt+1256;
 },
 _cgSiV() //  [R1]
         { []
         }
     {offset
       cgSiV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSj7; else goto cgSj6;
       cgSj7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSj6: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSiV_info" {
     block_cgSiV_info:
         const _cgSiV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:47.998519165 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1p1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1p1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1p1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1p1_entry() //  [R2]
         { []
         }
     {offset
       cgSn5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgSne; else goto cgSnf;
       cgSne: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1p1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSnf: // global
           I64[Sp - 8] = block_cgSn2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSoU; else goto cgSn3;
       ugSoU: // global
           call _cgSn2(R1) args: 0, res: 0, upd: 0;
       cgSn3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1p1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1p1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1p1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+1296;
 },
 _cgSn2() //  [R1]
         { []
         }
     {offset
       cgSn2: // global
           I64[Sp - 8] = block_cgSn8_info;
           _sgNq7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNq7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSoT; else goto cgSn9;
       ugSoT: // global
           call _cgSn8(R1) args: 0, res: 0, upd: 0;
       cgSn9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSn2_info" {
     block_cgSn2_info:
         const _cgSn2;
         const 0;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSn8() //  [R1]
         { []
         }
     {offset
       cgSn8: // global
           I64[Sp] = block_cgSnd_info;
           _sgNq9::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNq9::F32;
           if (R1 & 7 != 0) goto ugSoV; else goto cgSni;
       ugSoV: // global
           call _cgSnd(R1) args: 0, res: 0, upd: 0;
       cgSni: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSn8_info" {
     block_cgSn8_info:
         const _cgSn8;
         const 1;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSnd() //  [R1]
         { []
         }
     {offset
       cgSnd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgSno; else goto cgSnn;
       cgSno: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSnn: // global
           _sgNq9::F32 = F32[Sp + 8];
           _sgNqb::F32 = F32[R1 + 7];
           (_cgSnp::F32) = call MO_F32_Fabs(_sgNq9::F32);
           if (%MO_F_Lt_W32(_cgSnp::F32,
                            0.5 :: W32)) goto cgSoS; else goto cgSo6;
       cgSoS: // global
           (_cgSo0::F32) = call MO_F32_Fabs(_sgNqb::F32);
           if (%MO_F_Lt_W32(_cgSo0::F32,
                            0.5 :: W32)) goto cgSoO; else goto cgSo6;
       cgSoO: // global
           _sgNqn::F32 = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Add_W32(_sgNq9::F32,
                                                                   _sgNq9::F32),
                                                     %MO_F_Mul_W32(_sgNq9::F32, _sgNq9::F32)),
                                       %MO_F_Mul_W32(_sgNqb::F32, _sgNqb::F32));
           (_cgSor::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(_sgNqn::F32,
                                                          1.0 :: W32));
           (_sgNqz::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Quot_W32(_sgNqn::F32,
                                                                                                                                  %MO_F_Add_W32(_cgSor::F32,
                                                                                                                                                1.0 :: W32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_sgNq9::F32, 1.0 :: W32);
           I64[Sp] = block_cgSoH_info;
           F1 = _sgNqb::F32;
           R2 = Hp - 7;
           F32[Sp + 8] = _sgNqz::F32;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
       cgSo6: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgSnA_info;
           F2 = _sgNqb::F32;
           _sgNqd::F32 = %MO_F_Add_W32(_sgNq9::F32, 1.0 :: W32);
           F1 = _sgNqd::F32;
           F32[Sp] = _sgNqd::F32;
           F32[Sp + 8] = _sgNqb::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSnd_info" {
     block_cgSnd_info:
         const _cgSnd;
         const 65;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSoH() //  [F1]
         { []
         }
     {offset
       cgSoH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSoR; else goto cgSoQ;
       cgSoR: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgSoQ: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSoH_info" {
     block_cgSoH_info:
         const _cgSoH;
         const 65;
         const 30;
 },
 _cgSnA() //  [F1]
         { []
         }
     {offset
       cgSnA: // global
           _sgNqb::F32 = F32[Sp + 16];
           _sgNqd::F32 = F32[Sp + 8];
           _cgSnF::F32 = F1;
           (_cgSnE::F32) = call MO_F32_Log(_cgSnF::F32);
           I64[Sp + 8] = block_cgSnI_info;
           F2 = _sgNqb::F32;
           F1 = _sgNqd::F32;
           F32[Sp + 16] = _cgSnE::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSnA_info" {
     block_cgSnA_info:
         const _cgSnA;
         const 194;
         const 30;
 },
 _cgSnI() //  [F1]
         { []
         }
     {offset
       cgSnI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSnT; else goto cgSnS;
       cgSnT: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgSnS: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSnI_info" {
     block_cgSnI_info:
         const _cgSnI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.017419719 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1p_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1p_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1p_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1p_entry() //  [R2]
         { []
         }
     {offset
       cgSqf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgSqo; else goto cgSqp;
       cgSqo: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1p_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSqp: // global
           I64[Sp - 8] = block_cgSqc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSs4; else goto cgSqd;
       ugSs4: // global
           call _cgSqc(R1) args: 0, res: 0, upd: 0;
       cgSqd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1p_info" {
     Data.Complex.$fFloatingComplex_$s$clog1p_info:
         const Data.Complex.$fFloatingComplex_$s$clog1p_entry;
         const 0;
         const 9223372041149743118;
         const 4294967301;
         const SgNTw_srt+1064;
 },
 _cgSqc() //  [R1]
         { []
         }
     {offset
       cgSqc: // global
           I64[Sp - 8] = block_cgSqi_info;
           _sgNqI::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNqI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSs3; else goto cgSqj;
       ugSs3: // global
           call _cgSqi(R1) args: 0, res: 0, upd: 0;
       cgSqj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSqc_info" {
     block_cgSqc_info:
         const _cgSqc;
         const 0;
         const 4294967326;
         const SgNTw_srt+1064;
 },
 _cgSqi() //  [R1]
         { []
         }
     {offset
       cgSqi: // global
           I64[Sp] = block_cgSqn_info;
           _sgNqK::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNqK::F64;
           if (R1 & 7 != 0) goto ugSs5; else goto cgSqs;
       ugSs5: // global
           call _cgSqn(R1) args: 0, res: 0, upd: 0;
       cgSqs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSqi_info" {
     block_cgSqi_info:
         const _cgSqi;
         const 1;
         const 4294967326;
         const SgNTw_srt+1064;
 },
 _cgSqn() //  [R1]
         { []
         }
     {offset
       cgSqn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgSqy; else goto cgSqx;
       cgSqy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSqx: // global
           _sgNqK::F64 = F64[Sp + 8];
           _sgNqM::F64 = F64[R1 + 7];
           (_cgSqz::F64) = call MO_F64_Fabs(_sgNqK::F64);
           if (%MO_F_Lt_W64(_cgSqz::F64,
                            0.5 :: W64)) goto cgSs2; else goto cgSrg;
       cgSs2: // global
           (_cgSra::F64) = call MO_F64_Fabs(_sgNqM::F64);
           if (%MO_F_Lt_W64(_cgSra::F64,
                            0.5 :: W64)) goto cgSrY; else goto cgSrg;
       cgSrY: // global
           _sgNqY::F64 = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Add_W64(_sgNqK::F64,
                                                                   _sgNqK::F64),
                                                     %MO_F_Mul_W64(_sgNqK::F64, _sgNqK::F64)),
                                       %MO_F_Mul_W64(_sgNqM::F64, _sgNqM::F64));
           (_cgSrB::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(_sgNqY::F64,
                                                          1.0 :: W64));
           (_sgNra::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Quot_W64(_sgNqY::F64,
                                                                                                                                 %MO_F_Add_W64(_cgSrB::F64,
                                                                                                                                               1.0 :: W64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_sgNqK::F64, 1.0 :: W64);
           I64[Sp] = block_cgSrR_info;
           D1 = _sgNqM::F64;
           R2 = Hp - 7;
           F64[Sp + 8] = _sgNra::F64;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
       cgSrg: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgSqK_info;
           D2 = _sgNqM::F64;
           _sgNqO::F64 = %MO_F_Add_W64(_sgNqK::F64, 1.0 :: W64);
           D1 = _sgNqO::F64;
           F64[Sp] = _sgNqO::F64;
           F64[Sp + 8] = _sgNqM::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSqn_info" {
     block_cgSqn_info:
         const _cgSqn;
         const 65;
         const 4294967326;
         const SgNTw_srt+1064;
 },
 _cgSrR() //  [D1]
         { []
         }
     {offset
       cgSrR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSs1; else goto cgSs0;
       cgSs1: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgSs0: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSrR_info" {
     block_cgSrR_info:
         const _cgSrR;
         const 65;
         const 30;
 },
 _cgSqK() //  [D1]
         { []
         }
     {offset
       cgSqK: // global
           _sgNqM::F64 = F64[Sp + 16];
           _sgNqO::F64 = F64[Sp + 8];
           _cgSqP::F64 = D1;
           (_cgSqO::F64) = call MO_F64_Log(_cgSqP::F64);
           I64[Sp + 8] = block_cgSqS_info;
           D2 = _sgNqM::F64;
           D1 = _sgNqO::F64;
           F64[Sp + 16] = _cgSqO::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSqK_info" {
     block_cgSqK_info:
         const _cgSqK;
         const 194;
         const 30;
 },
 _cgSqS() //  [D1]
         { []
         }
     {offset
       cgSqS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSr3; else goto cgSr2;
       cgSr3: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgSr2: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSqS_info" {
     block_cgSqS_info:
         const _cgSqS;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.046972018 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog1p_closure" {
     Data.Complex.$fFloatingComplex_$clog1p_closure:
         const Data.Complex.$fFloatingComplex_$clog1p_info;
         const 0;
 },
 $dNum_sgNrn_entry() //  [R1]
         { []
         }
     {offset
       cgStD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgStE; else goto cgStF;
       cgStE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgStF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgNrn_info" {
     $dNum_sgNrn_info:
         const $dNum_sgNrn_entry;
         const 1;
         const 16;
 },
 $dFractional_sgNrp_entry() //  [R1]
         { []
         }
     {offset
       cgStO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgStP; else goto cgStQ;
       cgStP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgStQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgNrp_info" {
     $dFractional_sgNrp_info:
         const $dFractional_sgNrp_entry;
         const 1;
         const 16;
 },
 sat_sgNrr_entry() //  [R1]
         { []
         }
     {offset
       cgStV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgStW; else goto cgStX;
       cgStW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgStX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrr_info" {
     sat_sgNrr_info:
         const sat_sgNrr_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1104;
 },
 sat_sgNrq_entry() //  [R1]
         { []
         }
     {offset
       cgSu2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSu3; else goto cgSu4;
       cgSu3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSu4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrq_info" {
     sat_sgNrq_info:
         const sat_sgNrq_entry;
         const 2;
         const 18;
 },
 sat_sgNrD_entry() //  [R1]
         { []
         }
     {offset
       cgSue: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSuf; else goto cgSug;
       cgSuf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSug: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrD_info" {
     sat_sgNrD_info:
         const sat_sgNrD_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1104;
 },
 sat_sgNrC_entry() //  [R1]
         { []
         }
     {offset
       cgSul: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSum; else goto cgSun;
       cgSum: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSun: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrC_info" {
     sat_sgNrC_info:
         const sat_sgNrC_entry;
         const 2;
         const 18;
 },
 sat_sgNrU_entry() //  [R1]
         { []
         }
     {offset
       cgSuJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgSuK; else goto cgSuL;
       cgSuK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSuL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNrk::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNrk::P64;
           P64[Sp - 24] = _sgNrk::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrU_info" {
     sat_sgNrU_info:
         const sat_sgNrU_entry;
         const 2;
         const 18;
 },
 sat_sgNrS_entry() //  [R1]
         { []
         }
     {offset
       cgSuU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgSuV; else goto cgSuW;
       cgSuV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSuW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNrj::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNrj::P64;
           P64[Sp - 24] = _sgNrj::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrS_info" {
     sat_sgNrS_info:
         const sat_sgNrS_entry;
         const 2;
         const 18;
 },
 sat_sgNrQ_entry() //  [R1]
         { []
         }
     {offset
       cgSv5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSv6; else goto cgSv7;
       cgSv6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSv7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrQ_info" {
     sat_sgNrQ_info:
         const sat_sgNrQ_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1280;
 },
 sat_sgNrR_entry() //  [R1]
         { []
         }
     {offset
       cgSv8: // global
           _sgNrR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSv9; else goto cgSva;
       cgSva: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSvc; else goto cgSvb;
       cgSvc: // global
           HpAlloc = 24;
           goto cgSv9;
       cgSv9: // global
           R1 = _sgNrR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSvb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNrR::P64;
           _sgNrj::P64 = P64[_sgNrR::P64 + 16];
           _sgNrn::P64 = P64[_sgNrR::P64 + 24];
           I64[Hp - 16] = sat_sgNrQ_info;
           P64[Hp] = _sgNrn::P64;
           R2 = _sgNrn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNrj::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrR_info" {
     sat_sgNrR_info:
         const sat_sgNrR_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1280;
 },
 sat_sgNrT_entry() //  [R1]
         { []
         }
     {offset
       cgSvd: // global
           _sgNrT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSve; else goto cgSvf;
       cgSvf: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSvh; else goto cgSvg;
       cgSvh: // global
           HpAlloc = 64;
           goto cgSve;
       cgSve: // global
           R1 = _sgNrT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSvg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNrT::P64;
           _sgNrj::P64 = P64[_sgNrT::P64 + 16];
           _sgNrn::P64 = P64[_sgNrT::P64 + 24];
           I64[Hp - 56] = sat_sgNrS_info;
           P64[Hp - 40] = _sgNrj::P64;
           P64[Hp - 32] = _sgNrn::P64;
           I64[Hp - 24] = sat_sgNrR_info;
           P64[Hp - 8] = _sgNrj::P64;
           P64[Hp] = _sgNrn::P64;
           R2 = _sgNrn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrT_info" {
     sat_sgNrT_info:
         const sat_sgNrT_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1280;
 },
 u_sgNrP_entry() //  [R1]
         { []
         }
     {offset
       cgSvi: // global
           _sgNrP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSvj; else goto cgSvk;
       cgSvk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSvm; else goto cgSvl;
       cgSvm: // global
           HpAlloc = 64;
           goto cgSvj;
       cgSvj: // global
           R1 = _sgNrP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSvl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNrP::P64;
           _sgNrj::P64 = P64[_sgNrP::P64 + 16];
           _sgNrk::P64 = P64[_sgNrP::P64 + 24];
           _sgNrn::P64 = P64[_sgNrP::P64 + 32];
           I64[Hp - 56] = sat_sgNrU_info;
           P64[Hp - 40] = _sgNrk::P64;
           P64[Hp - 32] = _sgNrn::P64;
           I64[Hp - 24] = sat_sgNrT_info;
           P64[Hp - 8] = _sgNrj::P64;
           P64[Hp] = _sgNrn::P64;
           R2 = _sgNrn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgNrP_info" {
     u_sgNrP_info:
         const u_sgNrP_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1280;
 },
 sat_sgNrW_entry() //  [R1]
         { []
         }
     {offset
       cgSvD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSvE; else goto cgSvF;
       cgSvE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSvF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrW_info" {
     sat_sgNrW_info:
         const sat_sgNrW_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNrX_entry() //  [R1]
         { []
         }
     {offset
       cgSvG: // global
           _sgNrX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSvH; else goto cgSvI;
       cgSvI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSvK; else goto cgSvJ;
       cgSvK: // global
           HpAlloc = 24;
           goto cgSvH;
       cgSvH: // global
           R1 = _sgNrX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSvJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNrX::P64;
           _sgNrn::P64 = P64[_sgNrX::P64 + 16];
           _sgNrP::P64 = P64[_sgNrX::P64 + 24];
           I64[Hp - 16] = sat_sgNrW_info;
           P64[Hp] = _sgNrn::P64;
           R2 = _sgNrn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgNrP::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrX_info" {
     sat_sgNrX_info:
         const sat_sgNrX_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1256;
 },
 sat_sgNrY_entry() //  [R1]
         { []
         }
     {offset
       cgSvL: // global
           _sgNrY::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgSvM; else goto cgSvN;
       cgSvN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgSvP; else goto cgSvO;
       cgSvP: // global
           HpAlloc = 32;
           goto cgSvM;
       cgSvM: // global
           R1 = _sgNrY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSvO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNrY::P64;
           _sgNrn::P64 = P64[_sgNrY::P64 + 16];
           _sgNrO::P64 = P64[_sgNrY::P64 + 24];
           _sgNrP::P64 = P64[_sgNrY::P64 + 32];
           I64[Hp - 24] = sat_sgNrX_info;
           P64[Hp - 8] = _sgNrn::P64;
           P64[Hp] = _sgNrP::P64;
           R2 = _sgNrO::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrY_info" {
     sat_sgNrY_info:
         const sat_sgNrY_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1256;
 },
 sat_sgNrV_entry() //  [R1]
         { []
         }
     {offset
       cgSvU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSvV; else goto cgSvW;
       cgSvV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSvW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrV_info" {
     sat_sgNrV_info:
         const sat_sgNrV_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNrZ_entry() //  [R1]
         { []
         }
     {offset
       cgSvX: // global
           _sgNrZ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSvY; else goto cgSvZ;
       cgSvZ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSw1; else goto cgSw0;
       cgSw1: // global
           HpAlloc = 64;
           goto cgSvY;
       cgSvY: // global
           R1 = _sgNrZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSw0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNrZ::P64;
           _sgNrn::P64 = P64[_sgNrZ::P64 + 16];
           _sgNrO::P64 = P64[_sgNrZ::P64 + 24];
           _sgNrP::P64 = P64[_sgNrZ::P64 + 32];
           I64[Hp - 56] = sat_sgNrY_info;
           P64[Hp - 40] = _sgNrn::P64;
           P64[Hp - 32] = _sgNrO::P64;
           P64[Hp - 24] = _sgNrP::P64;
           I64[Hp - 16] = sat_sgNrV_info;
           P64[Hp] = _sgNrn::P64;
           R2 = _sgNrn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNrZ_info" {
     sat_sgNrZ_info:
         const sat_sgNrZ_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1256;
 },
 sat_sgNs0_entry() //  [R1]
         { []
         }
     {offset
       cgSw2: // global
           _sgNs0::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSw3; else goto cgSw4;
       cgSw4: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgSw6; else goto cgSw5;
       cgSw6: // global
           HpAlloc = 80;
           goto cgSw3;
       cgSw3: // global
           R1 = _sgNs0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSw5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNs0::P64;
           _sgNrj::P64 = P64[_sgNs0::P64 + 16];
           _sgNrk::P64 = P64[_sgNs0::P64 + 24];
           _sgNrn::P64 = P64[_sgNs0::P64 + 32];
           _sgNrp::P64 = P64[_sgNs0::P64 + 40];
           _sgNrO::P64 = P64[_sgNs0::P64 + 48];
           I64[Hp - 72] = u_sgNrP_info;
           P64[Hp - 56] = _sgNrj::P64;
           P64[Hp - 48] = _sgNrk::P64;
           P64[Hp - 40] = _sgNrn::P64;
           I64[Hp - 32] = sat_sgNrZ_info;
           P64[Hp - 16] = _sgNrn::P64;
           P64[Hp - 8] = _sgNrO::P64;
           _cgSuB::P64 = Hp - 72;
           P64[Hp] = _cgSuB::P64;
           R2 = _sgNrp::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _cgSuB::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNs0_info" {
     sat_sgNs0_info:
         const sat_sgNs0_entry;
         const 5;
         const 38654705679;
         const SgNTw_srt+1256;
 },
 sat_sgNs2_entry() //  [R1]
         { []
         }
     {offset
       cgSwh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSwi; else goto cgSwj;
       cgSwi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSwj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNs2_info" {
     sat_sgNs2_info:
         const sat_sgNs2_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNs3_entry() //  [R1]
         { []
         }
     {offset
       cgSwk: // global
           _sgNs3::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSwl; else goto cgSwm;
       cgSwm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSwo; else goto cgSwn;
       cgSwo: // global
           HpAlloc = 24;
           goto cgSwl;
       cgSwl: // global
           R1 = _sgNs3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSwn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNs3::P64;
           _sgNrj::P64 = P64[_sgNs3::P64 + 16];
           _sgNrn::P64 = P64[_sgNs3::P64 + 24];
           I64[Hp - 16] = sat_sgNs2_info;
           P64[Hp] = _sgNrn::P64;
           R2 = _sgNrn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNrj::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNs3_info" {
     sat_sgNs3_info:
         const sat_sgNs3_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1256;
 },
 section ""relreadonly" . ugSxr_srtd" {
     ugSxr_srtd:
         const SgNTw_srt+520;
         const 101;
         const 34359738369;
         const 71135396352;
 },
 Data.Complex.$fFloatingComplex_$clog1p_entry() //  [R2, R3]
         { []
         }
     {offset
       cgSwp: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgSwq; else goto cgSwr;
       cgSwq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog1p_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgSwr: // global
           I64[Sp - 16] = block_cgStm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugSxq; else goto cgStn;
       ugSxq: // global
           call _cgStm(R1) args: 0, res: 0, upd: 0;
       cgStn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog1p_info" {
     Data.Complex.$fFloatingComplex_$clog1p_info:
         const Data.Complex.$fFloatingComplex_$clog1p_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugSxr_srtd;
 },
 section ""relreadonly" . ugSxs_srtd" {
     ugSxs_srtd:
         const SgNTw_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgStm() //  [R1]
         { []
         }
     {offset
       cgStm: // global
           I64[Sp - 16] = block_cgStr_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgStm_info" {
     block_cgStm_info:
         const _cgStm;
         const 1;
         const 18446744069414584350;
         const ugSxs_srtd;
 },
 section ""relreadonly" . ugSxt_srtd" {
     ugSxt_srtd:
         const SgNTw_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgStr() //  [R1]
         { []
         }
     {offset
       cgStr: // global
           I64[Sp - 8] = block_cgStv_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgStr_info" {
     block_cgStr_info:
         const _cgStr;
         const 3;
         const 18446744069414584350;
         const ugSxt_srtd;
 },
 section ""relreadonly" . ugSxu_srtd" {
     ugSxu_srtd:
         const SgNTw_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgStv() //  [R1]
         { []
         }
     {offset
       cgStv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSww; else goto cgSwv;
       cgSww: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSwv: // global
           I64[Hp - 16] = $dNum_sgNrn_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgStG_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgStv_info" {
     block_cgStv_info:
         const _cgStv;
         const 4;
         const 18446744069414584350;
         const ugSxu_srtd;
 },
 section ""relreadonly" . ugSxv_srtd" {
     ugSxv_srtd:
         const SgNTw_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgStG() //  [R1]
         { []
         }
     {offset
       cgStG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgSwz; else goto cgSwy;
       cgSwz: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSwy: // global
           I64[Hp - 72] = $dFractional_sgNrp_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_sgNrr_info;
           _cgStK::P64 = Hp - 72;
           P64[Hp - 32] = _cgStK::P64;
           I64[Hp - 24] = sat_sgNrq_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgSu5_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 48;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgStK::P64;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgStG_info" {
     block_cgStG_info:
         const _cgStG;
         const 5;
         const 18446744069414584350;
         const ugSxv_srtd;
 },
 section ""relreadonly" . ugSxw_srtd" {
     ugSxw_srtd:
         const SgNTw_srt+520;
         const 96;
         const 34359738369;
         const 2415919616;
 },
 _cgSu5() //  [R1]
         { []
         }
     {offset
       cgSu5: // global
           if (R1 & 7 == 1) goto cgSwK; else goto cgSwQ;
       cgSwK: // global
           I64[Sp + 24] = block_cgSwB_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 48];
           Sp = Sp + 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgSwQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSwT; else goto cgSwS;
       cgSwT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSwS: // global
           I64[Hp - 48] = sat_sgNrD_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sgNrC_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           _sgNro::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgSuo_info;
           R2 = _sgNro::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSu5_info" {
     block_cgSu5_info:
         const _cgSu5;
         const 6;
         const 18446744069414584350;
         const ugSxw_srtd;
 },
 _cgSwB() //  [R1, R2]
         { []
         }
     {offset
       cgSwB: // global
           _sgNrj::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgSwD_info;
           R6 = P64[Sp + 8];
           R5 = _sgNrj::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSwB_info" {
     block_cgSwB_info:
         const _cgSwB;
         const 3;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSwD() //  [R1, R2]
         { []
         }
     {offset
       cgSwD: // global
           _sgNrg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgSwF_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgNrg::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSwD_info" {
     block_cgSwD_info:
         const _cgSwD;
         const 1;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSwF() //  [R1, R2]
         { []
         }
     {offset
       cgSwF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSwP; else goto cgSwO;
       cgSwP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgSwO: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSwF_info" {
     block_cgSwF_info:
         const _cgSwF;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugSxx_srtd" {
     ugSxx_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854872576;
 },
 _cgSuo() //  [R1]
         { []
         }
     {offset
       cgSuo: // global
           _sgNrg::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cgSx4; else goto cgSxe;
       cgSx4: // global
           I64[Sp + 16] = block_cgSwV_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = _sgNrg::P64;
           Sp = Sp + 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgSxe: // global
           I64[Sp] = block_cgSut_info;
           R2 = _sgNrg::P64;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSuo_info" {
     block_cgSuo_info:
         const _cgSuo;
         const 5;
         const 18446744069414584350;
         const ugSxx_srtd;
 },
 _cgSwV() //  [R1, R2]
         { []
         }
     {offset
       cgSwV: // global
           _sgNrj::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgSwX_info;
           R6 = P64[Sp + 8];
           R5 = _sgNrj::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSwV_info" {
     block_cgSwV_info:
         const _cgSwV;
         const 3;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSwX() //  [R1, R2]
         { []
         }
     {offset
       cgSwX: // global
           _sgNrg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgSwZ_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgNrg::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSwX_info" {
     block_cgSwX_info:
         const _cgSwX;
         const 1;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSwZ() //  [R1, R2]
         { []
         }
     {offset
       cgSwZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSx9; else goto cgSx8;
       cgSx9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgSx8: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSwZ_info" {
     block_cgSwZ_info:
         const _cgSwZ;
         const 0;
         const 30;
 },
 _cgSut() //  [R1]
         { []
         }
     {offset
       cgSut: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSxh; else goto cgSxg;
       cgSxh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSxg: // global
           I64[Hp - 48] = sat_sgNs0_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cgSw7_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSut_info" {
     block_cgSut_info:
         const _cgSut;
         const 5;
         const 38654705694;
         const SgNTw_srt+1256;
 },
 _cgSw7() //  [R1]
         { []
         }
     {offset
       cgSw7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgSxk; else goto cgSxj;
       cgSxk: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSxj: // global
           I64[Hp - 24] = sat_sgNs3_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cgSxa_info;
           R2 = P64[Sp + 40];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Float.atan2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSw7_info" {
     block_cgSw7_info:
         const _cgSw7;
         const 133;
         const 4294967326;
         const SgNTw_srt+1256;
 },
 _cgSxa() //  [R1]
         { []
         }
     {offset
       cgSxa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSxn; else goto cgSxm;
       cgSxn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSxm: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSxa_info" {
     block_cgSxa_info:
         const _cgSxa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.119269426 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1mexp1_entry() //  [R2]
         { []
         }
     {offset
       cgSBX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgSC6; else goto cgSC7;
       cgSC6: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSC7: // global
           I64[Sp - 8] = block_cgSBU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSEa; else goto cgSBV;
       ugSEa: // global
           call _cgSBU(R1) args: 0, res: 0, upd: 0;
       cgSBV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1mexp1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const SgNTw_srt+1304;
 },
 _cgSBU() //  [R1]
         { []
         }
     {offset
       cgSBU: // global
           I64[Sp - 8] = block_cgSC0_info;
           _sgNs8::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNs8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSE9; else goto cgSC1;
       ugSE9: // global
           call _cgSC0(R1) args: 0, res: 0, upd: 0;
       cgSC1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSBU_info" {
     block_cgSBU_info:
         const _cgSBU;
         const 0;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSC0() //  [R1]
         { []
         }
     {offset
       cgSC0: // global
           I64[Sp] = block_cgSC5_info;
           _sgNsa::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNsa::F32;
           if (R1 & 7 != 0) goto ugSEb; else goto cgSCa;
       ugSEb: // global
           call _cgSC5(R1) args: 0, res: 0, upd: 0;
       cgSCa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSC0_info" {
     block_cgSC0_info:
         const _cgSC0;
         const 1;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSC5() //  [R1]
         { []
         }
     {offset
       cgSC5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgSCg; else goto cgSCf;
       cgSCg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSCf: // global
           _sgNsc::F32 = F32[R1 + 7];
           (_cgSCh::F32) = call MO_F32_Exp(F32[Sp + 8]);
           (_cgSCl::F32) = call MO_F32_Cos(_sgNsc::F32);
           (_cgSCv::F32) = call MO_F32_Sin(_sgNsc::F32);
           _sgNse::F32 = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgSCh::F32,
                                                     _cgSCl::F32));
           (_cgSCF::F32) = call MO_F32_Fabs(_sgNse::F32);
           _sgNsh::F32 = %MO_F_Neg_W32(%MO_F_Mul_W32(_cgSCh::F32,
                                                     _cgSCv::F32));
           if (%MO_F_Lt_W32(_cgSCF::F32,
                            0.5 :: W32)) goto cgSE8; else goto cgSDm;
       cgSE8: // global
           (_cgSDg::F32) = call MO_F32_Fabs(_sgNsh::F32);
           if (%MO_F_Lt_W32(_cgSDg::F32,
                            0.5 :: W32)) goto cgSE4; else goto cgSDm;
       cgSE4: // global
           _sgNsv::F32 = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Add_W32(_sgNse::F32,
                                                                   _sgNse::F32),
                                                     %MO_F_Mul_W32(_sgNse::F32, _sgNse::F32)),
                                       %MO_F_Mul_W32(_sgNsh::F32, _sgNsh::F32));
           (_cgSDH::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(_sgNsv::F32,
                                                          1.0 :: W32));
           (_sgNsH::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Quot_W32(_sgNsv::F32,
                                                                                                                                  %MO_F_Add_W32(_cgSDH::F32,
                                                                                                                                                1.0 :: W32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_sgNse::F32, 1.0 :: W32);
           I64[Sp] = block_cgSDX_info;
           F1 = _sgNsh::F32;
           R2 = Hp - 7;
           F32[Sp + 8] = _sgNsH::F32;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
       cgSDm: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgSCQ_info;
           F2 = _sgNsh::F32;
           _sgNsl::F32 = %MO_F_Add_W32(_sgNse::F32, 1.0 :: W32);
           F1 = _sgNsl::F32;
           F32[Sp] = _sgNsl::F32;
           F32[Sp + 8] = _sgNsh::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSC5_info" {
     block_cgSC5_info:
         const _cgSC5;
         const 65;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSDX() //  [F1]
         { []
         }
     {offset
       cgSDX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSE7; else goto cgSE6;
       cgSE7: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgSE6: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSDX_info" {
     block_cgSDX_info:
         const _cgSDX;
         const 65;
         const 30;
 },
 _cgSCQ() //  [F1]
         { []
         }
     {offset
       cgSCQ: // global
           _sgNsh::F32 = F32[Sp + 16];
           _sgNsl::F32 = F32[Sp + 8];
           _cgSCV::F32 = F1;
           (_cgSCU::F32) = call MO_F32_Log(_cgSCV::F32);
           I64[Sp + 8] = block_cgSCY_info;
           F2 = _sgNsh::F32;
           F1 = _sgNsl::F32;
           F32[Sp + 16] = _cgSCU::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSCQ_info" {
     block_cgSCQ_info:
         const _cgSCQ;
         const 194;
         const 30;
 },
 _cgSCY() //  [F1]
         { []
         }
     {offset
       cgSCY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSD9; else goto cgSD8;
       cgSD9: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgSD8: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSCY_info" {
     block_cgSCY_info:
         const _cgSCY;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.13823504 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1mexp_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1mexp_entry() //  [R2]
         { []
         }
     {offset
       cgSFB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgSFK; else goto cgSFL;
       cgSFK: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSFL: // global
           I64[Sp - 8] = block_cgSFy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSHO; else goto cgSFz;
       ugSHO: // global
           call _cgSFy(R1) args: 0, res: 0, upd: 0;
       cgSFz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1mexp_info" {
     Data.Complex.$fFloatingComplex_$s$clog1mexp_info:
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgNTw_srt+1344;
 },
 _cgSFy() //  [R1]
         { []
         }
     {offset
       cgSFy: // global
           I64[Sp - 8] = block_cgSFE_info;
           _sgNsQ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNsQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSHN; else goto cgSFF;
       ugSHN: // global
           call _cgSFE(R1) args: 0, res: 0, upd: 0;
       cgSFF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSFy_info" {
     block_cgSFy_info:
         const _cgSFy;
         const 0;
         const 4294967326;
         const SgNTw_srt+1352;
 },
 _cgSFE() //  [R1]
         { []
         }
     {offset
       cgSFE: // global
           I64[Sp] = block_cgSFJ_info;
           _sgNsS::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNsS::F64;
           if (R1 & 7 != 0) goto ugSHP; else goto cgSFO;
       ugSHP: // global
           call _cgSFJ(R1) args: 0, res: 0, upd: 0;
       cgSFO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSFE_info" {
     block_cgSFE_info:
         const _cgSFE;
         const 1;
         const 4294967326;
         const SgNTw_srt+1352;
 },
 _cgSFJ() //  [R1]
         { []
         }
     {offset
       cgSFJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgSFU; else goto cgSFT;
       cgSFU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSFT: // global
           _sgNsU::F64 = F64[R1 + 7];
           (_cgSFV::F64) = call MO_F64_Exp(F64[Sp + 8]);
           (_cgSFZ::F64) = call MO_F64_Cos(_sgNsU::F64);
           (_cgSG9::F64) = call MO_F64_Sin(_sgNsU::F64);
           _sgNsW::F64 = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgSFV::F64,
                                                     _cgSFZ::F64));
           (_cgSGj::F64) = call MO_F64_Fabs(_sgNsW::F64);
           _sgNsZ::F64 = %MO_F_Neg_W64(%MO_F_Mul_W64(_cgSFV::F64,
                                                     _cgSG9::F64));
           if (%MO_F_Lt_W64(_cgSGj::F64,
                            0.5 :: W64)) goto cgSHM; else goto cgSH0;
       cgSHM: // global
           (_cgSGU::F64) = call MO_F64_Fabs(_sgNsZ::F64);
           if (%MO_F_Lt_W64(_cgSGU::F64,
                            0.5 :: W64)) goto cgSHI; else goto cgSH0;
       cgSHI: // global
           _sgNtd::F64 = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Add_W64(_sgNsW::F64,
                                                                   _sgNsW::F64),
                                                     %MO_F_Mul_W64(_sgNsW::F64, _sgNsW::F64)),
                                       %MO_F_Mul_W64(_sgNsZ::F64, _sgNsZ::F64));
           (_cgSHl::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(_sgNtd::F64,
                                                          1.0 :: W64));
           (_sgNtp::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Quot_W64(_sgNtd::F64,
                                                                                                                                 %MO_F_Add_W64(_cgSHl::F64,
                                                                                                                                               1.0 :: W64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_sgNsW::F64, 1.0 :: W64);
           I64[Sp] = block_cgSHB_info;
           D1 = _sgNsZ::F64;
           R2 = Hp - 7;
           F64[Sp + 8] = _sgNtp::F64;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
       cgSH0: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgSGu_info;
           D2 = _sgNsZ::F64;
           _sgNt3::F64 = %MO_F_Add_W64(_sgNsW::F64, 1.0 :: W64);
           D1 = _sgNt3::F64;
           F64[Sp] = _sgNt3::F64;
           F64[Sp + 8] = _sgNsZ::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSFJ_info" {
     block_cgSFJ_info:
         const _cgSFJ;
         const 65;
         const 4294967326;
         const SgNTw_srt+1352;
 },
 _cgSHB() //  [D1]
         { []
         }
     {offset
       cgSHB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSHL; else goto cgSHK;
       cgSHL: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgSHK: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSHB_info" {
     block_cgSHB_info:
         const _cgSHB;
         const 65;
         const 30;
 },
 _cgSGu() //  [D1]
         { []
         }
     {offset
       cgSGu: // global
           _sgNsZ::F64 = F64[Sp + 16];
           _sgNt3::F64 = F64[Sp + 8];
           _cgSGz::F64 = D1;
           (_cgSGy::F64) = call MO_F64_Log(_cgSGz::F64);
           I64[Sp + 8] = block_cgSGC_info;
           D2 = _sgNsZ::F64;
           D1 = _sgNt3::F64;
           F64[Sp + 16] = _cgSGy::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSGu_info" {
     block_cgSGu_info:
         const _cgSGu;
         const 194;
         const 30;
 },
 _cgSGC() //  [D1]
         { []
         }
     {offset
       cgSGC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSGN; else goto cgSGM;
       cgSGN: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgSGM: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSGC_info" {
     block_cgSGC_info:
         const _cgSGC;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.169893428 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog1mexp_closure" {
     Data.Complex.$fFloatingComplex_$clog1mexp_closure:
         const Data.Complex.$fFloatingComplex_$clog1mexp_info;
         const 0;
 },
 $dNum_sgNtI_entry() //  [R1]
         { []
         }
     {offset
       cgSJx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSJy; else goto cgSJz;
       cgSJy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSJz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgNtI_info" {
     $dNum_sgNtI_info:
         const $dNum_sgNtI_entry;
         const 1;
         const 16;
 },
 $dFractional_sgNtK_entry() //  [R1]
         { []
         }
     {offset
       cgSJI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSJJ; else goto cgSJK;
       cgSJJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSJK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgNtK_info" {
     $dFractional_sgNtK_info:
         const $dFractional_sgNtK_entry;
         const 1;
         const 16;
 },
 sat_sgNtM_entry() //  [R1]
         { []
         }
     {offset
       cgSJP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSJQ; else goto cgSJR;
       cgSJQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSJR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNtM_info" {
     sat_sgNtM_info:
         const sat_sgNtM_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1104;
 },
 sat_sgNtL_entry() //  [R1]
         { []
         }
     {offset
       cgSJW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSJX; else goto cgSJY;
       cgSJX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSJY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNtL_info" {
     sat_sgNtL_info:
         const sat_sgNtL_entry;
         const 2;
         const 18;
 },
 sat_sgNtY_entry() //  [R1]
         { []
         }
     {offset
       cgSK8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSK9; else goto cgSKa;
       cgSK9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSKa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNtY_info" {
     sat_sgNtY_info:
         const sat_sgNtY_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1104;
 },
 sat_sgNtX_entry() //  [R1]
         { []
         }
     {offset
       cgSKf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSKg; else goto cgSKh;
       cgSKg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSKh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNtX_info" {
     sat_sgNtX_info:
         const sat_sgNtX_entry;
         const 2;
         const 18;
 },
 sat_sgNuf_entry() //  [R1]
         { []
         }
     {offset
       cgSKD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgSKE; else goto cgSKF;
       cgSKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNtF::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNtF::P64;
           P64[Sp - 24] = _sgNtF::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNuf_info" {
     sat_sgNuf_info:
         const sat_sgNuf_entry;
         const 2;
         const 18;
 },
 sat_sgNud_entry() //  [R1]
         { []
         }
     {offset
       cgSKO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgSKP; else goto cgSKQ;
       cgSKP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSKQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNtE::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNtE::P64;
           P64[Sp - 24] = _sgNtE::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNud_info" {
     sat_sgNud_info:
         const sat_sgNud_entry;
         const 2;
         const 18;
 },
 sat_sgNub_entry() //  [R1]
         { []
         }
     {offset
       cgSKZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSL0; else goto cgSL1;
       cgSL0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSL1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNub_info" {
     sat_sgNub_info:
         const sat_sgNub_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1280;
 },
 sat_sgNuc_entry() //  [R1]
         { []
         }
     {offset
       cgSL2: // global
           _sgNuc::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSL3; else goto cgSL4;
       cgSL4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSL6; else goto cgSL5;
       cgSL6: // global
           HpAlloc = 24;
           goto cgSL3;
       cgSL3: // global
           R1 = _sgNuc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSL5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNuc::P64;
           _sgNtE::P64 = P64[_sgNuc::P64 + 16];
           _sgNtI::P64 = P64[_sgNuc::P64 + 24];
           I64[Hp - 16] = sat_sgNub_info;
           P64[Hp] = _sgNtI::P64;
           R2 = _sgNtI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNtE::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNuc_info" {
     sat_sgNuc_info:
         const sat_sgNuc_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1280;
 },
 sat_sgNue_entry() //  [R1]
         { []
         }
     {offset
       cgSL7: // global
           _sgNue::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSL8; else goto cgSL9;
       cgSL9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSLb; else goto cgSLa;
       cgSLb: // global
           HpAlloc = 64;
           goto cgSL8;
       cgSL8: // global
           R1 = _sgNue::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNue::P64;
           _sgNtE::P64 = P64[_sgNue::P64 + 16];
           _sgNtI::P64 = P64[_sgNue::P64 + 24];
           I64[Hp - 56] = sat_sgNud_info;
           P64[Hp - 40] = _sgNtE::P64;
           P64[Hp - 32] = _sgNtI::P64;
           I64[Hp - 24] = sat_sgNuc_info;
           P64[Hp - 8] = _sgNtE::P64;
           P64[Hp] = _sgNtI::P64;
           R2 = _sgNtI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNue_info" {
     sat_sgNue_info:
         const sat_sgNue_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1280;
 },
 u_sgNua_entry() //  [R1]
         { []
         }
     {offset
       cgSLc: // global
           _sgNua::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSLd; else goto cgSLe;
       cgSLe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSLg; else goto cgSLf;
       cgSLg: // global
           HpAlloc = 64;
           goto cgSLd;
       cgSLd: // global
           R1 = _sgNua::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNua::P64;
           _sgNtE::P64 = P64[_sgNua::P64 + 16];
           _sgNtF::P64 = P64[_sgNua::P64 + 24];
           _sgNtI::P64 = P64[_sgNua::P64 + 32];
           I64[Hp - 56] = sat_sgNuf_info;
           P64[Hp - 40] = _sgNtF::P64;
           P64[Hp - 32] = _sgNtI::P64;
           I64[Hp - 24] = sat_sgNue_info;
           P64[Hp - 8] = _sgNtE::P64;
           P64[Hp] = _sgNtI::P64;
           R2 = _sgNtI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgNua_info" {
     u_sgNua_info:
         const u_sgNua_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1280;
 },
 sat_sgNuh_entry() //  [R1]
         { []
         }
     {offset
       cgSLx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSLy; else goto cgSLz;
       cgSLy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNuh_info" {
     sat_sgNuh_info:
         const sat_sgNuh_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNui_entry() //  [R1]
         { []
         }
     {offset
       cgSLA: // global
           _sgNui::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSLB; else goto cgSLC;
       cgSLC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSLE; else goto cgSLD;
       cgSLE: // global
           HpAlloc = 24;
           goto cgSLB;
       cgSLB: // global
           R1 = _sgNui::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNui::P64;
           _sgNtI::P64 = P64[_sgNui::P64 + 16];
           _sgNua::P64 = P64[_sgNui::P64 + 24];
           I64[Hp - 16] = sat_sgNuh_info;
           P64[Hp] = _sgNtI::P64;
           R2 = _sgNtI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgNua::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNui_info" {
     sat_sgNui_info:
         const sat_sgNui_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1256;
 },
 sat_sgNuj_entry() //  [R1]
         { []
         }
     {offset
       cgSLF: // global
           _sgNuj::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgSLG; else goto cgSLH;
       cgSLH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgSLJ; else goto cgSLI;
       cgSLJ: // global
           HpAlloc = 32;
           goto cgSLG;
       cgSLG: // global
           R1 = _sgNuj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNuj::P64;
           _sgNtI::P64 = P64[_sgNuj::P64 + 16];
           _sgNu9::P64 = P64[_sgNuj::P64 + 24];
           _sgNua::P64 = P64[_sgNuj::P64 + 32];
           I64[Hp - 24] = sat_sgNui_info;
           P64[Hp - 8] = _sgNtI::P64;
           P64[Hp] = _sgNua::P64;
           R2 = _sgNu9::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNuj_info" {
     sat_sgNuj_info:
         const sat_sgNuj_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1256;
 },
 sat_sgNug_entry() //  [R1]
         { []
         }
     {offset
       cgSLO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSLP; else goto cgSLQ;
       cgSLP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNug_info" {
     sat_sgNug_info:
         const sat_sgNug_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNuk_entry() //  [R1]
         { []
         }
     {offset
       cgSLR: // global
           _sgNuk::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSLS; else goto cgSLT;
       cgSLT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgSLV; else goto cgSLU;
       cgSLV: // global
           HpAlloc = 64;
           goto cgSLS;
       cgSLS: // global
           R1 = _sgNuk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNuk::P64;
           _sgNtI::P64 = P64[_sgNuk::P64 + 16];
           _sgNu9::P64 = P64[_sgNuk::P64 + 24];
           _sgNua::P64 = P64[_sgNuk::P64 + 32];
           I64[Hp - 56] = sat_sgNuj_info;
           P64[Hp - 40] = _sgNtI::P64;
           P64[Hp - 32] = _sgNu9::P64;
           P64[Hp - 24] = _sgNua::P64;
           I64[Hp - 16] = sat_sgNug_info;
           P64[Hp] = _sgNtI::P64;
           R2 = _sgNtI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNuk_info" {
     sat_sgNuk_info:
         const sat_sgNuk_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1256;
 },
 sat_sgNul_entry() //  [R1]
         { []
         }
     {offset
       cgSLW: // global
           _sgNul::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSLX; else goto cgSLY;
       cgSLY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgSM0; else goto cgSLZ;
       cgSM0: // global
           HpAlloc = 80;
           goto cgSLX;
       cgSLX: // global
           R1 = _sgNul::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSLZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNul::P64;
           _sgNtE::P64 = P64[_sgNul::P64 + 16];
           _sgNtF::P64 = P64[_sgNul::P64 + 24];
           _sgNtI::P64 = P64[_sgNul::P64 + 32];
           _sgNtK::P64 = P64[_sgNul::P64 + 40];
           _sgNu9::P64 = P64[_sgNul::P64 + 48];
           I64[Hp - 72] = u_sgNua_info;
           P64[Hp - 56] = _sgNtE::P64;
           P64[Hp - 48] = _sgNtF::P64;
           P64[Hp - 40] = _sgNtI::P64;
           I64[Hp - 32] = sat_sgNuk_info;
           P64[Hp - 16] = _sgNtI::P64;
           P64[Hp - 8] = _sgNu9::P64;
           _cgSKv::P64 = Hp - 72;
           P64[Hp] = _cgSKv::P64;
           R2 = _sgNtK::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _cgSKv::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNul_info" {
     sat_sgNul_info:
         const sat_sgNul_entry;
         const 5;
         const 38654705679;
         const SgNTw_srt+1256;
 },
 sat_sgNun_entry() //  [R1]
         { []
         }
     {offset
       cgSMb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSMc; else goto cgSMd;
       cgSMc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSMd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNun_info" {
     sat_sgNun_info:
         const sat_sgNun_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNuo_entry() //  [R1]
         { []
         }
     {offset
       cgSMe: // global
           _sgNuo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgSMf; else goto cgSMg;
       cgSMg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSMi; else goto cgSMh;
       cgSMi: // global
           HpAlloc = 24;
           goto cgSMf;
       cgSMf: // global
           R1 = _sgNuo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSMh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNuo::P64;
           _sgNtE::P64 = P64[_sgNuo::P64 + 16];
           _sgNtI::P64 = P64[_sgNuo::P64 + 24];
           I64[Hp - 16] = sat_sgNun_info;
           P64[Hp] = _sgNtI::P64;
           R2 = _sgNtI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNtE::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNuo_info" {
     sat_sgNuo_info:
         const sat_sgNuo_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1256;
 },
 section ""relreadonly" . ugSNn_srtd" {
     ugSNn_srtd:
         const SgNTw_srt+520;
         const 106;
         const 1;
         const 2338878128640;
 },
 Data.Complex.$fFloatingComplex_$clog1mexp_entry() //  [R2, R3]
         { []
         }
     {offset
       cgSMj: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgSMk; else goto cgSMl;
       cgSMk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog1mexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgSMl: // global
           I64[Sp - 16] = block_cgSJc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugSNm; else goto cgSJd;
       ugSNm: // global
           call _cgSJc(R1) args: 0, res: 0, upd: 0;
       cgSJd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog1mexp_info" {
     Data.Complex.$fFloatingComplex_$clog1mexp_info:
         const Data.Complex.$fFloatingComplex_$clog1mexp_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugSNn_srtd;
 },
 section ""relreadonly" . ugSNo_srtd" {
     ugSNo_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgSJc() //  [R1]
         { []
         }
     {offset
       cgSJc: // global
           I64[Sp] = block_cgSJh_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSJc_info" {
     block_cgSJc_info:
         const _cgSJc;
         const 1;
         const 18446744069414584350;
         const ugSNo_srtd;
 },
 section ""relreadonly" . ugSNp_srtd" {
     ugSNp_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgSJh() //  [R1, R2]
         { []
         }
     {offset
       cgSJh: // global
           I64[Sp] = block_cgSJj_info;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           call Data.Complex.$w$cnegate_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSJh_info" {
     block_cgSJh_info:
         const _cgSJh;
         const 1;
         const 18446744069414584350;
         const ugSNp_srtd;
 },
 section ""relreadonly" . ugSNq_srtd" {
     ugSNq_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgSJj() //  [R1, R2]
         { []
         }
     {offset
       cgSJj: // global
           I64[Sp - 16] = block_cgSJl_info;
           _sgNtF::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNtF::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSJj_info" {
     block_cgSJj_info:
         const _cgSJj;
         const 1;
         const 18446744069414584350;
         const ugSNq_srtd;
 },
 section ""relreadonly" . ugSNr_srtd" {
     ugSNr_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgSJl() //  [R1]
         { []
         }
     {offset
       cgSJl: // global
           I64[Sp - 8] = block_cgSJp_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSJl_info" {
     block_cgSJl_info:
         const _cgSJl;
         const 3;
         const 18446744069414584350;
         const ugSNr_srtd;
 },
 section ""relreadonly" . ugSNs_srtd" {
     ugSNs_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgSJp() //  [R1]
         { []
         }
     {offset
       cgSJp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSMs; else goto cgSMr;
       cgSMs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSMr: // global
           I64[Hp - 16] = $dNum_sgNtI_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgSJA_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSJp_info" {
     block_cgSJp_info:
         const _cgSJp;
         const 4;
         const 18446744069414584350;
         const ugSNs_srtd;
 },
 section ""relreadonly" . ugSNt_srtd" {
     ugSNt_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgSJA() //  [R1]
         { []
         }
     {offset
       cgSJA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgSMv; else goto cgSMu;
       cgSMv: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSMu: // global
           I64[Hp - 72] = $dFractional_sgNtK_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_sgNtM_info;
           _cgSJE::P64 = Hp - 72;
           P64[Hp - 32] = _cgSJE::P64;
           I64[Hp - 24] = sat_sgNtL_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgSJZ_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 48;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgSJE::P64;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSJA_info" {
     block_cgSJA_info:
         const _cgSJA;
         const 5;
         const 18446744069414584350;
         const ugSNt_srtd;
 },
 section ""relreadonly" . ugSNu_srtd" {
     ugSNu_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854873088;
 },
 _cgSJZ() //  [R1]
         { []
         }
     {offset
       cgSJZ: // global
           if (R1 & 7 == 1) goto cgSMG; else goto cgSMM;
       cgSMG: // global
           I64[Sp + 24] = block_cgSMx_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 48];
           Sp = Sp + 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgSMM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSMP; else goto cgSMO;
       cgSMP: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSMO: // global
           I64[Hp - 48] = sat_sgNtY_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sgNtX_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           _sgNtJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgSKi_info;
           R2 = _sgNtJ::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSJZ_info" {
     block_cgSJZ_info:
         const _cgSJZ;
         const 6;
         const 18446744069414584350;
         const ugSNu_srtd;
 },
 _cgSMx() //  [R1, R2]
         { []
         }
     {offset
       cgSMx: // global
           _sgNtE::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgSMz_info;
           R6 = P64[Sp + 8];
           R5 = _sgNtE::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSMx_info" {
     block_cgSMx_info:
         const _cgSMx;
         const 3;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSMz() //  [R1, R2]
         { []
         }
     {offset
       cgSMz: // global
           _sgNtv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgSMB_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgNtv::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSMz_info" {
     block_cgSMz_info:
         const _cgSMz;
         const 1;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSMB() //  [R1, R2]
         { []
         }
     {offset
       cgSMB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSML; else goto cgSMK;
       cgSML: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgSMK: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSMB_info" {
     block_cgSMB_info:
         const _cgSMB;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugSNv_srtd" {
     ugSNv_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854872576;
 },
 _cgSKi() //  [R1]
         { []
         }
     {offset
       cgSKi: // global
           _sgNtv::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cgSN0; else goto cgSNa;
       cgSN0: // global
           I64[Sp + 16] = block_cgSMR_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = _sgNtv::P64;
           Sp = Sp + 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgSNa: // global
           I64[Sp] = block_cgSKn_info;
           R2 = _sgNtv::P64;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSKi_info" {
     block_cgSKi_info:
         const _cgSKi;
         const 5;
         const 18446744069414584350;
         const ugSNv_srtd;
 },
 _cgSMR() //  [R1, R2]
         { []
         }
     {offset
       cgSMR: // global
           _sgNtE::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgSMT_info;
           R6 = P64[Sp + 8];
           R5 = _sgNtE::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSMR_info" {
     block_cgSMR_info:
         const _cgSMR;
         const 3;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSMT() //  [R1, R2]
         { []
         }
     {offset
       cgSMT: // global
           _sgNtv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgSMV_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgNtv::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSMT_info" {
     block_cgSMT_info:
         const _cgSMT;
         const 1;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgSMV() //  [R1, R2]
         { []
         }
     {offset
       cgSMV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSN5; else goto cgSN4;
       cgSN5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgSN4: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSMV_info" {
     block_cgSMV_info:
         const _cgSMV;
         const 0;
         const 30;
 },
 _cgSKn() //  [R1]
         { []
         }
     {offset
       cgSKn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSNd; else goto cgSNc;
       cgSNd: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSNc: // global
           I64[Hp - 48] = sat_sgNul_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cgSM1_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSKn_info" {
     block_cgSKn_info:
         const _cgSKn;
         const 5;
         const 38654705694;
         const SgNTw_srt+1256;
 },
 _cgSM1() //  [R1]
         { []
         }
     {offset
       cgSM1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgSNg; else goto cgSNf;
       cgSNg: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSNf: // global
           I64[Hp - 24] = sat_sgNuo_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cgSN6_info;
           R2 = P64[Sp + 40];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Float.atan2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSM1_info" {
     block_cgSM1_info:
         const _cgSM1;
         const 133;
         const 4294967326;
         const SgNTw_srt+1256;
 },
 _cgSN6() //  [R1]
         { []
         }
     {offset
       cgSN6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgSNj; else goto cgSNi;
       cgSNj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSNi: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSN6_info" {
     block_cgSN6_info:
         const _cgSN6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.246624664 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1pexp1_entry() //  [R2]
         { []
         }
     {offset
       cgSS3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgSSc; else goto cgSSd;
       cgSSc: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSSd: // global
           I64[Sp - 8] = block_cgSS0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSUa; else goto cgSS1;
       ugSUa: // global
           call _cgSS0(R1) args: 0, res: 0, upd: 0;
       cgSS1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1pexp1_info" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp1_info:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_entry;
         const 0;
         const 1103806595086;
         const 4294967301;
         const SgNTw_srt+1304;
 },
 _cgSS0() //  [R1]
         { []
         }
     {offset
       cgSS0: // global
           I64[Sp - 8] = block_cgSS6_info;
           _sgNut::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNut::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSU9; else goto cgSS7;
       ugSU9: // global
           call _cgSS6(R1) args: 0, res: 0, upd: 0;
       cgSS7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSS0_info" {
     block_cgSS0_info:
         const _cgSS0;
         const 0;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSS6() //  [R1]
         { []
         }
     {offset
       cgSS6: // global
           I64[Sp] = block_cgSSb_info;
           _sgNuv::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNuv::F32;
           if (R1 & 7 != 0) goto ugSUb; else goto cgSSg;
       ugSUb: // global
           call _cgSSb(R1) args: 0, res: 0, upd: 0;
       cgSSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSS6_info" {
     block_cgSS6_info:
         const _cgSS6;
         const 1;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSSb() //  [R1]
         { []
         }
     {offset
       cgSSb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgSSm; else goto cgSSl;
       cgSSm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSSl: // global
           _sgNux::F32 = F32[R1 + 7];
           (_cgSSn::F32) = call MO_F32_Exp(F32[Sp + 8]);
           (_cgSSr::F32) = call MO_F32_Cos(_sgNux::F32);
           (_cgSSy::F32) = call MO_F32_Sin(_sgNux::F32);
           _sgNuz::F32 = %MO_F_Mul_W32(_cgSSn::F32, _cgSSr::F32);
           (_cgSSF::F32) = call MO_F32_Fabs(_sgNuz::F32);
           _sgNuB::F32 = %MO_F_Mul_W32(_cgSSn::F32, _cgSSy::F32);
           if (%MO_F_Lt_W32(_cgSSF::F32,
                            0.5 :: W32)) goto cgSU8; else goto cgSTm;
       cgSU8: // global
           (_cgSTg::F32) = call MO_F32_Fabs(_sgNuB::F32);
           if (%MO_F_Lt_W32(_cgSTg::F32,
                            0.5 :: W32)) goto cgSU4; else goto cgSTm;
       cgSU4: // global
           _sgNuO::F32 = %MO_F_Add_W32(%MO_F_Add_W32(%MO_F_Add_W32(_sgNuz::F32,
                                                                   _sgNuz::F32),
                                                     %MO_F_Mul_W32(_sgNuz::F32, _sgNuz::F32)),
                                       %MO_F_Mul_W32(_sgNuB::F32, _sgNuB::F32));
           (_cgSTH::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(_sgNuO::F32,
                                                          1.0 :: W32));
           (_sgNv0::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Quot_W32(_sgNuO::F32,
                                                                                                                                  %MO_F_Add_W32(_cgSTH::F32,
                                                                                                                                                1.0 :: W32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_sgNuz::F32, 1.0 :: W32);
           I64[Sp] = block_cgSTX_info;
           F1 = _sgNuB::F32;
           R2 = Hp - 7;
           F32[Sp + 8] = _sgNv0::F32;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
       cgSTm: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgSSQ_info;
           F2 = _sgNuB::F32;
           _sgNuE::F32 = %MO_F_Add_W32(_sgNuz::F32, 1.0 :: W32);
           F1 = _sgNuE::F32;
           F32[Sp] = _sgNuE::F32;
           F32[Sp + 8] = _sgNuB::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSSb_info" {
     block_cgSSb_info:
         const _cgSSb;
         const 65;
         const 4294967326;
         const SgNTw_srt+1304;
 },
 _cgSTX() //  [F1]
         { []
         }
     {offset
       cgSTX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSU7; else goto cgSU6;
       cgSU7: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgSU6: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSTX_info" {
     block_cgSTX_info:
         const _cgSTX;
         const 65;
         const 30;
 },
 _cgSSQ() //  [F1]
         { []
         }
     {offset
       cgSSQ: // global
           _sgNuB::F32 = F32[Sp + 16];
           _sgNuE::F32 = F32[Sp + 8];
           _cgSSV::F32 = F1;
           (_cgSSU::F32) = call MO_F32_Log(_cgSSV::F32);
           I64[Sp + 8] = block_cgSSY_info;
           F2 = _sgNuB::F32;
           F1 = _sgNuE::F32;
           F32[Sp + 16] = _cgSSU::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSSQ_info" {
     block_cgSSQ_info:
         const _cgSSQ;
         const 194;
         const 30;
 },
 _cgSSY() //  [F1]
         { []
         }
     {offset
       cgSSY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgST9; else goto cgST8;
       cgST9: // global
           HpAlloc = 56;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       cgST8: // global
           I64[Hp - 48] = GHC.Types.F#_con_info;
           F32[Hp - 40] = F1;
           I64[Hp - 32] = GHC.Types.F#_con_info;
           F32[Hp - 24] = F32[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSSY_info" {
     block_cgSSY_info:
         const _cgSSY;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.265029555 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clog1pexp_closure" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp_closure:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$s$clog1pexp_entry() //  [R2]
         { []
         }
     {offset
       cgSVx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgSVG; else goto cgSVH;
       cgSVG: // global
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clog1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgSVH: // global
           I64[Sp - 8] = block_cgSVu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSXE; else goto cgSVv;
       ugSXE: // global
           call _cgSVu(R1) args: 0, res: 0, upd: 0;
       cgSVv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clog1pexp_info" {
     Data.Complex.$fFloatingComplex_$s$clog1pexp_info:
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SgNTw_srt+1352;
 },
 _cgSVu() //  [R1]
         { []
         }
     {offset
       cgSVu: // global
           I64[Sp - 8] = block_cgSVA_info;
           _sgNv9::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNv9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugSXD; else goto cgSVB;
       ugSXD: // global
           call _cgSVA(R1) args: 0, res: 0, upd: 0;
       cgSVB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSVu_info" {
     block_cgSVu_info:
         const _cgSVu;
         const 0;
         const 4294967326;
         const SgNTw_srt+1352;
 },
 _cgSVA() //  [R1]
         { []
         }
     {offset
       cgSVA: // global
           I64[Sp] = block_cgSVF_info;
           _sgNvb::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNvb::F64;
           if (R1 & 7 != 0) goto ugSXF; else goto cgSVK;
       ugSXF: // global
           call _cgSVF(R1) args: 0, res: 0, upd: 0;
       cgSVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSVA_info" {
     block_cgSVA_info:
         const _cgSVA;
         const 1;
         const 4294967326;
         const SgNTw_srt+1352;
 },
 _cgSVF() //  [R1]
         { []
         }
     {offset
       cgSVF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgSVQ; else goto cgSVP;
       cgSVQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgSVP: // global
           _sgNvd::F64 = F64[R1 + 7];
           (_cgSVR::F64) = call MO_F64_Exp(F64[Sp + 8]);
           (_cgSVV::F64) = call MO_F64_Cos(_sgNvd::F64);
           (_cgSW2::F64) = call MO_F64_Sin(_sgNvd::F64);
           _sgNvf::F64 = %MO_F_Mul_W64(_cgSVR::F64, _cgSVV::F64);
           (_cgSW9::F64) = call MO_F64_Fabs(_sgNvf::F64);
           _sgNvh::F64 = %MO_F_Mul_W64(_cgSVR::F64, _cgSW2::F64);
           if (%MO_F_Lt_W64(_cgSW9::F64,
                            0.5 :: W64)) goto cgSXC; else goto cgSWQ;
       cgSXC: // global
           (_cgSWK::F64) = call MO_F64_Fabs(_sgNvh::F64);
           if (%MO_F_Lt_W64(_cgSWK::F64,
                            0.5 :: W64)) goto cgSXy; else goto cgSWQ;
       cgSXy: // global
           _sgNvu::F64 = %MO_F_Add_W64(%MO_F_Add_W64(%MO_F_Add_W64(_sgNvf::F64,
                                                                   _sgNvf::F64),
                                                     %MO_F_Mul_W64(_sgNvf::F64, _sgNvf::F64)),
                                       %MO_F_Mul_W64(_sgNvh::F64, _sgNvh::F64));
           (_cgSXb::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(_sgNvu::F64,
                                                          1.0 :: W64));
           (_sgNvG::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Quot_W64(_sgNvu::F64,
                                                                                                                                 %MO_F_Add_W64(_cgSXb::F64,
                                                                                                                                               1.0 :: W64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_sgNvf::F64, 1.0 :: W64);
           I64[Sp] = block_cgSXr_info;
           D1 = _sgNvh::F64;
           R2 = Hp - 7;
           F64[Sp + 8] = _sgNvG::F64;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
       cgSWQ: // global
           Hp = Hp - 16;
           I64[Sp - 8] = block_cgSWk_info;
           D2 = _sgNvh::F64;
           _sgNvk::F64 = %MO_F_Add_W64(_sgNvf::F64, 1.0 :: W64);
           D1 = _sgNvk::F64;
           F64[Sp] = _sgNvk::F64;
           F64[Sp + 8] = _sgNvh::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSVF_info" {
     block_cgSVF_info:
         const _cgSVF;
         const 65;
         const 4294967326;
         const SgNTw_srt+1352;
 },
 _cgSXr() //  [D1]
         { []
         }
     {offset
       cgSXr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSXB; else goto cgSXA;
       cgSXB: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgSXA: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSXr_info" {
     block_cgSXr_info:
         const _cgSXr;
         const 65;
         const 30;
 },
 _cgSWk() //  [D1]
         { []
         }
     {offset
       cgSWk: // global
           _sgNvh::F64 = F64[Sp + 16];
           _sgNvk::F64 = F64[Sp + 8];
           _cgSWp::F64 = D1;
           (_cgSWo::F64) = call MO_F64_Log(_cgSWp::F64);
           I64[Sp + 8] = block_cgSWs_info;
           D2 = _sgNvh::F64;
           D1 = _sgNvk::F64;
           F64[Sp + 16] = _cgSWo::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSWk_info" {
     block_cgSWk_info:
         const _cgSWk;
         const 194;
         const 30;
 },
 _cgSWs() //  [D1]
         { []
         }
     {offset
       cgSWs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgSWD; else goto cgSWC;
       cgSWD: // global
           HpAlloc = 56;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       cgSWC: // global
           I64[Hp - 48] = GHC.Types.D#_con_info;
           F64[Hp - 40] = D1;
           I64[Hp - 32] = GHC.Types.D#_con_info;
           F64[Hp - 24] = F64[Sp + 8];
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSWs_info" {
     block_cgSWs_info:
         const _cgSWs;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.296219911 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clog1pexp_closure" {
     Data.Complex.$fFloatingComplex_$clog1pexp_closure:
         const Data.Complex.$fFloatingComplex_$clog1pexp_info;
         const 0;
 },
 $dNum_sgNvW_entry() //  [R1]
         { []
         }
     {offset
       cgSZh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSZi; else goto cgSZj;
       cgSZi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSZj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_sgNvW_info" {
     $dNum_sgNvW_info:
         const $dNum_sgNvW_entry;
         const 1;
         const 16;
 },
 $dFractional_sgNvY_entry() //  [R1]
         { []
         }
     {offset
       cgSZs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgSZt; else goto cgSZu;
       cgSZt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_sgNvY_info" {
     $dFractional_sgNvY_info:
         const $dFractional_sgNvY_entry;
         const 1;
         const 16;
 },
 sat_sgNw0_entry() //  [R1]
         { []
         }
     {offset
       cgSZz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSZA; else goto cgSZB;
       cgSZA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSZB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNw0_info" {
     sat_sgNw0_info:
         const sat_sgNw0_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1384;
 },
 sat_sgNvZ_entry() //  [R1]
         { []
         }
     {offset
       cgSZG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSZH; else goto cgSZI;
       cgSZH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSZI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNvZ_info" {
     sat_sgNvZ_info:
         const sat_sgNvZ_entry;
         const 2;
         const 18;
 },
 sat_sgNwc_entry() //  [R1]
         { []
         }
     {offset
       cgSZS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgSZT; else goto cgSZU;
       cgSZT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgSZU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex20_closure+1;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwc_info" {
     sat_sgNwc_info:
         const sat_sgNwc_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1384;
 },
 sat_sgNwb_entry() //  [R1]
         { []
         }
     {offset
       cgSZZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgT00; else goto cgT01;
       cgT00: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT01: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwb_info" {
     sat_sgNwb_info:
         const sat_sgNwb_entry;
         const 2;
         const 18;
 },
 sat_sgNwt_entry() //  [R1]
         { []
         }
     {offset
       cgT0n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgT0o; else goto cgT0p;
       cgT0o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT0p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNvT::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNvT::P64;
           P64[Sp - 24] = _sgNvT::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwt_info" {
     sat_sgNwt_info:
         const sat_sgNwt_entry;
         const 2;
         const 18;
 },
 sat_sgNwr_entry() //  [R1]
         { []
         }
     {offset
       cgT0y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgT0z; else goto cgT0A;
       cgT0z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT0A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _sgNvS::P64 = P64[R1 + 16];
           P64[Sp - 32] = _sgNvS::P64;
           P64[Sp - 24] = _sgNvS::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwr_info" {
     sat_sgNwr_info:
         const sat_sgNwr_entry;
         const 2;
         const 18;
 },
 sat_sgNwp_entry() //  [R1]
         { []
         }
     {offset
       cgT0J: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgT0K; else goto cgT0L;
       cgT0K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT0L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex21_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwp_info" {
     sat_sgNwp_info:
         const sat_sgNwp_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1280;
 },
 sat_sgNwq_entry() //  [R1]
         { []
         }
     {offset
       cgT0M: // global
           _sgNwq::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgT0N; else goto cgT0O;
       cgT0O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT0Q; else goto cgT0P;
       cgT0Q: // global
           HpAlloc = 24;
           goto cgT0N;
       cgT0N: // global
           R1 = _sgNwq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT0P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNwq::P64;
           _sgNvS::P64 = P64[_sgNwq::P64 + 16];
           _sgNvW::P64 = P64[_sgNwq::P64 + 24];
           I64[Hp - 16] = sat_sgNwp_info;
           P64[Hp] = _sgNvW::P64;
           R2 = _sgNvW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNvS::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwq_info" {
     sat_sgNwq_info:
         const sat_sgNwq_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1280;
 },
 sat_sgNws_entry() //  [R1]
         { []
         }
     {offset
       cgT0R: // global
           _sgNws::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgT0S; else goto cgT0T;
       cgT0T: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgT0V; else goto cgT0U;
       cgT0V: // global
           HpAlloc = 64;
           goto cgT0S;
       cgT0S: // global
           R1 = _sgNws::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT0U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNws::P64;
           _sgNvS::P64 = P64[_sgNws::P64 + 16];
           _sgNvW::P64 = P64[_sgNws::P64 + 24];
           I64[Hp - 56] = sat_sgNwr_info;
           P64[Hp - 40] = _sgNvS::P64;
           P64[Hp - 32] = _sgNvW::P64;
           I64[Hp - 24] = sat_sgNwq_info;
           P64[Hp - 8] = _sgNvS::P64;
           P64[Hp] = _sgNvW::P64;
           R2 = _sgNvW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNws_info" {
     sat_sgNws_info:
         const sat_sgNws_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1280;
 },
 u_sgNwo_entry() //  [R1]
         { []
         }
     {offset
       cgT0W: // global
           _sgNwo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgT0X; else goto cgT0Y;
       cgT0Y: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgT10; else goto cgT0Z;
       cgT10: // global
           HpAlloc = 64;
           goto cgT0X;
       cgT0X: // global
           R1 = _sgNwo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT0Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNwo::P64;
           _sgNvS::P64 = P64[_sgNwo::P64 + 16];
           _sgNvT::P64 = P64[_sgNwo::P64 + 24];
           _sgNvW::P64 = P64[_sgNwo::P64 + 32];
           I64[Hp - 56] = sat_sgNwt_info;
           P64[Hp - 40] = _sgNvT::P64;
           P64[Hp - 32] = _sgNvW::P64;
           I64[Hp - 24] = sat_sgNws_info;
           P64[Hp - 8] = _sgNvS::P64;
           P64[Hp] = _sgNvW::P64;
           R2 = _sgNvW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u_sgNwo_info" {
     u_sgNwo_info:
         const u_sgNwo_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1280;
 },
 sat_sgNwv_entry() //  [R1]
         { []
         }
     {offset
       cgT1h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgT1i; else goto cgT1j;
       cgT1i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT1j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwv_info" {
     sat_sgNwv_info:
         const sat_sgNwv_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNww_entry() //  [R1]
         { []
         }
     {offset
       cgT1k: // global
           _sgNww::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgT1l; else goto cgT1m;
       cgT1m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT1o; else goto cgT1n;
       cgT1o: // global
           HpAlloc = 24;
           goto cgT1l;
       cgT1l: // global
           R1 = _sgNww::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT1n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNww::P64;
           _sgNvW::P64 = P64[_sgNww::P64 + 16];
           _sgNwo::P64 = P64[_sgNww::P64 + 24];
           I64[Hp - 16] = sat_sgNwv_info;
           P64[Hp] = _sgNvW::P64;
           R2 = _sgNvW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgNwo::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNww_info" {
     sat_sgNww_info:
         const sat_sgNww_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1256;
 },
 sat_sgNwx_entry() //  [R1]
         { []
         }
     {offset
       cgT1p: // global
           _sgNwx::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgT1q; else goto cgT1r;
       cgT1r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgT1t; else goto cgT1s;
       cgT1t: // global
           HpAlloc = 32;
           goto cgT1q;
       cgT1q: // global
           R1 = _sgNwx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT1s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNwx::P64;
           _sgNvW::P64 = P64[_sgNwx::P64 + 16];
           _sgNwn::P64 = P64[_sgNwx::P64 + 24];
           _sgNwo::P64 = P64[_sgNwx::P64 + 32];
           I64[Hp - 24] = sat_sgNww_info;
           P64[Hp - 8] = _sgNvW::P64;
           P64[Hp] = _sgNwo::P64;
           R2 = _sgNwn::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.sqrt_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwx_info" {
     sat_sgNwx_info:
         const sat_sgNwx_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1256;
 },
 sat_sgNwu_entry() //  [R1]
         { []
         }
     {offset
       cgT1y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgT1z; else goto cgT1A;
       cgT1z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT1A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwu_info" {
     sat_sgNwu_info:
         const sat_sgNwu_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNwy_entry() //  [R1]
         { []
         }
     {offset
       cgT1B: // global
           _sgNwy::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgT1C; else goto cgT1D;
       cgT1D: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgT1F; else goto cgT1E;
       cgT1F: // global
           HpAlloc = 64;
           goto cgT1C;
       cgT1C: // global
           R1 = _sgNwy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT1E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNwy::P64;
           _sgNvW::P64 = P64[_sgNwy::P64 + 16];
           _sgNwn::P64 = P64[_sgNwy::P64 + 24];
           _sgNwo::P64 = P64[_sgNwy::P64 + 32];
           I64[Hp - 56] = sat_sgNwx_info;
           P64[Hp - 40] = _sgNvW::P64;
           P64[Hp - 32] = _sgNwn::P64;
           P64[Hp - 24] = _sgNwo::P64;
           I64[Hp - 16] = sat_sgNwu_info;
           P64[Hp] = _sgNvW::P64;
           R2 = _sgNvW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwy_info" {
     sat_sgNwy_info:
         const sat_sgNwy_entry;
         const 3;
         const 4294967311;
         const SgNTw_srt+1256;
 },
 sat_sgNwz_entry() //  [R1]
         { []
         }
     {offset
       cgT1G: // global
           _sgNwz::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgT1H; else goto cgT1I;
       cgT1I: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgT1K; else goto cgT1J;
       cgT1K: // global
           HpAlloc = 80;
           goto cgT1H;
       cgT1H: // global
           R1 = _sgNwz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT1J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNwz::P64;
           _sgNvS::P64 = P64[_sgNwz::P64 + 16];
           _sgNvT::P64 = P64[_sgNwz::P64 + 24];
           _sgNvW::P64 = P64[_sgNwz::P64 + 32];
           _sgNvY::P64 = P64[_sgNwz::P64 + 40];
           _sgNwn::P64 = P64[_sgNwz::P64 + 48];
           I64[Hp - 72] = u_sgNwo_info;
           P64[Hp - 56] = _sgNvS::P64;
           P64[Hp - 48] = _sgNvT::P64;
           P64[Hp - 40] = _sgNvW::P64;
           I64[Hp - 32] = sat_sgNwy_info;
           P64[Hp - 16] = _sgNvW::P64;
           P64[Hp - 8] = _sgNwn::P64;
           _cgT0f::P64 = Hp - 72;
           P64[Hp] = _cgT0f::P64;
           R2 = _sgNvY::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _cgT0f::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwz_info" {
     sat_sgNwz_info:
         const sat_sgNwz_entry;
         const 5;
         const 38654705679;
         const SgNTw_srt+1256;
 },
 sat_sgNwB_entry() //  [R1]
         { []
         }
     {offset
       cgT1V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgT1W; else goto cgT1X;
       cgT1W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT1X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Complex.$fFloatingComplex19_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwB_info" {
     sat_sgNwB_info:
         const sat_sgNwB_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1256;
 },
 sat_sgNwC_entry() //  [R1]
         { []
         }
     {offset
       cgT1Y: // global
           _sgNwC::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgT1Z; else goto cgT20;
       cgT20: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT22; else goto cgT21;
       cgT22: // global
           HpAlloc = 24;
           goto cgT1Z;
       cgT1Z: // global
           R1 = _sgNwC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgT21: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgNwC::P64;
           _sgNvS::P64 = P64[_sgNwC::P64 + 16];
           _sgNvW::P64 = P64[_sgNwC::P64 + 24];
           I64[Hp - 16] = sat_sgNwB_info;
           P64[Hp] = _sgNvW::P64;
           R2 = _sgNvW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgNvS::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNwC_info" {
     sat_sgNwC_info:
         const sat_sgNwC_entry;
         const 2;
         const 4294967314;
         const SgNTw_srt+1256;
 },
 section ""relreadonly" . ugT36_srtd" {
     ugT36_srtd:
         const SgNTw_srt+520;
         const 110;
         const 1;
         const 52916413005824;
 },
 Data.Complex.$fFloatingComplex_$clog1pexp_entry() //  [R2, R3]
         { []
         }
     {offset
       cgT23: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgT24; else goto cgT25;
       cgT24: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clog1pexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgT25: // global
           I64[Sp - 16] = block_cgSYY_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugT35; else goto cgSYZ;
       ugT35: // global
           call _cgSYY(R1) args: 0, res: 0, upd: 0;
       cgSYZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clog1pexp_info" {
     Data.Complex.$fFloatingComplex_$clog1pexp_info:
         const Data.Complex.$fFloatingComplex_$clog1pexp_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugT36_srtd;
 },
 section ""relreadonly" . ugT37_srtd" {
     ugT37_srtd:
         const SgNTw_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgSYY() //  [R1]
         { []
         }
     {offset
       cgSYY: // global
           I64[Sp] = block_cgSZ3_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$cexp_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSYY_info" {
     block_cgSYY_info:
         const _cgSYY;
         const 1;
         const 18446744069414584350;
         const ugT37_srtd;
 },
 section ""relreadonly" . ugT38_srtd" {
     ugT38_srtd:
         const SgNTw_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgSZ3() //  [R1, R2]
         { []
         }
     {offset
       cgSZ3: // global
           I64[Sp - 16] = block_cgSZ5_info;
           _sgNvT::P64 = R2;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = _sgNvT::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSZ3_info" {
     block_cgSZ3_info:
         const _cgSZ3;
         const 1;
         const 18446744069414584350;
         const ugT38_srtd;
 },
 section ""relreadonly" . ugT39_srtd" {
     ugT39_srtd:
         const SgNTw_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgSZ5() //  [R1]
         { []
         }
     {offset
       cgSZ5: // global
           I64[Sp - 8] = block_cgSZ9_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSZ5_info" {
     block_cgSZ5_info:
         const _cgSZ5;
         const 3;
         const 18446744069414584350;
         const ugT39_srtd;
 },
 section ""relreadonly" . ugT3a_srtd" {
     ugT3a_srtd:
         const SgNTw_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgSZ9() //  [R1]
         { []
         }
     {offset
       cgSZ9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT2b; else goto cgT2a;
       cgT2b: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgT2a: // global
           I64[Hp - 16] = $dNum_sgNvW_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cgSZk_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSZ9_info" {
     block_cgSZ9_info:
         const _cgSZ9;
         const 4;
         const 18446744069414584350;
         const ugT3a_srtd;
 },
 section ""relreadonly" . ugT3b_srtd" {
     ugT3b_srtd:
         const SgNTw_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgSZk() //  [R1]
         { []
         }
     {offset
       cgSZk: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgT2e; else goto cgT2d;
       cgT2e: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgT2d: // global
           I64[Hp - 72] = $dFractional_sgNvY_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_sgNw0_info;
           _cgSZo::P64 = Hp - 72;
           P64[Hp - 32] = _cgSZo::P64;
           I64[Hp - 24] = sat_sgNvZ_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cgSZJ_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 48;
           P64[Sp] = R1;
           P64[Sp + 16] = _cgSZo::P64;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSZk_info" {
     block_cgSZk_info:
         const _cgSZk;
         const 5;
         const 18446744069414584350;
         const ugT3b_srtd;
 },
 section ""relreadonly" . ugT3c_srtd" {
     ugT3c_srtd:
         const SgNTw_srt+520;
         const 109;
         const 1;
         const 17732040916992;
 },
 _cgSZJ() //  [R1]
         { []
         }
     {offset
       cgSZJ: // global
           if (R1 & 7 == 1) goto cgT2p; else goto cgT2v;
       cgT2p: // global
           I64[Sp + 24] = block_cgT2g_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = P64[Sp + 48];
           Sp = Sp + 24;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgT2v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgT2y; else goto cgT2x;
       cgT2y: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgT2x: // global
           I64[Hp - 48] = sat_sgNwc_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sgNwb_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           _sgNvX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgT02_info;
           R2 = _sgNvX::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgSZJ_info" {
     block_cgSZJ_info:
         const _cgSZJ;
         const 6;
         const 18446744069414584350;
         const ugT3c_srtd;
 },
 _cgT2g() //  [R1, R2]
         { []
         }
     {offset
       cgT2g: // global
           _sgNvS::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgT2i_info;
           R6 = P64[Sp + 8];
           R5 = _sgNvS::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT2g_info" {
     block_cgT2g_info:
         const _cgT2g;
         const 3;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgT2i() //  [R1, R2]
         { []
         }
     {offset
       cgT2i: // global
           _sgNvM::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgT2k_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgNvM::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT2i_info" {
     block_cgT2i_info:
         const _cgT2i;
         const 1;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgT2k() //  [R1, R2]
         { []
         }
     {offset
       cgT2k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT2u; else goto cgT2t;
       cgT2u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgT2t: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT2k_info" {
     block_cgT2k_info:
         const _cgT2k;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugT3d_srtd" {
     ugT3d_srtd:
         const SgNTw_srt+520;
         const 102;
         const 1;
         const 139854872576;
 },
 _cgT02() //  [R1]
         { []
         }
     {offset
       cgT02: // global
           _sgNvM::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cgT2J; else goto cgT2T;
       cgT2J: // global
           I64[Sp + 16] = block_cgT2A_info;
           R3 = Data.Complex.$fFloatingComplex19_closure;
           R2 = _sgNvM::P64;
           Sp = Sp + 16;
           call Data.Complex.$w$cfromInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       cgT2T: // global
           I64[Sp] = block_cgT07_info;
           R2 = _sgNvM::P64;
           call GHC.Float.$p2RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT02_info" {
     block_cgT02_info:
         const _cgT02;
         const 5;
         const 18446744069414584350;
         const ugT3d_srtd;
 },
 _cgT2A() //  [R1, R2]
         { []
         }
     {offset
       cgT2A: // global
           _sgNvS::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgT2C_info;
           R6 = P64[Sp + 8];
           R5 = _sgNvS::P64;
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 24];
           Sp = Sp + 16;
           call Data.Complex.$w$c+_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT2A_info" {
     block_cgT2A_info:
         const _cgT2A;
         const 3;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgT2C() //  [R1, R2]
         { []
         }
     {offset
       cgT2C: // global
           _sgNvM::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgT2E_info;
           R4 = R2;
           R3 = R1;
           R2 = _sgNvM::P64;
           Sp = Sp + 8;
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT2C_info" {
     block_cgT2C_info:
         const _cgT2C;
         const 1;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgT2E() //  [R1, R2]
         { []
         }
     {offset
       cgT2E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT2O; else goto cgT2N;
       cgT2O: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgT2N: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT2E_info" {
     block_cgT2E_info:
         const _cgT2E;
         const 0;
         const 30;
 },
 _cgT07() //  [R1]
         { []
         }
     {offset
       cgT07: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgT2W; else goto cgT2V;
       cgT2W: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgT2V: // global
           I64[Hp - 48] = sat_sgNwz_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cgT1L_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT07_info" {
     block_cgT07_info:
         const _cgT07;
         const 5;
         const 38654705694;
         const SgNTw_srt+1256;
 },
 _cgT1L() //  [R1]
         { []
         }
     {offset
       cgT1L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgT2Z; else goto cgT2Y;
       cgT2Z: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgT2Y: // global
           I64[Hp - 24] = sat_sgNwC_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cgT2P_info;
           R2 = P64[Sp + 40];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call GHC.Float.atan2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT1L_info" {
     block_cgT1L_info:
         const _cgT1L;
         const 133;
         const 4294967326;
         const SgNTw_srt+1256;
 },
 _cgT2P() //  [R1]
         { []
         }
     {offset
       cgT2P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT32; else goto cgT31;
       cgT32: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgT31: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT2P_info" {
     block_cgT2P_info:
         const _cgT2P;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.371618913 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clogBase1_closure" {
     Data.Complex.$fFloatingComplex_$s$clogBase1_closure:
         const Data.Complex.$fFloatingComplex_$s$clogBase1_info;
         const 0;
 },
 section ""relreadonly" . ugT8U_srtd" {
     ugT8U_srtd:
         const SgNTw_srt+1040;
         const 46;
         const 35192962023425;
 },
 Data.Complex.$fFloatingComplex_$s$clogBase1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgT7G: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgT8z; else goto cgT8A;
       cgT8z: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clogBase1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgT8A: // global
           I64[Sp - 16] = block_cgT7D_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugT8P; else goto cgT7E;
       ugT8P: // global
           call _cgT7D(R1) args: 0, res: 0, upd: 0;
       cgT7E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clogBase1_info" {
     Data.Complex.$fFloatingComplex_$s$clogBase1_info:
         const Data.Complex.$fFloatingComplex_$s$clogBase1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugT8U_srtd;
 },
 section ""relreadonly" . ugT8V_srtd" {
     ugT8V_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT7D() //  [R1]
         { []
         }
     {offset
       cgT7D: // global
           I64[Sp - 8] = block_cgT7J_info;
           _sgNwI::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNwI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugT8O; else goto cgT7K;
       ugT8O: // global
           call _cgT7J(R1) args: 0, res: 0, upd: 0;
       cgT7K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT7D_info" {
     block_cgT7D_info:
         const _cgT7D;
         const 1;
         const 18446744069414584350;
         const ugT8V_srtd;
 },
 section ""relreadonly" . ugT8W_srtd" {
     ugT8W_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT7J() //  [R1]
         { []
         }
     {offset
       cgT7J: // global
           I64[Sp] = block_cgT7O_info;
           _sgNwK::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNwK::F32;
           if (R1 & 7 != 0) goto ugT8Q; else goto cgT7P;
       ugT8Q: // global
           call _cgT7O(R1) args: 0, res: 0, upd: 0;
       cgT7P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT7J_info" {
     block_cgT7J_info:
         const _cgT7J;
         const 2;
         const 18446744069414584350;
         const ugT8W_srtd;
 },
 section ""relreadonly" . ugT8X_srtd" {
     ugT8X_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT7O() //  [R1]
         { []
         }
     {offset
       cgT7O: // global
           I64[Sp - 8] = block_cgT7T_info;
           _sgNwM::F32 = F32[R1 + 7];
           F2 = _sgNwM::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgNwM::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT7O_info" {
     block_cgT7O_info:
         const _cgT7O;
         const 66;
         const 18446744069414584350;
         const ugT8X_srtd;
 },
 section ""relreadonly" . ugT8Y_srtd" {
     ugT8Y_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT7T() //  [F1]
         { []
         }
     {offset
       cgT7T: // global
           _sgNwK::F32 = F32[Sp + 16];
           _sgNwM::F32 = F32[Sp + 8];
           _cgT7Y::F32 = F1;
           (_cgT7X::F32) = call MO_F32_Log(_cgT7Y::F32);
           I64[Sp + 8] = block_cgT81_info;
           F2 = _sgNwM::F32;
           F1 = _sgNwK::F32;
           F32[Sp + 16] = _cgT7X::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT7T_info" {
     block_cgT7T_info:
         const _cgT7T;
         const 195;
         const 18446744069414584350;
         const ugT8Y_srtd;
 },
 section ""relreadonly" . ugT8Z_srtd" {
     ugT8Z_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT81() //  [F1]
         { []
         }
     {offset
       cgT81: // global
           I64[Sp] = block_cgT85_info;
           R1 = P64[Sp + 16];
           F32[Sp + 16] = F1;
           if (R1 & 7 != 0) goto ugT8R; else goto cgT86;
       ugT8R: // global
           call _cgT85(R1) args: 0, res: 0, upd: 0;
       cgT86: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT81_info" {
     block_cgT81_info:
         const _cgT81;
         const 66;
         const 18446744069414584350;
         const ugT8Z_srtd;
 },
 section ""relreadonly" . ugT90_srtd" {
     ugT90_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT85() //  [R1]
         { []
         }
     {offset
       cgT85: // global
           I64[Sp - 8] = block_cgT8a_info;
           _sgNwS::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNwS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugT8S; else goto cgT8b;
       ugT8S: // global
           call _cgT8a(R1) args: 0, res: 0, upd: 0;
       cgT8b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT85_info" {
     block_cgT85_info:
         const _cgT85;
         const 194;
         const 18446744069414584350;
         const ugT90_srtd;
 },
 section ""relreadonly" . ugT91_srtd" {
     ugT91_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT8a() //  [R1]
         { []
         }
     {offset
       cgT8a: // global
           I64[Sp] = block_cgT8f_info;
           _sgNwU::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _sgNwU::F32;
           if (R1 & 7 != 0) goto ugT8T; else goto cgT8g;
       ugT8T: // global
           call _cgT8f(R1) args: 0, res: 0, upd: 0;
       cgT8g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT8a_info" {
     block_cgT8a_info:
         const _cgT8a;
         const 387;
         const 18446744069414584350;
         const ugT91_srtd;
 },
 section ""relreadonly" . ugT92_srtd" {
     ugT92_srtd:
         const SgNTw_srt+1040;
         const 34;
         const 8589934593;
 },
 _cgT8f() //  [R1]
         { []
         }
     {offset
       cgT8f: // global
           I64[Sp - 8] = block_cgT8k_info;
           _sgNwW::F32 = F32[R1 + 7];
           F2 = _sgNwW::F32;
           F1 = F32[Sp + 8];
           F32[Sp] = _sgNwW::F32;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude1_entry(F2,
                                                  F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT8f_info" {
     block_cgT8f_info:
         const _cgT8f;
         const 451;
         const 18446744069414584350;
         const ugT92_srtd;
 },
 _cgT8k() //  [F1]
         { []
         }
     {offset
       cgT8k: // global
           _sgNwU::F32 = F32[Sp + 16];
           _sgNwW::F32 = F32[Sp + 8];
           _cgT8p::F32 = F1;
           (_cgT8o::F32) = call MO_F32_Log(_cgT8p::F32);
           I64[Sp + 8] = block_cgT8s_info;
           F2 = _sgNwW::F32;
           F1 = _sgNwU::F32;
           F32[Sp + 16] = _cgT8o::F32;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase1_entry(F2, F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT8k_info" {
     block_cgT8k_info:
         const _cgT8k;
         const 964;
         const 4294967326;
         const SgNTw_srt+1408;
 },
 _cgT8s() //  [F1]
         { []
         }
     {offset
       cgT8s: // global
           _sgNwP::F32 = F32[Sp + 24];
           I64[Sp + 24] = block_cgT8w_info;
           F4 = F1;
           F3 = F32[Sp + 8];
           F2 = _sgNwP::F32;
           F1 = F32[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/1_entry(F4,
                                            F3,
                                            F2,
                                            F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT8s_info" {
     block_cgT8s_info:
         const _cgT8s;
         const 451;
         const 4294967326;
         const SgNTw_srt+1408;
 },
 _cgT8w() //  [R1, R2]
         { []
         }
     {offset
       cgT8w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgT8N; else goto cgT8M;
       cgT8N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgT8M: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgT8w_info" {
     block_cgT8w_info:
         const _cgT8w;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.403700869 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$clogBase_closure" {
     Data.Complex.$fFloatingComplex_$s$clogBase_closure:
         const Data.Complex.$fFloatingComplex_$s$clogBase_info;
         const 0;
 },
 section ""relreadonly" . ugTbs_srtd" {
     ugTbs_srtd:
         const SgNTw_srt+1072;
         const 44;
         const 8830452760577;
 },
 Data.Complex.$fFloatingComplex_$s$clogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       cgTae: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgTb7; else goto cgTb8;
       cgTb7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$s$clogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgTb8: // global
           I64[Sp - 16] = block_cgTab_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugTbn; else goto cgTac;
       ugTbn: // global
           call _cgTab(R1) args: 0, res: 0, upd: 0;
       cgTac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$s$clogBase_info" {
     Data.Complex.$fFloatingComplex_$s$clogBase_info:
         const Data.Complex.$fFloatingComplex_$s$clogBase_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugTbs_srtd;
 },
 section ""relreadonly" . ugTbt_srtd" {
     ugTbt_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTab() //  [R1]
         { []
         }
     {offset
       cgTab: // global
           I64[Sp - 8] = block_cgTah_info;
           _sgNx7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNx7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugTbm; else goto cgTai;
       ugTbm: // global
           call _cgTah(R1) args: 0, res: 0, upd: 0;
       cgTai: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTab_info" {
     block_cgTab_info:
         const _cgTab;
         const 1;
         const 18446744069414584350;
         const ugTbt_srtd;
 },
 section ""relreadonly" . ugTbu_srtd" {
     ugTbu_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTah() //  [R1]
         { []
         }
     {offset
       cgTah: // global
           I64[Sp] = block_cgTam_info;
           _sgNx9::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNx9::F64;
           if (R1 & 7 != 0) goto ugTbo; else goto cgTan;
       ugTbo: // global
           call _cgTam(R1) args: 0, res: 0, upd: 0;
       cgTan: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTah_info" {
     block_cgTah_info:
         const _cgTah;
         const 2;
         const 18446744069414584350;
         const ugTbu_srtd;
 },
 section ""relreadonly" . ugTbv_srtd" {
     ugTbv_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTam() //  [R1]
         { []
         }
     {offset
       cgTam: // global
           I64[Sp - 8] = block_cgTar_info;
           _sgNxb::F64 = F64[R1 + 7];
           D2 = _sgNxb::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgNxb::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTam_info" {
     block_cgTam_info:
         const _cgTam;
         const 66;
         const 18446744069414584350;
         const ugTbv_srtd;
 },
 section ""relreadonly" . ugTbw_srtd" {
     ugTbw_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTar() //  [D1]
         { []
         }
     {offset
       cgTar: // global
           _sgNx9::F64 = F64[Sp + 16];
           _sgNxb::F64 = F64[Sp + 8];
           _cgTaw::F64 = D1;
           (_cgTav::F64) = call MO_F64_Log(_cgTaw::F64);
           I64[Sp + 8] = block_cgTaz_info;
           D2 = _sgNxb::F64;
           D1 = _sgNx9::F64;
           F64[Sp + 16] = _cgTav::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTar_info" {
     block_cgTar_info:
         const _cgTar;
         const 195;
         const 18446744069414584350;
         const ugTbw_srtd;
 },
 section ""relreadonly" . ugTbx_srtd" {
     ugTbx_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTaz() //  [D1]
         { []
         }
     {offset
       cgTaz: // global
           I64[Sp] = block_cgTaD_info;
           R1 = P64[Sp + 16];
           F64[Sp + 16] = D1;
           if (R1 & 7 != 0) goto ugTbp; else goto cgTaE;
       ugTbp: // global
           call _cgTaD(R1) args: 0, res: 0, upd: 0;
       cgTaE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTaz_info" {
     block_cgTaz_info:
         const _cgTaz;
         const 66;
         const 18446744069414584350;
         const ugTbx_srtd;
 },
 section ""relreadonly" . ugTby_srtd" {
     ugTby_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTaD() //  [R1]
         { []
         }
     {offset
       cgTaD: // global
           I64[Sp - 8] = block_cgTaI_info;
           _sgNxh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sgNxh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugTbq; else goto cgTaJ;
       ugTbq: // global
           call _cgTaI(R1) args: 0, res: 0, upd: 0;
       cgTaJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTaD_info" {
     block_cgTaD_info:
         const _cgTaD;
         const 194;
         const 18446744069414584350;
         const ugTby_srtd;
 },
 section ""relreadonly" . ugTbz_srtd" {
     ugTbz_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTaI() //  [R1]
         { []
         }
     {offset
       cgTaI: // global
           I64[Sp] = block_cgTaN_info;
           _sgNxj::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _sgNxj::F64;
           if (R1 & 7 != 0) goto ugTbr; else goto cgTaO;
       ugTbr: // global
           call _cgTaN(R1) args: 0, res: 0, upd: 0;
       cgTaO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTaI_info" {
     block_cgTaI_info:
         const _cgTaI;
         const 387;
         const 18446744069414584350;
         const ugTbz_srtd;
 },
 section ""relreadonly" . ugTbA_srtd" {
     ugTbA_srtd:
         const SgNTw_srt+1072;
         const 36;
         const 34359738369;
 },
 _cgTaN() //  [R1]
         { []
         }
     {offset
       cgTaN: // global
           I64[Sp - 8] = block_cgTaS_info;
           _sgNxl::F64 = F64[R1 + 7];
           D2 = _sgNxl::F64;
           D1 = F64[Sp + 8];
           F64[Sp] = _sgNxl::F64;
           Sp = Sp - 8;
           call Data.Complex.$w$smagnitude_entry(D2,
                                                 D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTaN_info" {
     block_cgTaN_info:
         const _cgTaN;
         const 451;
         const 18446744069414584350;
         const ugTbA_srtd;
 },
 _cgTaS() //  [D1]
         { []
         }
     {offset
       cgTaS: // global
           _sgNxj::F64 = F64[Sp + 16];
           _sgNxl::F64 = F64[Sp + 8];
           _cgTaX::F64 = D1;
           (_cgTaW::F64) = call MO_F64_Log(_cgTaX::F64);
           I64[Sp + 8] = block_cgTb0_info;
           D2 = _sgNxl::F64;
           D1 = _sgNxj::F64;
           F64[Sp + 16] = _cgTaW::F64;
           Sp = Sp + 8;
           call Data.Complex.$w$sphase_entry(D2, D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTaS_info" {
     block_cgTaS_info:
         const _cgTaS;
         const 964;
         const 4294967326;
         const SgNTw_srt+1424;
 },
 _cgTb0() //  [D1]
         { []
         }
     {offset
       cgTb0: // global
           _sgNxe::F64 = F64[Sp + 24];
           I64[Sp + 24] = block_cgTb4_info;
           D4 = D1;
           D3 = F64[Sp + 8];
           D2 = _sgNxe::F64;
           D1 = F64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$s$c/_entry(D4,
                                           D3,
                                           D2,
                                           D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTb0_info" {
     block_cgTb0_info:
         const _cgTb0;
         const 451;
         const 4294967326;
         const SgNTw_srt+1424;
 },
 _cgTb4() //  [R1, R2]
         { []
         }
     {offset
       cgTb4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgTbl; else goto cgTbk;
       cgTbl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgTbk: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTb4_info" {
     block_cgTb4_info:
         const _cgTb4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.432032925 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$clogBase_closure" {
     Data.Complex.$fFloatingComplex_$clogBase_closure:
         const Data.Complex.$fFloatingComplex_$clogBase_info;
         const 0;
 },
 Data.Complex.$fFloatingComplex_$clogBase_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgTcM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgTd1; else goto cgTd2;
       cgTd1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_$clogBase_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgTd2: // global
           I64[Sp - 24] = block_cgTcJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugTda; else goto cgTcK;
       ugTda: // global
           call _cgTcJ(R1) args: 0, res: 0, upd: 0;
       cgTcK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_$clogBase_info" {
     Data.Complex.$fFloatingComplex_$clogBase_info:
         const Data.Complex.$fFloatingComplex_$clogBase_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const SgNTw_srt+1328;
 },
 _cgTcJ() //  [R1]
         { []
         }
     {offset
       cgTcJ: // global
           I64[Sp] = block_cgTcP_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTcJ_info" {
     block_cgTcJ_info:
         const _cgTcJ;
         const 2;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgTcP() //  [R1, R2]
         { []
         }
     {offset
       cgTcP: // global
           I64[Sp - 8] = block_cgTcR_info;
           _sgNxz::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp] = R2;
           P64[Sp + 16] = _sgNxz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugTdb; else goto cgTcS;
       ugTdb: // global
           call _cgTcR(R1) args: 0, res: 0, upd: 0;
       cgTcS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTcP_info" {
     block_cgTcP_info:
         const _cgTcP;
         const 2;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgTcR() //  [R1]
         { []
         }
     {offset
       cgTcR: // global
           I64[Sp] = block_cgTcW_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           call Data.Complex.$w$clog_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTcR_info" {
     block_cgTcR_info:
         const _cgTcR;
         const 3;
         const 4294967326;
         const SgNTw_srt+1328;
 },
 _cgTcW() //  [R1, R2]
         { []
         }
     {offset
       cgTcW: // global
           _sgNxz::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cgTcY_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sgNxz::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Complex.$w$c/_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTcW_info" {
     block_cgTcW_info:
         const _cgTcW;
         const 3;
         const 30;
 },
 _cgTcY() //  [R1, R2]
         { []
         }
     {offset
       cgTcY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgTd9; else goto cgTd8;
       cgTd9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgTd8: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgTcY_info" {
     block_cgTcY_info:
         const _cgTcY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.444030399 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFloatingComplex1_closure" {
     Data.Complex.$fFloatingComplex_$s$fFloatingComplex1_closure:
         const GHC.Float.C:Floating_con_info;
         const Data.Complex.$fFloatingComplex_$s$fFractionalComplex1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cpi1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexp1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csqrt1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c**1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$clogBase1_closure+2;
         const Data.Complex.$fFloatingComplex_$s$csin1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccos1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctan1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casin1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacos1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catan1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csinh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccosh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctanh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casinh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacosh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catanh1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1p1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexpm2_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.446279298 UTC

[section ""data" . Data.Complex.$fFloatingComplex_$s$fFloatingComplex_closure" {
     Data.Complex.$fFloatingComplex_$s$fFloatingComplex_closure:
         const GHC.Float.C:Floating_con_info;
         const Data.Complex.$fFloatingComplex_$s$fFractionalComplex_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cpi_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexp_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csqrt_closure+1;
         const Data.Complex.$fFloatingComplex_$s$c**_closure+2;
         const Data.Complex.$fFloatingComplex_$s$clogBase_closure+2;
         const Data.Complex.$fFloatingComplex_$s$csin_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccos_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctan_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casin_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacos_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catan_closure+1;
         const Data.Complex.$fFloatingComplex_$s$csinh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ccosh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$ctanh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$casinh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cacosh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$catanh_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1p_closure+1;
         const Data.Complex.$fFloatingComplex_$s$cexpm1_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_closure+1;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.455933079 UTC

[section ""data" . Data.Complex.$fFloatingComplex_closure" {
     Data.Complex.$fFloatingComplex_closure:
         const Data.Complex.$fFloatingComplex_info;
         const 0;
 },
 sat_sgNy7_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTdQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog1mexp_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy7_info" {
     sat_sgNy7_info:
         const sat_sgNy7_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1360;
 },
 sat_sgNy6_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTdY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog1pexp_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy6_info" {
     sat_sgNy6_info:
         const sat_sgNy6_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1392;
 },
 sat_sgNy5_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTe6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cexpm1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy5_info" {
     sat_sgNy5_info:
         const sat_sgNy5_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1288;
 },
 sat_sgNy4_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTee: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog1p_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy4_info" {
     sat_sgNy4_info:
         const sat_sgNy4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1320;
 },
 sat_sgNy3_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTem: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$catanh_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy3_info" {
     sat_sgNy3_info:
         const sat_sgNy3_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1440;
 },
 sat_sgNy2_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTeu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cacosh_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy2_info" {
     sat_sgNy2_info:
         const sat_sgNy2_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1448;
 },
 sat_sgNy1_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTeC: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$casinh_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy1_info" {
     sat_sgNy1_info:
         const sat_sgNy1_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1456;
 },
 sat_sgNy0_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTeK: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ctanh_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNy0_info" {
     sat_sgNy0_info:
         const sat_sgNy0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgNxZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTeS: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ccosh_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxZ_info" {
     sat_sgNxZ_info:
         const sat_sgNxZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgNxY_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTf0: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$csinh_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxY_info" {
     sat_sgNxY_info:
         const sat_sgNxY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgNxX_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTf8: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$catan_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxX_info" {
     sat_sgNxX_info:
         const sat_sgNxX_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1464;
 },
 sat_sgNxW_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTfg: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cacos_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxW_info" {
     sat_sgNxW_info:
         const sat_sgNxW_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1472;
 },
 sat_sgNxV_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTfo: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$casin_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxV_info" {
     sat_sgNxV_info:
         const sat_sgNxV_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1480;
 },
 sat_sgNxU_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTfw: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ctan_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxU_info" {
     sat_sgNxU_info:
         const sat_sgNxU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgNxT_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTfE: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$ccos_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxT_info" {
     sat_sgNxT_info:
         const sat_sgNxT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgNxS_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTfM: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$csin_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxS_info" {
     sat_sgNxS_info:
         const sat_sgNxS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgNxR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgTfU: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$clogBase_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxR_info" {
     sat_sgNxR_info:
         const sat_sgNxR_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgNTw_srt+1432;
 },
 sat_sgNxQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgTg2: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Complex.$fFloatingComplex_$c**_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxQ_info" {
     sat_sgNxQ_info:
         const sat_sgNxQ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgNTw_srt+1272;
 },
 sat_sgNxP_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTga: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$csqrt_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxP_info" {
     sat_sgNxP_info:
         const sat_sgNxP_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1488;
 },
 sat_sgNxO_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTgi: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$clog_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxO_info" {
     sat_sgNxO_info:
         const sat_sgNxO_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgNTw_srt+1496;
 },
 sat_sgNxN_entry() //  [R1, R2]
         { []
         }
     {offset
       cgTgq: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Complex.$fFloatingComplex_$cexp_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgNxN_info" {
     sat_sgNxN_info:
         const sat_sgNxN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgNxM_entry() //  [R1]
         { []
         }
     {offset
       cgTgx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgTgy; else goto cgTgz;
       cgTgy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgTgz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFloatingComplex_$cpi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNxM_info" {
     sat_sgNxM_info:
         const sat_sgNxM_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1504;
 },
 sat_sgNxL_entry() //  [R1]
         { []
         }
     {offset
       cgTgE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgTgF; else goto cgTgG;
       cgTgF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgTgG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Complex.$fFractionalComplex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgNxL_info" {
     sat_sgNxL_info:
         const sat_sgNxL_entry;
         const 1;
         const 4294967312;
         const SgNTw_srt+1512;
 },
 Data.Complex.$fFloatingComplex_entry() //  [R2]
         { []
         }
     {offset
       cgTgI: // global
           Hp = Hp + 576;
           if (Hp > HpLim) (likely: False) goto cgTgM; else goto cgTgL;
       cgTgM: // global
           HpAlloc = 576;
           R2 = R2;
           R1 = Data.Complex.$fFloatingComplex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgTgL: // global
           I64[Hp - 568] = sat_sgNy7_info;
           P64[Hp - 560] = R2;
           I64[Hp - 552] = sat_sgNy6_info;
           P64[Hp - 544] = R2;
           I64[Hp - 536] = sat_sgNy5_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_sgNy4_info;
           P64[Hp - 512] = R2;
           I64[Hp - 504] = sat_sgNy3_info;
           P64[Hp - 496] = R2;
           I64[Hp - 488] = sat_sgNy2_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_sgNy1_info;
           P64[Hp - 464] = R2;
           I64[Hp - 456] = sat_sgNy0_info;
           P64[Hp - 448] = R2;
           I64[Hp - 440] = sat_sgNxZ_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_sgNxY_info;
           P64[Hp - 416] = R2;
           I64[Hp - 408] = sat_sgNxX_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = sat_sgNxW_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_sgNxV_info;
           P64[Hp - 368] = R2;
           I64[Hp - 360] = sat_sgNxU_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = sat_sgNxT_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_sgNxS_info;
           P64[Hp - 320] = R2;
           I64[Hp - 312] = sat_sgNxR_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = sat_sgNxQ_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_sgNxP_info;
           P64[Hp - 272] = R2;
           I64[Hp - 264] = sat_sgNxO_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = sat_sgNxN_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sgNxM_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sgNxL_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 247;
           P64[Hp - 152] = Hp - 263;
           P64[Hp - 144] = Hp - 279;
           P64[Hp - 136] = Hp - 294;
           P64[Hp - 128] = Hp - 310;
           P64[Hp - 120] = Hp - 327;
           P64[Hp - 112] = Hp - 343;
           P64[Hp - 104] = Hp - 359;
           P64[Hp - 96] = Hp - 375;
           P64[Hp - 88] = Hp - 391;
           P64[Hp - 80] = Hp - 407;
           P64[Hp - 72] = Hp - 423;
           P64[Hp - 64] = Hp - 439;
           P64[Hp - 56] = Hp - 455;
           P64[Hp - 48] = Hp - 471;
           P64[Hp - 40] = Hp - 487;
           P64[Hp - 32] = Hp - 503;
           P64[Hp - 24] = Hp - 519;
           P64[Hp - 16] = Hp - 535;
           P64[Hp - 8] = Hp - 551;
           P64[Hp] = Hp - 567;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.$fFloatingComplex_info" {
     Data.Complex.$fFloatingComplex_info:
         const Data.Complex.$fFloatingComplex_entry;
         const 0;
         const 18442390304016302094;
         const 4294967301;
         const SgNTw_srt+1272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.494130619 UTC

[section ""data" . Data.Complex.:+_closure" {
     Data.Complex.:+_closure:
         const Data.Complex.:+_info;
 },
 Data.Complex.:+_entry() //  [R2, R3]
         { []
         }
     {offset
       cgTiT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgTiX; else goto cgTiW;
       cgTiX: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Complex.:+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgTiW: // global
           I64[Hp - 16] = Data.Complex.:+_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.:+_info" {
     Data.Complex.:+_info:
         const Data.Complex.:+_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.497811286 UTC

[section ""cstring" . igTj5_str" {
     igTj5_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,67,111,109,112,108,101,120,46,58,43]
 },
 Data.Complex.:+_con_entry() //  [R1]
         { []
         }
     {offset
       cgTj4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Complex.:+_con_info" {
     Data.Complex.:+_con_info:
         const Data.Complex.:+_con_entry;
         const 2;
         const 4;
         const igTj5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:48.502323641 UTC

[section ""relreadonly" . SgNTw_srt" {
     SgNTw_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Complex.$fReadComplex2_closure;
         const GHC.Read.list3_closure;
         const Data.Complex.$fReadComplex1_closure;
         const Data.Complex.$fReadComplex_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Complex.$fReadComplex_$creadListPrec_closure;
         const Data.Complex.$fReadComplex_$creadList_closure;
         const Data.Complex.$fReadComplex_closure;
         const GHC.Err.undefined_closure;
         const lvl12_rgA6q_closure;
         const Data.Complex.$fStorableComplex8_closure;
         const Data.Complex.$fStorableComplex7_closure;
         const Data.Complex.$fStorableComplex_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.List.badHead_closure;
         const Data.Complex.$fReadComplex3_closure;
         const go61_rgA6s_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Complex.$fDataComplex8_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Complex.$fDataComplex4_closure;
         const Data.Complex.$fDataComplex10_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Complex.$fDataComplex_$cdataCast1_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Complex.$fDataComplex_$cgmapQi_closure;
         const Data.Complex.$c:+_closure;
         const lvl14_rgA6z_closure;
         const Data.Complex.$tComplex_closure;
         const Data.Complex.$fDataComplex_closure;
         const lvl15_rgA6A_closure;
         const GHC.Float.$w$cexponent1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const Data.Complex.$fFloatingComplex_$s$c/1_closure;
         const GHC.Float.rationalToFloat_closure;
         const Data.Complex.$fFloatingComplex_$s$cfromRational1_closure;
         const Data.Complex.$fFloatingComplex17_closure;
         const Data.Complex.$wphase_closure;
         const Data.Complex.phase_closure;
         const GHC.Float.$w$cscaleFloat_closure;
         const GHC.Float.$w$cexponent_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$fFloatingComplex_$smagnitude_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1_closure;
         const Data.Complex.$fFloatingComplex_$s$cabs1_closure;
         const Data.Complex.polar_$spolar_closure;
         const Data.Complex.polar_closure;
         const Data.Complex.$w$cpi_closure;
         const Data.Complex.$fFloatingComplex_$cpi_closure;
         const Data.Complex.$fFloatingComplex_$s$clog_closure;
         const Data.Complex.$w$clog_closure;
         const Data.Complex.$fFloatingComplex_$clog_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$s$c/_closure;
         const GHC.Float.rationalToDouble_closure;
         const Data.Complex.$fFloatingComplex_$s$cfromRational_closure;
         const Data.Complex.$w$cfromRational_closure;
         const Data.Complex.$fFractionalComplex_$cfromRational_closure;
         const Data.Complex.$fFloatingComplex_$s$cabs_closure;
         const Data.Complex.$w$cabs_closure;
         const Data.Complex.$fNumComplex_$cabs_closure;
         const Data.Complex.$w$cfromInteger_closure;
         const Data.Complex.$fFloatingComplex_$cfromInteger_closure;
         const Data.Complex.$fFloatingComplex_$s$csignum_closure;
         const Data.Complex.$fFloatingComplex_$s$csignum1_closure;
         const Data.Complex.$w$csignum_closure;
         const Data.Complex.$fNumComplex_$csignum_closure;
         const Data.Complex.$fNumComplex_closure;
         const Data.Complex.$w$s$csqrt1_closure;
         const Data.Complex.$fFloatingComplex_$s$csqrt1_closure;
         const Data.Complex.$w$s$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$s$csqrt_closure;
         const sat_sgN7l_closure;
         const Data.Complex.$fFloatingComplex17_closure;
         const Data.Complex.$fFloatingComplex21_closure;
         const Data.Complex.$w$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$s$crecip_closure;
         const Data.Complex.$fFloatingComplex_$s$crecip1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const sat_sgN8r_closure;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$fFractionalComplex_$crecip_closure;
         const Data.Complex.$fFractionalComplex_closure;
         const Data.Complex.$fFloatingComplex_$s$ctan1_closure;
         const Data.Complex.$fFloatingComplex_$s$ctan_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$s$ctanh1_closure;
         const Data.Complex.$fFloatingComplex_$s$ctanh_closure;
         const Data.Complex.$w$s$cacosh1_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$s$cacosh1_closure;
         const Data.Complex.$w$s$cacosh_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$fFloatingComplex_$s$cacosh_closure;
         const Data.Complex.$w$cacosh_closure;
         const Data.Complex.$w$clog_closure;
         const Data.Complex.$fFloatingComplex_$cacosh_closure;
         const Data.Complex.$w$s$casinh1_closure;
         const Data.Complex.$fFloatingComplex_$s$casinh1_closure;
         const Data.Complex.$w$s$casinh_closure;
         const Data.Complex.$fFloatingComplex_$s$casinh_closure;
         const Data.Complex.$w$casinh_closure;
         const Data.Complex.$fFloatingComplex_$casinh_closure;
         const Data.Complex.$w$s$catan1_closure;
         const Data.Complex.$fFloatingComplex_$s$catan1_closure;
         const Data.Complex.$w$s$catan_closure;
         const Data.Complex.$fFloatingComplex_$s$catan_closure;
         const Data.Complex.$w$catan_closure;
         const Data.Complex.$w$csqrt_closure;
         const Data.Complex.$wphase_closure;
         const Data.Complex.$fFloatingComplex_$catan_closure;
         const Data.Complex.$w$s$cacos1_closure;
         const Data.Complex.$fFloatingComplex_$s$cacos1_closure;
         const Data.Complex.$w$s$cacos_closure;
         const Data.Complex.$fFloatingComplex_$s$cacos_closure;
         const Data.Complex.$w$cacos_closure;
         const Data.Complex.$fFloatingComplex_$cacos_closure;
         const Data.Complex.$w$s$casin1_closure;
         const Data.Complex.$fFloatingComplex_$s$casin1_closure;
         const Data.Complex.$w$s$casin_closure;
         const Data.Complex.$fFloatingComplex_$s$casin_closure;
         const Data.Complex.$w$casin_closure;
         const Data.Complex.$fFloatingComplex_$casin_closure;
         const Data.Complex.$w$s$catanh1_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const Data.Complex.$fFloatingComplex_$s$catanh1_closure;
         const Data.Complex.$w$s$catanh_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$s$catanh_closure;
         const Data.Complex.$w$catanh_closure;
         const Data.Complex.$fFloatingComplex18_closure;
         const Data.Complex.$fFloatingComplex20_closure;
         const Data.Complex.$fFloatingComplex_$catanh_closure;
         const Data.Complex.$fFloatingComplex6_closure;
         const Data.Complex.$fFloatingComplex_nan_closure;
         const Data.Complex.$fFloatingComplex8_closure;
         const Data.Complex.$fFloatingComplex_inf_closure;
         const Data.Complex.$w$s$c**_closure;
         const Data.Complex.$fFloatingComplex5_closure;
         const Data.Complex.$fFloatingComplex7_closure;
         const Data.Complex.$fFloatingComplex_$s$c**_closure;
         const Data.Complex.$fFloatingComplex14_closure;
         const Data.Complex.$fFloatingComplex_nan1_closure;
         const Data.Complex.$fFloatingComplex16_closure;
         const Data.Complex.$fFloatingComplex_inf1_closure;
         const Data.Complex.$w$s$c**1_closure;
         const Data.Complex.$fFloatingComplex13_closure;
         const Data.Complex.$fFloatingComplex15_closure;
         const Data.Complex.$fFloatingComplex_$s$c**1_closure;
         const Data.Complex.$fFloatingComplex17_closure;
         const Data.Complex.$fFloatingComplex19_closure;
         const Data.Complex.$w$c**_closure;
         const Data.Complex.$fFloatingComplex_$c**_closure;
         const Data.Complex.$fFloatingComplex21_closure;
         const Data.Complex.$fFloatingComplex_$cexpm1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1p1_closure;
         const Data.Complex.$w$smagnitude1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1p_closure;
         const Data.Complex.$fFloatingComplex_$clog1p_closure;
         const Data.Complex.$w$clog_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1mexp_closure;
         const Data.Complex.$w$smagnitude_closure;
         const Data.Complex.$fFloatingComplex_$clog1mexp_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp1_closure;
         const Data.Complex.$fFloatingComplex_$s$clog1pexp_closure;
         const Data.Complex.$fFloatingComplex20_closure;
         const Data.Complex.$fFloatingComplex_$clog1pexp_closure;
         const Data.Complex.$fFloatingComplex_$s$clogBase1_closure;
         const Data.Complex.$w$s$c/1_closure;
         const Data.Complex.$fFloatingComplex_$s$clogBase_closure;
         const Data.Complex.$w$s$c/_closure;
         const Data.Complex.$fFloatingComplex_$clogBase_closure;
         const Data.Complex.$fFloatingComplex_$catanh_closure;
         const Data.Complex.$fFloatingComplex_$cacosh_closure;
         const Data.Complex.$fFloatingComplex_$casinh_closure;
         const Data.Complex.$fFloatingComplex_$catan_closure;
         const Data.Complex.$fFloatingComplex_$cacos_closure;
         const Data.Complex.$fFloatingComplex_$casin_closure;
         const Data.Complex.$fFloatingComplex_$csqrt_closure;
         const Data.Complex.$fFloatingComplex_$clog_closure;
         const Data.Complex.$fFloatingComplex_$cpi_closure;
         const Data.Complex.$fFractionalComplex_closure;
         const Data.Complex.$fFloatingComplex_closure;
 }]

