
==================== Output Cmm ====================
2018-03-16 16:00:10.424419133 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:10.42543155 UTC

[section ""data" . Data.Ord.$fFunctorDown2_closure" {
     Data.Ord.$fFunctorDown2_closure:
         const Data.Ord.$fFunctorDown2_info;
 },
 Data.Ord.$fFunctorDown2_entry() //  [R2]
         { info_tbl: [(c5cFG,
                       label: Data.Ord.$fFunctorDown2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cFG: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.426459463 UTC

[section ""data" . Data.Ord.$fFunctorDown1_closure" {
     Data.Ord.$fFunctorDown1_closure:
         const Data.Ord.$fFunctorDown1_info;
 },
 Data.Ord.$fFunctorDown1_entry() //  [R2]
         { info_tbl: [(c5cFN,
                       label: Data.Ord.$fFunctorDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cFN: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.427228097 UTC

[section ""data" . Data.Ord.$fFunctorDown_closure" {
     Data.Ord.$fFunctorDown_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Ord.$fFunctorDown2_closure+1;
         const Data.Ord.$fFunctorDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.429634863 UTC

[section ""data" . Data.Ord.$fApplicativeDown3_closure" {
     Data.Ord.$fApplicativeDown3_closure:
         const Data.Ord.$fApplicativeDown3_info;
 },
 Data.Ord.$fApplicativeDown3_entry() //  [R2]
         { info_tbl: [(c5cFU,
                       label: Data.Ord.$fApplicativeDown3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cFU: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.430469971 UTC

[section ""data" . Data.Ord.$fApplicativeDown4_closure" {
     Data.Ord.$fApplicativeDown4_closure:
         const Data.Ord.$fApplicativeDown4_info;
 },
 Data.Ord.$fApplicativeDown4_entry() //  [R2]
         { info_tbl: [(c5cG1,
                       label: Data.Ord.$fApplicativeDown4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cG1: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.431399513 UTC

[section ""data" . Data.Ord.$fApplicativeDown2_closure" {
     Data.Ord.$fApplicativeDown2_closure:
         const Data.Ord.$fApplicativeDown2_info;
 },
 Data.Ord.$fApplicativeDown2_entry() //  [R2, R3]
         { info_tbl: [(c5cG8,
                       label: Data.Ord.$fApplicativeDown2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cG8: // global
           _s5cDu::P64 = R2;
           R2 = R3;
           R1 = _s5cDu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.432289052 UTC

[section ""data" . Data.Ord.$fApplicativeDown_$c*>_closure" {
     Data.Ord.$fApplicativeDown_$c*>_closure:
         const Data.Ord.$fApplicativeDown_$c*>_info;
 },
 Data.Ord.$fApplicativeDown_$c*>_entry() //  [R3]
         { info_tbl: [(c5cGf,
                       label: Data.Ord.$fApplicativeDown_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cGf: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.433167521 UTC

[section ""data" . Data.Ord.$fApplicativeDown1_closure" {
     Data.Ord.$fApplicativeDown1_closure:
         const Data.Ord.$fApplicativeDown1_info;
 },
 Data.Ord.$fApplicativeDown1_entry() //  [R2]
         { info_tbl: [(c5cGm,
                       label: Data.Ord.$fApplicativeDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cGm: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.434032478 UTC

[section ""data" . Data.Ord.$fApplicativeDown_closure" {
     Data.Ord.$fApplicativeDown_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Ord.$fFunctorDown_closure+1;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const Data.Ord.$fApplicativeDown3_closure+1;
         const Data.Ord.$fApplicativeDown2_closure+2;
         const Data.Ord.$fApplicativeDown_$c*>_closure+2;
         const Data.Ord.$fApplicativeDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.435312755 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>=_closure" {
     Data.Ord.$fMonadDown_$c>>=_closure:
         const Data.Ord.$fMonadDown_$c>>=_info;
 },
 Data.Ord.$fMonadDown_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5cGt,
                       label: Data.Ord.$fMonadDown_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cGt: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.436223596 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>_closure" {
     Data.Ord.$fMonadDown_$c>>_closure:
         const Data.Ord.$fMonadDown_$c>>_info;
 },
 Data.Ord.$fMonadDown_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5cGA,
                       label: Data.Ord.$fMonadDown_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cGA: // global
           R3 = R3;
           R2 = R2;
           call Data.Ord.$fApplicativeDown_$c*>_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.437098762 UTC

[section ""data" . lvl_r5cDk_closure" {
     lvl_r5cDk_closure:
         const lvl_r5cDk_info;
         const 0;
 },
 lvl_r5cDk_entry() //  [R2]
         { info_tbl: [(c5cGH,
                       label: lvl_r5cDk_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cGH: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.438066505 UTC

[section ""data" . Data.Ord.$fMonadDown_closure" {
     Data.Ord.$fMonadDown_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Ord.$fApplicativeDown_closure+1;
         const Data.Ord.$fMonadDown_$c>>=_closure+2;
         const Data.Ord.$fMonadDown_$c>>_closure+2;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const lvl_r5cDk_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.439292529 UTC

[section ""data" . Data.Ord.$fSemigroupDown_closure" {
     Data.Ord.$fSemigroupDown_closure:
         const Data.Ord.$fSemigroupDown_info;
 },
 sat_s5cDG_entry() //  [R1]
         { info_tbl: [(c5cGT,
                       label: sat_s5cDG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cGT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cGU; else goto c5cGV;
       c5cGU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDF_entry() //  [R1]
         { info_tbl: [(c5cH0,
                       label: sat_s5cDF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cH0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cH1; else goto c5cH2;
       c5cH1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cH2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDE_entry() //  [R1]
         { info_tbl: [(c5cH7,
                       label: sat_s5cDE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cH7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cH8; else goto c5cH9;
       c5cH8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cH9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fSemigroupDown_entry() //  [R2]
         { info_tbl: [(c5cHb,
                       label: Data.Ord.$fSemigroupDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cHb: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5cHf; else goto c5cHe;
       c5cHf: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Ord.$fSemigroupDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cHe: // global
           I64[Hp - 96] = sat_s5cDG_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5cDF_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5cDE_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.44202242 UTC

[section ""data" . Data.Ord.$fMonoidDown_$cp1Monoid_closure" {
     Data.Ord.$fMonoidDown_$cp1Monoid_closure:
         const Data.Ord.$fMonoidDown_$cp1Monoid_info;
 },
 sat_s5cDI_entry() //  [R1]
         { info_tbl: [(c5cHo,
                       label: sat_s5cDI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cHo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cHp; else goto c5cHq;
       c5cHp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cHq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c5cHr,
                       label: Data.Ord.$fMonoidDown_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cHr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cHv; else goto c5cHu;
       c5cHv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cHu: // global
           I64[Hp - 16] = sat_s5cDI_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fSemigroupDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.443846275 UTC

[section ""data" . Data.Ord.$fMonoidDown_closure" {
     Data.Ord.$fMonoidDown_closure:
         const Data.Ord.$fMonoidDown_info;
 },
 sat_s5cDN_entry() //  [R1]
         { info_tbl: [(c5cHE,
                       label: sat_s5cDN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cHE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cHF; else goto c5cHG;
       c5cHF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cHG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDM_entry() //  [R1]
         { info_tbl: [(c5cHL,
                       label: sat_s5cDM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cHM; else goto c5cHN;
       c5cHM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cHN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDL_entry() //  [R1]
         { info_tbl: [(c5cHS,
                       label: sat_s5cDL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cHS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cHT; else goto c5cHU;
       c5cHT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cHU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDK_entry() //  [R1]
         { info_tbl: [(c5cHZ,
                       label: sat_s5cDK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cHZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cI0; else goto c5cI1;
       c5cI0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cI1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fMonoidDown_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_entry() //  [R2]
         { info_tbl: [(c5cI3,
                       label: Data.Ord.$fMonoidDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cI3: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5cI7; else goto c5cI6;
       c5cI7: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cI6: // global
           I64[Hp - 128] = sat_s5cDN_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cDM_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5cDL_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5cDK_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.447072184 UTC

[section ""data" . Data.Ord.$fNumDown_closure" {
     Data.Ord.$fNumDown_closure:
         const Data.Ord.$fNumDown_info;
 },
 sat_s5cDV_entry() //  [R1]
         { info_tbl: [(c5cIg,
                       label: sat_s5cDV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cIg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cIh; else goto c5cIi;
       c5cIh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cIi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDU_entry() //  [R1]
         { info_tbl: [(c5cIn,
                       label: sat_s5cDU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cIn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cIo; else goto c5cIp;
       c5cIo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cIp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDT_entry() //  [R1]
         { info_tbl: [(c5cIu,
                       label: sat_s5cDT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cIu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cIv; else goto c5cIw;
       c5cIv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDS_entry() //  [R1]
         { info_tbl: [(c5cIB,
                       label: sat_s5cDS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cIB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cIC; else goto c5cID;
       c5cIC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cID: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDR_entry() //  [R1]
         { info_tbl: [(c5cII,
                       label: sat_s5cDR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cII: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cIJ; else goto c5cIK;
       c5cIJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cIK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDQ_entry() //  [R1]
         { info_tbl: [(c5cIP,
                       label: sat_s5cDQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cIP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cIQ; else goto c5cIR;
       c5cIQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cIR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDP_entry() //  [R1]
         { info_tbl: [(c5cIW,
                       label: sat_s5cDP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cIW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cIX; else goto c5cIY;
       c5cIX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cIY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fNumDown_entry() //  [R2]
         { info_tbl: [(c5cJ0,
                       label: Data.Ord.$fNumDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cJ0: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c5cJ4; else goto c5cJ3;
       c5cJ4: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Ord.$fNumDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cJ3: // global
           I64[Hp - 224] = sat_s5cDV_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s5cDU_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s5cDT_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5cDS_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s5cDR_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cDQ_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5cDP_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.450425776 UTC

[section ""cstring" . Data.Ord.$fReadDown4_bytes" {
     Data.Ord.$fReadDown4_bytes:
         I8[] [68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.451362709 UTC

[section ""data" . Data.Ord.$fReadDown3_closure" {
     Data.Ord.$fReadDown3_closure:
         const Data.Ord.$fReadDown3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fReadDown3_entry() //  [R1]
         { info_tbl: [(c5cJb,
                       label: Data.Ord.$fReadDown3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cJb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cJc; else goto c5cJd;
       c5cJc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cJd: // global
           (_c5cJ8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5cJ8::I64 == 0) goto c5cJa; else goto c5cJ9;
       c5cJa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5cJ9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5cJ8::I64;
           R2 = Data.Ord.$fReadDown4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.452414189 UTC

[section ""data" . Data.Ord.$fReadDown_lexeme_closure" {
     Data.Ord.$fReadDown_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Ord.$fReadDown3_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.453398595 UTC

[section ""data" . Data.Ord.$fReadDown2_closure" {
     Data.Ord.$fReadDown2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.45575564 UTC

[section ""data" . Data.Ord.$fReadDown1_closure" {
     Data.Ord.$fReadDown1_closure:
         const Data.Ord.$fReadDown1_info;
         const 0;
 },
 sat_s5cE6_entry() //  [R1, R2]
         { info_tbl: [(c5cJG,
                       label: sat_s5cE6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cJG: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cE7_entry() //  [R1, R2]
         { info_tbl: [(c5cJJ,
                       label: sat_s5cE7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cJJ: // global
           _s5cE4::P64 = R2;
           _s5cE7::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5cJK; else goto c5cJL;
       c5cJL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cJN; else goto c5cJM;
       c5cJN: // global
           HpAlloc = 16;
           goto c5cJK;
       c5cJK: // global
           R2 = _s5cE4::P64;
           R1 = _s5cE7::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cJM: // global
           _s5cDW::P64 = P64[_s5cE7::P64 + 7];
           _s5cE0::P64 = P64[_s5cE7::P64 + 15];
           I64[Hp - 8] = sat_s5cE6_info;
           P64[Hp] = _s5cE0::P64;
           R2 = _s5cDW::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5cEa_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cJO,
                       label: sat_s5cEa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cJO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5cJP; else goto c5cJQ;
       c5cJP: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cJQ: // global
           I64[Sp - 24] = block_c5cJn_info;
           _s5cDW::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s5cDW::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5cK3; else goto c5cJo;
       u5cK3: // global
           call _c5cJn(R1) args: 0, res: 0, upd: 0;
       c5cJo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5cJn() //  [R1]
         { info_tbl: [(c5cJn,
                       label: block_c5cJn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cJn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cJT; else goto c5cJS;
       c5cJT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5cJS: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c5cJV; else goto c5cJZ;
       c5cJV: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cJZ: // global
           I64[Hp - 16] = sat_s5cE7_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c5cJW_info;
           R3 = Hp - 15;
           R2 = Data.Ord.$fReadDown_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5cJW() //  [R1]
         { info_tbl: [(c5cJW,
                       label: block_c5cJW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cJW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cK2; else goto c5cK1;
       c5cK2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5cK1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown1_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cK4,
                       label: Data.Ord.$fReadDown1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cK4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cK8; else goto c5cK7;
       c5cK8: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cK7: // global
           I64[Hp - 8] = sat_s5cEa_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.459032009 UTC

[section ""data" . Data.Ord.$fReadDown_$creadsPrec_closure" {
     Data.Ord.$fReadDown_$creadsPrec_closure:
         const Data.Ord.$fReadDown_$creadsPrec_info;
         const 0;
 },
 sat_s5cEd_entry() //  [R1]
         { info_tbl: [(c5cKh,
                       label: sat_s5cEd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cKh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cKi; else goto c5cKj;
       c5cKi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cKj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5cKk,
                       label: Data.Ord.$fReadDown_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cKk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5cKo; else goto c5cKn;
       c5cKo: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cKn: // global
           I64[Hp - 24] = sat_s5cEd_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.460775041 UTC

[section ""data" . Data.Ord.$fReadDown_$creadListPrec_closure" {
     Data.Ord.$fReadDown_$creadListPrec_closure:
         const Data.Ord.$fReadDown_$creadListPrec_info;
         const 0;
 },
 sat_s5cEf_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cKy,
                       label: sat_s5cEf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cKy: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_$creadListPrec_entry() //  [R2]
         { info_tbl: [(c5cKB,
                       label: Data.Ord.$fReadDown_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cKB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cKF; else goto c5cKE;
       c5cKF: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cKE: // global
           I64[Hp - 8] = sat_s5cEf_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.462971406 UTC

[section ""data" . Data.Ord.$fReadDown_$creadList_closure" {
     Data.Ord.$fReadDown_$creadList_closure:
         const Data.Ord.$fReadDown_$creadList_info;
         const 0;
 },
 sat_s5cEh_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cKT,
                       label: sat_s5cEh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cKT: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEi_entry() //  [R1]
         { info_tbl: [(c5cKW,
                       label: sat_s5cEi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cKW: // global
           _s5cEi::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5cKX; else goto c5cKY;
       c5cKY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cL0; else goto c5cKZ;
       c5cL0: // global
           HpAlloc = 16;
           goto c5cKX;
       c5cKX: // global
           R1 = _s5cEi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cKZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5cEi::P64;
           _s5cEg::P64 = P64[_s5cEi::P64 + 16];
           I64[Hp - 8] = sat_s5cEh_info;
           P64[Hp] = _s5cEg::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadList_entry() //  [R2]
         { info_tbl: [(c5cL1,
                       label: Data.Ord.$fReadDown_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cL1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cL5; else goto c5cL4;
       c5cL5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cL4: // global
           I64[Hp - 16] = sat_s5cEi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.465224041 UTC

[section ""data" . Data.Ord.$fReadDown_closure" {
     Data.Ord.$fReadDown_closure:
         const Data.Ord.$fReadDown_info;
         const 0;
 },
 sat_s5cEn_entry() //  [R1]
         { info_tbl: [(c5cLe,
                       label: sat_s5cEn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cLe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cLf; else goto c5cLg;
       c5cLf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cLg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEm_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cLm,
                       label: sat_s5cEm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cLm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEl_entry() //  [R1]
         { info_tbl: [(c5cLt,
                       label: sat_s5cEl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cLt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cLu; else goto c5cLv;
       c5cLu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cLv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEk_entry() //  [R1, R2]
         { info_tbl: [(c5cLB,
                       label: sat_s5cEk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cLB: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fReadDown_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_entry() //  [R2]
         { info_tbl: [(c5cLF,
                       label: Data.Ord.$fReadDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cLF: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5cLJ; else goto c5cLI;
       c5cLJ: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cLI: // global
           I64[Hp - 112] = sat_s5cEn_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5cEm_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5cEl_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5cEk_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.467709443 UTC

[section ""cstring" . Data.Ord.$fShowDown3_bytes" {
     Data.Ord.$fShowDown3_bytes:
         I8[] [68,111,119,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.468527504 UTC

[section ""data" . Data.Ord.$fShowDown2_closure" {
     Data.Ord.$fShowDown2_closure:
         const Data.Ord.$fShowDown2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fShowDown2_entry() //  [R1]
         { info_tbl: [(c5cLQ,
                       label: Data.Ord.$fShowDown2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cLQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cLR; else goto c5cLS;
       c5cLR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cLS: // global
           (_c5cLN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5cLN::I64 == 0) goto c5cLP; else goto c5cLO;
       c5cLP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5cLO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5cLN::I64;
           R2 = Data.Ord.$fShowDown3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.470847341 UTC

[section ""data" . Data.Ord.$w$cshowsPrec_closure" {
     Data.Ord.$w$cshowsPrec_closure:
         const Data.Ord.$w$cshowsPrec_info;
         const 0;
 },
 g_s5cEr_entry() //  [R1]
         { info_tbl: [(c5cM1,
                       label: g_s5cEr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cM1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5cM2; else goto c5cM3;
       c5cM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5cEu_entry() //  [R1]
         { info_tbl: [(c5cMg,
                       label: sat_s5cEu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cMg: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEv_entry() //  [R1, R2]
         { info_tbl: [(c5cMj,
                       label: sat_s5cEv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cMj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5cMn; else goto c5cMm;
       c5cMn: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cMm: // global
           _s5cEr::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5cEu_info;
           P64[Hp - 8] = _s5cEr::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEy_entry() //  [R1]
         { info_tbl: [(c5cMD,
                       label: sat_s5cEy_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cMD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cMH; else goto c5cMG;
       c5cMH: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cMG: // global
           _s5cEr::P64 = P64[R1 + 16];
           _s5cEw::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5cEw::P64;
           R2 = Hp - 14;
           R1 = _s5cEr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEz_entry() //  [R1]
         { info_tbl: [(c5cMI,
                       label: sat_s5cEz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cMI: // global
           _s5cEz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5cMJ; else goto c5cMK;
       c5cMK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5cMM; else goto c5cML;
       c5cMM: // global
           HpAlloc = 32;
           goto c5cMJ;
       c5cMJ: // global
           R1 = _s5cEz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5cEz::P64;
           _s5cEr::P64 = P64[_s5cEz::P64 + 16];
           _s5cEw::P64 = P64[_s5cEz::P64 + 24];
           I64[Hp - 24] = sat_s5cEy_info;
           P64[Hp - 8] = _s5cEr::P64;
           P64[Hp] = _s5cEw::P64;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEA_entry() //  [R1, R2]
         { info_tbl: [(c5cMO,
                       label: sat_s5cEA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cMO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5cMS; else goto c5cMR;
       c5cMS: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cMR: // global
           _s5cEr::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5cEz_info;
           P64[Hp - 32] = _s5cEr::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cMW,
                       label: Data.Ord.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cMW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5cN0; else goto c5cMZ;
       c5cN0: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cMZ: // global
           I64[Hp - 40] = g_s5cEr_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c5cLX::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c5cMU; else goto c5cMV;
       c5cMU: // global
           I64[Hp - 8] = sat_s5cEv_info;
           P64[Hp] = _c5cLX::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cMV: // global
           I64[Hp - 8] = sat_s5cEA_info;
           P64[Hp] = _c5cLX::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.474841224 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowsPrec_closure" {
     Data.Ord.$fShowDown_$cshowsPrec_closure:
         const Data.Ord.$fShowDown_$cshowsPrec_info;
         const 0;
 },
 Data.Ord.$fShowDown_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cN8,
                       label: Data.Ord.$fShowDown_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cN8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5cN9; else goto c5cNa;
       c5cN9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cNa: // global
           I64[Sp - 24] = block_c5cN5_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5cNe; else goto c5cN6;
       u5cNe: // global
           call _c5cN5(R1) args: 0, res: 0, upd: 0;
       c5cN6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5cN5() //  [R1]
         { info_tbl: [(c5cN5,
                       label: block_c5cN5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cN5: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.476625259 UTC

[section ""data" . Data.Ord.$fShowDown_$cshow_closure" {
     Data.Ord.$fShowDown_$cshow_closure:
         const Data.Ord.$fShowDown_$cshow_info;
         const 0;
 },
 sat_s5cEI_entry() //  [R1]
         { info_tbl: [(c5cNn,
                       label: sat_s5cEI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cNn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5cNo; else goto c5cNp;
       c5cNo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cNp: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshow_entry() //  [R2, R3]
         { info_tbl: [(c5cNq,
                       label: Data.Ord.$fShowDown_$cshow_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cNq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5cNu; else goto c5cNt;
       c5cNu: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cNt: // global
           I64[Hp - 24] = sat_s5cEI_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.478238848 UTC

[section ""data" . Data.Ord.$fShowDown1_closure" {
     Data.Ord.$fShowDown1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.479194884 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowList_closure" {
     Data.Ord.$fShowDown_$cshowList_closure:
         const Data.Ord.$fShowDown_$cshowList_info;
         const 0;
 },
 sat_s5cEN_entry() //  [R1, R2]
         { info_tbl: [(c5cNE,
                       label: sat_s5cEN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cNE: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshowList_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cNH,
                       label: Data.Ord.$fShowDown_$cshowList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cNH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cNL; else goto c5cNK;
       c5cNL: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cNK: // global
           I64[Hp - 8] = sat_s5cEN_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.480933769 UTC

[section ""data" . Data.Ord.$fShowDown_closure" {
     Data.Ord.$fShowDown_closure:
         const Data.Ord.$fShowDown_info;
         const 0;
 },
 sat_s5cER_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cNV,
                       label: sat_s5cER_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cNV: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowList_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEQ_entry() //  [R1, R2]
         { info_tbl: [(c5cO3,
                       label: sat_s5cEQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cO3: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fShowDown_$cshow_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEP_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cOb,
                       label: sat_s5cEP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cOb: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowsPrec_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_entry() //  [R2]
         { info_tbl: [(c5cOf,
                       label: Data.Ord.$fShowDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cOf: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5cOj; else goto c5cOi;
       c5cOj: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cOi: // global
           I64[Hp - 72] = sat_s5cER_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5cEQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5cEP_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.483749295 UTC

[section ""data" . Data.Ord.$fEqDown_closure" {
     Data.Ord.$fEqDown_closure:
         const Data.Ord.$fEqDown_info;
 },
 sat_s5cEU_entry() //  [R1]
         { info_tbl: [(c5cOs,
                       label: sat_s5cEU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cOs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cOt; else goto c5cOu;
       c5cOt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cOu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cET_entry() //  [R1]
         { info_tbl: [(c5cOz,
                       label: sat_s5cET_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cOz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cOA; else goto c5cOB;
       c5cOA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cOB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fEqDown_entry() //  [R2]
         { info_tbl: [(c5cOD,
                       label: Data.Ord.$fEqDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cOD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5cOH; else goto c5cOG;
       c5cOH: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Ord.$fEqDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cOG: // global
           I64[Hp - 64] = sat_s5cEU_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5cET_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.485726859 UTC

[section ""data" . Data.Ord.$fOrdDown_$cp1Ord_closure" {
     Data.Ord.$fOrdDown_$cp1Ord_closure:
         const Data.Ord.$fOrdDown_$cp1Ord_info;
 },
 sat_s5cEW_entry() //  [R1]
         { info_tbl: [(c5cOQ,
                       label: sat_s5cEW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cOQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cOR; else goto c5cOS;
       c5cOR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cOS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_$cp1Ord_entry() //  [R2]
         { info_tbl: [(c5cOT,
                       label: Data.Ord.$fOrdDown_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cOT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cOX; else goto c5cOW;
       c5cOX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cOW: // global
           I64[Hp - 16] = sat_s5cEW_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fEqDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.487492459 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<_closure" {
     Data.Ord.$fOrdDown_$c<_closure:
         const Data.Ord.$fOrdDown_$c<_info;
 },
 Data.Ord.$fOrdDown_$c<_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cP8,
                       label: Data.Ord.$fOrdDown_$c<_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cP8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5cP9; else goto c5cPa;
       c5cP9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cPa: // global
           I64[Sp - 8] = block_c5cP2_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5cP2() //  [R1]
         { info_tbl: [(c5cP2,
                       label: block_c5cP2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cP2: // global
           if (R1 & 7 == 1) goto c5cP6; else goto c5cP5;
       c5cP6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cP5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.489862544 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>=_closure" {
     Data.Ord.$fOrdDown_$c>=_closure:
         const Data.Ord.$fOrdDown_$c>=_info;
 },
 Data.Ord.$fOrdDown_$c>=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cPr,
                       label: Data.Ord.$fOrdDown_$c>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cPr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5cPs; else goto c5cPt;
       c5cPs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cPt: // global
           I64[Sp - 8] = block_c5cPl_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5cPl() //  [R1]
         { info_tbl: [(c5cPl,
                       label: block_c5cPl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cPl: // global
           if (R1 & 7 == 1) goto c5cPp; else goto c5cPo;
       c5cPp: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cPo: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.491395535 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>_closure" {
     Data.Ord.$fOrdDown_$c>_closure:
         const Data.Ord.$fOrdDown_$c>_info;
 },
 Data.Ord.$fOrdDown_$c>_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cPK,
                       label: Data.Ord.$fOrdDown_$c>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cPK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5cPL; else goto c5cPM;
       c5cPL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cPM: // global
           I64[Sp - 8] = block_c5cPE_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5cPE() //  [R1]
         { info_tbl: [(c5cPE,
                       label: block_c5cPE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cPE: // global
           if (R1 & 7 == 3) goto c5cPI; else goto c5cPH;
       c5cPI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cPH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.493034379 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<=_closure" {
     Data.Ord.$fOrdDown_$c<=_closure:
         const Data.Ord.$fOrdDown_$c<=_info;
 },
 Data.Ord.$fOrdDown_$c<=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cQ3,
                       label: Data.Ord.$fOrdDown_$c<=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cQ3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5cQ4; else goto c5cQ5;
       c5cQ4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cQ5: // global
           I64[Sp - 8] = block_c5cPX_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5cPX() //  [R1]
         { info_tbl: [(c5cPX,
                       label: block_c5cPX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cPX: // global
           if (R1 & 7 == 3) goto c5cQ1; else goto c5cQ0;
       c5cQ1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cQ0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.495110566 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmax_closure" {
     Data.Ord.$fOrdDown_$cmax_closure:
         const Data.Ord.$fOrdDown_$cmax_info;
 },
 Data.Ord.$fOrdDown_$cmax_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cQm,
                       label: Data.Ord.$fOrdDown_$cmax_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cQm: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5cQn; else goto c5cQo;
       c5cQn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cQo: // global
           I64[Sp - 24] = block_c5cQg_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5cQg() //  [R1]
         { info_tbl: [(c5cQg,
                       label: block_c5cQg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cQg: // global
           if (R1 & 7 == 3) goto c5cQk; else goto c5cQj;
       c5cQk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5cQj: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.49717558 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmin_closure" {
     Data.Ord.$fOrdDown_$cmin_closure:
         const Data.Ord.$fOrdDown_$cmin_info;
 },
 Data.Ord.$fOrdDown_$cmin_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cQF,
                       label: Data.Ord.$fOrdDown_$cmin_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cQF: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5cQG; else goto c5cQH;
       c5cQG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cQH: // global
           I64[Sp - 24] = block_c5cQz_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5cQz() //  [R1]
         { info_tbl: [(c5cQz,
                       label: block_c5cQz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cQz: // global
           if (R1 & 7 == 3) goto c5cQD; else goto c5cQC;
       c5cQD: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5cQC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.49969801 UTC

[section ""data" . Data.Ord.$fOrdDown_closure" {
     Data.Ord.$fOrdDown_closure:
         const Data.Ord.$fOrdDown_info;
 },
 sat_s5cFv_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cQX,
                       label: sat_s5cFv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cQX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmin_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFu_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cR5,
                       label: sat_s5cFu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cR5: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmax_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFt_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cRd,
                       label: sat_s5cFt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cRd: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFs_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cRl,
                       label: sat_s5cFs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cRl: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFr_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cRt,
                       label: sat_s5cFr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cRt: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFq_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cRB,
                       label: sat_s5cFq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cRB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFp_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cRJ,
                       label: sat_s5cFp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cRJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5cRK; else goto c5cRL;
       c5cRK: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cRL: // global
           _s5cFn::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s5cFn::P64;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5cFm_entry() //  [R1]
         { info_tbl: [(c5cRQ,
                       label: sat_s5cFm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cRQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cRR; else goto c5cRS;
       c5cRR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cRS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fOrdDown_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_entry() //  [R2]
         { info_tbl: [(c5cRU,
                       label: Data.Ord.$fOrdDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cRU: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c5cRY; else goto c5cRX;
       c5cRY: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cRX: // global
           I64[Hp - 200] = sat_s5cFv_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s5cFu_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s5cFt_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5cFs_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s5cFr_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s5cFq_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cFp_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5cFm_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.504631025 UTC

[section ""data" . Data.Ord.comparing_closure" {
     Data.Ord.comparing_closure:
         const Data.Ord.comparing_info;
 },
 Data.Ord.comparing_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5cS5,
                       label: Data.Ord.comparing_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cS5: // global
           _s5cFz::P64 = R5;
           _s5cFy::P64 = R4;
           _s5cFx::P64 = R3;
           _s5cFw::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c5cS6; else goto c5cS7;
       c5cS7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5cS9; else goto c5cS8;
       c5cS9: // global
           HpAlloc = 64;
           goto c5cS6;
       c5cS6: // global
           R5 = _s5cFz::P64;
           R4 = _s5cFy::P64;
           R3 = _s5cFx::P64;
           R2 = _s5cFw::P64;
           R1 = Data.Ord.comparing_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cS8: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s5cFx::P64;
           P64[Hp - 32] = _s5cFz::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5cFx::P64;
           P64[Hp] = _s5cFy::P64;
           R2 = _s5cFw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.507111368 UTC

[section ""cstring" . Data.Ord.$trModule4_bytes" {
     Data.Ord.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.508033218 UTC

[section ""data" . Data.Ord.$trModule3_closure" {
     Data.Ord.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.509020898 UTC

[section ""cstring" . Data.Ord.$trModule2_bytes" {
     Data.Ord.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,114,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.510076388 UTC

[section ""data" . Data.Ord.$trModule1_closure" {
     Data.Ord.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.511078426 UTC

[section ""data" . Data.Ord.$trModule_closure" {
     Data.Ord.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Ord.$trModule3_closure+1;
         const Data.Ord.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.51262423 UTC

[section ""data" . $krep_r5cDl_closure" {
     $krep_r5cDl_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.513511214 UTC

[section ""data" . Data.Ord.$tcDown1_closure" {
     Data.Ord.$tcDown1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$fReadDown4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.514087763 UTC

[section ""data" . Data.Ord.$tcDown_closure" {
     Data.Ord.$tcDown_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tcDown1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7479183817722852251;
         const 10417149520322703999;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.514706889 UTC

[section ""data" . $krep1_r5cDm_closure" {
     $krep1_r5cDm_closure:
         const :_con_info;
         const $krep_r5cDl_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.515344671 UTC

[section ""data" . $krep2_r5cDn_closure" {
     $krep2_r5cDn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Ord.$tcDown_closure+1;
         const $krep1_r5cDm_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.516006172 UTC

[section ""data" . Data.Ord.$tc'Down1_closure" {
     Data.Ord.$tc'Down1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5cDl_closure+2;
         const $krep2_r5cDn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.516600264 UTC

[section ""cstring" . Data.Ord.$tc'Down3_bytes" {
     Data.Ord.$tc'Down3_bytes:
         I8[] [39,68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.517739334 UTC

[section ""data" . Data.Ord.$tc'Down2_closure" {
     Data.Ord.$tc'Down2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$tc'Down3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.518359803 UTC

[section ""data" . Data.Ord.$tc'Down_closure" {
     Data.Ord.$tc'Down_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tc'Down2_closure+1;
         const Data.Ord.$tc'Down1_closure+4;
         const 2181324915805229541;
         const 7680134812570657793;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.519158319 UTC

[section ""relreadonly" . S5cGK_srt" {
     S5cGK_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Ord.$fReadDown_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Ord.$fReadDown1_closure;
         const Data.Ord.$fReadDown_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Ord.$fReadDown_$creadListPrec_closure;
         const Data.Ord.$fReadDown_$creadList_closure;
         const Data.Ord.$fReadDown_closure;
         const Data.Ord.$fShowDown2_closure;
         const Data.Ord.$w$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshow_closure;
         const Data.Ord.$fShowDown_$cshowList_closure;
         const Data.Ord.$fShowDown_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.519952043 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:10.520777699 UTC

[section ""data" . Data.Ord.$fFunctorDown2_closure" {
     Data.Ord.$fFunctorDown2_closure:
         const Data.Ord.$fFunctorDown2_info;
 },
 Data.Ord.$fFunctorDown2_entry() //  [R2]
         { info_tbl: [(c5cSe,
                       label: Data.Ord.$fFunctorDown2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cSe: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.521783453 UTC

[section ""data" . Data.Ord.$fFunctorDown1_closure" {
     Data.Ord.$fFunctorDown1_closure:
         const Data.Ord.$fFunctorDown1_info;
 },
 Data.Ord.$fFunctorDown1_entry() //  [R2]
         { info_tbl: [(c5cSl,
                       label: Data.Ord.$fFunctorDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cSl: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.523037465 UTC

[section ""data" . Data.Ord.$fFunctorDown_closure" {
     Data.Ord.$fFunctorDown_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Ord.$fFunctorDown2_closure+1;
         const Data.Ord.$fFunctorDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.523840087 UTC

[section ""data" . Data.Ord.$fApplicativeDown3_closure" {
     Data.Ord.$fApplicativeDown3_closure:
         const Data.Ord.$fApplicativeDown3_info;
 },
 Data.Ord.$fApplicativeDown3_entry() //  [R2]
         { info_tbl: [(c5cSs,
                       label: Data.Ord.$fApplicativeDown3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cSs: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.524788987 UTC

[section ""data" . Data.Ord.$fApplicativeDown4_closure" {
     Data.Ord.$fApplicativeDown4_closure:
         const Data.Ord.$fApplicativeDown4_info;
 },
 Data.Ord.$fApplicativeDown4_entry() //  [R2]
         { info_tbl: [(c5cSz,
                       label: Data.Ord.$fApplicativeDown4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cSz: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.526084901 UTC

[section ""data" . Data.Ord.$fApplicativeDown2_closure" {
     Data.Ord.$fApplicativeDown2_closure:
         const Data.Ord.$fApplicativeDown2_info;
 },
 Data.Ord.$fApplicativeDown2_entry() //  [R2, R3]
         { info_tbl: [(c5cSG,
                       label: Data.Ord.$fApplicativeDown2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cSG: // global
           _s5cDu::P64 = R2;
           R2 = R3;
           R1 = _s5cDu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.527028529 UTC

[section ""data" . Data.Ord.$fApplicativeDown_$c*>_closure" {
     Data.Ord.$fApplicativeDown_$c*>_closure:
         const Data.Ord.$fApplicativeDown_$c*>_info;
 },
 Data.Ord.$fApplicativeDown_$c*>_entry() //  [R3]
         { info_tbl: [(c5cSN,
                       label: Data.Ord.$fApplicativeDown_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cSN: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.52790926 UTC

[section ""data" . Data.Ord.$fApplicativeDown1_closure" {
     Data.Ord.$fApplicativeDown1_closure:
         const Data.Ord.$fApplicativeDown1_info;
 },
 Data.Ord.$fApplicativeDown1_entry() //  [R2]
         { info_tbl: [(c5cSU,
                       label: Data.Ord.$fApplicativeDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cSU: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.529126533 UTC

[section ""data" . Data.Ord.$fApplicativeDown_closure" {
     Data.Ord.$fApplicativeDown_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Ord.$fFunctorDown_closure+1;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const Data.Ord.$fApplicativeDown3_closure+1;
         const Data.Ord.$fApplicativeDown2_closure+2;
         const Data.Ord.$fApplicativeDown_$c*>_closure+2;
         const Data.Ord.$fApplicativeDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.530014037 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>=_closure" {
     Data.Ord.$fMonadDown_$c>>=_closure:
         const Data.Ord.$fMonadDown_$c>>=_info;
 },
 Data.Ord.$fMonadDown_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5cT1,
                       label: Data.Ord.$fMonadDown_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cT1: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.530898391 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>_closure" {
     Data.Ord.$fMonadDown_$c>>_closure:
         const Data.Ord.$fMonadDown_$c>>_info;
 },
 Data.Ord.$fMonadDown_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5cT8,
                       label: Data.Ord.$fMonadDown_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cT8: // global
           R3 = R3;
           R2 = R2;
           call Data.Ord.$fApplicativeDown_$c*>_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.5319805 UTC

[section ""data" . lvl_r5cDk_closure" {
     lvl_r5cDk_closure:
         const lvl_r5cDk_info;
         const 0;
 },
 lvl_r5cDk_entry() //  [R2]
         { info_tbl: [(c5cTf,
                       label: lvl_r5cDk_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cTf: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.532821495 UTC

[section ""data" . Data.Ord.$fMonadDown_closure" {
     Data.Ord.$fMonadDown_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Ord.$fApplicativeDown_closure+1;
         const Data.Ord.$fMonadDown_$c>>=_closure+2;
         const Data.Ord.$fMonadDown_$c>>_closure+2;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const lvl_r5cDk_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.534249968 UTC

[section ""data" . Data.Ord.$fSemigroupDown_closure" {
     Data.Ord.$fSemigroupDown_closure:
         const Data.Ord.$fSemigroupDown_info;
 },
 sat_s5cDG_entry() //  [R1]
         { info_tbl: [(c5cTq,
                       label: sat_s5cDG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cTq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cTr; else goto c5cTs;
       c5cTr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cTs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDF_entry() //  [R1]
         { info_tbl: [(c5cTx,
                       label: sat_s5cDF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cTx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cTy; else goto c5cTz;
       c5cTy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cTz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDE_entry() //  [R1]
         { info_tbl: [(c5cTE,
                       label: sat_s5cDE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cTE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cTF; else goto c5cTG;
       c5cTF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cTG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fSemigroupDown_entry() //  [R2]
         { info_tbl: [(c5cTI,
                       label: Data.Ord.$fSemigroupDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cTI: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5cTM; else goto c5cTL;
       c5cTM: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Ord.$fSemigroupDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cTL: // global
           I64[Hp - 96] = sat_s5cDG_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5cDF_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5cDE_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.5370424 UTC

[section ""data" . Data.Ord.$fMonoidDown_$cp1Monoid_closure" {
     Data.Ord.$fMonoidDown_$cp1Monoid_closure:
         const Data.Ord.$fMonoidDown_$cp1Monoid_info;
 },
 sat_s5cDI_entry() //  [R1]
         { info_tbl: [(c5cTV,
                       label: sat_s5cDI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cTV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cTW; else goto c5cTX;
       c5cTW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cTX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c5cTY,
                       label: Data.Ord.$fMonoidDown_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cTY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cU2; else goto c5cU1;
       c5cU2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cU1: // global
           I64[Hp - 16] = sat_s5cDI_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fSemigroupDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.539167073 UTC

[section ""data" . Data.Ord.$fMonoidDown_closure" {
     Data.Ord.$fMonoidDown_closure:
         const Data.Ord.$fMonoidDown_info;
 },
 sat_s5cDN_entry() //  [R1]
         { info_tbl: [(c5cUb,
                       label: sat_s5cDN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cUb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cUc; else goto c5cUd;
       c5cUc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cUd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDM_entry() //  [R1]
         { info_tbl: [(c5cUi,
                       label: sat_s5cDM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cUi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cUj; else goto c5cUk;
       c5cUj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cUk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDL_entry() //  [R1]
         { info_tbl: [(c5cUp,
                       label: sat_s5cDL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cUp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cUq; else goto c5cUr;
       c5cUq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cUr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDK_entry() //  [R1]
         { info_tbl: [(c5cUw,
                       label: sat_s5cDK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cUw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cUx; else goto c5cUy;
       c5cUx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cUy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fMonoidDown_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_entry() //  [R2]
         { info_tbl: [(c5cUA,
                       label: Data.Ord.$fMonoidDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cUA: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5cUE; else goto c5cUD;
       c5cUE: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cUD: // global
           I64[Hp - 128] = sat_s5cDN_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cDM_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5cDL_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5cDK_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.543071308 UTC

[section ""data" . Data.Ord.$fNumDown_closure" {
     Data.Ord.$fNumDown_closure:
         const Data.Ord.$fNumDown_info;
 },
 sat_s5cDV_entry() //  [R1]
         { info_tbl: [(c5cUN,
                       label: sat_s5cDV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cUN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cUO; else goto c5cUP;
       c5cUO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cUP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDU_entry() //  [R1]
         { info_tbl: [(c5cUU,
                       label: sat_s5cDU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cUU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cUV; else goto c5cUW;
       c5cUV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cUW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDT_entry() //  [R1]
         { info_tbl: [(c5cV1,
                       label: sat_s5cDT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cV1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cV2; else goto c5cV3;
       c5cV2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cV3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDS_entry() //  [R1]
         { info_tbl: [(c5cV8,
                       label: sat_s5cDS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cV8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cV9; else goto c5cVa;
       c5cV9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cVa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDR_entry() //  [R1]
         { info_tbl: [(c5cVf,
                       label: sat_s5cDR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cVf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cVg; else goto c5cVh;
       c5cVg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cVh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDQ_entry() //  [R1]
         { info_tbl: [(c5cVm,
                       label: sat_s5cDQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cVm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cVn; else goto c5cVo;
       c5cVn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cVo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDP_entry() //  [R1]
         { info_tbl: [(c5cVt,
                       label: sat_s5cDP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cVt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cVu; else goto c5cVv;
       c5cVu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cVv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fNumDown_entry() //  [R2]
         { info_tbl: [(c5cVx,
                       label: Data.Ord.$fNumDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cVx: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c5cVB; else goto c5cVA;
       c5cVB: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Ord.$fNumDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cVA: // global
           I64[Hp - 224] = sat_s5cDV_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s5cDU_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s5cDT_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5cDS_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s5cDR_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cDQ_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5cDP_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.546122947 UTC

[section ""cstring" . Data.Ord.$fReadDown4_bytes" {
     Data.Ord.$fReadDown4_bytes:
         I8[] [68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.547135231 UTC

[section ""data" . Data.Ord.$fReadDown3_closure" {
     Data.Ord.$fReadDown3_closure:
         const Data.Ord.$fReadDown3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fReadDown3_entry() //  [R1]
         { info_tbl: [(c5cVI,
                       label: Data.Ord.$fReadDown3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cVI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cVJ; else goto c5cVK;
       c5cVJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cVK: // global
           (_c5cVF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5cVF::I64 == 0) goto c5cVH; else goto c5cVG;
       c5cVH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5cVG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5cVF::I64;
           R2 = Data.Ord.$fReadDown4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.54869868 UTC

[section ""data" . Data.Ord.$fReadDown_lexeme_closure" {
     Data.Ord.$fReadDown_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Ord.$fReadDown3_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.549389937 UTC

[section ""data" . Data.Ord.$fReadDown2_closure" {
     Data.Ord.$fReadDown2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.551165642 UTC

[section ""data" . Data.Ord.$fReadDown1_closure" {
     Data.Ord.$fReadDown1_closure:
         const Data.Ord.$fReadDown1_info;
         const 0;
 },
 sat_s5cE6_entry() //  [R1, R2]
         { info_tbl: [(c5cWd,
                       label: sat_s5cE6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cWd: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cE7_entry() //  [R1, R2]
         { info_tbl: [(c5cWg,
                       label: sat_s5cE7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cWg: // global
           _s5cE4::P64 = R2;
           _s5cE7::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5cWh; else goto c5cWi;
       c5cWi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cWk; else goto c5cWj;
       c5cWk: // global
           HpAlloc = 16;
           goto c5cWh;
       c5cWh: // global
           R2 = _s5cE4::P64;
           R1 = _s5cE7::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cWj: // global
           _s5cDW::P64 = P64[_s5cE7::P64 + 7];
           _s5cE0::P64 = P64[_s5cE7::P64 + 15];
           I64[Hp - 8] = sat_s5cE6_info;
           P64[Hp] = _s5cE0::P64;
           R2 = _s5cDW::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5cEa_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cWl,
                       label: sat_s5cEa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cWl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5cWm; else goto c5cWn;
       c5cWm: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cWn: // global
           I64[Sp - 24] = block_c5cVU_info;
           _s5cDW::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s5cDW::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5cWA; else goto c5cVV;
       u5cWA: // global
           call _c5cVU(R1) args: 0, res: 0, upd: 0;
       c5cVV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5cVU() //  [R1]
         { info_tbl: [(c5cVU,
                       label: block_c5cVU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cVU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cWq; else goto c5cWp;
       c5cWq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5cWp: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c5cWs; else goto c5cWw;
       c5cWs: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cWw: // global
           I64[Hp - 16] = sat_s5cE7_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c5cWt_info;
           R3 = Hp - 15;
           R2 = Data.Ord.$fReadDown_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5cWt() //  [R1]
         { info_tbl: [(c5cWt,
                       label: block_c5cWt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cWt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cWz; else goto c5cWy;
       c5cWz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5cWy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown1_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cWB,
                       label: Data.Ord.$fReadDown1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cWB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cWF; else goto c5cWE;
       c5cWF: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cWE: // global
           I64[Hp - 8] = sat_s5cEa_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.555389798 UTC

[section ""data" . Data.Ord.$fReadDown_$creadsPrec_closure" {
     Data.Ord.$fReadDown_$creadsPrec_closure:
         const Data.Ord.$fReadDown_$creadsPrec_info;
         const 0;
 },
 sat_s5cEd_entry() //  [R1]
         { info_tbl: [(c5cWO,
                       label: sat_s5cEd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cWO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cWP; else goto c5cWQ;
       c5cWP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cWQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5cWR,
                       label: Data.Ord.$fReadDown_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cWR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5cWV; else goto c5cWU;
       c5cWV: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cWU: // global
           I64[Hp - 24] = sat_s5cEd_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.557023731 UTC

[section ""data" . Data.Ord.$fReadDown_$creadListPrec_closure" {
     Data.Ord.$fReadDown_$creadListPrec_closure:
         const Data.Ord.$fReadDown_$creadListPrec_info;
         const 0;
 },
 sat_s5cEf_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cX5,
                       label: sat_s5cEf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cX5: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_$creadListPrec_entry() //  [R2]
         { info_tbl: [(c5cX8,
                       label: Data.Ord.$fReadDown_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cX8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cXc; else goto c5cXb;
       c5cXc: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cXb: // global
           I64[Hp - 8] = sat_s5cEf_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.559000976 UTC

[section ""data" . Data.Ord.$fReadDown_$creadList_closure" {
     Data.Ord.$fReadDown_$creadList_closure:
         const Data.Ord.$fReadDown_$creadList_info;
         const 0;
 },
 sat_s5cEh_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cXq,
                       label: sat_s5cEh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cXq: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEi_entry() //  [R1]
         { info_tbl: [(c5cXt,
                       label: sat_s5cEi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cXt: // global
           _s5cEi::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5cXu; else goto c5cXv;
       c5cXv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5cXx; else goto c5cXw;
       c5cXx: // global
           HpAlloc = 16;
           goto c5cXu;
       c5cXu: // global
           R1 = _s5cEi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cXw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5cEi::P64;
           _s5cEg::P64 = P64[_s5cEi::P64 + 16];
           I64[Hp - 8] = sat_s5cEh_info;
           P64[Hp] = _s5cEg::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadList_entry() //  [R2]
         { info_tbl: [(c5cXy,
                       label: Data.Ord.$fReadDown_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cXy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cXC; else goto c5cXB;
       c5cXC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cXB: // global
           I64[Hp - 16] = sat_s5cEi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.561487729 UTC

[section ""data" . Data.Ord.$fReadDown_closure" {
     Data.Ord.$fReadDown_closure:
         const Data.Ord.$fReadDown_info;
         const 0;
 },
 sat_s5cEn_entry() //  [R1]
         { info_tbl: [(c5cXL,
                       label: sat_s5cEn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cXL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cXM; else goto c5cXN;
       c5cXM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cXN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEm_entry() //  [R1, R2, R3]
         { info_tbl: [(c5cXT,
                       label: sat_s5cEm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cXT: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEl_entry() //  [R1]
         { info_tbl: [(c5cY0,
                       label: sat_s5cEl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cY0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cY1; else goto c5cY2;
       c5cY1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cY2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEk_entry() //  [R1, R2]
         { info_tbl: [(c5cY8,
                       label: sat_s5cEk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cY8: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fReadDown_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_entry() //  [R2]
         { info_tbl: [(c5cYc,
                       label: Data.Ord.$fReadDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cYc: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5cYg; else goto c5cYf;
       c5cYg: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cYf: // global
           I64[Hp - 112] = sat_s5cEn_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5cEm_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5cEl_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5cEk_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.564998295 UTC

[section ""cstring" . Data.Ord.$fShowDown3_bytes" {
     Data.Ord.$fShowDown3_bytes:
         I8[] [68,111,119,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.566298863 UTC

[section ""data" . Data.Ord.$fShowDown2_closure" {
     Data.Ord.$fShowDown2_closure:
         const Data.Ord.$fShowDown2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fShowDown2_entry() //  [R1]
         { info_tbl: [(c5cYn,
                       label: Data.Ord.$fShowDown2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cYn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5cYo; else goto c5cYp;
       c5cYo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cYp: // global
           (_c5cYk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5cYk::I64 == 0) goto c5cYm; else goto c5cYl;
       c5cYm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5cYl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5cYk::I64;
           R2 = Data.Ord.$fShowDown3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.569823965 UTC

[section ""data" . Data.Ord.$w$cshowsPrec_closure" {
     Data.Ord.$w$cshowsPrec_closure:
         const Data.Ord.$w$cshowsPrec_info;
         const 0;
 },
 g_s5cEr_entry() //  [R1]
         { info_tbl: [(c5cYy,
                       label: g_s5cEr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cYy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5cYz; else goto c5cYA;
       c5cYz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cYA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5cEu_entry() //  [R1]
         { info_tbl: [(c5cYN,
                       label: sat_s5cEu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cYN: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEv_entry() //  [R1, R2]
         { info_tbl: [(c5cYQ,
                       label: sat_s5cEv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cYQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5cYU; else goto c5cYT;
       c5cYU: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cYT: // global
           _s5cEr::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5cEu_info;
           P64[Hp - 8] = _s5cEr::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEy_entry() //  [R1]
         { info_tbl: [(c5cZa,
                       label: sat_s5cEy_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5cZe; else goto c5cZd;
       c5cZe: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cZd: // global
           _s5cEr::P64 = P64[R1 + 16];
           _s5cEw::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5cEw::P64;
           R2 = Hp - 14;
           R1 = _s5cEr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEz_entry() //  [R1]
         { info_tbl: [(c5cZf,
                       label: sat_s5cEz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZf: // global
           _s5cEz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5cZg; else goto c5cZh;
       c5cZh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5cZj; else goto c5cZi;
       c5cZj: // global
           HpAlloc = 32;
           goto c5cZg;
       c5cZg: // global
           R1 = _s5cEz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cZi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5cEz::P64;
           _s5cEr::P64 = P64[_s5cEz::P64 + 16];
           _s5cEw::P64 = P64[_s5cEz::P64 + 24];
           I64[Hp - 24] = sat_s5cEy_info;
           P64[Hp - 8] = _s5cEr::P64;
           P64[Hp] = _s5cEw::P64;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEA_entry() //  [R1, R2]
         { info_tbl: [(c5cZl,
                       label: sat_s5cEA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5cZp; else goto c5cZo;
       c5cZp: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5cZo: // global
           _s5cEr::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5cEz_info;
           P64[Hp - 32] = _s5cEr::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cZt,
                       label: Data.Ord.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5cZx; else goto c5cZw;
       c5cZx: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cZw: // global
           I64[Hp - 40] = g_s5cEr_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c5cYu::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c5cZr; else goto c5cZs;
       c5cZr: // global
           I64[Hp - 8] = sat_s5cEv_info;
           P64[Hp] = _c5cYu::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5cZs: // global
           I64[Hp - 8] = sat_s5cEA_info;
           P64[Hp] = _c5cYu::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.574290607 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowsPrec_closure" {
     Data.Ord.$fShowDown_$cshowsPrec_closure:
         const Data.Ord.$fShowDown_$cshowsPrec_info;
         const 0;
 },
 Data.Ord.$fShowDown_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5cZF,
                       label: Data.Ord.$fShowDown_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5cZG; else goto c5cZH;
       c5cZG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5cZH: // global
           I64[Sp - 24] = block_c5cZC_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5cZL; else goto c5cZD;
       u5cZL: // global
           call _c5cZC(R1) args: 0, res: 0, upd: 0;
       c5cZD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5cZC() //  [R1]
         { info_tbl: [(c5cZC,
                       label: block_c5cZC_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZC: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.57663538 UTC

[section ""data" . Data.Ord.$fShowDown_$cshow_closure" {
     Data.Ord.$fShowDown_$cshow_closure:
         const Data.Ord.$fShowDown_$cshow_info;
         const 0;
 },
 sat_s5cEI_entry() //  [R1]
         { info_tbl: [(c5cZU,
                       label: sat_s5cEI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5cZV; else goto c5cZW;
       c5cZV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5cZW: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshow_entry() //  [R2, R3]
         { info_tbl: [(c5cZX,
                       label: Data.Ord.$fShowDown_$cshow_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5cZX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5d01; else goto c5d00;
       c5d01: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d00: // global
           I64[Hp - 24] = sat_s5cEI_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.579302282 UTC

[section ""data" . Data.Ord.$fShowDown1_closure" {
     Data.Ord.$fShowDown1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.580763199 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowList_closure" {
     Data.Ord.$fShowDown_$cshowList_closure:
         const Data.Ord.$fShowDown_$cshowList_info;
         const 0;
 },
 sat_s5cEN_entry() //  [R1, R2]
         { info_tbl: [(c5d0b,
                       label: sat_s5cEN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d0b: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshowList_entry() //  [R2, R3, R4]
         { info_tbl: [(c5d0e,
                       label: Data.Ord.$fShowDown_$cshowList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d0e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5d0i; else goto c5d0h;
       c5d0i: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d0h: // global
           I64[Hp - 8] = sat_s5cEN_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.583375735 UTC

[section ""data" . Data.Ord.$fShowDown_closure" {
     Data.Ord.$fShowDown_closure:
         const Data.Ord.$fShowDown_info;
         const 0;
 },
 sat_s5cER_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d0s,
                       label: sat_s5cER_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d0s: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowList_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEQ_entry() //  [R1, R2]
         { info_tbl: [(c5d0A,
                       label: sat_s5cEQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d0A: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fShowDown_$cshow_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEP_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d0I,
                       label: sat_s5cEP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d0I: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowsPrec_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_entry() //  [R2]
         { info_tbl: [(c5d0M,
                       label: Data.Ord.$fShowDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d0M: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5d0Q; else goto c5d0P;
       c5d0Q: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d0P: // global
           I64[Hp - 72] = sat_s5cER_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5cEQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5cEP_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.58656076 UTC

[section ""data" . Data.Ord.$fEqDown_closure" {
     Data.Ord.$fEqDown_closure:
         const Data.Ord.$fEqDown_info;
 },
 sat_s5cEU_entry() //  [R1]
         { info_tbl: [(c5d0Z,
                       label: sat_s5cEU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d0Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d10; else goto c5d11;
       c5d10: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d11: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cET_entry() //  [R1]
         { info_tbl: [(c5d16,
                       label: sat_s5cET_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d16: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d17; else goto c5d18;
       c5d17: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d18: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fEqDown_entry() //  [R2]
         { info_tbl: [(c5d1a,
                       label: Data.Ord.$fEqDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d1a: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5d1e; else goto c5d1d;
       c5d1e: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Ord.$fEqDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d1d: // global
           I64[Hp - 64] = sat_s5cEU_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5cET_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.589926337 UTC

[section ""data" . Data.Ord.$fOrdDown_$cp1Ord_closure" {
     Data.Ord.$fOrdDown_$cp1Ord_closure:
         const Data.Ord.$fOrdDown_$cp1Ord_info;
 },
 sat_s5cEW_entry() //  [R1]
         { info_tbl: [(c5d1n,
                       label: sat_s5cEW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d1n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d1o; else goto c5d1p;
       c5d1o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d1p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_$cp1Ord_entry() //  [R2]
         { info_tbl: [(c5d1q,
                       label: Data.Ord.$fOrdDown_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d1q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5d1u; else goto c5d1t;
       c5d1u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d1t: // global
           I64[Hp - 16] = sat_s5cEW_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fEqDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.592024597 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<_closure" {
     Data.Ord.$fOrdDown_$c<_closure:
         const Data.Ord.$fOrdDown_$c<_info;
 },
 Data.Ord.$fOrdDown_$c<_entry() //  [R2, R3, R4]
         { info_tbl: [(c5d1F,
                       label: Data.Ord.$fOrdDown_$c<_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d1F: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5d1G; else goto c5d1H;
       c5d1G: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d1H: // global
           I64[Sp - 8] = block_c5d1z_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5d1z() //  [R1]
         { info_tbl: [(c5d1z,
                       label: block_c5d1z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d1z: // global
           if (R1 & 7 == 1) goto c5d1D; else goto c5d1C;
       c5d1D: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5d1C: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.59429742 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>=_closure" {
     Data.Ord.$fOrdDown_$c>=_closure:
         const Data.Ord.$fOrdDown_$c>=_info;
 },
 Data.Ord.$fOrdDown_$c>=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5d1Y,
                       label: Data.Ord.$fOrdDown_$c>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d1Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5d1Z; else goto c5d20;
       c5d1Z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d20: // global
           I64[Sp - 8] = block_c5d1S_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5d1S() //  [R1]
         { info_tbl: [(c5d1S,
                       label: block_c5d1S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d1S: // global
           if (R1 & 7 == 1) goto c5d1W; else goto c5d1V;
       c5d1W: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5d1V: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.596408053 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>_closure" {
     Data.Ord.$fOrdDown_$c>_closure:
         const Data.Ord.$fOrdDown_$c>_info;
 },
 Data.Ord.$fOrdDown_$c>_entry() //  [R2, R3, R4]
         { info_tbl: [(c5d2h,
                       label: Data.Ord.$fOrdDown_$c>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d2h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5d2i; else goto c5d2j;
       c5d2i: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d2j: // global
           I64[Sp - 8] = block_c5d2b_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5d2b() //  [R1]
         { info_tbl: [(c5d2b,
                       label: block_c5d2b_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d2b: // global
           if (R1 & 7 == 3) goto c5d2f; else goto c5d2e;
       c5d2f: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5d2e: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.599279603 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<=_closure" {
     Data.Ord.$fOrdDown_$c<=_closure:
         const Data.Ord.$fOrdDown_$c<=_info;
 },
 Data.Ord.$fOrdDown_$c<=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5d2A,
                       label: Data.Ord.$fOrdDown_$c<=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d2A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5d2B; else goto c5d2C;
       c5d2B: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d2C: // global
           I64[Sp - 8] = block_c5d2u_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5d2u() //  [R1]
         { info_tbl: [(c5d2u,
                       label: block_c5d2u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d2u: // global
           if (R1 & 7 == 3) goto c5d2y; else goto c5d2x;
       c5d2y: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5d2x: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.601422134 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmax_closure" {
     Data.Ord.$fOrdDown_$cmax_closure:
         const Data.Ord.$fOrdDown_$cmax_info;
 },
 Data.Ord.$fOrdDown_$cmax_entry() //  [R2, R3, R4]
         { info_tbl: [(c5d2T,
                       label: Data.Ord.$fOrdDown_$cmax_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d2T: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5d2U; else goto c5d2V;
       c5d2U: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d2V: // global
           I64[Sp - 24] = block_c5d2N_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5d2N() //  [R1]
         { info_tbl: [(c5d2N,
                       label: block_c5d2N_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d2N: // global
           if (R1 & 7 == 3) goto c5d2R; else goto c5d2Q;
       c5d2R: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5d2Q: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.603599555 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmin_closure" {
     Data.Ord.$fOrdDown_$cmin_closure:
         const Data.Ord.$fOrdDown_$cmin_info;
 },
 Data.Ord.$fOrdDown_$cmin_entry() //  [R2, R3, R4]
         { info_tbl: [(c5d3c,
                       label: Data.Ord.$fOrdDown_$cmin_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d3c: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5d3d; else goto c5d3e;
       c5d3d: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d3e: // global
           I64[Sp - 24] = block_c5d36_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5d36() //  [R1]
         { info_tbl: [(c5d36,
                       label: block_c5d36_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d36: // global
           if (R1 & 7 == 3) goto c5d3a; else goto c5d39;
       c5d3a: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5d39: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.607786118 UTC

[section ""data" . Data.Ord.$fOrdDown_closure" {
     Data.Ord.$fOrdDown_closure:
         const Data.Ord.$fOrdDown_info;
 },
 sat_s5cFv_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d3u,
                       label: sat_s5cFv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d3u: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmin_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFu_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d3C,
                       label: sat_s5cFu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d3C: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmax_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFt_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d3K,
                       label: sat_s5cFt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d3K: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFs_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d3S,
                       label: sat_s5cFs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d3S: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFr_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d40,
                       label: sat_s5cFr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d40: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFq_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d48,
                       label: sat_s5cFq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d48: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFp_entry() //  [R1, R2, R3]
         { info_tbl: [(c5d4g,
                       label: sat_s5cFp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d4g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5d4h; else goto c5d4i;
       c5d4h: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d4i: // global
           _s5cFn::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s5cFn::P64;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5cFm_entry() //  [R1]
         { info_tbl: [(c5d4n,
                       label: sat_s5cFm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d4n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d4o; else goto c5d4p;
       c5d4o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d4p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fOrdDown_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_entry() //  [R2]
         { info_tbl: [(c5d4r,
                       label: Data.Ord.$fOrdDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d4r: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c5d4v; else goto c5d4u;
       c5d4v: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d4u: // global
           I64[Hp - 200] = sat_s5cFv_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s5cFu_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s5cFt_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5cFs_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s5cFr_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s5cFq_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cFp_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5cFm_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.613309941 UTC

[section ""data" . Data.Ord.comparing_closure" {
     Data.Ord.comparing_closure:
         const Data.Ord.comparing_info;
 },
 Data.Ord.comparing_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5d4C,
                       label: Data.Ord.comparing_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d4C: // global
           _s5cFz::P64 = R5;
           _s5cFy::P64 = R4;
           _s5cFx::P64 = R3;
           _s5cFw::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c5d4D; else goto c5d4E;
       c5d4E: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5d4G; else goto c5d4F;
       c5d4G: // global
           HpAlloc = 64;
           goto c5d4D;
       c5d4D: // global
           R5 = _s5cFz::P64;
           R4 = _s5cFy::P64;
           R3 = _s5cFx::P64;
           R2 = _s5cFw::P64;
           R1 = Data.Ord.comparing_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5d4F: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s5cFx::P64;
           P64[Hp - 32] = _s5cFz::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5cFx::P64;
           P64[Hp] = _s5cFy::P64;
           R2 = _s5cFw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.615775436 UTC

[section ""cstring" . Data.Ord.$trModule4_bytes" {
     Data.Ord.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.616664931 UTC

[section ""data" . Data.Ord.$trModule3_closure" {
     Data.Ord.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.617650192 UTC

[section ""cstring" . Data.Ord.$trModule2_bytes" {
     Data.Ord.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,114,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.618576579 UTC

[section ""data" . Data.Ord.$trModule1_closure" {
     Data.Ord.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.619478064 UTC

[section ""data" . Data.Ord.$trModule_closure" {
     Data.Ord.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Ord.$trModule3_closure+1;
         const Data.Ord.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.620408456 UTC

[section ""data" . $krep_r5cDl_closure" {
     $krep_r5cDl_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.621365709 UTC

[section ""data" . Data.Ord.$tcDown1_closure" {
     Data.Ord.$tcDown1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$fReadDown4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.622658231 UTC

[section ""data" . Data.Ord.$tcDown_closure" {
     Data.Ord.$tcDown_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tcDown1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7479183817722852251;
         const 10417149520322703999;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.623331728 UTC

[section ""data" . $krep1_r5cDm_closure" {
     $krep1_r5cDm_closure:
         const :_con_info;
         const $krep_r5cDl_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.623970016 UTC

[section ""data" . $krep2_r5cDn_closure" {
     $krep2_r5cDn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Ord.$tcDown_closure+1;
         const $krep1_r5cDm_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.624566555 UTC

[section ""data" . Data.Ord.$tc'Down1_closure" {
     Data.Ord.$tc'Down1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5cDl_closure+2;
         const $krep2_r5cDn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.625322196 UTC

[section ""cstring" . Data.Ord.$tc'Down3_bytes" {
     Data.Ord.$tc'Down3_bytes:
         I8[] [39,68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.626163075 UTC

[section ""data" . Data.Ord.$tc'Down2_closure" {
     Data.Ord.$tc'Down2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$tc'Down3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.627001697 UTC

[section ""data" . Data.Ord.$tc'Down_closure" {
     Data.Ord.$tc'Down_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tc'Down2_closure+1;
         const Data.Ord.$tc'Down1_closure+4;
         const 2181324915805229541;
         const 7680134812570657793;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.62839615 UTC

[section ""relreadonly" . S5cGK_srt" {
     S5cGK_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Ord.$fReadDown_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Ord.$fReadDown1_closure;
         const Data.Ord.$fReadDown_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Ord.$fReadDown_$creadListPrec_closure;
         const Data.Ord.$fReadDown_$creadList_closure;
         const Data.Ord.$fReadDown_closure;
         const Data.Ord.$fShowDown2_closure;
         const Data.Ord.$w$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshow_closure;
         const Data.Ord.$fShowDown_$cshowList_closure;
         const Data.Ord.$fShowDown_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.629409568 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:10.631325967 UTC

[section ""data" . Data.Ord.$fFunctorDown2_closure" {
     Data.Ord.$fFunctorDown2_closure:
         const Data.Ord.$fFunctorDown2_info;
 },
 Data.Ord.$fFunctorDown2_entry() //  [R2]
         { info_tbl: [(c5d4L,
                       label: Data.Ord.$fFunctorDown2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d4L: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.637304487 UTC

[section ""data" . Data.Ord.$fFunctorDown1_closure" {
     Data.Ord.$fFunctorDown1_closure:
         const Data.Ord.$fFunctorDown1_info;
 },
 Data.Ord.$fFunctorDown1_entry() //  [R2]
         { info_tbl: [(c5d4W,
                       label: Data.Ord.$fFunctorDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d4W: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.643223364 UTC

[section ""data" . Data.Ord.$fFunctorDown_closure" {
     Data.Ord.$fFunctorDown_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Ord.$fFunctorDown2_closure+1;
         const Data.Ord.$fFunctorDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.646497444 UTC

[section ""data" . Data.Ord.$fApplicativeDown3_closure" {
     Data.Ord.$fApplicativeDown3_closure:
         const Data.Ord.$fApplicativeDown3_info;
 },
 Data.Ord.$fApplicativeDown3_entry() //  [R2]
         { info_tbl: [(c5d58,
                       label: Data.Ord.$fApplicativeDown3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d58: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.652606583 UTC

[section ""data" . Data.Ord.$fApplicativeDown4_closure" {
     Data.Ord.$fApplicativeDown4_closure:
         const Data.Ord.$fApplicativeDown4_info;
 },
 Data.Ord.$fApplicativeDown4_entry() //  [R2]
         { info_tbl: [(c5d5j,
                       label: Data.Ord.$fApplicativeDown4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d5j: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.657818582 UTC

[section ""data" . Data.Ord.$fApplicativeDown2_closure" {
     Data.Ord.$fApplicativeDown2_closure:
         const Data.Ord.$fApplicativeDown2_info;
 },
 Data.Ord.$fApplicativeDown2_entry() //  [R2, R3]
         { info_tbl: [(c5d5u,
                       label: Data.Ord.$fApplicativeDown2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d5u: // global
           _s5cDu::P64 = R2;
           R2 = R3;
           R1 = _s5cDu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.663929049 UTC

[section ""data" . Data.Ord.$fApplicativeDown_$c*>_closure" {
     Data.Ord.$fApplicativeDown_$c*>_closure:
         const Data.Ord.$fApplicativeDown_$c*>_info;
 },
 Data.Ord.$fApplicativeDown_$c*>_entry() //  [R3]
         { info_tbl: [(c5d5F,
                       label: Data.Ord.$fApplicativeDown_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d5F: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.669387298 UTC

[section ""data" . Data.Ord.$fApplicativeDown1_closure" {
     Data.Ord.$fApplicativeDown1_closure:
         const Data.Ord.$fApplicativeDown1_info;
 },
 Data.Ord.$fApplicativeDown1_entry() //  [R2]
         { info_tbl: [(c5d5Q,
                       label: Data.Ord.$fApplicativeDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d5Q: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.674992013 UTC

[section ""data" . Data.Ord.$fApplicativeDown_closure" {
     Data.Ord.$fApplicativeDown_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Ord.$fFunctorDown_closure+1;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const Data.Ord.$fApplicativeDown3_closure+1;
         const Data.Ord.$fApplicativeDown2_closure+2;
         const Data.Ord.$fApplicativeDown_$c*>_closure+2;
         const Data.Ord.$fApplicativeDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.679274536 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>=_closure" {
     Data.Ord.$fMonadDown_$c>>=_closure:
         const Data.Ord.$fMonadDown_$c>>=_info;
 },
 Data.Ord.$fMonadDown_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5d62,
                       label: Data.Ord.$fMonadDown_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d62: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.686546457 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>_closure" {
     Data.Ord.$fMonadDown_$c>>_closure:
         const Data.Ord.$fMonadDown_$c>>_info;
 },
 Data.Ord.$fMonadDown_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5d6d,
                       label: Data.Ord.$fMonadDown_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d6d: // global
           R3 = R3;
           R2 = R2;
           call Data.Ord.$fApplicativeDown_$c*>_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.692043598 UTC

[section ""data" . lvl_r5cDk_closure" {
     lvl_r5cDk_closure:
         const lvl_r5cDk_info;
         const 0;
 },
 lvl_r5cDk_entry() //  [R2]
         { info_tbl: [(c5d6o,
                       label: lvl_r5cDk_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d6o: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.697902036 UTC

[section ""data" . Data.Ord.$fMonadDown_closure" {
     Data.Ord.$fMonadDown_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Ord.$fApplicativeDown_closure+1;
         const Data.Ord.$fMonadDown_$c>>=_closure+2;
         const Data.Ord.$fMonadDown_$c>>_closure+2;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const lvl_r5cDk_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.702579175 UTC

[section ""data" . Data.Ord.$fSemigroupDown_closure" {
     Data.Ord.$fSemigroupDown_closure:
         const Data.Ord.$fSemigroupDown_info;
 },
 sat_s5cDG_entry() //  [R1]
         { info_tbl: [(c5d6E,
                       label: sat_s5cDG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d6E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d6F; else goto c5d6G;
       c5d6F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d6G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDF_entry() //  [R1]
         { info_tbl: [(c5d6L,
                       label: sat_s5cDF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d6L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d6M; else goto c5d6N;
       c5d6M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d6N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDE_entry() //  [R1]
         { info_tbl: [(c5d6S,
                       label: sat_s5cDE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d6S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d6T; else goto c5d6U;
       c5d6T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d6U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fSemigroupDown_entry() //  [R2]
         { info_tbl: [(c5d6W,
                       label: Data.Ord.$fSemigroupDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d6W: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5d70; else goto c5d6Z;
       c5d70: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Ord.$fSemigroupDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d6Z: // global
           I64[Hp - 96] = sat_s5cDG_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5cDF_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5cDE_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.720570831 UTC

[section ""data" . Data.Ord.$fMonoidDown_$cp1Monoid_closure" {
     Data.Ord.$fMonoidDown_$cp1Monoid_closure:
         const Data.Ord.$fMonoidDown_$cp1Monoid_info;
 },
 sat_s5cDI_entry() //  [R1]
         { info_tbl: [(c5d7t,
                       label: sat_s5cDI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d7t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d7u; else goto c5d7v;
       c5d7u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d7v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c5d7w,
                       label: Data.Ord.$fMonoidDown_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d7w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5d7A; else goto c5d7z;
       c5d7A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d7z: // global
           I64[Hp - 16] = sat_s5cDI_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fSemigroupDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.731770461 UTC

[section ""data" . Data.Ord.$fMonoidDown_closure" {
     Data.Ord.$fMonoidDown_closure:
         const Data.Ord.$fMonoidDown_info;
 },
 sat_s5cDN_entry() //  [R1]
         { info_tbl: [(c5d7R,
                       label: sat_s5cDN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d7R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d7S; else goto c5d7T;
       c5d7S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d7T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDM_entry() //  [R1]
         { info_tbl: [(c5d7Y,
                       label: sat_s5cDM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d7Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d7Z; else goto c5d80;
       c5d7Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d80: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDL_entry() //  [R1]
         { info_tbl: [(c5d85,
                       label: sat_s5cDL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d85: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d86; else goto c5d87;
       c5d86: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d87: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDK_entry() //  [R1]
         { info_tbl: [(c5d8c,
                       label: sat_s5cDK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d8c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d8d; else goto c5d8e;
       c5d8d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d8e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fMonoidDown_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_entry() //  [R2]
         { info_tbl: [(c5d8g,
                       label: Data.Ord.$fMonoidDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d8g: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5d8k; else goto c5d8j;
       c5d8k: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d8j: // global
           I64[Hp - 128] = sat_s5cDN_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cDM_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5cDL_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5cDK_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.754245029 UTC

[section ""data" . Data.Ord.$fNumDown_closure" {
     Data.Ord.$fNumDown_closure:
         const Data.Ord.$fNumDown_info;
 },
 sat_s5cDV_entry() //  [R1]
         { info_tbl: [(c5d8S,
                       label: sat_s5cDV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d8S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d8T; else goto c5d8U;
       c5d8T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d8U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDU_entry() //  [R1]
         { info_tbl: [(c5d8Z,
                       label: sat_s5cDU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d8Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d90; else goto c5d91;
       c5d90: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d91: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDT_entry() //  [R1]
         { info_tbl: [(c5d96,
                       label: sat_s5cDT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d96: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d97; else goto c5d98;
       c5d97: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d98: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDS_entry() //  [R1]
         { info_tbl: [(c5d9d,
                       label: sat_s5cDS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d9d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d9e; else goto c5d9f;
       c5d9e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d9f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDR_entry() //  [R1]
         { info_tbl: [(c5d9k,
                       label: sat_s5cDR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d9k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d9l; else goto c5d9m;
       c5d9l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d9m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDQ_entry() //  [R1]
         { info_tbl: [(c5d9r,
                       label: sat_s5cDQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d9r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d9s; else goto c5d9t;
       c5d9s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d9t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cDP_entry() //  [R1]
         { info_tbl: [(c5d9y,
                       label: sat_s5cDP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d9y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5d9z; else goto c5d9A;
       c5d9z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5d9A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fNumDown_entry() //  [R2]
         { info_tbl: [(c5d9C,
                       label: Data.Ord.$fNumDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5d9C: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c5d9G; else goto c5d9F;
       c5d9G: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Ord.$fNumDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5d9F: // global
           I64[Hp - 224] = sat_s5cDV_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s5cDU_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s5cDT_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5cDS_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s5cDR_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cDQ_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5cDP_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.782457022 UTC

[section ""cstring" . Data.Ord.$fReadDown4_bytes" {
     Data.Ord.$fReadDown4_bytes:
         I8[] [68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.784643885 UTC

[section ""data" . Data.Ord.$fReadDown3_closure" {
     Data.Ord.$fReadDown3_closure:
         const Data.Ord.$fReadDown3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fReadDown3_entry() //  [R1]
         { info_tbl: [(c5das,
                       label: Data.Ord.$fReadDown3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5das: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dat; else goto c5dau;
       c5dat: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dau: // global
           (_c5dap::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5dap::I64 == 0) goto c5dar; else goto c5daq;
       c5dar: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5daq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5dap::I64;
           R2 = Data.Ord.$fReadDown4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.789658372 UTC

[section ""data" . Data.Ord.$fReadDown_lexeme_closure" {
     Data.Ord.$fReadDown_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Ord.$fReadDown3_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.791921265 UTC

[section ""data" . Data.Ord.$fReadDown2_closure" {
     Data.Ord.$fReadDown2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.795300274 UTC

[section ""data" . Data.Ord.$fReadDown1_closure" {
     Data.Ord.$fReadDown1_closure:
         const Data.Ord.$fReadDown1_info;
         const 0;
 },
 sat_s5cE6_entry() //  [R1, R2]
         { info_tbl: [(c5db6,
                       label: sat_s5cE6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5db6: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cE7_entry() //  [R1, R2]
         { info_tbl: [(c5db9,
                       label: sat_s5cE7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5db9: // global
           _s5cE4::P64 = R2;
           _s5cE7::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5dba; else goto c5dbb;
       c5dbb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dbd; else goto c5dbc;
       c5dbd: // global
           HpAlloc = 16;
           goto c5dba;
       c5dba: // global
           R2 = _s5cE4::P64;
           R1 = _s5cE7::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dbc: // global
           _s5cDW::P64 = P64[_s5cE7::P64 + 7];
           _s5cE0::P64 = P64[_s5cE7::P64 + 15];
           I64[Hp - 8] = sat_s5cE6_info;
           P64[Hp] = _s5cE0::P64;
           R2 = _s5cDW::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5cEa_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dbe,
                       label: sat_s5cEa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dbe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5dbf; else goto c5dbg;
       c5dbf: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dbg: // global
           I64[Sp - 24] = block_c5daN_info;
           _s5cDW::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s5cDW::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5dbt; else goto c5daO;
       u5dbt: // global
           call _c5daN(R1) args: 0, res: 0, upd: 0;
       c5daO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5daN() //  [R1]
         { info_tbl: [(c5daN,
                       label: block_c5daN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5daN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dbj; else goto c5dbi;
       c5dbj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5dbi: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c5dbl; else goto c5dbp;
       c5dbl: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dbp: // global
           I64[Hp - 16] = sat_s5cE7_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c5dbm_info;
           R3 = Hp - 15;
           R2 = Data.Ord.$fReadDown_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5dbm() //  [R1]
         { info_tbl: [(c5dbm,
                       label: block_c5dbm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dbm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dbs; else goto c5dbr;
       c5dbs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5dbr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown1_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dbu,
                       label: Data.Ord.$fReadDown1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dbu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dby; else goto c5dbx;
       c5dby: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dbx: // global
           I64[Hp - 8] = sat_s5cEa_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.814661198 UTC

[section ""data" . Data.Ord.$fReadDown_$creadsPrec_closure" {
     Data.Ord.$fReadDown_$creadsPrec_closure:
         const Data.Ord.$fReadDown_$creadsPrec_info;
         const 0;
 },
 sat_s5cEd_entry() //  [R1]
         { info_tbl: [(c5dc8,
                       label: sat_s5cEd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dc8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dc9; else goto c5dca;
       c5dc9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dca: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5dcb,
                       label: Data.Ord.$fReadDown_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dcb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5dcf; else goto c5dce;
       c5dcf: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dce: // global
           I64[Hp - 24] = sat_s5cEd_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.823960612 UTC

[section ""data" . Data.Ord.$fReadDown_$creadListPrec_closure" {
     Data.Ord.$fReadDown_$creadListPrec_closure:
         const Data.Ord.$fReadDown_$creadListPrec_info;
         const 0;
 },
 sat_s5cEf_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dcx,
                       label: sat_s5cEf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dcx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_$creadListPrec_entry() //  [R2]
         { info_tbl: [(c5dcA,
                       label: Data.Ord.$fReadDown_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dcA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dcE; else goto c5dcD;
       c5dcE: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dcD: // global
           I64[Hp - 8] = sat_s5cEf_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.831954588 UTC

[section ""data" . Data.Ord.$fReadDown_$creadList_closure" {
     Data.Ord.$fReadDown_$creadList_closure:
         const Data.Ord.$fReadDown_$creadList_info;
         const 0;
 },
 sat_s5cEh_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dcZ,
                       label: sat_s5cEh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dcZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEi_entry() //  [R1]
         { info_tbl: [(c5dd2,
                       label: sat_s5cEi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dd2: // global
           _s5cEi::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5dd3; else goto c5dd4;
       c5dd4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dd6; else goto c5dd5;
       c5dd6: // global
           HpAlloc = 16;
           goto c5dd3;
       c5dd3: // global
           R1 = _s5cEi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dd5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5cEi::P64;
           _s5cEg::P64 = P64[_s5cEi::P64 + 16];
           I64[Hp - 8] = sat_s5cEh_info;
           P64[Hp] = _s5cEg::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadList_entry() //  [R2]
         { info_tbl: [(c5dd7,
                       label: Data.Ord.$fReadDown_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dd7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ddb; else goto c5dda;
       c5ddb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dda: // global
           I64[Hp - 16] = sat_s5cEi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.842855416 UTC

[section ""data" . Data.Ord.$fReadDown_closure" {
     Data.Ord.$fReadDown_closure:
         const Data.Ord.$fReadDown_info;
         const 0;
 },
 sat_s5cEn_entry() //  [R1]
         { info_tbl: [(c5ddv,
                       label: sat_s5cEn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ddv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ddw; else goto c5ddx;
       c5ddw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ddx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEm_entry() //  [R1, R2, R3]
         { info_tbl: [(c5ddD,
                       label: sat_s5cEm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ddD: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEl_entry() //  [R1]
         { info_tbl: [(c5ddK,
                       label: sat_s5cEl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ddK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ddL; else goto c5ddM;
       c5ddL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ddM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEk_entry() //  [R1, R2]
         { info_tbl: [(c5ddS,
                       label: sat_s5cEk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ddS: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fReadDown_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_entry() //  [R2]
         { info_tbl: [(c5ddW,
                       label: Data.Ord.$fReadDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ddW: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5de0; else goto c5ddZ;
       c5de0: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ddZ: // global
           I64[Hp - 112] = sat_s5cEn_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5cEm_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5cEl_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5cEk_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.857544147 UTC

[section ""cstring" . Data.Ord.$fShowDown3_bytes" {
     Data.Ord.$fShowDown3_bytes:
         I8[] [68,111,119,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.859684414 UTC

[section ""data" . Data.Ord.$fShowDown2_closure" {
     Data.Ord.$fShowDown2_closure:
         const Data.Ord.$fShowDown2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fShowDown2_entry() //  [R1]
         { info_tbl: [(c5dev,
                       label: Data.Ord.$fShowDown2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dev: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dew; else goto c5dex;
       c5dew: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dex: // global
           (_c5des::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5des::I64 == 0) goto c5deu; else goto c5det;
       c5deu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5det: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5des::I64;
           R2 = Data.Ord.$fShowDown3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.86606697 UTC

[section ""data" . Data.Ord.$w$cshowsPrec_closure" {
     Data.Ord.$w$cshowsPrec_closure:
         const Data.Ord.$w$cshowsPrec_info;
         const 0;
 },
 g_s5cEr_entry() //  [R1]
         { info_tbl: [(c5deN,
                       label: g_s5cEr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5deN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5deO; else goto c5deP;
       c5deO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5deP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5cEu_entry() //  [R1]
         { info_tbl: [(c5df2,
                       label: sat_s5cEu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5df2: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEv_entry() //  [R1, R2]
         { info_tbl: [(c5df5,
                       label: sat_s5cEv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5df5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5df9; else goto c5df8;
       c5df9: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5df8: // global
           _s5cEr::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5cEu_info;
           P64[Hp - 8] = _s5cEr::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEy_entry() //  [R1]
         { info_tbl: [(c5dfp,
                       label: sat_s5cEy_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dfp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dft; else goto c5dfs;
       c5dft: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dfs: // global
           _s5cEr::P64 = P64[R1 + 16];
           _s5cEw::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5cEw::P64;
           R2 = Hp - 14;
           R1 = _s5cEr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEz_entry() //  [R1]
         { info_tbl: [(c5dfu,
                       label: sat_s5cEz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dfu: // global
           _s5cEz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5dfv; else goto c5dfw;
       c5dfw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5dfy; else goto c5dfx;
       c5dfy: // global
           HpAlloc = 32;
           goto c5dfv;
       c5dfv: // global
           R1 = _s5cEz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dfx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5cEz::P64;
           _s5cEr::P64 = P64[_s5cEz::P64 + 16];
           _s5cEw::P64 = P64[_s5cEz::P64 + 24];
           I64[Hp - 24] = sat_s5cEy_info;
           P64[Hp - 8] = _s5cEr::P64;
           P64[Hp] = _s5cEw::P64;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cEA_entry() //  [R1, R2]
         { info_tbl: [(c5dfA,
                       label: sat_s5cEA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dfA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5dfE; else goto c5dfD;
       c5dfE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dfD: // global
           _s5cEr::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5cEz_info;
           P64[Hp - 32] = _s5cEr::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dfI,
                       label: Data.Ord.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dfI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5dfM; else goto c5dfL;
       c5dfM: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dfL: // global
           I64[Hp - 40] = g_s5cEr_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c5deJ::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c5dfG; else goto c5dfH;
       c5dfG: // global
           I64[Hp - 8] = sat_s5cEv_info;
           P64[Hp] = _c5deJ::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dfH: // global
           I64[Hp - 8] = sat_s5cEA_info;
           P64[Hp] = _c5deJ::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.889208991 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowsPrec_closure" {
     Data.Ord.$fShowDown_$cshowsPrec_closure:
         const Data.Ord.$fShowDown_$cshowsPrec_info;
         const 0;
 },
 Data.Ord.$fShowDown_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dgn,
                       label: Data.Ord.$fShowDown_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dgn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5dgo; else goto c5dgp;
       c5dgo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dgp: // global
           I64[Sp - 24] = block_c5dgk_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5dgt; else goto c5dgl;
       u5dgt: // global
           call _c5dgk(R1) args: 0, res: 0, upd: 0;
       c5dgl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5dgk() //  [R1]
         { info_tbl: [(c5dgk,
                       label: block_c5dgk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dgk: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.896240308 UTC

[section ""data" . Data.Ord.$fShowDown_$cshow_closure" {
     Data.Ord.$fShowDown_$cshow_closure:
         const Data.Ord.$fShowDown_$cshow_info;
         const 0;
 },
 sat_s5cEI_entry() //  [R1]
         { info_tbl: [(c5dgL,
                       label: sat_s5cEI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dgL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dgM; else goto c5dgN;
       c5dgM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dgN: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshow_entry() //  [R2, R3]
         { info_tbl: [(c5dgO,
                       label: Data.Ord.$fShowDown_$cshow_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dgO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5dgS; else goto c5dgR;
       c5dgS: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dgR: // global
           I64[Hp - 24] = sat_s5cEI_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.90611759 UTC

[section ""data" . Data.Ord.$fShowDown1_closure" {
     Data.Ord.$fShowDown1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.909656572 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowList_closure" {
     Data.Ord.$fShowDown_$cshowList_closure:
         const Data.Ord.$fShowDown_$cshowList_info;
         const 0;
 },
 sat_s5cEN_entry() //  [R1, R2]
         { info_tbl: [(c5dhc,
                       label: sat_s5cEN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dhc: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshowList_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dhf,
                       label: Data.Ord.$fShowDown_$cshowList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dhf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dhj; else goto c5dhi;
       c5dhj: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dhi: // global
           I64[Hp - 8] = sat_s5cEN_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.920969548 UTC

[section ""data" . Data.Ord.$fShowDown_closure" {
     Data.Ord.$fShowDown_closure:
         const Data.Ord.$fShowDown_info;
         const 0;
 },
 sat_s5cER_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dhA,
                       label: sat_s5cER_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dhA: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowList_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEQ_entry() //  [R1, R2]
         { info_tbl: [(c5dhI,
                       label: sat_s5cEQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dhI: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fShowDown_$cshow_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cEP_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dhQ,
                       label: sat_s5cEP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dhQ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowsPrec_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_entry() //  [R2]
         { info_tbl: [(c5dhU,
                       label: Data.Ord.$fShowDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dhU: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5dhY; else goto c5dhX;
       c5dhY: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dhX: // global
           I64[Hp - 72] = sat_s5cER_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5cEQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5cEP_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.937001418 UTC

[section ""data" . Data.Ord.$fEqDown_closure" {
     Data.Ord.$fEqDown_closure:
         const Data.Ord.$fEqDown_info;
 },
 sat_s5cEU_entry() //  [R1]
         { info_tbl: [(c5dio,
                       label: sat_s5cEU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dio: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dip; else goto c5diq;
       c5dip: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5diq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5cET_entry() //  [R1]
         { info_tbl: [(c5div,
                       label: sat_s5cET_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5div: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5diw; else goto c5dix;
       c5diw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fEqDown_entry() //  [R2]
         { info_tbl: [(c5diz,
                       label: Data.Ord.$fEqDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5diz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5diD; else goto c5diC;
       c5diD: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Ord.$fEqDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5diC: // global
           I64[Hp - 64] = sat_s5cEU_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5cET_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.951493823 UTC

[section ""data" . Data.Ord.$fOrdDown_$cp1Ord_closure" {
     Data.Ord.$fOrdDown_$cp1Ord_closure:
         const Data.Ord.$fOrdDown_$cp1Ord_info;
 },
 sat_s5cEW_entry() //  [R1]
         { info_tbl: [(c5dj1,
                       label: sat_s5cEW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dj1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dj2; else goto c5dj3;
       c5dj2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dj3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_$cp1Ord_entry() //  [R2]
         { info_tbl: [(c5dj4,
                       label: Data.Ord.$fOrdDown_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dj4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dj8; else goto c5dj7;
       c5dj8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dj7: // global
           I64[Hp - 16] = sat_s5cEW_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fEqDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.962699885 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<_closure" {
     Data.Ord.$fOrdDown_$c<_closure:
         const Data.Ord.$fOrdDown_$c<_info;
 },
 Data.Ord.$fOrdDown_$c<_entry() //  [R2, R3, R4]
         { info_tbl: [(c5djr,
                       label: Data.Ord.$fOrdDown_$c<_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5djr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5djs; else goto c5djt;
       c5djs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5djt: // global
           I64[Sp - 8] = block_c5djl_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5djl() //  [R1]
         { info_tbl: [(c5djl,
                       label: block_c5djl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5djl: // global
           if (R1 & 7 == 1) goto c5djp; else goto c5djo;
       c5djp: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5djo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.973710265 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>=_closure" {
     Data.Ord.$fOrdDown_$c>=_closure:
         const Data.Ord.$fOrdDown_$c>=_info;
 },
 Data.Ord.$fOrdDown_$c>=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5djW,
                       label: Data.Ord.$fOrdDown_$c>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5djW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5djX; else goto c5djY;
       c5djX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5djY: // global
           I64[Sp - 8] = block_c5djQ_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5djQ() //  [R1]
         { info_tbl: [(c5djQ,
                       label: block_c5djQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5djQ: // global
           if (R1 & 7 == 1) goto c5djU; else goto c5djT;
       c5djU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5djT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.986299918 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>_closure" {
     Data.Ord.$fOrdDown_$c>_closure:
         const Data.Ord.$fOrdDown_$c>_info;
 },
 Data.Ord.$fOrdDown_$c>_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dkr,
                       label: Data.Ord.$fOrdDown_$c>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dkr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dks; else goto c5dkt;
       c5dks: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dkt: // global
           I64[Sp - 8] = block_c5dkl_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dkl() //  [R1]
         { info_tbl: [(c5dkl,
                       label: block_c5dkl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dkl: // global
           if (R1 & 7 == 3) goto c5dkp; else goto c5dko;
       c5dkp: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dko: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:10.999929854 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<=_closure" {
     Data.Ord.$fOrdDown_$c<=_closure:
         const Data.Ord.$fOrdDown_$c<=_info;
 },
 Data.Ord.$fOrdDown_$c<=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dkW,
                       label: Data.Ord.$fOrdDown_$c<=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dkW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dkX; else goto c5dkY;
       c5dkX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dkY: // global
           I64[Sp - 8] = block_c5dkQ_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dkQ() //  [R1]
         { info_tbl: [(c5dkQ,
                       label: block_c5dkQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dkQ: // global
           if (R1 & 7 == 3) goto c5dkU; else goto c5dkT;
       c5dkU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dkT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.012595245 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmax_closure" {
     Data.Ord.$fOrdDown_$cmax_closure:
         const Data.Ord.$fOrdDown_$cmax_info;
 },
 Data.Ord.$fOrdDown_$cmax_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dlr,
                       label: Data.Ord.$fOrdDown_$cmax_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dlr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5dls; else goto c5dlt;
       c5dls: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dlt: // global
           I64[Sp - 24] = block_c5dll_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dll() //  [R1]
         { info_tbl: [(c5dll,
                       label: block_c5dll_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dll: // global
           if (R1 & 7 == 3) goto c5dlp; else goto c5dlo;
       c5dlp: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5dlo: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.024575166 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmin_closure" {
     Data.Ord.$fOrdDown_$cmin_closure:
         const Data.Ord.$fOrdDown_$cmin_info;
 },
 Data.Ord.$fOrdDown_$cmin_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dlU,
                       label: Data.Ord.$fOrdDown_$cmin_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dlU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5dlV; else goto c5dlW;
       c5dlV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dlW: // global
           I64[Sp - 24] = block_c5dlO_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dlO() //  [R1]
         { info_tbl: [(c5dlO,
                       label: block_c5dlO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dlO: // global
           if (R1 & 7 == 3) goto c5dlS; else goto c5dlR;
       c5dlS: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5dlR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.039193573 UTC

[section ""data" . Data.Ord.$fOrdDown_closure" {
     Data.Ord.$fOrdDown_closure:
         const Data.Ord.$fOrdDown_info;
 },
 sat_s5cFv_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dmm,
                       label: sat_s5cFv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dmm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmin_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFu_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dmu,
                       label: sat_s5cFu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dmu: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmax_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFt_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dmC,
                       label: sat_s5cFt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dmC: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFs_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dmK,
                       label: sat_s5cFs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dmK: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFr_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dmS,
                       label: sat_s5cFr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dmS: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFq_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dn0,
                       label: sat_s5cFq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dn0: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5cFp_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dn8,
                       label: sat_s5cFp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dn8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5dn9; else goto c5dna;
       c5dn9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dna: // global
           _s5cFn::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s5cFn::P64;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5cFm_entry() //  [R1]
         { info_tbl: [(c5dnf,
                       label: sat_s5cFm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dnf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dng; else goto c5dnh;
       c5dng: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dnh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fOrdDown_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_entry() //  [R2]
         { info_tbl: [(c5dnj,
                       label: Data.Ord.$fOrdDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dnj: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c5dnn; else goto c5dnm;
       c5dnn: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dnm: // global
           I64[Hp - 200] = sat_s5cFv_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s5cFu_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s5cFt_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5cFs_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s5cFr_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s5cFq_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5cFp_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5cFm_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.076102373 UTC

[section ""data" . Data.Ord.comparing_closure" {
     Data.Ord.comparing_closure:
         const Data.Ord.comparing_info;
 },
 Data.Ord.comparing_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5do7,
                       label: Data.Ord.comparing_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5do7: // global
           _s5cFz::P64 = R5;
           _s5cFy::P64 = R4;
           _s5cFx::P64 = R3;
           _s5cFw::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c5do8; else goto c5do9;
       c5do9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5dob; else goto c5doa;
       c5dob: // global
           HpAlloc = 64;
           goto c5do8;
       c5do8: // global
           R5 = _s5cFz::P64;
           R4 = _s5cFy::P64;
           R3 = _s5cFx::P64;
           R2 = _s5cFw::P64;
           R1 = Data.Ord.comparing_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5doa: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s5cFx::P64;
           P64[Hp - 32] = _s5cFz::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5cFx::P64;
           P64[Hp] = _s5cFy::P64;
           R2 = _s5cFw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.083935837 UTC

[section ""cstring" . Data.Ord.$trModule4_bytes" {
     Data.Ord.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.08683804 UTC

[section ""data" . Data.Ord.$trModule3_closure" {
     Data.Ord.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.090557326 UTC

[section ""cstring" . Data.Ord.$trModule2_bytes" {
     Data.Ord.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,114,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.093956968 UTC

[section ""data" . Data.Ord.$trModule1_closure" {
     Data.Ord.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.097890574 UTC

[section ""data" . Data.Ord.$trModule_closure" {
     Data.Ord.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Ord.$trModule3_closure+1;
         const Data.Ord.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.101181614 UTC

[section ""data" . $krep_r5cDl_closure" {
     $krep_r5cDl_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.104562995 UTC

[section ""data" . Data.Ord.$tcDown1_closure" {
     Data.Ord.$tcDown1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$fReadDown4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.107677167 UTC

[section ""data" . Data.Ord.$tcDown_closure" {
     Data.Ord.$tcDown_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tcDown1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7479183817722852251;
         const 10417149520322703999;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.111915129 UTC

[section ""data" . $krep1_r5cDm_closure" {
     $krep1_r5cDm_closure:
         const :_con_info;
         const $krep_r5cDl_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.114948251 UTC

[section ""data" . $krep2_r5cDn_closure" {
     $krep2_r5cDn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Ord.$tcDown_closure+1;
         const $krep1_r5cDm_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.118816561 UTC

[section ""data" . Data.Ord.$tc'Down1_closure" {
     Data.Ord.$tc'Down1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5cDl_closure+2;
         const $krep2_r5cDn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.121912445 UTC

[section ""cstring" . Data.Ord.$tc'Down3_bytes" {
     Data.Ord.$tc'Down3_bytes:
         I8[] [39,68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.126589088 UTC

[section ""data" . Data.Ord.$tc'Down2_closure" {
     Data.Ord.$tc'Down2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$tc'Down3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.129738572 UTC

[section ""data" . Data.Ord.$tc'Down_closure" {
     Data.Ord.$tc'Down_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tc'Down2_closure+1;
         const Data.Ord.$tc'Down1_closure+4;
         const 2181324915805229541;
         const 7680134812570657793;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:11.132942025 UTC

[section ""relreadonly" . S5cGK_srt" {
     S5cGK_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Ord.$fReadDown_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Ord.$fReadDown1_closure;
         const Data.Ord.$fReadDown_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Ord.$fReadDown_$creadListPrec_closure;
         const Data.Ord.$fReadDown_$creadList_closure;
         const Data.Ord.$fReadDown_closure;
         const Data.Ord.$fShowDown2_closure;
         const Data.Ord.$w$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshow_closure;
         const Data.Ord.$fShowDown_$cshowList_closure;
         const Data.Ord.$fShowDown_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.232869014 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:12.234343873 UTC

[section ""data" . Data.Ord.$fFunctorDown2_closure" {
     Data.Ord.$fFunctorDown2_closure:
         const Data.Ord.$fFunctorDown2_info;
 },
 Data.Ord.$fFunctorDown2_entry() //  [R2]
         { info_tbl: [(c5dqP,
                       label: Data.Ord.$fFunctorDown2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dqP: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.237978812 UTC

[section ""data" . Data.Ord.$fFunctorDown1_closure" {
     Data.Ord.$fFunctorDown1_closure:
         const Data.Ord.$fFunctorDown1_info;
 },
 Data.Ord.$fFunctorDown1_entry() //  [R2]
         { info_tbl: [(c5dr0,
                       label: Data.Ord.$fFunctorDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dr0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.241649879 UTC

[section ""data" . Data.Ord.$fFunctorDown_closure" {
     Data.Ord.$fFunctorDown_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Ord.$fFunctorDown2_closure+1;
         const Data.Ord.$fFunctorDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.243540371 UTC

[section ""data" . Data.Ord.$fApplicativeDown3_closure" {
     Data.Ord.$fApplicativeDown3_closure:
         const Data.Ord.$fApplicativeDown3_info;
 },
 Data.Ord.$fApplicativeDown3_entry() //  [R2]
         { info_tbl: [(c5drc,
                       label: Data.Ord.$fApplicativeDown3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5drc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.247646116 UTC

[section ""data" . Data.Ord.$fApplicativeDown4_closure" {
     Data.Ord.$fApplicativeDown4_closure:
         const Data.Ord.$fApplicativeDown4_info;
 },
 Data.Ord.$fApplicativeDown4_entry() //  [R2]
         { info_tbl: [(c5drn,
                       label: Data.Ord.$fApplicativeDown4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5drn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.252579844 UTC

[section ""data" . Data.Ord.$fApplicativeDown2_closure" {
     Data.Ord.$fApplicativeDown2_closure:
         const Data.Ord.$fApplicativeDown2_info;
 },
 Data.Ord.$fApplicativeDown2_entry() //  [R2, R3]
         { info_tbl: [(c5dry,
                       label: Data.Ord.$fApplicativeDown2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dry: // global
           _s5doD::P64 = R2;
           R2 = R3;
           R1 = _s5doD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.258020308 UTC

[section ""data" . Data.Ord.$fApplicativeDown_$c*>_closure" {
     Data.Ord.$fApplicativeDown_$c*>_closure:
         const Data.Ord.$fApplicativeDown_$c*>_info;
 },
 Data.Ord.$fApplicativeDown_$c*>_entry() //  [R3]
         { info_tbl: [(c5drJ,
                       label: Data.Ord.$fApplicativeDown_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5drJ: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.262507626 UTC

[section ""data" . Data.Ord.$fApplicativeDown1_closure" {
     Data.Ord.$fApplicativeDown1_closure:
         const Data.Ord.$fApplicativeDown1_info;
 },
 Data.Ord.$fApplicativeDown1_entry() //  [R2]
         { info_tbl: [(c5drU,
                       label: Data.Ord.$fApplicativeDown1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5drU: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.266877027 UTC

[section ""data" . Data.Ord.$fApplicativeDown_closure" {
     Data.Ord.$fApplicativeDown_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Ord.$fFunctorDown_closure+1;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const Data.Ord.$fApplicativeDown3_closure+1;
         const Data.Ord.$fApplicativeDown2_closure+2;
         const Data.Ord.$fApplicativeDown_$c*>_closure+2;
         const Data.Ord.$fApplicativeDown1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.269024026 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>=_closure" {
     Data.Ord.$fMonadDown_$c>>=_closure:
         const Data.Ord.$fMonadDown_$c>>=_info;
 },
 Data.Ord.$fMonadDown_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5ds6,
                       label: Data.Ord.$fMonadDown_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ds6: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.27296558 UTC

[section ""data" . Data.Ord.$fMonadDown_$c>>_closure" {
     Data.Ord.$fMonadDown_$c>>_closure:
         const Data.Ord.$fMonadDown_$c>>_info;
 },
 Data.Ord.$fMonadDown_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5dsh,
                       label: Data.Ord.$fMonadDown_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dsh: // global
           R3 = R3;
           R2 = R2;
           call Data.Ord.$fApplicativeDown_$c*>_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.276247291 UTC

[section ""data" . lvl_r5cDk_closure" {
     lvl_r5cDk_closure:
         const lvl_r5cDk_info;
         const 0;
 },
 lvl_r5cDk_entry() //  [R2]
         { info_tbl: [(c5dss,
                       label: lvl_r5cDk_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dss: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.279526907 UTC

[section ""data" . Data.Ord.$fMonadDown_closure" {
     Data.Ord.$fMonadDown_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Ord.$fApplicativeDown_closure+1;
         const Data.Ord.$fMonadDown_$c>>=_closure+2;
         const Data.Ord.$fMonadDown_$c>>_closure+2;
         const Data.Ord.$fApplicativeDown4_closure+1;
         const lvl_r5cDk_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.282051417 UTC

[section ""data" . Data.Ord.$fSemigroupDown_closure" {
     Data.Ord.$fSemigroupDown_closure:
         const Data.Ord.$fSemigroupDown_info;
 },
 sat_s5doP_entry() //  [R1]
         { info_tbl: [(c5dsJ,
                       label: sat_s5doP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dsJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dsK; else goto c5dsL;
       c5dsK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dsL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5doO_entry() //  [R1]
         { info_tbl: [(c5dsQ,
                       label: sat_s5doO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dsQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dsR; else goto c5dsS;
       c5dsR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dsS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5doN_entry() //  [R1]
         { info_tbl: [(c5dsX,
                       label: sat_s5doN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dsX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dsY; else goto c5dsZ;
       c5dsY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dsZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fSemigroupDown_entry() //  [R2]
         { info_tbl: [(c5dt1,
                       label: Data.Ord.$fSemigroupDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dt1: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5dt5; else goto c5dt4;
       c5dt5: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Ord.$fSemigroupDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dt4: // global
           I64[Hp - 96] = sat_s5doP_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5doO_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5doN_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.292902942 UTC

[section ""data" . Data.Ord.$fMonoidDown_$cp1Monoid_closure" {
     Data.Ord.$fMonoidDown_$cp1Monoid_closure:
         const Data.Ord.$fMonoidDown_$cp1Monoid_info;
 },
 sat_s5doR_entry() //  [R1]
         { info_tbl: [(c5dtF,
                       label: sat_s5doR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dtF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dtG; else goto c5dtH;
       c5dtG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dtH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c5dtI,
                       label: Data.Ord.$fMonoidDown_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dtI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dtM; else goto c5dtL;
       c5dtM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dtL: // global
           I64[Hp - 16] = sat_s5doR_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fSemigroupDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.299456762 UTC

[section ""data" . Data.Ord.$fMonoidDown_closure" {
     Data.Ord.$fMonoidDown_closure:
         const Data.Ord.$fMonoidDown_info;
 },
 sat_s5doW_entry() //  [R1]
         { info_tbl: [(c5du5,
                       label: sat_s5doW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5du5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5du6; else goto c5du7;
       c5du6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5du7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5doV_entry() //  [R1]
         { info_tbl: [(c5duc,
                       label: sat_s5doV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5duc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dud; else goto c5due;
       c5dud: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5due: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5doU_entry() //  [R1]
         { info_tbl: [(c5duj,
                       label: sat_s5doU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5duj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5duk; else goto c5dul;
       c5duk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5doT_entry() //  [R1]
         { info_tbl: [(c5duq,
                       label: sat_s5doT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5duq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dur; else goto c5dus;
       c5dur: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dus: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fMonoidDown_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fMonoidDown_entry() //  [R2]
         { info_tbl: [(c5duu,
                       label: Data.Ord.$fMonoidDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5duu: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5duy; else goto c5dux;
       c5duy: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Ord.$fMonoidDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dux: // global
           I64[Hp - 128] = sat_s5doW_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5doV_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5doU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5doT_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.314349772 UTC

[section ""data" . Data.Ord.$fNumDown_closure" {
     Data.Ord.$fNumDown_closure:
         const Data.Ord.$fNumDown_info;
 },
 sat_s5dp4_entry() //  [R1]
         { info_tbl: [(c5dvf,
                       label: sat_s5dp4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dvg; else goto c5dvh;
       c5dvg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dvh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dp3_entry() //  [R1]
         { info_tbl: [(c5dvm,
                       label: sat_s5dp3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dvn; else goto c5dvo;
       c5dvn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dvo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dp2_entry() //  [R1]
         { info_tbl: [(c5dvt,
                       label: sat_s5dp2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dvu; else goto c5dvv;
       c5dvu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dvv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dp1_entry() //  [R1]
         { info_tbl: [(c5dvA,
                       label: sat_s5dp1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dvB; else goto c5dvC;
       c5dvB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dvC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dp0_entry() //  [R1]
         { info_tbl: [(c5dvH,
                       label: sat_s5dp0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dvI; else goto c5dvJ;
       c5dvI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dvJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5doZ_entry() //  [R1]
         { info_tbl: [(c5dvO,
                       label: sat_s5doZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dvP; else goto c5dvQ;
       c5dvP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dvQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5doY_entry() //  [R1]
         { info_tbl: [(c5dvV,
                       label: sat_s5doY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dvW; else goto c5dvX;
       c5dvW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dvX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fNumDown_entry() //  [R2]
         { info_tbl: [(c5dvZ,
                       label: Data.Ord.$fNumDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dvZ: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c5dw3; else goto c5dw2;
       c5dw3: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Ord.$fNumDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dw2: // global
           I64[Hp - 224] = sat_s5dp4_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s5dp3_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s5dp2_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5dp1_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s5dp0_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5doZ_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5doY_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.337189183 UTC

[section ""cstring" . Data.Ord.$fReadDown4_bytes" {
     Data.Ord.$fReadDown4_bytes:
         I8[] [68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.340252104 UTC

[section ""data" . Data.Ord.$fReadDown3_closure" {
     Data.Ord.$fReadDown3_closure:
         const Data.Ord.$fReadDown3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fReadDown3_entry() //  [R1]
         { info_tbl: [(c5dx4,
                       label: Data.Ord.$fReadDown3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dx4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dx5; else goto c5dx6;
       c5dx5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dx6: // global
           (_c5dx1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5dx1::I64 == 0) goto c5dx3; else goto c5dx2;
       c5dx3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5dx2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5dx1::I64;
           R2 = Data.Ord.$fReadDown4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.346226525 UTC

[section ""data" . Data.Ord.$fReadDown_lexeme_closure" {
     Data.Ord.$fReadDown_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Ord.$fReadDown3_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.348074339 UTC

[section ""data" . Data.Ord.$fReadDown2_closure" {
     Data.Ord.$fReadDown2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.352680427 UTC

[section ""data" . Data.Ord.$fReadDown1_closure" {
     Data.Ord.$fReadDown1_closure:
         const Data.Ord.$fReadDown1_info;
         const 0;
 },
 sat_s5dpf_entry() //  [R1, R2]
         { info_tbl: [(c5dxJ,
                       label: sat_s5dpf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dxJ: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpg_entry() //  [R1, R2]
         { info_tbl: [(c5dxM,
                       label: sat_s5dpg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dxM: // global
           _s5dpd::P64 = R2;
           _s5dpg::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5dxN; else goto c5dxO;
       c5dxO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dxQ; else goto c5dxP;
       c5dxQ: // global
           HpAlloc = 16;
           goto c5dxN;
       c5dxN: // global
           R2 = _s5dpd::P64;
           R1 = _s5dpg::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dxP: // global
           _s5dp5::P64 = P64[_s5dpg::P64 + 7];
           _s5dp9::P64 = P64[_s5dpg::P64 + 15];
           I64[Hp - 8] = sat_s5dpf_info;
           P64[Hp] = _s5dp9::P64;
           R2 = _s5dp5::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5dpj_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dxR,
                       label: sat_s5dpj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dxR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5dxS; else goto c5dxT;
       c5dxS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dxT: // global
           I64[Sp - 24] = block_c5dxq_info;
           _s5dp5::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s5dp5::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5dy6; else goto c5dxr;
       u5dy6: // global
           call _c5dxq(R1) args: 0, res: 0, upd: 0;
       c5dxr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5dxq() //  [R1]
         { info_tbl: [(c5dxq,
                       label: block_c5dxq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dxq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dxW; else goto c5dxV;
       c5dxW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5dxV: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c5dxY; else goto c5dy2;
       c5dxY: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dy2: // global
           I64[Hp - 16] = sat_s5dpg_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c5dxZ_info;
           R3 = Hp - 15;
           R2 = Data.Ord.$fReadDown_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5dxZ() //  [R1]
         { info_tbl: [(c5dxZ,
                       label: block_c5dxZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dxZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dy5; else goto c5dy4;
       c5dy5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5dy4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown1_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dy7,
                       label: Data.Ord.$fReadDown1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dy7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dyb; else goto c5dya;
       c5dyb: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dya: // global
           I64[Hp - 8] = sat_s5dpj_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.377541219 UTC

[section ""data" . Data.Ord.$fReadDown_$creadsPrec_closure" {
     Data.Ord.$fReadDown_$creadsPrec_closure:
         const Data.Ord.$fReadDown_$creadsPrec_info;
         const 0;
 },
 sat_s5dpm_entry() //  [R1]
         { info_tbl: [(c5dyU,
                       label: sat_s5dpm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dyU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dyV; else goto c5dyW;
       c5dyV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dyW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5dyX,
                       label: Data.Ord.$fReadDown_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dyX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5dz1; else goto c5dz0;
       c5dz1: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dz0: // global
           I64[Hp - 24] = sat_s5dpm_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.387513929 UTC

[section ""data" . Data.Ord.$fReadDown_$creadListPrec_closure" {
     Data.Ord.$fReadDown_$creadListPrec_closure:
         const Data.Ord.$fReadDown_$creadListPrec_info;
         const 0;
 },
 sat_s5dpo_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dzn,
                       label: sat_s5dpo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dzn: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_$creadListPrec_entry() //  [R2]
         { info_tbl: [(c5dzq,
                       label: Data.Ord.$fReadDown_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dzq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dzu; else goto c5dzt;
       c5dzu: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dzt: // global
           I64[Hp - 8] = sat_s5dpo_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.394888895 UTC

[section ""data" . Data.Ord.$fReadDown_$creadList_closure" {
     Data.Ord.$fReadDown_$creadList_closure:
         const Data.Ord.$fReadDown_$creadList_info;
         const 0;
 },
 sat_s5dpq_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dzQ,
                       label: sat_s5dpq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dzQ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpr_entry() //  [R1]
         { info_tbl: [(c5dzT,
                       label: sat_s5dpr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dzT: // global
           _s5dpr::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5dzU; else goto c5dzV;
       c5dzV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dzX; else goto c5dzW;
       c5dzX: // global
           HpAlloc = 16;
           goto c5dzU;
       c5dzU: // global
           R1 = _s5dpr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dzW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5dpr::P64;
           _s5dpp::P64 = P64[_s5dpr::P64 + 16];
           I64[Hp - 8] = sat_s5dpq_info;
           P64[Hp] = _s5dpp::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Ord.$fReadDown_$creadList_entry() //  [R2]
         { info_tbl: [(c5dzY,
                       label: Data.Ord.$fReadDown_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dzY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dA2; else goto c5dA1;
       c5dA2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dA1: // global
           I64[Hp - 16] = sat_s5dpr_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.403643447 UTC

[section ""data" . Data.Ord.$fReadDown_closure" {
     Data.Ord.$fReadDown_closure:
         const Data.Ord.$fReadDown_info;
         const 0;
 },
 sat_s5dpw_entry() //  [R1]
         { info_tbl: [(c5dAu,
                       label: sat_s5dpw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dAu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dAv; else goto c5dAw;
       c5dAv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dAw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dpv_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dAC,
                       label: sat_s5dpv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dAC: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fReadDown1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpu_entry() //  [R1]
         { info_tbl: [(c5dAJ,
                       label: sat_s5dpu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dAJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dAK; else goto c5dAL;
       c5dAK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dAL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fReadDown_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dpt_entry() //  [R1, R2]
         { info_tbl: [(c5dAR,
                       label: sat_s5dpt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dAR: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fReadDown_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fReadDown_entry() //  [R2]
         { info_tbl: [(c5dAV,
                       label: Data.Ord.$fReadDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dAV: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5dAZ; else goto c5dAY;
       c5dAZ: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Ord.$fReadDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dAY: // global
           I64[Hp - 112] = sat_s5dpw_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5dpv_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s5dpu_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s5dpt_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.415498141 UTC

[section ""cstring" . Data.Ord.$fShowDown3_bytes" {
     Data.Ord.$fShowDown3_bytes:
         I8[] [68,111,119,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.417530479 UTC

[section ""data" . Data.Ord.$fShowDown2_closure" {
     Data.Ord.$fShowDown2_closure:
         const Data.Ord.$fShowDown2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Ord.$fShowDown2_entry() //  [R1]
         { info_tbl: [(c5dBB,
                       label: Data.Ord.$fShowDown2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dBB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dBC; else goto c5dBD;
       c5dBC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dBD: // global
           (_c5dBy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5dBy::I64 == 0) goto c5dBA; else goto c5dBz;
       c5dBA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5dBz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5dBy::I64;
           R2 = Data.Ord.$fShowDown3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.423751672 UTC

[section ""data" . Data.Ord.$w$cshowsPrec_closure" {
     Data.Ord.$w$cshowsPrec_closure:
         const Data.Ord.$w$cshowsPrec_info;
         const 0;
 },
 g_s5dpA_entry() //  [R1]
         { info_tbl: [(c5dBU,
                       label: g_s5dpA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dBU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5dBV; else goto c5dBW;
       c5dBV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dBW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5dpD_entry() //  [R1]
         { info_tbl: [(c5dC9,
                       label: sat_s5dpD_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dC9: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpE_entry() //  [R1, R2]
         { info_tbl: [(c5dCc,
                       label: sat_s5dpE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dCc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5dCg; else goto c5dCf;
       c5dCg: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dCf: // global
           _s5dpA::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5dpD_info;
           P64[Hp - 8] = _s5dpA::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpH_entry() //  [R1]
         { info_tbl: [(c5dCw,
                       label: sat_s5dpH_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dCw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dCA; else goto c5dCz;
       c5dCA: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dCz: // global
           _s5dpA::P64 = P64[R1 + 16];
           _s5dpF::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5dpF::P64;
           R2 = Hp - 14;
           R1 = _s5dpA::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpI_entry() //  [R1]
         { info_tbl: [(c5dCB,
                       label: sat_s5dpI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dCB: // global
           _s5dpI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5dCC; else goto c5dCD;
       c5dCD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5dCF; else goto c5dCE;
       c5dCF: // global
           HpAlloc = 32;
           goto c5dCC;
       c5dCC: // global
           R1 = _s5dpI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dCE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5dpI::P64;
           _s5dpA::P64 = P64[_s5dpI::P64 + 16];
           _s5dpF::P64 = P64[_s5dpI::P64 + 24];
           I64[Hp - 24] = sat_s5dpH_info;
           P64[Hp - 8] = _s5dpA::P64;
           P64[Hp] = _s5dpF::P64;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dpJ_entry() //  [R1, R2]
         { info_tbl: [(c5dCH,
                       label: sat_s5dpJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dCH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5dCL; else goto c5dCK;
       c5dCL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dCK: // global
           _s5dpA::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5dpI_info;
           P64[Hp - 32] = _s5dpA::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dCP,
                       label: Data.Ord.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dCP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5dCT; else goto c5dCS;
       c5dCT: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dCS: // global
           I64[Hp - 40] = g_s5dpA_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c5dBQ::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c5dCN; else goto c5dCO;
       c5dCN: // global
           I64[Hp - 8] = sat_s5dpE_info;
           P64[Hp] = _c5dBQ::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dCO: // global
           I64[Hp - 8] = sat_s5dpJ_info;
           P64[Hp] = _c5dBQ::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.442489686 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowsPrec_closure" {
     Data.Ord.$fShowDown_$cshowsPrec_closure:
         const Data.Ord.$fShowDown_$cshowsPrec_info;
         const 0;
 },
 Data.Ord.$fShowDown_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dDI,
                       label: Data.Ord.$fShowDown_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dDI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5dDJ; else goto c5dDK;
       c5dDJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dDK: // global
           I64[Sp - 24] = block_c5dDF_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5dDO; else goto c5dDG;
       u5dDO: // global
           call _c5dDF(R1) args: 0, res: 0, upd: 0;
       c5dDG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5dDF() //  [R1]
         { info_tbl: [(c5dDF,
                       label: block_c5dDF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dDF: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.448669706 UTC

[section ""data" . Data.Ord.$fShowDown_$cshow_closure" {
     Data.Ord.$fShowDown_$cshow_closure:
         const Data.Ord.$fShowDown_$cshow_info;
         const 0;
 },
 sat_s5dpR_entry() //  [R1]
         { info_tbl: [(c5dE7,
                       label: sat_s5dpR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dE7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dE8; else goto c5dE9;
       c5dE8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dE9: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Ord.$fReadDown2_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshow_entry() //  [R2, R3]
         { info_tbl: [(c5dEa,
                       label: Data.Ord.$fShowDown_$cshow_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dEa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5dEe; else goto c5dEd;
       c5dEe: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dEd: // global
           I64[Hp - 24] = sat_s5dpR_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Ord.$fShowDown2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.455365858 UTC

[section ""data" . Data.Ord.$fShowDown1_closure" {
     Data.Ord.$fShowDown1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.457552667 UTC

[section ""data" . Data.Ord.$fShowDown_$cshowList_closure" {
     Data.Ord.$fShowDown_$cshowList_closure:
         const Data.Ord.$fShowDown_$cshowList_info;
         const 0;
 },
 sat_s5dpW_entry() //  [R1, R2]
         { info_tbl: [(c5dED,
                       label: sat_s5dpW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dED: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Ord.$w$cshowsPrec_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_$cshowList_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dEG,
                       label: Data.Ord.$fShowDown_$cshowList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dEG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5dEK; else goto c5dEJ;
       c5dEK: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dEJ: // global
           I64[Hp - 8] = sat_s5dpW_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.463750629 UTC

[section ""data" . Data.Ord.$fShowDown_closure" {
     Data.Ord.$fShowDown_closure:
         const Data.Ord.$fShowDown_info;
         const 0;
 },
 sat_s5dq0_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dF2,
                       label: sat_s5dq0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dF2: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowList_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpZ_entry() //  [R1, R2]
         { info_tbl: [(c5dFa,
                       label: sat_s5dpZ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dFa: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Ord.$fShowDown_$cshow_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dpY_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dFi,
                       label: sat_s5dpY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dFi: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fShowDown_$cshowsPrec_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Ord.$fShowDown_entry() //  [R2]
         { info_tbl: [(c5dFm,
                       label: Data.Ord.$fShowDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dFm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5dFq; else goto c5dFp;
       c5dFq: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Ord.$fShowDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dFp: // global
           I64[Hp - 72] = sat_s5dq0_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s5dpZ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5dpY_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.474003595 UTC

[section ""data" . Data.Ord.$fEqDown_closure" {
     Data.Ord.$fEqDown_closure:
         const Data.Ord.$fEqDown_info;
 },
 sat_s5dq3_entry() //  [R1]
         { info_tbl: [(c5dFU,
                       label: sat_s5dq3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dFU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dFV; else goto c5dFW;
       c5dFV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dFW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5dq2_entry() //  [R1]
         { info_tbl: [(c5dG1,
                       label: sat_s5dq2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dG1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dG2; else goto c5dG3;
       c5dG2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dG3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fEqDown_entry() //  [R2]
         { info_tbl: [(c5dG5,
                       label: Data.Ord.$fEqDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dG5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5dG9; else goto c5dG8;
       c5dG9: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Ord.$fEqDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dG8: // global
           I64[Hp - 64] = sat_s5dq3_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5dq2_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.48258982 UTC

[section ""data" . Data.Ord.$fOrdDown_$cp1Ord_closure" {
     Data.Ord.$fOrdDown_$cp1Ord_closure:
         const Data.Ord.$fOrdDown_$cp1Ord_info;
 },
 sat_s5dq5_entry() //  [R1]
         { info_tbl: [(c5dGC,
                       label: sat_s5dq5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dGC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dGD; else goto c5dGE;
       c5dGD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dGE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_$cp1Ord_entry() //  [R2]
         { info_tbl: [(c5dGF,
                       label: Data.Ord.$fOrdDown_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dGF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5dGJ; else goto c5dGI;
       c5dGJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dGI: // global
           I64[Hp - 16] = sat_s5dq5_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Ord.$fEqDown_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.488775235 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<_closure" {
     Data.Ord.$fOrdDown_$c<_closure:
         const Data.Ord.$fOrdDown_$c<_info;
 },
 Data.Ord.$fOrdDown_$c<_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dH4,
                       label: Data.Ord.$fOrdDown_$c<_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dH4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dH5; else goto c5dH6;
       c5dH5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dH6: // global
           I64[Sp - 8] = block_c5dGY_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dGY() //  [R1]
         { info_tbl: [(c5dGY,
                       label: block_c5dGY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dGY: // global
           if (R1 & 7 == 1) goto c5dH2; else goto c5dH1;
       c5dH2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dH1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.494940269 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>=_closure" {
     Data.Ord.$fOrdDown_$c>=_closure:
         const Data.Ord.$fOrdDown_$c>=_info;
 },
 Data.Ord.$fOrdDown_$c>=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dHD,
                       label: Data.Ord.$fOrdDown_$c>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dHD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dHE; else goto c5dHF;
       c5dHE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dHF: // global
           I64[Sp - 8] = block_c5dHx_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dHx() //  [R1]
         { info_tbl: [(c5dHx,
                       label: block_c5dHx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dHx: // global
           if (R1 & 7 == 1) goto c5dHB; else goto c5dHA;
       c5dHB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dHA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.501393321 UTC

[section ""data" . Data.Ord.$fOrdDown_$c>_closure" {
     Data.Ord.$fOrdDown_$c>_closure:
         const Data.Ord.$fOrdDown_$c>_info;
 },
 Data.Ord.$fOrdDown_$c>_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dIc,
                       label: Data.Ord.$fOrdDown_$c>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dIc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dId; else goto c5dIe;
       c5dId: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dIe: // global
           I64[Sp - 8] = block_c5dI6_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dI6() //  [R1]
         { info_tbl: [(c5dI6,
                       label: block_c5dI6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dI6: // global
           if (R1 & 7 == 3) goto c5dIa; else goto c5dI9;
       c5dIa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dI9: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.50768173 UTC

[section ""data" . Data.Ord.$fOrdDown_$c<=_closure" {
     Data.Ord.$fOrdDown_$c<=_closure:
         const Data.Ord.$fOrdDown_$c<=_info;
 },
 Data.Ord.$fOrdDown_$c<=_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dIL,
                       label: Data.Ord.$fOrdDown_$c<=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dIL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5dIM; else goto c5dIN;
       c5dIM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dIN: // global
           I64[Sp - 8] = block_c5dIF_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dIF() //  [R1]
         { info_tbl: [(c5dIF,
                       label: block_c5dIF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dIF: // global
           if (R1 & 7 == 3) goto c5dIJ; else goto c5dII;
       c5dIJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5dII: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.514962048 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmax_closure" {
     Data.Ord.$fOrdDown_$cmax_closure:
         const Data.Ord.$fOrdDown_$cmax_info;
 },
 Data.Ord.$fOrdDown_$cmax_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dJk,
                       label: Data.Ord.$fOrdDown_$cmax_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dJk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5dJl; else goto c5dJm;
       c5dJl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dJm: // global
           I64[Sp - 24] = block_c5dJe_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dJe() //  [R1]
         { info_tbl: [(c5dJe,
                       label: block_c5dJe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dJe: // global
           if (R1 & 7 == 3) goto c5dJi; else goto c5dJh;
       c5dJi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5dJh: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.521100743 UTC

[section ""data" . Data.Ord.$fOrdDown_$cmin_closure" {
     Data.Ord.$fOrdDown_$cmin_closure:
         const Data.Ord.$fOrdDown_$cmin_info;
 },
 Data.Ord.$fOrdDown_$cmin_entry() //  [R2, R3, R4]
         { info_tbl: [(c5dJP,
                       label: Data.Ord.$fOrdDown_$cmin_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dJP: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5dJQ; else goto c5dJR;
       c5dJQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dJR: // global
           I64[Sp - 24] = block_c5dJJ_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5dJJ() //  [R1]
         { info_tbl: [(c5dJJ,
                       label: block_c5dJJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dJJ: // global
           if (R1 & 7 == 3) goto c5dJN; else goto c5dJM;
       c5dJN: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5dJM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.529206642 UTC

[section ""data" . Data.Ord.$fOrdDown_closure" {
     Data.Ord.$fOrdDown_closure:
         const Data.Ord.$fOrdDown_info;
 },
 sat_s5dqE_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dKj,
                       label: sat_s5dqE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dKj: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmin_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dqD_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dKr,
                       label: sat_s5dqD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dKr: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$cmax_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dqC_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dKz,
                       label: sat_s5dqC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dKz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dqB_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dKH,
                       label: sat_s5dqB_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dKH: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c>_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dqA_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dKP,
                       label: sat_s5dqA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dKP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dqz_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dKX,
                       label: sat_s5dqz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dKX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Ord.$fOrdDown_$c<_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5dqy_entry() //  [R1, R2, R3]
         { info_tbl: [(c5dL5,
                       label: sat_s5dqy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dL5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5dL6; else goto c5dL7;
       c5dL6: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dL7: // global
           _s5dqw::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s5dqw::P64;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5dqv_entry() //  [R1]
         { info_tbl: [(c5dLc,
                       label: sat_s5dqv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dLc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5dLd; else goto c5dLe;
       c5dLd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5dLe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Ord.$fOrdDown_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Ord.$fOrdDown_entry() //  [R2]
         { info_tbl: [(c5dLg,
                       label: Data.Ord.$fOrdDown_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dLg: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c5dLk; else goto c5dLj;
       c5dLk: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Ord.$fOrdDown_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5dLj: // global
           I64[Hp - 200] = sat_s5dqE_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s5dqD_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s5dqC_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s5dqB_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s5dqA_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s5dqz_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s5dqy_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s5dqv_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.549776066 UTC

[section ""data" . Data.Ord.comparing_closure" {
     Data.Ord.comparing_closure:
         const Data.Ord.comparing_info;
 },
 Data.Ord.comparing_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5dMf,
                       label: Data.Ord.comparing_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5dMf: // global
           _s5dqI::P64 = R5;
           _s5dqH::P64 = R4;
           _s5dqG::P64 = R3;
           _s5dqF::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c5dMg; else goto c5dMh;
       c5dMh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5dMj; else goto c5dMi;
       c5dMj: // global
           HpAlloc = 64;
           goto c5dMg;
       c5dMg: // global
           R5 = _s5dqI::P64;
           R4 = _s5dqH::P64;
           R3 = _s5dqG::P64;
           R2 = _s5dqF::P64;
           R1 = Data.Ord.comparing_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5dMi: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s5dqG::P64;
           P64[Hp - 32] = _s5dqI::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5dqG::P64;
           P64[Hp] = _s5dqH::P64;
           R2 = _s5dqF::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.555447106 UTC

[section ""cstring" . Data.Ord.$trModule4_bytes" {
     Data.Ord.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.557136069 UTC

[section ""data" . Data.Ord.$trModule3_closure" {
     Data.Ord.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.558875691 UTC

[section ""cstring" . Data.Ord.$trModule2_bytes" {
     Data.Ord.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,114,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.560621214 UTC

[section ""data" . Data.Ord.$trModule1_closure" {
     Data.Ord.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.562785155 UTC

[section ""data" . Data.Ord.$trModule_closure" {
     Data.Ord.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Ord.$trModule3_closure+1;
         const Data.Ord.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.564576086 UTC

[section ""data" . $krep_r5cDl_closure" {
     $krep_r5cDl_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.566944969 UTC

[section ""data" . Data.Ord.$tcDown1_closure" {
     Data.Ord.$tcDown1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$fReadDown4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.568647382 UTC

[section ""data" . Data.Ord.$tcDown_closure" {
     Data.Ord.$tcDown_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tcDown1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7479183817722852251;
         const 10417149520322703999;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.570557368 UTC

[section ""data" . $krep1_r5cDm_closure" {
     $krep1_r5cDm_closure:
         const :_con_info;
         const $krep_r5cDl_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.57228052 UTC

[section ""data" . $krep2_r5cDn_closure" {
     $krep2_r5cDn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Ord.$tcDown_closure+1;
         const $krep1_r5cDm_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.574086883 UTC

[section ""data" . Data.Ord.$tc'Down1_closure" {
     Data.Ord.$tc'Down1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5cDl_closure+2;
         const $krep2_r5cDn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.575941426 UTC

[section ""cstring" . Data.Ord.$tc'Down3_bytes" {
     Data.Ord.$tc'Down3_bytes:
         I8[] [39,68,111,119,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.577852603 UTC

[section ""data" . Data.Ord.$tc'Down2_closure" {
     Data.Ord.$tc'Down2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Ord.$tc'Down3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.580112889 UTC

[section ""data" . Data.Ord.$tc'Down_closure" {
     Data.Ord.$tc'Down_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Ord.$trModule_closure+1;
         const Data.Ord.$tc'Down2_closure+1;
         const Data.Ord.$tc'Down1_closure+4;
         const 2181324915805229541;
         const 7680134812570657793;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.582369848 UTC

[section ""relreadonly" . S5dsv_srt" {
     S5dsv_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Ord.$fReadDown_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Ord.$fReadDown1_closure;
         const Data.Ord.$fReadDown_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Ord.$fReadDown_$creadListPrec_closure;
         const Data.Ord.$fReadDown_$creadList_closure;
         const Data.Ord.$fReadDown_closure;
         const Data.Ord.$fShowDown2_closure;
         const Data.Ord.$w$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshowsPrec_closure;
         const Data.Ord.$fShowDown_$cshow_closure;
         const Data.Ord.$fShowDown_$cshowList_closure;
         const Data.Ord.$fShowDown_closure;
 }]

