
==================== Output Cmm ====================
2018-03-16 16:00:12.968741875 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:12.970246919 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cfmap_closure" {
     Data.Either.$fApplicativeEither_$cfmap_closure:
         const Data.Either.$fApplicativeEither_$cfmap_info;
 },
 Data.Either.$fApplicativeEither_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(c5eDC,
                       label: Data.Either.$fApplicativeEither_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eDC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eDD; else goto c5eDE;
       c5eDD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eDE: // global
           I64[Sp - 16] = block_c5eDv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eDP; else goto c5eDw;
       u5eDP: // global
           call _c5eDv(R1) args: 0, res: 0, upd: 0;
       c5eDw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eDv() //  [R1]
         { info_tbl: [(c5eDv,
                       label: block_c5eDv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eDv: // global
           if (R1 & 7 == 1) goto c5eDz; else goto c5eDA;
       c5eDz: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eDA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5eDO; else goto c5eDN;
       c5eDO: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5eDN: // global
           _s5exp::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5exp::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.97278365 UTC

[section ""data" . Data.Either.$fFunctorEither_$c<$_closure" {
     Data.Either.$fFunctorEither_$c<$_closure:
         const Data.Either.$fFunctorEither_$c<$_info;
 },
 Data.Either.$fFunctorEither_$c<$_entry() //  [R2, R3]
         { info_tbl: [(c5eE1,
                       label: Data.Either.$fFunctorEither_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eE1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eE2; else goto c5eE3;
       c5eE2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fFunctorEither_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eE3: // global
           I64[Sp - 16] = block_c5eDU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eEd; else goto c5eDV;
       u5eEd: // global
           call _c5eDU(R1) args: 0, res: 0, upd: 0;
       c5eDV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eDU() //  [R1]
         { info_tbl: [(c5eDU,
                       label: block_c5eDU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eDU: // global
           if (R1 & 7 == 1) goto c5eDY; else goto c5eDZ;
       c5eDY: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eDZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5eEc; else goto c5eEb;
       c5eEc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5eEb: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.974034058 UTC

[section ""data" . Data.Either.$fFunctorEither_closure" {
     Data.Either.$fFunctorEither_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Either.$fApplicativeEither_$cfmap_closure+2;
         const Data.Either.$fFunctorEither_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.97464112 UTC

[section ""cstring" . lvl_r5exb_bytes" {
     lvl_r5exb_bytes:
         I8[] [115,116,105,109,101,115,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.975503331 UTC

[section ""data" . Data.Either.$fSemigroupEither1_closure" {
     Data.Either.$fSemigroupEither1_closure:
         const Data.Either.$fSemigroupEither1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither1_entry() //  [R1]
         { info_tbl: [(c5eEm,
                       label: Data.Either.$fSemigroupEither1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5eEn; else goto c5eEo;
       c5eEn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eEo: // global
           (_c5eEh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5eEh::I64 == 0) goto c5eEj; else goto c5eEi;
       c5eEj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5eEi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5eEh::I64;
           I64[Sp - 24] = block_c5eEk_info;
           R2 = lvl_r5exb_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5eEk() //  [R1]
         { info_tbl: [(c5eEk,
                       label: block_c5eEk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEk: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.976832915 UTC

[section ""data" . Data.Either.$fSemigroupEither2_closure" {
     Data.Either.$fSemigroupEither2_closure:
         const Data.Either.$fSemigroupEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither2_entry() //  [R1]
         { info_tbl: [(c5eEz,
                       label: Data.Either.$fSemigroupEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eEA; else goto c5eEB;
       c5eEA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eEB: // global
           (_c5eEw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5eEw::I64 == 0) goto c5eEy; else goto c5eEx;
       c5eEy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5eEx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5eEw::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.97845913 UTC

[section ""data" . Data.Either.$fSemigroupEither_$cstimes_closure" {
     Data.Either.$fSemigroupEither_$cstimes_closure:
         const Data.Either.$fSemigroupEither_$cstimes_info;
         const 0;
 },
 sat_s5exD_entry() //  [R1]
         { info_tbl: [(c5eEQ,
                       label: sat_s5exD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eER; else goto c5eES;
       c5eER: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eES: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5eEO_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5eEO() //  [R1]
         { info_tbl: [(c5eEO,
                       label: block_c5eEO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEO: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Either.$fSemigroupEither2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Either.$fSemigroupEither_$cstimes_entry() //  [R2, R3, R4]
         { info_tbl: [(c5eEW,
                       label: Data.Either.$fSemigroupEither_$cstimes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5eEY; else goto c5eEZ;
       c5eEY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$cstimes_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eEZ: // global
           I64[Sp - 24] = block_c5eEG_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5eEG() //  [R1]
         { info_tbl: [(c5eEG,
                       label: block_c5eEG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5eF2; else goto c5eF1;
       c5eF2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5eF1: // global
           I64[Hp - 16] = sat_s5exD_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5eEX_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5eEX() //  [R1]
         { info_tbl: [(c5eEX,
                       label: block_c5eEX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eEX: // global
           _s5exy::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5eF6_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5exy::P64;
           Sp = Sp - 8;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5eF6() //  [R1]
         { info_tbl: [(c5eF6,
                       label: block_c5eF6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eF6: // global
           if (R1 & 7 == 1) goto c5eFd; else goto c5eFh;
       c5eFd: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eFh: // global
           R1 = Data.Either.$fSemigroupEither1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.980731752 UTC

[section ""data" . Data.Either.$fSemigroupEither_$c<>_closure" {
     Data.Either.$fSemigroupEither_$c<>_closure:
         const Data.Either.$fSemigroupEither_$c<>_info;
 },
 Data.Either.$fSemigroupEither_$c<>_entry() //  [R2, R3]
         { info_tbl: [(c5eFu,
                       label: Data.Either.$fSemigroupEither_$c<>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eFu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eFv; else goto c5eFw;
       c5eFv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eFw: // global
           I64[Sp - 16] = block_c5eFn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eFD; else goto c5eFo;
       u5eFD: // global
           call _c5eFn(R1) args: 0, res: 0, upd: 0;
       c5eFo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eFn() //  [R1]
         { info_tbl: [(c5eFn,
                       label: block_c5eFn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eFn: // global
           if (R1 & 7 == 1) goto c5eFr; else goto c5eFs;
       c5eFr: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eFs: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.982457855 UTC

[section ""data" . Data.Either.$fSemigroupEither3_closure" {
     Data.Either.$fSemigroupEither3_closure:
         const Data.Either.$fSemigroupEither3_info;
 },
 Data.Either.$fSemigroupEither3_entry() //  [R2, R3]
         { info_tbl: [(c5eFP,
                       label: Data.Either.$fSemigroupEither3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eFP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5eFQ; else goto u5eGb;
       c5eFQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5eGb: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5eFF() args: 0, res: 0, upd: 0;
     }
 },
 _c5eFF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eFF: // global
           I64[Sp - 8] = block_c5eFI_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5eGd; else goto c5eFJ;
       u5eGd: // global
           call _c5eFI(R1) args: 0, res: 0, upd: 0;
       c5eFJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eFI() //  [R1]
         { info_tbl: [(c5eFI,
                       label: block_c5eFI_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eFI: // global
           _s5exK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5eFM; else goto c5eFN;
       c5eFM: // global
           R1 = _s5exK::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eFN: // global
           I64[Sp] = block_c5eFX_info;
           _s5exN::P64 = P64[R1 + 6];
           _s5exO::P64 = P64[R1 + 14];
           R1 = _s5exK::P64;
           P64[Sp + 8] = _s5exO::P64;
           P64[Sp + 16] = _s5exN::P64;
           if (R1 & 7 != 0) goto u5eGe; else goto c5eFZ;
       u5eGe: // global
           call _c5eFX(R1) args: 0, res: 0, upd: 0;
       c5eFZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eFX() //  [R1]
         { info_tbl: [(c5eFX,
                       label: block_c5eFX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eFX: // global
           if (R1 & 7 == 1) goto c5eG5; else goto c5eG9;
       c5eG5: // global
           _s5exL::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s5exL::P64;
           Sp = Sp + 8;
           call _c5eFF() args: 0, res: 0, upd: 0;
       c5eG9: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.984735312 UTC

[section ""data" . Data.Either.$fSemigroupEither_$csconcat_closure" {
     Data.Either.$fSemigroupEither_$csconcat_closure:
         const Data.Either.$fSemigroupEither_$csconcat_info;
 },
 Data.Either.$fSemigroupEither_$csconcat_entry() //  [R2]
         { info_tbl: [(c5eGo,
                       label: Data.Either.$fSemigroupEither_$csconcat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eGo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5eGp; else goto c5eGq;
       c5eGp: // global
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eGq: // global
           I64[Sp - 8] = block_c5eGl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5eGu; else goto c5eGm;
       u5eGu: // global
           call _c5eGl(R1) args: 0, res: 0, upd: 0;
       c5eGm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eGl() //  [R1]
         { info_tbl: [(c5eGl,
                       label: block_c5eGl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eGl: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Either.$fSemigroupEither3_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.985769127 UTC

[section ""data" . Data.Either.$fSemigroupEither_closure" {
     Data.Either.$fSemigroupEither_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Either.$fSemigroupEither_$c<>_closure+2;
         const Data.Either.$fSemigroupEither_$csconcat_closure+1;
         const Data.Either.$fSemigroupEither_$cstimes_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.986697892 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*>_closure" {
     Data.Either.$fApplicativeEither_$c<*>_closure:
         const Data.Either.$fApplicativeEither_$c<*>_info;
 },
 Data.Either.$fApplicativeEither_$c<*>_entry() //  [R2, R3]
         { info_tbl: [(c5eGG,
                       label: Data.Either.$fApplicativeEither_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eGG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eGH; else goto c5eGI;
       c5eGH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eGI: // global
           I64[Sp - 16] = block_c5eGz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eGP; else goto c5eGA;
       u5eGP: // global
           call _c5eGz(R1) args: 0, res: 0, upd: 0;
       c5eGA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eGz() //  [R1]
         { info_tbl: [(c5eGz,
                       label: block_c5eGz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eGz: // global
           if (R1 & 7 == 1) goto c5eGD; else goto c5eGE;
       c5eGD: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eGE: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.98868425 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cliftA2_closure" {
     Data.Either.$fApplicativeEither_$cliftA2_closure:
         const Data.Either.$fApplicativeEither_$cliftA2_info;
 },
 ds_s5ey3_entry() //  [R1]
         { info_tbl: [(c5eH5,
                       label: ds_s5ey3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eH5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eH6; else goto c5eH7;
       c5eH6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eH7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5eGY_info;
           _s5ey1::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5ey1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eHi; else goto c5eGZ;
       u5eHi: // global
           call _c5eGY(R1) args: 0, res: 0, upd: 0;
       c5eGZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5eGY() //  [R1]
         { info_tbl: [(c5eGY,
                       label: block_c5eGY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eGY: // global
           if (R1 & 7 == 1) goto c5eH2; else goto c5eH3;
       c5eH2: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c5eH3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5eHh; else goto c5eHg;
       c5eHh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5eHg: // global
           _s5ey6::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5ey6::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyc_entry() //  [R1, R2]
         { info_tbl: [(c5eHv,
                       label: sat_s5eyc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eHv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eHw; else goto c5eHx;
       c5eHw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eHx: // global
           I64[Sp - 16] = block_c5eHo_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eHE; else goto c5eHp;
       u5eHE: // global
           call _c5eHo(R1) args: 0, res: 0, upd: 0;
       c5eHp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eHo() //  [R1]
         { info_tbl: [(c5eHo,
                       label: block_c5eHo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eHo: // global
           if (R1 & 7 == 1) goto c5eHs; else goto c5eHt;
       c5eHs: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eHt: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fApplicativeEither_$cliftA2_entry() //  [R2, R3]
         { info_tbl: [(c5eHF,
                       label: Data.Either.$fApplicativeEither_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eHF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5eHJ; else goto c5eHI;
       c5eHJ: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eHI: // global
           I64[Hp - 40] = ds_s5ey3_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5eyc_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.991125375 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c*>_closure" {
     Data.Either.$fApplicativeEither_$c*>_closure:
         const Data.Either.$fApplicativeEither_$c*>_info;
 },
 Data.Either.$fApplicativeEither_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c5eHV,
                       label: Data.Either.$fApplicativeEither_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eHV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eHW; else goto c5eHX;
       c5eHW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eHX: // global
           I64[Sp - 16] = block_c5eHO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eI4; else goto c5eHP;
       u5eI4: // global
           call _c5eHO(R1) args: 0, res: 0, upd: 0;
       c5eHP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eHO() //  [R1]
         { info_tbl: [(c5eHO,
                       label: block_c5eHO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eHO: // global
           if (R1 & 7 == 1) goto c5eHS; else goto c5eHT;
       c5eHS: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eHT: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.992689782 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*_closure" {
     Data.Either.$fApplicativeEither_$c<*_closure:
         const Data.Either.$fApplicativeEither_$c<*_info;
 },
 Data.Either.$fApplicativeEither_$c<*_entry() //  [R2, R3]
         { info_tbl: [(c5eIg,
                       label: Data.Either.$fApplicativeEither_$c<*_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eIg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eIh; else goto c5eIi;
       c5eIh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eIi: // global
           I64[Sp - 16] = block_c5eI9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eIG; else goto c5eIa;
       u5eIG: // global
           call _c5eI9(R1) args: 0, res: 0, upd: 0;
       c5eIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eI9() //  [R1]
         { info_tbl: [(c5eI9,
                       label: block_c5eI9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eI9: // global
           if (R1 & 7 == 1) goto u5eIC; else goto c5eIe;
       u5eIC: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _c5eIA() args: 0, res: 0, upd: 0;
       c5eIe: // global
           I64[Sp] = block_c5eIo_info;
           _s5eyk::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5eyk::P64;
           if (R1 & 7 != 0) goto u5eIE; else goto c5eIq;
       u5eIE: // global
           call _c5eIo(R1) args: 0, res: 0, upd: 0;
       c5eIq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eIo() //  [R1]
         { info_tbl: [(c5eIo,
                       label: block_c5eIo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eIo: // global
           if (R1 & 7 == 1) goto c5eIw; else goto u5eID;
       c5eIw: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5eID: // global
           Sp = Sp + 8;
           call _c5eIA() args: 0, res: 0, upd: 0;
     }
 },
 _c5eIA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eIA: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.995219731 UTC

[section ""data" . Data.Either.$fApplicativeEither_closure" {
     Data.Either.$fApplicativeEither_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Either.$fFunctorEither_closure+1;
         const Data.Either.Right_closure+1;
         const Data.Either.$fApplicativeEither_$c<*>_closure+2;
         const Data.Either.$fApplicativeEither_$cliftA2_closure+2;
         const Data.Either.$fApplicativeEither_$c*>_closure+2;
         const Data.Either.$fApplicativeEither_$c<*_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.997724237 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>=_closure" {
     Data.Either.$fMonadEither_$c>>=_closure:
         const Data.Either.$fMonadEither_$c>>=_info;
 },
 Data.Either.$fMonadEither_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5eIT,
                       label: Data.Either.$fMonadEither_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eIT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eIU; else goto c5eIV;
       c5eIU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fMonadEither_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eIV: // global
           I64[Sp - 16] = block_c5eIM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5eJ2; else goto c5eIN;
       u5eJ2: // global
           call _c5eIM(R1) args: 0, res: 0, upd: 0;
       c5eIN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eIM() //  [R1]
         { info_tbl: [(c5eIM,
                       label: block_c5eIM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eIM: // global
           if (R1 & 7 == 1) goto c5eIQ; else goto c5eIR;
       c5eIQ: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5eIR: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:12.999679683 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>_closure" {
     Data.Either.$fMonadEither_$c>>_closure:
         const Data.Either.$fMonadEither_$c>>_info;
 },
 Data.Either.$fMonadEither_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5eJ7,
                       label: Data.Either.$fMonadEither_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eJ7: // global
           R3 = R3;
           R2 = R2;
           call Data.Either.$fApplicativeEither_$c*>_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.000913237 UTC

[section ""data" . lvl1_r5exc_closure" {
     lvl1_r5exc_closure:
         const lvl1_r5exc_info;
         const 0;
 },
 lvl1_r5exc_entry() //  [R2]
         { info_tbl: [(c5eJe,
                       label: lvl1_r5exc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eJe: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.002019105 UTC

[section ""data" . Data.Either.$fMonadEither_closure" {
     Data.Either.$fMonadEither_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Either.$fApplicativeEither_closure+1;
         const Data.Either.$fMonadEither_$c>>=_closure+2;
         const Data.Either.$fMonadEither_$c>>_closure+2;
         const Data.Either.Right_closure+1;
         const lvl1_r5exc_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.002910623 UTC

[section ""cstring" . Data.Either.$fShowEither5_bytes" {
     Data.Either.$fShowEither5_bytes:
         I8[] [76,101,102,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.004037433 UTC

[section ""data" . Data.Either.$fShowEither4_closure" {
     Data.Either.$fShowEither4_closure:
         const Data.Either.$fShowEither4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither4_entry() //  [R1]
         { info_tbl: [(c5eJn,
                       label: Data.Either.$fShowEither4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eJn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eJo; else goto c5eJp;
       c5eJo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eJp: // global
           (_c5eJk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5eJk::I64 == 0) goto c5eJm; else goto c5eJl;
       c5eJm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5eJl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5eJk::I64;
           R2 = Data.Either.$fShowEither5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.005606762 UTC

[section ""data" . Data.Either.$fReadEither4_closure" {
     Data.Either.$fReadEither4_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.006503572 UTC

[section ""cstring" . Data.Either.$fShowEither3_bytes" {
     Data.Either.$fShowEither3_bytes:
         I8[] [82,105,103,104,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.007692502 UTC

[section ""data" . Data.Either.$fShowEither2_closure" {
     Data.Either.$fShowEither2_closure:
         const Data.Either.$fShowEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither2_entry() //  [R1]
         { info_tbl: [(c5eJw,
                       label: Data.Either.$fShowEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eJw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eJx; else goto c5eJy;
       c5eJx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eJy: // global
           (_c5eJt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5eJt::I64 == 0) goto c5eJv; else goto c5eJu;
       c5eJv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5eJu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5eJt::I64;
           R2 = Data.Either.$fShowEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.013195354 UTC

[section ""data" . Data.Either.$w$cshowsPrec_closure" {
     Data.Either.$w$cshowsPrec_closure:
         const Data.Either.$w$cshowsPrec_info;
         const 0;
 },
 Data.Either.$w$cshowsPrec_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eJA: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5eyC_entry() //  [R1]
         { info_tbl: [(c5eJN,
                       label: g_s5eyC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eJN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5eJO; else goto c5eJP;
       c5eJO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eJP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5eyF_entry() //  [R1]
         { info_tbl: [(c5eK2,
                       label: sat_s5eyF_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eK2: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyG_entry() //  [R1, R2]
         { info_tbl: [(c5eK5,
                       label: sat_s5eyG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eK5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5eK9; else goto c5eK8;
       c5eK9: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eK8: // global
           _s5eyC::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5eyF_info;
           P64[Hp - 8] = _s5eyC::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyJ_entry() //  [R1]
         { info_tbl: [(c5eKp,
                       label: sat_s5eyJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eKp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5eKt; else goto c5eKs;
       c5eKt: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eKs: // global
           _s5eyC::P64 = P64[R1 + 16];
           _s5eyH::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5eyH::P64;
           R2 = Hp - 14;
           R1 = _s5eyC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyK_entry() //  [R1]
         { info_tbl: [(c5eKu,
                       label: sat_s5eyK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eKu: // global
           _s5eyK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5eKv; else goto c5eKw;
       c5eKw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5eKy; else goto c5eKx;
       c5eKy: // global
           HpAlloc = 32;
           goto c5eKv;
       c5eKv: // global
           R1 = _s5eyK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eKx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5eyK::P64;
           _s5eyC::P64 = P64[_s5eyK::P64 + 16];
           _s5eyH::P64 = P64[_s5eyK::P64 + 24];
           I64[Hp - 24] = sat_s5eyJ_info;
           P64[Hp - 8] = _s5eyC::P64;
           P64[Hp] = _s5eyH::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyL_entry() //  [R1, R2]
         { info_tbl: [(c5eKA,
                       label: sat_s5eyL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eKA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5eKE; else goto c5eKD;
       c5eKE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eKD: // global
           _s5eyC::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5eyK_info;
           P64[Hp - 32] = _s5eyC::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5eyN_entry() //  [R1]
         { info_tbl: [(c5eKL,
                       label: g_s5eyN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eKL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5eKM; else goto c5eKN;
       c5eKM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eKN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5eyQ_entry() //  [R1]
         { info_tbl: [(c5eL0,
                       label: sat_s5eyQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eL0: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyR_entry() //  [R1, R2]
         { info_tbl: [(c5eL3,
                       label: sat_s5eyR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eL3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5eL7; else goto c5eL6;
       c5eL7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eL6: // global
           _s5eyN::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5eyQ_info;
           P64[Hp - 8] = _s5eyN::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyU_entry() //  [R1]
         { info_tbl: [(c5eLn,
                       label: sat_s5eyU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eLn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5eLr; else goto c5eLq;
       c5eLr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eLq: // global
           _s5eyN::P64 = P64[R1 + 16];
           _s5eyS::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5eyS::P64;
           R2 = Hp - 14;
           R1 = _s5eyN::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyV_entry() //  [R1]
         { info_tbl: [(c5eLs,
                       label: sat_s5eyV_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eLs: // global
           _s5eyV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5eLt; else goto c5eLu;
       c5eLu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5eLw; else goto c5eLv;
       c5eLw: // global
           HpAlloc = 32;
           goto c5eLt;
       c5eLt: // global
           R1 = _s5eyV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eLv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5eyV::P64;
           _s5eyN::P64 = P64[_s5eyV::P64 + 16];
           _s5eyS::P64 = P64[_s5eyV::P64 + 24];
           I64[Hp - 24] = sat_s5eyU_info;
           P64[Hp - 8] = _s5eyN::P64;
           P64[Hp] = _s5eyS::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyW_entry() //  [R1, R2]
         { info_tbl: [(c5eLy,
                       label: sat_s5eyW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eLy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5eLC; else goto c5eLB;
       c5eLC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eLB: // global
           _s5eyN::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5eyV_info;
           P64[Hp - 32] = _s5eyN::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eLH,
                       label: Data.Either.$w$cshowsPrec_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eLH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eLI; else goto c5eLJ;
       c5eLI: // global
           R1 = Data.Either.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5eLJ: // global
           I64[Sp - 32] = block_c5eJE_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eLW; else goto c5eJF;
       u5eLW: // global
           call _c5eJE(R1) args: 0, res: 0, upd: 0;
       c5eJF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eJE() //  [R1]
         { info_tbl: [(c5eJE,
                       label: block_c5eJE_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eJE: // global
           _s5eyy::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5eLE; else goto c5eLF;
       c5eLE: // global
           Hp = Hp + 48;
           _s5eyA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5eLS; else goto c5eLL;
       c5eLL: // global
           _s5eyB::P64 = P64[_s5eyA::P64 + 7];
           I64[Hp - 40] = g_s5eyC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5eyB::P64;
           _c5eJJ::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5eyy::I64, 11)) goto c5eLO; else goto c5eLP;
       c5eLO: // global
           I64[Hp - 8] = sat_s5eyG_info;
           P64[Hp] = _c5eJJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5eLP: // global
           I64[Hp - 8] = sat_s5eyL_info;
           P64[Hp] = _c5eJJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5eLF: // global
           Hp = Hp + 48;
           _s5eyA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5eLS; else goto c5eLR;
       c5eLS: // global
           HpAlloc = 48;
           R1 = _s5eyA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5eLR: // global
           _s5eyM::P64 = P64[_s5eyA::P64 + 6];
           I64[Hp - 40] = g_s5eyN_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _s5eyM::P64;
           _c5eKH::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5eyy::I64, 11)) goto c5eLU; else goto c5eLV;
       c5eLU: // global
           I64[Hp - 8] = sat_s5eyR_info;
           P64[Hp] = _c5eKH::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5eLV: // global
           I64[Hp - 8] = sat_s5eyW_info;
           P64[Hp] = _c5eKH::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.02170716 UTC

[section ""data" . Data.Either.$fShowEither_$cshowsPrec_closure" {
     Data.Either.$fShowEither_$cshowsPrec_closure:
         const Data.Either.$fShowEither_$cshowsPrec_info;
         const 0;
 },
 Data.Either.$fShowEither_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eM4,
                       label: Data.Either.$fShowEither_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eM4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eM5; else goto c5eM6;
       c5eM5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eM6: // global
           I64[Sp - 32] = block_c5eM1_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eMa; else goto c5eM2;
       u5eMa: // global
           call _c5eM1(R1) args: 0, res: 0, upd: 0;
       c5eM2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eM1() //  [R1]
         { info_tbl: [(c5eM1,
                       label: block_c5eM1_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eM1: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.024212356 UTC

[section ""data" . Data.Either.$fShowEither_$cshow_closure" {
     Data.Either.$fShowEither_$cshow_closure:
         const Data.Either.$fShowEither_$cshow_info;
         const 0;
 },
 sat_s5ez8_entry() //  [R1]
         { info_tbl: [(c5eMo,
                       label: sat_s5ez8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eMo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eMp; else goto c5eMq;
       c5eMp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eMq: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 sat_s5eza_entry() //  [R1]
         { info_tbl: [(c5eMx,
                       label: sat_s5eza_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eMx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eMy; else goto c5eMz;
       c5eMy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eMz: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshow_entry() //  [R2, R3, R4]
         { info_tbl: [(c5eME,
                       label: Data.Either.$fShowEither_$cshow_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eME: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5eMF; else goto c5eMG;
       c5eMF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eMG: // global
           I64[Sp - 24] = block_c5eMf_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5eMN; else goto c5eMg;
       u5eMN: // global
           call _c5eMf(R1) args: 0, res: 0, upd: 0;
       c5eMg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eMf() //  [R1]
         { info_tbl: [(c5eMf,
                       label: block_c5eMf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eMf: // global
           if (R1 & 7 == 1) goto c5eMB; else goto c5eMC;
       c5eMB: // global
           Hp = Hp + 32;
           _s5ez6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5eMM; else goto c5eMI;
       c5eMI: // global
           _s5ez7::P64 = P64[_s5ez6::P64 + 7];
           I64[Hp - 24] = sat_s5ez8_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5ez7::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c5eMC: // global
           Hp = Hp + 32;
           _s5ez6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5eMM; else goto c5eML;
       c5eMM: // global
           HpAlloc = 32;
           R1 = _s5ez6::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5eML: // global
           _s5ez9::P64 = P64[_s5ez6::P64 + 6];
           I64[Hp - 24] = sat_s5eza_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5ez9::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.026616174 UTC

[section ""data" . Data.Either.$fShowEither1_closure" {
     Data.Either.$fShowEither1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.02772614 UTC

[section ""data" . Data.Either.$fShowEither_$cshowList_closure" {
     Data.Either.$fShowEither_$cshowList_closure:
         const Data.Either.$fShowEither_$cshowList_info;
         const 0;
 },
 sat_s5ezg_entry() //  [R1, R2]
         { info_tbl: [(c5eMX,
                       label: sat_s5ezg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eMX: // global
           R5 = R2;
           R4 = 0;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshowList_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eN0,
                       label: Data.Either.$fShowEither_$cshowList_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eN0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5eN4; else goto c5eN3;
       c5eN4: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eN3: // global
           I64[Hp - 16] = sat_s5ezg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5ezd::P64 = R4;
           R4 = R5;
           R3 = _s5ezd::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.029568186 UTC

[section ""data" . Data.Either.$fShowEither_closure" {
     Data.Either.$fShowEither_closure:
         const Data.Either.$fShowEither_info;
         const 0;
 },
 sat_s5ezl_entry() //  [R1, R2, R3]
         { info_tbl: [(c5eNe,
                       label: sat_s5ezl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eNe: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowList_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezk_entry() //  [R1, R2]
         { info_tbl: [(c5eNm,
                       label: sat_s5ezk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eNm: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fShowEither_$cshow_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezj_entry() //  [R1, R2, R3]
         { info_tbl: [(c5eNu,
                       label: sat_s5ezj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eNu: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowsPrec_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_entry() //  [R2, R3]
         { info_tbl: [(c5eNy,
                       label: Data.Either.$fShowEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eNy: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5eNC; else goto c5eNB;
       c5eNC: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eNB: // global
           I64[Hp - 96] = sat_s5ezl_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_s5ezk_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_s5ezj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.032161881 UTC

[section ""cstring" . Data.Either.$fReadEither3_bytes" {
     Data.Either.$fReadEither3_bytes:
         I8[] [76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.032966464 UTC

[section ""data" . Data.Either.$fReadEither2_closure" {
     Data.Either.$fReadEither2_closure:
         const Data.Either.$fReadEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither2_entry() //  [R1]
         { info_tbl: [(c5eNJ,
                       label: Data.Either.$fReadEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eNJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eNK; else goto c5eNL;
       c5eNK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eNL: // global
           (_c5eNG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5eNG::I64 == 0) goto c5eNI; else goto c5eNH;
       c5eNI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5eNH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5eNG::I64;
           R2 = Data.Either.$fReadEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.033908447 UTC

[section ""data" . Data.Either.$fReadEither_lexeme_closure" {
     Data.Either.$fReadEither_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.034471039 UTC

[section ""cstring" . Data.Either.$fReadEither6_bytes" {
     Data.Either.$fReadEither6_bytes:
         I8[] [82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.0352008 UTC

[section ""data" . Data.Either.$fReadEither5_closure" {
     Data.Either.$fReadEither5_closure:
         const Data.Either.$fReadEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither5_entry() //  [R1]
         { info_tbl: [(c5eNS,
                       label: Data.Either.$fReadEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eNS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eNT; else goto c5eNU;
       c5eNT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eNU: // global
           (_c5eNP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5eNP::I64 == 0) goto c5eNR; else goto c5eNQ;
       c5eNR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5eNQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5eNP::I64;
           R2 = Data.Either.$fReadEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.036059196 UTC

[section ""data" . Data.Either.$fReadEither_lexeme1_closure" {
     Data.Either.$fReadEither_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.038597323 UTC

[section ""data" . Data.Either.$fReadEither1_closure" {
     Data.Either.$fReadEither1_closure:
         const Data.Either.$fReadEither1_info;
         const 0;
 },
 sat_s5ezz_entry() //  [R1, R2]
         { info_tbl: [(c5eOs,
                       label: sat_s5ezz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eOs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5eOw; else goto c5eOv;
       c5eOw: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eOv: // global
           _s5ezr::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s5ezr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezA_entry() //  [R1, R2]
         { info_tbl: [(c5eOx,
                       label: sat_s5ezA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eOx: // global
           _s5ezw::P64 = R2;
           _s5ezA::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5eOy; else goto c5eOz;
       c5eOz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5eOB; else goto c5eOA;
       c5eOB: // global
           HpAlloc = 16;
           goto c5eOy;
       c5eOy: // global
           R2 = _s5ezw::P64;
           R1 = _s5ezA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eOA: // global
           _s5ezn::P64 = P64[_s5ezA::P64 + 7];
           _s5ezr::P64 = P64[_s5ezA::P64 + 15];
           I64[Hp - 8] = sat_s5ezz_info;
           P64[Hp] = _s5ezr::P64;
           R2 = _s5ezn::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 karg_s5ezu_entry() //  [R1]
         { info_tbl: [(c5eOF,
                       label: karg_s5ezu_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eOF: // global
           _s5ezu::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5eOG; else goto c5eOH;
       c5eOH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5eOJ; else goto c5eOI;
       c5eOJ: // global
           HpAlloc = 24;
           goto c5eOG;
       c5eOG: // global
           R1 = _s5ezu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eOI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ezu::P64;
           if (%MO_S_Gt_W64(I64[_s5ezu::P64 + 32],
                            10)) goto c5eOD; else goto c5eOE;
       c5eOD: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5eOE: // global
           _s5ezn::P64 = P64[_s5ezu::P64 + 16];
           _s5ezr::P64 = P64[_s5ezu::P64 + 24];
           I64[Hp - 16] = sat_s5ezA_info;
           P64[Hp - 8] = _s5ezn::P64;
           P64[Hp] = _s5ezr::P64;
           I64[Sp - 24] = block_c5eOK_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme1_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5eOK() //  [R1]
         { info_tbl: [(c5eOK,
                       label: block_c5eOK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eOK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5eOP; else goto c5eOO;
       c5eOP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5eOO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5ezH_entry() //  [R1, R2]
         { info_tbl: [(c5eP5,
                       label: sat_s5ezH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eP5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5eP9; else goto c5eP8;
       c5eP9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5eP8: // global
           _s5ezr::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _s5ezr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezI_entry() //  [R1, R2]
         { info_tbl: [(c5ePa,
                       label: sat_s5ezI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ePa: // global
           _s5ezE::P64 = R2;
           _s5ezI::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5ePb; else goto c5ePc;
       c5ePc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5ePe; else goto c5ePd;
       c5ePe: // global
           HpAlloc = 16;
           goto c5ePb;
       c5ePb: // global
           R2 = _s5ezE::P64;
           R1 = _s5ezI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ePd: // global
           _s5ezm::P64 = P64[_s5ezI::P64 + 7];
           _s5ezr::P64 = P64[_s5ezI::P64 + 15];
           I64[Hp - 8] = sat_s5ezH_info;
           P64[Hp] = _s5ezr::P64;
           R2 = _s5ezm::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5ezM_entry() //  [R1, R2, R3]
         { info_tbl: [(c5ePf,
                       label: sat_s5ezM_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ePf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5ePg; else goto c5ePh;
       c5ePg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ePh: // global
           I64[Sp - 32] = block_c5eO4_info;
           _s5ezm::P64 = P64[R1 + 6];
           _s5ezn::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s5ezm::P64;
           P64[Sp - 16] = _s5ezn::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5ePu; else goto c5eO5;
       u5ePu: // global
           call _c5eO4(R1) args: 0, res: 0, upd: 0;
       c5eO5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eO4() //  [R1]
         { info_tbl: [(c5eO4,
                       label: block_c5eO4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eO4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5ePk; else goto c5ePj;
       c5ePk: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ePj: // global
           _s5ezt::I64 = I64[R1 + 7];
           I64[Hp - 56] = karg_s5ezu_info;
           P64[Hp - 40] = P64[Sp + 16];
           _s5ezr::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5ezr::P64;
           I64[Hp - 24] = _s5ezt::I64;
           _c5eO9::P64 = Hp - 56;
           if (%MO_S_Gt_W64(_s5ezt::I64, 10)) goto c5ePm; else goto c5ePq;
       c5ePm: // global
           Hp = Hp - 24;
           R3 = _c5eO9::P64;
           R2 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
       c5ePq: // global
           I64[Hp - 16] = sat_s5ezI_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5ezr::P64;
           I64[Sp + 16] = block_c5ePn_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme_closure+4;
           P64[Sp + 24] = _c5eO9::P64;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ePn() //  [R1]
         { info_tbl: [(c5ePn,
                       label: block_c5ePn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ePn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5ePt; else goto c5ePs;
       c5ePt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ePs: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5ePv,
                       label: Data.Either.$fReadEither1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ePv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ePz; else goto c5ePy;
       c5ePz: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ePy: // global
           I64[Hp - 16] = sat_s5ezM_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5ezo::P64 = R4;
           R4 = R5;
           R3 = _s5ezo::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.044416916 UTC

[section ""data" . Data.Either.$fReadEither_$creadsPrec_closure" {
     Data.Either.$fReadEither_$creadsPrec_closure:
         const Data.Either.$fReadEither_$creadsPrec_info;
         const 0;
 },
 sat_s5ezQ_entry() //  [R1]
         { info_tbl: [(c5ePI,
                       label: sat_s5ezQ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ePI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ePJ; else goto c5ePK;
       c5ePJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ePK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5ePL,
                       label: Data.Either.$fReadEither_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ePL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5ePP; else goto c5ePO;
       c5ePP: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ePO: // global
           I64[Hp - 32] = sat_s5ezQ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.04615828 UTC

[section ""data" . Data.Either.$fReadEither_$creadListPrec_closure" {
     Data.Either.$fReadEither_$creadListPrec_closure:
         const Data.Either.$fReadEither_$creadListPrec_info;
         const 0;
 },
 sat_s5ezT_entry() //  [R1, R2, R3]
         { info_tbl: [(c5ePZ,
                       label: sat_s5ezT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ePZ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_$creadListPrec_entry() //  [R2, R3]
         { info_tbl: [(c5eQ2,
                       label: Data.Either.$fReadEither_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eQ2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5eQ6; else goto c5eQ5;
       c5eQ6: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eQ5: // global
           I64[Hp - 16] = sat_s5ezT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.047708157 UTC

[section ""data" . Data.Either.$fReadEither_$creadList_closure" {
     Data.Either.$fReadEither_$creadList_closure:
         const Data.Either.$fReadEither_$creadList_info;
         const 0;
 },
 sat_s5ezW_entry() //  [R1, R2, R3]
         { info_tbl: [(c5eQk,
                       label: sat_s5ezW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eQk: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezX_entry() //  [R1]
         { info_tbl: [(c5eQn,
                       label: sat_s5ezX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eQn: // global
           _s5ezX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5eQo; else goto c5eQp;
       c5eQp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5eQr; else goto c5eQq;
       c5eQr: // global
           HpAlloc = 24;
           goto c5eQo;
       c5eQo: // global
           R1 = _s5ezX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eQq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ezX::P64;
           _s5ezU::P64 = P64[_s5ezX::P64 + 16];
           _s5ezV::P64 = P64[_s5ezX::P64 + 24];
           I64[Hp - 16] = sat_s5ezW_info;
           P64[Hp - 8] = _s5ezU::P64;
           P64[Hp] = _s5ezV::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadList_entry() //  [R2, R3]
         { info_tbl: [(c5eQs,
                       label: Data.Either.$fReadEither_$creadList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eQs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5eQw; else goto c5eQv;
       c5eQw: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eQv: // global
           I64[Hp - 24] = sat_s5ezX_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.050121721 UTC

[section ""data" . Data.Either.$fReadEither_closure" {
     Data.Either.$fReadEither_closure:
         const Data.Either.$fReadEither_info;
         const 0;
 },
 sat_s5eA3_entry() //  [R1]
         { info_tbl: [(c5eQF,
                       label: sat_s5eA3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eQF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eQG; else goto c5eQH;
       c5eQG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eQH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadListPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eA2_entry() //  [R1, R2, R3]
         { info_tbl: [(c5eQN,
                       label: sat_s5eA2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eQN: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eA1_entry() //  [R1]
         { info_tbl: [(c5eQU,
                       label: sat_s5eA1_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eQU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eQV; else goto c5eQW;
       c5eQV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eQW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadList_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eA0_entry() //  [R1, R2]
         { info_tbl: [(c5eR2,
                       label: sat_s5eA0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eR2: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fReadEither_$creadsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_entry() //  [R2, R3]
         { info_tbl: [(c5eR6,
                       label: Data.Either.$fReadEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eR6: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5eRa; else goto c5eR9;
       c5eRa: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eR9: // global
           I64[Hp - 144] = sat_s5eA3_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s5eA2_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s5eA1_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s5eA0_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.053803633 UTC

[section ""data" . Data.Either.$fOrdEither_$c<_closure" {
     Data.Either.$fOrdEither_$c<_closure:
         const Data.Either.$fOrdEither_$c<_info;
 },
 Data.Either.$fOrdEither_$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eRm,
                       label: Data.Either.$fOrdEither_$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eRm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eRn; else goto c5eRo;
       c5eRn: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eRo: // global
           I64[Sp - 32] = block_c5eRf_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eRX; else goto c5eRg;
       u5eRX: // global
           call _c5eRf(R1) args: 0, res: 0, upd: 0;
       c5eRg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eRf() //  [R1]
         { info_tbl: [(c5eRf,
                       label: block_c5eRf_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eRf: // global
           _s5eA7::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eRj; else goto c5eRk;
       c5eRj: // global
           I64[Sp] = block_c5eRr_info;
           _s5eA9::P64 = P64[R1 + 7];
           R1 = _s5eA7::P64;
           P64[Sp + 24] = _s5eA9::P64;
           if (R1 & 7 != 0) goto u5eRV; else goto c5eRt;
       u5eRV: // global
           call _c5eRr(R1) args: 0, res: 0, upd: 0;
       c5eRt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5eRk: // global
           I64[Sp + 8] = block_c5eRG_info;
           _s5eAd::P64 = P64[R1 + 6];
           R1 = _s5eA7::P64;
           P64[Sp + 24] = _s5eAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5eRW; else goto c5eRI;
       u5eRW: // global
           call _c5eRG(R1) args: 0, res: 0, upd: 0;
       c5eRI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eRr() //  [R1]
         { info_tbl: [(c5eRr,
                       label: block_c5eRr_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eRr: // global
           if (R1 & 7 == 1) goto c5eRz; else goto c5eRD;
       c5eRz: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
       c5eRD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5eRG() //  [R1]
         { info_tbl: [(c5eRG,
                       label: block_c5eRG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eRG: // global
           if (R1 & 7 == 1) goto c5eRO; else goto c5eRS;
       c5eRO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5eRS: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.056581107 UTC

[section ""data" . Data.Either.$fOrdEither_$ccompare_closure" {
     Data.Either.$fOrdEither_$ccompare_closure:
         const Data.Either.$fOrdEither_$ccompare_info;
 },
 Data.Either.$fOrdEither_$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eS9,
                       label: Data.Either.$fOrdEither_$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eS9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eSa; else goto c5eSb;
       c5eSa: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eSb: // global
           I64[Sp - 32] = block_c5eS2_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eSK; else goto c5eS3;
       u5eSK: // global
           call _c5eS2(R1) args: 0, res: 0, upd: 0;
       c5eS3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eS2() //  [R1]
         { info_tbl: [(c5eS2,
                       label: block_c5eS2_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eS2: // global
           _s5eAk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eS6; else goto c5eS7;
       c5eS6: // global
           I64[Sp] = block_c5eSe_info;
           _s5eAm::P64 = P64[R1 + 7];
           R1 = _s5eAk::P64;
           P64[Sp + 24] = _s5eAm::P64;
           if (R1 & 7 != 0) goto u5eSI; else goto c5eSg;
       u5eSI: // global
           call _c5eSe(R1) args: 0, res: 0, upd: 0;
       c5eSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5eS7: // global
           I64[Sp + 8] = block_c5eSt_info;
           _s5eAq::P64 = P64[R1 + 6];
           R1 = _s5eAk::P64;
           P64[Sp + 24] = _s5eAq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5eSJ; else goto c5eSv;
       u5eSJ: // global
           call _c5eSt(R1) args: 0, res: 0, upd: 0;
       c5eSv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eSe() //  [R1]
         { info_tbl: [(c5eSe,
                       label: block_c5eSe_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eSe: // global
           if (R1 & 7 == 1) goto c5eSm; else goto c5eSq;
       c5eSm: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
       c5eSq: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5eSt() //  [R1]
         { info_tbl: [(c5eSt,
                       label: block_c5eSt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eSt: // global
           if (R1 & 7 == 1) goto c5eSB; else goto c5eSF;
       c5eSB: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5eSF: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.059945986 UTC

[section ""data" . Data.Either.$fEqEither_$c==_closure" {
     Data.Either.$fEqEither_$c==_closure:
         const Data.Either.$fEqEither_$c==_info;
 },
 Data.Either.$fEqEither_$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eSW,
                       label: Data.Either.$fEqEither_$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eSW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eSX; else goto c5eSY;
       c5eSX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eSY: // global
           I64[Sp - 32] = block_c5eSP_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eTz; else goto c5eSQ;
       u5eTz: // global
           call _c5eSP(R1) args: 0, res: 0, upd: 0;
       c5eSQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eSP() //  [R1]
         { info_tbl: [(c5eSP,
                       label: block_c5eSP_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eSP: // global
           _s5eAx::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eST; else goto c5eSU;
       c5eST: // global
           I64[Sp] = block_c5eT1_info;
           _s5eAz::P64 = P64[R1 + 7];
           R1 = _s5eAx::P64;
           P64[Sp + 24] = _s5eAz::P64;
           if (R1 & 7 != 0) goto u5eTx; else goto c5eT3;
       u5eTx: // global
           call _c5eT1(R1) args: 0, res: 0, upd: 0;
       c5eT3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5eSU: // global
           I64[Sp + 8] = block_c5eTg_info;
           _s5eAD::P64 = P64[R1 + 6];
           R1 = _s5eAx::P64;
           P64[Sp + 24] = _s5eAD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5eTy; else goto c5eTi;
       u5eTy: // global
           call _c5eTg(R1) args: 0, res: 0, upd: 0;
       c5eTi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eT1() //  [R1]
         { info_tbl: [(c5eT1,
                       label: block_c5eT1_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eT1: // global
           if (R1 & 7 == 1) goto c5eT9; else goto u5eTw;
       c5eT9: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
       u5eTw: // global
           Sp = Sp + 32;
           call _c5eTo() args: 0, res: 0, upd: 0;
     }
 },
 _c5eTg() //  [R1]
         { info_tbl: [(c5eTg,
                       label: block_c5eTg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eTg: // global
           if (R1 & 7 == 1) goto u5eTv; else goto c5eTs;
       u5eTv: // global
           Sp = Sp + 24;
           call _c5eTo() args: 0, res: 0, upd: 0;
       c5eTs: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c5eTo() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eTo: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.062867314 UTC

[section ""data" . Data.Either.$fEqEither_$c/=_closure" {
     Data.Either.$fEqEither_$c/=_closure:
         const Data.Either.$fEqEither_$c/=_info;
 },
 Data.Either.$fEqEither_$c/=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eTN,
                       label: Data.Either.$fEqEither_$c/=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eTN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eTO; else goto c5eTP;
       c5eTO: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c/=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eTP: // global
           I64[Sp - 32] = block_c5eTG_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eUS; else goto c5eTH;
       u5eUS: // global
           call _c5eTG(R1) args: 0, res: 0, upd: 0;
       c5eTH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eTG() //  [R1]
         { info_tbl: [(c5eTG,
                       label: block_c5eTG_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eTG: // global
           _s5eAK::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eTK; else goto c5eTL;
       c5eTK: // global
           I64[Sp] = block_c5eTS_info;
           _s5eAM::P64 = P64[R1 + 7];
           R1 = _s5eAK::P64;
           P64[Sp + 24] = _s5eAM::P64;
           if (R1 & 7 != 0) goto u5eUQ; else goto c5eTU;
       u5eUQ: // global
           call _c5eTS(R1) args: 0, res: 0, upd: 0;
       c5eTU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5eTL: // global
           I64[Sp + 8] = block_c5eUi_info;
           _s5eAR::P64 = P64[R1 + 6];
           R1 = _s5eAK::P64;
           P64[Sp + 24] = _s5eAR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5eUR; else goto c5eUk;
       u5eUR: // global
           call _c5eUi(R1) args: 0, res: 0, upd: 0;
       c5eUk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eTS() //  [R1]
         { info_tbl: [(c5eTS,
                       label: block_c5eTS_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eTS: // global
           if (R1 & 7 == 1) goto c5eU1; else goto u5eUN;
       c5eU1: // global
           _s5eAM::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5eTY_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eAM::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u5eUN: // global
           Sp = Sp + 32;
           call _c5eUB() args: 0, res: 0, upd: 0;
     }
 },
 _c5eTY() //  [R1]
         { info_tbl: [(c5eTY,
                       label: block_c5eTY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eTY: // global
           if (R1 & 7 == 1) goto u5eUO; else goto u5eUP;
       u5eUO: // global
           Sp = Sp + 8;
           call _c5eUB() args: 0, res: 0, upd: 0;
       u5eUP: // global
           Sp = Sp + 8;
           call _c5eUF() args: 0, res: 0, upd: 0;
     }
 },
 _c5eUi() //  [R1]
         { info_tbl: [(c5eUi,
                       label: block_c5eUi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eUi: // global
           if (R1 & 7 == 1) goto u5eUK; else goto c5eUv;
       u5eUK: // global
           Sp = Sp + 24;
           call _c5eUB() args: 0, res: 0, upd: 0;
       c5eUv: // global
           _s5eAR::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5eUt_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eAR::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5eUt() //  [R1]
         { info_tbl: [(c5eUt,
                       label: block_c5eUt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eUt: // global
           if (R1 & 7 == 1) goto u5eUL; else goto u5eUM;
       u5eUL: // global
           Sp = Sp + 8;
           call _c5eUB() args: 0, res: 0, upd: 0;
       u5eUM: // global
           Sp = Sp + 8;
           call _c5eUF() args: 0, res: 0, upd: 0;
     }
 },
 _c5eUB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eUB: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5eUF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eUF: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.06611229 UTC

[section ""data" . Data.Either.$fEqEither_closure" {
     Data.Either.$fEqEither_closure:
         const Data.Either.$fEqEither_info;
 },
 sat_s5eAZ_entry() //  [R1, R2, R3]
         { info_tbl: [(c5eV8,
                       label: sat_s5eAZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eV8: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c/=_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eAY_entry() //  [R1, R2, R3]
         { info_tbl: [(c5eVg,
                       label: sat_s5eAY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eVg: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c==_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fEqEither_entry() //  [R2, R3]
         { info_tbl: [(c5eVk,
                       label: Data.Either.$fEqEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eVk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5eVo; else goto c5eVn;
       c5eVo: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eVn: // global
           I64[Hp - 64] = sat_s5eAZ_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s5eAY_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.06834799 UTC

[section ""data" . Data.Either.$fOrdEither_$cp1Ord_closure" {
     Data.Either.$fOrdEither_$cp1Ord_closure:
         const Data.Either.$fOrdEither_$cp1Ord_info;
 },
 sat_s5eB3_entry() //  [R1]
         { info_tbl: [(c5eVx,
                       label: sat_s5eB3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eVx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eVy; else goto c5eVz;
       c5eVy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eVz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eB2_entry() //  [R1]
         { info_tbl: [(c5eVE,
                       label: sat_s5eB2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eVE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5eVF; else goto c5eVG;
       c5eVF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5eVG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_$cp1Ord_entry() //  [R2, R3]
         { info_tbl: [(c5eVH,
                       label: Data.Either.$fOrdEither_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eVH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5eVL; else goto c5eVK;
       c5eVL: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cp1Ord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eVK: // global
           I64[Hp - 40] = sat_s5eB3_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s5eB2_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Either.$fEqEither_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.070822036 UTC

[section ""data" . Data.Either.$fOrdEither_$c<=_closure" {
     Data.Either.$fOrdEither_$c<=_closure:
         const Data.Either.$fOrdEither_$c<=_info;
 },
 Data.Either.$fOrdEither_$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eVX,
                       label: Data.Either.$fOrdEither_$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eVX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eVY; else goto c5eVZ;
       c5eVY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eVZ: // global
           I64[Sp - 32] = block_c5eVQ_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eX2; else goto c5eVR;
       u5eX2: // global
           call _c5eVQ(R1) args: 0, res: 0, upd: 0;
       c5eVR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eVQ() //  [R1]
         { info_tbl: [(c5eVQ,
                       label: block_c5eVQ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eVQ: // global
           _s5eB6::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eVU; else goto c5eVV;
       c5eVU: // global
           I64[Sp] = block_c5eW2_info;
           _s5eB9::P64 = P64[R1 + 7];
           R1 = _s5eB6::P64;
           P64[Sp + 24] = _s5eB9::P64;
           if (R1 & 7 != 0) goto u5eX0; else goto c5eW4;
       u5eX0: // global
           call _c5eW2(R1) args: 0, res: 0, upd: 0;
       c5eW4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5eVV: // global
           I64[Sp + 8] = block_c5eWs_info;
           _s5eBe::P64 = P64[R1 + 6];
           R1 = _s5eB6::P64;
           P64[Sp + 24] = _s5eBe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5eX1; else goto c5eWu;
       u5eX1: // global
           call _c5eWs(R1) args: 0, res: 0, upd: 0;
       c5eWu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eW2() //  [R1]
         { info_tbl: [(c5eW2,
                       label: block_c5eW2_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eW2: // global
           if (R1 & 7 == 1) goto c5eWb; else goto u5eWX;
       c5eWb: // global
           _s5eB9::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5eW8_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eB9::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5eWX: // global
           Sp = Sp + 32;
           call _c5eWP() args: 0, res: 0, upd: 0;
     }
 },
 _c5eW8() //  [R1]
         { info_tbl: [(c5eW8,
                       label: block_c5eW8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eW8: // global
           if (R1 & 7 == 1) goto u5eWY; else goto u5eWZ;
       u5eWY: // global
           Sp = Sp + 8;
           call _c5eWL() args: 0, res: 0, upd: 0;
       u5eWZ: // global
           Sp = Sp + 8;
           call _c5eWP() args: 0, res: 0, upd: 0;
     }
 },
 _c5eWs() //  [R1]
         { info_tbl: [(c5eWs,
                       label: block_c5eWs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eWs: // global
           if (R1 & 7 == 1) goto u5eWU; else goto c5eWF;
       u5eWU: // global
           Sp = Sp + 24;
           call _c5eWL() args: 0, res: 0, upd: 0;
       c5eWF: // global
           _s5eBe::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5eWD_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eBe::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5eWD() //  [R1]
         { info_tbl: [(c5eWD,
                       label: block_c5eWD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eWD: // global
           if (R1 & 7 == 1) goto u5eWV; else goto u5eWW;
       u5eWV: // global
           Sp = Sp + 8;
           call _c5eWL() args: 0, res: 0, upd: 0;
       u5eWW: // global
           Sp = Sp + 8;
           call _c5eWP() args: 0, res: 0, upd: 0;
     }
 },
 _c5eWL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eWL: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5eWP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eWP: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.074930079 UTC

[section ""data" . Data.Either.$fOrdEither_$cmax_closure" {
     Data.Either.$fOrdEither_$cmax_closure:
         const Data.Either.$fOrdEither_$cmax_info;
 },
 Data.Either.$fOrdEither_$cmax_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eXk,
                       label: Data.Either.$fOrdEither_$cmax_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eXk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5eXl; else goto c5eXm;
       c5eXl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmax_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eXm: // global
           I64[Sp - 32] = block_c5eXd_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eYo; else goto c5eXe;
       u5eYo: // global
           call _c5eXd(R1) args: 0, res: 0, upd: 0;
       c5eXe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eXd() //  [R1]
         { info_tbl: [(c5eXd,
                       label: block_c5eXd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eXd: // global
           _s5eBl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eXh; else goto c5eXi;
       c5eXh: // global
           I64[Sp] = block_c5eXp_info;
           _s5eBn::P64 = R1;
           _s5eBo::P64 = P64[R1 + 7];
           R1 = _s5eBl::P64;
           P64[Sp + 16] = _s5eBo::P64;
           P64[Sp + 24] = _s5eBn::P64;
           if (R1 & 7 != 0) goto u5eYm; else goto c5eXr;
       u5eYm: // global
           call _c5eXp(R1) args: 0, res: 0, upd: 0;
       c5eXr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5eXi: // global
           I64[Sp] = block_c5eXP_info;
           _s5eBn::P64 = R1;
           _s5eBt::P64 = P64[R1 + 6];
           R1 = _s5eBl::P64;
           P64[Sp + 8] = _s5eBt::P64;
           P64[Sp + 24] = _s5eBn::P64;
           if (R1 & 7 != 0) goto u5eYn; else goto c5eXR;
       u5eYn: // global
           call _c5eXP(R1) args: 0, res: 0, upd: 0;
       c5eXR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eXp() //  [R1]
         { info_tbl: [(c5eXp,
                       label: block_c5eXp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eXp: // global
           if (R1 & 7 == 1) goto c5eXy; else goto u5eYj;
       c5eXy: // global
           _s5eBj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5eXv_info;
           R2 = _s5eBj::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5eYj: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5eXM() args: 0, res: 0, upd: 0;
     }
 },
 _c5eXv() //  [R1]
         { info_tbl: [(c5eXv,
                       label: block_c5eXv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eXv: // global
           if (R1 & 7 == 1) goto u5eYk; else goto u5eYl;
       u5eYk: // global
           Sp = Sp + 16;
           call _c5eY8() args: 0, res: 0, upd: 0;
       u5eYl: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5eXM() args: 0, res: 0, upd: 0;
     }
 },
 _c5eXM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eXM: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5eXP() //  [R1]
         { info_tbl: [(c5eXP,
                       label: block_c5eXP_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eXP: // global
           if (R1 & 7 == 1) goto u5eYh; else goto c5eY2;
       u5eYh: // global
           Sp = Sp + 24;
           call _c5eY8() args: 0, res: 0, upd: 0;
       c5eY2: // global
           _s5eBt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5eY0_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5eBt::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5eY0() //  [R1]
         { info_tbl: [(c5eY0,
                       label: block_c5eY0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eY0: // global
           if (R1 & 7 == 1) goto u5eYi; else goto c5eYc;
       u5eYi: // global
           Sp = Sp + 16;
           call _c5eY8() args: 0, res: 0, upd: 0;
       c5eYc: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5eY8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eY8: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.078534887 UTC

[section ""data" . Data.Either.$fOrdEither_$c>=_closure" {
     Data.Either.$fOrdEither_$c>=_closure:
         const Data.Either.$fOrdEither_$c>=_info;
 },
 Data.Either.$fOrdEither_$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5eYF,
                       label: Data.Either.$fOrdEither_$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eYF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5eYG; else goto c5eYH;
       c5eYG: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5eYH: // global
           I64[Sp - 32] = block_c5eYy_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5eZK; else goto c5eYz;
       u5eZK: // global
           call _c5eYy(R1) args: 0, res: 0, upd: 0;
       c5eYz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eYy() //  [R1]
         { info_tbl: [(c5eYy,
                       label: block_c5eYy_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eYy: // global
           _s5eBB::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eYC; else goto c5eYD;
       c5eYC: // global
           I64[Sp] = block_c5eYK_info;
           _s5eBD::P64 = P64[R1 + 7];
           R1 = _s5eBB::P64;
           P64[Sp + 24] = _s5eBD::P64;
           if (R1 & 7 != 0) goto u5eZI; else goto c5eYM;
       u5eZI: // global
           call _c5eYK(R1) args: 0, res: 0, upd: 0;
       c5eYM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5eYD: // global
           I64[Sp + 8] = block_c5eZa_info;
           _s5eBI::P64 = P64[R1 + 6];
           R1 = _s5eBB::P64;
           P64[Sp + 24] = _s5eBI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5eZJ; else goto c5eZc;
       u5eZJ: // global
           call _c5eZa(R1) args: 0, res: 0, upd: 0;
       c5eZc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eYK() //  [R1]
         { info_tbl: [(c5eYK,
                       label: block_c5eYK_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eYK: // global
           if (R1 & 7 == 1) goto c5eYT; else goto u5eZF;
       c5eYT: // global
           _s5eBD::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5eYQ_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eBD::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5eZF: // global
           Sp = Sp + 32;
           call _c5eZx() args: 0, res: 0, upd: 0;
     }
 },
 _c5eYQ() //  [R1]
         { info_tbl: [(c5eYQ,
                       label: block_c5eYQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eYQ: // global
           if (R1 & 7 == 1) goto u5eZG; else goto u5eZH;
       u5eZG: // global
           Sp = Sp + 8;
           call _c5eZt() args: 0, res: 0, upd: 0;
       u5eZH: // global
           Sp = Sp + 8;
           call _c5eZx() args: 0, res: 0, upd: 0;
     }
 },
 _c5eZa() //  [R1]
         { info_tbl: [(c5eZa,
                       label: block_c5eZa_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eZa: // global
           if (R1 & 7 == 1) goto u5eZC; else goto c5eZn;
       u5eZC: // global
           Sp = Sp + 24;
           call _c5eZt() args: 0, res: 0, upd: 0;
       c5eZn: // global
           _s5eBI::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5eZl_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eBI::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5eZl() //  [R1]
         { info_tbl: [(c5eZl,
                       label: block_c5eZl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eZl: // global
           if (R1 & 7 == 1) goto u5eZD; else goto u5eZE;
       u5eZD: // global
           Sp = Sp + 8;
           call _c5eZt() args: 0, res: 0, upd: 0;
       u5eZE: // global
           Sp = Sp + 8;
           call _c5eZx() args: 0, res: 0, upd: 0;
     }
 },
 _c5eZt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eZt: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5eZx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eZx: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.082146501 UTC

[section ""data" . Data.Either.$fOrdEither_$cmin_closure" {
     Data.Either.$fOrdEither_$cmin_closure:
         const Data.Either.$fOrdEither_$cmin_info;
 },
 Data.Either.$fOrdEither_$cmin_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5f02,
                       label: Data.Either.$fOrdEither_$cmin_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f02: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5f03; else goto c5f04;
       c5f03: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmin_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f04: // global
           I64[Sp - 32] = block_c5eZV_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5f16; else goto c5eZW;
       u5f16: // global
           call _c5eZV(R1) args: 0, res: 0, upd: 0;
       c5eZW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5eZV() //  [R1]
         { info_tbl: [(c5eZV,
                       label: block_c5eZV_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5eZV: // global
           _s5eBP::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5eZZ; else goto c5f00;
       c5eZZ: // global
           I64[Sp] = block_c5f07_info;
           _s5eBR::P64 = R1;
           _s5eBS::P64 = P64[R1 + 7];
           R1 = _s5eBP::P64;
           P64[Sp + 16] = _s5eBS::P64;
           P64[Sp + 24] = _s5eBR::P64;
           if (R1 & 7 != 0) goto u5f14; else goto c5f09;
       u5f14: // global
           call _c5f07(R1) args: 0, res: 0, upd: 0;
       c5f09: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5f00: // global
           I64[Sp] = block_c5f0x_info;
           _s5eBR::P64 = R1;
           _s5eBX::P64 = P64[R1 + 6];
           R1 = _s5eBP::P64;
           P64[Sp + 8] = _s5eBX::P64;
           P64[Sp + 24] = _s5eBR::P64;
           if (R1 & 7 != 0) goto u5f15; else goto c5f0z;
       u5f15: // global
           call _c5f0x(R1) args: 0, res: 0, upd: 0;
       c5f0z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f07() //  [R1]
         { info_tbl: [(c5f07,
                       label: block_c5f07_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f07: // global
           if (R1 & 7 == 1) goto c5f0g; else goto u5f12;
       c5f0g: // global
           _s5eBN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5f0d_info;
           R2 = _s5eBN::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5f12: // global
           Sp = Sp + 24;
           call _c5f0U() args: 0, res: 0, upd: 0;
     }
 },
 _c5f0d() //  [R1]
         { info_tbl: [(c5f0d,
                       label: block_c5f0d_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f0d: // global
           if (R1 & 7 == 1) goto c5f0m; else goto u5f13;
       c5f0m: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5f13: // global
           Sp = Sp + 16;
           call _c5f0U() args: 0, res: 0, upd: 0;
     }
 },
 _c5f0x() //  [R1]
         { info_tbl: [(c5f0x,
                       label: block_c5f0x_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f0x: // global
           if (R1 & 7 == 1) goto u5f0Z; else goto c5f0K;
       u5f0Z: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5f0Q() args: 0, res: 0, upd: 0;
       c5f0K: // global
           _s5eBX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5f0I_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5eBX::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5f0I() //  [R1]
         { info_tbl: [(c5f0I,
                       label: block_c5f0I_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f0I: // global
           if (R1 & 7 == 1) goto u5f10; else goto u5f11;
       u5f10: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5f0Q() args: 0, res: 0, upd: 0;
       u5f11: // global
           Sp = Sp + 16;
           call _c5f0U() args: 0, res: 0, upd: 0;
     }
 },
 _c5f0Q() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f0Q: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5f0U() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f0U: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.0866832 UTC

[section ""data" . Data.Either.$fOrdEither_closure" {
     Data.Either.$fOrdEither_closure:
         const Data.Either.$fOrdEither_info;
 },
 sat_s5eCd_entry() //  [R1, R2, R3]
         { info_tbl: [(c5f1l,
                       label: sat_s5eCd_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f1l: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmin_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCc_entry() //  [R1, R2, R3]
         { info_tbl: [(c5f1t,
                       label: sat_s5eCc_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f1t: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmax_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCb_entry() //  [R1, R2, R3]
         { info_tbl: [(c5f1B,
                       label: sat_s5eCb_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f1B: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c>=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCa_entry() //  [R1, R2, R3]
         { info_tbl: [(c5f1J,
                       label: sat_s5eCa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f1J: // global
           R5 = R2;
           R4 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC7_entry() //  [R1, R2, R3]
         { info_tbl: [(c5f1R,
                       label: sat_s5eC7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f1R: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC6_entry() //  [R1, R2, R3]
         { info_tbl: [(c5f1Z,
                       label: sat_s5eC6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f1Z: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC5_entry() //  [R1, R2, R3]
         { info_tbl: [(c5f27,
                       label: sat_s5eC5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f27: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$ccompare_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC4_entry() //  [R1]
         { info_tbl: [(c5f2e,
                       label: sat_s5eC4_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f2e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f2f; else goto c5f2g;
       c5f2f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5f2g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fOrdEither_$cp1Ord_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_entry() //  [R2, R3]
         { info_tbl: [(c5f2i,
                       label: Data.Either.$fOrdEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f2i: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto c5f2m; else goto c5f2l;
       c5f2m: // global
           HpAlloc = 272;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f2l: // global
           I64[Hp - 264] = sat_s5eCd_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           I64[Hp - 240] = sat_s5eCc_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           I64[Hp - 216] = sat_s5eCb_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           I64[Hp - 192] = sat_s5eCa_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           I64[Hp - 168] = sat_s5eC7_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s5eC6_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s5eC5_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s5eC4_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = Hp - 118;
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = Hp - 166;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 214;
           P64[Hp - 8] = Hp - 238;
           P64[Hp] = Hp - 262;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.089862804 UTC

[section ""data" . Data.Either.either_closure" {
     Data.Either.either_closure:
         const Data.Either.either_info;
 },
 Data.Either.either_entry() //  [R2, R3, R4]
         { info_tbl: [(c5f2y,
                       label: Data.Either.either_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f2y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5f2z; else goto c5f2A;
       c5f2z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.either_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f2A: // global
           I64[Sp - 24] = block_c5f2r_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5f2H; else goto c5f2s;
       u5f2H: // global
           call _c5f2r(R1) args: 0, res: 0, upd: 0;
       c5f2s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f2r() //  [R1]
         { info_tbl: [(c5f2r,
                       label: block_c5f2r_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f2r: // global
           if (R1 & 7 == 1) goto c5f2v; else goto c5f2w;
       c5f2v: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c5f2w: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.091982926 UTC

[section ""data" . Data.Either.$wpartitionEithers_closure" {
     Data.Either.$wpartitionEithers_closure:
         const Data.Either.$wpartitionEithers_info;
 },
 eta_s5eCo_entry() //  [R1]
         { info_tbl: [(c5f2Z,
                       label: eta_s5eCo_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f2Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5f30; else goto c5f31;
       c5f30: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5f31: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5f2W_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5f2W() //  [R1, R2]
         { info_tbl: [(c5f2W,
                       label: block_c5f2W_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f2W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5f34; else goto c5f33;
       c5f34: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5f33: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$wpartitionEithers_entry() //  [R2]
         { info_tbl: [(c5f39,
                       label: Data.Either.$wpartitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f39: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f3a; else goto c5f3b;
       c5f3a: // global
           R2 = R2;
           R1 = Data.Either.$wpartitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5f3b: // global
           I64[Sp - 8] = block_c5f2M_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5f3F; else goto c5f2N;
       u5f3F: // global
           call _c5f2M(R1) args: 0, res: 0, upd: 0;
       c5f2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f2M() //  [R1]
         { info_tbl: [(c5f2M,
                       label: block_c5f2M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f2M: // global
           if (R1 & 7 == 1) goto c5f36; else goto c5f37;
       c5f36: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5f37: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5f3h; else goto c5f3g;
       c5f3h: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5f3g: // global
           _s5eCm::P64 = P64[R1 + 6];
           _s5eCn::P64 = P64[R1 + 14];
           I64[Hp - 16] = eta_s5eCo_info;
           P64[Hp] = _s5eCn::P64;
           I64[Sp - 8] = block_c5f3e_info;
           R1 = _s5eCm::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5f3E; else goto c5f3i;
       u5f3E: // global
           call _c5f3e(R1) args: 0, res: 0, upd: 0;
       c5f3i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f3e() //  [R1]
         { info_tbl: [(c5f3e,
                       label: block_c5f3e_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f3e: // global
           _c5f2S::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5f3q; else goto c5f3z;
       c5f3q: // global
           Hp = Hp + 72;
           _s5eCs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5f3C; else goto c5f3s;
       c5f3s: // global
           _s5eCt::P64 = P64[_s5eCs::P64 + 7];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5f2S::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5f2S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eCt::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5f3z: // global
           Hp = Hp + 72;
           _s5eCs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5f3C; else goto c5f3B;
       c5f3C: // global
           HpAlloc = 72;
           R1 = _s5eCs::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5f3B: // global
           _s5eCD::P64 = P64[_s5eCs::P64 + 6];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5f2S::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5eCD::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5f2S::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.094889658 UTC

[section ""data" . Data.Either.partitionEithers_closure" {
     Data.Either.partitionEithers_closure:
         const Data.Either.partitionEithers_info;
 },
 Data.Either.partitionEithers_entry() //  [R2]
         { info_tbl: [(c5f3N,
                       label: Data.Either.partitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f3N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5f3O; else goto c5f3P;
       c5f3O: // global
           R2 = R2;
           R1 = Data.Either.partitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5f3P: // global
           I64[Sp - 8] = block_c5f3K_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5f3K() //  [R1, R2]
         { info_tbl: [(c5f3K,
                       label: block_c5f3K_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f3K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5f3S; else goto c5f3R;
       c5f3S: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5f3R: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.097423479 UTC

[section ""data" . poly_go_r5exd_closure" {
     poly_go_r5exd_closure:
         const poly_go_r5exd_info;
 },
 sat_s5eCX_entry() //  [R1]
         { info_tbl: [(c5f4c,
                       label: sat_s5eCX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f4c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f4d; else goto c5f4e;
       c5f4d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5f4e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5exd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5exd_entry() //  [R2]
         { info_tbl: [(c5f4j,
                       label: poly_go_r5exd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f4j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f4k; else goto u5f4A;
       c5f4k: // global
           R2 = R2;
           R1 = poly_go_r5exd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5f4A: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5f3U() args: 0, res: 0, upd: 0;
     }
 },
 _c5f3U() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f3U: // global
           _s5eCR::P64 = P64[Sp];
           I64[Sp] = block_c5f3X_info;
           R1 = _s5eCR::P64;
           if (R1 & 7 != 0) goto u5f4C; else goto c5f3Y;
       u5f4C: // global
           call _c5f3X(R1) args: 0, res: 0, upd: 0;
       c5f3Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f3X() //  [R1]
         { info_tbl: [(c5f3X,
                       label: block_c5f3X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f3X: // global
           if (R1 & 7 == 1) goto c5f4g; else goto c5f4h;
       c5f4g: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5f4h: // global
           I64[Sp - 8] = block_c5f43_info;
           _s5eCU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5eCU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5f4D; else goto c5f44;
       u5f4D: // global
           call _c5f43(R1) args: 0, res: 0, upd: 0;
       c5f44: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f43() //  [R1]
         { info_tbl: [(c5f43,
                       label: block_c5f43_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f43: // global
           _s5eCU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5f4r; else goto c5f4y;
       c5f4r: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5f4u; else goto c5f4t;
       c5f4u: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5f4t: // global
           _s5eCW::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s5eCX_info;
           P64[Hp - 24] = _s5eCU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eCW::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5f4y: // global
           P64[Sp + 8] = _s5eCU::P64;
           Sp = Sp + 8;
           call _c5f3U() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.099329789 UTC

[section ""data" . Data.Either.lefts_closure" {
     Data.Either.lefts_closure:
         const Data.Either.lefts_info;
 },
 Data.Either.lefts_entry() //  [R2]
         { info_tbl: [(c5f4K,
                       label: Data.Either.lefts_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f4K: // global
           R2 = R2;
           call poly_go_r5exd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.100779789 UTC

[section ""data" . poly_go1_r5exe_closure" {
     poly_go1_r5exe_closure:
         const poly_go1_r5exe_info;
 },
 sat_s5eD7_entry() //  [R1]
         { info_tbl: [(c5f57,
                       label: sat_s5eD7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f57: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f58; else goto c5f59;
       c5f58: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5f59: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5exe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5exe_entry() //  [R2]
         { info_tbl: [(c5f5e,
                       label: poly_go1_r5exe_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f5e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f5f; else goto u5f5u;
       c5f5f: // global
           R2 = R2;
           R1 = poly_go1_r5exe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5f5u: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5f4O() args: 0, res: 0, upd: 0;
     }
 },
 _c5f4O() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f4O: // global
           _s5eD0::P64 = P64[Sp];
           I64[Sp] = block_c5f4R_info;
           R1 = _s5eD0::P64;
           if (R1 & 7 != 0) goto u5f5w; else goto c5f4S;
       u5f5w: // global
           call _c5f4R(R1) args: 0, res: 0, upd: 0;
       c5f4S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f4R() //  [R1]
         { info_tbl: [(c5f4R,
                       label: block_c5f4R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f4R: // global
           if (R1 & 7 == 1) goto c5f5b; else goto c5f5c;
       c5f5b: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5f5c: // global
           I64[Sp - 8] = block_c5f4X_info;
           _s5eD3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5eD3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5f5x; else goto c5f4Y;
       u5f5x: // global
           call _c5f4X(R1) args: 0, res: 0, upd: 0;
       c5f4Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f4X() //  [R1]
         { info_tbl: [(c5f4X,
                       label: block_c5f4X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f4X: // global
           _s5eD3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5f5n; else goto c5f5p;
       c5f5n: // global
           P64[Sp + 8] = _s5eD3::P64;
           Sp = Sp + 8;
           call _c5f4O() args: 0, res: 0, upd: 0;
       c5f5p: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5f5s; else goto c5f5r;
       c5f5s: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5f5r: // global
           _s5eD6::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5eD7_info;
           P64[Hp - 24] = _s5eD3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eD6::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.102904392 UTC

[section ""data" . Data.Either.rights_closure" {
     Data.Either.rights_closure:
         const Data.Either.rights_info;
 },
 Data.Either.rights_entry() //  [R2]
         { info_tbl: [(c5f5E,
                       label: Data.Either.rights_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f5E: // global
           R2 = R2;
           call poly_go1_r5exe_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.103903096 UTC

[section ""data" . Data.Either.isLeft_closure" {
     Data.Either.isLeft_closure:
         const Data.Either.isLeft_info;
 },
 Data.Either.isLeft_entry() //  [R2]
         { info_tbl: [(c5f5S,
                       label: Data.Either.isLeft_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f5S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5f5T; else goto c5f5U;
       c5f5T: // global
           R2 = R2;
           R1 = Data.Either.isLeft_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5f5U: // global
           I64[Sp - 8] = block_c5f5L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5f61; else goto c5f5M;
       u5f61: // global
           call _c5f5L(R1) args: 0, res: 0, upd: 0;
       c5f5M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f5L() //  [R1]
         { info_tbl: [(c5f5L,
                       label: block_c5f5L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f5L: // global
           if (R1 & 7 == 1) goto c5f5P; else goto c5f5Q;
       c5f5P: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5f5Q: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.105328002 UTC

[section ""data" . Data.Either.isRight_closure" {
     Data.Either.isRight_closure:
         const Data.Either.isRight_info;
 },
 Data.Either.isRight_entry() //  [R2]
         { info_tbl: [(c5f6d,
                       label: Data.Either.isRight_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f6d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5f6e; else goto c5f6f;
       c5f6e: // global
           R2 = R2;
           R1 = Data.Either.isRight_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5f6f: // global
           I64[Sp - 8] = block_c5f66_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5f6m; else goto c5f67;
       u5f6m: // global
           call _c5f66(R1) args: 0, res: 0, upd: 0;
       c5f67: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f66() //  [R1]
         { info_tbl: [(c5f66,
                       label: block_c5f66_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f66: // global
           if (R1 & 7 == 1) goto c5f6a; else goto c5f6b;
       c5f6a: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5f6b: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.106755617 UTC

[section ""data" . Data.Either.fromLeft_closure" {
     Data.Either.fromLeft_closure:
         const Data.Either.fromLeft_info;
 },
 Data.Either.fromLeft_entry() //  [R2, R3]
         { info_tbl: [(c5f6y,
                       label: Data.Either.fromLeft_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f6y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f6z; else goto c5f6A;
       c5f6z: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromLeft_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f6A: // global
           I64[Sp - 16] = block_c5f6r_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5f6H; else goto c5f6s;
       u5f6H: // global
           call _c5f6r(R1) args: 0, res: 0, upd: 0;
       c5f6s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f6r() //  [R1]
         { info_tbl: [(c5f6r,
                       label: block_c5f6r_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f6r: // global
           if (R1 & 7 == 1) goto c5f6v; else goto c5f6w;
       c5f6v: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5f6w: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.108853437 UTC

[section ""data" . Data.Either.fromRight_closure" {
     Data.Either.fromRight_closure:
         const Data.Either.fromRight_info;
 },
 Data.Either.fromRight_entry() //  [R2, R3]
         { info_tbl: [(c5f6T,
                       label: Data.Either.fromRight_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f6T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f6U; else goto c5f6V;
       c5f6U: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromRight_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f6V: // global
           I64[Sp - 16] = block_c5f6M_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5f72; else goto c5f6N;
       u5f72: // global
           call _c5f6M(R1) args: 0, res: 0, upd: 0;
       c5f6N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f6M() //  [R1]
         { info_tbl: [(c5f6M,
                       label: block_c5f6M_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f6M: // global
           if (R1 & 7 == 1) goto c5f6Q; else goto c5f6R;
       c5f6Q: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5f6R: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.109941975 UTC

[section ""cstring" . Data.Either.$trModule4_bytes" {
     Data.Either.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.110492453 UTC

[section ""data" . Data.Either.$trModule3_closure" {
     Data.Either.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.111188491 UTC

[section ""cstring" . Data.Either.$trModule2_bytes" {
     Data.Either.$trModule2_bytes:
         I8[] [68,97,116,97,46,69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.111781669 UTC

[section ""data" . Data.Either.$trModule1_closure" {
     Data.Either.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.112356783 UTC

[section ""data" . Data.Either.$trModule_closure" {
     Data.Either.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Either.$trModule3_closure+1;
         const Data.Either.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.112968061 UTC

[section ""data" . $krep_r5exf_closure" {
     $krep_r5exf_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.113710152 UTC

[section ""data" . $krep1_r5exg_closure" {
     $krep1_r5exg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.114274619 UTC

[section ""cstring" . Data.Either.$tcEither2_bytes" {
     Data.Either.$tcEither2_bytes:
         I8[] [69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.114837393 UTC

[section ""data" . Data.Either.$tcEither1_closure" {
     Data.Either.$tcEither1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tcEither2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.115399872 UTC

[section ""data" . Data.Either.$tcEither_closure" {
     Data.Either.$tcEither_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tcEither1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 16074290893719807138;
         const 14958199358864670905;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.116012477 UTC

[section ""data" . $krep2_r5exh_closure" {
     $krep2_r5exh_closure:
         const :_con_info;
         const $krep_r5exf_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.11668352 UTC

[section ""data" . $krep3_r5exi_closure" {
     $krep3_r5exi_closure:
         const :_con_info;
         const $krep1_r5exg_closure+2;
         const $krep2_r5exh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.117230728 UTC

[section ""data" . $krep4_r5exj_closure" {
     $krep4_r5exj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Either.$tcEither_closure+1;
         const $krep3_r5exi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.117998288 UTC

[section ""data" . Data.Either.$tc'Left1_closure" {
     Data.Either.$tc'Left1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5exg_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.119086097 UTC

[section ""cstring" . Data.Either.$tc'Left3_bytes" {
     Data.Either.$tc'Left3_bytes:
         I8[] [39,76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.119635135 UTC

[section ""data" . Data.Either.$tc'Left2_closure" {
     Data.Either.$tc'Left2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Left3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.120234986 UTC

[section ""data" . Data.Either.$tc'Left_closure" {
     Data.Either.$tc'Left_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Left2_closure+1;
         const Data.Either.$tc'Left1_closure+4;
         const 14915236324383360020;
         const 11027491440201056612;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.120813847 UTC

[section ""data" . Data.Either.$tc'Right1_closure" {
     Data.Either.$tc'Right1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5exf_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.121511499 UTC

[section ""cstring" . Data.Either.$tc'Right3_bytes" {
     Data.Either.$tc'Right3_bytes:
         I8[] [39,82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.122096763 UTC

[section ""data" . Data.Either.$tc'Right2_closure" {
     Data.Either.$tc'Right2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Right3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.122680339 UTC

[section ""data" . Data.Either.$tc'Right_closure" {
     Data.Either.$tc'Right_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Right2_closure+1;
         const Data.Either.$tc'Right1_closure+4;
         const 10395468319011834275;
         const 16371021254350888909;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.123636205 UTC

[section ""data" . Data.Either.Left_closure" {
     Data.Either.Left_closure:
         const Data.Either.Left_info;
 },
 Data.Either.Left_entry() //  [R2]
         { info_tbl: [(c5f78,
                       label: Data.Either.Left_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f78: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5f7c; else goto c5f7b;
       c5f7c: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Left_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5f7b: // global
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.124634135 UTC

[section ""data" . Data.Either.Right_closure" {
     Data.Either.Right_closure:
         const Data.Either.Right_info;
 },
 Data.Either.Right_entry() //  [R2]
         { info_tbl: [(c5f7i,
                       label: Data.Either.Right_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f7i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5f7m; else goto c5f7l;
       c5f7m: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Right_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5f7l: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.125567007 UTC

[Data.Either.Left_con_entry() //  [R1]
         { info_tbl: [(c5f7n,
                       label: Data.Either.Left_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,76,101,102,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f7n: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.126303878 UTC

[Data.Either.Right_con_entry() //  [R1]
         { info_tbl: [(c5f7o,
                       label: Data.Either.Right_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,82,105,103,104,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f7o: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.127066599 UTC

[section ""relreadonly" . S5eEs_srt" {
     S5eEs_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Either.$fSemigroupEither2_closure;
         const Data.Either.$fSemigroupEither_$cstimes_closure;
         const Data.Either.$fSemigroupEither1_closure;
         const Data.Either.$fShowEither4_closure;
         const Data.Either.$fShowEither2_closure;
         const Data.Either.$w$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshow_closure;
         const Data.Either.$fShowEither_$cshowList_closure;
         const Data.Either.$fShowEither_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Either.$fReadEither_lexeme1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Either.$fReadEither_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Either.$fReadEither1_closure;
         const Data.Either.$fReadEither_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Either.$fReadEither_$creadListPrec_closure;
         const Data.Either.$fReadEither_$creadList_closure;
         const Data.Either.$fReadEither_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.127791941 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:13.129348969 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cfmap_closure" {
     Data.Either.$fApplicativeEither_$cfmap_closure:
         const Data.Either.$fApplicativeEither_$cfmap_info;
 },
 Data.Either.$fApplicativeEither_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(c5f7A,
                       label: Data.Either.$fApplicativeEither_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f7A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f7B; else goto c5f7C;
       c5f7B: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f7C: // global
           I64[Sp - 16] = block_c5f7t_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5f7N; else goto c5f7u;
       u5f7N: // global
           call _c5f7t(R1) args: 0, res: 0, upd: 0;
       c5f7u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f7t() //  [R1]
         { info_tbl: [(c5f7t,
                       label: block_c5f7t_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f7t: // global
           if (R1 & 7 == 1) goto c5f7x; else goto c5f7y;
       c5f7x: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5f7y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5f7M; else goto c5f7L;
       c5f7M: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5f7L: // global
           _s5exp::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5exp::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.130975829 UTC

[section ""data" . Data.Either.$fFunctorEither_$c<$_closure" {
     Data.Either.$fFunctorEither_$c<$_closure:
         const Data.Either.$fFunctorEither_$c<$_info;
 },
 Data.Either.$fFunctorEither_$c<$_entry() //  [R2, R3]
         { info_tbl: [(c5f7Z,
                       label: Data.Either.$fFunctorEither_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f7Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f80; else goto c5f81;
       c5f80: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fFunctorEither_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f81: // global
           I64[Sp - 16] = block_c5f7S_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5f8b; else goto c5f7T;
       u5f8b: // global
           call _c5f7S(R1) args: 0, res: 0, upd: 0;
       c5f7T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f7S() //  [R1]
         { info_tbl: [(c5f7S,
                       label: block_c5f7S_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f7S: // global
           if (R1 & 7 == 1) goto c5f7W; else goto c5f7X;
       c5f7W: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5f7X: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5f8a; else goto c5f89;
       c5f8a: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5f89: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.132174963 UTC

[section ""data" . Data.Either.$fFunctorEither_closure" {
     Data.Either.$fFunctorEither_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Either.$fApplicativeEither_$cfmap_closure+2;
         const Data.Either.$fFunctorEither_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.132791826 UTC

[section ""cstring" . lvl_r5exb_bytes" {
     lvl_r5exb_bytes:
         I8[] [115,116,105,109,101,115,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.133749728 UTC

[section ""data" . Data.Either.$fSemigroupEither1_closure" {
     Data.Either.$fSemigroupEither1_closure:
         const Data.Either.$fSemigroupEither1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither1_entry() //  [R1]
         { info_tbl: [(c5f8k,
                       label: Data.Either.$fSemigroupEither1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5f8l; else goto c5f8m;
       c5f8l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5f8m: // global
           (_c5f8f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5f8f::I64 == 0) goto c5f8h; else goto c5f8g;
       c5f8h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5f8g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5f8f::I64;
           I64[Sp - 24] = block_c5f8i_info;
           R2 = lvl_r5exb_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5f8i() //  [R1]
         { info_tbl: [(c5f8i,
                       label: block_c5f8i_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8i: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.134956064 UTC

[section ""data" . Data.Either.$fSemigroupEither2_closure" {
     Data.Either.$fSemigroupEither2_closure:
         const Data.Either.$fSemigroupEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither2_entry() //  [R1]
         { info_tbl: [(c5f8w,
                       label: Data.Either.$fSemigroupEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f8x; else goto c5f8y;
       c5f8x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5f8y: // global
           (_c5f8t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5f8t::I64 == 0) goto c5f8v; else goto c5f8u;
       c5f8v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5f8u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5f8t::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.136489496 UTC

[section ""data" . Data.Either.$fSemigroupEither_$cstimes_closure" {
     Data.Either.$fSemigroupEither_$cstimes_closure:
         const Data.Either.$fSemigroupEither_$cstimes_info;
         const 0;
 },
 sat_s5exD_entry() //  [R1]
         { info_tbl: [(c5f8N,
                       label: sat_s5exD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8N: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5f8O; else goto c5f8P;
       c5f8O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5f8P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5f8L_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5f8L() //  [R1]
         { info_tbl: [(c5f8L,
                       label: block_c5f8L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8L: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Either.$fSemigroupEither2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Either.$fSemigroupEither_$cstimes_entry() //  [R2, R3, R4]
         { info_tbl: [(c5f8T,
                       label: Data.Either.$fSemigroupEither_$cstimes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8T: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5f8V; else goto c5f8W;
       c5f8V: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$cstimes_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f8W: // global
           I64[Sp - 24] = block_c5f8D_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5f8D() //  [R1]
         { info_tbl: [(c5f8D,
                       label: block_c5f8D_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5f8Z; else goto c5f8Y;
       c5f8Z: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5f8Y: // global
           I64[Hp - 16] = sat_s5exD_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5f8U_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5f8U() //  [R1]
         { info_tbl: [(c5f8U,
                       label: block_c5f8U_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f8U: // global
           _s5exy::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5f93_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5exy::P64;
           Sp = Sp - 8;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5f93() //  [R1]
         { info_tbl: [(c5f93,
                       label: block_c5f93_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f93: // global
           if (R1 & 7 == 1) goto c5f9a; else goto c5f9e;
       c5f9a: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5f9e: // global
           R1 = Data.Either.$fSemigroupEither1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.138876963 UTC

[section ""data" . Data.Either.$fSemigroupEither_$c<>_closure" {
     Data.Either.$fSemigroupEither_$c<>_closure:
         const Data.Either.$fSemigroupEither_$c<>_info;
 },
 Data.Either.$fSemigroupEither_$c<>_entry() //  [R2, R3]
         { info_tbl: [(c5f9r,
                       label: Data.Either.$fSemigroupEither_$c<>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f9r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5f9s; else goto c5f9t;
       c5f9s: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5f9t: // global
           I64[Sp - 16] = block_c5f9k_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5f9A; else goto c5f9l;
       u5f9A: // global
           call _c5f9k(R1) args: 0, res: 0, upd: 0;
       c5f9l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f9k() //  [R1]
         { info_tbl: [(c5f9k,
                       label: block_c5f9k_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f9k: // global
           if (R1 & 7 == 1) goto c5f9o; else goto c5f9p;
       c5f9o: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5f9p: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.141186401 UTC

[section ""data" . Data.Either.$fSemigroupEither3_closure" {
     Data.Either.$fSemigroupEither3_closure:
         const Data.Either.$fSemigroupEither3_info;
 },
 Data.Either.$fSemigroupEither3_entry() //  [R2, R3]
         { info_tbl: [(c5f9M,
                       label: Data.Either.$fSemigroupEither3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f9M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5f9N; else goto u5fa8;
       c5f9N: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5fa8: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5f9C() args: 0, res: 0, upd: 0;
     }
 },
 _c5f9C() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f9C: // global
           I64[Sp - 8] = block_c5f9F_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5faa; else goto c5f9G;
       u5faa: // global
           call _c5f9F(R1) args: 0, res: 0, upd: 0;
       c5f9G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f9F() //  [R1]
         { info_tbl: [(c5f9F,
                       label: block_c5f9F_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f9F: // global
           _s5exK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5f9J; else goto c5f9K;
       c5f9J: // global
           R1 = _s5exK::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5f9K: // global
           I64[Sp] = block_c5f9U_info;
           _s5exN::P64 = P64[R1 + 6];
           _s5exO::P64 = P64[R1 + 14];
           R1 = _s5exK::P64;
           P64[Sp + 8] = _s5exO::P64;
           P64[Sp + 16] = _s5exN::P64;
           if (R1 & 7 != 0) goto u5fab; else goto c5f9W;
       u5fab: // global
           call _c5f9U(R1) args: 0, res: 0, upd: 0;
       c5f9W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5f9U() //  [R1]
         { info_tbl: [(c5f9U,
                       label: block_c5f9U_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5f9U: // global
           if (R1 & 7 == 1) goto c5fa2; else goto c5fa6;
       c5fa2: // global
           _s5exL::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s5exL::P64;
           Sp = Sp + 8;
           call _c5f9C() args: 0, res: 0, upd: 0;
       c5fa6: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.143066144 UTC

[section ""data" . Data.Either.$fSemigroupEither_$csconcat_closure" {
     Data.Either.$fSemigroupEither_$csconcat_closure:
         const Data.Either.$fSemigroupEither_$csconcat_info;
 },
 Data.Either.$fSemigroupEither_$csconcat_entry() //  [R2]
         { info_tbl: [(c5fal,
                       label: Data.Either.$fSemigroupEither_$csconcat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fal: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5fam; else goto c5fan;
       c5fam: // global
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fan: // global
           I64[Sp - 8] = block_c5fai_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5far; else goto c5faj;
       u5far: // global
           call _c5fai(R1) args: 0, res: 0, upd: 0;
       c5faj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fai() //  [R1]
         { info_tbl: [(c5fai,
                       label: block_c5fai_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fai: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Either.$fSemigroupEither3_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.144047133 UTC

[section ""data" . Data.Either.$fSemigroupEither_closure" {
     Data.Either.$fSemigroupEither_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Either.$fSemigroupEither_$c<>_closure+2;
         const Data.Either.$fSemigroupEither_$csconcat_closure+1;
         const Data.Either.$fSemigroupEither_$cstimes_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.144981949 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*>_closure" {
     Data.Either.$fApplicativeEither_$c<*>_closure:
         const Data.Either.$fApplicativeEither_$c<*>_info;
 },
 Data.Either.$fApplicativeEither_$c<*>_entry() //  [R2, R3]
         { info_tbl: [(c5faD,
                       label: Data.Either.$fApplicativeEither_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5faD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5faE; else goto c5faF;
       c5faE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5faF: // global
           I64[Sp - 16] = block_c5faw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5faM; else goto c5fax;
       u5faM: // global
           call _c5faw(R1) args: 0, res: 0, upd: 0;
       c5fax: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5faw() //  [R1]
         { info_tbl: [(c5faw,
                       label: block_c5faw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5faw: // global
           if (R1 & 7 == 1) goto c5faA; else goto c5faB;
       c5faA: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5faB: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.147071419 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cliftA2_closure" {
     Data.Either.$fApplicativeEither_$cliftA2_closure:
         const Data.Either.$fApplicativeEither_$cliftA2_info;
 },
 ds_s5ey3_entry() //  [R1]
         { info_tbl: [(c5fb2,
                       label: ds_s5ey3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fb2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fb3; else goto c5fb4;
       c5fb3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fb4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5faV_info;
           _s5ey1::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5ey1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fbf; else goto c5faW;
       u5fbf: // global
           call _c5faV(R1) args: 0, res: 0, upd: 0;
       c5faW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5faV() //  [R1]
         { info_tbl: [(c5faV,
                       label: block_c5faV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5faV: // global
           if (R1 & 7 == 1) goto c5faZ; else goto c5fb0;
       c5faZ: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c5fb0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fbe; else goto c5fbd;
       c5fbe: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5fbd: // global
           _s5ey6::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5ey6::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyc_entry() //  [R1, R2]
         { info_tbl: [(c5fbs,
                       label: sat_s5eyc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fbs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fbt; else goto c5fbu;
       c5fbt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fbu: // global
           I64[Sp - 16] = block_c5fbl_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fbB; else goto c5fbm;
       u5fbB: // global
           call _c5fbl(R1) args: 0, res: 0, upd: 0;
       c5fbm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fbl() //  [R1]
         { info_tbl: [(c5fbl,
                       label: block_c5fbl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fbl: // global
           if (R1 & 7 == 1) goto c5fbp; else goto c5fbq;
       c5fbp: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fbq: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fApplicativeEither_$cliftA2_entry() //  [R2, R3]
         { info_tbl: [(c5fbC,
                       label: Data.Either.$fApplicativeEither_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fbC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fbG; else goto c5fbF;
       c5fbG: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fbF: // global
           I64[Hp - 40] = ds_s5ey3_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5eyc_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.149656673 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c*>_closure" {
     Data.Either.$fApplicativeEither_$c*>_closure:
         const Data.Either.$fApplicativeEither_$c*>_info;
 },
 Data.Either.$fApplicativeEither_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c5fbS,
                       label: Data.Either.$fApplicativeEither_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fbS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fbT; else goto c5fbU;
       c5fbT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fbU: // global
           I64[Sp - 16] = block_c5fbL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fc1; else goto c5fbM;
       u5fc1: // global
           call _c5fbL(R1) args: 0, res: 0, upd: 0;
       c5fbM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fbL() //  [R1]
         { info_tbl: [(c5fbL,
                       label: block_c5fbL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fbL: // global
           if (R1 & 7 == 1) goto c5fbP; else goto c5fbQ;
       c5fbP: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fbQ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.151306521 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*_closure" {
     Data.Either.$fApplicativeEither_$c<*_closure:
         const Data.Either.$fApplicativeEither_$c<*_info;
 },
 Data.Either.$fApplicativeEither_$c<*_entry() //  [R2, R3]
         { info_tbl: [(c5fcd,
                       label: Data.Either.$fApplicativeEither_$c<*_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fcd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fce; else goto c5fcf;
       c5fce: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fcf: // global
           I64[Sp - 16] = block_c5fc6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fcD; else goto c5fc7;
       u5fcD: // global
           call _c5fc6(R1) args: 0, res: 0, upd: 0;
       c5fc7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fc6() //  [R1]
         { info_tbl: [(c5fc6,
                       label: block_c5fc6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fc6: // global
           if (R1 & 7 == 1) goto u5fcz; else goto c5fcb;
       u5fcz: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _c5fcx() args: 0, res: 0, upd: 0;
       c5fcb: // global
           I64[Sp] = block_c5fcl_info;
           _s5eyk::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5eyk::P64;
           if (R1 & 7 != 0) goto u5fcB; else goto c5fcn;
       u5fcB: // global
           call _c5fcl(R1) args: 0, res: 0, upd: 0;
       c5fcn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fcl() //  [R1]
         { info_tbl: [(c5fcl,
                       label: block_c5fcl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fcl: // global
           if (R1 & 7 == 1) goto c5fct; else goto u5fcA;
       c5fct: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5fcA: // global
           Sp = Sp + 8;
           call _c5fcx() args: 0, res: 0, upd: 0;
     }
 },
 _c5fcx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fcx: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.153703236 UTC

[section ""data" . Data.Either.$fApplicativeEither_closure" {
     Data.Either.$fApplicativeEither_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Either.$fFunctorEither_closure+1;
         const Data.Either.Right_closure+1;
         const Data.Either.$fApplicativeEither_$c<*>_closure+2;
         const Data.Either.$fApplicativeEither_$cliftA2_closure+2;
         const Data.Either.$fApplicativeEither_$c*>_closure+2;
         const Data.Either.$fApplicativeEither_$c<*_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.154745302 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>=_closure" {
     Data.Either.$fMonadEither_$c>>=_closure:
         const Data.Either.$fMonadEither_$c>>=_info;
 },
 Data.Either.$fMonadEither_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5fcQ,
                       label: Data.Either.$fMonadEither_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fcQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fcR; else goto c5fcS;
       c5fcR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fMonadEither_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fcS: // global
           I64[Sp - 16] = block_c5fcJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fcZ; else goto c5fcK;
       u5fcZ: // global
           call _c5fcJ(R1) args: 0, res: 0, upd: 0;
       c5fcK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fcJ() //  [R1]
         { info_tbl: [(c5fcJ,
                       label: block_c5fcJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fcJ: // global
           if (R1 & 7 == 1) goto c5fcN; else goto c5fcO;
       c5fcN: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fcO: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.155957951 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>_closure" {
     Data.Either.$fMonadEither_$c>>_closure:
         const Data.Either.$fMonadEither_$c>>_info;
 },
 Data.Either.$fMonadEither_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5fd4,
                       label: Data.Either.$fMonadEither_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fd4: // global
           R3 = R3;
           R2 = R2;
           call Data.Either.$fApplicativeEither_$c*>_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.156788778 UTC

[section ""data" . lvl1_r5exc_closure" {
     lvl1_r5exc_closure:
         const lvl1_r5exc_info;
         const 0;
 },
 lvl1_r5exc_entry() //  [R2]
         { info_tbl: [(c5fdb,
                       label: lvl1_r5exc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fdb: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.157679018 UTC

[section ""data" . Data.Either.$fMonadEither_closure" {
     Data.Either.$fMonadEither_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Either.$fApplicativeEither_closure+1;
         const Data.Either.$fMonadEither_$c>>=_closure+2;
         const Data.Either.$fMonadEither_$c>>_closure+2;
         const Data.Either.Right_closure+1;
         const lvl1_r5exc_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.158308949 UTC

[section ""cstring" . Data.Either.$fShowEither5_bytes" {
     Data.Either.$fShowEither5_bytes:
         I8[] [76,101,102,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.159105375 UTC

[section ""data" . Data.Either.$fShowEither4_closure" {
     Data.Either.$fShowEither4_closure:
         const Data.Either.$fShowEither4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither4_entry() //  [R1]
         { info_tbl: [(c5fdk,
                       label: Data.Either.$fShowEither4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fdk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fdl; else goto c5fdm;
       c5fdl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fdm: // global
           (_c5fdh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fdh::I64 == 0) goto c5fdj; else goto c5fdi;
       c5fdj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fdi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fdh::I64;
           R2 = Data.Either.$fShowEither5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.160008719 UTC

[section ""data" . Data.Either.$fReadEither4_closure" {
     Data.Either.$fReadEither4_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.160566648 UTC

[section ""cstring" . Data.Either.$fShowEither3_bytes" {
     Data.Either.$fShowEither3_bytes:
         I8[] [82,105,103,104,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.16154261 UTC

[section ""data" . Data.Either.$fShowEither2_closure" {
     Data.Either.$fShowEither2_closure:
         const Data.Either.$fShowEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither2_entry() //  [R1]
         { info_tbl: [(c5fdt,
                       label: Data.Either.$fShowEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fdt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fdu; else goto c5fdv;
       c5fdu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fdv: // global
           (_c5fdq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fdq::I64 == 0) goto c5fds; else goto c5fdr;
       c5fds: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fdr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fdq::I64;
           R2 = Data.Either.$fShowEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.167112799 UTC

[section ""data" . Data.Either.$w$cshowsPrec_closure" {
     Data.Either.$w$cshowsPrec_closure:
         const Data.Either.$w$cshowsPrec_info;
         const 0;
 },
 Data.Either.$w$cshowsPrec_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fdx: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5eyC_entry() //  [R1]
         { info_tbl: [(c5fdK,
                       label: g_s5eyC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fdK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5fdL; else goto c5fdM;
       c5fdL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fdM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5eyF_entry() //  [R1]
         { info_tbl: [(c5fdZ,
                       label: sat_s5eyF_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fdZ: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyG_entry() //  [R1, R2]
         { info_tbl: [(c5fe2,
                       label: sat_s5eyG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fe2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fe6; else goto c5fe5;
       c5fe6: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fe5: // global
           _s5eyC::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5eyF_info;
           P64[Hp - 8] = _s5eyC::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyJ_entry() //  [R1]
         { info_tbl: [(c5fem,
                       label: sat_s5eyJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fem: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5feq; else goto c5fep;
       c5feq: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fep: // global
           _s5eyC::P64 = P64[R1 + 16];
           _s5eyH::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5eyH::P64;
           R2 = Hp - 14;
           R1 = _s5eyC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyK_entry() //  [R1]
         { info_tbl: [(c5fer,
                       label: sat_s5eyK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fer: // global
           _s5eyK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5fes; else goto c5fet;
       c5fet: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fev; else goto c5feu;
       c5fev: // global
           HpAlloc = 32;
           goto c5fes;
       c5fes: // global
           R1 = _s5eyK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5feu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5eyK::P64;
           _s5eyC::P64 = P64[_s5eyK::P64 + 16];
           _s5eyH::P64 = P64[_s5eyK::P64 + 24];
           I64[Hp - 24] = sat_s5eyJ_info;
           P64[Hp - 8] = _s5eyC::P64;
           P64[Hp] = _s5eyH::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyL_entry() //  [R1, R2]
         { info_tbl: [(c5fex,
                       label: sat_s5eyL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fex: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5feB; else goto c5feA;
       c5feB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5feA: // global
           _s5eyC::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5eyK_info;
           P64[Hp - 32] = _s5eyC::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5eyN_entry() //  [R1]
         { info_tbl: [(c5feI,
                       label: g_s5eyN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5feI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5feJ; else goto c5feK;
       c5feJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5feK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5eyQ_entry() //  [R1]
         { info_tbl: [(c5feX,
                       label: sat_s5eyQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5feX: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyR_entry() //  [R1, R2]
         { info_tbl: [(c5ff0,
                       label: sat_s5eyR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ff0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5ff4; else goto c5ff3;
       c5ff4: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ff3: // global
           _s5eyN::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5eyQ_info;
           P64[Hp - 8] = _s5eyN::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyU_entry() //  [R1]
         { info_tbl: [(c5ffk,
                       label: sat_s5eyU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ffk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ffo; else goto c5ffn;
       c5ffo: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ffn: // global
           _s5eyN::P64 = P64[R1 + 16];
           _s5eyS::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5eyS::P64;
           R2 = Hp - 14;
           R1 = _s5eyN::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyV_entry() //  [R1]
         { info_tbl: [(c5ffp,
                       label: sat_s5eyV_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ffp: // global
           _s5eyV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5ffq; else goto c5ffr;
       c5ffr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fft; else goto c5ffs;
       c5fft: // global
           HpAlloc = 32;
           goto c5ffq;
       c5ffq: // global
           R1 = _s5eyV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ffs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5eyV::P64;
           _s5eyN::P64 = P64[_s5eyV::P64 + 16];
           _s5eyS::P64 = P64[_s5eyV::P64 + 24];
           I64[Hp - 24] = sat_s5eyU_info;
           P64[Hp - 8] = _s5eyN::P64;
           P64[Hp] = _s5eyS::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyW_entry() //  [R1, R2]
         { info_tbl: [(c5ffv,
                       label: sat_s5eyW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ffv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5ffz; else goto c5ffy;
       c5ffz: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ffy: // global
           _s5eyN::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5eyV_info;
           P64[Hp - 32] = _s5eyN::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5ffE,
                       label: Data.Either.$w$cshowsPrec_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ffE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5ffF; else goto c5ffG;
       c5ffF: // global
           R1 = Data.Either.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5ffG: // global
           I64[Sp - 32] = block_c5fdB_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5ffT; else goto c5fdC;
       u5ffT: // global
           call _c5fdB(R1) args: 0, res: 0, upd: 0;
       c5fdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fdB() //  [R1]
         { info_tbl: [(c5fdB,
                       label: block_c5fdB_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fdB: // global
           _s5eyy::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5ffB; else goto c5ffC;
       c5ffB: // global
           Hp = Hp + 48;
           _s5eyA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5ffP; else goto c5ffI;
       c5ffI: // global
           _s5eyB::P64 = P64[_s5eyA::P64 + 7];
           I64[Hp - 40] = g_s5eyC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5eyB::P64;
           _c5fdG::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5eyy::I64, 11)) goto c5ffL; else goto c5ffM;
       c5ffL: // global
           I64[Hp - 8] = sat_s5eyG_info;
           P64[Hp] = _c5fdG::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ffM: // global
           I64[Hp - 8] = sat_s5eyL_info;
           P64[Hp] = _c5fdG::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ffC: // global
           Hp = Hp + 48;
           _s5eyA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5ffP; else goto c5ffO;
       c5ffP: // global
           HpAlloc = 48;
           R1 = _s5eyA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ffO: // global
           _s5eyM::P64 = P64[_s5eyA::P64 + 6];
           I64[Hp - 40] = g_s5eyN_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _s5eyM::P64;
           _c5feE::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5eyy::I64, 11)) goto c5ffR; else goto c5ffS;
       c5ffR: // global
           I64[Hp - 8] = sat_s5eyR_info;
           P64[Hp] = _c5feE::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ffS: // global
           I64[Hp - 8] = sat_s5eyW_info;
           P64[Hp] = _c5feE::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.17277375 UTC

[section ""data" . Data.Either.$fShowEither_$cshowsPrec_closure" {
     Data.Either.$fShowEither_$cshowsPrec_closure:
         const Data.Either.$fShowEither_$cshowsPrec_info;
         const 0;
 },
 Data.Either.$fShowEither_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fg1,
                       label: Data.Either.$fShowEither_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fg1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fg2; else goto c5fg3;
       c5fg2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fg3: // global
           I64[Sp - 32] = block_c5ffY_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fg7; else goto c5ffZ;
       u5fg7: // global
           call _c5ffY(R1) args: 0, res: 0, upd: 0;
       c5ffZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ffY() //  [R1]
         { info_tbl: [(c5ffY,
                       label: block_c5ffY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ffY: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.175147984 UTC

[section ""data" . Data.Either.$fShowEither_$cshow_closure" {
     Data.Either.$fShowEither_$cshow_closure:
         const Data.Either.$fShowEither_$cshow_info;
         const 0;
 },
 sat_s5ez8_entry() //  [R1]
         { info_tbl: [(c5fgl,
                       label: sat_s5ez8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fgl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fgm; else goto c5fgn;
       c5fgm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fgn: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 sat_s5eza_entry() //  [R1]
         { info_tbl: [(c5fgu,
                       label: sat_s5eza_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fgu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fgv; else goto c5fgw;
       c5fgv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fgw: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshow_entry() //  [R2, R3, R4]
         { info_tbl: [(c5fgB,
                       label: Data.Either.$fShowEither_$cshow_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fgB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5fgC; else goto c5fgD;
       c5fgC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fgD: // global
           I64[Sp - 24] = block_c5fgc_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5fgK; else goto c5fgd;
       u5fgK: // global
           call _c5fgc(R1) args: 0, res: 0, upd: 0;
       c5fgd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fgc() //  [R1]
         { info_tbl: [(c5fgc,
                       label: block_c5fgc_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fgc: // global
           if (R1 & 7 == 1) goto c5fgy; else goto c5fgz;
       c5fgy: // global
           Hp = Hp + 32;
           _s5ez6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fgJ; else goto c5fgF;
       c5fgF: // global
           _s5ez7::P64 = P64[_s5ez6::P64 + 7];
           I64[Hp - 24] = sat_s5ez8_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5ez7::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c5fgz: // global
           Hp = Hp + 32;
           _s5ez6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fgJ; else goto c5fgI;
       c5fgJ: // global
           HpAlloc = 32;
           R1 = _s5ez6::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fgI: // global
           _s5ez9::P64 = P64[_s5ez6::P64 + 6];
           I64[Hp - 24] = sat_s5eza_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5ez9::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.178972185 UTC

[section ""data" . Data.Either.$fShowEither1_closure" {
     Data.Either.$fShowEither1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.181422735 UTC

[section ""data" . Data.Either.$fShowEither_$cshowList_closure" {
     Data.Either.$fShowEither_$cshowList_closure:
         const Data.Either.$fShowEither_$cshowList_info;
         const 0;
 },
 sat_s5ezg_entry() //  [R1, R2]
         { info_tbl: [(c5fgU,
                       label: sat_s5ezg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fgU: // global
           R5 = R2;
           R4 = 0;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshowList_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fgX,
                       label: Data.Either.$fShowEither_$cshowList_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fgX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fh1; else goto c5fh0;
       c5fh1: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fh0: // global
           I64[Hp - 16] = sat_s5ezg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5ezd::P64 = R4;
           R4 = R5;
           R3 = _s5ezd::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.184090588 UTC

[section ""data" . Data.Either.$fShowEither_closure" {
     Data.Either.$fShowEither_closure:
         const Data.Either.$fShowEither_info;
         const 0;
 },
 sat_s5ezl_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fhb,
                       label: sat_s5ezl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fhb: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowList_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezk_entry() //  [R1, R2]
         { info_tbl: [(c5fhj,
                       label: sat_s5ezk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fhj: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fShowEither_$cshow_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezj_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fhr,
                       label: sat_s5ezj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fhr: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowsPrec_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_entry() //  [R2, R3]
         { info_tbl: [(c5fhv,
                       label: Data.Either.$fShowEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fhv: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5fhz; else goto c5fhy;
       c5fhz: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fhy: // global
           I64[Hp - 96] = sat_s5ezl_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_s5ezk_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_s5ezj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.186806528 UTC

[section ""cstring" . Data.Either.$fReadEither3_bytes" {
     Data.Either.$fReadEither3_bytes:
         I8[] [76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.187967039 UTC

[section ""data" . Data.Either.$fReadEither2_closure" {
     Data.Either.$fReadEither2_closure:
         const Data.Either.$fReadEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither2_entry() //  [R1]
         { info_tbl: [(c5fhG,
                       label: Data.Either.$fReadEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fhG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fhH; else goto c5fhI;
       c5fhH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fhI: // global
           (_c5fhD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fhD::I64 == 0) goto c5fhF; else goto c5fhE;
       c5fhF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fhE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fhD::I64;
           R2 = Data.Either.$fReadEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.189186888 UTC

[section ""data" . Data.Either.$fReadEither_lexeme_closure" {
     Data.Either.$fReadEither_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.190628479 UTC

[section ""cstring" . Data.Either.$fReadEither6_bytes" {
     Data.Either.$fReadEither6_bytes:
         I8[] [82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.191461194 UTC

[section ""data" . Data.Either.$fReadEither5_closure" {
     Data.Either.$fReadEither5_closure:
         const Data.Either.$fReadEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither5_entry() //  [R1]
         { info_tbl: [(c5fhP,
                       label: Data.Either.$fReadEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fhP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fhQ; else goto c5fhR;
       c5fhQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fhR: // global
           (_c5fhM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fhM::I64 == 0) goto c5fhO; else goto c5fhN;
       c5fhO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fhN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fhM::I64;
           R2 = Data.Either.$fReadEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.192358988 UTC

[section ""data" . Data.Either.$fReadEither_lexeme1_closure" {
     Data.Either.$fReadEither_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.194880731 UTC

[section ""data" . Data.Either.$fReadEither1_closure" {
     Data.Either.$fReadEither1_closure:
         const Data.Either.$fReadEither1_info;
         const 0;
 },
 sat_s5ezz_entry() //  [R1, R2]
         { info_tbl: [(c5fip,
                       label: sat_s5ezz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fip: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fit; else goto c5fis;
       c5fit: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fis: // global
           _s5ezr::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s5ezr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezA_entry() //  [R1, R2]
         { info_tbl: [(c5fiu,
                       label: sat_s5ezA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fiu: // global
           _s5ezw::P64 = R2;
           _s5ezA::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5fiv; else goto c5fiw;
       c5fiw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fiy; else goto c5fix;
       c5fiy: // global
           HpAlloc = 16;
           goto c5fiv;
       c5fiv: // global
           R2 = _s5ezw::P64;
           R1 = _s5ezA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fix: // global
           _s5ezn::P64 = P64[_s5ezA::P64 + 7];
           _s5ezr::P64 = P64[_s5ezA::P64 + 15];
           I64[Hp - 8] = sat_s5ezz_info;
           P64[Hp] = _s5ezr::P64;
           R2 = _s5ezn::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 karg_s5ezu_entry() //  [R1]
         { info_tbl: [(c5fiC,
                       label: karg_s5ezu_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fiC: // global
           _s5ezu::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5fiD; else goto c5fiE;
       c5fiE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fiG; else goto c5fiF;
       c5fiG: // global
           HpAlloc = 24;
           goto c5fiD;
       c5fiD: // global
           R1 = _s5ezu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fiF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ezu::P64;
           if (%MO_S_Gt_W64(I64[_s5ezu::P64 + 32],
                            10)) goto c5fiA; else goto c5fiB;
       c5fiA: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5fiB: // global
           _s5ezn::P64 = P64[_s5ezu::P64 + 16];
           _s5ezr::P64 = P64[_s5ezu::P64 + 24];
           I64[Hp - 16] = sat_s5ezA_info;
           P64[Hp - 8] = _s5ezn::P64;
           P64[Hp] = _s5ezr::P64;
           I64[Sp - 24] = block_c5fiH_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme1_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5fiH() //  [R1]
         { info_tbl: [(c5fiH,
                       label: block_c5fiH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fiH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fiM; else goto c5fiL;
       c5fiM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5fiL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5ezH_entry() //  [R1, R2]
         { info_tbl: [(c5fj2,
                       label: sat_s5ezH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fj2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fj6; else goto c5fj5;
       c5fj6: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fj5: // global
           _s5ezr::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _s5ezr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezI_entry() //  [R1, R2]
         { info_tbl: [(c5fj7,
                       label: sat_s5ezI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fj7: // global
           _s5ezE::P64 = R2;
           _s5ezI::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5fj8; else goto c5fj9;
       c5fj9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fjb; else goto c5fja;
       c5fjb: // global
           HpAlloc = 16;
           goto c5fj8;
       c5fj8: // global
           R2 = _s5ezE::P64;
           R1 = _s5ezI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fja: // global
           _s5ezm::P64 = P64[_s5ezI::P64 + 7];
           _s5ezr::P64 = P64[_s5ezI::P64 + 15];
           I64[Hp - 8] = sat_s5ezH_info;
           P64[Hp] = _s5ezr::P64;
           R2 = _s5ezm::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5ezM_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fjc,
                       label: sat_s5ezM_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fjc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fjd; else goto c5fje;
       c5fjd: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fje: // global
           I64[Sp - 32] = block_c5fi1_info;
           _s5ezm::P64 = P64[R1 + 6];
           _s5ezn::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s5ezm::P64;
           P64[Sp - 16] = _s5ezn::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fjr; else goto c5fi2;
       u5fjr: // global
           call _c5fi1(R1) args: 0, res: 0, upd: 0;
       c5fi2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fi1() //  [R1]
         { info_tbl: [(c5fi1,
                       label: block_c5fi1_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fi1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5fjh; else goto c5fjg;
       c5fjh: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fjg: // global
           _s5ezt::I64 = I64[R1 + 7];
           I64[Hp - 56] = karg_s5ezu_info;
           P64[Hp - 40] = P64[Sp + 16];
           _s5ezr::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5ezr::P64;
           I64[Hp - 24] = _s5ezt::I64;
           _c5fi6::P64 = Hp - 56;
           if (%MO_S_Gt_W64(_s5ezt::I64, 10)) goto c5fjj; else goto c5fjn;
       c5fjj: // global
           Hp = Hp - 24;
           R3 = _c5fi6::P64;
           R2 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
       c5fjn: // global
           I64[Hp - 16] = sat_s5ezI_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5ezr::P64;
           I64[Sp + 16] = block_c5fjk_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme_closure+4;
           P64[Sp + 24] = _c5fi6::P64;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5fjk() //  [R1]
         { info_tbl: [(c5fjk,
                       label: block_c5fjk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fjk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fjq; else goto c5fjp;
       c5fjq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fjp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fjs,
                       label: Data.Either.$fReadEither1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fjs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fjw; else goto c5fjv;
       c5fjw: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fjv: // global
           I64[Hp - 16] = sat_s5ezM_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5ezo::P64 = R4;
           R4 = R5;
           R3 = _s5ezo::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.201482219 UTC

[section ""data" . Data.Either.$fReadEither_$creadsPrec_closure" {
     Data.Either.$fReadEither_$creadsPrec_closure:
         const Data.Either.$fReadEither_$creadsPrec_info;
         const 0;
 },
 sat_s5ezQ_entry() //  [R1]
         { info_tbl: [(c5fjF,
                       label: sat_s5ezQ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fjF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fjG; else goto c5fjH;
       c5fjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fjH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5fjI,
                       label: Data.Either.$fReadEither_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fjI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5fjM; else goto c5fjL;
       c5fjM: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fjL: // global
           I64[Hp - 32] = sat_s5ezQ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.203776949 UTC

[section ""data" . Data.Either.$fReadEither_$creadListPrec_closure" {
     Data.Either.$fReadEither_$creadListPrec_closure:
         const Data.Either.$fReadEither_$creadListPrec_info;
         const 0;
 },
 sat_s5ezT_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fjW,
                       label: sat_s5ezT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fjW: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_$creadListPrec_entry() //  [R2, R3]
         { info_tbl: [(c5fjZ,
                       label: Data.Either.$fReadEither_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fjZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fk3; else goto c5fk2;
       c5fk3: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fk2: // global
           I64[Hp - 16] = sat_s5ezT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.206277246 UTC

[section ""data" . Data.Either.$fReadEither_$creadList_closure" {
     Data.Either.$fReadEither_$creadList_closure:
         const Data.Either.$fReadEither_$creadList_info;
         const 0;
 },
 sat_s5ezW_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fkh,
                       label: sat_s5ezW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fkh: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezX_entry() //  [R1]
         { info_tbl: [(c5fkk,
                       label: sat_s5ezX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fkk: // global
           _s5ezX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5fkl; else goto c5fkm;
       c5fkm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fko; else goto c5fkn;
       c5fko: // global
           HpAlloc = 24;
           goto c5fkl;
       c5fkl: // global
           R1 = _s5ezX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fkn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ezX::P64;
           _s5ezU::P64 = P64[_s5ezX::P64 + 16];
           _s5ezV::P64 = P64[_s5ezX::P64 + 24];
           I64[Hp - 16] = sat_s5ezW_info;
           P64[Hp - 8] = _s5ezU::P64;
           P64[Hp] = _s5ezV::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadList_entry() //  [R2, R3]
         { info_tbl: [(c5fkp,
                       label: Data.Either.$fReadEither_$creadList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fkp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fkt; else goto c5fks;
       c5fkt: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fks: // global
           I64[Hp - 24] = sat_s5ezX_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.209964325 UTC

[section ""data" . Data.Either.$fReadEither_closure" {
     Data.Either.$fReadEither_closure:
         const Data.Either.$fReadEither_info;
         const 0;
 },
 sat_s5eA3_entry() //  [R1]
         { info_tbl: [(c5fkC,
                       label: sat_s5eA3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fkC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fkD; else goto c5fkE;
       c5fkD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fkE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadListPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eA2_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fkK,
                       label: sat_s5eA2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fkK: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eA1_entry() //  [R1]
         { info_tbl: [(c5fkR,
                       label: sat_s5eA1_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fkR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fkS; else goto c5fkT;
       c5fkS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fkT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadList_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eA0_entry() //  [R1, R2]
         { info_tbl: [(c5fkZ,
                       label: sat_s5eA0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fkZ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fReadEither_$creadsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_entry() //  [R2, R3]
         { info_tbl: [(c5fl3,
                       label: Data.Either.$fReadEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fl3: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5fl7; else goto c5fl6;
       c5fl7: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fl6: // global
           I64[Hp - 144] = sat_s5eA3_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s5eA2_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s5eA1_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s5eA0_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.215337957 UTC

[section ""data" . Data.Either.$fOrdEither_$c<_closure" {
     Data.Either.$fOrdEither_$c<_closure:
         const Data.Either.$fOrdEither_$c<_info;
 },
 Data.Either.$fOrdEither_$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5flj,
                       label: Data.Either.$fOrdEither_$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5flj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5flk; else goto c5fll;
       c5flk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fll: // global
           I64[Sp - 32] = block_c5flc_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5flU; else goto c5fld;
       u5flU: // global
           call _c5flc(R1) args: 0, res: 0, upd: 0;
       c5fld: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5flc() //  [R1]
         { info_tbl: [(c5flc,
                       label: block_c5flc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5flc: // global
           _s5eA7::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5flg; else goto c5flh;
       c5flg: // global
           I64[Sp] = block_c5flo_info;
           _s5eA9::P64 = P64[R1 + 7];
           R1 = _s5eA7::P64;
           P64[Sp + 24] = _s5eA9::P64;
           if (R1 & 7 != 0) goto u5flS; else goto c5flq;
       u5flS: // global
           call _c5flo(R1) args: 0, res: 0, upd: 0;
       c5flq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5flh: // global
           I64[Sp + 8] = block_c5flD_info;
           _s5eAd::P64 = P64[R1 + 6];
           R1 = _s5eA7::P64;
           P64[Sp + 24] = _s5eAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5flT; else goto c5flF;
       u5flT: // global
           call _c5flD(R1) args: 0, res: 0, upd: 0;
       c5flF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5flo() //  [R1]
         { info_tbl: [(c5flo,
                       label: block_c5flo_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5flo: // global
           if (R1 & 7 == 1) goto c5flw; else goto c5flA;
       c5flw: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
       c5flA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5flD() //  [R1]
         { info_tbl: [(c5flD,
                       label: block_c5flD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5flD: // global
           if (R1 & 7 == 1) goto c5flL; else goto c5flP;
       c5flL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5flP: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.219417188 UTC

[section ""data" . Data.Either.$fOrdEither_$ccompare_closure" {
     Data.Either.$fOrdEither_$ccompare_closure:
         const Data.Either.$fOrdEither_$ccompare_info;
 },
 Data.Either.$fOrdEither_$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fm6,
                       label: Data.Either.$fOrdEither_$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fm6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fm7; else goto c5fm8;
       c5fm7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fm8: // global
           I64[Sp - 32] = block_c5flZ_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fmH; else goto c5fm0;
       u5fmH: // global
           call _c5flZ(R1) args: 0, res: 0, upd: 0;
       c5fm0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5flZ() //  [R1]
         { info_tbl: [(c5flZ,
                       label: block_c5flZ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5flZ: // global
           _s5eAk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fm3; else goto c5fm4;
       c5fm3: // global
           I64[Sp] = block_c5fmb_info;
           _s5eAm::P64 = P64[R1 + 7];
           R1 = _s5eAk::P64;
           P64[Sp + 24] = _s5eAm::P64;
           if (R1 & 7 != 0) goto u5fmF; else goto c5fmd;
       u5fmF: // global
           call _c5fmb(R1) args: 0, res: 0, upd: 0;
       c5fmd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fm4: // global
           I64[Sp + 8] = block_c5fmq_info;
           _s5eAq::P64 = P64[R1 + 6];
           R1 = _s5eAk::P64;
           P64[Sp + 24] = _s5eAq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5fmG; else goto c5fms;
       u5fmG: // global
           call _c5fmq(R1) args: 0, res: 0, upd: 0;
       c5fms: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fmb() //  [R1]
         { info_tbl: [(c5fmb,
                       label: block_c5fmb_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fmb: // global
           if (R1 & 7 == 1) goto c5fmj; else goto c5fmn;
       c5fmj: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
       c5fmn: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5fmq() //  [R1]
         { info_tbl: [(c5fmq,
                       label: block_c5fmq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fmq: // global
           if (R1 & 7 == 1) goto c5fmy; else goto c5fmC;
       c5fmy: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fmC: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.222453579 UTC

[section ""data" . Data.Either.$fEqEither_$c==_closure" {
     Data.Either.$fEqEither_$c==_closure:
         const Data.Either.$fEqEither_$c==_info;
 },
 Data.Either.$fEqEither_$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fmT,
                       label: Data.Either.$fEqEither_$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fmT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fmU; else goto c5fmV;
       c5fmU: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fmV: // global
           I64[Sp - 32] = block_c5fmM_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fnw; else goto c5fmN;
       u5fnw: // global
           call _c5fmM(R1) args: 0, res: 0, upd: 0;
       c5fmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fmM() //  [R1]
         { info_tbl: [(c5fmM,
                       label: block_c5fmM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fmM: // global
           _s5eAx::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fmQ; else goto c5fmR;
       c5fmQ: // global
           I64[Sp] = block_c5fmY_info;
           _s5eAz::P64 = P64[R1 + 7];
           R1 = _s5eAx::P64;
           P64[Sp + 24] = _s5eAz::P64;
           if (R1 & 7 != 0) goto u5fnu; else goto c5fn0;
       u5fnu: // global
           call _c5fmY(R1) args: 0, res: 0, upd: 0;
       c5fn0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fmR: // global
           I64[Sp + 8] = block_c5fnd_info;
           _s5eAD::P64 = P64[R1 + 6];
           R1 = _s5eAx::P64;
           P64[Sp + 24] = _s5eAD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5fnv; else goto c5fnf;
       u5fnv: // global
           call _c5fnd(R1) args: 0, res: 0, upd: 0;
       c5fnf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fmY() //  [R1]
         { info_tbl: [(c5fmY,
                       label: block_c5fmY_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fmY: // global
           if (R1 & 7 == 1) goto c5fn6; else goto u5fnt;
       c5fn6: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
       u5fnt: // global
           Sp = Sp + 32;
           call _c5fnl() args: 0, res: 0, upd: 0;
     }
 },
 _c5fnd() //  [R1]
         { info_tbl: [(c5fnd,
                       label: block_c5fnd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fnd: // global
           if (R1 & 7 == 1) goto u5fns; else goto c5fnp;
       u5fns: // global
           Sp = Sp + 24;
           call _c5fnl() args: 0, res: 0, upd: 0;
       c5fnp: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c5fnl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fnl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.225199927 UTC

[section ""data" . Data.Either.$fEqEither_$c/=_closure" {
     Data.Either.$fEqEither_$c/=_closure:
         const Data.Either.$fEqEither_$c/=_info;
 },
 Data.Either.$fEqEither_$c/=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fnK,
                       label: Data.Either.$fEqEither_$c/=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fnK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fnL; else goto c5fnM;
       c5fnL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c/=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fnM: // global
           I64[Sp - 32] = block_c5fnD_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5foP; else goto c5fnE;
       u5foP: // global
           call _c5fnD(R1) args: 0, res: 0, upd: 0;
       c5fnE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fnD() //  [R1]
         { info_tbl: [(c5fnD,
                       label: block_c5fnD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fnD: // global
           _s5eAK::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fnH; else goto c5fnI;
       c5fnH: // global
           I64[Sp] = block_c5fnP_info;
           _s5eAM::P64 = P64[R1 + 7];
           R1 = _s5eAK::P64;
           P64[Sp + 24] = _s5eAM::P64;
           if (R1 & 7 != 0) goto u5foN; else goto c5fnR;
       u5foN: // global
           call _c5fnP(R1) args: 0, res: 0, upd: 0;
       c5fnR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fnI: // global
           I64[Sp + 8] = block_c5fof_info;
           _s5eAR::P64 = P64[R1 + 6];
           R1 = _s5eAK::P64;
           P64[Sp + 24] = _s5eAR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5foO; else goto c5foh;
       u5foO: // global
           call _c5fof(R1) args: 0, res: 0, upd: 0;
       c5foh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fnP() //  [R1]
         { info_tbl: [(c5fnP,
                       label: block_c5fnP_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fnP: // global
           if (R1 & 7 == 1) goto c5fnY; else goto u5foK;
       c5fnY: // global
           _s5eAM::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5fnV_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eAM::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u5foK: // global
           Sp = Sp + 32;
           call _c5foy() args: 0, res: 0, upd: 0;
     }
 },
 _c5fnV() //  [R1]
         { info_tbl: [(c5fnV,
                       label: block_c5fnV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fnV: // global
           if (R1 & 7 == 1) goto u5foL; else goto u5foM;
       u5foL: // global
           Sp = Sp + 8;
           call _c5foy() args: 0, res: 0, upd: 0;
       u5foM: // global
           Sp = Sp + 8;
           call _c5foC() args: 0, res: 0, upd: 0;
     }
 },
 _c5fof() //  [R1]
         { info_tbl: [(c5fof,
                       label: block_c5fof_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fof: // global
           if (R1 & 7 == 1) goto u5foH; else goto c5fos;
       u5foH: // global
           Sp = Sp + 24;
           call _c5foy() args: 0, res: 0, upd: 0;
       c5fos: // global
           _s5eAR::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5foq_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eAR::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5foq() //  [R1]
         { info_tbl: [(c5foq,
                       label: block_c5foq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5foq: // global
           if (R1 & 7 == 1) goto u5foI; else goto u5foJ;
       u5foI: // global
           Sp = Sp + 8;
           call _c5foy() args: 0, res: 0, upd: 0;
       u5foJ: // global
           Sp = Sp + 8;
           call _c5foC() args: 0, res: 0, upd: 0;
     }
 },
 _c5foy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5foy: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5foC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5foC: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.229742918 UTC

[section ""data" . Data.Either.$fEqEither_closure" {
     Data.Either.$fEqEither_closure:
         const Data.Either.$fEqEither_info;
 },
 sat_s5eAZ_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fp5,
                       label: sat_s5eAZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fp5: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c/=_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eAY_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fpd,
                       label: sat_s5eAY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fpd: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c==_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fEqEither_entry() //  [R2, R3]
         { info_tbl: [(c5fph,
                       label: Data.Either.$fEqEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fph: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5fpl; else goto c5fpk;
       c5fpl: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fpk: // global
           I64[Hp - 64] = sat_s5eAZ_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s5eAY_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.232402185 UTC

[section ""data" . Data.Either.$fOrdEither_$cp1Ord_closure" {
     Data.Either.$fOrdEither_$cp1Ord_closure:
         const Data.Either.$fOrdEither_$cp1Ord_info;
 },
 sat_s5eB3_entry() //  [R1]
         { info_tbl: [(c5fpu,
                       label: sat_s5eB3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fpu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fpv; else goto c5fpw;
       c5fpv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fpw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eB2_entry() //  [R1]
         { info_tbl: [(c5fpB,
                       label: sat_s5eB2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fpB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fpC; else goto c5fpD;
       c5fpC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fpD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_$cp1Ord_entry() //  [R2, R3]
         { info_tbl: [(c5fpE,
                       label: Data.Either.$fOrdEither_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fpE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fpI; else goto c5fpH;
       c5fpI: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cp1Ord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fpH: // global
           I64[Hp - 40] = sat_s5eB3_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s5eB2_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Either.$fEqEither_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.23469057 UTC

[section ""data" . Data.Either.$fOrdEither_$c<=_closure" {
     Data.Either.$fOrdEither_$c<=_closure:
         const Data.Either.$fOrdEither_$c<=_info;
 },
 Data.Either.$fOrdEither_$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fpU,
                       label: Data.Either.$fOrdEither_$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fpU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fpV; else goto c5fpW;
       c5fpV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fpW: // global
           I64[Sp - 32] = block_c5fpN_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fqZ; else goto c5fpO;
       u5fqZ: // global
           call _c5fpN(R1) args: 0, res: 0, upd: 0;
       c5fpO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fpN() //  [R1]
         { info_tbl: [(c5fpN,
                       label: block_c5fpN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fpN: // global
           _s5eB6::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fpR; else goto c5fpS;
       c5fpR: // global
           I64[Sp] = block_c5fpZ_info;
           _s5eB9::P64 = P64[R1 + 7];
           R1 = _s5eB6::P64;
           P64[Sp + 24] = _s5eB9::P64;
           if (R1 & 7 != 0) goto u5fqX; else goto c5fq1;
       u5fqX: // global
           call _c5fpZ(R1) args: 0, res: 0, upd: 0;
       c5fq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fpS: // global
           I64[Sp + 8] = block_c5fqp_info;
           _s5eBe::P64 = P64[R1 + 6];
           R1 = _s5eB6::P64;
           P64[Sp + 24] = _s5eBe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5fqY; else goto c5fqr;
       u5fqY: // global
           call _c5fqp(R1) args: 0, res: 0, upd: 0;
       c5fqr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fpZ() //  [R1]
         { info_tbl: [(c5fpZ,
                       label: block_c5fpZ_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fpZ: // global
           if (R1 & 7 == 1) goto c5fq8; else goto u5fqU;
       c5fq8: // global
           _s5eB9::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5fq5_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eB9::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5fqU: // global
           Sp = Sp + 32;
           call _c5fqM() args: 0, res: 0, upd: 0;
     }
 },
 _c5fq5() //  [R1]
         { info_tbl: [(c5fq5,
                       label: block_c5fq5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fq5: // global
           if (R1 & 7 == 1) goto u5fqV; else goto u5fqW;
       u5fqV: // global
           Sp = Sp + 8;
           call _c5fqI() args: 0, res: 0, upd: 0;
       u5fqW: // global
           Sp = Sp + 8;
           call _c5fqM() args: 0, res: 0, upd: 0;
     }
 },
 _c5fqp() //  [R1]
         { info_tbl: [(c5fqp,
                       label: block_c5fqp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fqp: // global
           if (R1 & 7 == 1) goto u5fqR; else goto c5fqC;
       u5fqR: // global
           Sp = Sp + 24;
           call _c5fqI() args: 0, res: 0, upd: 0;
       c5fqC: // global
           _s5eBe::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5fqA_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eBe::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5fqA() //  [R1]
         { info_tbl: [(c5fqA,
                       label: block_c5fqA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fqA: // global
           if (R1 & 7 == 1) goto u5fqS; else goto u5fqT;
       u5fqS: // global
           Sp = Sp + 8;
           call _c5fqI() args: 0, res: 0, upd: 0;
       u5fqT: // global
           Sp = Sp + 8;
           call _c5fqM() args: 0, res: 0, upd: 0;
     }
 },
 _c5fqI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fqI: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5fqM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fqM: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.23990007 UTC

[section ""data" . Data.Either.$fOrdEither_$cmax_closure" {
     Data.Either.$fOrdEither_$cmax_closure:
         const Data.Either.$fOrdEither_$cmax_info;
 },
 Data.Either.$fOrdEither_$cmax_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5frh,
                       label: Data.Either.$fOrdEither_$cmax_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5frh: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5fri; else goto c5frj;
       c5fri: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmax_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5frj: // global
           I64[Sp - 32] = block_c5fra_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fsl; else goto c5frb;
       u5fsl: // global
           call _c5fra(R1) args: 0, res: 0, upd: 0;
       c5frb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fra() //  [R1]
         { info_tbl: [(c5fra,
                       label: block_c5fra_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fra: // global
           _s5eBl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fre; else goto c5frf;
       c5fre: // global
           I64[Sp] = block_c5frm_info;
           _s5eBn::P64 = R1;
           _s5eBo::P64 = P64[R1 + 7];
           R1 = _s5eBl::P64;
           P64[Sp + 16] = _s5eBo::P64;
           P64[Sp + 24] = _s5eBn::P64;
           if (R1 & 7 != 0) goto u5fsj; else goto c5fro;
       u5fsj: // global
           call _c5frm(R1) args: 0, res: 0, upd: 0;
       c5fro: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5frf: // global
           I64[Sp] = block_c5frM_info;
           _s5eBn::P64 = R1;
           _s5eBt::P64 = P64[R1 + 6];
           R1 = _s5eBl::P64;
           P64[Sp + 8] = _s5eBt::P64;
           P64[Sp + 24] = _s5eBn::P64;
           if (R1 & 7 != 0) goto u5fsk; else goto c5frO;
       u5fsk: // global
           call _c5frM(R1) args: 0, res: 0, upd: 0;
       c5frO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5frm() //  [R1]
         { info_tbl: [(c5frm,
                       label: block_c5frm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5frm: // global
           if (R1 & 7 == 1) goto c5frv; else goto u5fsg;
       c5frv: // global
           _s5eBj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5frs_info;
           R2 = _s5eBj::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5fsg: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5frJ() args: 0, res: 0, upd: 0;
     }
 },
 _c5frs() //  [R1]
         { info_tbl: [(c5frs,
                       label: block_c5frs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5frs: // global
           if (R1 & 7 == 1) goto u5fsh; else goto u5fsi;
       u5fsh: // global
           Sp = Sp + 16;
           call _c5fs5() args: 0, res: 0, upd: 0;
       u5fsi: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5frJ() args: 0, res: 0, upd: 0;
     }
 },
 _c5frJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5frJ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5frM() //  [R1]
         { info_tbl: [(c5frM,
                       label: block_c5frM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5frM: // global
           if (R1 & 7 == 1) goto u5fse; else goto c5frZ;
       u5fse: // global
           Sp = Sp + 24;
           call _c5fs5() args: 0, res: 0, upd: 0;
       c5frZ: // global
           _s5eBt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5frX_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5eBt::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5frX() //  [R1]
         { info_tbl: [(c5frX,
                       label: block_c5frX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5frX: // global
           if (R1 & 7 == 1) goto u5fsf; else goto c5fs9;
       u5fsf: // global
           Sp = Sp + 16;
           call _c5fs5() args: 0, res: 0, upd: 0;
       c5fs9: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5fs5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fs5: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.245397919 UTC

[section ""data" . Data.Either.$fOrdEither_$c>=_closure" {
     Data.Either.$fOrdEither_$c>=_closure:
         const Data.Either.$fOrdEither_$c>=_info;
 },
 Data.Either.$fOrdEither_$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fsC,
                       label: Data.Either.$fOrdEither_$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fsC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fsD; else goto c5fsE;
       c5fsD: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fsE: // global
           I64[Sp - 32] = block_c5fsv_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5ftH; else goto c5fsw;
       u5ftH: // global
           call _c5fsv(R1) args: 0, res: 0, upd: 0;
       c5fsw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fsv() //  [R1]
         { info_tbl: [(c5fsv,
                       label: block_c5fsv_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fsv: // global
           _s5eBB::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fsz; else goto c5fsA;
       c5fsz: // global
           I64[Sp] = block_c5fsH_info;
           _s5eBD::P64 = P64[R1 + 7];
           R1 = _s5eBB::P64;
           P64[Sp + 24] = _s5eBD::P64;
           if (R1 & 7 != 0) goto u5ftF; else goto c5fsJ;
       u5ftF: // global
           call _c5fsH(R1) args: 0, res: 0, upd: 0;
       c5fsJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fsA: // global
           I64[Sp + 8] = block_c5ft7_info;
           _s5eBI::P64 = P64[R1 + 6];
           R1 = _s5eBB::P64;
           P64[Sp + 24] = _s5eBI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5ftG; else goto c5ft9;
       u5ftG: // global
           call _c5ft7(R1) args: 0, res: 0, upd: 0;
       c5ft9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fsH() //  [R1]
         { info_tbl: [(c5fsH,
                       label: block_c5fsH_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fsH: // global
           if (R1 & 7 == 1) goto c5fsQ; else goto u5ftC;
       c5fsQ: // global
           _s5eBD::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5fsN_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eBD::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5ftC: // global
           Sp = Sp + 32;
           call _c5ftu() args: 0, res: 0, upd: 0;
     }
 },
 _c5fsN() //  [R1]
         { info_tbl: [(c5fsN,
                       label: block_c5fsN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fsN: // global
           if (R1 & 7 == 1) goto u5ftD; else goto u5ftE;
       u5ftD: // global
           Sp = Sp + 8;
           call _c5ftq() args: 0, res: 0, upd: 0;
       u5ftE: // global
           Sp = Sp + 8;
           call _c5ftu() args: 0, res: 0, upd: 0;
     }
 },
 _c5ft7() //  [R1]
         { info_tbl: [(c5ft7,
                       label: block_c5ft7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ft7: // global
           if (R1 & 7 == 1) goto u5ftz; else goto c5ftk;
       u5ftz: // global
           Sp = Sp + 24;
           call _c5ftq() args: 0, res: 0, upd: 0;
       c5ftk: // global
           _s5eBI::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5fti_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eBI::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5fti() //  [R1]
         { info_tbl: [(c5fti,
                       label: block_c5fti_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fti: // global
           if (R1 & 7 == 1) goto u5ftA; else goto u5ftB;
       u5ftA: // global
           Sp = Sp + 8;
           call _c5ftq() args: 0, res: 0, upd: 0;
       u5ftB: // global
           Sp = Sp + 8;
           call _c5ftu() args: 0, res: 0, upd: 0;
     }
 },
 _c5ftq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ftq: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5ftu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ftu: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.250503205 UTC

[section ""data" . Data.Either.$fOrdEither_$cmin_closure" {
     Data.Either.$fOrdEither_$cmin_closure:
         const Data.Either.$fOrdEither_$cmin_info;
 },
 Data.Either.$fOrdEither_$cmin_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5ftZ,
                       label: Data.Either.$fOrdEither_$cmin_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ftZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5fu0; else goto c5fu1;
       c5fu0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmin_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fu1: // global
           I64[Sp - 32] = block_c5ftS_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fv3; else goto c5ftT;
       u5fv3: // global
           call _c5ftS(R1) args: 0, res: 0, upd: 0;
       c5ftT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ftS() //  [R1]
         { info_tbl: [(c5ftS,
                       label: block_c5ftS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ftS: // global
           _s5eBP::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5ftW; else goto c5ftX;
       c5ftW: // global
           I64[Sp] = block_c5fu4_info;
           _s5eBR::P64 = R1;
           _s5eBS::P64 = P64[R1 + 7];
           R1 = _s5eBP::P64;
           P64[Sp + 16] = _s5eBS::P64;
           P64[Sp + 24] = _s5eBR::P64;
           if (R1 & 7 != 0) goto u5fv1; else goto c5fu6;
       u5fv1: // global
           call _c5fu4(R1) args: 0, res: 0, upd: 0;
       c5fu6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5ftX: // global
           I64[Sp] = block_c5fuu_info;
           _s5eBR::P64 = R1;
           _s5eBX::P64 = P64[R1 + 6];
           R1 = _s5eBP::P64;
           P64[Sp + 8] = _s5eBX::P64;
           P64[Sp + 24] = _s5eBR::P64;
           if (R1 & 7 != 0) goto u5fv2; else goto c5fuw;
       u5fv2: // global
           call _c5fuu(R1) args: 0, res: 0, upd: 0;
       c5fuw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fu4() //  [R1]
         { info_tbl: [(c5fu4,
                       label: block_c5fu4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fu4: // global
           if (R1 & 7 == 1) goto c5fud; else goto u5fuZ;
       c5fud: // global
           _s5eBN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5fua_info;
           R2 = _s5eBN::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5fuZ: // global
           Sp = Sp + 24;
           call _c5fuR() args: 0, res: 0, upd: 0;
     }
 },
 _c5fua() //  [R1]
         { info_tbl: [(c5fua,
                       label: block_c5fua_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fua: // global
           if (R1 & 7 == 1) goto c5fuj; else goto u5fv0;
       c5fuj: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5fv0: // global
           Sp = Sp + 16;
           call _c5fuR() args: 0, res: 0, upd: 0;
     }
 },
 _c5fuu() //  [R1]
         { info_tbl: [(c5fuu,
                       label: block_c5fuu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fuu: // global
           if (R1 & 7 == 1) goto u5fuW; else goto c5fuH;
       u5fuW: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5fuN() args: 0, res: 0, upd: 0;
       c5fuH: // global
           _s5eBX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5fuF_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5eBX::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5fuF() //  [R1]
         { info_tbl: [(c5fuF,
                       label: block_c5fuF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fuF: // global
           if (R1 & 7 == 1) goto u5fuX; else goto u5fuY;
       u5fuX: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5fuN() args: 0, res: 0, upd: 0;
       u5fuY: // global
           Sp = Sp + 16;
           call _c5fuR() args: 0, res: 0, upd: 0;
     }
 },
 _c5fuN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fuN: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5fuR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fuR: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.256247898 UTC

[section ""data" . Data.Either.$fOrdEither_closure" {
     Data.Either.$fOrdEither_closure:
         const Data.Either.$fOrdEither_info;
 },
 sat_s5eCd_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fvi,
                       label: sat_s5eCd_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fvi: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmin_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCc_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fvq,
                       label: sat_s5eCc_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fvq: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmax_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCb_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fvy,
                       label: sat_s5eCb_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fvy: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c>=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCa_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fvG,
                       label: sat_s5eCa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fvG: // global
           R5 = R2;
           R4 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC7_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fvO,
                       label: sat_s5eC7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fvO: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC6_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fvW,
                       label: sat_s5eC6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fvW: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC5_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fw4,
                       label: sat_s5eC5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fw4: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$ccompare_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC4_entry() //  [R1]
         { info_tbl: [(c5fwb,
                       label: sat_s5eC4_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fwb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fwc; else goto c5fwd;
       c5fwc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fwd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fOrdEither_$cp1Ord_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_entry() //  [R2, R3]
         { info_tbl: [(c5fwf,
                       label: Data.Either.$fOrdEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fwf: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto c5fwj; else goto c5fwi;
       c5fwj: // global
           HpAlloc = 272;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fwi: // global
           I64[Hp - 264] = sat_s5eCd_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           I64[Hp - 240] = sat_s5eCc_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           I64[Hp - 216] = sat_s5eCb_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           I64[Hp - 192] = sat_s5eCa_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           I64[Hp - 168] = sat_s5eC7_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s5eC6_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s5eC5_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s5eC4_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = Hp - 118;
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = Hp - 166;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 214;
           P64[Hp - 8] = Hp - 238;
           P64[Hp] = Hp - 262;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.260660648 UTC

[section ""data" . Data.Either.either_closure" {
     Data.Either.either_closure:
         const Data.Either.either_info;
 },
 Data.Either.either_entry() //  [R2, R3, R4]
         { info_tbl: [(c5fwv,
                       label: Data.Either.either_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fwv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5fww; else goto c5fwx;
       c5fww: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.either_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fwx: // global
           I64[Sp - 24] = block_c5fwo_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5fwE; else goto c5fwp;
       u5fwE: // global
           call _c5fwo(R1) args: 0, res: 0, upd: 0;
       c5fwp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fwo() //  [R1]
         { info_tbl: [(c5fwo,
                       label: block_c5fwo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fwo: // global
           if (R1 & 7 == 1) goto c5fws; else goto c5fwt;
       c5fws: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c5fwt: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.26555058 UTC

[section ""data" . Data.Either.$wpartitionEithers_closure" {
     Data.Either.$wpartitionEithers_closure:
         const Data.Either.$wpartitionEithers_info;
 },
 eta_s5eCo_entry() //  [R1]
         { info_tbl: [(c5fwW,
                       label: eta_s5eCo_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fwW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5fwX; else goto c5fwY;
       c5fwX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fwY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5fwT_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5fwT() //  [R1, R2]
         { info_tbl: [(c5fwT,
                       label: block_c5fwT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fwT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fx1; else goto c5fx0;
       c5fx1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5fx0: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$wpartitionEithers_entry() //  [R2]
         { info_tbl: [(c5fx6,
                       label: Data.Either.$wpartitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fx6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fx7; else goto c5fx8;
       c5fx7: // global
           R2 = R2;
           R1 = Data.Either.$wpartitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fx8: // global
           I64[Sp - 8] = block_c5fwJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fxC; else goto c5fwK;
       u5fxC: // global
           call _c5fwJ(R1) args: 0, res: 0, upd: 0;
       c5fwK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fwJ() //  [R1]
         { info_tbl: [(c5fwJ,
                       label: block_c5fwJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fwJ: // global
           if (R1 & 7 == 1) goto c5fx3; else goto c5fx4;
       c5fx3: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5fx4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fxe; else goto c5fxd;
       c5fxe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fxd: // global
           _s5eCm::P64 = P64[R1 + 6];
           _s5eCn::P64 = P64[R1 + 14];
           I64[Hp - 16] = eta_s5eCo_info;
           P64[Hp] = _s5eCn::P64;
           I64[Sp - 8] = block_c5fxb_info;
           R1 = _s5eCm::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fxB; else goto c5fxf;
       u5fxB: // global
           call _c5fxb(R1) args: 0, res: 0, upd: 0;
       c5fxf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fxb() //  [R1]
         { info_tbl: [(c5fxb,
                       label: block_c5fxb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fxb: // global
           _c5fwP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5fxn; else goto c5fxw;
       c5fxn: // global
           Hp = Hp + 72;
           _s5eCs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fxz; else goto c5fxp;
       c5fxp: // global
           _s5eCt::P64 = P64[_s5eCs::P64 + 7];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5fwP::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5fwP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eCt::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5fxw: // global
           Hp = Hp + 72;
           _s5eCs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fxz; else goto c5fxy;
       c5fxz: // global
           HpAlloc = 72;
           R1 = _s5eCs::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fxy: // global
           _s5eCD::P64 = P64[_s5eCs::P64 + 6];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5fwP::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5eCD::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5fwP::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.270352471 UTC

[section ""data" . Data.Either.partitionEithers_closure" {
     Data.Either.partitionEithers_closure:
         const Data.Either.partitionEithers_info;
 },
 Data.Either.partitionEithers_entry() //  [R2]
         { info_tbl: [(c5fxK,
                       label: Data.Either.partitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fxK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5fxL; else goto c5fxM;
       c5fxL: // global
           R2 = R2;
           R1 = Data.Either.partitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fxM: // global
           I64[Sp - 8] = block_c5fxH_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5fxH() //  [R1, R2]
         { info_tbl: [(c5fxH,
                       label: block_c5fxH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fxH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fxP; else goto c5fxO;
       c5fxP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5fxO: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.272827829 UTC

[section ""data" . poly_go_r5exd_closure" {
     poly_go_r5exd_closure:
         const poly_go_r5exd_info;
 },
 sat_s5eCX_entry() //  [R1]
         { info_tbl: [(c5fy9,
                       label: sat_s5eCX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fy9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fya; else goto c5fyb;
       c5fya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fyb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5exd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5exd_entry() //  [R2]
         { info_tbl: [(c5fyg,
                       label: poly_go_r5exd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fyg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fyh; else goto u5fyx;
       c5fyh: // global
           R2 = R2;
           R1 = poly_go_r5exd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5fyx: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5fxR() args: 0, res: 0, upd: 0;
     }
 },
 _c5fxR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fxR: // global
           _s5eCR::P64 = P64[Sp];
           I64[Sp] = block_c5fxU_info;
           R1 = _s5eCR::P64;
           if (R1 & 7 != 0) goto u5fyz; else goto c5fxV;
       u5fyz: // global
           call _c5fxU(R1) args: 0, res: 0, upd: 0;
       c5fxV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fxU() //  [R1]
         { info_tbl: [(c5fxU,
                       label: block_c5fxU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fxU: // global
           if (R1 & 7 == 1) goto c5fyd; else goto c5fye;
       c5fyd: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fye: // global
           I64[Sp - 8] = block_c5fy0_info;
           _s5eCU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5eCU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fyA; else goto c5fy1;
       u5fyA: // global
           call _c5fy0(R1) args: 0, res: 0, upd: 0;
       c5fy1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fy0() //  [R1]
         { info_tbl: [(c5fy0,
                       label: block_c5fy0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fy0: // global
           _s5eCU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5fyo; else goto c5fyv;
       c5fyo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fyr; else goto c5fyq;
       c5fyr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fyq: // global
           _s5eCW::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s5eCX_info;
           P64[Hp - 24] = _s5eCU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eCW::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fyv: // global
           P64[Sp + 8] = _s5eCU::P64;
           Sp = Sp + 8;
           call _c5fxR() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.275015713 UTC

[section ""data" . Data.Either.lefts_closure" {
     Data.Either.lefts_closure:
         const Data.Either.lefts_info;
 },
 Data.Either.lefts_entry() //  [R2]
         { info_tbl: [(c5fyH,
                       label: Data.Either.lefts_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fyH: // global
           R2 = R2;
           call poly_go_r5exd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.276514434 UTC

[section ""data" . poly_go1_r5exe_closure" {
     poly_go1_r5exe_closure:
         const poly_go1_r5exe_info;
 },
 sat_s5eD7_entry() //  [R1]
         { info_tbl: [(c5fz4,
                       label: sat_s5eD7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fz4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fz5; else goto c5fz6;
       c5fz5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fz6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5exe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5exe_entry() //  [R2]
         { info_tbl: [(c5fzb,
                       label: poly_go1_r5exe_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fzb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fzc; else goto u5fzr;
       c5fzc: // global
           R2 = R2;
           R1 = poly_go1_r5exe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5fzr: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5fyL() args: 0, res: 0, upd: 0;
     }
 },
 _c5fyL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fyL: // global
           _s5eD0::P64 = P64[Sp];
           I64[Sp] = block_c5fyO_info;
           R1 = _s5eD0::P64;
           if (R1 & 7 != 0) goto u5fzt; else goto c5fyP;
       u5fzt: // global
           call _c5fyO(R1) args: 0, res: 0, upd: 0;
       c5fyP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fyO() //  [R1]
         { info_tbl: [(c5fyO,
                       label: block_c5fyO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fyO: // global
           if (R1 & 7 == 1) goto c5fz8; else goto c5fz9;
       c5fz8: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fz9: // global
           I64[Sp - 8] = block_c5fyU_info;
           _s5eD3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5eD3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fzu; else goto c5fyV;
       u5fzu: // global
           call _c5fyU(R1) args: 0, res: 0, upd: 0;
       c5fyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fyU() //  [R1]
         { info_tbl: [(c5fyU,
                       label: block_c5fyU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fyU: // global
           _s5eD3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5fzk; else goto c5fzm;
       c5fzk: // global
           P64[Sp + 8] = _s5eD3::P64;
           Sp = Sp + 8;
           call _c5fyL() args: 0, res: 0, upd: 0;
       c5fzm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fzp; else goto c5fzo;
       c5fzp: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fzo: // global
           _s5eD6::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5eD7_info;
           P64[Hp - 24] = _s5eD3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eD6::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.278657737 UTC

[section ""data" . Data.Either.rights_closure" {
     Data.Either.rights_closure:
         const Data.Either.rights_info;
 },
 Data.Either.rights_entry() //  [R2]
         { info_tbl: [(c5fzB,
                       label: Data.Either.rights_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fzB: // global
           R2 = R2;
           call poly_go1_r5exe_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.280355986 UTC

[section ""data" . Data.Either.isLeft_closure" {
     Data.Either.isLeft_closure:
         const Data.Either.isLeft_info;
 },
 Data.Either.isLeft_entry() //  [R2]
         { info_tbl: [(c5fzP,
                       label: Data.Either.isLeft_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fzP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5fzQ; else goto c5fzR;
       c5fzQ: // global
           R2 = R2;
           R1 = Data.Either.isLeft_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fzR: // global
           I64[Sp - 8] = block_c5fzI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fzY; else goto c5fzJ;
       u5fzY: // global
           call _c5fzI(R1) args: 0, res: 0, upd: 0;
       c5fzJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fzI() //  [R1]
         { info_tbl: [(c5fzI,
                       label: block_c5fzI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fzI: // global
           if (R1 & 7 == 1) goto c5fzM; else goto c5fzN;
       c5fzM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fzN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.281729852 UTC

[section ""data" . Data.Either.isRight_closure" {
     Data.Either.isRight_closure:
         const Data.Either.isRight_info;
 },
 Data.Either.isRight_entry() //  [R2]
         { info_tbl: [(c5fAa,
                       label: Data.Either.isRight_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fAa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5fAb; else goto c5fAc;
       c5fAb: // global
           R2 = R2;
           R1 = Data.Either.isRight_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fAc: // global
           I64[Sp - 8] = block_c5fA3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fAj; else goto c5fA4;
       u5fAj: // global
           call _c5fA3(R1) args: 0, res: 0, upd: 0;
       c5fA4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fA3() //  [R1]
         { info_tbl: [(c5fA3,
                       label: block_c5fA3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fA3: // global
           if (R1 & 7 == 1) goto c5fA7; else goto c5fA8;
       c5fA7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fA8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.283109318 UTC

[section ""data" . Data.Either.fromLeft_closure" {
     Data.Either.fromLeft_closure:
         const Data.Either.fromLeft_info;
 },
 Data.Either.fromLeft_entry() //  [R2, R3]
         { info_tbl: [(c5fAv,
                       label: Data.Either.fromLeft_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fAv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fAw; else goto c5fAx;
       c5fAw: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromLeft_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fAx: // global
           I64[Sp - 16] = block_c5fAo_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fAE; else goto c5fAp;
       u5fAE: // global
           call _c5fAo(R1) args: 0, res: 0, upd: 0;
       c5fAp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fAo() //  [R1]
         { info_tbl: [(c5fAo,
                       label: block_c5fAo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fAo: // global
           if (R1 & 7 == 1) goto c5fAs; else goto c5fAt;
       c5fAs: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5fAt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.284490166 UTC

[section ""data" . Data.Either.fromRight_closure" {
     Data.Either.fromRight_closure:
         const Data.Either.fromRight_info;
 },
 Data.Either.fromRight_entry() //  [R2, R3]
         { info_tbl: [(c5fAQ,
                       label: Data.Either.fromRight_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fAQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fAR; else goto c5fAS;
       c5fAR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromRight_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fAS: // global
           I64[Sp - 16] = block_c5fAJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fAZ; else goto c5fAK;
       u5fAZ: // global
           call _c5fAJ(R1) args: 0, res: 0, upd: 0;
       c5fAK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fAJ() //  [R1]
         { info_tbl: [(c5fAJ,
                       label: block_c5fAJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fAJ: // global
           if (R1 & 7 == 1) goto c5fAN; else goto c5fAO;
       c5fAN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5fAO: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.285667408 UTC

[section ""cstring" . Data.Either.$trModule4_bytes" {
     Data.Either.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.286197231 UTC

[section ""data" . Data.Either.$trModule3_closure" {
     Data.Either.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.28679213 UTC

[section ""cstring" . Data.Either.$trModule2_bytes" {
     Data.Either.$trModule2_bytes:
         I8[] [68,97,116,97,46,69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.287310759 UTC

[section ""data" . Data.Either.$trModule1_closure" {
     Data.Either.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.2879482 UTC

[section ""data" . Data.Either.$trModule_closure" {
     Data.Either.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Either.$trModule3_closure+1;
         const Data.Either.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.288548462 UTC

[section ""data" . $krep_r5exf_closure" {
     $krep_r5exf_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.289147852 UTC

[section ""data" . $krep1_r5exg_closure" {
     $krep1_r5exg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.289757243 UTC

[section ""cstring" . Data.Either.$tcEither2_bytes" {
     Data.Either.$tcEither2_bytes:
         I8[] [69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.290900019 UTC

[section ""data" . Data.Either.$tcEither1_closure" {
     Data.Either.$tcEither1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tcEither2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.291498385 UTC

[section ""data" . Data.Either.$tcEither_closure" {
     Data.Either.$tcEither_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tcEither1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 16074290893719807138;
         const 14958199358864670905;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.292100879 UTC

[section ""data" . $krep2_r5exh_closure" {
     $krep2_r5exh_closure:
         const :_con_info;
         const $krep_r5exf_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.292688615 UTC

[section ""data" . $krep3_r5exi_closure" {
     $krep3_r5exi_closure:
         const :_con_info;
         const $krep1_r5exg_closure+2;
         const $krep2_r5exh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.293289365 UTC

[section ""data" . $krep4_r5exj_closure" {
     $krep4_r5exj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Either.$tcEither_closure+1;
         const $krep3_r5exi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.293889908 UTC

[section ""data" . Data.Either.$tc'Left1_closure" {
     Data.Either.$tc'Left1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5exg_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.294494599 UTC

[section ""cstring" . Data.Either.$tc'Left3_bytes" {
     Data.Either.$tc'Left3_bytes:
         I8[] [39,76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.295069001 UTC

[section ""data" . Data.Either.$tc'Left2_closure" {
     Data.Either.$tc'Left2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Left3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.295706669 UTC

[section ""data" . Data.Either.$tc'Left_closure" {
     Data.Either.$tc'Left_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Left2_closure+1;
         const Data.Either.$tc'Left1_closure+4;
         const 14915236324383360020;
         const 11027491440201056612;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.296339926 UTC

[section ""data" . Data.Either.$tc'Right1_closure" {
     Data.Either.$tc'Right1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5exf_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.296895494 UTC

[section ""cstring" . Data.Either.$tc'Right3_bytes" {
     Data.Either.$tc'Right3_bytes:
         I8[] [39,82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.297594675 UTC

[section ""data" . Data.Either.$tc'Right2_closure" {
     Data.Either.$tc'Right2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Right3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.298158173 UTC

[section ""data" . Data.Either.$tc'Right_closure" {
     Data.Either.$tc'Right_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Right2_closure+1;
         const Data.Either.$tc'Right1_closure+4;
         const 10395468319011834275;
         const 16371021254350888909;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.299140144 UTC

[section ""data" . Data.Either.Left_closure" {
     Data.Either.Left_closure:
         const Data.Either.Left_info;
 },
 Data.Either.Left_entry() //  [R2]
         { info_tbl: [(c5fB5,
                       label: Data.Either.Left_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fB5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fB9; else goto c5fB8;
       c5fB9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Left_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fB8: // global
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.300822302 UTC

[section ""data" . Data.Either.Right_closure" {
     Data.Either.Right_closure:
         const Data.Either.Right_info;
 },
 Data.Either.Right_entry() //  [R2]
         { info_tbl: [(c5fBf,
                       label: Data.Either.Right_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fBf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fBj; else goto c5fBi;
       c5fBj: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Right_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fBi: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.301859313 UTC

[Data.Either.Left_con_entry() //  [R1]
         { info_tbl: [(c5fBk,
                       label: Data.Either.Left_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,76,101,102,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fBk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.30258748 UTC

[Data.Either.Right_con_entry() //  [R1]
         { info_tbl: [(c5fBm,
                       label: Data.Either.Right_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,82,105,103,104,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fBm: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.303242387 UTC

[section ""relreadonly" . S5eEs_srt" {
     S5eEs_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Either.$fSemigroupEither2_closure;
         const Data.Either.$fSemigroupEither_$cstimes_closure;
         const Data.Either.$fSemigroupEither1_closure;
         const Data.Either.$fShowEither4_closure;
         const Data.Either.$fShowEither2_closure;
         const Data.Either.$w$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshow_closure;
         const Data.Either.$fShowEither_$cshowList_closure;
         const Data.Either.$fShowEither_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Either.$fReadEither_lexeme1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Either.$fReadEither_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Either.$fReadEither1_closure;
         const Data.Either.$fReadEither_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Either.$fReadEither_$creadListPrec_closure;
         const Data.Either.$fReadEither_$creadList_closure;
         const Data.Either.$fReadEither_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.304217238 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:13.305957483 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cfmap_closure" {
     Data.Either.$fApplicativeEither_$cfmap_closure:
         const Data.Either.$fApplicativeEither_$cfmap_info;
 },
 Data.Either.$fApplicativeEither_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(c5fBz,
                       label: Data.Either.$fApplicativeEither_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fBz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fBA; else goto c5fBB;
       c5fBA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fBB: // global
           I64[Sp - 16] = block_c5fBs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fBM; else goto c5fBt;
       u5fBM: // global
           call _c5fBs(R1) args: 0, res: 0, upd: 0;
       c5fBt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fBs() //  [R1]
         { info_tbl: [(c5fBs,
                       label: block_c5fBs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fBs: // global
           if (R1 & 7 == 1) goto c5fBw; else goto c5fBx;
       c5fBw: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fBx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fBL; else goto c5fBK;
       c5fBL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fBK: // global
           _s5exp::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5exp::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.313660884 UTC

[section ""data" . Data.Either.$fFunctorEither_$c<$_closure" {
     Data.Either.$fFunctorEither_$c<$_closure:
         const Data.Either.$fFunctorEither_$c<$_info;
 },
 Data.Either.$fFunctorEither_$c<$_entry() //  [R2, R3]
         { info_tbl: [(c5fCe,
                       label: Data.Either.$fFunctorEither_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fCe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fCf; else goto c5fCg;
       c5fCf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fFunctorEither_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fCg: // global
           I64[Sp - 16] = block_c5fC7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fCq; else goto c5fC8;
       u5fCq: // global
           call _c5fC7(R1) args: 0, res: 0, upd: 0;
       c5fC8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fC7() //  [R1]
         { info_tbl: [(c5fC7,
                       label: block_c5fC7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fC7: // global
           if (R1 & 7 == 1) goto c5fCb; else goto c5fCc;
       c5fCb: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fCc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fCp; else goto c5fCo;
       c5fCp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fCo: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.320199836 UTC

[section ""data" . Data.Either.$fFunctorEither_closure" {
     Data.Either.$fFunctorEither_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Either.$fApplicativeEither_$cfmap_closure+2;
         const Data.Either.$fFunctorEither_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.322142028 UTC

[section ""cstring" . lvl_r5exb_bytes" {
     lvl_r5exb_bytes:
         I8[] [115,116,105,109,101,115,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.324540349 UTC

[section ""data" . Data.Either.$fSemigroupEither1_closure" {
     Data.Either.$fSemigroupEither1_closure:
         const Data.Either.$fSemigroupEither1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither1_entry() //  [R1]
         { info_tbl: [(c5fCQ,
                       label: Data.Either.$fSemigroupEither1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fCQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5fCR; else goto c5fCS;
       c5fCR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fCS: // global
           (_c5fCL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fCL::I64 == 0) goto c5fCN; else goto c5fCM;
       c5fCN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fCM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fCL::I64;
           I64[Sp - 24] = block_c5fCO_info;
           R2 = lvl_r5exb_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5fCO() //  [R1]
         { info_tbl: [(c5fCO,
                       label: block_c5fCO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fCO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.330592334 UTC

[section ""data" . Data.Either.$fSemigroupEither2_closure" {
     Data.Either.$fSemigroupEither2_closure:
         const Data.Either.$fSemigroupEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither2_entry() //  [R1]
         { info_tbl: [(c5fDc,
                       label: Data.Either.$fSemigroupEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fDc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fDd; else goto c5fDe;
       c5fDd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fDe: // global
           (_c5fD9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fD9::I64 == 0) goto c5fDb; else goto c5fDa;
       c5fDb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fDa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fD9::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.33623806 UTC

[section ""data" . Data.Either.$fSemigroupEither_$cstimes_closure" {
     Data.Either.$fSemigroupEither_$cstimes_closure:
         const Data.Either.$fSemigroupEither_$cstimes_info;
         const 0;
 },
 sat_s5exD_entry() //  [R1]
         { info_tbl: [(c5fDA,
                       label: sat_s5exD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fDA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fDB; else goto c5fDC;
       c5fDB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fDC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5fDy_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5fDy() //  [R1]
         { info_tbl: [(c5fDy,
                       label: block_c5fDy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fDy: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Either.$fSemigroupEither2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Either.$fSemigroupEither_$cstimes_entry() //  [R2, R3, R4]
         { info_tbl: [(c5fDG,
                       label: Data.Either.$fSemigroupEither_$cstimes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fDG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5fDI; else goto c5fDJ;
       c5fDI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$cstimes_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fDJ: // global
           I64[Sp - 24] = block_c5fDq_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5fDq() //  [R1]
         { info_tbl: [(c5fDq,
                       label: block_c5fDq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fDq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fDM; else goto c5fDL;
       c5fDM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fDL: // global
           I64[Hp - 16] = sat_s5exD_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5fDH_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5fDH() //  [R1]
         { info_tbl: [(c5fDH,
                       label: block_c5fDH_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fDH: // global
           _s5exy::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5fDQ_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5exy::P64;
           Sp = Sp - 8;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5fDQ() //  [R1]
         { info_tbl: [(c5fDQ,
                       label: block_c5fDQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fDQ: // global
           if (R1 & 7 == 1) goto c5fDX; else goto c5fE1;
       c5fDX: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fE1: // global
           R1 = Data.Either.$fSemigroupEither1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.349901451 UTC

[section ""data" . Data.Either.$fSemigroupEither_$c<>_closure" {
     Data.Either.$fSemigroupEither_$c<>_closure:
         const Data.Either.$fSemigroupEither_$c<>_info;
 },
 Data.Either.$fSemigroupEither_$c<>_entry() //  [R2, R3]
         { info_tbl: [(c5fEF,
                       label: Data.Either.$fSemigroupEither_$c<>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fEF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fEG; else goto c5fEH;
       c5fEG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fEH: // global
           I64[Sp - 16] = block_c5fEy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fEO; else goto c5fEz;
       u5fEO: // global
           call _c5fEy(R1) args: 0, res: 0, upd: 0;
       c5fEz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fEy() //  [R1]
         { info_tbl: [(c5fEy,
                       label: block_c5fEy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fEy: // global
           if (R1 & 7 == 1) goto c5fEC; else goto c5fED;
       c5fEC: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fED: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.356853176 UTC

[section ""data" . Data.Either.$fSemigroupEither3_closure" {
     Data.Either.$fSemigroupEither3_closure:
         const Data.Either.$fSemigroupEither3_info;
 },
 Data.Either.$fSemigroupEither3_entry() //  [R2, R3]
         { info_tbl: [(c5fFf,
                       label: Data.Either.$fSemigroupEither3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fFf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5fFg; else goto u5fFB;
       c5fFg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5fFB: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5fF5() args: 0, res: 0, upd: 0;
     }
 },
 _c5fF5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fF5: // global
           I64[Sp - 8] = block_c5fF8_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fFD; else goto c5fF9;
       u5fFD: // global
           call _c5fF8(R1) args: 0, res: 0, upd: 0;
       c5fF9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fF8() //  [R1]
         { info_tbl: [(c5fF8,
                       label: block_c5fF8_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fF8: // global
           _s5exK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5fFc; else goto c5fFd;
       c5fFc: // global
           R1 = _s5exK::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fFd: // global
           I64[Sp] = block_c5fFn_info;
           _s5exN::P64 = P64[R1 + 6];
           _s5exO::P64 = P64[R1 + 14];
           R1 = _s5exK::P64;
           P64[Sp + 8] = _s5exO::P64;
           P64[Sp + 16] = _s5exN::P64;
           if (R1 & 7 != 0) goto u5fFE; else goto c5fFp;
       u5fFE: // global
           call _c5fFn(R1) args: 0, res: 0, upd: 0;
       c5fFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fFn() //  [R1]
         { info_tbl: [(c5fFn,
                       label: block_c5fFn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fFn: // global
           if (R1 & 7 == 1) goto c5fFv; else goto c5fFz;
       c5fFv: // global
           _s5exL::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s5exL::P64;
           Sp = Sp + 8;
           call _c5fF5() args: 0, res: 0, upd: 0;
       c5fFz: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.371992018 UTC

[section ""data" . Data.Either.$fSemigroupEither_$csconcat_closure" {
     Data.Either.$fSemigroupEither_$csconcat_closure:
         const Data.Either.$fSemigroupEither_$csconcat_info;
 },
 Data.Either.$fSemigroupEither_$csconcat_entry() //  [R2]
         { info_tbl: [(c5fGc,
                       label: Data.Either.$fSemigroupEither_$csconcat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fGc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5fGd; else goto c5fGe;
       c5fGd: // global
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fGe: // global
           I64[Sp - 8] = block_c5fG9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5fGi; else goto c5fGa;
       u5fGi: // global
           call _c5fG9(R1) args: 0, res: 0, upd: 0;
       c5fGa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fG9() //  [R1]
         { info_tbl: [(c5fG9,
                       label: block_c5fG9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fG9: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Either.$fSemigroupEither3_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.37875732 UTC

[section ""data" . Data.Either.$fSemigroupEither_closure" {
     Data.Either.$fSemigroupEither_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Either.$fSemigroupEither_$c<>_closure+2;
         const Data.Either.$fSemigroupEither_$csconcat_closure+1;
         const Data.Either.$fSemigroupEither_$cstimes_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.381351517 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*>_closure" {
     Data.Either.$fApplicativeEither_$c<*>_closure:
         const Data.Either.$fApplicativeEither_$c<*>_info;
 },
 Data.Either.$fApplicativeEither_$c<*>_entry() //  [R2, R3]
         { info_tbl: [(c5fGE,
                       label: Data.Either.$fApplicativeEither_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fGE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fGF; else goto c5fGG;
       c5fGF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fGG: // global
           I64[Sp - 16] = block_c5fGx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fGN; else goto c5fGy;
       u5fGN: // global
           call _c5fGx(R1) args: 0, res: 0, upd: 0;
       c5fGy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fGx() //  [R1]
         { info_tbl: [(c5fGx,
                       label: block_c5fGx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fGx: // global
           if (R1 & 7 == 1) goto c5fGB; else goto c5fGC;
       c5fGB: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fGC: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.388942247 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cliftA2_closure" {
     Data.Either.$fApplicativeEither_$cliftA2_closure:
         const Data.Either.$fApplicativeEither_$cliftA2_info;
 },
 ds_s5ey3_entry() //  [R1]
         { info_tbl: [(c5fHg,
                       label: ds_s5ey3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fHg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fHh; else goto c5fHi;
       c5fHh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fHi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5fH9_info;
           _s5ey1::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5ey1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fHt; else goto c5fHa;
       u5fHt: // global
           call _c5fH9(R1) args: 0, res: 0, upd: 0;
       c5fHa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5fH9() //  [R1]
         { info_tbl: [(c5fH9,
                       label: block_c5fH9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fH9: // global
           if (R1 & 7 == 1) goto c5fHd; else goto c5fHe;
       c5fHd: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c5fHe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fHs; else goto c5fHr;
       c5fHs: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5fHr: // global
           _s5ey6::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5ey6::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyc_entry() //  [R1, R2]
         { info_tbl: [(c5fHG,
                       label: sat_s5eyc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fHG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fHH; else goto c5fHI;
       c5fHH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fHI: // global
           I64[Sp - 16] = block_c5fHz_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fHP; else goto c5fHA;
       u5fHP: // global
           call _c5fHz(R1) args: 0, res: 0, upd: 0;
       c5fHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fHz() //  [R1]
         { info_tbl: [(c5fHz,
                       label: block_c5fHz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fHz: // global
           if (R1 & 7 == 1) goto c5fHD; else goto c5fHE;
       c5fHD: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fHE: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fApplicativeEither_$cliftA2_entry() //  [R2, R3]
         { info_tbl: [(c5fHQ,
                       label: Data.Either.$fApplicativeEither_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fHQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5fHU; else goto c5fHT;
       c5fHU: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fHT: // global
           I64[Hp - 40] = ds_s5ey3_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5eyc_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.402591865 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c*>_closure" {
     Data.Either.$fApplicativeEither_$c*>_closure:
         const Data.Either.$fApplicativeEither_$c*>_info;
 },
 Data.Either.$fApplicativeEither_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c5fID,
                       label: Data.Either.$fApplicativeEither_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fID: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fIE; else goto c5fIF;
       c5fIE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fIF: // global
           I64[Sp - 16] = block_c5fIw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fIM; else goto c5fIx;
       u5fIM: // global
           call _c5fIw(R1) args: 0, res: 0, upd: 0;
       c5fIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fIw() //  [R1]
         { info_tbl: [(c5fIw,
                       label: block_c5fIw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fIw: // global
           if (R1 & 7 == 1) goto c5fIA; else goto c5fIB;
       c5fIA: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fIB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.409914648 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*_closure" {
     Data.Either.$fApplicativeEither_$c<*_closure:
         const Data.Either.$fApplicativeEither_$c<*_info;
 },
 Data.Either.$fApplicativeEither_$c<*_entry() //  [R2, R3]
         { info_tbl: [(c5fJd,
                       label: Data.Either.$fApplicativeEither_$c<*_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fJd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fJe; else goto c5fJf;
       c5fJe: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fJf: // global
           I64[Sp - 16] = block_c5fJ6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fJD; else goto c5fJ7;
       u5fJD: // global
           call _c5fJ6(R1) args: 0, res: 0, upd: 0;
       c5fJ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fJ6() //  [R1]
         { info_tbl: [(c5fJ6,
                       label: block_c5fJ6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fJ6: // global
           if (R1 & 7 == 1) goto u5fJz; else goto c5fJb;
       u5fJz: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _c5fJx() args: 0, res: 0, upd: 0;
       c5fJb: // global
           I64[Sp] = block_c5fJl_info;
           _s5eyk::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5eyk::P64;
           if (R1 & 7 != 0) goto u5fJB; else goto c5fJn;
       u5fJB: // global
           call _c5fJl(R1) args: 0, res: 0, upd: 0;
       c5fJn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fJl() //  [R1]
         { info_tbl: [(c5fJl,
                       label: block_c5fJl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fJl: // global
           if (R1 & 7 == 1) goto c5fJt; else goto u5fJA;
       c5fJt: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5fJA: // global
           Sp = Sp + 8;
           call _c5fJx() args: 0, res: 0, upd: 0;
     }
 },
 _c5fJx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fJx: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.419121813 UTC

[section ""data" . Data.Either.$fApplicativeEither_closure" {
     Data.Either.$fApplicativeEither_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Either.$fFunctorEither_closure+1;
         const Data.Either.Right_closure+1;
         const Data.Either.$fApplicativeEither_$c<*>_closure+2;
         const Data.Either.$fApplicativeEither_$cliftA2_closure+2;
         const Data.Either.$fApplicativeEither_$c*>_closure+2;
         const Data.Either.$fApplicativeEither_$c<*_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.421654745 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>=_closure" {
     Data.Either.$fMonadEither_$c>>=_closure:
         const Data.Either.$fMonadEither_$c>>=_info;
 },
 Data.Either.$fMonadEither_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5fKe,
                       label: Data.Either.$fMonadEither_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fKe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fKf; else goto c5fKg;
       c5fKf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fMonadEither_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fKg: // global
           I64[Sp - 16] = block_c5fK7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5fKn; else goto c5fK8;
       u5fKn: // global
           call _c5fK7(R1) args: 0, res: 0, upd: 0;
       c5fK8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fK7() //  [R1]
         { info_tbl: [(c5fK7,
                       label: block_c5fK7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fK7: // global
           if (R1 & 7 == 1) goto c5fKb; else goto c5fKc;
       c5fKb: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5fKc: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.42877635 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>_closure" {
     Data.Either.$fMonadEither_$c>>_closure:
         const Data.Either.$fMonadEither_$c>>_info;
 },
 Data.Either.$fMonadEither_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5fKF,
                       label: Data.Either.$fMonadEither_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fKF: // global
           R3 = R3;
           R2 = R2;
           call Data.Either.$fApplicativeEither_$c*>_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.432528497 UTC

[section ""data" . lvl1_r5exc_closure" {
     lvl1_r5exc_closure:
         const lvl1_r5exc_info;
         const 0;
 },
 lvl1_r5exc_entry() //  [R2]
         { info_tbl: [(c5fKQ,
                       label: lvl1_r5exc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fKQ: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.43766961 UTC

[section ""data" . Data.Either.$fMonadEither_closure" {
     Data.Either.$fMonadEither_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Either.$fApplicativeEither_closure+1;
         const Data.Either.$fMonadEither_$c>>=_closure+2;
         const Data.Either.$fMonadEither_$c>>_closure+2;
         const Data.Either.Right_closure+1;
         const lvl1_r5exc_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.440547133 UTC

[section ""cstring" . Data.Either.$fShowEither5_bytes" {
     Data.Either.$fShowEither5_bytes:
         I8[] [76,101,102,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.443114795 UTC

[section ""data" . Data.Either.$fShowEither4_closure" {
     Data.Either.$fShowEither4_closure:
         const Data.Either.$fShowEither4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither4_entry() //  [R1]
         { info_tbl: [(c5fL5,
                       label: Data.Either.$fShowEither4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fL5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fL6; else goto c5fL7;
       c5fL6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fL7: // global
           (_c5fL2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fL2::I64 == 0) goto c5fL4; else goto c5fL3;
       c5fL4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fL3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fL2::I64;
           R2 = Data.Either.$fShowEither5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.447586345 UTC

[section ""data" . Data.Either.$fReadEither4_closure" {
     Data.Either.$fReadEither4_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.449318628 UTC

[section ""cstring" . Data.Either.$fShowEither3_bytes" {
     Data.Either.$fShowEither3_bytes:
         I8[] [82,105,103,104,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.451894944 UTC

[section ""data" . Data.Either.$fShowEither2_closure" {
     Data.Either.$fShowEither2_closure:
         const Data.Either.$fShowEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither2_entry() //  [R1]
         { info_tbl: [(c5fLn,
                       label: Data.Either.$fShowEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fLn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fLo; else goto c5fLp;
       c5fLo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fLp: // global
           (_c5fLk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fLk::I64 == 0) goto c5fLm; else goto c5fLl;
       c5fLm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fLl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fLk::I64;
           R2 = Data.Either.$fShowEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.459688724 UTC

[section ""data" . Data.Either.$w$cshowsPrec_closure" {
     Data.Either.$w$cshowsPrec_closure:
         const Data.Either.$w$cshowsPrec_info;
         const 0;
 },
 Data.Either.$w$cshowsPrec_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fLy: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5eyC_entry() //  [R1]
         { info_tbl: [(c5fLL,
                       label: g_s5eyC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fLL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5fLM; else goto c5fLN;
       c5fLM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fLN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5eyF_entry() //  [R1]
         { info_tbl: [(c5fM0,
                       label: sat_s5eyF_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fM0: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyG_entry() //  [R1, R2]
         { info_tbl: [(c5fM3,
                       label: sat_s5eyG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fM3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fM7; else goto c5fM6;
       c5fM7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fM6: // global
           _s5eyC::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5eyF_info;
           P64[Hp - 8] = _s5eyC::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyJ_entry() //  [R1]
         { info_tbl: [(c5fMn,
                       label: sat_s5eyJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fMn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fMr; else goto c5fMq;
       c5fMr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fMq: // global
           _s5eyC::P64 = P64[R1 + 16];
           _s5eyH::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5eyH::P64;
           R2 = Hp - 14;
           R1 = _s5eyC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyK_entry() //  [R1]
         { info_tbl: [(c5fMs,
                       label: sat_s5eyK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fMs: // global
           _s5eyK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5fMt; else goto c5fMu;
       c5fMu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fMw; else goto c5fMv;
       c5fMw: // global
           HpAlloc = 32;
           goto c5fMt;
       c5fMt: // global
           R1 = _s5eyK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fMv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5eyK::P64;
           _s5eyC::P64 = P64[_s5eyK::P64 + 16];
           _s5eyH::P64 = P64[_s5eyK::P64 + 24];
           I64[Hp - 24] = sat_s5eyJ_info;
           P64[Hp - 8] = _s5eyC::P64;
           P64[Hp] = _s5eyH::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyL_entry() //  [R1, R2]
         { info_tbl: [(c5fMy,
                       label: sat_s5eyL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fMy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5fMC; else goto c5fMB;
       c5fMC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fMB: // global
           _s5eyC::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5eyK_info;
           P64[Hp - 32] = _s5eyC::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5eyN_entry() //  [R1]
         { info_tbl: [(c5fMJ,
                       label: g_s5eyN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fMJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5fMK; else goto c5fML;
       c5fMK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5eyQ_entry() //  [R1]
         { info_tbl: [(c5fMY,
                       label: sat_s5eyQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fMY: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyR_entry() //  [R1, R2]
         { info_tbl: [(c5fN1,
                       label: sat_s5eyR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fN1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fN5; else goto c5fN4;
       c5fN5: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fN4: // global
           _s5eyN::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5eyQ_info;
           P64[Hp - 8] = _s5eyN::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyU_entry() //  [R1]
         { info_tbl: [(c5fNl,
                       label: sat_s5eyU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fNl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fNp; else goto c5fNo;
       c5fNp: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fNo: // global
           _s5eyN::P64 = P64[R1 + 16];
           _s5eyS::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5eyS::P64;
           R2 = Hp - 14;
           R1 = _s5eyN::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eyV_entry() //  [R1]
         { info_tbl: [(c5fNq,
                       label: sat_s5eyV_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fNq: // global
           _s5eyV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5fNr; else goto c5fNs;
       c5fNs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fNu; else goto c5fNt;
       c5fNu: // global
           HpAlloc = 32;
           goto c5fNr;
       c5fNr: // global
           R1 = _s5eyV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fNt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5eyV::P64;
           _s5eyN::P64 = P64[_s5eyV::P64 + 16];
           _s5eyS::P64 = P64[_s5eyV::P64 + 24];
           I64[Hp - 24] = sat_s5eyU_info;
           P64[Hp - 8] = _s5eyN::P64;
           P64[Hp] = _s5eyS::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eyW_entry() //  [R1, R2]
         { info_tbl: [(c5fNw,
                       label: sat_s5eyW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fNw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5fNA; else goto c5fNz;
       c5fNA: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fNz: // global
           _s5eyN::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5eyV_info;
           P64[Hp - 32] = _s5eyN::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fNF,
                       label: Data.Either.$w$cshowsPrec_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fNF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fNG; else goto c5fNH;
       c5fNG: // global
           R1 = Data.Either.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5fNH: // global
           I64[Sp - 32] = block_c5fLC_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fNU; else goto c5fLD;
       u5fNU: // global
           call _c5fLC(R1) args: 0, res: 0, upd: 0;
       c5fLD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fLC() //  [R1]
         { info_tbl: [(c5fLC,
                       label: block_c5fLC_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fLC: // global
           _s5eyy::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5fNC; else goto c5fND;
       c5fNC: // global
           Hp = Hp + 48;
           _s5eyA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fNQ; else goto c5fNJ;
       c5fNJ: // global
           _s5eyB::P64 = P64[_s5eyA::P64 + 7];
           I64[Hp - 40] = g_s5eyC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5eyB::P64;
           _c5fLH::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5eyy::I64, 11)) goto c5fNM; else goto c5fNN;
       c5fNM: // global
           I64[Hp - 8] = sat_s5eyG_info;
           P64[Hp] = _c5fLH::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fNN: // global
           I64[Hp - 8] = sat_s5eyL_info;
           P64[Hp] = _c5fLH::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fND: // global
           Hp = Hp + 48;
           _s5eyA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fNQ; else goto c5fNP;
       c5fNQ: // global
           HpAlloc = 48;
           R1 = _s5eyA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fNP: // global
           _s5eyM::P64 = P64[_s5eyA::P64 + 6];
           I64[Hp - 40] = g_s5eyN_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _s5eyM::P64;
           _c5fMF::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5eyy::I64, 11)) goto c5fNS; else goto c5fNT;
       c5fNS: // global
           I64[Hp - 8] = sat_s5eyR_info;
           P64[Hp] = _c5fMF::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fNT: // global
           I64[Hp - 8] = sat_s5eyW_info;
           P64[Hp] = _c5fMF::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.496712394 UTC

[section ""data" . Data.Either.$fShowEither_$cshowsPrec_closure" {
     Data.Either.$fShowEither_$cshowsPrec_closure:
         const Data.Either.$fShowEither_$cshowsPrec_info;
         const 0;
 },
 Data.Either.$fShowEither_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fP5,
                       label: Data.Either.$fShowEither_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fP5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fP6; else goto c5fP7;
       c5fP6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fP7: // global
           I64[Sp - 32] = block_c5fP2_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fPb; else goto c5fP3;
       u5fPb: // global
           call _c5fP2(R1) args: 0, res: 0, upd: 0;
       c5fP3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fP2() //  [R1]
         { info_tbl: [(c5fP2,
                       label: block_c5fP2_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fP2: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.504007637 UTC

[section ""data" . Data.Either.$fShowEither_$cshow_closure" {
     Data.Either.$fShowEither_$cshow_closure:
         const Data.Either.$fShowEither_$cshow_info;
         const 0;
 },
 sat_s5ez8_entry() //  [R1]
         { info_tbl: [(c5fPy,
                       label: sat_s5ez8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fPy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fPz; else goto c5fPA;
       c5fPz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fPA: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 sat_s5eza_entry() //  [R1]
         { info_tbl: [(c5fPH,
                       label: sat_s5eza_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fPH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fPI; else goto c5fPJ;
       c5fPI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fPJ: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshow_entry() //  [R2, R3, R4]
         { info_tbl: [(c5fPO,
                       label: Data.Either.$fShowEither_$cshow_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fPO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5fPP; else goto c5fPQ;
       c5fPP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fPQ: // global
           I64[Sp - 24] = block_c5fPp_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5fPX; else goto c5fPq;
       u5fPX: // global
           call _c5fPp(R1) args: 0, res: 0, upd: 0;
       c5fPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fPp() //  [R1]
         { info_tbl: [(c5fPp,
                       label: block_c5fPp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fPp: // global
           if (R1 & 7 == 1) goto c5fPL; else goto c5fPM;
       c5fPL: // global
           Hp = Hp + 32;
           _s5ez6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fPW; else goto c5fPS;
       c5fPS: // global
           _s5ez7::P64 = P64[_s5ez6::P64 + 7];
           I64[Hp - 24] = sat_s5ez8_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5ez7::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c5fPM: // global
           Hp = Hp + 32;
           _s5ez6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5fPW; else goto c5fPV;
       c5fPW: // global
           HpAlloc = 32;
           R1 = _s5ez6::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fPV: // global
           _s5ez9::P64 = P64[_s5ez6::P64 + 6];
           I64[Hp - 24] = sat_s5eza_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5ez9::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.515266697 UTC

[section ""data" . Data.Either.$fShowEither1_closure" {
     Data.Either.$fShowEither1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.518031272 UTC

[section ""data" . Data.Either.$fShowEither_$cshowList_closure" {
     Data.Either.$fShowEither_$cshowList_closure:
         const Data.Either.$fShowEither_$cshowList_info;
         const 0;
 },
 sat_s5ezg_entry() //  [R1, R2]
         { info_tbl: [(c5fQv,
                       label: sat_s5ezg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fQv: // global
           R5 = R2;
           R4 = 0;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshowList_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fQy,
                       label: Data.Either.$fShowEither_$cshowList_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fQy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fQC; else goto c5fQB;
       c5fQC: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fQB: // global
           I64[Hp - 16] = sat_s5ezg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5ezd::P64 = R4;
           R4 = R5;
           R3 = _s5ezd::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.524905991 UTC

[section ""data" . Data.Either.$fShowEither_closure" {
     Data.Either.$fShowEither_closure:
         const Data.Either.$fShowEither_info;
         const 0;
 },
 sat_s5ezl_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fQT,
                       label: sat_s5ezl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fQT: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowList_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezk_entry() //  [R1, R2]
         { info_tbl: [(c5fR1,
                       label: sat_s5ezk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fR1: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fShowEither_$cshow_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezj_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fR9,
                       label: sat_s5ezj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fR9: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowsPrec_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_entry() //  [R2, R3]
         { info_tbl: [(c5fRd,
                       label: Data.Either.$fShowEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fRd: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5fRh; else goto c5fRg;
       c5fRh: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fRg: // global
           I64[Hp - 96] = sat_s5ezl_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_s5ezk_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_s5ezj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.534787307 UTC

[section ""cstring" . Data.Either.$fReadEither3_bytes" {
     Data.Either.$fReadEither3_bytes:
         I8[] [76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.536887284 UTC

[section ""data" . Data.Either.$fReadEither2_closure" {
     Data.Either.$fReadEither2_closure:
         const Data.Either.$fReadEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither2_entry() //  [R1]
         { info_tbl: [(c5fRG,
                       label: Data.Either.$fReadEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fRG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fRH; else goto c5fRI;
       c5fRH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fRI: // global
           (_c5fRD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fRD::I64 == 0) goto c5fRF; else goto c5fRE;
       c5fRF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fRE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fRD::I64;
           R2 = Data.Either.$fReadEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.542251578 UTC

[section ""data" . Data.Either.$fReadEither_lexeme_closure" {
     Data.Either.$fReadEither_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.543968588 UTC

[section ""cstring" . Data.Either.$fReadEither6_bytes" {
     Data.Either.$fReadEither6_bytes:
         I8[] [82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.546162959 UTC

[section ""data" . Data.Either.$fReadEither5_closure" {
     Data.Either.$fReadEither5_closure:
         const Data.Either.$fReadEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither5_entry() //  [R1]
         { info_tbl: [(c5fRY,
                       label: Data.Either.$fReadEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fRY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fRZ; else goto c5fS0;
       c5fRZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fS0: // global
           (_c5fRV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5fRV::I64 == 0) goto c5fRX; else goto c5fRW;
       c5fRX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5fRW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5fRV::I64;
           R2 = Data.Either.$fReadEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.550478005 UTC

[section ""data" . Data.Either.$fReadEither_lexeme1_closure" {
     Data.Either.$fReadEither_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.554707641 UTC

[section ""data" . Data.Either.$fReadEither1_closure" {
     Data.Either.$fReadEither1_closure:
         const Data.Either.$fReadEither1_info;
         const 0;
 },
 sat_s5ezz_entry() //  [R1, R2]
         { info_tbl: [(c5fSG,
                       label: sat_s5ezz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fSG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fSK; else goto c5fSJ;
       c5fSK: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fSJ: // global
           _s5ezr::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s5ezr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezA_entry() //  [R1, R2]
         { info_tbl: [(c5fSL,
                       label: sat_s5ezA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fSL: // global
           _s5ezw::P64 = R2;
           _s5ezA::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5fSM; else goto c5fSN;
       c5fSN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fSP; else goto c5fSO;
       c5fSP: // global
           HpAlloc = 16;
           goto c5fSM;
       c5fSM: // global
           R2 = _s5ezw::P64;
           R1 = _s5ezA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fSO: // global
           _s5ezn::P64 = P64[_s5ezA::P64 + 7];
           _s5ezr::P64 = P64[_s5ezA::P64 + 15];
           I64[Hp - 8] = sat_s5ezz_info;
           P64[Hp] = _s5ezr::P64;
           R2 = _s5ezn::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 karg_s5ezu_entry() //  [R1]
         { info_tbl: [(c5fST,
                       label: karg_s5ezu_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fST: // global
           _s5ezu::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5fSU; else goto c5fSV;
       c5fSV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fSX; else goto c5fSW;
       c5fSX: // global
           HpAlloc = 24;
           goto c5fSU;
       c5fSU: // global
           R1 = _s5ezu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fSW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ezu::P64;
           if (%MO_S_Gt_W64(I64[_s5ezu::P64 + 32],
                            10)) goto c5fSR; else goto c5fSS;
       c5fSR: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5fSS: // global
           _s5ezn::P64 = P64[_s5ezu::P64 + 16];
           _s5ezr::P64 = P64[_s5ezu::P64 + 24];
           I64[Hp - 16] = sat_s5ezA_info;
           P64[Hp - 8] = _s5ezn::P64;
           P64[Hp] = _s5ezr::P64;
           I64[Sp - 24] = block_c5fSY_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme1_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5fSY() //  [R1]
         { info_tbl: [(c5fSY,
                       label: block_c5fSY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fSY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fT3; else goto c5fT2;
       c5fT3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5fT2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5ezH_entry() //  [R1, R2]
         { info_tbl: [(c5fTj,
                       label: sat_s5ezH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fTj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fTn; else goto c5fTm;
       c5fTn: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fTm: // global
           _s5ezr::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _s5ezr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezI_entry() //  [R1, R2]
         { info_tbl: [(c5fTo,
                       label: sat_s5ezI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fTo: // global
           _s5ezE::P64 = R2;
           _s5ezI::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5fTp; else goto c5fTq;
       c5fTq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fTs; else goto c5fTr;
       c5fTs: // global
           HpAlloc = 16;
           goto c5fTp;
       c5fTp: // global
           R2 = _s5ezE::P64;
           R1 = _s5ezI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5fTr: // global
           _s5ezm::P64 = P64[_s5ezI::P64 + 7];
           _s5ezr::P64 = P64[_s5ezI::P64 + 15];
           I64[Hp - 8] = sat_s5ezH_info;
           P64[Hp] = _s5ezr::P64;
           R2 = _s5ezm::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5ezM_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fTt,
                       label: sat_s5ezM_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fTt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fTu; else goto c5fTv;
       c5fTu: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fTv: // global
           I64[Sp - 32] = block_c5fSi_info;
           _s5ezm::P64 = P64[R1 + 6];
           _s5ezn::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s5ezm::P64;
           P64[Sp - 16] = _s5ezn::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fTI; else goto c5fSj;
       u5fTI: // global
           call _c5fSi(R1) args: 0, res: 0, upd: 0;
       c5fSj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fSi() //  [R1]
         { info_tbl: [(c5fSi,
                       label: block_c5fSi_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fSi: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5fTy; else goto c5fTx;
       c5fTy: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fTx: // global
           _s5ezt::I64 = I64[R1 + 7];
           I64[Hp - 56] = karg_s5ezu_info;
           P64[Hp - 40] = P64[Sp + 16];
           _s5ezr::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5ezr::P64;
           I64[Hp - 24] = _s5ezt::I64;
           _c5fSn::P64 = Hp - 56;
           if (%MO_S_Gt_W64(_s5ezt::I64, 10)) goto c5fTA; else goto c5fTE;
       c5fTA: // global
           Hp = Hp - 24;
           R3 = _c5fSn::P64;
           R2 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
       c5fTE: // global
           I64[Hp - 16] = sat_s5ezI_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5ezr::P64;
           I64[Sp + 16] = block_c5fTB_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme_closure+4;
           P64[Sp + 24] = _c5fSn::P64;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5fTB() //  [R1]
         { info_tbl: [(c5fTB,
                       label: block_c5fTB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fTB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5fTH; else goto c5fTG;
       c5fTH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5fTG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fTJ,
                       label: Data.Either.$fReadEither1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fTJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fTN; else goto c5fTM;
       c5fTN: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fTM: // global
           I64[Hp - 16] = sat_s5ezM_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5ezo::P64 = R4;
           R4 = R5;
           R3 = _s5ezo::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.581559231 UTC

[section ""data" . Data.Either.$fReadEither_$creadsPrec_closure" {
     Data.Either.$fReadEither_$creadsPrec_closure:
         const Data.Either.$fReadEither_$creadsPrec_info;
         const 0;
 },
 sat_s5ezQ_entry() //  [R1]
         { info_tbl: [(c5fUC,
                       label: sat_s5ezQ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fUC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fUD; else goto c5fUE;
       c5fUD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fUE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5fUF,
                       label: Data.Either.$fReadEither_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fUF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5fUJ; else goto c5fUI;
       c5fUJ: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fUI: // global
           I64[Hp - 32] = sat_s5ezQ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.588512069 UTC

[section ""data" . Data.Either.$fReadEither_$creadListPrec_closure" {
     Data.Either.$fReadEither_$creadListPrec_closure:
         const Data.Either.$fReadEither_$creadListPrec_info;
         const 0;
 },
 sat_s5ezT_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fV1,
                       label: sat_s5ezT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fV1: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_$creadListPrec_entry() //  [R2, R3]
         { info_tbl: [(c5fV4,
                       label: Data.Either.$fReadEither_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fV4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fV8; else goto c5fV7;
       c5fV8: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fV7: // global
           I64[Hp - 16] = sat_s5ezT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.595899968 UTC

[section ""data" . Data.Either.$fReadEither_$creadList_closure" {
     Data.Either.$fReadEither_$creadList_closure:
         const Data.Either.$fReadEither_$creadList_info;
         const 0;
 },
 sat_s5ezW_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fVt,
                       label: sat_s5ezW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fVt: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5ezX_entry() //  [R1]
         { info_tbl: [(c5fVw,
                       label: sat_s5ezX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fVw: // global
           _s5ezX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5fVx; else goto c5fVy;
       c5fVy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5fVA; else goto c5fVz;
       c5fVA: // global
           HpAlloc = 24;
           goto c5fVx;
       c5fVx: // global
           R1 = _s5ezX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fVz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ezX::P64;
           _s5ezU::P64 = P64[_s5ezX::P64 + 16];
           _s5ezV::P64 = P64[_s5ezX::P64 + 24];
           I64[Hp - 16] = sat_s5ezW_info;
           P64[Hp - 8] = _s5ezU::P64;
           P64[Hp] = _s5ezV::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadList_entry() //  [R2, R3]
         { info_tbl: [(c5fVB,
                       label: Data.Either.$fReadEither_$creadList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fVB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5fVF; else goto c5fVE;
       c5fVF: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fVE: // global
           I64[Hp - 24] = sat_s5ezX_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.605103302 UTC

[section ""data" . Data.Either.$fReadEither_closure" {
     Data.Either.$fReadEither_closure:
         const Data.Either.$fReadEither_info;
         const 0;
 },
 sat_s5eA3_entry() //  [R1]
         { info_tbl: [(c5fVZ,
                       label: sat_s5eA3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fVZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fW0; else goto c5fW1;
       c5fW0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fW1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadListPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eA2_entry() //  [R1, R2, R3]
         { info_tbl: [(c5fW7,
                       label: sat_s5eA2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fW7: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eA1_entry() //  [R1]
         { info_tbl: [(c5fWe,
                       label: sat_s5eA1_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fWe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5fWf; else goto c5fWg;
       c5fWf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5fWg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadList_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eA0_entry() //  [R1, R2]
         { info_tbl: [(c5fWm,
                       label: sat_s5eA0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fWm: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fReadEither_$creadsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_entry() //  [R2, R3]
         { info_tbl: [(c5fWq,
                       label: Data.Either.$fReadEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fWq: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5fWu; else goto c5fWt;
       c5fWu: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fWt: // global
           I64[Hp - 144] = sat_s5eA3_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s5eA2_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s5eA1_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s5eA0_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.619486286 UTC

[section ""data" . Data.Either.$fOrdEither_$c<_closure" {
     Data.Either.$fOrdEither_$c<_closure:
         const Data.Either.$fOrdEither_$c<_info;
 },
 Data.Either.$fOrdEither_$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fX3,
                       label: Data.Either.$fOrdEither_$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fX3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fX4; else goto c5fX5;
       c5fX4: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fX5: // global
           I64[Sp - 32] = block_c5fWW_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fXE; else goto c5fWX;
       u5fXE: // global
           call _c5fWW(R1) args: 0, res: 0, upd: 0;
       c5fWX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fWW() //  [R1]
         { info_tbl: [(c5fWW,
                       label: block_c5fWW_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fWW: // global
           _s5eA7::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fX0; else goto c5fX1;
       c5fX0: // global
           I64[Sp] = block_c5fX8_info;
           _s5eA9::P64 = P64[R1 + 7];
           R1 = _s5eA7::P64;
           P64[Sp + 24] = _s5eA9::P64;
           if (R1 & 7 != 0) goto u5fXC; else goto c5fXa;
       u5fXC: // global
           call _c5fX8(R1) args: 0, res: 0, upd: 0;
       c5fXa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fX1: // global
           I64[Sp + 8] = block_c5fXn_info;
           _s5eAd::P64 = P64[R1 + 6];
           R1 = _s5eA7::P64;
           P64[Sp + 24] = _s5eAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5fXD; else goto c5fXp;
       u5fXD: // global
           call _c5fXn(R1) args: 0, res: 0, upd: 0;
       c5fXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fX8() //  [R1]
         { info_tbl: [(c5fX8,
                       label: block_c5fX8_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fX8: // global
           if (R1 & 7 == 1) goto c5fXg; else goto c5fXk;
       c5fXg: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
       c5fXk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5fXn() //  [R1]
         { info_tbl: [(c5fXn,
                       label: block_c5fXn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fXn: // global
           if (R1 & 7 == 1) goto c5fXv; else goto c5fXz;
       c5fXv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fXz: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.631880992 UTC

[section ""data" . Data.Either.$fOrdEither_$ccompare_closure" {
     Data.Either.$fOrdEither_$ccompare_closure:
         const Data.Either.$fOrdEither_$ccompare_info;
 },
 Data.Either.$fOrdEither_$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fYj,
                       label: Data.Either.$fOrdEither_$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fYj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fYk; else goto c5fYl;
       c5fYk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fYl: // global
           I64[Sp - 32] = block_c5fYc_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5fYU; else goto c5fYd;
       u5fYU: // global
           call _c5fYc(R1) args: 0, res: 0, upd: 0;
       c5fYd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fYc() //  [R1]
         { info_tbl: [(c5fYc,
                       label: block_c5fYc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fYc: // global
           _s5eAk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fYg; else goto c5fYh;
       c5fYg: // global
           I64[Sp] = block_c5fYo_info;
           _s5eAm::P64 = P64[R1 + 7];
           R1 = _s5eAk::P64;
           P64[Sp + 24] = _s5eAm::P64;
           if (R1 & 7 != 0) goto u5fYS; else goto c5fYq;
       u5fYS: // global
           call _c5fYo(R1) args: 0, res: 0, upd: 0;
       c5fYq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fYh: // global
           I64[Sp + 8] = block_c5fYD_info;
           _s5eAq::P64 = P64[R1 + 6];
           R1 = _s5eAk::P64;
           P64[Sp + 24] = _s5eAq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5fYT; else goto c5fYF;
       u5fYT: // global
           call _c5fYD(R1) args: 0, res: 0, upd: 0;
       c5fYF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fYo() //  [R1]
         { info_tbl: [(c5fYo,
                       label: block_c5fYo_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fYo: // global
           if (R1 & 7 == 1) goto c5fYw; else goto c5fYA;
       c5fYw: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
       c5fYA: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5fYD() //  [R1]
         { info_tbl: [(c5fYD,
                       label: block_c5fYD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fYD: // global
           if (R1 & 7 == 1) goto c5fYL; else goto c5fYP;
       c5fYL: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5fYP: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.643925755 UTC

[section ""data" . Data.Either.$fEqEither_$c==_closure" {
     Data.Either.$fEqEither_$c==_closure:
         const Data.Either.$fEqEither_$c==_info;
 },
 Data.Either.$fEqEither_$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5fZz,
                       label: Data.Either.$fEqEither_$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fZz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5fZA; else goto c5fZB;
       c5fZA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5fZB: // global
           I64[Sp - 32] = block_c5fZs_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5g0c; else goto c5fZt;
       u5g0c: // global
           call _c5fZs(R1) args: 0, res: 0, upd: 0;
       c5fZt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fZs() //  [R1]
         { info_tbl: [(c5fZs,
                       label: block_c5fZs_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fZs: // global
           _s5eAx::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5fZw; else goto c5fZx;
       c5fZw: // global
           I64[Sp] = block_c5fZE_info;
           _s5eAz::P64 = P64[R1 + 7];
           R1 = _s5eAx::P64;
           P64[Sp + 24] = _s5eAz::P64;
           if (R1 & 7 != 0) goto u5g0a; else goto c5fZG;
       u5g0a: // global
           call _c5fZE(R1) args: 0, res: 0, upd: 0;
       c5fZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5fZx: // global
           I64[Sp + 8] = block_c5fZT_info;
           _s5eAD::P64 = P64[R1 + 6];
           R1 = _s5eAx::P64;
           P64[Sp + 24] = _s5eAD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5g0b; else goto c5fZV;
       u5g0b: // global
           call _c5fZT(R1) args: 0, res: 0, upd: 0;
       c5fZV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5fZE() //  [R1]
         { info_tbl: [(c5fZE,
                       label: block_c5fZE_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fZE: // global
           if (R1 & 7 == 1) goto c5fZM; else goto u5g09;
       c5fZM: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
       u5g09: // global
           Sp = Sp + 32;
           call _c5g01() args: 0, res: 0, upd: 0;
     }
 },
 _c5fZT() //  [R1]
         { info_tbl: [(c5fZT,
                       label: block_c5fZT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5fZT: // global
           if (R1 & 7 == 1) goto u5g08; else goto c5g05;
       u5g08: // global
           Sp = Sp + 24;
           call _c5g01() args: 0, res: 0, upd: 0;
       c5g05: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c5g01() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g01: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.657631199 UTC

[section ""data" . Data.Either.$fEqEither_$c/=_closure" {
     Data.Either.$fEqEither_$c/=_closure:
         const Data.Either.$fEqEither_$c/=_info;
 },
 Data.Either.$fEqEither_$c/=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5g0U,
                       label: Data.Either.$fEqEither_$c/=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g0U: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5g0V; else goto c5g0W;
       c5g0V: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c/=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5g0W: // global
           I64[Sp - 32] = block_c5g0N_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5g1Z; else goto c5g0O;
       u5g1Z: // global
           call _c5g0N(R1) args: 0, res: 0, upd: 0;
       c5g0O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g0N() //  [R1]
         { info_tbl: [(c5g0N,
                       label: block_c5g0N_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g0N: // global
           _s5eAK::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5g0R; else goto c5g0S;
       c5g0R: // global
           I64[Sp] = block_c5g0Z_info;
           _s5eAM::P64 = P64[R1 + 7];
           R1 = _s5eAK::P64;
           P64[Sp + 24] = _s5eAM::P64;
           if (R1 & 7 != 0) goto u5g1X; else goto c5g11;
       u5g1X: // global
           call _c5g0Z(R1) args: 0, res: 0, upd: 0;
       c5g11: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5g0S: // global
           I64[Sp + 8] = block_c5g1p_info;
           _s5eAR::P64 = P64[R1 + 6];
           R1 = _s5eAK::P64;
           P64[Sp + 24] = _s5eAR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5g1Y; else goto c5g1r;
       u5g1Y: // global
           call _c5g1p(R1) args: 0, res: 0, upd: 0;
       c5g1r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g0Z() //  [R1]
         { info_tbl: [(c5g0Z,
                       label: block_c5g0Z_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g0Z: // global
           if (R1 & 7 == 1) goto c5g18; else goto u5g1U;
       c5g18: // global
           _s5eAM::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5g15_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eAM::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u5g1U: // global
           Sp = Sp + 32;
           call _c5g1I() args: 0, res: 0, upd: 0;
     }
 },
 _c5g15() //  [R1]
         { info_tbl: [(c5g15,
                       label: block_c5g15_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g15: // global
           if (R1 & 7 == 1) goto u5g1V; else goto u5g1W;
       u5g1V: // global
           Sp = Sp + 8;
           call _c5g1I() args: 0, res: 0, upd: 0;
       u5g1W: // global
           Sp = Sp + 8;
           call _c5g1M() args: 0, res: 0, upd: 0;
     }
 },
 _c5g1p() //  [R1]
         { info_tbl: [(c5g1p,
                       label: block_c5g1p_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g1p: // global
           if (R1 & 7 == 1) goto u5g1R; else goto c5g1C;
       u5g1R: // global
           Sp = Sp + 24;
           call _c5g1I() args: 0, res: 0, upd: 0;
       c5g1C: // global
           _s5eAR::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5g1A_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eAR::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5g1A() //  [R1]
         { info_tbl: [(c5g1A,
                       label: block_c5g1A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g1A: // global
           if (R1 & 7 == 1) goto u5g1S; else goto u5g1T;
       u5g1S: // global
           Sp = Sp + 8;
           call _c5g1I() args: 0, res: 0, upd: 0;
       u5g1T: // global
           Sp = Sp + 8;
           call _c5g1M() args: 0, res: 0, upd: 0;
     }
 },
 _c5g1I() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g1I: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5g1M() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g1M: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.675656753 UTC

[section ""data" . Data.Either.$fEqEither_closure" {
     Data.Either.$fEqEither_closure:
         const Data.Either.$fEqEither_info;
 },
 sat_s5eAZ_entry() //  [R1, R2, R3]
         { info_tbl: [(c5g2U,
                       label: sat_s5eAZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g2U: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c/=_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eAY_entry() //  [R1, R2, R3]
         { info_tbl: [(c5g32,
                       label: sat_s5eAY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g32: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c==_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fEqEither_entry() //  [R2, R3]
         { info_tbl: [(c5g36,
                       label: Data.Either.$fEqEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g36: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5g3a; else goto c5g39;
       c5g3a: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5g39: // global
           I64[Hp - 64] = sat_s5eAZ_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s5eAY_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.68534888 UTC

[section ""data" . Data.Either.$fOrdEither_$cp1Ord_closure" {
     Data.Either.$fOrdEither_$cp1Ord_closure:
         const Data.Either.$fOrdEither_$cp1Ord_info;
 },
 sat_s5eB3_entry() //  [R1]
         { info_tbl: [(c5g3w,
                       label: sat_s5eB3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g3w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5g3x; else goto c5g3y;
       c5g3x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5g3y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5eB2_entry() //  [R1]
         { info_tbl: [(c5g3D,
                       label: sat_s5eB2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g3D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5g3E; else goto c5g3F;
       c5g3E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5g3F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_$cp1Ord_entry() //  [R2, R3]
         { info_tbl: [(c5g3G,
                       label: Data.Either.$fOrdEither_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g3G: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5g3K; else goto c5g3J;
       c5g3K: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cp1Ord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5g3J: // global
           I64[Hp - 40] = sat_s5eB3_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s5eB2_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Either.$fEqEither_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.694918542 UTC

[section ""data" . Data.Either.$fOrdEither_$c<=_closure" {
     Data.Either.$fOrdEither_$c<=_closure:
         const Data.Either.$fOrdEither_$c<=_info;
 },
 Data.Either.$fOrdEither_$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5g48,
                       label: Data.Either.$fOrdEither_$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g48: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5g49; else goto c5g4a;
       c5g49: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5g4a: // global
           I64[Sp - 32] = block_c5g41_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5g5d; else goto c5g42;
       u5g5d: // global
           call _c5g41(R1) args: 0, res: 0, upd: 0;
       c5g42: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g41() //  [R1]
         { info_tbl: [(c5g41,
                       label: block_c5g41_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g41: // global
           _s5eB6::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5g45; else goto c5g46;
       c5g45: // global
           I64[Sp] = block_c5g4d_info;
           _s5eB9::P64 = P64[R1 + 7];
           R1 = _s5eB6::P64;
           P64[Sp + 24] = _s5eB9::P64;
           if (R1 & 7 != 0) goto u5g5b; else goto c5g4f;
       u5g5b: // global
           call _c5g4d(R1) args: 0, res: 0, upd: 0;
       c5g4f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5g46: // global
           I64[Sp + 8] = block_c5g4D_info;
           _s5eBe::P64 = P64[R1 + 6];
           R1 = _s5eB6::P64;
           P64[Sp + 24] = _s5eBe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5g5c; else goto c5g4F;
       u5g5c: // global
           call _c5g4D(R1) args: 0, res: 0, upd: 0;
       c5g4F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g4d() //  [R1]
         { info_tbl: [(c5g4d,
                       label: block_c5g4d_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g4d: // global
           if (R1 & 7 == 1) goto c5g4m; else goto u5g58;
       c5g4m: // global
           _s5eB9::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5g4j_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eB9::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5g58: // global
           Sp = Sp + 32;
           call _c5g50() args: 0, res: 0, upd: 0;
     }
 },
 _c5g4j() //  [R1]
         { info_tbl: [(c5g4j,
                       label: block_c5g4j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g4j: // global
           if (R1 & 7 == 1) goto u5g59; else goto u5g5a;
       u5g59: // global
           Sp = Sp + 8;
           call _c5g4W() args: 0, res: 0, upd: 0;
       u5g5a: // global
           Sp = Sp + 8;
           call _c5g50() args: 0, res: 0, upd: 0;
     }
 },
 _c5g4D() //  [R1]
         { info_tbl: [(c5g4D,
                       label: block_c5g4D_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g4D: // global
           if (R1 & 7 == 1) goto u5g55; else goto c5g4Q;
       u5g55: // global
           Sp = Sp + 24;
           call _c5g4W() args: 0, res: 0, upd: 0;
       c5g4Q: // global
           _s5eBe::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5g4O_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eBe::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5g4O() //  [R1]
         { info_tbl: [(c5g4O,
                       label: block_c5g4O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g4O: // global
           if (R1 & 7 == 1) goto u5g56; else goto u5g57;
       u5g56: // global
           Sp = Sp + 8;
           call _c5g4W() args: 0, res: 0, upd: 0;
       u5g57: // global
           Sp = Sp + 8;
           call _c5g50() args: 0, res: 0, upd: 0;
     }
 },
 _c5g4W() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g4W: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5g50() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g50: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.714662406 UTC

[section ""data" . Data.Either.$fOrdEither_$cmax_closure" {
     Data.Either.$fOrdEither_$cmax_closure:
         const Data.Either.$fOrdEither_$cmax_info;
 },
 Data.Either.$fOrdEither_$cmax_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5g6a,
                       label: Data.Either.$fOrdEither_$cmax_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g6a: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5g6b; else goto c5g6c;
       c5g6b: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmax_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5g6c: // global
           I64[Sp - 32] = block_c5g63_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5g7e; else goto c5g64;
       u5g7e: // global
           call _c5g63(R1) args: 0, res: 0, upd: 0;
       c5g64: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g63() //  [R1]
         { info_tbl: [(c5g63,
                       label: block_c5g63_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g63: // global
           _s5eBl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5g67; else goto c5g68;
       c5g67: // global
           I64[Sp] = block_c5g6f_info;
           _s5eBn::P64 = R1;
           _s5eBo::P64 = P64[R1 + 7];
           R1 = _s5eBl::P64;
           P64[Sp + 16] = _s5eBo::P64;
           P64[Sp + 24] = _s5eBn::P64;
           if (R1 & 7 != 0) goto u5g7c; else goto c5g6h;
       u5g7c: // global
           call _c5g6f(R1) args: 0, res: 0, upd: 0;
       c5g6h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5g68: // global
           I64[Sp] = block_c5g6F_info;
           _s5eBn::P64 = R1;
           _s5eBt::P64 = P64[R1 + 6];
           R1 = _s5eBl::P64;
           P64[Sp + 8] = _s5eBt::P64;
           P64[Sp + 24] = _s5eBn::P64;
           if (R1 & 7 != 0) goto u5g7d; else goto c5g6H;
       u5g7d: // global
           call _c5g6F(R1) args: 0, res: 0, upd: 0;
       c5g6H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g6f() //  [R1]
         { info_tbl: [(c5g6f,
                       label: block_c5g6f_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g6f: // global
           if (R1 & 7 == 1) goto c5g6o; else goto u5g79;
       c5g6o: // global
           _s5eBj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5g6l_info;
           R2 = _s5eBj::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5g79: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5g6C() args: 0, res: 0, upd: 0;
     }
 },
 _c5g6l() //  [R1]
         { info_tbl: [(c5g6l,
                       label: block_c5g6l_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g6l: // global
           if (R1 & 7 == 1) goto u5g7a; else goto u5g7b;
       u5g7a: // global
           Sp = Sp + 16;
           call _c5g6Y() args: 0, res: 0, upd: 0;
       u5g7b: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5g6C() args: 0, res: 0, upd: 0;
     }
 },
 _c5g6C() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g6C: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5g6F() //  [R1]
         { info_tbl: [(c5g6F,
                       label: block_c5g6F_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g6F: // global
           if (R1 & 7 == 1) goto u5g77; else goto c5g6S;
       u5g77: // global
           Sp = Sp + 24;
           call _c5g6Y() args: 0, res: 0, upd: 0;
       c5g6S: // global
           _s5eBt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5g6Q_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5eBt::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5g6Q() //  [R1]
         { info_tbl: [(c5g6Q,
                       label: block_c5g6Q_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g6Q: // global
           if (R1 & 7 == 1) goto u5g78; else goto c5g72;
       u5g78: // global
           Sp = Sp + 16;
           call _c5g6Y() args: 0, res: 0, upd: 0;
       c5g72: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5g6Y() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g6Y: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.735005784 UTC

[section ""data" . Data.Either.$fOrdEither_$c>=_closure" {
     Data.Either.$fOrdEither_$c>=_closure:
         const Data.Either.$fOrdEither_$c>=_info;
 },
 Data.Either.$fOrdEither_$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5g8g,
                       label: Data.Either.$fOrdEither_$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g8g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5g8h; else goto c5g8i;
       c5g8h: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5g8i: // global
           I64[Sp - 32] = block_c5g89_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5g9l; else goto c5g8a;
       u5g9l: // global
           call _c5g89(R1) args: 0, res: 0, upd: 0;
       c5g8a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g89() //  [R1]
         { info_tbl: [(c5g89,
                       label: block_c5g89_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g89: // global
           _s5eBB::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5g8d; else goto c5g8e;
       c5g8d: // global
           I64[Sp] = block_c5g8l_info;
           _s5eBD::P64 = P64[R1 + 7];
           R1 = _s5eBB::P64;
           P64[Sp + 24] = _s5eBD::P64;
           if (R1 & 7 != 0) goto u5g9j; else goto c5g8n;
       u5g9j: // global
           call _c5g8l(R1) args: 0, res: 0, upd: 0;
       c5g8n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5g8e: // global
           I64[Sp + 8] = block_c5g8L_info;
           _s5eBI::P64 = P64[R1 + 6];
           R1 = _s5eBB::P64;
           P64[Sp + 24] = _s5eBI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5g9k; else goto c5g8N;
       u5g9k: // global
           call _c5g8L(R1) args: 0, res: 0, upd: 0;
       c5g8N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5g8l() //  [R1]
         { info_tbl: [(c5g8l,
                       label: block_c5g8l_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g8l: // global
           if (R1 & 7 == 1) goto c5g8u; else goto u5g9g;
       c5g8u: // global
           _s5eBD::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5g8r_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5eBD::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5g9g: // global
           Sp = Sp + 32;
           call _c5g98() args: 0, res: 0, upd: 0;
     }
 },
 _c5g8r() //  [R1]
         { info_tbl: [(c5g8r,
                       label: block_c5g8r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g8r: // global
           if (R1 & 7 == 1) goto u5g9h; else goto u5g9i;
       u5g9h: // global
           Sp = Sp + 8;
           call _c5g94() args: 0, res: 0, upd: 0;
       u5g9i: // global
           Sp = Sp + 8;
           call _c5g98() args: 0, res: 0, upd: 0;
     }
 },
 _c5g8L() //  [R1]
         { info_tbl: [(c5g8L,
                       label: block_c5g8L_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g8L: // global
           if (R1 & 7 == 1) goto u5g9d; else goto c5g8Y;
       u5g9d: // global
           Sp = Sp + 24;
           call _c5g94() args: 0, res: 0, upd: 0;
       c5g8Y: // global
           _s5eBI::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5g8W_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5eBI::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5g8W() //  [R1]
         { info_tbl: [(c5g8W,
                       label: block_c5g8W_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g8W: // global
           if (R1 & 7 == 1) goto u5g9e; else goto u5g9f;
       u5g9e: // global
           Sp = Sp + 8;
           call _c5g94() args: 0, res: 0, upd: 0;
       u5g9f: // global
           Sp = Sp + 8;
           call _c5g98() args: 0, res: 0, upd: 0;
     }
 },
 _c5g94() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g94: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5g98() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5g98: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.752820439 UTC

[section ""data" . Data.Either.$fOrdEither_$cmin_closure" {
     Data.Either.$fOrdEither_$cmin_closure:
         const Data.Either.$fOrdEither_$cmin_info;
 },
 Data.Either.$fOrdEither_$cmin_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gai,
                       label: Data.Either.$fOrdEither_$cmin_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gai: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5gaj; else goto c5gak;
       c5gaj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmin_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gak: // global
           I64[Sp - 32] = block_c5gab_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gbm; else goto c5gac;
       u5gbm: // global
           call _c5gab(R1) args: 0, res: 0, upd: 0;
       c5gac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gab() //  [R1]
         { info_tbl: [(c5gab,
                       label: block_c5gab_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gab: // global
           _s5eBP::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5gaf; else goto c5gag;
       c5gaf: // global
           I64[Sp] = block_c5gan_info;
           _s5eBR::P64 = R1;
           _s5eBS::P64 = P64[R1 + 7];
           R1 = _s5eBP::P64;
           P64[Sp + 16] = _s5eBS::P64;
           P64[Sp + 24] = _s5eBR::P64;
           if (R1 & 7 != 0) goto u5gbk; else goto c5gap;
       u5gbk: // global
           call _c5gan(R1) args: 0, res: 0, upd: 0;
       c5gap: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5gag: // global
           I64[Sp] = block_c5gaN_info;
           _s5eBR::P64 = R1;
           _s5eBX::P64 = P64[R1 + 6];
           R1 = _s5eBP::P64;
           P64[Sp + 8] = _s5eBX::P64;
           P64[Sp + 24] = _s5eBR::P64;
           if (R1 & 7 != 0) goto u5gbl; else goto c5gaP;
       u5gbl: // global
           call _c5gaN(R1) args: 0, res: 0, upd: 0;
       c5gaP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gan() //  [R1]
         { info_tbl: [(c5gan,
                       label: block_c5gan_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gan: // global
           if (R1 & 7 == 1) goto c5gaw; else goto u5gbi;
       c5gaw: // global
           _s5eBN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5gat_info;
           R2 = _s5eBN::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5gbi: // global
           Sp = Sp + 24;
           call _c5gba() args: 0, res: 0, upd: 0;
     }
 },
 _c5gat() //  [R1]
         { info_tbl: [(c5gat,
                       label: block_c5gat_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gat: // global
           if (R1 & 7 == 1) goto c5gaC; else goto u5gbj;
       c5gaC: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5gbj: // global
           Sp = Sp + 16;
           call _c5gba() args: 0, res: 0, upd: 0;
     }
 },
 _c5gaN() //  [R1]
         { info_tbl: [(c5gaN,
                       label: block_c5gaN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gaN: // global
           if (R1 & 7 == 1) goto u5gbf; else goto c5gb0;
       u5gbf: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5gb6() args: 0, res: 0, upd: 0;
       c5gb0: // global
           _s5eBX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5gaY_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5eBX::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5gaY() //  [R1]
         { info_tbl: [(c5gaY,
                       label: block_c5gaY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gaY: // global
           if (R1 & 7 == 1) goto u5gbg; else goto u5gbh;
       u5gbg: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5gb6() args: 0, res: 0, upd: 0;
       u5gbh: // global
           Sp = Sp + 16;
           call _c5gba() args: 0, res: 0, upd: 0;
     }
 },
 _c5gb6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gb6: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5gba() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gba: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.773193718 UTC

[section ""data" . Data.Either.$fOrdEither_closure" {
     Data.Either.$fOrdEither_closure:
         const Data.Either.$fOrdEither_info;
 },
 sat_s5eCd_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gcm,
                       label: sat_s5eCd_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gcm: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmin_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCc_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gcu,
                       label: sat_s5eCc_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gcu: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmax_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCb_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gcC,
                       label: sat_s5eCb_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gcC: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c>=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eCa_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gcK,
                       label: sat_s5eCa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gcK: // global
           R5 = R2;
           R4 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC7_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gcS,
                       label: sat_s5eC7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gcS: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC6_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gd0,
                       label: sat_s5eC6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gd0: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC5_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gd8,
                       label: sat_s5eC5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gd8: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$ccompare_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5eC4_entry() //  [R1]
         { info_tbl: [(c5gdf,
                       label: sat_s5eC4_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gdf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gdg; else goto c5gdh;
       c5gdg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gdh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fOrdEither_$cp1Ord_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_entry() //  [R2, R3]
         { info_tbl: [(c5gdj,
                       label: Data.Either.$fOrdEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gdj: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto c5gdn; else goto c5gdm;
       c5gdn: // global
           HpAlloc = 272;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gdm: // global
           I64[Hp - 264] = sat_s5eCd_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           I64[Hp - 240] = sat_s5eCc_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           I64[Hp - 216] = sat_s5eCb_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           I64[Hp - 192] = sat_s5eCa_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           I64[Hp - 168] = sat_s5eC7_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s5eC6_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s5eC5_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s5eC4_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = Hp - 118;
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = Hp - 166;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 214;
           P64[Hp - 8] = Hp - 238;
           P64[Hp] = Hp - 262;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.797155783 UTC

[section ""data" . Data.Either.either_closure" {
     Data.Either.either_closure:
         const Data.Either.either_info;
 },
 Data.Either.either_entry() //  [R2, R3, R4]
         { info_tbl: [(c5geb,
                       label: Data.Either.either_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5geb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5gec; else goto c5ged;
       c5gec: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.either_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ged: // global
           I64[Sp - 24] = block_c5ge4_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5gek; else goto c5ge5;
       u5gek: // global
           call _c5ge4(R1) args: 0, res: 0, upd: 0;
       c5ge5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ge4() //  [R1]
         { info_tbl: [(c5ge4,
                       label: block_c5ge4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ge4: // global
           if (R1 & 7 == 1) goto c5ge8; else goto c5ge9;
       c5ge8: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c5ge9: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.804283609 UTC

[section ""data" . Data.Either.$wpartitionEithers_closure" {
     Data.Either.$wpartitionEithers_closure:
         const Data.Either.$wpartitionEithers_info;
 },
 eta_s5eCo_entry() //  [R1]
         { info_tbl: [(c5geN,
                       label: eta_s5eCo_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5geN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5geO; else goto c5geP;
       c5geO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5geP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5geK_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5geK() //  [R1, R2]
         { info_tbl: [(c5geK,
                       label: block_c5geK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5geK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5geS; else goto c5geR;
       c5geS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5geR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$wpartitionEithers_entry() //  [R2]
         { info_tbl: [(c5geX,
                       label: Data.Either.$wpartitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5geX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5geY; else goto c5geZ;
       c5geY: // global
           R2 = R2;
           R1 = Data.Either.$wpartitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5geZ: // global
           I64[Sp - 8] = block_c5geA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5gft; else goto c5geB;
       u5gft: // global
           call _c5geA(R1) args: 0, res: 0, upd: 0;
       c5geB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5geA() //  [R1]
         { info_tbl: [(c5geA,
                       label: block_c5geA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5geA: // global
           if (R1 & 7 == 1) goto c5geU; else goto c5geV;
       c5geU: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5geV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gf5; else goto c5gf4;
       c5gf5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gf4: // global
           _s5eCm::P64 = P64[R1 + 6];
           _s5eCn::P64 = P64[R1 + 14];
           I64[Hp - 16] = eta_s5eCo_info;
           P64[Hp] = _s5eCn::P64;
           I64[Sp - 8] = block_c5gf2_info;
           R1 = _s5eCm::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5gfs; else goto c5gf6;
       u5gfs: // global
           call _c5gf2(R1) args: 0, res: 0, upd: 0;
       c5gf6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gf2() //  [R1]
         { info_tbl: [(c5gf2,
                       label: block_c5gf2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gf2: // global
           _c5geG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5gfe; else goto c5gfn;
       c5gfe: // global
           Hp = Hp + 72;
           _s5eCs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5gfq; else goto c5gfg;
       c5gfg: // global
           _s5eCt::P64 = P64[_s5eCs::P64 + 7];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5geG::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5geG::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eCt::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5gfn: // global
           Hp = Hp + 72;
           _s5eCs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5gfq; else goto c5gfp;
       c5gfq: // global
           HpAlloc = 72;
           R1 = _s5eCs::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gfp: // global
           _s5eCD::P64 = P64[_s5eCs::P64 + 6];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5geG::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5eCD::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5geG::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.819296267 UTC

[section ""data" . Data.Either.partitionEithers_closure" {
     Data.Either.partitionEithers_closure:
         const Data.Either.partitionEithers_info;
 },
 Data.Either.partitionEithers_entry() //  [R2]
         { info_tbl: [(c5gg6,
                       label: Data.Either.partitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gg6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5gg7; else goto c5gg8;
       c5gg7: // global
           R2 = R2;
           R1 = Data.Either.partitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gg8: // global
           I64[Sp - 8] = block_c5gg3_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5gg3() //  [R1, R2]
         { info_tbl: [(c5gg3,
                       label: block_c5gg3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gg3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ggb; else goto c5gga;
       c5ggb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5gga: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.826022619 UTC

[section ""data" . poly_go_r5exd_closure" {
     poly_go_r5exd_closure:
         const poly_go_r5exd_info;
 },
 sat_s5eCX_entry() //  [R1]
         { info_tbl: [(c5ggE,
                       label: sat_s5eCX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ggE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ggF; else goto c5ggG;
       c5ggF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ggG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5exd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5exd_entry() //  [R2]
         { info_tbl: [(c5ggL,
                       label: poly_go_r5exd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ggL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ggM; else goto u5gh2;
       c5ggM: // global
           R2 = R2;
           R1 = poly_go_r5exd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5gh2: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5ggm() args: 0, res: 0, upd: 0;
     }
 },
 _c5ggm() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ggm: // global
           _s5eCR::P64 = P64[Sp];
           I64[Sp] = block_c5ggp_info;
           R1 = _s5eCR::P64;
           if (R1 & 7 != 0) goto u5gh4; else goto c5ggq;
       u5gh4: // global
           call _c5ggp(R1) args: 0, res: 0, upd: 0;
       c5ggq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ggp() //  [R1]
         { info_tbl: [(c5ggp,
                       label: block_c5ggp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ggp: // global
           if (R1 & 7 == 1) goto c5ggI; else goto c5ggJ;
       c5ggI: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ggJ: // global
           I64[Sp - 8] = block_c5ggv_info;
           _s5eCU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5eCU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5gh5; else goto c5ggw;
       u5gh5: // global
           call _c5ggv(R1) args: 0, res: 0, upd: 0;
       c5ggw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ggv() //  [R1]
         { info_tbl: [(c5ggv,
                       label: block_c5ggv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ggv: // global
           _s5eCU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5ggT; else goto c5gh0;
       c5ggT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5ggW; else goto c5ggV;
       c5ggW: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ggV: // global
           _s5eCW::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s5eCX_info;
           P64[Hp - 24] = _s5eCU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eCW::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gh0: // global
           P64[Sp + 8] = _s5eCU::P64;
           Sp = Sp + 8;
           call _c5ggm() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.83794296 UTC

[section ""data" . Data.Either.lefts_closure" {
     Data.Either.lefts_closure:
         const Data.Either.lefts_info;
 },
 Data.Either.lefts_entry() //  [R2]
         { info_tbl: [(c5ghC,
                       label: Data.Either.lefts_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ghC: // global
           R2 = R2;
           call poly_go_r5exd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.842613412 UTC

[section ""data" . poly_go1_r5exe_closure" {
     poly_go1_r5exe_closure:
         const poly_go1_r5exe_info;
 },
 sat_s5eD7_entry() //  [R1]
         { info_tbl: [(c5gi3,
                       label: sat_s5eD7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gi3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gi4; else goto c5gi5;
       c5gi4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gi5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5exe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5exe_entry() //  [R2]
         { info_tbl: [(c5gia,
                       label: poly_go1_r5exe_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gib; else goto u5giq;
       c5gib: // global
           R2 = R2;
           R1 = poly_go1_r5exe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5giq: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5ghK() args: 0, res: 0, upd: 0;
     }
 },
 _c5ghK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ghK: // global
           _s5eD0::P64 = P64[Sp];
           I64[Sp] = block_c5ghN_info;
           R1 = _s5eD0::P64;
           if (R1 & 7 != 0) goto u5gis; else goto c5ghO;
       u5gis: // global
           call _c5ghN(R1) args: 0, res: 0, upd: 0;
       c5ghO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ghN() //  [R1]
         { info_tbl: [(c5ghN,
                       label: block_c5ghN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ghN: // global
           if (R1 & 7 == 1) goto c5gi7; else goto c5gi8;
       c5gi7: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gi8: // global
           I64[Sp - 8] = block_c5ghT_info;
           _s5eD3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5eD3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5git; else goto c5ghU;
       u5git: // global
           call _c5ghT(R1) args: 0, res: 0, upd: 0;
       c5ghU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ghT() //  [R1]
         { info_tbl: [(c5ghT,
                       label: block_c5ghT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ghT: // global
           _s5eD3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5gij; else goto c5gil;
       c5gij: // global
           P64[Sp + 8] = _s5eD3::P64;
           Sp = Sp + 8;
           call _c5ghK() args: 0, res: 0, upd: 0;
       c5gil: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5gio; else goto c5gin;
       c5gio: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gin: // global
           _s5eD6::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5eD7_info;
           P64[Hp - 24] = _s5eD3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5eD6::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.854412257 UTC

[section ""data" . Data.Either.rights_closure" {
     Data.Either.rights_closure:
         const Data.Either.rights_info;
 },
 Data.Either.rights_entry() //  [R2]
         { info_tbl: [(c5gj0,
                       label: Data.Either.rights_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gj0: // global
           R2 = R2;
           call poly_go1_r5exe_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.858417669 UTC

[section ""data" . Data.Either.isLeft_closure" {
     Data.Either.isLeft_closure:
         const Data.Either.isLeft_info;
 },
 Data.Either.isLeft_entry() //  [R2]
         { info_tbl: [(c5gji,
                       label: Data.Either.isLeft_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gji: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5gjj; else goto c5gjk;
       c5gjj: // global
           R2 = R2;
           R1 = Data.Either.isLeft_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gjk: // global
           I64[Sp - 8] = block_c5gjb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5gjr; else goto c5gjc;
       u5gjr: // global
           call _c5gjb(R1) args: 0, res: 0, upd: 0;
       c5gjc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gjb() //  [R1]
         { info_tbl: [(c5gjb,
                       label: block_c5gjb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gjb: // global
           if (R1 & 7 == 1) goto c5gjf; else goto c5gjg;
       c5gjf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gjg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.865515113 UTC

[section ""data" . Data.Either.isRight_closure" {
     Data.Either.isRight_closure:
         const Data.Either.isRight_info;
 },
 Data.Either.isRight_entry() //  [R2]
         { info_tbl: [(c5gjQ,
                       label: Data.Either.isRight_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gjQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5gjR; else goto c5gjS;
       c5gjR: // global
           R2 = R2;
           R1 = Data.Either.isRight_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gjS: // global
           I64[Sp - 8] = block_c5gjJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5gjZ; else goto c5gjK;
       u5gjZ: // global
           call _c5gjJ(R1) args: 0, res: 0, upd: 0;
       c5gjK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gjJ() //  [R1]
         { info_tbl: [(c5gjJ,
                       label: block_c5gjJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gjJ: // global
           if (R1 & 7 == 1) goto c5gjN; else goto c5gjO;
       c5gjN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gjO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.872159424 UTC

[section ""data" . Data.Either.fromLeft_closure" {
     Data.Either.fromLeft_closure:
         const Data.Either.fromLeft_info;
 },
 Data.Either.fromLeft_entry() //  [R2, R3]
         { info_tbl: [(c5gko,
                       label: Data.Either.fromLeft_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gko: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gkp; else goto c5gkq;
       c5gkp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromLeft_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gkq: // global
           I64[Sp - 16] = block_c5gkh_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gkx; else goto c5gki;
       u5gkx: // global
           call _c5gkh(R1) args: 0, res: 0, upd: 0;
       c5gki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gkh() //  [R1]
         { info_tbl: [(c5gkh,
                       label: block_c5gkh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gkh: // global
           if (R1 & 7 == 1) goto c5gkl; else goto c5gkm;
       c5gkl: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5gkm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.878376276 UTC

[section ""data" . Data.Either.fromRight_closure" {
     Data.Either.fromRight_closure:
         const Data.Either.fromRight_info;
 },
 Data.Either.fromRight_entry() //  [R2, R3]
         { info_tbl: [(c5gkU,
                       label: Data.Either.fromRight_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gkU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gkV; else goto c5gkW;
       c5gkV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromRight_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gkW: // global
           I64[Sp - 16] = block_c5gkN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gl3; else goto c5gkO;
       u5gl3: // global
           call _c5gkN(R1) args: 0, res: 0, upd: 0;
       c5gkO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gkN() //  [R1]
         { info_tbl: [(c5gkN,
                       label: block_c5gkN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gkN: // global
           if (R1 & 7 == 1) goto c5gkR; else goto c5gkS;
       c5gkR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5gkS: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.884836898 UTC

[section ""cstring" . Data.Either.$trModule4_bytes" {
     Data.Either.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.886684466 UTC

[section ""data" . Data.Either.$trModule3_closure" {
     Data.Either.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.888433627 UTC

[section ""cstring" . Data.Either.$trModule2_bytes" {
     Data.Either.$trModule2_bytes:
         I8[] [68,97,116,97,46,69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.89024065 UTC

[section ""data" . Data.Either.$trModule1_closure" {
     Data.Either.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.892351993 UTC

[section ""data" . Data.Either.$trModule_closure" {
     Data.Either.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Either.$trModule3_closure+1;
         const Data.Either.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.894222732 UTC

[section ""data" . $krep_r5exf_closure" {
     $krep_r5exf_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.895936819 UTC

[section ""data" . $krep1_r5exg_closure" {
     $krep1_r5exg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.897996608 UTC

[section ""cstring" . Data.Either.$tcEither2_bytes" {
     Data.Either.$tcEither2_bytes:
         I8[] [69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.899686586 UTC

[section ""data" . Data.Either.$tcEither1_closure" {
     Data.Either.$tcEither1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tcEither2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.901734282 UTC

[section ""data" . Data.Either.$tcEither_closure" {
     Data.Either.$tcEither_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tcEither1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 16074290893719807138;
         const 14958199358864670905;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.903566939 UTC

[section ""data" . $krep2_r5exh_closure" {
     $krep2_r5exh_closure:
         const :_con_info;
         const $krep_r5exf_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.905409171 UTC

[section ""data" . $krep3_r5exi_closure" {
     $krep3_r5exi_closure:
         const :_con_info;
         const $krep1_r5exg_closure+2;
         const $krep2_r5exh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.907251553 UTC

[section ""data" . $krep4_r5exj_closure" {
     $krep4_r5exj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Either.$tcEither_closure+1;
         const $krep3_r5exi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.909126441 UTC

[section ""data" . Data.Either.$tc'Left1_closure" {
     Data.Either.$tc'Left1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5exg_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.911356682 UTC

[section ""cstring" . Data.Either.$tc'Left3_bytes" {
     Data.Either.$tc'Left3_bytes:
         I8[] [39,76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.913138247 UTC

[section ""data" . Data.Either.$tc'Left2_closure" {
     Data.Either.$tc'Left2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Left3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.915014008 UTC

[section ""data" . Data.Either.$tc'Left_closure" {
     Data.Either.$tc'Left_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Left2_closure+1;
         const Data.Either.$tc'Left1_closure+4;
         const 14915236324383360020;
         const 11027491440201056612;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.917000984 UTC

[section ""data" . Data.Either.$tc'Right1_closure" {
     Data.Either.$tc'Right1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5exf_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.91992763 UTC

[section ""cstring" . Data.Either.$tc'Right3_bytes" {
     Data.Either.$tc'Right3_bytes:
         I8[] [39,82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.921666588 UTC

[section ""data" . Data.Either.$tc'Right2_closure" {
     Data.Either.$tc'Right2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Right3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.923410727 UTC

[section ""data" . Data.Either.$tc'Right_closure" {
     Data.Either.$tc'Right_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Right2_closure+1;
         const Data.Either.$tc'Right1_closure+4;
         const 10395468319011834275;
         const 16371021254350888909;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.925654606 UTC

[section ""data" . Data.Either.Left_closure" {
     Data.Either.Left_closure:
         const Data.Either.Left_info;
 },
 Data.Either.Left_entry() //  [R2]
         { info_tbl: [(c5glF,
                       label: Data.Either.Left_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5glF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5glJ; else goto c5glI;
       c5glJ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Left_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5glI: // global
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.930319916 UTC

[section ""data" . Data.Either.Right_closure" {
     Data.Either.Right_closure:
         const Data.Either.Right_info;
 },
 Data.Either.Right_entry() //  [R2]
         { info_tbl: [(c5glU,
                       label: Data.Either.Right_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5glU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5glY; else goto c5glX;
       c5glY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Right_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5glX: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.934815767 UTC

[Data.Either.Left_con_entry() //  [R1]
         { info_tbl: [(c5gm4,
                       label: Data.Either.Left_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,76,101,102,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gm4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.938391862 UTC

[Data.Either.Right_con_entry() //  [R1]
         { info_tbl: [(c5gma,
                       label: Data.Either.Right_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,82,105,103,104,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gma: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:13.942222415 UTC

[section ""relreadonly" . S5eEs_srt" {
     S5eEs_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Either.$fSemigroupEither2_closure;
         const Data.Either.$fSemigroupEither_$cstimes_closure;
         const Data.Either.$fSemigroupEither1_closure;
         const Data.Either.$fShowEither4_closure;
         const Data.Either.$fShowEither2_closure;
         const Data.Either.$w$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshow_closure;
         const Data.Either.$fShowEither_$cshowList_closure;
         const Data.Either.$fShowEither_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Either.$fReadEither_lexeme1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Either.$fReadEither_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Either.$fReadEither1_closure;
         const Data.Either.$fReadEither_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Either.$fReadEither_$creadListPrec_closure;
         const Data.Either.$fReadEither_$creadList_closure;
         const Data.Either.$fReadEither_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.054368249 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:16.057430056 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cfmap_closure" {
     Data.Either.$fApplicativeEither_$cfmap_closure:
         const Data.Either.$fApplicativeEither_$cfmap_info;
 },
 Data.Either.$fApplicativeEither_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(c5gsy,
                       label: Data.Either.$fApplicativeEither_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gsy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gsz; else goto c5gsA;
       c5gsz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gsA: // global
           I64[Sp - 16] = block_c5gsr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gsL; else goto c5gss;
       u5gsL: // global
           call _c5gsr(R1) args: 0, res: 0, upd: 0;
       c5gss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gsr() //  [R1]
         { info_tbl: [(c5gsr,
                       label: block_c5gsr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gsr: // global
           if (R1 & 7 == 1) goto c5gsv; else goto c5gsw;
       c5gsv: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gsw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5gsK; else goto c5gsJ;
       c5gsK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gsJ: // global
           _s5gml::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5gml::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.069347368 UTC

[section ""data" . Data.Either.$fFunctorEither_$c<$_closure" {
     Data.Either.$fFunctorEither_$c<$_closure:
         const Data.Either.$fFunctorEither_$c<$_info;
 },
 Data.Either.$fFunctorEither_$c<$_entry() //  [R2, R3]
         { info_tbl: [(c5gtg,
                       label: Data.Either.$fFunctorEither_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gtg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gth; else goto c5gti;
       c5gth: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fFunctorEither_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gti: // global
           I64[Sp - 16] = block_c5gt9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gts; else goto c5gta;
       u5gts: // global
           call _c5gt9(R1) args: 0, res: 0, upd: 0;
       c5gta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gt9() //  [R1]
         { info_tbl: [(c5gt9,
                       label: block_c5gt9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gt9: // global
           if (R1 & 7 == 1) goto c5gtd; else goto c5gte;
       c5gtd: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gte: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5gtr; else goto c5gtq;
       c5gtr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gtq: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.080848937 UTC

[section ""data" . Data.Either.$fFunctorEither_closure" {
     Data.Either.$fFunctorEither_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Either.$fApplicativeEither_$cfmap_closure+2;
         const Data.Either.$fFunctorEither_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.083536851 UTC

[section ""cstring" . lvl_r5exb_bytes" {
     lvl_r5exb_bytes:
         I8[] [115,116,105,109,101,115,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.08622667 UTC

[section ""data" . Data.Either.$fSemigroupEither1_closure" {
     Data.Either.$fSemigroupEither1_closure:
         const Data.Either.$fSemigroupEither1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither1_entry() //  [R1]
         { info_tbl: [(c5gtU,
                       label: Data.Either.$fSemigroupEither1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gtU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5gtV; else goto c5gtW;
       c5gtV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gtW: // global
           (_c5gtP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5gtP::I64 == 0) goto c5gtR; else goto c5gtQ;
       c5gtR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5gtQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5gtP::I64;
           I64[Sp - 24] = block_c5gtS_info;
           R2 = lvl_r5exb_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5gtS() //  [R1]
         { info_tbl: [(c5gtS,
                       label: block_c5gtS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gtS: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.093908464 UTC

[section ""data" . Data.Either.$fSemigroupEither2_closure" {
     Data.Either.$fSemigroupEither2_closure:
         const Data.Either.$fSemigroupEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fSemigroupEither2_entry() //  [R1]
         { info_tbl: [(c5guj,
                       label: Data.Either.$fSemigroupEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5guj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5guk; else goto c5gul;
       c5guk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gul: // global
           (_c5gug::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5gug::I64 == 0) goto c5gui; else goto c5guh;
       c5gui: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5guh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5gug::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.101392053 UTC

[section ""data" . Data.Either.$fSemigroupEither_$cstimes_closure" {
     Data.Either.$fSemigroupEither_$cstimes_closure:
         const Data.Either.$fSemigroupEither_$cstimes_info;
         const 0;
 },
 sat_s5gmz_entry() //  [R1]
         { info_tbl: [(c5guK,
                       label: sat_s5gmz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5guK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5guL; else goto c5guM;
       c5guL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5guM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5guI_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5guI() //  [R1]
         { info_tbl: [(c5guI,
                       label: block_c5guI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5guI: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Either.$fSemigroupEither2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Either.$fSemigroupEither_$cstimes_entry() //  [R2, R3, R4]
         { info_tbl: [(c5guQ,
                       label: Data.Either.$fSemigroupEither_$cstimes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5guQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5guS; else goto c5guT;
       c5guS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$cstimes_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5guT: // global
           I64[Sp - 24] = block_c5guA_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5guA() //  [R1]
         { info_tbl: [(c5guA,
                       label: block_c5guA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5guA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5guW; else goto c5guV;
       c5guW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5guV: // global
           I64[Hp - 16] = sat_s5gmz_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5guR_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5guR() //  [R1]
         { info_tbl: [(c5guR,
                       label: block_c5guR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5guR: // global
           _s5gmu::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5gv0_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5gmu::P64;
           Sp = Sp - 8;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5gv0() //  [R1]
         { info_tbl: [(c5gv0,
                       label: block_c5gv0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gv0: // global
           if (R1 & 7 == 1) goto c5gv7; else goto c5gvb;
       c5gv7: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gvb: // global
           R1 = Data.Either.$fSemigroupEither1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.123537679 UTC

[section ""data" . Data.Either.$fSemigroupEither_$c<>_closure" {
     Data.Either.$fSemigroupEither_$c<>_closure:
         const Data.Either.$fSemigroupEither_$c<>_info;
 },
 Data.Either.$fSemigroupEither_$c<>_entry() //  [R2, R3]
         { info_tbl: [(c5gvY,
                       label: Data.Either.$fSemigroupEither_$c<>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gvY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gvZ; else goto c5gw0;
       c5gvZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gw0: // global
           I64[Sp - 16] = block_c5gvR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gw7; else goto c5gvS;
       u5gw7: // global
           call _c5gvR(R1) args: 0, res: 0, upd: 0;
       c5gvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gvR() //  [R1]
         { info_tbl: [(c5gvR,
                       label: block_c5gvR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gvR: // global
           if (R1 & 7 == 1) goto c5gvV; else goto c5gvW;
       c5gvV: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gvW: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.133515043 UTC

[section ""data" . Data.Either.$fSemigroupEither3_closure" {
     Data.Either.$fSemigroupEither3_closure:
         const Data.Either.$fSemigroupEither3_info;
 },
 Data.Either.$fSemigroupEither3_entry() //  [R2, R3]
         { info_tbl: [(c5gwz,
                       label: Data.Either.$fSemigroupEither3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gwz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5gwA; else goto u5gwV;
       c5gwA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5gwV: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5gwp() args: 0, res: 0, upd: 0;
     }
 },
 _c5gwp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gwp: // global
           I64[Sp - 8] = block_c5gws_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5gwX; else goto c5gwt;
       u5gwX: // global
           call _c5gws(R1) args: 0, res: 0, upd: 0;
       c5gwt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gws() //  [R1]
         { info_tbl: [(c5gws,
                       label: block_c5gws_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gws: // global
           _s5gmG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5gww; else goto c5gwx;
       c5gww: // global
           R1 = _s5gmG::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gwx: // global
           I64[Sp] = block_c5gwH_info;
           _s5gmJ::P64 = P64[R1 + 6];
           _s5gmK::P64 = P64[R1 + 14];
           R1 = _s5gmG::P64;
           P64[Sp + 8] = _s5gmK::P64;
           P64[Sp + 16] = _s5gmJ::P64;
           if (R1 & 7 != 0) goto u5gwY; else goto c5gwJ;
       u5gwY: // global
           call _c5gwH(R1) args: 0, res: 0, upd: 0;
       c5gwJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gwH() //  [R1]
         { info_tbl: [(c5gwH,
                       label: block_c5gwH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gwH: // global
           if (R1 & 7 == 1) goto c5gwP; else goto c5gwT;
       c5gwP: // global
           _s5gmH::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s5gmH::P64;
           Sp = Sp + 8;
           call _c5gwp() args: 0, res: 0, upd: 0;
       c5gwT: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.148784582 UTC

[section ""data" . Data.Either.$fSemigroupEither_$csconcat_closure" {
     Data.Either.$fSemigroupEither_$csconcat_closure:
         const Data.Either.$fSemigroupEither_$csconcat_info;
 },
 Data.Either.$fSemigroupEither_$csconcat_entry() //  [R2]
         { info_tbl: [(c5gxy,
                       label: Data.Either.$fSemigroupEither_$csconcat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gxy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5gxz; else goto c5gxA;
       c5gxz: // global
           R2 = R2;
           R1 = Data.Either.$fSemigroupEither_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gxA: // global
           I64[Sp - 8] = block_c5gxv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5gxE; else goto c5gxw;
       u5gxE: // global
           call _c5gxv(R1) args: 0, res: 0, upd: 0;
       c5gxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gxv() //  [R1]
         { info_tbl: [(c5gxv,
                       label: block_c5gxv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gxv: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Either.$fSemigroupEither3_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.157091174 UTC

[section ""data" . Data.Either.$fSemigroupEither_closure" {
     Data.Either.$fSemigroupEither_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Either.$fSemigroupEither_$c<>_closure+2;
         const Data.Either.$fSemigroupEither_$csconcat_closure+1;
         const Data.Either.$fSemigroupEither_$cstimes_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.160597093 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*>_closure" {
     Data.Either.$fApplicativeEither_$c<*>_closure:
         const Data.Either.$fApplicativeEither_$c<*>_info;
 },
 Data.Either.$fApplicativeEither_$c<*>_entry() //  [R2, R3]
         { info_tbl: [(c5gy1,
                       label: Data.Either.$fApplicativeEither_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gy1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gy2; else goto c5gy3;
       c5gy2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gy3: // global
           I64[Sp - 16] = block_c5gxU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gya; else goto c5gxV;
       u5gya: // global
           call _c5gxU(R1) args: 0, res: 0, upd: 0;
       c5gxV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gxU() //  [R1]
         { info_tbl: [(c5gxU,
                       label: block_c5gxU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gxU: // global
           if (R1 & 7 == 1) goto c5gxY; else goto c5gxZ;
       c5gxY: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gxZ: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.172133933 UTC

[section ""data" . Data.Either.$fApplicativeEither_$cliftA2_closure" {
     Data.Either.$fApplicativeEither_$cliftA2_closure:
         const Data.Either.$fApplicativeEither_$cliftA2_info;
 },
 ds_s5gmZ_entry() //  [R1]
         { info_tbl: [(c5gyE,
                       label: ds_s5gmZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gyE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gyF; else goto c5gyG;
       c5gyF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gyG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5gyx_info;
           _s5gmX::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5gmX::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gyR; else goto c5gyy;
       u5gyR: // global
           call _c5gyx(R1) args: 0, res: 0, upd: 0;
       c5gyy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5gyx() //  [R1]
         { info_tbl: [(c5gyx,
                       label: block_c5gyx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gyx: // global
           if (R1 & 7 == 1) goto c5gyB; else goto c5gyC;
       c5gyB: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c5gyC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5gyQ; else goto c5gyP;
       c5gyQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5gyP: // global
           _s5gn2::P64 = P64[R1 + 6];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5gn2::P64;
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5gn8_entry() //  [R1, R2]
         { info_tbl: [(c5gz4,
                       label: sat_s5gn8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gz4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gz5; else goto c5gz6;
       c5gz5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gz6: // global
           I64[Sp - 16] = block_c5gyX_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gzd; else goto c5gyY;
       u5gzd: // global
           call _c5gyX(R1) args: 0, res: 0, upd: 0;
       c5gyY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gyX() //  [R1]
         { info_tbl: [(c5gyX,
                       label: block_c5gyX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gyX: // global
           if (R1 & 7 == 1) goto c5gz1; else goto c5gz2;
       c5gz1: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gz2: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call Data.Either.$fApplicativeEither_$cfmap_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fApplicativeEither_$cliftA2_entry() //  [R2, R3]
         { info_tbl: [(c5gze,
                       label: Data.Either.$fApplicativeEither_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gze: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5gzi; else goto c5gzh;
       c5gzi: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gzh: // global
           I64[Hp - 40] = ds_s5gmZ_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5gn8_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.191589754 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c*>_closure" {
     Data.Either.$fApplicativeEither_$c*>_closure:
         const Data.Either.$fApplicativeEither_$c*>_info;
 },
 Data.Either.$fApplicativeEither_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c5gA8,
                       label: Data.Either.$fApplicativeEither_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gA8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gA9; else goto c5gAa;
       c5gA9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gAa: // global
           I64[Sp - 16] = block_c5gA1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gAh; else goto c5gA2;
       u5gAh: // global
           call _c5gA1(R1) args: 0, res: 0, upd: 0;
       c5gA2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gA1() //  [R1]
         { info_tbl: [(c5gA1,
                       label: block_c5gA1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gA1: // global
           if (R1 & 7 == 1) goto c5gA5; else goto c5gA6;
       c5gA5: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gA6: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.201035847 UTC

[section ""data" . Data.Either.$fApplicativeEither_$c<*_closure" {
     Data.Either.$fApplicativeEither_$c<*_closure:
         const Data.Either.$fApplicativeEither_$c<*_info;
 },
 Data.Either.$fApplicativeEither_$c<*_entry() //  [R2, R3]
         { info_tbl: [(c5gAJ,
                       label: Data.Either.$fApplicativeEither_$c<*_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gAJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gAK; else goto c5gAL;
       c5gAK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fApplicativeEither_$c<*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gAL: // global
           I64[Sp - 16] = block_c5gAC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gB9; else goto c5gAD;
       u5gB9: // global
           call _c5gAC(R1) args: 0, res: 0, upd: 0;
       c5gAD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gAC() //  [R1]
         { info_tbl: [(c5gAC,
                       label: block_c5gAC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gAC: // global
           if (R1 & 7 == 1) goto u5gB5; else goto c5gAH;
       u5gB5: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _c5gB3() args: 0, res: 0, upd: 0;
       c5gAH: // global
           I64[Sp] = block_c5gAR_info;
           _s5gng::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5gng::P64;
           if (R1 & 7 != 0) goto u5gB7; else goto c5gAT;
       u5gB7: // global
           call _c5gAR(R1) args: 0, res: 0, upd: 0;
       c5gAT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gAR() //  [R1]
         { info_tbl: [(c5gAR,
                       label: block_c5gAR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gAR: // global
           if (R1 & 7 == 1) goto c5gAZ; else goto u5gB6;
       c5gAZ: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5gB6: // global
           Sp = Sp + 8;
           call _c5gB3() args: 0, res: 0, upd: 0;
     }
 },
 _c5gB3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gB3: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.214208179 UTC

[section ""data" . Data.Either.$fApplicativeEither_closure" {
     Data.Either.$fApplicativeEither_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Either.$fFunctorEither_closure+1;
         const Data.Either.Right_closure+1;
         const Data.Either.$fApplicativeEither_$c<*>_closure+2;
         const Data.Either.$fApplicativeEither_$cliftA2_closure+2;
         const Data.Either.$fApplicativeEither_$c*>_closure+2;
         const Data.Either.$fApplicativeEither_$c<*_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.217598058 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>=_closure" {
     Data.Either.$fMonadEither_$c>>=_closure:
         const Data.Either.$fMonadEither_$c>>=_info;
 },
 Data.Either.$fMonadEither_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c5gBM,
                       label: Data.Either.$fMonadEither_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gBM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gBN; else goto c5gBO;
       c5gBN: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fMonadEither_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gBO: // global
           I64[Sp - 16] = block_c5gBF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5gBV; else goto c5gBG;
       u5gBV: // global
           call _c5gBF(R1) args: 0, res: 0, upd: 0;
       c5gBG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gBF() //  [R1]
         { info_tbl: [(c5gBF,
                       label: block_c5gBF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gBF: // global
           if (R1 & 7 == 1) goto c5gBJ; else goto c5gBK;
       c5gBJ: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5gBK: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.227516148 UTC

[section ""data" . Data.Either.$fMonadEither_$c>>_closure" {
     Data.Either.$fMonadEither_$c>>_closure:
         const Data.Either.$fMonadEither_$c>>_info;
 },
 Data.Either.$fMonadEither_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c5gCe,
                       label: Data.Either.$fMonadEither_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gCe: // global
           R3 = R3;
           R2 = R2;
           call Data.Either.$fApplicativeEither_$c*>_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.232484802 UTC

[section ""data" . lvl1_r5exc_closure" {
     lvl1_r5exc_closure:
         const lvl1_r5exc_info;
         const 0;
 },
 lvl1_r5exc_entry() //  [R2]
         { info_tbl: [(c5gCp,
                       label: lvl1_r5exc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gCp: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.237130632 UTC

[section ""data" . Data.Either.$fMonadEither_closure" {
     Data.Either.$fMonadEither_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Either.$fApplicativeEither_closure+1;
         const Data.Either.$fMonadEither_$c>>=_closure+2;
         const Data.Either.$fMonadEither_$c>>_closure+2;
         const Data.Either.Right_closure+1;
         const lvl1_r5exc_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.240112226 UTC

[section ""cstring" . Data.Either.$fShowEither5_bytes" {
     Data.Either.$fShowEither5_bytes:
         I8[] [76,101,102,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.243018361 UTC

[section ""data" . Data.Either.$fShowEither4_closure" {
     Data.Either.$fShowEither4_closure:
         const Data.Either.$fShowEither4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither4_entry() //  [R1]
         { info_tbl: [(c5gCE,
                       label: Data.Either.$fShowEither4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gCE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gCF; else goto c5gCG;
       c5gCF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gCG: // global
           (_c5gCB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5gCB::I64 == 0) goto c5gCD; else goto c5gCC;
       c5gCD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5gCC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5gCB::I64;
           R2 = Data.Either.$fShowEither5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.248916592 UTC

[section ""data" . Data.Either.$fReadEither4_closure" {
     Data.Either.$fReadEither4_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.251372238 UTC

[section ""cstring" . Data.Either.$fShowEither3_bytes" {
     Data.Either.$fShowEither3_bytes:
         I8[] [82,105,103,104,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.25530021 UTC

[section ""data" . Data.Either.$fShowEither2_closure" {
     Data.Either.$fShowEither2_closure:
         const Data.Either.$fShowEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fShowEither2_entry() //  [R1]
         { info_tbl: [(c5gCX,
                       label: Data.Either.$fShowEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gCX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gCY; else goto c5gCZ;
       c5gCY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gCZ: // global
           (_c5gCU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5gCU::I64 == 0) goto c5gCW; else goto c5gCV;
       c5gCW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5gCV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5gCU::I64;
           R2 = Data.Either.$fShowEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.265409303 UTC

[section ""data" . Data.Either.$w$cshowsPrec_closure" {
     Data.Either.$w$cshowsPrec_closure:
         const Data.Either.$w$cshowsPrec_info;
         const 0;
 },
 Data.Either.$w$cshowsPrec_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gD9: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5gny_entry() //  [R1]
         { info_tbl: [(c5gDm,
                       label: g_s5gny_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gDm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5gDn; else goto c5gDo;
       c5gDn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gDo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5gnB_entry() //  [R1]
         { info_tbl: [(c5gDB,
                       label: sat_s5gnB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gDB: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gnC_entry() //  [R1, R2]
         { info_tbl: [(c5gDE,
                       label: sat_s5gnC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gDE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5gDI; else goto c5gDH;
       c5gDI: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gDH: // global
           _s5gny::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5gnB_info;
           P64[Hp - 8] = _s5gny::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gnF_entry() //  [R1]
         { info_tbl: [(c5gDY,
                       label: sat_s5gnF_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gDY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gE2; else goto c5gE1;
       c5gE2: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gE1: // global
           _s5gny::P64 = P64[R1 + 16];
           _s5gnD::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5gnD::P64;
           R2 = Hp - 14;
           R1 = _s5gny::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gnG_entry() //  [R1]
         { info_tbl: [(c5gE3,
                       label: sat_s5gnG_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gE3: // global
           _s5gnG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5gE4; else goto c5gE5;
       c5gE5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5gE7; else goto c5gE6;
       c5gE7: // global
           HpAlloc = 32;
           goto c5gE4;
       c5gE4: // global
           R1 = _s5gnG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gE6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5gnG::P64;
           _s5gny::P64 = P64[_s5gnG::P64 + 16];
           _s5gnD::P64 = P64[_s5gnG::P64 + 24];
           I64[Hp - 24] = sat_s5gnF_info;
           P64[Hp - 8] = _s5gny::P64;
           P64[Hp] = _s5gnD::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5gnH_entry() //  [R1, R2]
         { info_tbl: [(c5gE9,
                       label: sat_s5gnH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gE9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5gEd; else goto c5gEc;
       c5gEd: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gEc: // global
           _s5gny::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5gnG_info;
           P64[Hp - 32] = _s5gny::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s5gnJ_entry() //  [R1]
         { info_tbl: [(c5gEk,
                       label: g_s5gnJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gEk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5gEl; else goto c5gEm;
       c5gEl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gEm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5gnM_entry() //  [R1]
         { info_tbl: [(c5gEz,
                       label: sat_s5gnM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gEz: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gnN_entry() //  [R1, R2]
         { info_tbl: [(c5gEC,
                       label: sat_s5gnN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gEC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5gEG; else goto c5gEF;
       c5gEG: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gEF: // global
           _s5gnJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s5gnM_info;
           P64[Hp - 8] = _s5gnJ::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gnQ_entry() //  [R1]
         { info_tbl: [(c5gEW,
                       label: sat_s5gnQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gEW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gF0; else goto c5gEZ;
       c5gF0: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gEZ: // global
           _s5gnJ::P64 = P64[R1 + 16];
           _s5gnO::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s5gnO::P64;
           R2 = Hp - 14;
           R1 = _s5gnJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gnR_entry() //  [R1]
         { info_tbl: [(c5gF1,
                       label: sat_s5gnR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gF1: // global
           _s5gnR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5gF2; else goto c5gF3;
       c5gF3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5gF5; else goto c5gF4;
       c5gF5: // global
           HpAlloc = 32;
           goto c5gF2;
       c5gF2: // global
           R1 = _s5gnR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gF4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5gnR::P64;
           _s5gnJ::P64 = P64[_s5gnR::P64 + 16];
           _s5gnO::P64 = P64[_s5gnR::P64 + 24];
           I64[Hp - 24] = sat_s5gnQ_info;
           P64[Hp - 8] = _s5gnJ::P64;
           P64[Hp] = _s5gnO::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5gnS_entry() //  [R1, R2]
         { info_tbl: [(c5gF7,
                       label: sat_s5gnS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gF7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5gFb; else goto c5gFa;
       c5gFb: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gFa: // global
           _s5gnJ::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s5gnR_info;
           P64[Hp - 32] = _s5gnJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gFg,
                       label: Data.Either.$w$cshowsPrec_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gFg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gFh; else goto c5gFi;
       c5gFh: // global
           R1 = Data.Either.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5gFi: // global
           I64[Sp - 32] = block_c5gDd_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gFv; else goto c5gDe;
       u5gFv: // global
           call _c5gDd(R1) args: 0, res: 0, upd: 0;
       c5gDe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gDd() //  [R1]
         { info_tbl: [(c5gDd,
                       label: block_c5gDd_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gDd: // global
           _s5gnu::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5gFd; else goto c5gFe;
       c5gFd: // global
           Hp = Hp + 48;
           _s5gnw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5gFr; else goto c5gFk;
       c5gFk: // global
           _s5gnx::P64 = P64[_s5gnw::P64 + 7];
           I64[Hp - 40] = g_s5gny_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s5gnx::P64;
           _c5gDi::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5gnu::I64, 11)) goto c5gFn; else goto c5gFo;
       c5gFn: // global
           I64[Hp - 8] = sat_s5gnC_info;
           P64[Hp] = _c5gDi::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gFo: // global
           I64[Hp - 8] = sat_s5gnH_info;
           P64[Hp] = _c5gDi::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gFe: // global
           Hp = Hp + 48;
           _s5gnw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5gFr; else goto c5gFq;
       c5gFr: // global
           HpAlloc = 48;
           R1 = _s5gnw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gFq: // global
           _s5gnI::P64 = P64[_s5gnw::P64 + 6];
           I64[Hp - 40] = g_s5gnJ_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _s5gnI::P64;
           _c5gEg::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_s5gnu::I64, 11)) goto c5gFt; else goto c5gFu;
       c5gFt: // global
           I64[Hp - 8] = sat_s5gnN_info;
           P64[Hp] = _c5gEg::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gFu: // global
           I64[Hp - 8] = sat_s5gnS_info;
           P64[Hp] = _c5gEg::P64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.317985038 UTC

[section ""data" . Data.Either.$fShowEither_$cshowsPrec_closure" {
     Data.Either.$fShowEither_$cshowsPrec_closure:
         const Data.Either.$fShowEither_$cshowsPrec_info;
         const 0;
 },
 Data.Either.$fShowEither_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gH9,
                       label: Data.Either.$fShowEither_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gH9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gHa; else goto c5gHb;
       c5gHa: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gHb: // global
           I64[Sp - 32] = block_c5gH6_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gHf; else goto c5gH7;
       u5gHf: // global
           call _c5gH6(R1) args: 0, res: 0, upd: 0;
       c5gH7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gH6() //  [R1]
         { info_tbl: [(c5gH6,
                       label: block_c5gH6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gH6: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.327672764 UTC

[section ""data" . Data.Either.$fShowEither_$cshow_closure" {
     Data.Either.$fShowEither_$cshow_closure:
         const Data.Either.$fShowEither_$cshow_info;
         const 0;
 },
 sat_s5go4_entry() //  [R1]
         { info_tbl: [(c5gHD,
                       label: sat_s5go4_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gHD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gHE; else goto c5gHF;
       c5gHE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gHF: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 sat_s5go6_entry() //  [R1]
         { info_tbl: [(c5gHM,
                       label: sat_s5go6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gHM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gHN; else goto c5gHO;
       c5gHN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gHO: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshow_entry() //  [R2, R3, R4]
         { info_tbl: [(c5gHT,
                       label: Data.Either.$fShowEither_$cshow_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gHT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5gHU; else goto c5gHV;
       c5gHU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gHV: // global
           I64[Sp - 24] = block_c5gHu_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5gI2; else goto c5gHv;
       u5gI2: // global
           call _c5gHu(R1) args: 0, res: 0, upd: 0;
       c5gHv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gHu() //  [R1]
         { info_tbl: [(c5gHu,
                       label: block_c5gHu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gHu: // global
           if (R1 & 7 == 1) goto c5gHQ; else goto c5gHR;
       c5gHQ: // global
           Hp = Hp + 32;
           _s5go2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5gI1; else goto c5gHX;
       c5gHX: // global
           _s5go3::P64 = P64[_s5go2::P64 + 7];
           I64[Hp - 24] = sat_s5go4_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5go3::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c5gHR: // global
           Hp = Hp + 32;
           _s5go2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5gI1; else goto c5gI0;
       c5gI1: // global
           HpAlloc = 32;
           R1 = _s5go2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gI0: // global
           _s5go5::P64 = P64[_s5go2::P64 + 6];
           I64[Hp - 24] = sat_s5go6_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5go5::P64;
           R3 = Hp - 24;
           R2 = Data.Either.$fShowEither2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.339434656 UTC

[section ""data" . Data.Either.$fShowEither1_closure" {
     Data.Either.$fShowEither1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.342202035 UTC

[section ""data" . Data.Either.$fShowEither_$cshowList_closure" {
     Data.Either.$fShowEither_$cshowList_closure:
         const Data.Either.$fShowEither_$cshowList_info;
         const 0;
 },
 sat_s5goc_entry() //  [R1, R2]
         { info_tbl: [(c5gIL,
                       label: sat_s5goc_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gIL: // global
           R5 = R2;
           R4 = 0;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$w$cshowsPrec_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_$cshowList_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gIO,
                       label: Data.Either.$fShowEither_$cshowList_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gIO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gIS; else goto c5gIR;
       c5gIS: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gIR: // global
           I64[Hp - 16] = sat_s5goc_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5go9::P64 = R4;
           R4 = R5;
           R3 = _s5go9::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.349170295 UTC

[section ""data" . Data.Either.$fShowEither_closure" {
     Data.Either.$fShowEither_closure:
         const Data.Either.$fShowEither_info;
         const 0;
 },
 sat_s5goh_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gJa,
                       label: sat_s5goh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gJa: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowList_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gog_entry() //  [R1, R2]
         { info_tbl: [(c5gJi,
                       label: sat_s5gog_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gJi: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fShowEither_$cshow_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gof_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gJq,
                       label: sat_s5gof_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gJq: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fShowEither_$cshowsPrec_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fShowEither_entry() //  [R2, R3]
         { info_tbl: [(c5gJu,
                       label: Data.Either.$fShowEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gJu: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5gJy; else goto c5gJx;
       c5gJy: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fShowEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gJx: // global
           I64[Hp - 96] = sat_s5goh_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_s5gog_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_s5gof_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.358473853 UTC

[section ""cstring" . Data.Either.$fReadEither3_bytes" {
     Data.Either.$fReadEither3_bytes:
         I8[] [76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.360529117 UTC

[section ""data" . Data.Either.$fReadEither2_closure" {
     Data.Either.$fReadEither2_closure:
         const Data.Either.$fReadEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither2_entry() //  [R1]
         { info_tbl: [(c5gK1,
                       label: Data.Either.$fReadEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gK1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gK2; else goto c5gK3;
       c5gK2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gK3: // global
           (_c5gJY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5gJY::I64 == 0) goto c5gK0; else goto c5gJZ;
       c5gK0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5gJZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5gJY::I64;
           R2 = Data.Either.$fReadEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.36462164 UTC

[section ""data" . Data.Either.$fReadEither_lexeme_closure" {
     Data.Either.$fReadEither_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.366769547 UTC

[section ""cstring" . Data.Either.$fReadEither6_bytes" {
     Data.Either.$fReadEither6_bytes:
         I8[] [82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.368971592 UTC

[section ""data" . Data.Either.$fReadEither5_closure" {
     Data.Either.$fReadEither5_closure:
         const Data.Either.$fReadEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Either.$fReadEither5_entry() //  [R1]
         { info_tbl: [(c5gKk,
                       label: Data.Either.$fReadEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gKk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gKl; else goto c5gKm;
       c5gKl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gKm: // global
           (_c5gKh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5gKh::I64 == 0) goto c5gKj; else goto c5gKi;
       c5gKj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5gKi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5gKh::I64;
           R2 = Data.Either.$fReadEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.373213608 UTC

[section ""data" . Data.Either.$fReadEither_lexeme1_closure" {
     Data.Either.$fReadEither_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Either.$fReadEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.377908052 UTC

[section ""data" . Data.Either.$fReadEither1_closure" {
     Data.Either.$fReadEither1_closure:
         const Data.Either.$fReadEither1_info;
         const 0;
 },
 sat_s5gov_entry() //  [R1, R2]
         { info_tbl: [(c5gL3,
                       label: sat_s5gov_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gL3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5gL7; else goto c5gL6;
       c5gL7: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gL6: // global
           _s5gon::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s5gon::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gow_entry() //  [R1, R2]
         { info_tbl: [(c5gL8,
                       label: sat_s5gow_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gL8: // global
           _s5gos::P64 = R2;
           _s5gow::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5gL9; else goto c5gLa;
       c5gLa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5gLc; else goto c5gLb;
       c5gLc: // global
           HpAlloc = 16;
           goto c5gL9;
       c5gL9: // global
           R2 = _s5gos::P64;
           R1 = _s5gow::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gLb: // global
           _s5goj::P64 = P64[_s5gow::P64 + 7];
           _s5gon::P64 = P64[_s5gow::P64 + 15];
           I64[Hp - 8] = sat_s5gov_info;
           P64[Hp] = _s5gon::P64;
           R2 = _s5goj::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 karg_s5goq_entry() //  [R1]
         { info_tbl: [(c5gLg,
                       label: karg_s5goq_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gLg: // global
           _s5goq::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5gLh; else goto c5gLi;
       c5gLi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gLk; else goto c5gLj;
       c5gLk: // global
           HpAlloc = 24;
           goto c5gLh;
       c5gLh: // global
           R1 = _s5goq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gLj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5goq::P64;
           if (%MO_S_Gt_W64(I64[_s5goq::P64 + 32],
                            10)) goto c5gLe; else goto c5gLf;
       c5gLe: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5gLf: // global
           _s5goj::P64 = P64[_s5goq::P64 + 16];
           _s5gon::P64 = P64[_s5goq::P64 + 24];
           I64[Hp - 16] = sat_s5gow_info;
           P64[Hp - 8] = _s5goj::P64;
           P64[Hp] = _s5gon::P64;
           I64[Sp - 24] = block_c5gLl_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme1_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5gLl() //  [R1]
         { info_tbl: [(c5gLl,
                       label: block_c5gLl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gLl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5gLq; else goto c5gLp;
       c5gLq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c5gLp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5goD_entry() //  [R1, R2]
         { info_tbl: [(c5gLG,
                       label: sat_s5goD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gLG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5gLK; else goto c5gLJ;
       c5gLK: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gLJ: // global
           _s5gon::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _s5gon::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5goE_entry() //  [R1, R2]
         { info_tbl: [(c5gLL,
                       label: sat_s5goE_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gLL: // global
           _s5goA::P64 = R2;
           _s5goE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5gLM; else goto c5gLN;
       c5gLN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5gLP; else goto c5gLO;
       c5gLP: // global
           HpAlloc = 16;
           goto c5gLM;
       c5gLM: // global
           R2 = _s5goA::P64;
           R1 = _s5goE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5gLO: // global
           _s5goi::P64 = P64[_s5goE::P64 + 7];
           _s5gon::P64 = P64[_s5goE::P64 + 15];
           I64[Hp - 8] = sat_s5goD_info;
           P64[Hp] = _s5gon::P64;
           R2 = _s5goi::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Either.$fReadEither4_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5goI_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gLQ,
                       label: sat_s5goI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gLQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gLR; else goto c5gLS;
       c5gLR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gLS: // global
           I64[Sp - 32] = block_c5gKF_info;
           _s5goi::P64 = P64[R1 + 6];
           _s5goj::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s5goi::P64;
           P64[Sp - 16] = _s5goj::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gM5; else goto c5gKG;
       u5gM5: // global
           call _c5gKF(R1) args: 0, res: 0, upd: 0;
       c5gKG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gKF() //  [R1]
         { info_tbl: [(c5gKF,
                       label: block_c5gKF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gKF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5gLV; else goto c5gLU;
       c5gLV: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gLU: // global
           _s5gop::I64 = I64[R1 + 7];
           I64[Hp - 56] = karg_s5goq_info;
           P64[Hp - 40] = P64[Sp + 16];
           _s5gon::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5gon::P64;
           I64[Hp - 24] = _s5gop::I64;
           _c5gKK::P64 = Hp - 56;
           if (%MO_S_Gt_W64(_s5gop::I64, 10)) goto c5gLX; else goto c5gM1;
       c5gLX: // global
           Hp = Hp - 24;
           R3 = _c5gKK::P64;
           R2 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
       c5gM1: // global
           I64[Hp - 16] = sat_s5goE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s5gon::P64;
           I64[Sp + 16] = block_c5gLY_info;
           R3 = Hp - 15;
           R2 = Data.Either.$fReadEither_lexeme_closure+4;
           P64[Sp + 24] = _c5gKK::P64;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5gLY() //  [R1]
         { info_tbl: [(c5gLY,
                       label: block_c5gLY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gLY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5gM4; else goto c5gM3;
       c5gM4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5gM3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gM6,
                       label: Data.Either.$fReadEither1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gM6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gMa; else goto c5gM9;
       c5gMa: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gM9: // global
           I64[Hp - 16] = sat_s5goI_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s5gok::P64 = R4;
           R4 = R5;
           R3 = _s5gok::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.403716901 UTC

[section ""data" . Data.Either.$fReadEither_$creadsPrec_closure" {
     Data.Either.$fReadEither_$creadsPrec_closure:
         const Data.Either.$fReadEither_$creadsPrec_info;
         const 0;
 },
 sat_s5goM_entry() //  [R1]
         { info_tbl: [(c5gNj,
                       label: sat_s5goM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gNj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gNk; else goto c5gNl;
       c5gNk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gNl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5gNm,
                       label: Data.Either.$fReadEither_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gNm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5gNq; else goto c5gNp;
       c5gNq: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gNp: // global
           I64[Hp - 32] = sat_s5goM_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.410441861 UTC

[section ""data" . Data.Either.$fReadEither_$creadListPrec_closure" {
     Data.Either.$fReadEither_$creadListPrec_closure:
         const Data.Either.$fReadEither_$creadListPrec_info;
         const 0;
 },
 sat_s5goP_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gNM,
                       label: sat_s5goP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gNM: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_$creadListPrec_entry() //  [R2, R3]
         { info_tbl: [(c5gNP,
                       label: Data.Either.$fReadEither_$creadListPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gNP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gNT; else goto c5gNS;
       c5gNT: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gNS: // global
           I64[Hp - 16] = sat_s5goP_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.417188296 UTC

[section ""data" . Data.Either.$fReadEither_$creadList_closure" {
     Data.Either.$fReadEither_$creadList_closure:
         const Data.Either.$fReadEither_$creadList_info;
         const 0;
 },
 sat_s5goS_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gOf,
                       label: sat_s5goS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gOf: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5goT_entry() //  [R1]
         { info_tbl: [(c5gOi,
                       label: sat_s5goT_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gOi: // global
           _s5goT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5gOj; else goto c5gOk;
       c5gOk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5gOm; else goto c5gOl;
       c5gOm: // global
           HpAlloc = 24;
           goto c5gOj;
       c5gOj: // global
           R1 = _s5goT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gOl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5goT::P64;
           _s5goQ::P64 = P64[_s5goT::P64 + 16];
           _s5goR::P64 = P64[_s5goT::P64 + 24];
           I64[Hp - 16] = sat_s5goS_info;
           P64[Hp - 8] = _s5goQ::P64;
           P64[Hp] = _s5goR::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.Either.$fReadEither_$creadList_entry() //  [R2, R3]
         { info_tbl: [(c5gOn,
                       label: Data.Either.$fReadEither_$creadList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gOn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5gOr; else goto c5gOq;
       c5gOr: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gOq: // global
           I64[Hp - 24] = sat_s5goT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.427738234 UTC

[section ""data" . Data.Either.$fReadEither_closure" {
     Data.Either.$fReadEither_closure:
         const Data.Either.$fReadEither_info;
         const 0;
 },
 sat_s5goZ_entry() //  [R1]
         { info_tbl: [(c5gOT,
                       label: sat_s5goZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gOT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gOU; else goto c5gOV;
       c5gOU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gOV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadListPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5goY_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gP1,
                       label: sat_s5goY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gP1: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fReadEither1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5goX_entry() //  [R1]
         { info_tbl: [(c5gP8,
                       label: sat_s5goX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gP8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gP9; else goto c5gPa;
       c5gP9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gPa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fReadEither_$creadList_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5goW_entry() //  [R1, R2]
         { info_tbl: [(c5gPg,
                       label: sat_s5goW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gPg: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Either.$fReadEither_$creadsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fReadEither_entry() //  [R2, R3]
         { info_tbl: [(c5gPk,
                       label: Data.Either.$fReadEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gPk: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5gPo; else goto c5gPn;
       c5gPo: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fReadEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gPn: // global
           I64[Hp - 144] = sat_s5goZ_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s5goY_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s5goX_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s5goW_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.440152517 UTC

[section ""data" . Data.Either.$fOrdEither_$c<_closure" {
     Data.Either.$fOrdEither_$c<_closure:
         const Data.Either.$fOrdEither_$c<_info;
 },
 Data.Either.$fOrdEither_$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gQ4,
                       label: Data.Either.$fOrdEither_$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gQ4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gQ5; else goto c5gQ6;
       c5gQ5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gQ6: // global
           I64[Sp - 32] = block_c5gPX_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gQF; else goto c5gPY;
       u5gQF: // global
           call _c5gPX(R1) args: 0, res: 0, upd: 0;
       c5gPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gPX() //  [R1]
         { info_tbl: [(c5gPX,
                       label: block_c5gPX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gPX: // global
           _s5gp3::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5gQ1; else goto c5gQ2;
       c5gQ1: // global
           I64[Sp] = block_c5gQ9_info;
           _s5gp5::P64 = P64[R1 + 7];
           R1 = _s5gp3::P64;
           P64[Sp + 24] = _s5gp5::P64;
           if (R1 & 7 != 0) goto u5gQD; else goto c5gQb;
       u5gQD: // global
           call _c5gQ9(R1) args: 0, res: 0, upd: 0;
       c5gQb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5gQ2: // global
           I64[Sp + 8] = block_c5gQo_info;
           _s5gp9::P64 = P64[R1 + 6];
           R1 = _s5gp3::P64;
           P64[Sp + 24] = _s5gp9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5gQE; else goto c5gQq;
       u5gQE: // global
           call _c5gQo(R1) args: 0, res: 0, upd: 0;
       c5gQq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gQ9() //  [R1]
         { info_tbl: [(c5gQ9,
                       label: block_c5gQ9_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gQ9: // global
           if (R1 & 7 == 1) goto c5gQh; else goto c5gQl;
       c5gQh: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
       c5gQl: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5gQo() //  [R1]
         { info_tbl: [(c5gQo,
                       label: block_c5gQo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gQo: // global
           if (R1 & 7 == 1) goto c5gQw; else goto c5gQA;
       c5gQw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gQA: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.452111942 UTC

[section ""data" . Data.Either.$fOrdEither_$ccompare_closure" {
     Data.Either.$fOrdEither_$ccompare_closure:
         const Data.Either.$fOrdEither_$ccompare_info;
 },
 Data.Either.$fOrdEither_$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gRr,
                       label: Data.Either.$fOrdEither_$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gRr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gRs; else goto c5gRt;
       c5gRs: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gRt: // global
           I64[Sp - 32] = block_c5gRk_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gS2; else goto c5gRl;
       u5gS2: // global
           call _c5gRk(R1) args: 0, res: 0, upd: 0;
       c5gRl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gRk() //  [R1]
         { info_tbl: [(c5gRk,
                       label: block_c5gRk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gRk: // global
           _s5gpg::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5gRo; else goto c5gRp;
       c5gRo: // global
           I64[Sp] = block_c5gRw_info;
           _s5gpi::P64 = P64[R1 + 7];
           R1 = _s5gpg::P64;
           P64[Sp + 24] = _s5gpi::P64;
           if (R1 & 7 != 0) goto u5gS0; else goto c5gRy;
       u5gS0: // global
           call _c5gRw(R1) args: 0, res: 0, upd: 0;
       c5gRy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5gRp: // global
           I64[Sp + 8] = block_c5gRL_info;
           _s5gpm::P64 = P64[R1 + 6];
           R1 = _s5gpg::P64;
           P64[Sp + 24] = _s5gpm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5gS1; else goto c5gRN;
       u5gS1: // global
           call _c5gRL(R1) args: 0, res: 0, upd: 0;
       c5gRN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gRw() //  [R1]
         { info_tbl: [(c5gRw,
                       label: block_c5gRw_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gRw: // global
           if (R1 & 7 == 1) goto c5gRE; else goto c5gRI;
       c5gRE: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
       c5gRI: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5gRL() //  [R1]
         { info_tbl: [(c5gRL,
                       label: block_c5gRL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gRL: // global
           if (R1 & 7 == 1) goto c5gRT; else goto c5gRX;
       c5gRT: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5gRX: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.464787787 UTC

[section ""data" . Data.Either.$fEqEither_$c==_closure" {
     Data.Either.$fEqEither_$c==_closure:
         const Data.Either.$fEqEither_$c==_info;
 },
 Data.Either.$fEqEither_$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gSO,
                       label: Data.Either.$fEqEither_$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gSO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gSP; else goto c5gSQ;
       c5gSP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gSQ: // global
           I64[Sp - 32] = block_c5gSH_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gTr; else goto c5gSI;
       u5gTr: // global
           call _c5gSH(R1) args: 0, res: 0, upd: 0;
       c5gSI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gSH() //  [R1]
         { info_tbl: [(c5gSH,
                       label: block_c5gSH_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gSH: // global
           _s5gpt::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5gSL; else goto c5gSM;
       c5gSL: // global
           I64[Sp] = block_c5gST_info;
           _s5gpv::P64 = P64[R1 + 7];
           R1 = _s5gpt::P64;
           P64[Sp + 24] = _s5gpv::P64;
           if (R1 & 7 != 0) goto u5gTp; else goto c5gSV;
       u5gTp: // global
           call _c5gST(R1) args: 0, res: 0, upd: 0;
       c5gSV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5gSM: // global
           I64[Sp + 8] = block_c5gT8_info;
           _s5gpz::P64 = P64[R1 + 6];
           R1 = _s5gpt::P64;
           P64[Sp + 24] = _s5gpz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5gTq; else goto c5gTa;
       u5gTq: // global
           call _c5gT8(R1) args: 0, res: 0, upd: 0;
       c5gTa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gST() //  [R1]
         { info_tbl: [(c5gST,
                       label: block_c5gST_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gST: // global
           if (R1 & 7 == 1) goto c5gT1; else goto u5gTo;
       c5gT1: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
       u5gTo: // global
           Sp = Sp + 32;
           call _c5gTg() args: 0, res: 0, upd: 0;
     }
 },
 _c5gT8() //  [R1]
         { info_tbl: [(c5gT8,
                       label: block_c5gT8_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gT8: // global
           if (R1 & 7 == 1) goto u5gTn; else goto c5gTk;
       u5gTn: // global
           Sp = Sp + 24;
           call _c5gTg() args: 0, res: 0, upd: 0;
       c5gTk: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c5gTg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gTg: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.480937899 UTC

[section ""data" . Data.Either.$fEqEither_$c/=_closure" {
     Data.Either.$fEqEither_$c/=_closure:
         const Data.Either.$fEqEither_$c/=_info;
 },
 Data.Either.$fEqEither_$c/=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gUf,
                       label: Data.Either.$fEqEither_$c/=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gUf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gUg; else goto c5gUh;
       c5gUg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_$c/=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gUh: // global
           I64[Sp - 32] = block_c5gU8_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gVk; else goto c5gU9;
       u5gVk: // global
           call _c5gU8(R1) args: 0, res: 0, upd: 0;
       c5gU9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gU8() //  [R1]
         { info_tbl: [(c5gU8,
                       label: block_c5gU8_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gU8: // global
           _s5gpG::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5gUc; else goto c5gUd;
       c5gUc: // global
           I64[Sp] = block_c5gUk_info;
           _s5gpI::P64 = P64[R1 + 7];
           R1 = _s5gpG::P64;
           P64[Sp + 24] = _s5gpI::P64;
           if (R1 & 7 != 0) goto u5gVi; else goto c5gUm;
       u5gVi: // global
           call _c5gUk(R1) args: 0, res: 0, upd: 0;
       c5gUm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5gUd: // global
           I64[Sp + 8] = block_c5gUK_info;
           _s5gpN::P64 = P64[R1 + 6];
           R1 = _s5gpG::P64;
           P64[Sp + 24] = _s5gpN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5gVj; else goto c5gUM;
       u5gVj: // global
           call _c5gUK(R1) args: 0, res: 0, upd: 0;
       c5gUM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gUk() //  [R1]
         { info_tbl: [(c5gUk,
                       label: block_c5gUk_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gUk: // global
           if (R1 & 7 == 1) goto c5gUt; else goto u5gVf;
       c5gUt: // global
           _s5gpI::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5gUq_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5gpI::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u5gVf: // global
           Sp = Sp + 32;
           call _c5gV3() args: 0, res: 0, upd: 0;
     }
 },
 _c5gUq() //  [R1]
         { info_tbl: [(c5gUq,
                       label: block_c5gUq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gUq: // global
           if (R1 & 7 == 1) goto u5gVg; else goto u5gVh;
       u5gVg: // global
           Sp = Sp + 8;
           call _c5gV3() args: 0, res: 0, upd: 0;
       u5gVh: // global
           Sp = Sp + 8;
           call _c5gV7() args: 0, res: 0, upd: 0;
     }
 },
 _c5gUK() //  [R1]
         { info_tbl: [(c5gUK,
                       label: block_c5gUK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gUK: // global
           if (R1 & 7 == 1) goto u5gVc; else goto c5gUX;
       u5gVc: // global
           Sp = Sp + 24;
           call _c5gV3() args: 0, res: 0, upd: 0;
       c5gUX: // global
           _s5gpN::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5gUV_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5gpN::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5gUV() //  [R1]
         { info_tbl: [(c5gUV,
                       label: block_c5gUV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gUV: // global
           if (R1 & 7 == 1) goto u5gVd; else goto u5gVe;
       u5gVd: // global
           Sp = Sp + 8;
           call _c5gV3() args: 0, res: 0, upd: 0;
       u5gVe: // global
           Sp = Sp + 8;
           call _c5gV7() args: 0, res: 0, upd: 0;
     }
 },
 _c5gV3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gV3: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5gV7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gV7: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.504067061 UTC

[section ""data" . Data.Either.$fEqEither_closure" {
     Data.Either.$fEqEither_closure:
         const Data.Either.$fEqEither_info;
 },
 sat_s5gpV_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gWo,
                       label: sat_s5gpV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gWo: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c/=_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gpU_entry() //  [R1, R2, R3]
         { info_tbl: [(c5gWw,
                       label: sat_s5gpU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gWw: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fEqEither_$c==_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Either.$fEqEither_entry() //  [R2, R3]
         { info_tbl: [(c5gWA,
                       label: Data.Either.$fEqEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gWA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5gWE; else goto c5gWD;
       c5gWE: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fEqEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gWD: // global
           I64[Hp - 64] = sat_s5gpV_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s5gpU_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.512469249 UTC

[section ""data" . Data.Either.$fOrdEither_$cp1Ord_closure" {
     Data.Either.$fOrdEither_$cp1Ord_closure:
         const Data.Either.$fOrdEither_$cp1Ord_info;
 },
 sat_s5gpZ_entry() //  [R1]
         { info_tbl: [(c5gX3,
                       label: sat_s5gpZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gX3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gX4; else goto c5gX5;
       c5gX4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gX5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5gpY_entry() //  [R1]
         { info_tbl: [(c5gXa,
                       label: sat_s5gpY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gXa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5gXb; else goto c5gXc;
       c5gXb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5gXc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_$cp1Ord_entry() //  [R2, R3]
         { info_tbl: [(c5gXd,
                       label: Data.Either.$fOrdEither_$cp1Ord_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gXd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5gXh; else goto c5gXg;
       c5gXh: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cp1Ord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gXg: // global
           I64[Hp - 40] = sat_s5gpZ_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s5gpY_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Either.$fEqEither_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.522201011 UTC

[section ""data" . Data.Either.$fOrdEither_$c<=_closure" {
     Data.Either.$fOrdEither_$c<=_closure:
         const Data.Either.$fOrdEither_$c<=_info;
 },
 Data.Either.$fOrdEither_$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gXJ,
                       label: Data.Either.$fOrdEither_$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gXJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5gXK; else goto c5gXL;
       c5gXK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gXL: // global
           I64[Sp - 32] = block_c5gXC_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5gYO; else goto c5gXD;
       u5gYO: // global
           call _c5gXC(R1) args: 0, res: 0, upd: 0;
       c5gXD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gXC() //  [R1]
         { info_tbl: [(c5gXC,
                       label: block_c5gXC_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gXC: // global
           _s5gq2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5gXG; else goto c5gXH;
       c5gXG: // global
           I64[Sp] = block_c5gXO_info;
           _s5gq5::P64 = P64[R1 + 7];
           R1 = _s5gq2::P64;
           P64[Sp + 24] = _s5gq5::P64;
           if (R1 & 7 != 0) goto u5gYM; else goto c5gXQ;
       u5gYM: // global
           call _c5gXO(R1) args: 0, res: 0, upd: 0;
       c5gXQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5gXH: // global
           I64[Sp + 8] = block_c5gYe_info;
           _s5gqa::P64 = P64[R1 + 6];
           R1 = _s5gq2::P64;
           P64[Sp + 24] = _s5gqa::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5gYN; else goto c5gYg;
       u5gYN: // global
           call _c5gYe(R1) args: 0, res: 0, upd: 0;
       c5gYg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gXO() //  [R1]
         { info_tbl: [(c5gXO,
                       label: block_c5gXO_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gXO: // global
           if (R1 & 7 == 1) goto c5gXX; else goto u5gYJ;
       c5gXX: // global
           _s5gq5::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5gXU_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5gq5::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5gYJ: // global
           Sp = Sp + 32;
           call _c5gYB() args: 0, res: 0, upd: 0;
     }
 },
 _c5gXU() //  [R1]
         { info_tbl: [(c5gXU,
                       label: block_c5gXU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gXU: // global
           if (R1 & 7 == 1) goto u5gYK; else goto u5gYL;
       u5gYK: // global
           Sp = Sp + 8;
           call _c5gYx() args: 0, res: 0, upd: 0;
       u5gYL: // global
           Sp = Sp + 8;
           call _c5gYB() args: 0, res: 0, upd: 0;
     }
 },
 _c5gYe() //  [R1]
         { info_tbl: [(c5gYe,
                       label: block_c5gYe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gYe: // global
           if (R1 & 7 == 1) goto u5gYG; else goto c5gYr;
       u5gYG: // global
           Sp = Sp + 24;
           call _c5gYx() args: 0, res: 0, upd: 0;
       c5gYr: // global
           _s5gqa::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5gYp_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5gqa::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5gYp() //  [R1]
         { info_tbl: [(c5gYp,
                       label: block_c5gYp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gYp: // global
           if (R1 & 7 == 1) goto u5gYH; else goto u5gYI;
       u5gYH: // global
           Sp = Sp + 8;
           call _c5gYx() args: 0, res: 0, upd: 0;
       u5gYI: // global
           Sp = Sp + 8;
           call _c5gYB() args: 0, res: 0, upd: 0;
     }
 },
 _c5gYx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gYx: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5gYB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gYB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.539761992 UTC

[section ""data" . Data.Either.$fOrdEither_$cmax_closure" {
     Data.Either.$fOrdEither_$cmax_closure:
         const Data.Either.$fOrdEither_$cmax_info;
 },
 Data.Either.$fOrdEither_$cmax_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5gZU,
                       label: Data.Either.$fOrdEither_$cmax_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gZU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5gZV; else goto c5gZW;
       c5gZV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmax_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5gZW: // global
           I64[Sp - 32] = block_c5gZN_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5h0Y; else goto c5gZO;
       u5h0Y: // global
           call _c5gZN(R1) args: 0, res: 0, upd: 0;
       c5gZO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gZN() //  [R1]
         { info_tbl: [(c5gZN,
                       label: block_c5gZN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gZN: // global
           _s5gqh::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5gZR; else goto c5gZS;
       c5gZR: // global
           I64[Sp] = block_c5gZZ_info;
           _s5gqj::P64 = R1;
           _s5gqk::P64 = P64[R1 + 7];
           R1 = _s5gqh::P64;
           P64[Sp + 16] = _s5gqk::P64;
           P64[Sp + 24] = _s5gqj::P64;
           if (R1 & 7 != 0) goto u5h0W; else goto c5h01;
       u5h0W: // global
           call _c5gZZ(R1) args: 0, res: 0, upd: 0;
       c5h01: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5gZS: // global
           I64[Sp] = block_c5h0p_info;
           _s5gqj::P64 = R1;
           _s5gqp::P64 = P64[R1 + 6];
           R1 = _s5gqh::P64;
           P64[Sp + 8] = _s5gqp::P64;
           P64[Sp + 24] = _s5gqj::P64;
           if (R1 & 7 != 0) goto u5h0X; else goto c5h0r;
       u5h0X: // global
           call _c5h0p(R1) args: 0, res: 0, upd: 0;
       c5h0r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5gZZ() //  [R1]
         { info_tbl: [(c5gZZ,
                       label: block_c5gZZ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5gZZ: // global
           if (R1 & 7 == 1) goto c5h08; else goto u5h0T;
       c5h08: // global
           _s5gqf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5h05_info;
           R2 = _s5gqf::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5h0T: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5h0m() args: 0, res: 0, upd: 0;
     }
 },
 _c5h05() //  [R1]
         { info_tbl: [(c5h05,
                       label: block_c5h05_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h05: // global
           if (R1 & 7 == 1) goto u5h0U; else goto u5h0V;
       u5h0U: // global
           Sp = Sp + 16;
           call _c5h0I() args: 0, res: 0, upd: 0;
       u5h0V: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5h0m() args: 0, res: 0, upd: 0;
     }
 },
 _c5h0m() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h0m: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5h0p() //  [R1]
         { info_tbl: [(c5h0p,
                       label: block_c5h0p_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h0p: // global
           if (R1 & 7 == 1) goto u5h0R; else goto c5h0C;
       u5h0R: // global
           Sp = Sp + 24;
           call _c5h0I() args: 0, res: 0, upd: 0;
       c5h0C: // global
           _s5gqp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5h0A_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5gqp::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5h0A() //  [R1]
         { info_tbl: [(c5h0A,
                       label: block_c5h0A_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h0A: // global
           if (R1 & 7 == 1) goto u5h0S; else goto c5h0M;
       u5h0S: // global
           Sp = Sp + 16;
           call _c5h0I() args: 0, res: 0, upd: 0;
       c5h0M: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5h0I() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h0I: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.559280274 UTC

[section ""data" . Data.Either.$fOrdEither_$c>=_closure" {
     Data.Either.$fOrdEither_$c>=_closure:
         const Data.Either.$fOrdEither_$c>=_info;
 },
 Data.Either.$fOrdEither_$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5h27,
                       label: Data.Either.$fOrdEither_$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h27: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5h28; else goto c5h29;
       c5h28: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5h29: // global
           I64[Sp - 32] = block_c5h20_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5h3c; else goto c5h21;
       u5h3c: // global
           call _c5h20(R1) args: 0, res: 0, upd: 0;
       c5h21: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5h20() //  [R1]
         { info_tbl: [(c5h20,
                       label: block_c5h20_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h20: // global
           _s5gqx::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5h24; else goto c5h25;
       c5h24: // global
           I64[Sp] = block_c5h2c_info;
           _s5gqz::P64 = P64[R1 + 7];
           R1 = _s5gqx::P64;
           P64[Sp + 24] = _s5gqz::P64;
           if (R1 & 7 != 0) goto u5h3a; else goto c5h2e;
       u5h3a: // global
           call _c5h2c(R1) args: 0, res: 0, upd: 0;
       c5h2e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5h25: // global
           I64[Sp + 8] = block_c5h2C_info;
           _s5gqE::P64 = P64[R1 + 6];
           R1 = _s5gqx::P64;
           P64[Sp + 24] = _s5gqE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u5h3b; else goto c5h2E;
       u5h3b: // global
           call _c5h2C(R1) args: 0, res: 0, upd: 0;
       c5h2E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5h2c() //  [R1]
         { info_tbl: [(c5h2c,
                       label: block_c5h2c_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h2c: // global
           if (R1 & 7 == 1) goto c5h2l; else goto u5h37;
       c5h2l: // global
           _s5gqz::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c5h2i_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s5gqz::P64;
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5h37: // global
           Sp = Sp + 32;
           call _c5h2Z() args: 0, res: 0, upd: 0;
     }
 },
 _c5h2i() //  [R1]
         { info_tbl: [(c5h2i,
                       label: block_c5h2i_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h2i: // global
           if (R1 & 7 == 1) goto u5h38; else goto u5h39;
       u5h38: // global
           Sp = Sp + 8;
           call _c5h2V() args: 0, res: 0, upd: 0;
       u5h39: // global
           Sp = Sp + 8;
           call _c5h2Z() args: 0, res: 0, upd: 0;
     }
 },
 _c5h2C() //  [R1]
         { info_tbl: [(c5h2C,
                       label: block_c5h2C_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h2C: // global
           if (R1 & 7 == 1) goto u5h34; else goto c5h2P;
       u5h34: // global
           Sp = Sp + 24;
           call _c5h2V() args: 0, res: 0, upd: 0;
       c5h2P: // global
           _s5gqE::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5h2N_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s5gqE::P64;
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5h2N() //  [R1]
         { info_tbl: [(c5h2N,
                       label: block_c5h2N_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h2N: // global
           if (R1 & 7 == 1) goto u5h35; else goto u5h36;
       u5h35: // global
           Sp = Sp + 8;
           call _c5h2V() args: 0, res: 0, upd: 0;
       u5h36: // global
           Sp = Sp + 8;
           call _c5h2Z() args: 0, res: 0, upd: 0;
     }
 },
 _c5h2V() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h2V: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5h2Z() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h2Z: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.5820317 UTC

[section ""data" . Data.Either.$fOrdEither_$cmin_closure" {
     Data.Either.$fOrdEither_$cmin_closure:
         const Data.Either.$fOrdEither_$cmin_info;
 },
 Data.Either.$fOrdEither_$cmin_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5h4i,
                       label: Data.Either.$fOrdEither_$cmin_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h4i: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5h4j; else goto c5h4k;
       c5h4j: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_$cmin_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5h4k: // global
           I64[Sp - 32] = block_c5h4b_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5h5m; else goto c5h4c;
       u5h5m: // global
           call _c5h4b(R1) args: 0, res: 0, upd: 0;
       c5h4c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5h4b() //  [R1]
         { info_tbl: [(c5h4b,
                       label: block_c5h4b_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h4b: // global
           _s5gqL::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5h4f; else goto c5h4g;
       c5h4f: // global
           I64[Sp] = block_c5h4n_info;
           _s5gqN::P64 = R1;
           _s5gqO::P64 = P64[R1 + 7];
           R1 = _s5gqL::P64;
           P64[Sp + 16] = _s5gqO::P64;
           P64[Sp + 24] = _s5gqN::P64;
           if (R1 & 7 != 0) goto u5h5k; else goto c5h4p;
       u5h5k: // global
           call _c5h4n(R1) args: 0, res: 0, upd: 0;
       c5h4p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5h4g: // global
           I64[Sp] = block_c5h4N_info;
           _s5gqN::P64 = R1;
           _s5gqT::P64 = P64[R1 + 6];
           R1 = _s5gqL::P64;
           P64[Sp + 8] = _s5gqT::P64;
           P64[Sp + 24] = _s5gqN::P64;
           if (R1 & 7 != 0) goto u5h5l; else goto c5h4P;
       u5h5l: // global
           call _c5h4N(R1) args: 0, res: 0, upd: 0;
       c5h4P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5h4n() //  [R1]
         { info_tbl: [(c5h4n,
                       label: block_c5h4n_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h4n: // global
           if (R1 & 7 == 1) goto c5h4w; else goto u5h5i;
       c5h4w: // global
           _s5gqJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5h4t_info;
           R2 = _s5gqJ::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       u5h5i: // global
           Sp = Sp + 24;
           call _c5h5a() args: 0, res: 0, upd: 0;
     }
 },
 _c5h4t() //  [R1]
         { info_tbl: [(c5h4t,
                       label: block_c5h4t_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h4t: // global
           if (R1 & 7 == 1) goto c5h4C; else goto u5h5j;
       c5h4C: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u5h5j: // global
           Sp = Sp + 16;
           call _c5h5a() args: 0, res: 0, upd: 0;
     }
 },
 _c5h4N() //  [R1]
         { info_tbl: [(c5h4N,
                       label: block_c5h4N_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h4N: // global
           if (R1 & 7 == 1) goto u5h5f; else goto c5h50;
       u5h5f: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call _c5h56() args: 0, res: 0, upd: 0;
       c5h50: // global
           _s5gqT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5h4Y_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s5gqT::P64;
           P64[Sp] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5h4Y() //  [R1]
         { info_tbl: [(c5h4Y,
                       label: block_c5h4Y_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h4Y: // global
           if (R1 & 7 == 1) goto u5h5g; else goto u5h5h;
       u5h5g: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5h56() args: 0, res: 0, upd: 0;
       u5h5h: // global
           Sp = Sp + 16;
           call _c5h5a() args: 0, res: 0, upd: 0;
     }
 },
 _c5h56() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h56: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5h5a() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h5a: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.599438476 UTC

[section ""data" . Data.Either.$fOrdEither_closure" {
     Data.Either.$fOrdEither_closure:
         const Data.Either.$fOrdEither_info;
 },
 sat_s5gr9_entry() //  [R1, R2, R3]
         { info_tbl: [(c5h6t,
                       label: sat_s5gr9_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h6t: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmin_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gr8_entry() //  [R1, R2, R3]
         { info_tbl: [(c5h6B,
                       label: sat_s5gr8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h6B: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$cmax_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gr7_entry() //  [R1, R2, R3]
         { info_tbl: [(c5h6J,
                       label: sat_s5gr7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h6J: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c>=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gr6_entry() //  [R1, R2, R3]
         { info_tbl: [(c5h6R,
                       label: sat_s5gr6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h6R: // global
           R5 = R2;
           R4 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gr3_entry() //  [R1, R2, R3]
         { info_tbl: [(c5h6Z,
                       label: sat_s5gr3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h6Z: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<=_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gr2_entry() //  [R1, R2, R3]
         { info_tbl: [(c5h77,
                       label: sat_s5gr2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h77: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$c<_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gr1_entry() //  [R1, R2, R3]
         { info_tbl: [(c5h7f,
                       label: sat_s5gr1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h7f: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Either.$fOrdEither_$ccompare_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5gr0_entry() //  [R1]
         { info_tbl: [(c5h7m,
                       label: sat_s5gr0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h7m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5h7n; else goto c5h7o;
       c5h7n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5h7o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Either.$fOrdEither_$cp1Ord_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$fOrdEither_entry() //  [R2, R3]
         { info_tbl: [(c5h7q,
                       label: Data.Either.$fOrdEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h7q: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto c5h7u; else goto c5h7t;
       c5h7u: // global
           HpAlloc = 272;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.$fOrdEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5h7t: // global
           I64[Hp - 264] = sat_s5gr9_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           I64[Hp - 240] = sat_s5gr8_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           I64[Hp - 216] = sat_s5gr7_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           I64[Hp - 192] = sat_s5gr6_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           I64[Hp - 168] = sat_s5gr3_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s5gr2_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s5gr1_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s5gr0_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = Hp - 118;
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = Hp - 166;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 214;
           P64[Hp - 8] = Hp - 238;
           P64[Hp] = Hp - 262;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.620410452 UTC

[section ""data" . Data.Either.either_closure" {
     Data.Either.either_closure:
         const Data.Either.either_info;
 },
 Data.Either.either_entry() //  [R2, R3, R4]
         { info_tbl: [(c5h8s,
                       label: Data.Either.either_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h8s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5h8t; else goto c5h8u;
       c5h8t: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.either_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5h8u: // global
           I64[Sp - 24] = block_c5h8l_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5h8B; else goto c5h8m;
       u5h8B: // global
           call _c5h8l(R1) args: 0, res: 0, upd: 0;
       c5h8m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5h8l() //  [R1]
         { info_tbl: [(c5h8l,
                       label: block_c5h8l_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h8l: // global
           if (R1 & 7 == 1) goto c5h8p; else goto c5h8q;
       c5h8p: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c5h8q: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.628172486 UTC

[section ""data" . Data.Either.$wpartitionEithers_closure" {
     Data.Either.$wpartitionEithers_closure:
         const Data.Either.$wpartitionEithers_info;
 },
 eta_s5grk_entry() //  [R1]
         { info_tbl: [(c5h95,
                       label: eta_s5grk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h95: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5h96; else goto c5h97;
       c5h96: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5h97: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5h92_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5h92() //  [R1, R2]
         { info_tbl: [(c5h92,
                       label: block_c5h92_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h92: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5h9a; else goto c5h99;
       c5h9a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5h99: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Either.$wpartitionEithers_entry() //  [R2]
         { info_tbl: [(c5h9f,
                       label: Data.Either.$wpartitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h9f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5h9g; else goto c5h9h;
       c5h9g: // global
           R2 = R2;
           R1 = Data.Either.$wpartitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5h9h: // global
           I64[Sp - 8] = block_c5h8S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5h9L; else goto c5h8T;
       u5h9L: // global
           call _c5h8S(R1) args: 0, res: 0, upd: 0;
       c5h8T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5h8S() //  [R1]
         { info_tbl: [(c5h8S,
                       label: block_c5h8S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h8S: // global
           if (R1 & 7 == 1) goto c5h9c; else goto c5h9d;
       c5h9c: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5h9d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5h9n; else goto c5h9m;
       c5h9n: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5h9m: // global
           _s5gri::P64 = P64[R1 + 6];
           _s5grj::P64 = P64[R1 + 14];
           I64[Hp - 16] = eta_s5grk_info;
           P64[Hp] = _s5grj::P64;
           I64[Sp - 8] = block_c5h9k_info;
           R1 = _s5gri::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5h9K; else goto c5h9o;
       u5h9K: // global
           call _c5h9k(R1) args: 0, res: 0, upd: 0;
       c5h9o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5h9k() //  [R1]
         { info_tbl: [(c5h9k,
                       label: block_c5h9k_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5h9k: // global
           _c5h8Y::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5h9w; else goto c5h9F;
       c5h9w: // global
           Hp = Hp + 72;
           _s5gro::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5h9I; else goto c5h9y;
       c5h9y: // global
           _s5grp::P64 = P64[_s5gro::P64 + 7];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5h8Y::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5h8Y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5grp::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5h9F: // global
           Hp = Hp + 72;
           _s5gro::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5h9I; else goto c5h9H;
       c5h9I: // global
           HpAlloc = 72;
           R1 = _s5gro::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5h9H: // global
           _s5grz::P64 = P64[_s5gro::P64 + 6];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5h8Y::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5grz::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5h8Y::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.641919012 UTC

[section ""data" . Data.Either.partitionEithers_closure" {
     Data.Either.partitionEithers_closure:
         const Data.Either.partitionEithers_info;
 },
 Data.Either.partitionEithers_entry() //  [R2]
         { info_tbl: [(c5haC,
                       label: Data.Either.partitionEithers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5haC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5haD; else goto c5haE;
       c5haD: // global
           R2 = R2;
           R1 = Data.Either.partitionEithers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5haE: // global
           I64[Sp - 8] = block_c5haz_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Either.$wpartitionEithers_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5haz() //  [R1, R2]
         { info_tbl: [(c5haz,
                       label: block_c5haz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5haz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5haH; else goto c5haG;
       c5haH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5haG: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.648720245 UTC

[section ""data" . poly_go_r5exd_closure" {
     poly_go_r5exd_closure:
         const poly_go_r5exd_info;
 },
 sat_s5grT_entry() //  [R1]
         { info_tbl: [(c5hbc,
                       label: sat_s5grT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hbc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hbd; else goto c5hbe;
       c5hbd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hbe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5exd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5exd_entry() //  [R2]
         { info_tbl: [(c5hbj,
                       label: poly_go_r5exd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hbj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hbk; else goto u5hbA;
       c5hbk: // global
           R2 = R2;
           R1 = poly_go_r5exd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5hbA: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5haU() args: 0, res: 0, upd: 0;
     }
 },
 _c5haU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5haU: // global
           _s5grN::P64 = P64[Sp];
           I64[Sp] = block_c5haX_info;
           R1 = _s5grN::P64;
           if (R1 & 7 != 0) goto u5hbC; else goto c5haY;
       u5hbC: // global
           call _c5haX(R1) args: 0, res: 0, upd: 0;
       c5haY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5haX() //  [R1]
         { info_tbl: [(c5haX,
                       label: block_c5haX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5haX: // global
           if (R1 & 7 == 1) goto c5hbg; else goto c5hbh;
       c5hbg: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hbh: // global
           I64[Sp - 8] = block_c5hb3_info;
           _s5grQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5grQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hbD; else goto c5hb4;
       u5hbD: // global
           call _c5hb3(R1) args: 0, res: 0, upd: 0;
       c5hb4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hb3() //  [R1]
         { info_tbl: [(c5hb3,
                       label: block_c5hb3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hb3: // global
           _s5grQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5hbr; else goto c5hby;
       c5hbr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hbu; else goto c5hbt;
       c5hbu: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hbt: // global
           _s5grS::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s5grT_info;
           P64[Hp - 24] = _s5grQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5grS::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hby: // global
           P64[Sp + 8] = _s5grQ::P64;
           Sp = Sp + 8;
           call _c5haU() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.66361325 UTC

[section ""data" . Data.Either.lefts_closure" {
     Data.Either.lefts_closure:
         const Data.Either.lefts_info;
 },
 Data.Either.lefts_entry() //  [R2]
         { info_tbl: [(c5hcg,
                       label: Data.Either.lefts_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hcg: // global
           R2 = R2;
           call poly_go_r5exd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.667533246 UTC

[section ""data" . poly_go1_r5exe_closure" {
     poly_go1_r5exe_closure:
         const poly_go1_r5exe_info;
 },
 sat_s5gs3_entry() //  [R1]
         { info_tbl: [(c5hcH,
                       label: sat_s5gs3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hcH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hcI; else goto c5hcJ;
       c5hcI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hcJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5exe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5exe_entry() //  [R2]
         { info_tbl: [(c5hcO,
                       label: poly_go1_r5exe_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hcO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hcP; else goto u5hd4;
       c5hcP: // global
           R2 = R2;
           R1 = poly_go1_r5exe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5hd4: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5hco() args: 0, res: 0, upd: 0;
     }
 },
 _c5hco() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hco: // global
           _s5grW::P64 = P64[Sp];
           I64[Sp] = block_c5hcr_info;
           R1 = _s5grW::P64;
           if (R1 & 7 != 0) goto u5hd6; else goto c5hcs;
       u5hd6: // global
           call _c5hcr(R1) args: 0, res: 0, upd: 0;
       c5hcs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hcr() //  [R1]
         { info_tbl: [(c5hcr,
                       label: block_c5hcr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hcr: // global
           if (R1 & 7 == 1) goto c5hcL; else goto c5hcM;
       c5hcL: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hcM: // global
           I64[Sp - 8] = block_c5hcx_info;
           _s5grZ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5grZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hd7; else goto c5hcy;
       u5hd7: // global
           call _c5hcx(R1) args: 0, res: 0, upd: 0;
       c5hcy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hcx() //  [R1]
         { info_tbl: [(c5hcx,
                       label: block_c5hcx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hcx: // global
           _s5grZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5hcX; else goto c5hcZ;
       c5hcX: // global
           P64[Sp + 8] = _s5grZ::P64;
           Sp = Sp + 8;
           call _c5hco() args: 0, res: 0, upd: 0;
       c5hcZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hd2; else goto c5hd1;
       c5hd2: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hd1: // global
           _s5gs2::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5gs3_info;
           P64[Hp - 24] = _s5grZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5gs2::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.678775438 UTC

[section ""data" . Data.Either.rights_closure" {
     Data.Either.rights_closure:
         const Data.Either.rights_info;
 },
 Data.Either.rights_entry() //  [R2]
         { info_tbl: [(c5hdK,
                       label: Data.Either.rights_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hdK: // global
           R2 = R2;
           call poly_go1_r5exe_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.682638397 UTC

[section ""data" . Data.Either.isLeft_closure" {
     Data.Either.isLeft_closure:
         const Data.Either.isLeft_info;
 },
 Data.Either.isLeft_entry() //  [R2]
         { info_tbl: [(c5he2,
                       label: Data.Either.isLeft_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5he2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5he3; else goto c5he4;
       c5he3: // global
           R2 = R2;
           R1 = Data.Either.isLeft_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5he4: // global
           I64[Sp - 8] = block_c5hdV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5heb; else goto c5hdW;
       u5heb: // global
           call _c5hdV(R1) args: 0, res: 0, upd: 0;
       c5hdW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hdV() //  [R1]
         { info_tbl: [(c5hdV,
                       label: block_c5hdV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hdV: // global
           if (R1 & 7 == 1) goto c5hdZ; else goto c5he0;
       c5hdZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5he0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.688615587 UTC

[section ""data" . Data.Either.isRight_closure" {
     Data.Either.isRight_closure:
         const Data.Either.isRight_info;
 },
 Data.Either.isRight_entry() //  [R2]
         { info_tbl: [(c5heD,
                       label: Data.Either.isRight_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5heD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5heE; else goto c5heF;
       c5heE: // global
           R2 = R2;
           R1 = Data.Either.isRight_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5heF: // global
           I64[Sp - 8] = block_c5hew_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5heM; else goto c5hex;
       u5heM: // global
           call _c5hew(R1) args: 0, res: 0, upd: 0;
       c5hex: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hew() //  [R1]
         { info_tbl: [(c5hew,
                       label: block_c5hew_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hew: // global
           if (R1 & 7 == 1) goto c5heA; else goto c5heB;
       c5heA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5heB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.695347757 UTC

[section ""data" . Data.Either.fromLeft_closure" {
     Data.Either.fromLeft_closure:
         const Data.Either.fromLeft_info;
 },
 Data.Either.fromLeft_entry() //  [R2, R3]
         { info_tbl: [(c5hfe,
                       label: Data.Either.fromLeft_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hfe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hff; else goto c5hfg;
       c5hff: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromLeft_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hfg: // global
           I64[Sp - 16] = block_c5hf7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5hfn; else goto c5hf8;
       u5hfn: // global
           call _c5hf7(R1) args: 0, res: 0, upd: 0;
       c5hf8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hf7() //  [R1]
         { info_tbl: [(c5hf7,
                       label: block_c5hf7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hf7: // global
           if (R1 & 7 == 1) goto c5hfb; else goto c5hfc;
       c5hfb: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5hfc: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.701031914 UTC

[section ""data" . Data.Either.fromRight_closure" {
     Data.Either.fromRight_closure:
         const Data.Either.fromRight_info;
 },
 Data.Either.fromRight_entry() //  [R2, R3]
         { info_tbl: [(c5hfL,
                       label: Data.Either.fromRight_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hfL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hfM; else goto c5hfN;
       c5hfM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Either.fromRight_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hfN: // global
           I64[Sp - 16] = block_c5hfE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5hfU; else goto c5hfF;
       u5hfU: // global
           call _c5hfE(R1) args: 0, res: 0, upd: 0;
       c5hfF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hfE() //  [R1]
         { info_tbl: [(c5hfE,
                       label: block_c5hfE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hfE: // global
           if (R1 & 7 == 1) goto c5hfI; else goto c5hfJ;
       c5hfI: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5hfJ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.707029477 UTC

[section ""cstring" . Data.Either.$trModule4_bytes" {
     Data.Either.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.708731197 UTC

[section ""data" . Data.Either.$trModule3_closure" {
     Data.Either.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.710467479 UTC

[section ""cstring" . Data.Either.$trModule2_bytes" {
     Data.Either.$trModule2_bytes:
         I8[] [68,97,116,97,46,69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.712175151 UTC

[section ""data" . Data.Either.$trModule1_closure" {
     Data.Either.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.713935429 UTC

[section ""data" . Data.Either.$trModule_closure" {
     Data.Either.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Either.$trModule3_closure+1;
         const Data.Either.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.715638213 UTC

[section ""data" . $krep_r5exf_closure" {
     $krep_r5exf_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.717589714 UTC

[section ""data" . $krep1_r5exg_closure" {
     $krep1_r5exg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.719330508 UTC

[section ""cstring" . Data.Either.$tcEither2_bytes" {
     Data.Either.$tcEither2_bytes:
         I8[] [69,105,116,104,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.720941792 UTC

[section ""data" . Data.Either.$tcEither1_closure" {
     Data.Either.$tcEither1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tcEither2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.723540957 UTC

[section ""data" . Data.Either.$tcEither_closure" {
     Data.Either.$tcEither_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tcEither1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 16074290893719807138;
         const 14958199358864670905;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.725553765 UTC

[section ""data" . $krep2_r5exh_closure" {
     $krep2_r5exh_closure:
         const :_con_info;
         const $krep_r5exf_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.727479493 UTC

[section ""data" . $krep3_r5exi_closure" {
     $krep3_r5exi_closure:
         const :_con_info;
         const $krep1_r5exg_closure+2;
         const $krep2_r5exh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.729146957 UTC

[section ""data" . $krep4_r5exj_closure" {
     $krep4_r5exj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Either.$tcEither_closure+1;
         const $krep3_r5exi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.731134678 UTC

[section ""data" . Data.Either.$tc'Left1_closure" {
     Data.Either.$tc'Left1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5exg_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.73298056 UTC

[section ""cstring" . Data.Either.$tc'Left3_bytes" {
     Data.Either.$tc'Left3_bytes:
         I8[] [39,76,101,102,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.735184046 UTC

[section ""data" . Data.Either.$tc'Left2_closure" {
     Data.Either.$tc'Left2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Left3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.736921407 UTC

[section ""data" . Data.Either.$tc'Left_closure" {
     Data.Either.$tc'Left_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Left2_closure+1;
         const Data.Either.$tc'Left1_closure+4;
         const 14915236324383360020;
         const 11027491440201056612;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.738837874 UTC

[section ""data" . Data.Either.$tc'Right1_closure" {
     Data.Either.$tc'Right1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5exf_closure+2;
         const $krep4_r5exj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.740644808 UTC

[section ""cstring" . Data.Either.$tc'Right3_bytes" {
     Data.Either.$tc'Right3_bytes:
         I8[] [39,82,105,103,104,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.742375222 UTC

[section ""data" . Data.Either.$tc'Right2_closure" {
     Data.Either.$tc'Right2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Either.$tc'Right3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.744093808 UTC

[section ""data" . Data.Either.$tc'Right_closure" {
     Data.Either.$tc'Right_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Either.$trModule_closure+1;
         const Data.Either.$tc'Right2_closure+1;
         const Data.Either.$tc'Right1_closure+4;
         const 10395468319011834275;
         const 16371021254350888909;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.7462941 UTC

[section ""data" . Data.Either.Left_closure" {
     Data.Either.Left_closure:
         const Data.Either.Left_info;
 },
 Data.Either.Left_entry() //  [R2]
         { info_tbl: [(c5hgx,
                       label: Data.Either.Left_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hgx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hgB; else goto c5hgA;
       c5hgB: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Left_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hgA: // global
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.7518759 UTC

[section ""data" . Data.Either.Right_closure" {
     Data.Either.Right_closure:
         const Data.Either.Right_info;
 },
 Data.Either.Right_entry() //  [R2]
         { info_tbl: [(c5hgN,
                       label: Data.Either.Right_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hgN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hgR; else goto c5hgQ;
       c5hgR: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Either.Right_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hgQ: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.755880125 UTC

[Data.Either.Left_con_entry() //  [R1]
         { info_tbl: [(c5hgY,
                       label: Data.Either.Left_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,76,101,102,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hgY: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.759228214 UTC

[Data.Either.Right_con_entry() //  [R1]
         { info_tbl: [(c5hh5,
                       label: Data.Either.Right_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,68,97,116,97,46,69,105,116,104,101,114,46,82,105,103,104,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hh5: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.76290312 UTC

[section ""relreadonly" . S5gu0_srt" {
     S5gu0_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Either.$fSemigroupEither2_closure;
         const Data.Either.$fSemigroupEither_$cstimes_closure;
         const Data.Either.$fSemigroupEither1_closure;
         const Data.Either.$fShowEither4_closure;
         const Data.Either.$fShowEither2_closure;
         const Data.Either.$w$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshowsPrec_closure;
         const Data.Either.$fShowEither_$cshow_closure;
         const Data.Either.$fShowEither_$cshowList_closure;
         const Data.Either.$fShowEither_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Either.$fReadEither_lexeme1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Either.$fReadEither_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Either.$fReadEither1_closure;
         const Data.Either.$fReadEither_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Either.$fReadEither_$creadListPrec_closure;
         const Data.Either.$fReadEither_$creadList_closure;
         const Data.Either.$fReadEither_closure;
 }]

