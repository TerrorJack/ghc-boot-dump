
==================== Tidy Core ====================
2018-03-16 16:06:57.460236406 UTC

Result size of Tidy Core
  = {terms: 107, types: 123, coercions: 73, joins: 0/0}

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
fromString [InlPrag=INLINE] :: forall a. IsString a => String -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_ac3bT) (v_B1 [Occ=Once] :: IsString a_ac3bT) ->
                 v_B1
                 `cast` (Data.String.N:IsString[0] <a_ac3bT>_N
                         :: (IsString a_ac3bT :: Constraint) ~R# (String -> a_ac3bT :: *))}]
fromString
  = \ (@ a_ac3bT) (v_B1 :: IsString a_ac3bT) ->
      v_B1
      `cast` (Data.String.N:IsString[0] <a_ac3bT>_N
              :: (IsString a_ac3bT :: Constraint) ~R# (String -> a_ac3bT :: *))

-- RHS size: {terms: 8, types: 21, coercions: 9, joins: 0/0}
Data.String.$fIsString[]_$cfromString
  :: forall a. ((a :: *) ~ (Char :: *)) => String -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_ac3df)
                 ($d~_ac3dg [Occ=Once] :: (a_ac3df :: *) ~ (Char :: *))
                 (eta_B1 [Occ=Once] :: String) ->
                 case GHC.Types.heq_sel
                        @ *
                        @ *
                        @ a_ac3df
                        @ Char
                        ($d~_ac3dg
                         `cast` (Data.Type.Equality.N:~[0] <*>_N <a_ac3df>_N <Char>_N
                                 :: ((a_ac3df :: *) ~ (Char :: *) :: Constraint)
                                    ~R# ((a_ac3df :: *) ~~ (Char :: *) :: Constraint)))
                 of co_ac3dw
                 { __DEFAULT ->
                 eta_B1
                 `cast` (([Sub (Sym co_ac3dw)])_R
                         :: ([Char] :: *) ~R# ([a_ac3df] :: *))
                 }}]
Data.String.$fIsString[]_$cfromString
  = \ (@ a_ac3df)
      ($d~_ac3dg :: (a_ac3df :: *) ~ (Char :: *))
      (eta_B1 :: String) ->
      case GHC.Types.heq_sel
             @ *
             @ *
             @ a_ac3df
             @ Char
             ($d~_ac3dg
              `cast` (Data.Type.Equality.N:~[0] <*>_N <a_ac3df>_N <Char>_N
                      :: ((a_ac3df :: *) ~ (Char :: *) :: Constraint)
                         ~R# ((a_ac3df :: *) ~~ (Char :: *) :: Constraint)))
      of co_ac3dw
      { __DEFAULT ->
      eta_B1
      `cast` (([Sub (Sym co_ac3dw)])_R
              :: ([Char] :: *) ~R# ([a_ac3df] :: *))
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
Data.String.$fIsString[] [InlPrag=INLINE (sat-args=0)]
  :: forall a. ((a :: *) ~ (Char :: *)) => IsString [a]
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= Data.String.$fIsString[]_$cfromString
               `cast` (forall (a :: <*>_N).
                       <(a :: *) ~ (Char :: *)>_R
                       ->_R Sym (Data.String.N:IsString[0]) <[a]>_N
                       :: (forall a. ((a :: *) ~ (Char :: *)) => String -> [a] :: *)
                          ~R# (forall a. ((a :: *) ~ (Char :: *)) => IsString [a] :: *))}]
Data.String.$fIsString[]
  = Data.String.$fIsString[]_$cfromString
    `cast` (forall (a :: <*>_N).
            <(a :: *) ~ (Char :: *)>_R
            ->_R Sym (Data.String.N:IsString[0]) <[a]>_N
            :: (forall a. ((a :: *) ~ (Char :: *)) => String -> [a] :: *)
               ~R# (forall a. ((a :: *) ~ (Char :: *)) => IsString [a] :: *))

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
$fIsStringConst1_rc3eM :: forall a b. IsString a => IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
$fIsStringConst1_rc3eM
  = \ (@ a_Xc3dn)
      (@ b_Xc3dp)
      ($dIsString_Xc3dr :: IsString a_Xc3dn) ->
      $dIsString_Xc3dr

-- RHS size: {terms: 1, types: 0, coercions: 29, joins: 0/0}
Data.String.$fIsStringConst [InlPrag=INLINE (sat-args=0)]
  :: forall a b. IsString a => IsString (Const a b)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= (\ (@ a_Xc3dU)
                  (@ b_Xc3dt)
                  ($dIsString_Xc3dv [Occ=Once] :: IsString a_Xc3dU) ->
                  $dIsString_Xc3dv)
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <IsString a>_R
                       ->_R Data.String.N:IsString[0] <a>_N ; ((<[Char]>_R
                                                                ->_R Sym (Data.Functor.Const.N:Const[0]
                                                                              <*>_N
                                                                              <a>_R
                                                                              <b>_P)) ; Sym (Data.String.N:IsString[0]) <Const
                                                                                                                           a
                                                                                                                           b>_N)
                       :: (forall a b. IsString a => IsString a :: *)
                          ~R# (forall a b. IsString a => IsString (Const a b) :: *))}]
Data.String.$fIsStringConst
  = $fIsStringConst1_rc3eM
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <IsString a>_R
            ->_R Data.String.N:IsString[0] <a>_N ; ((<[Char]>_R
                                                     ->_R Sym (Data.Functor.Const.N:Const[0]
                                                                   <*>_N
                                                                   <a>_R
                                                                   <b>_P)) ; Sym (Data.String.N:IsString[0]) <Const
                                                                                                                a
                                                                                                                b>_N)
            :: (forall a b. IsString a => IsString a :: *)
               ~R# (forall a b. IsString a => IsString (Const a b) :: *))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$fIsStringIdentity1_rc3eN :: forall a. IsString a => IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
$fIsStringIdentity1_rc3eN
  = \ (@ a_Xc3dh) ($dIsString_Xc3dj :: IsString a_Xc3dh) ->
      $dIsString_Xc3dj

-- RHS size: {terms: 1, types: 0, coercions: 20, joins: 0/0}
Data.String.$fIsStringIdentity [InlPrag=INLINE (sat-args=0)]
  :: forall a. IsString a => IsString (Identity a)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= (\ (@ a_Xc3dk)
                  ($dIsString_Xc3dm [Occ=Once] :: IsString a_Xc3dk) ->
                  $dIsString_Xc3dm)
               `cast` (forall (a :: <*>_N).
                       <IsString a>_R
                       ->_R Data.String.N:IsString[0] <a>_N ; ((<[Char]>_R
                                                                ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                                              <a>_R)) ; Sym (Data.String.N:IsString[0]) <Identity
                                                                                                                           a>_N)
                       :: (forall a. IsString a => IsString a :: *)
                          ~R# (forall a. IsString a => IsString (Identity a) :: *))}]
Data.String.$fIsStringIdentity
  = $fIsStringIdentity1_rc3eN
    `cast` (forall (a :: <*>_N).
            <IsString a>_R
            ->_R Data.String.N:IsString[0] <a>_N ; ((<[Char]>_R
                                                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                                   <a>_R)) ; Sym (Data.String.N:IsString[0]) <Identity
                                                                                                                a>_N)
            :: (forall a. IsString a => IsString a :: *)
               ~R# (forall a. IsString a => IsString (Identity a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.String.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.String.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.String.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.String.$trModule3 = GHC.Types.TrNameS Data.String.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.String.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.String.$trModule2 = "Data.String"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.String.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.String.$trModule1 = GHC.Types.TrNameS Data.String.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.String.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.String.$trModule
  = GHC.Types.Module Data.String.$trModule3 Data.String.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rc3eO :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rc3eO
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rc3eP :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rc3eP
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2_rc3eQ :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep2_rc3eQ
  = GHC.Types.: @ KindRep $krep_rc3eO (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rc3eR :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_rc3eR
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep2_rc3eQ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.String.$tcIsString1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.String.$tcIsString1
  = GHC.Types.KindRepFun GHC.Types.krep$* $krep1_rc3eP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep4_rc3eS :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_rc3eS = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_rc3eT :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep5_rc3eT = GHC.Types.KindRepFun $krep3_rc3eR $krep4_rc3eS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.String.$tcIsString3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.String.$tcIsString3 = "IsString"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.String.$tcIsString2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.String.$tcIsString2
  = GHC.Types.TrNameS Data.String.$tcIsString3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.String.$tcIsString :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.String.$tcIsString
  = GHC.Types.TyCon
      13318441332885770359##
      5483613882769050508##
      Data.String.$trModule
      Data.String.$tcIsString2
      0#
      Data.String.$tcIsString1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_rc3eU :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_rc3eU
  = GHC.Types.: @ KindRep $krep4_rc3eS (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_rc3eV :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_rc3eV
  = GHC.Types.KindRepTyConApp Data.String.$tcIsString $krep6_rc3eU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.String.$tc'C:IsString1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.String.$tc'C:IsString1
  = GHC.Types.KindRepFun $krep5_rc3eT $krep7_rc3eV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.String.$tc'C:IsString3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.String.$tc'C:IsString3 = "'C:IsString"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.String.$tc'C:IsString2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.String.$tc'C:IsString2
  = GHC.Types.TrNameS Data.String.$tc'C:IsString3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.String.$tc'C:IsString :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.String.$tc'C:IsString
  = GHC.Types.TyCon
      17120978992298967165##
      12730766526892520308##
      Data.String.$trModule
      Data.String.$tc'C:IsString2
      1#
      Data.String.$tc'C:IsString1


