
==================== Tidy Core ====================
2018-03-16 16:00:10.347628663 UTC

Result size of Tidy Core
  = {terms: 480, types: 689, coercions: 333, joins: 0/1}

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
Data.Ord.$fFunctorDown2 :: forall a b. (a -> b) -> a -> b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5cuD)
                 (@ b_a5cuE)
                 (v_B2 [Occ=Once] :: a_a5cuD -> b_a5cuE) ->
                 v_B2}]
Data.Ord.$fFunctorDown2
  = \ (@ a_a5cuD) (@ b_a5cuE) (v_B2 :: a_a5cuD -> b_a5cuE) -> v_B2

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Ord.$fFunctorDown1 :: forall b a. a -> b -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_a5cuO)
                 (@ a_a5cuN)
                 (x_X1xZr [Occ=Once] :: a_a5cuN)
                 _ [Occ=Dead] ->
                 x_X1xZr}]
Data.Ord.$fFunctorDown1
  = \ (@ b_a5cuO) (@ a_a5cuN) (x_X1xZr :: a_a5cuN) _ [Occ=Dead] ->
      x_X1xZr

-- RHS size: {terms: 5, types: 7, coercions: 31, joins: 0/0}
Data.Ord.$fFunctorDown [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor Down
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: Down
                          Data.Ord.$fFunctorDown2
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R
                                  ->_R Sym (Data.Ord.N:Down[0] <a>_R)
                                  ->_R Sym (Data.Ord.N:Down[0] <b>_R)
                                  :: (forall a b. (a -> b) -> a -> b :: *)
                                     ~R# (forall a b. (a -> b) -> Down a -> Down b :: *))
                          (\ (@ a_a5cuN) (@ b_a5cuO) ->
                             Data.Ord.$fFunctorDown1 @ b_a5cuO @ a_a5cuN)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R
                                  ->_R Sym (Data.Ord.N:Down[0] <b>_R)
                                  ->_R Sym (Data.Ord.N:Down[0] <a>_R)
                                  :: (forall a b. a -> b -> a :: *)
                                     ~R# (forall a b. a -> Down b -> Down a :: *))]
Data.Ord.$fFunctorDown
  = GHC.Base.C:Functor
      @ Down
      (Data.Ord.$fFunctorDown2
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a -> b>_R
               ->_R Sym (Data.Ord.N:Down[0] <a>_R)
               ->_R Sym (Data.Ord.N:Down[0] <b>_R)
               :: (forall a b. (a -> b) -> a -> b :: *)
                  ~R# (forall a b. (a -> b) -> Down a -> Down b :: *)))
      ((\ (@ a_a5cuN) (@ b_a5cuO) ->
          Data.Ord.$fFunctorDown1 @ b_a5cuO @ a_a5cuN)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a>_R
               ->_R Sym (Data.Ord.N:Down[0] <b>_R)
               ->_R Sym (Data.Ord.N:Down[0] <a>_R)
               :: (forall a b. a -> b -> a :: *)
                  ~R# (forall a b. a -> Down b -> Down a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Ord.$fApplicativeDown3
  :: forall a b. Down (a -> b) -> Down (a -> b)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5ctV)
                 (@ b_a5ctW)
                 (v_X1b [Occ=Once] :: Down (a_a5ctV -> b_a5ctW)) ->
                 v_X1b}]
Data.Ord.$fApplicativeDown3
  = \ (@ a_a5ctV) (@ b_a5ctW) (v_X1b :: Down (a_a5ctV -> b_a5ctW)) ->
      v_X1b

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Data.Ord.$fApplicativeDown4 :: forall a. a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5ctP) (v_B1 [Occ=Once] :: a_a5ctP) -> v_B1}]
Data.Ord.$fApplicativeDown4
  = \ (@ a_a5ctP) (v_B1 :: a_a5ctP) -> v_B1

-- RHS size: {terms: 7, types: 11, coercions: 2, joins: 0/0}
Data.Ord.$fApplicativeDown2
  :: forall a c b. (a -> b -> c) -> Down a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5cu5)
                 (@ c_a5cu7)
                 (@ b_a5cu6)
                 (f1_X3nVN [Occ=Once!] :: a_a5cu5 -> b_a5cu6 -> c_a5cu7)
                 (x_X3nVP [Occ=Once] :: Down a_a5cu5) ->
                 f1_X3nVN
                   (x_X3nVP
                    `cast` (Data.Ord.N:Down[0] <a_a5cu5>_R
                            :: (Down a_a5cu5 :: *) ~R# (a_a5cu5 :: *)))}]
Data.Ord.$fApplicativeDown2
  = \ (@ a_a5cu5)
      (@ c_a5cu7)
      (@ b_a5cu6)
      (f1_X3nVN :: a_a5cu5 -> b_a5cu6 -> c_a5cu7)
      (x_X3nVP :: Down a_a5cu5) ->
      f1_X3nVN
        (x_X3nVP
         `cast` (Data.Ord.N:Down[0] <a_a5cu5>_R
                 :: (Down a_a5cu5 :: *) ~R# (a_a5cu5 :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Ord.$fApplicativeDown_$c*>
  :: forall a b. Down a -> Down b -> Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5cuh)
                 (@ b_a5cui)
                 _ [Occ=Dead]
                 (a2_i1xXM [Occ=Once] :: Down b_a5cui) ->
                 a2_i1xXM}]
Data.Ord.$fApplicativeDown_$c*>
  = \ (@ a_a5cuh)
      (@ b_a5cui)
      _ [Occ=Dead]
      (a2_i1xXM :: Down b_a5cui) ->
      a2_i1xXM

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Data.Ord.$fApplicativeDown1 :: forall b a. Down a -> b -> Down a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_a5cus)
                 (@ a_a5cur)
                 (x_X3nWW [Occ=Once] :: Down a_a5cur)
                 _ [Occ=Dead] ->
                 x_X3nWW}]
Data.Ord.$fApplicativeDown1
  = \ (@ b_a5cus)
      (@ a_a5cur)
      (x_X3nWW :: Down a_a5cur)
      _ [Occ=Dead] ->
      x_X3nWW

-- RHS size: {terms: 12, types: 16, coercions: 66, joins: 0/0}
Data.Ord.$fApplicativeDown [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative Down
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: Down
                              Data.Ord.$fFunctorDown
                              Data.Ord.$fApplicativeDown4
                              `cast` (forall (a :: <*>_N).
                                      <a>_R ->_R Sym (Data.Ord.N:Down[0] <a>_R)
                                      :: (forall a. a -> a :: *) ~R# (forall a. a -> Down a :: *))
                              Data.Ord.$fApplicativeDown3
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Down (a -> b)>_R
                                      ->_R Data.Ord.N:Down[0]
                                               (Sym (Data.Ord.N:Down[0] <a>_R)
                                                ->_R Sym (Data.Ord.N:Down[0] <b>_R))
                                      :: (forall a b. Down (a -> b) -> Down (a -> b) :: *)
                                         ~R# (forall a b. Down (a -> b) -> Down a -> Down b :: *))
                              (\ (@ a_a5cu5) (@ b_a5cu6) (@ c_a5cu7) ->
                                 Data.Ord.$fApplicativeDown2 @ a_a5cu5 @ c_a5cu7 @ b_a5cu6)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                      <a -> b -> c>_R
                                      ->_R <Down a>_R
                                      ->_R Sym (Data.Ord.N:Down[0] <b>_R)
                                      ->_R Sym (Data.Ord.N:Down[0] <c>_R)
                                      :: (forall a b c. (a -> b -> c) -> Down a -> b -> c :: *)
                                         ~R# (forall a b c.
                                              (a -> b -> c) -> Down a -> Down b -> Down c :: *))
                              Data.Ord.$fApplicativeDown_$c*>
                              (\ (@ a_a5cur) (@ b_a5cus) ->
                                 Data.Ord.$fApplicativeDown1 @ b_a5cus @ a_a5cur)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Down a>_R
                                      ->_R Sym (Data.Ord.N:Down[0] <b>_R)
                                      ->_R Data.Ord.N:Down[0] (Sym (Data.Ord.N:Down[0] <a>_R))
                                      :: (forall a b. Down a -> b -> Down a :: *)
                                         ~R# (forall a b. Down a -> Down b -> Down a :: *))]
Data.Ord.$fApplicativeDown
  = GHC.Base.C:Applicative
      @ Down
      Data.Ord.$fFunctorDown
      (Data.Ord.$fApplicativeDown4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Ord.N:Down[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Down a :: *)))
      (Data.Ord.$fApplicativeDown3
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Down (a -> b)>_R
               ->_R Data.Ord.N:Down[0]
                        (Sym (Data.Ord.N:Down[0] <a>_R)
                         ->_R Sym (Data.Ord.N:Down[0] <b>_R))
               :: (forall a b. Down (a -> b) -> Down (a -> b) :: *)
                  ~R# (forall a b. Down (a -> b) -> Down a -> Down b :: *)))
      ((\ (@ a_a5cu5) (@ b_a5cu6) (@ c_a5cu7) ->
          Data.Ord.$fApplicativeDown2 @ a_a5cu5 @ c_a5cu7 @ b_a5cu6)
       `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
               <a -> b -> c>_R
               ->_R <Down a>_R
               ->_R Sym (Data.Ord.N:Down[0] <b>_R)
               ->_R Sym (Data.Ord.N:Down[0] <c>_R)
               :: (forall a b c. (a -> b -> c) -> Down a -> b -> c :: *)
                  ~R# (forall a b c.
                       (a -> b -> c) -> Down a -> Down b -> Down c :: *)))
      Data.Ord.$fApplicativeDown_$c*>
      ((\ (@ a_a5cur) (@ b_a5cus) ->
          Data.Ord.$fApplicativeDown1 @ b_a5cus @ a_a5cur)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Down a>_R
               ->_R Sym (Data.Ord.N:Down[0] <b>_R)
               ->_R Data.Ord.N:Down[0] (Sym (Data.Ord.N:Down[0] <a>_R))
               :: (forall a b. Down a -> b -> Down a :: *)
                  ~R# (forall a b. Down a -> Down b -> Down a :: *)))

-- RHS size: {terms: 6, types: 9, coercions: 2, joins: 0/0}
Data.Ord.$fMonadDown_$c>>=
  :: forall a b. Down a -> (a -> Down b) -> Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5ctd)
                 (@ b_a5cte)
                 (ds_d5cxx [Occ=Once] :: Down a_a5ctd)
                 (k_a5cil [Occ=Once!] :: a_a5ctd -> Down b_a5cte) ->
                 k_a5cil
                   (ds_d5cxx
                    `cast` (Data.Ord.N:Down[0] <a_a5ctd>_R
                            :: (Down a_a5ctd :: *) ~R# (a_a5ctd :: *)))}]
Data.Ord.$fMonadDown_$c>>=
  = \ (@ a_a5ctd)
      (@ b_a5cte)
      (ds_d5cxx :: Down a_a5ctd)
      (k_a5cil :: a_a5ctd -> Down b_a5cte) ->
      k_a5cil
        (ds_d5cxx
         `cast` (Data.Ord.N:Down[0] <a_a5ctd>_R
                 :: (Down a_a5ctd :: *) ~R# (a_a5ctd :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fMonadDown_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. Down a -> Down b -> Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5ctj)
                 (@ b_a5ctk)
                 _ [Occ=Dead]
                 (k_i3nU5 [Occ=Once] :: Down b_a5ctk) ->
                 k_i3nU5}]
Data.Ord.$fMonadDown_$c>> = Data.Ord.$fApplicativeDown_$c*>

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl_r5cDk :: forall a. [Char] -> Down a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl_r5cDk
  = \ (@ a_a5ctB) (eta_B1 :: [Char]) ->
      errorWithoutStackTrace @ 'LiftedRep @ (Down a_a5ctB) eta_B1

-- RHS size: {terms: 6, types: 1, coercions: 8, joins: 0/0}
Data.Ord.$fMonadDown [InlPrag=NOUSERINLINE CONLIKE] :: Monad Down
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: Down
                        Data.Ord.$fApplicativeDown
                        Data.Ord.$fMonadDown_$c>>=
                        Data.Ord.$fMonadDown_$c>>
                        Data.Ord.$fApplicativeDown4
                        `cast` (forall (a :: <*>_N).
                                <a>_R ->_R Sym (Data.Ord.N:Down[0] <a>_R)
                                :: (forall a. a -> a :: *) ~R# (forall a. a -> Down a :: *))
                        \ (@ a_a5ctB) ->
                          errorWithoutStackTrace @ 'LiftedRep @ (Down a_a5ctB)]
Data.Ord.$fMonadDown
  = GHC.Base.C:Monad
      @ Down
      Data.Ord.$fApplicativeDown
      Data.Ord.$fMonadDown_$c>>=
      Data.Ord.$fMonadDown_$c>>
      (Data.Ord.$fApplicativeDown4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Ord.N:Down[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Down a :: *)))
      lvl_r5cDk

-- RHS size: {terms: 9, types: 9, coercions: 34, joins: 0/0}
Data.Ord.$fSemigroupDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Semigroup a => Semigroup (Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a5cij) (v_X1y :: Semigroup a_a5cij) ->
       GHC.Base.C:Semigroup TYPE: Down a_a5cij
                            (<> @ a_a5cij v_X1y)
                            `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                    ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                    ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                    :: (a_a5cij -> a_a5cij -> a_a5cij :: *)
                                       ~R# (Down a_a5cij -> Down a_a5cij -> Down a_a5cij :: *))
                            (sconcat @ a_a5cij v_X1y)
                            `cast` ((NonEmpty (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)))_R
                                    ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                    :: (NonEmpty a_a5cij -> a_a5cij :: *)
                                       ~R# (NonEmpty (Down a_a5cij) -> Down a_a5cij :: *))
                            (stimes @ a_a5cij v_X1y)
                            `cast` (forall (b :: <*>_N).
                                    <GHC.Real.Integral b>_R
                                    ->_R <b>_R
                                    ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                    ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                    :: (forall b.
                                        GHC.Real.Integral b =>
                                        b -> a_a5cij -> a_a5cij :: *)
                                       ~R# (forall b.
                                            GHC.Real.Integral b =>
                                            b -> Down a_a5cij -> Down a_a5cij :: *))]
Data.Ord.$fSemigroupDown
  = \ (@ a_a5crv) ($dSemigroup_a5crw :: Semigroup a_a5crv) ->
      GHC.Base.C:Semigroup
        @ (Down a_a5crv)
        ((<> @ a_a5crv $dSemigroup_a5crw)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5crv>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5crv>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5crv>_R)
                 :: (a_a5crv -> a_a5crv -> a_a5crv :: *)
                    ~R# (Down a_a5crv -> Down a_a5crv -> Down a_a5crv :: *)))
        ((sconcat @ a_a5crv $dSemigroup_a5crw)
         `cast` ((NonEmpty (Sym (Data.Ord.N:Down[0] <a_a5crv>_R)))_R
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5crv>_R)
                 :: (NonEmpty a_a5crv -> a_a5crv :: *)
                    ~R# (NonEmpty (Down a_a5crv) -> Down a_a5crv :: *)))
        ((stimes @ a_a5crv $dSemigroup_a5crw)
         `cast` (forall (b :: <*>_N).
                 <GHC.Real.Integral b>_R
                 ->_R <b>_R
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5crv>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5crv>_R)
                 :: (forall b. GHC.Real.Integral b => b -> a_a5crv -> a_a5crv :: *)
                    ~R# (forall b.
                         GHC.Real.Integral b =>
                         b -> Down a_a5crv -> Down a_a5crv :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Ord.$fMonoidDown_$cp1Monoid
  :: forall a. Monoid a => Semigroup (Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U,1*U),A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5csr)
                 ($dMonoid_a5css [Occ=Once] :: Monoid a_a5csr) ->
                 Data.Ord.$fSemigroupDown
                   @ a_a5csr (GHC.Base.$p1Monoid @ a_a5csr $dMonoid_a5css)}]
Data.Ord.$fMonoidDown_$cp1Monoid
  = \ (@ a_a5csr) ($dMonoid_a5css :: Monoid a_a5csr) ->
      Data.Ord.$fSemigroupDown
        @ a_a5csr (GHC.Base.$p1Monoid @ a_a5csr $dMonoid_a5css)

-- RHS size: {terms: 11, types: 10, coercions: 22, joins: 0/0}
Data.Ord.$fMonoidDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Monoid a => Monoid (Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U,1*U),1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a5cij) (v_X1A :: Monoid a_a5cij) ->
       GHC.Base.C:Monoid TYPE: Down a_a5cij
                         Data.Ord.$fMonoidDown_$cp1Monoid @ a_a5cij v_X1A
                         (mempty @ a_a5cij v_X1A)
                         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                 :: (a_a5cij :: *) ~R# (Down a_a5cij :: *))
                         (mappend @ a_a5cij v_X1A)
                         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                 :: (a_a5cij -> a_a5cij -> a_a5cij :: *)
                                    ~R# (Down a_a5cij -> Down a_a5cij -> Down a_a5cij :: *))
                         (mconcat @ a_a5cij v_X1A)
                         `cast` (([Sym (Data.Ord.N:Down[0] <a_a5cij>_R)])_R
                                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                 :: ([a_a5cij] -> a_a5cij :: *)
                                    ~R# ([Down a_a5cij] -> Down a_a5cij :: *))]
Data.Ord.$fMonoidDown
  = \ (@ a_a5csr) ($dMonoid_a5css :: Monoid a_a5csr) ->
      GHC.Base.C:Monoid
        @ (Down a_a5csr)
        (Data.Ord.$fMonoidDown_$cp1Monoid @ a_a5csr $dMonoid_a5css)
        ((mempty @ a_a5csr $dMonoid_a5css)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5csr>_R)
                 :: (a_a5csr :: *) ~R# (Down a_a5csr :: *)))
        ((mappend @ a_a5csr $dMonoid_a5css)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5csr>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5csr>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5csr>_R)
                 :: (a_a5csr -> a_a5csr -> a_a5csr :: *)
                    ~R# (Down a_a5csr -> Down a_a5csr -> Down a_a5csr :: *)))
        ((mconcat @ a_a5csr $dMonoid_a5css)
         `cast` (([Sym (Data.Ord.N:Down[0] <a_a5csr>_R)])_R
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5csr>_R)
                 :: ([a_a5csr] -> a_a5csr :: *)
                    ~R# ([Down a_a5csr] -> Down a_a5csr :: *)))

-- RHS size: {terms: 17, types: 13, coercions: 59, joins: 0/0}
Data.Ord.$fNumDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Num a => Num (Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a5cij) (v_X1I :: Num a_a5cij) ->
       GHC.Num.C:Num TYPE: Down a_a5cij
                     (+ @ a_a5cij v_X1I)
                     `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             :: (a_a5cij -> a_a5cij -> a_a5cij :: *)
                                ~R# (Down a_a5cij -> Down a_a5cij -> Down a_a5cij :: *))
                     (- @ a_a5cij v_X1I)
                     `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             :: (a_a5cij -> a_a5cij -> a_a5cij :: *)
                                ~R# (Down a_a5cij -> Down a_a5cij -> Down a_a5cij :: *))
                     (* @ a_a5cij v_X1I)
                     `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             :: (a_a5cij -> a_a5cij -> a_a5cij :: *)
                                ~R# (Down a_a5cij -> Down a_a5cij -> Down a_a5cij :: *))
                     (negate @ a_a5cij v_X1I)
                     `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             :: (a_a5cij -> a_a5cij :: *)
                                ~R# (Down a_a5cij -> Down a_a5cij :: *))
                     (abs @ a_a5cij v_X1I)
                     `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             :: (a_a5cij -> a_a5cij :: *)
                                ~R# (Down a_a5cij -> Down a_a5cij :: *))
                     (signum @ a_a5cij v_X1I)
                     `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             :: (a_a5cij -> a_a5cij :: *)
                                ~R# (Down a_a5cij -> Down a_a5cij :: *))
                     (fromInteger @ a_a5cij v_X1I)
                     `cast` (<Integer>_R ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                             :: (Integer -> a_a5cij :: *) ~R# (Integer -> Down a_a5cij :: *))]
Data.Ord.$fNumDown
  = \ (@ a_a5cq0) ($dNum_a5cq1 :: Num a_a5cq0) ->
      GHC.Num.C:Num
        @ (Down a_a5cq0)
        ((+ @ a_a5cq0 $dNum_a5cq1)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 :: (a_a5cq0 -> a_a5cq0 -> a_a5cq0 :: *)
                    ~R# (Down a_a5cq0 -> Down a_a5cq0 -> Down a_a5cq0 :: *)))
        ((- @ a_a5cq0 $dNum_a5cq1)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 :: (a_a5cq0 -> a_a5cq0 -> a_a5cq0 :: *)
                    ~R# (Down a_a5cq0 -> Down a_a5cq0 -> Down a_a5cq0 :: *)))
        ((* @ a_a5cq0 $dNum_a5cq1)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 :: (a_a5cq0 -> a_a5cq0 -> a_a5cq0 :: *)
                    ~R# (Down a_a5cq0 -> Down a_a5cq0 -> Down a_a5cq0 :: *)))
        ((negate @ a_a5cq0 $dNum_a5cq1)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 :: (a_a5cq0 -> a_a5cq0 :: *)
                    ~R# (Down a_a5cq0 -> Down a_a5cq0 :: *)))
        ((abs @ a_a5cq0 $dNum_a5cq1)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 :: (a_a5cq0 -> a_a5cq0 :: *)
                    ~R# (Down a_a5cq0 -> Down a_a5cq0 :: *)))
        ((signum @ a_a5cq0 $dNum_a5cq1)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 :: (a_a5cq0 -> a_a5cq0 :: *)
                    ~R# (Down a_a5cq0 -> Down a_a5cq0 :: *)))
        ((fromInteger @ a_a5cq0 $dNum_a5cq1)
         `cast` (<Integer>_R ->_R Sym (Data.Ord.N:Down[0] <a_a5cq0>_R)
                 :: (Integer -> a_a5cq0 :: *) ~R# (Integer -> Down a_a5cq0 :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fReadDown4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Ord.$fReadDown4 = "Down"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fReadDown3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Ord.$fReadDown3 = unpackCString# Data.Ord.$fReadDown4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fReadDown_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ord.$fReadDown_lexeme
  = Text.Read.Lex.Ident Data.Ord.$fReadDown3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fReadDown2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ord.$fReadDown2 = GHC.Types.I# 11#

-- RHS size: {terms: 34, types: 39, coercions: 18, joins: 0/0}
Data.Ord.$fReadDown1
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Down a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 221 0}]
Data.Ord.$fReadDown1
  = \ (@ a_a5cpk)
      ($dRead_a5cpl :: Read a_a5cpk)
      (eta_B2 :: Text.ParserCombinators.ReadPrec.Prec)
      (@ b_a3ngn)
      (eta1_B1
         :: Down a_a5cpk -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ (Down a_a5cpk)
        ((\ (c_a3tmt :: Text.ParserCombinators.ReadPrec.Prec)
            (@ b1_X3ngt)
            (eta2_X8
               :: Down a_a5cpk -> Text.ParserCombinators.ReadP.P b1_X3ngt) ->
            case c_a3tmt of { I# x_at1e ->
            case <=# x_at1e 10# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3ngt;
              1# ->
                case Text.Read.Lex.$wexpect
                       Data.Ord.$fReadDown_lexeme
                       @ b1_X3ngt
                       (\ _ [Occ=Dead, OS=OneShot] ->
                          ((((readPrec @ a_a5cpk $dRead_a5cpl)
                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a5cpk>_R
                                     :: (Text.ParserCombinators.ReadPrec.ReadPrec a_a5cpk :: *)
                                        ~R# (Text.ParserCombinators.ReadPrec.Prec
                                             -> Text.ParserCombinators.ReadP.ReadP a_a5cpk :: *)))
                              Data.Ord.$fReadDown2)
                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a5cpk>_R
                                   :: (Text.ParserCombinators.ReadP.ReadP a_a5cpk :: *)
                                      ~R# (forall b.
                                           (a_a5cpk -> Text.ParserCombinators.ReadP.P b)
                                           -> Text.ParserCombinators.ReadP.P b :: *)))
                            @ b1_X3ngt
                            (\ (a2_X3niF :: a_a5cpk) ->
                               eta2_X8
                                 (a2_X3niF
                                  `cast` (Sym (Data.Ord.N:Down[0] <a_a5cpk>_R)
                                          :: (a_a5cpk :: *) ~R# (Down a_a5cpk :: *)))))
                of
                { (# ww1_s3xlt #) ->
                Text.ParserCombinators.ReadP.Look @ b1_X3ngt ww1_s3xlt
                }
            }
            })
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Down
                                   a_a5cpk>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Down a_a5cpk>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Down a_a5cpk -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Down a_a5cpk) :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 8, types: 12, coercions: 0, joins: 0/0}
Data.Ord.$fReadDown_$creadsPrec
  :: forall a. Read a => Int -> ReadS (Down a)
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X5cr8)
                 ($dRead_X5cra [Occ=Once] :: Read a_X5cr8)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (Down a_X5cr8)
                   (Data.Ord.$fReadDown1
                      @ a_X5cr8
                      $dRead_X5cra
                      n_a3tmE
                      @ (Down a_X5cr8)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (Down a_X5cr8)))}]
Data.Ord.$fReadDown_$creadsPrec
  = \ (@ a_X5cr8) ($dRead_X5cra :: Read a_X5cr8) (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (Down a_X5cr8)
        (Data.Ord.$fReadDown1
           @ a_X5cr8
           $dRead_X5cra
           n_a3tmE
           @ (Down a_X5cr8)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (Down a_X5cr8)))

-- RHS size: {terms: 5, types: 7, coercions: 11, joins: 0/0}
Data.Ord.$fReadDown_$creadListPrec
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Down a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X5cr6) ($dRead_X5cr8 [Occ=Once] :: Read a_X5cr6) ->
                 list
                   @ (Down a_X5cr6)
                   ((Data.Ord.$fReadDown1 @ a_X5cr6 $dRead_X5cr8)
                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Down
                                              a_X5cr6>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Down a_X5cr6>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> forall b.
                                   (Down a_X5cr6 -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                      (Down a_X5cr6) :: *)))}]
Data.Ord.$fReadDown_$creadListPrec
  = \ (@ a_X5cr6) ($dRead_X5cr8 :: Read a_X5cr6) ->
      list
        @ (Down a_X5cr6)
        ((Data.Ord.$fReadDown1 @ a_X5cr6 $dRead_X5cr8)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Down
                                   a_X5cr6>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Down a_X5cr6>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Down a_X5cr6 -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Down a_X5cr6) :: *)))

-- RHS size: {terms: 8, types: 16, coercions: 19, joins: 0/0}
Data.Ord.$fReadDown_$creadList
  :: forall a. Read a => ReadS [Down a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X5cr7) ($dRead_X5cr9 [Occ=Once] :: Read a_X5cr7) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Down a_X5cr7]
                   (((((list
                          @ (Down a_X5cr7)
                          ((Data.Ord.$fReadDown1 @ a_X5cr7 $dRead_X5cr9)
                           `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Down
                                                     a_X5cr7>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Down a_X5cr7>_R)
                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                       -> forall b.
                                          (Down a_X5cr7 -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                             (Down a_X5cr7) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Down a_X5cr7]>_R
                               :: (Text.ParserCombinators.ReadPrec.ReadPrec [Down a_X5cr7] :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                       -> Text.ParserCombinators.ReadP.ReadP [Down a_X5cr7] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Down a_X5cr7]>_R
                             :: (Text.ParserCombinators.ReadP.ReadP [Down a_X5cr7] :: *)
                                ~R# (forall b.
                                     ([Down a_X5cr7] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Down a_X5cr7]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Down a_X5cr7]))}]
Data.Ord.$fReadDown_$creadList
  = \ (@ a_X5cr7) ($dRead_X5cr9 :: Read a_X5cr7) ->
      Text.ParserCombinators.ReadP.run
        @ [Down a_X5cr7]
        (((((list
               @ (Down a_X5cr7)
               ((Data.Ord.$fReadDown1 @ a_X5cr7 $dRead_X5cr9)
                `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Down
                                          a_X5cr7>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Down a_X5cr7>_R)
                        :: (Text.ParserCombinators.ReadPrec.Prec
                            -> forall b.
                               (Down a_X5cr7 -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                  (Down a_X5cr7) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Down a_X5cr7]>_R
                    :: (Text.ParserCombinators.ReadPrec.ReadPrec [Down a_X5cr7] :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.Prec
                            -> Text.ParserCombinators.ReadP.ReadP [Down a_X5cr7] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Down a_X5cr7]>_R
                  :: (Text.ParserCombinators.ReadP.ReadP [Down a_X5cr7] :: *)
                     ~R# (forall b.
                          ([Down a_X5cr7] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Down a_X5cr7]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Down a_X5cr7]))

-- RHS size: {terms: 11, types: 10, coercions: 11, joins: 0/0}
Data.Ord.$fReadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Read a => Read (Down a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a5cij) (v_X1N :: Read a_a5cij) ->
       GHC.Read.C:Read TYPE: Down a_a5cij
                       Data.Ord.$fReadDown_$creadsPrec @ a_a5cij v_X1N
                       Data.Ord.$fReadDown_$creadList @ a_a5cij v_X1N
                       (Data.Ord.$fReadDown1 @ a_a5cij v_X1N)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Down
                                                 a_a5cij>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Down a_a5cij>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Down a_a5cij -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                         (Down a_a5cij) :: *))
                       Data.Ord.$fReadDown_$creadListPrec @ a_a5cij v_X1N]
Data.Ord.$fReadDown
  = \ (@ a_X5cr5) ($dRead_X5cr7 :: Read a_X5cr5) ->
      GHC.Read.C:Read
        @ (Down a_X5cr5)
        (Data.Ord.$fReadDown_$creadsPrec @ a_X5cr5 $dRead_X5cr7)
        (Data.Ord.$fReadDown_$creadList @ a_X5cr5 $dRead_X5cr7)
        ((Data.Ord.$fReadDown1 @ a_X5cr5 $dRead_X5cr7)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Down
                                   a_X5cr5>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Down a_X5cr5>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Down a_X5cr5 -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Down a_X5cr5) :: *)))
        (Data.Ord.$fReadDown_$creadListPrec @ a_X5cr5 $dRead_X5cr7)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fShowDown3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Ord.$fShowDown3 = "Down "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fShowDown2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Ord.$fShowDown2 = unpackCString# Data.Ord.$fShowDown3

-- RHS size: {terms: 29, types: 17, coercions: 2, joins: 0/1}
Data.Ord.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int# -> Down a -> ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 211 120}]
Data.Ord.$w$cshowsPrec
  = \ (@ a_s5cBe)
      (w_s5cBf :: Show a_s5cBe)
      (ww_s5cBk :: Int#)
      (w1_s5cBh :: Down a_s5cBe) ->
      let {
        g_s5cyO [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        g_s5cyO
          = showsPrec
              @ a_s5cBe
              w_s5cBf
              Data.Ord.$fReadDown2
              (w1_s5cBh
               `cast` (Data.Ord.N:Down[0] <a_s5cBe>_R
                       :: (Down a_s5cBe :: *) ~R# (a_s5cBe :: *))) } in
      case >=# ww_s5cBk 11# of {
        __DEFAULT ->
          \ (x_i1Mhr :: String) ->
            ++ @ Char Data.Ord.$fShowDown2 (g_s5cyO x_i1Mhr);
        1# ->
          \ (x_i1Mhy :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (++
                 @ Char
                 Data.Ord.$fShowDown2
                 (g_s5cyO (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i1Mhy)))
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Data.Ord.$fShowDown_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int -> Down a -> ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s5cBe)
                 (w_s5cBf [Occ=Once] :: Show a_s5cBe)
                 (w1_s5cBg [Occ=Once!] :: Int)
                 (w2_s5cBh [Occ=Once] :: Down a_s5cBe) ->
                 case w1_s5cBg of { I# ww1_s5cBk [Occ=Once] ->
                 Data.Ord.$w$cshowsPrec @ a_s5cBe w_s5cBf ww1_s5cBk w2_s5cBh
                 }}]
Data.Ord.$fShowDown_$cshowsPrec
  = \ (@ a_s5cBe)
      (w_s5cBf :: Show a_s5cBe)
      (w1_s5cBg :: Int)
      (w2_s5cBh :: Down a_s5cBe) ->
      case w1_s5cBg of { I# ww1_s5cBk ->
      Data.Ord.$w$cshowsPrec @ a_s5cBe w_s5cBf ww1_s5cBk w2_s5cBh
      }

-- RHS size: {terms: 10, types: 9, coercions: 2, joins: 0/0}
Data.Ord.$fShowDown_$cshow :: forall a. Show a => Down a -> String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5coV)
                 ($dShow_a5coW [Occ=Once] :: Show a_a5coV)
                 (x_i1Jj2 [Occ=Once] :: Down a_a5coV) ->
                 augment
                   @ Char
                   (\ (@ b_i1Jmb)
                      (c_i1Jmc [Occ=Once, OS=OneShot] :: Char -> b_i1Jmb -> b_i1Jmb)
                      (n_i1Jmd [Occ=Once, OS=OneShot] :: b_i1Jmb) ->
                      foldr @ Char @ b_i1Jmb c_i1Jmc n_i1Jmd Data.Ord.$fShowDown2)
                   (showsPrec
                      @ a_a5coV
                      $dShow_a5coW
                      Data.Ord.$fReadDown2
                      (x_i1Jj2
                       `cast` (Data.Ord.N:Down[0] <a_a5coV>_R
                               :: (Down a_a5coV :: *) ~R# (a_a5coV :: *)))
                      (GHC.Types.[] @ Char))}]
Data.Ord.$fShowDown_$cshow
  = \ (@ a_a5coV)
      ($dShow_a5coW :: Show a_a5coV)
      (x_i1Jj2 :: Down a_a5coV) ->
      ++
        @ Char
        Data.Ord.$fShowDown2
        (showsPrec
           @ a_a5coV
           $dShow_a5coW
           Data.Ord.$fReadDown2
           (x_i1Jj2
            `cast` (Data.Ord.N:Down[0] <a_a5coV>_R
                    :: (Down a_a5coV :: *) ~R# (a_a5coV :: *)))
           (GHC.Types.[] @ Char))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$fShowDown1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ord.$fShowDown1 = GHC.Types.I# 0#

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
Data.Ord.$fShowDown_$cshowList
  :: forall a. Show a => [Down a] -> ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5coV)
                 ($dShow_a5coW [Occ=Once] :: Show a_a5coV)
                 (ls_i1Mix [Occ=Once] :: [Down a_a5coV])
                 (s_i1Miy [Occ=Once] :: String) ->
                 showList__
                   @ (Down a_a5coV)
                   (Data.Ord.$fShowDown_$cshowsPrec
                      @ a_a5coV $dShow_a5coW Data.Ord.$fShowDown1)
                   ls_i1Mix
                   s_i1Miy}]
Data.Ord.$fShowDown_$cshowList
  = \ (@ a_a5coV)
      ($dShow_a5coW :: Show a_a5coV)
      (ls_i1Mix :: [Down a_a5coV])
      (s_i1Miy :: String) ->
      showList__
        @ (Down a_a5coV)
        (\ (w_s5cBh :: Down a_a5coV) ->
           Data.Ord.$w$cshowsPrec @ a_a5coV $dShow_a5coW 0# w_s5cBh)
        ls_i1Mix
        s_i1Miy

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Data.Ord.$fShowDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Down a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>m,
 Unf=DFun: \ (@ a_a5cij) (v_X1S :: Show a_a5cij) ->
       GHC.Show.C:Show TYPE: Down a_a5cij
                       Data.Ord.$fShowDown_$cshowsPrec @ a_a5cij v_X1S
                       Data.Ord.$fShowDown_$cshow @ a_a5cij v_X1S
                       Data.Ord.$fShowDown_$cshowList @ a_a5cij v_X1S]
Data.Ord.$fShowDown
  = \ (@ a_a5coV) ($dShow_a5coW :: Show a_a5coV) ->
      GHC.Show.C:Show
        @ (Down a_a5coV)
        (Data.Ord.$fShowDown_$cshowsPrec @ a_a5coV $dShow_a5coW)
        (Data.Ord.$fShowDown_$cshow @ a_a5coV $dShow_a5coW)
        (Data.Ord.$fShowDown_$cshowList @ a_a5coV $dShow_a5coW)

-- RHS size: {terms: 7, types: 8, coercions: 18, joins: 0/0}
Data.Ord.$fEqDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Eq a => Eq (Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ a_a5cij) (v_X1X :: Eq a_a5cij) ->
       GHC.Classes.C:Eq TYPE: Down a_a5cij
                        (== @ a_a5cij v_X1X)
                        `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                ->_R <Bool>_R
                                :: (a_a5cij -> a_a5cij -> Bool :: *)
                                   ~R# (Down a_a5cij -> Down a_a5cij -> Bool :: *))
                        (/= @ a_a5cij v_X1X)
                        `cast` (Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                ->_R Sym (Data.Ord.N:Down[0] <a_a5cij>_R)
                                ->_R <Bool>_R
                                :: (a_a5cij -> a_a5cij -> Bool :: *)
                                   ~R# (Down a_a5cij -> Down a_a5cij -> Bool :: *))]
Data.Ord.$fEqDown
  = \ (@ a_a5con) ($dEq_a5coo :: Eq a_a5con) ->
      GHC.Classes.C:Eq
        @ (Down a_a5con)
        ((== @ a_a5con $dEq_a5coo)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5con>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5con>_R)
                 ->_R <Bool>_R
                 :: (a_a5con -> a_a5con -> Bool :: *)
                    ~R# (Down a_a5con -> Down a_a5con -> Bool :: *)))
        ((/= @ a_a5con $dEq_a5coo)
         `cast` (Sym (Data.Ord.N:Down[0] <a_a5con>_R)
                 ->_R Sym (Data.Ord.N:Down[0] <a_a5con>_R)
                 ->_R <Bool>_R
                 :: (a_a5con -> a_a5con -> Bool :: *)
                    ~R# (Down a_a5con -> Down a_a5con -> Bool :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Ord.$fOrdDown_$cp1Ord :: forall a. Ord a => Eq (Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cuW) ($dOrd_a5cuX [Occ=Once] :: Ord a_a5cuW) ->
                 Data.Ord.$fEqDown
                   @ a_a5cuW (GHC.Classes.$p1Ord @ a_a5cuW $dOrd_a5cuX)}]
Data.Ord.$fOrdDown_$cp1Ord
  = \ (@ a_a5cuW) ($dOrd_a5cuX :: Ord a_a5cuW) ->
      Data.Ord.$fEqDown
        @ a_a5cuW (GHC.Classes.$p1Ord @ a_a5cuW $dOrd_a5cuX)

-- RHS size: {terms: 13, types: 10, coercions: 4, joins: 0/0}
Data.Ord.$fOrdDown_$c<
  :: forall a. Ord a => Down a -> Down a -> Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cuW)
                 ($dOrd_a5cuX [Occ=Once] :: Ord a_a5cuW)
                 (x_a1MiF [Occ=Once] :: Down a_a5cuW)
                 (y_a1MiG [Occ=Once] :: Down a_a5cuW) ->
                 case compare
                        @ a_a5cuW
                        $dOrd_a5cuX
                        (y_a1MiG
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                        (x_a1MiF
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                 of {
                   __DEFAULT -> GHC.Types.False;
                   LT -> GHC.Types.True
                 }}]
Data.Ord.$fOrdDown_$c<
  = \ (@ a_a5cuW)
      ($dOrd_a5cuX :: Ord a_a5cuW)
      (x_a1MiF :: Down a_a5cuW)
      (y_a1MiG :: Down a_a5cuW) ->
      case compare
             @ a_a5cuW
             $dOrd_a5cuX
             (y_a1MiG
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
             (x_a1MiF
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
      of {
        __DEFAULT -> GHC.Types.False;
        LT -> GHC.Types.True
      }

-- RHS size: {terms: 13, types: 10, coercions: 4, joins: 0/0}
Data.Ord.$fOrdDown_$c>=
  :: forall a. Ord a => Down a -> Down a -> Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cuW)
                 ($dOrd_a5cuX [Occ=Once] :: Ord a_a5cuW)
                 (x_a1fiT [Occ=Once] :: Down a_a5cuW)
                 (y_a1fiU [Occ=Once] :: Down a_a5cuW) ->
                 case compare
                        @ a_a5cuW
                        $dOrd_a5cuX
                        (y_a1fiU
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                        (x_a1fiT
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                 of {
                   __DEFAULT -> GHC.Types.True;
                   LT -> GHC.Types.False
                 }}]
Data.Ord.$fOrdDown_$c>=
  = \ (@ a_a5cuW)
      ($dOrd_a5cuX :: Ord a_a5cuW)
      (x_a1fiT :: Down a_a5cuW)
      (y_a1fiU :: Down a_a5cuW) ->
      case compare
             @ a_a5cuW
             $dOrd_a5cuX
             (y_a1fiU
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
             (x_a1fiT
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
      of {
        __DEFAULT -> GHC.Types.True;
        LT -> GHC.Types.False
      }

-- RHS size: {terms: 13, types: 10, coercions: 4, joins: 0/0}
Data.Ord.$fOrdDown_$c>
  :: forall a. Ord a => Down a -> Down a -> Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cuW)
                 ($dOrd_a5cuX [Occ=Once] :: Ord a_a5cuW)
                 (x_a1fiM [Occ=Once] :: Down a_a5cuW)
                 (y_a1fiN [Occ=Once] :: Down a_a5cuW) ->
                 case compare
                        @ a_a5cuW
                        $dOrd_a5cuX
                        (y_a1fiN
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                        (x_a1fiM
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                 of {
                   __DEFAULT -> GHC.Types.False;
                   GT -> GHC.Types.True
                 }}]
Data.Ord.$fOrdDown_$c>
  = \ (@ a_a5cuW)
      ($dOrd_a5cuX :: Ord a_a5cuW)
      (x_a1fiM :: Down a_a5cuW)
      (y_a1fiN :: Down a_a5cuW) ->
      case compare
             @ a_a5cuW
             $dOrd_a5cuX
             (y_a1fiN
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
             (x_a1fiM
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
      of {
        __DEFAULT -> GHC.Types.False;
        GT -> GHC.Types.True
      }

-- RHS size: {terms: 13, types: 10, coercions: 4, joins: 0/0}
Data.Ord.$fOrdDown_$c<=
  :: forall a. Ord a => Down a -> Down a -> Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cuW)
                 ($dOrd_a5cuX [Occ=Once] :: Ord a_a5cuW)
                 (x_a1MiL [Occ=Once] :: Down a_a5cuW)
                 (y_a1MiM [Occ=Once] :: Down a_a5cuW) ->
                 case compare
                        @ a_a5cuW
                        $dOrd_a5cuX
                        (y_a1MiM
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                        (x_a1MiL
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                 of {
                   __DEFAULT -> GHC.Types.True;
                   GT -> GHC.Types.False
                 }}]
Data.Ord.$fOrdDown_$c<=
  = \ (@ a_a5cuW)
      ($dOrd_a5cuX :: Ord a_a5cuW)
      (x_a1MiL :: Down a_a5cuW)
      (y_a1MiM :: Down a_a5cuW) ->
      case compare
             @ a_a5cuW
             $dOrd_a5cuX
             (y_a1MiM
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
             (x_a1MiL
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
      of {
        __DEFAULT -> GHC.Types.True;
        GT -> GHC.Types.False
      }

-- RHS size: {terms: 13, types: 10, coercions: 4, joins: 0/0}
Data.Ord.$fOrdDown_$cmax
  :: forall a. Ord a => Down a -> Down a -> Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cuW)
                 ($dOrd_a5cuX [Occ=Once] :: Ord a_a5cuW)
                 (x_a55d :: Down a_a5cuW)
                 (y_a55e :: Down a_a5cuW) ->
                 case compare
                        @ a_a5cuW
                        $dOrd_a5cuX
                        (y_a55e
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                        (x_a55d
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                 of {
                   __DEFAULT -> y_a55e;
                   GT -> x_a55d
                 }}]
Data.Ord.$fOrdDown_$cmax
  = \ (@ a_a5cuW)
      ($dOrd_a5cuX :: Ord a_a5cuW)
      (x_a55d :: Down a_a5cuW)
      (y_a55e :: Down a_a5cuW) ->
      case compare
             @ a_a5cuW
             $dOrd_a5cuX
             (y_a55e
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
             (x_a55d
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
      of {
        __DEFAULT -> y_a55e;
        GT -> x_a55d
      }

-- RHS size: {terms: 13, types: 10, coercions: 4, joins: 0/0}
Data.Ord.$fOrdDown_$cmin
  :: forall a. Ord a => Down a -> Down a -> Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cuW)
                 ($dOrd_a5cuX [Occ=Once] :: Ord a_a5cuW)
                 (x_a55m :: Down a_a5cuW)
                 (y_a55n :: Down a_a5cuW) ->
                 case compare
                        @ a_a5cuW
                        $dOrd_a5cuX
                        (y_a55n
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                        (x_a55m
                         `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                                 :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
                 of {
                   __DEFAULT -> x_a55m;
                   GT -> y_a55n
                 }}]
Data.Ord.$fOrdDown_$cmin
  = \ (@ a_a5cuW)
      ($dOrd_a5cuX :: Ord a_a5cuW)
      (x_a55m :: Down a_a5cuW)
      (y_a55n :: Down a_a5cuW) ->
      case compare
             @ a_a5cuW
             $dOrd_a5cuX
             (y_a55n
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
             (x_a55m
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
      of {
        __DEFAULT -> x_a55m;
        GT -> y_a55n
      }

-- RHS size: {terms: 23, types: 18, coercions: 4, joins: 0/0}
Data.Ord.$fOrdDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Ord a => Ord (Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),C(C1(U)),A,A,A,A,A,A)>m,
 Unf=DFun: \ (@ a_a5cim) (v_X1Z :: Ord a_a5cim) ->
       GHC.Classes.C:Ord TYPE: Down a_a5cim
                         Data.Ord.$fOrdDown_$cp1Ord @ a_a5cim v_X1Z
                         \ (ds_d5cxE [Occ=Once] :: Down a_a5cim)
                           (ds1_d5cxF [Occ=Once] :: Down a_a5cim) ->
                           compare
                             @ a_a5cim
                             v_X1Z
                             (ds1_d5cxF
                              `cast` (Data.Ord.N:Down[0] <a_a5cim>_R
                                      :: (Down a_a5cim :: *) ~R# (a_a5cim :: *)))
                             (ds_d5cxE
                              `cast` (Data.Ord.N:Down[0] <a_a5cim>_R
                                      :: (Down a_a5cim :: *) ~R# (a_a5cim :: *)))
                         Data.Ord.$fOrdDown_$c< @ a_a5cim v_X1Z
                         Data.Ord.$fOrdDown_$c<= @ a_a5cim v_X1Z
                         Data.Ord.$fOrdDown_$c> @ a_a5cim v_X1Z
                         Data.Ord.$fOrdDown_$c>= @ a_a5cim v_X1Z
                         Data.Ord.$fOrdDown_$cmax @ a_a5cim v_X1Z
                         Data.Ord.$fOrdDown_$cmin @ a_a5cim v_X1Z]
Data.Ord.$fOrdDown
  = \ (@ a_a5cuW) ($dOrd_a5cuX :: Ord a_a5cuW) ->
      GHC.Classes.C:Ord
        @ (Down a_a5cuW)
        (Data.Ord.$fOrdDown_$cp1Ord @ a_a5cuW $dOrd_a5cuX)
        (\ (ds_d5cxE :: Down a_a5cuW) (ds1_d5cxF :: Down a_a5cuW) ->
           compare
             @ a_a5cuW
             $dOrd_a5cuX
             (ds1_d5cxF
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *)))
             (ds_d5cxE
              `cast` (Data.Ord.N:Down[0] <a_a5cuW>_R
                      :: (Down a_a5cuW :: *) ~R# (a_a5cuW :: *))))
        (Data.Ord.$fOrdDown_$c< @ a_a5cuW $dOrd_a5cuX)
        (Data.Ord.$fOrdDown_$c<= @ a_a5cuW $dOrd_a5cuX)
        (Data.Ord.$fOrdDown_$c> @ a_a5cuW $dOrd_a5cuX)
        (Data.Ord.$fOrdDown_$c>= @ a_a5cuW $dOrd_a5cuX)
        (Data.Ord.$fOrdDown_$cmax @ a_a5cuW $dOrd_a5cuX)
        (Data.Ord.$fOrdDown_$cmin @ a_a5cuW $dOrd_a5cuX)

-- RHS size: {terms: 12, types: 11, coercions: 0, joins: 0/0}
comparing :: forall a b. Ord a => (b -> a) -> b -> b -> Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,C(U)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5cog)
                 (@ b_a5coh)
                 ($dOrd_a5coj [Occ=Once] :: Ord a_a5cog)
                 (p_a5cir :: b_a5coh -> a_a5cog)
                 (x_a5cis [Occ=Once] :: b_a5coh)
                 (y_a5cit [Occ=Once] :: b_a5coh) ->
                 compare @ a_a5cog $dOrd_a5coj (p_a5cir x_a5cis) (p_a5cir y_a5cit)}]
comparing
  = \ (@ a_a5cog)
      (@ b_a5coh)
      ($dOrd_a5coj :: Ord a_a5cog)
      (p_a5cir :: b_a5coh -> a_a5cog)
      (x_a5cis :: b_a5coh)
      (y_a5cit :: b_a5coh) ->
      compare @ a_a5cog $dOrd_a5coj (p_a5cir x_a5cis) (p_a5cir y_a5cit)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Ord.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ord.$trModule3 = GHC.Types.TrNameS Data.Ord.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Ord.$trModule2 = "Data.Ord"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ord.$trModule1 = GHC.Types.TrNameS Data.Ord.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Ord.$trModule
  = GHC.Types.Module Data.Ord.$trModule3 Data.Ord.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_r5cDl :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep_r5cDl = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$tcDown1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ord.$tcDown1 = GHC.Types.TrNameS Data.Ord.$fReadDown4

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$tcDown :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Ord.$tcDown
  = GHC.Types.TyCon
      7479183817722852251##
      10417149520322703999##
      Data.Ord.$trModule
      Data.Ord.$tcDown1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_r5cDm :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep1_r5cDm
  = GHC.Types.: @ KindRep $krep_r5cDl (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r5cDn :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r5cDn
  = GHC.Types.KindRepTyConApp Data.Ord.$tcDown $krep1_r5cDm

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$tc'Down1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Ord.$tc'Down1 = GHC.Types.KindRepFun $krep_r5cDl $krep2_r5cDn

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$tc'Down3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Ord.$tc'Down3 = "'Down"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$tc'Down2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ord.$tc'Down2 = GHC.Types.TrNameS Data.Ord.$tc'Down3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Ord.$tc'Down :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Ord.$tc'Down
  = GHC.Types.TyCon
      2181324915805229541##
      7680134812570657793##
      Data.Ord.$trModule
      Data.Ord.$tc'Down2
      1#
      Data.Ord.$tc'Down1


