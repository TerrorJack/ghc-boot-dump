
==================== Tidy Core ====================
2018-03-16 16:01:42.510412786 UTC

Result size of Tidy Core
  = {terms: 3,297, types: 4,771, coercions: 4,437, joins: 8/60}

-- RHS size: {terms: 21, types: 30, coercions: 7, joins: 0/1}
Data.Semigroup.Internal.$w$csconcat1 [InlPrag=NOUSERINLINE[0]]
  :: forall a. Semigroup a => Dual a -> [Dual a] -> Dual a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 150 0}]
Data.Semigroup.Internal.$w$csconcat1
  = \ (@ a_s6uKL)
      (w_s6uKM :: Semigroup a_s6uKL)
      (ww_s6uKQ :: Dual a_s6uKL)
      (ww1_s6uKR :: [Dual a_s6uKL]) ->
      letrec {
        go_s6uo3 [Occ=LoopBreaker]
          :: Dual a_s6uKL -> [Dual a_s6uKL] -> Dual a_s6uKL
        [LclId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []]
        go_s6uo3
          = \ (b_i6tZa :: Dual a_s6uKL) (ds1_i6tZb :: [Dual a_s6uKL]) ->
              case ds1_i6tZb of {
                [] -> b_i6tZa;
                : c_i6tZj cs_i6tZk ->
                  (<>
                     @ a_s6uKL
                     w_s6uKM
                     ((go_s6uo3 c_i6tZj cs_i6tZk)
                      `cast` (Data.Semigroup.Internal.N:Dual[0] <a_s6uKL>_R
                              :: (Dual a_s6uKL :: *) ~R# (a_s6uKL :: *)))
                     (b_i6tZa
                      `cast` (Data.Semigroup.Internal.N:Dual[0] <a_s6uKL>_R
                              :: (Dual a_s6uKL :: *) ~R# (a_s6uKL :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_s6uKL>_R)
                          :: (a_s6uKL :: *) ~R# (Dual a_s6uKL :: *))
              }; } in
      go_s6uo3 ww_s6uKQ ww1_s6uKR

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupDual_$csconcat [InlPrag=NOUSERINLINE[0]]
  :: forall a. Semigroup a => NonEmpty (Dual a) -> Dual a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s6uKL)
                 (w_s6uKM [Occ=Once] :: Semigroup a_s6uKL)
                 (w1_s6uKN [Occ=Once!] :: NonEmpty (Dual a_s6uKL)) ->
                 case w1_s6uKN of { :| ww1_s6uKQ [Occ=Once] ww2_s6uKR [Occ=Once] ->
                 Data.Semigroup.Internal.$w$csconcat1
                   @ a_s6uKL w_s6uKM ww1_s6uKQ ww2_s6uKR
                 }}]
Data.Semigroup.Internal.$fSemigroupDual_$csconcat
  = \ (@ a_s6uKL)
      (w_s6uKM :: Semigroup a_s6uKL)
      (w1_s6uKN :: NonEmpty (Dual a_s6uKL)) ->
      case w1_s6uKN of { :| ww1_s6uKQ ww2_s6uKR ->
      Data.Semigroup.Internal.$w$csconcat1
        @ a_s6uKL w_s6uKM ww1_s6uKQ ww2_s6uKR
      }

-- RHS size: {terms: 20, types: 21, coercions: 29, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Semigroup a => Semigroup (Dual a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A,C(C1(C1(U))))>m,
 Unf=DFun: \ (@ a_a6r2L) (v_B1 :: Semigroup a_a6r2L) ->
       GHC.Base.C:Semigroup TYPE: Dual a_a6r2L
                            (\ (ds_X6u8v [Occ=Once] :: Dual a_a6r2L)
                               (ds1_X6u8x [Occ=Once] :: Dual a_a6r2L) ->
                               <>
                                 @ a_a6r2L
                                 v_B1
                                 (ds1_X6u8x
                                  `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6r2L>_R
                                          :: (Dual a_a6r2L :: *) ~R# (a_a6r2L :: *)))
                                 (ds_X6u8v
                                  `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6r2L>_R
                                          :: (Dual a_a6r2L :: *) ~R# (a_a6r2L :: *))))
                            `cast` (<Dual a_a6r2L>_R
                                    ->_R <Dual a_a6r2L>_R
                                    ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2L>_R)
                                    :: (Dual a_a6r2L -> Dual a_a6r2L -> a_a6r2L :: *)
                                       ~R# (Dual a_a6r2L -> Dual a_a6r2L -> Dual a_a6r2L :: *))
                            Data.Semigroup.Internal.$fSemigroupDual_$csconcat @ a_a6r2L v_B1
                            (\ (@ b_X6tIx)
                               ($dIntegral_X6tIA [Occ=Once] :: Integral b_X6tIx)
                               (n_X6r9b [Occ=Once] :: b_X6tIx)
                               (ds_X6u8F [Occ=Once] :: Dual a_a6r2L) ->
                               stimes
                                 @ a_a6r2L
                                 v_B1
                                 @ b_X6tIx
                                 $dIntegral_X6tIA
                                 n_X6r9b
                                 (ds_X6u8F
                                  `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6r2L>_R
                                          :: (Dual a_a6r2L :: *) ~R# (a_a6r2L :: *))))
                            `cast` (forall (b :: <*>_N).
                                    <Integral b>_R
                                    ->_R <b>_R
                                    ->_R <Dual a_a6r2L>_R
                                    ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2L>_R)
                                    :: (forall b. Integral b => b -> Dual a_a6r2L -> a_a6r2L :: *)
                                       ~R# (forall b.
                                            Integral b =>
                                            b -> Dual a_a6r2L -> Dual a_a6r2L :: *))]
Data.Semigroup.Internal.$fSemigroupDual
  = \ (@ a_X6tId) ($dSemigroup_X6tIf :: Semigroup a_X6tId) ->
      GHC.Base.C:Semigroup
        @ (Dual a_X6tId)
        ((\ (ds_X6u8v :: Dual a_X6tId) (ds1_X6u8x :: Dual a_X6tId) ->
            <>
              @ a_X6tId
              $dSemigroup_X6tIf
              (ds1_X6u8x
               `cast` (Data.Semigroup.Internal.N:Dual[0] <a_X6tId>_R
                       :: (Dual a_X6tId :: *) ~R# (a_X6tId :: *)))
              (ds_X6u8v
               `cast` (Data.Semigroup.Internal.N:Dual[0] <a_X6tId>_R
                       :: (Dual a_X6tId :: *) ~R# (a_X6tId :: *))))
         `cast` (<Dual a_X6tId>_R
                 ->_R <Dual a_X6tId>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_X6tId>_R)
                 :: (Dual a_X6tId -> Dual a_X6tId -> a_X6tId :: *)
                    ~R# (Dual a_X6tId -> Dual a_X6tId -> Dual a_X6tId :: *)))
        (Data.Semigroup.Internal.$fSemigroupDual_$csconcat
           @ a_X6tId $dSemigroup_X6tIf)
        ((\ (@ b_X6tIx)
            ($dIntegral_X6tIA :: Integral b_X6tIx)
            (n_X6r9b :: b_X6tIx)
            (ds_X6u8F :: Dual a_X6tId) ->
            stimes
              @ a_X6tId
              $dSemigroup_X6tIf
              @ b_X6tIx
              $dIntegral_X6tIA
              n_X6r9b
              (ds_X6u8F
               `cast` (Data.Semigroup.Internal.N:Dual[0] <a_X6tId>_R
                       :: (Dual a_X6tId :: *) ~R# (a_X6tId :: *))))
         `cast` (forall (b :: <*>_N).
                 <Integral b>_R
                 ->_R <b>_R
                 ->_R <Dual a_X6tId>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_X6tId>_R)
                 :: (forall b. Integral b => b -> Dual a_X6tId -> a_X6tId :: *)
                    ~R# (forall b.
                         Integral b =>
                         b -> Dual a_X6tId -> Dual a_X6tId :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid
  :: forall a. Monoid a => Semigroup (Dual a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(C(C1(U)),A,C(C1(C1(U)))),A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6tBw)
                 ($dMonoid_a6tBx [Occ=Once] :: Monoid a_a6tBw) ->
                 Data.Semigroup.Internal.$fSemigroupDual
                   @ a_a6tBw (GHC.Base.$p1Monoid @ a_a6tBw $dMonoid_a6tBx)}]
Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid
  = \ (@ a_a6tBw) ($dMonoid_a6tBx :: Monoid a_a6tBw) ->
      Data.Semigroup.Internal.$fSemigroupDual
        @ a_a6tBw (GHC.Base.$p1Monoid @ a_a6tBw $dMonoid_a6tBx)

-- RHS size: {terms: 9, types: 10, coercions: 4, joins: 0/0}
$cmappend_r6v15 :: forall a. Monoid a => Dual a -> Dual a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S(C(C(S))LL)LLL),1*U(1*U(1*C1(C1(U)),A,A),A,A,A)><L,U><L,U>,
 Unf=OtherCon []]
$cmappend_r6v15
  = \ (@ a_a6tBw)
      ($dMonoid_a6tBx :: Monoid a_a6tBw)
      (ds_X6u8v :: Dual a_a6tBw)
      (ds1_X6u8x :: Dual a_a6tBw) ->
      <>
        @ a_a6tBw
        (GHC.Base.$p1Monoid @ a_a6tBw $dMonoid_a6tBx)
        (ds1_X6u8x
         `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6tBw>_R
                 :: (Dual a_a6tBw :: *) ~R# (a_a6tBw :: *)))
        (ds_X6u8v
         `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6tBw>_R
                 :: (Dual a_a6tBw :: *) ~R# (a_a6tBw :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
Data.Semigroup.Internal.$fMonoidDual_$cmappend [InlPrag=INLINE (sat-args=0)]
  :: forall a. Monoid a => Dual a -> Dual a -> Dual a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S(C(C(S))LL)LLL),1*U(1*U(1*C1(C1(U)),A,A),A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (@ a_X6tHW)
                  ($dMonoid_X6tHY [Occ=Once] :: Monoid a_X6tHW)
                  (ds_X6u8v [Occ=Once] :: Dual a_X6tHW)
                  (ds1_X6u8x [Occ=Once] :: Dual a_X6tHW) ->
                  <>
                    @ a_X6tHW
                    (GHC.Base.$p1Monoid @ a_X6tHW $dMonoid_X6tHY)
                    (ds1_X6u8x
                     `cast` (Data.Semigroup.Internal.N:Dual[0] <a_X6tHW>_R
                             :: (Dual a_X6tHW :: *) ~R# (a_X6tHW :: *)))
                    (ds_X6u8v
                     `cast` (Data.Semigroup.Internal.N:Dual[0] <a_X6tHW>_R
                             :: (Dual a_X6tHW :: *) ~R# (a_X6tHW :: *))))
               `cast` (forall (a :: <*>_N).
                       <Monoid a>_R
                       ->_R <Dual a>_R
                       ->_R <Dual a>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
                       :: (forall a. Monoid a => Dual a -> Dual a -> a :: *)
                          ~R# (forall a. Monoid a => Dual a -> Dual a -> Dual a :: *))}]
Data.Semigroup.Internal.$fMonoidDual_$cmappend
  = $cmappend_r6v15
    `cast` (forall (a :: <*>_N).
            <Monoid a>_R
            ->_R <Dual a>_R
            ->_R <Dual a>_R
            ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
            :: (forall a. Monoid a => Dual a -> Dual a -> a :: *)
               ~R# (forall a. Monoid a => Dual a -> Dual a -> Dual a :: *))

-- RHS size: {terms: 23, types: 29, coercions: 10, joins: 0/3}
Data.Semigroup.Internal.$fMonoidDual_$cmconcat
  :: forall a. Monoid a => [Dual a] -> Dual a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(1*U(C(C1(U)),A,A),1*U,A,A)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0] 180 0}]
Data.Semigroup.Internal.$fMonoidDual_$cmconcat
  = \ (@ a_X6tHX)
      ($dMonoid_X6tHZ :: Monoid a_X6tHX)
      (eta_B1 :: [Dual a_X6tHX]) ->
      let {
        lvl12_s6uo5 [Dmd=<L,U(C(C1(U)),A,A)>] :: Semigroup a_X6tHX
        [LclId]
        lvl12_s6uo5 = GHC.Base.$p1Monoid @ a_X6tHX $dMonoid_X6tHZ } in
      let {
        z_s6uzI :: a_X6tHX
        [LclId]
        z_s6uzI = mempty @ a_X6tHX $dMonoid_X6tHZ } in
      letrec {
        go_X6u9C [Occ=LoopBreaker] :: [Dual a_X6tHX] -> Dual a_X6tHX
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_X6u9C
          = \ (ds_i6u2C :: [Dual a_X6tHX]) ->
              case ds_i6u2C of {
                [] ->
                  z_s6uzI
                  `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_X6tHX>_R)
                          :: (a_X6tHX :: *) ~R# (Dual a_X6tHX :: *));
                : y_i6u2H ys_i6u2I ->
                  (<>
                     @ a_X6tHX
                     lvl12_s6uo5
                     ((go_X6u9C ys_i6u2I)
                      `cast` (Data.Semigroup.Internal.N:Dual[0] <a_X6tHX>_R
                              :: (Dual a_X6tHX :: *) ~R# (a_X6tHX :: *)))
                     (y_i6u2H
                      `cast` (Data.Semigroup.Internal.N:Dual[0] <a_X6tHX>_R
                              :: (Dual a_X6tHX :: *) ~R# (a_X6tHX :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_X6tHX>_R)
                          :: (a_X6tHX :: *) ~R# (Dual a_X6tHX :: *))
              }; } in
      go_X6u9C eta_B1

-- RHS size: {terms: 11, types: 10, coercions: 3, joins: 0/0}
Data.Semigroup.Internal.$fMonoidDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Monoid a => Monoid (Dual a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(U(C(C1(U)),A,C(C1(C1(U)))),U,A,A)>m,
 Unf=DFun: \ (@ a_a6r2K) (v_B1 :: Monoid a_a6r2K) ->
       GHC.Base.C:Monoid TYPE: Dual a_a6r2K
                         Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid @ a_a6r2K v_B1
                         (mempty @ a_a6r2K v_B1)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2K>_R)
                                 :: (a_a6r2K :: *) ~R# (Dual a_a6r2K :: *))
                         Data.Semigroup.Internal.$fMonoidDual_$cmappend @ a_a6r2K v_B1
                         Data.Semigroup.Internal.$fMonoidDual_$cmconcat @ a_a6r2K v_B1]
Data.Semigroup.Internal.$fMonoidDual
  = \ (@ a_a6tBw) ($dMonoid_a6tBx :: Monoid a_a6tBw) ->
      GHC.Base.C:Monoid
        @ (Dual a_a6tBw)
        (Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid
           @ a_a6tBw $dMonoid_a6tBx)
        ((mempty @ a_a6tBw $dMonoid_a6tBx)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6tBw>_R)
                 :: (a_a6tBw :: *) ~R# (Dual a_a6tBw :: *)))
        (Data.Semigroup.Internal.$fMonoidDual_$cmappend
           @ a_a6tBw $dMonoid_a6tBx)
        (Data.Semigroup.Internal.$fMonoidDual_$cmconcat
           @ a_a6tBw $dMonoid_a6tBx)

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fFunctorDual2
  :: forall a b. (a -> b) -> a -> b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tBd)
                 (@ b_a6tBe)
                 (v_B2 [Occ=Once] :: a_a6tBd -> b_a6tBe) ->
                 v_B2}]
Data.Semigroup.Internal.$fFunctorDual2
  = \ (@ a_a6tBd) (@ b_a6tBe) (v_B2 :: a_a6tBd -> b_a6tBe) -> v_B2

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fFunctorDual1 :: forall b a. a -> b -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_a6tBo)
                 (@ a_a6tBn)
                 (x_X6u6T [Occ=Once] :: a_a6tBn)
                 _ [Occ=Dead] ->
                 x_X6u6T}]
Data.Semigroup.Internal.$fFunctorDual1
  = \ (@ b_a6tBo) (@ a_a6tBn) (x_X6u6T :: a_a6tBn) _ [Occ=Dead] ->
      x_X6u6T

-- RHS size: {terms: 5, types: 7, coercions: 31, joins: 0/0}
Data.Semigroup.Internal.$fFunctorDual [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor Dual
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: Dual
                          Data.Semigroup.Internal.$fFunctorDual2
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
                                  ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
                                  :: (forall a b. (a -> b) -> a -> b :: *)
                                     ~R# (forall a b. (a -> b) -> Dual a -> Dual b :: *))
                          (\ (@ a_a6tBn) (@ b_a6tBo) ->
                             Data.Semigroup.Internal.$fFunctorDual1 @ b_a6tBo @ a_a6tBn)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
                                  ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
                                  :: (forall a b. a -> b -> a :: *)
                                     ~R# (forall a b. a -> Dual b -> Dual a :: *))]
Data.Semigroup.Internal.$fFunctorDual
  = GHC.Base.C:Functor
      @ Dual
      (Data.Semigroup.Internal.$fFunctorDual2
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a -> b>_R
               ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
               :: (forall a b. (a -> b) -> a -> b :: *)
                  ~R# (forall a b. (a -> b) -> Dual a -> Dual b :: *)))
      ((\ (@ a_a6tBn) (@ b_a6tBo) ->
          Data.Semigroup.Internal.$fFunctorDual1 @ b_a6tBo @ a_a6tBn)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
               :: (forall a b. a -> b -> a :: *)
                  ~R# (forall a b. a -> Dual b -> Dual a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeDual3
  :: forall a b. Dual (a -> b) -> Dual (a -> b)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tAv)
                 (@ b_a6tAw)
                 (v_X6E [Occ=Once] :: Dual (a_a6tAv -> b_a6tAw)) ->
                 v_X6E}]
Data.Semigroup.Internal.$fApplicativeDual3
  = \ (@ a_a6tAv) (@ b_a6tAw) (v_X6E :: Dual (a_a6tAv -> b_a6tAw)) ->
      v_X6E

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeDual4 :: forall a. a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tAp) (v_B1 [Occ=Once] :: a_a6tAp) -> v_B1}]
Data.Semigroup.Internal.$fApplicativeDual4
  = \ (@ a_a6tAp) (v_B1 :: a_a6tAp) -> v_B1

-- RHS size: {terms: 7, types: 11, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeDual2
  :: forall a c b. (a -> b -> c) -> Dual a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tAF)
                 (@ c_a6tAH)
                 (@ b_a6tAG)
                 (f1_X6u6L [Occ=Once!] :: a_a6tAF -> b_a6tAG -> c_a6tAH)
                 (x_X6u6N [Occ=Once] :: Dual a_a6tAF) ->
                 f1_X6u6L
                   (x_X6u6N
                    `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6tAF>_R
                            :: (Dual a_a6tAF :: *) ~R# (a_a6tAF :: *)))}]
Data.Semigroup.Internal.$fApplicativeDual2
  = \ (@ a_a6tAF)
      (@ c_a6tAH)
      (@ b_a6tAG)
      (f1_X6u6L :: a_a6tAF -> b_a6tAG -> c_a6tAH)
      (x_X6u6N :: Dual a_a6tAF) ->
      f1_X6u6L
        (x_X6u6N
         `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6tAF>_R
                 :: (Dual a_a6tAF :: *) ~R# (a_a6tAF :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeDual_$c*>
  :: forall a b. Dual a -> Dual b -> Dual b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tAR)
                 (@ b_a6tAS)
                 _ [Occ=Dead]
                 (a2_i6tZZ [Occ=Once] :: Dual b_a6tAS) ->
                 a2_i6tZZ}]
Data.Semigroup.Internal.$fApplicativeDual_$c*>
  = \ (@ a_a6tAR)
      (@ b_a6tAS)
      _ [Occ=Dead]
      (a2_i6tZZ :: Dual b_a6tAS) ->
      a2_i6tZZ

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeDual1
  :: forall b a. Dual a -> b -> Dual a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_a6tB2)
                 (@ a_a6tB1)
                 (x_X6uce [Occ=Once] :: Dual a_a6tB1)
                 _ [Occ=Dead] ->
                 x_X6uce}]
Data.Semigroup.Internal.$fApplicativeDual1
  = \ (@ b_a6tB2)
      (@ a_a6tB1)
      (x_X6uce :: Dual a_a6tB1)
      _ [Occ=Dead] ->
      x_X6uce

-- RHS size: {terms: 12, types: 16, coercions: 66, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeDual [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative Dual
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: Dual
                              Data.Semigroup.Internal.$fFunctorDual
                              Data.Semigroup.Internal.$fApplicativeDual4
                              `cast` (forall (a :: <*>_N).
                                      <a>_R ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
                                      :: (forall a. a -> a :: *) ~R# (forall a. a -> Dual a :: *))
                              Data.Semigroup.Internal.$fApplicativeDual3
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Dual (a -> b)>_R
                                      ->_R Data.Semigroup.Internal.N:Dual[0]
                                               (Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
                                                ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R))
                                      :: (forall a b. Dual (a -> b) -> Dual (a -> b) :: *)
                                         ~R# (forall a b. Dual (a -> b) -> Dual a -> Dual b :: *))
                              (\ (@ a_a6tAF) (@ b_a6tAG) (@ c_a6tAH) ->
                                 Data.Semigroup.Internal.$fApplicativeDual2
                                   @ a_a6tAF @ c_a6tAH @ b_a6tAG)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                      <a -> b -> c>_R
                                      ->_R <Dual a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
                                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <c>_R)
                                      :: (forall a b c. (a -> b -> c) -> Dual a -> b -> c :: *)
                                         ~R# (forall a b c.
                                              (a -> b -> c) -> Dual a -> Dual b -> Dual c :: *))
                              Data.Semigroup.Internal.$fApplicativeDual_$c*>
                              (\ (@ a_a6tB1) (@ b_a6tB2) ->
                                 Data.Semigroup.Internal.$fApplicativeDual1 @ b_a6tB2 @ a_a6tB1)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Dual a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
                                      ->_R Data.Semigroup.Internal.N:Dual[0]
                                               (Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R))
                                      :: (forall a b. Dual a -> b -> Dual a :: *)
                                         ~R# (forall a b. Dual a -> Dual b -> Dual a :: *))]
Data.Semigroup.Internal.$fApplicativeDual
  = GHC.Base.C:Applicative
      @ Dual
      Data.Semigroup.Internal.$fFunctorDual
      (Data.Semigroup.Internal.$fApplicativeDual4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Dual a :: *)))
      (Data.Semigroup.Internal.$fApplicativeDual3
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Dual (a -> b)>_R
               ->_R Data.Semigroup.Internal.N:Dual[0]
                        (Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
                         ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R))
               :: (forall a b. Dual (a -> b) -> Dual (a -> b) :: *)
                  ~R# (forall a b. Dual (a -> b) -> Dual a -> Dual b :: *)))
      ((\ (@ a_a6tAF) (@ b_a6tAG) (@ c_a6tAH) ->
          Data.Semigroup.Internal.$fApplicativeDual2
            @ a_a6tAF @ c_a6tAH @ b_a6tAG)
       `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
               <a -> b -> c>_R
               ->_R <Dual a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <c>_R)
               :: (forall a b c. (a -> b -> c) -> Dual a -> b -> c :: *)
                  ~R# (forall a b c.
                       (a -> b -> c) -> Dual a -> Dual b -> Dual c :: *)))
      Data.Semigroup.Internal.$fApplicativeDual_$c*>
      ((\ (@ a_a6tB1) (@ b_a6tB2) ->
          Data.Semigroup.Internal.$fApplicativeDual1 @ b_a6tB2 @ a_a6tB1)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Dual a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <b>_R)
               ->_R Data.Semigroup.Internal.N:Dual[0]
                        (Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R))
               :: (forall a b. Dual a -> b -> Dual a :: *)
                  ~R# (forall a b. Dual a -> Dual b -> Dual a :: *)))

-- RHS size: {terms: 14, types: 14, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupSum1
  :: forall a. Num a => forall b. Integral b => b -> Sum a -> a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(S))LLLL),U(A,A,1*C1(C1(U)),A,A,A,1*C1(U))><L,1*U(A,A,A,A,A,A,A,A,1*C1(U))><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6two)
                 ($dNum_a6twp :: Num a_a6two)
                 (@ b_a6twQ)
                 ($dIntegral_a6twS [Occ=Once] :: Integral b_a6twQ)
                 (n_a6r2E [Occ=Once] :: b_a6twQ)
                 (ds_d6u1q [Occ=Once] :: Sum a_a6two) ->
                 * @ a_a6two
                   $dNum_a6twp
                   (fromInteger
                      @ a_a6two
                      $dNum_a6twp
                      (toInteger @ b_a6twQ $dIntegral_a6twS n_a6r2E))
                   (ds_d6u1q
                    `cast` (Data.Semigroup.Internal.N:Sum[0] <a_a6two>_R
                            :: (Sum a_a6two :: *) ~R# (a_a6two :: *)))}]
Data.Semigroup.Internal.$fSemigroupSum1
  = \ (@ a_a6two)
      ($dNum_a6twp :: Num a_a6two)
      (@ b_a6twQ)
      ($dIntegral_a6twS :: Integral b_a6twQ)
      (n_a6r2E :: b_a6twQ)
      (ds_d6u1q :: Sum a_a6two) ->
      * @ a_a6two
        $dNum_a6twp
        (fromInteger
           @ a_a6two
           $dNum_a6twp
           (toInteger @ b_a6twQ $dIntegral_a6twS n_a6r2E))
        (ds_d6u1q
         `cast` (Data.Semigroup.Internal.N:Sum[0] <a_a6two>_R
                 :: (Sum a_a6two :: *) ~R# (a_a6two :: *)))

-- RHS size: {terms: 21, types: 30, coercions: 7, joins: 0/1}
Data.Semigroup.Internal.$w$csconcat3 [InlPrag=NOUSERINLINE[0]]
  :: forall a. Num a => Sum a -> [Sum a] -> Sum a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 150 0}]
Data.Semigroup.Internal.$w$csconcat3
  = \ (@ a_s6uL0)
      (w_s6uL1 :: Num a_s6uL0)
      (ww_s6uL5 :: Sum a_s6uL0)
      (ww1_s6uL6 :: [Sum a_s6uL0]) ->
      letrec {
        go_s6uo1 [Occ=LoopBreaker]
          :: Sum a_s6uL0 -> [Sum a_s6uL0] -> Sum a_s6uL0
        [LclId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []]
        go_s6uo1
          = \ (b_i6tZa :: Sum a_s6uL0) (ds1_i6tZb :: [Sum a_s6uL0]) ->
              case ds1_i6tZb of {
                [] -> b_i6tZa;
                : c_i6tZj cs_i6tZk ->
                  (+ @ a_s6uL0
                     w_s6uL1
                     (b_i6tZa
                      `cast` (Data.Semigroup.Internal.N:Sum[0] <a_s6uL0>_R
                              :: (Sum a_s6uL0 :: *) ~R# (a_s6uL0 :: *)))
                     ((go_s6uo1 c_i6tZj cs_i6tZk)
                      `cast` (Data.Semigroup.Internal.N:Sum[0] <a_s6uL0>_R
                              :: (Sum a_s6uL0 :: *) ~R# (a_s6uL0 :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_s6uL0>_R)
                          :: (a_s6uL0 :: *) ~R# (Sum a_s6uL0 :: *))
              }; } in
      go_s6uo1 ww_s6uL5 ww1_s6uL6

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupSum_$csconcat [InlPrag=NOUSERINLINE[0]]
  :: forall a. Num a => NonEmpty (Sum a) -> Sum a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A,A,A,A,A,A)><S(LS),1*U(U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s6uL0)
                 (w_s6uL1 [Occ=Once] :: Num a_s6uL0)
                 (w1_s6uL2 [Occ=Once!] :: NonEmpty (Sum a_s6uL0)) ->
                 case w1_s6uL2 of { :| ww1_s6uL5 [Occ=Once] ww2_s6uL6 [Occ=Once] ->
                 Data.Semigroup.Internal.$w$csconcat3
                   @ a_s6uL0 w_s6uL1 ww1_s6uL5 ww2_s6uL6
                 }}]
Data.Semigroup.Internal.$fSemigroupSum_$csconcat
  = \ (@ a_s6uL0)
      (w_s6uL1 :: Num a_s6uL0)
      (w1_s6uL2 :: NonEmpty (Sum a_s6uL0)) ->
      case w1_s6uL2 of { :| ww1_s6uL5 ww2_s6uL6 ->
      Data.Semigroup.Internal.$w$csconcat3
        @ a_s6uL0 w_s6uL1 ww1_s6uL5 ww2_s6uL6
      }

-- RHS size: {terms: 9, types: 9, coercions: 25, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Num a => Semigroup (Sum a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(U,A,C(C1(U)),A,A,A,C(U))>m,
 Unf=DFun: \ (@ a_a6r2D) (v_X6Z :: Num a_a6r2D) ->
       GHC.Base.C:Semigroup TYPE: Sum a_a6r2D
                            (+ @ a_a6r2D v_X6Z)
                            `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2D>_R)
                                    ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2D>_R)
                                    ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2D>_R)
                                    :: (a_a6r2D -> a_a6r2D -> a_a6r2D :: *)
                                       ~R# (Sum a_a6r2D -> Sum a_a6r2D -> Sum a_a6r2D :: *))
                            Data.Semigroup.Internal.$fSemigroupSum_$csconcat @ a_a6r2D v_X6Z
                            (Data.Semigroup.Internal.$fSemigroupSum1 @ a_a6r2D v_X6Z)
                            `cast` (forall (b :: <*>_N).
                                    <Integral b>_R
                                    ->_R <b>_R
                                    ->_R <Sum a_a6r2D>_R
                                    ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2D>_R)
                                    :: (forall b. Integral b => b -> Sum a_a6r2D -> a_a6r2D :: *)
                                       ~R# (forall b.
                                            Integral b =>
                                            b -> Sum a_a6r2D -> Sum a_a6r2D :: *))]
Data.Semigroup.Internal.$fSemigroupSum
  = \ (@ a_X6tDl) ($dNum_X6tDn :: Num a_X6tDl) ->
      GHC.Base.C:Semigroup
        @ (Sum a_X6tDl)
        ((+ @ a_X6tDl $dNum_X6tDn)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tDl>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tDl>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tDl>_R)
                 :: (a_X6tDl -> a_X6tDl -> a_X6tDl :: *)
                    ~R# (Sum a_X6tDl -> Sum a_X6tDl -> Sum a_X6tDl :: *)))
        (Data.Semigroup.Internal.$fSemigroupSum_$csconcat
           @ a_X6tDl $dNum_X6tDn)
        ((Data.Semigroup.Internal.$fSemigroupSum1 @ a_X6tDl $dNum_X6tDn)
         `cast` (forall (b :: <*>_N).
                 <Integral b>_R
                 ->_R <b>_R
                 ->_R <Sum a_X6tDl>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tDl>_R)
                 :: (forall b. Integral b => b -> Sum a_X6tDl -> a_X6tDl :: *)
                    ~R# (forall b.
                         Integral b =>
                         b -> Sum a_X6tDl -> Sum a_X6tDl :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonoidSum1 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Data.Semigroup.Internal.$fMonoidSum1 = 0

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonoidSum2 :: forall a. Num a => a
[GblId,
 Arity=1,
 Str=<S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6tvZ) ($dNum_a6tw0 [Occ=Once] :: Num a_a6tvZ) ->
                 fromInteger
                   @ a_a6tvZ $dNum_a6tw0 Data.Semigroup.Internal.$fMonoidSum1}]
Data.Semigroup.Internal.$fMonoidSum2
  = \ (@ a_a6tvZ) ($dNum_a6tw0 :: Num a_a6tvZ) ->
      fromInteger
        @ a_a6tvZ $dNum_a6tw0 Data.Semigroup.Internal.$fMonoidSum1

-- RHS size: {terms: 19, types: 23, coercions: 10, joins: 0/2}
Data.Semigroup.Internal.$fMonoidSum_$cmconcat
  :: forall a. Num a => [Sum a] -> Sum a
[GblId,
 Arity=1,
 Str=<L,U(C(C1(U)),A,A,A,A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 140 60}]
Data.Semigroup.Internal.$fMonoidSum_$cmconcat
  = \ (@ a_X6tD4) ($dNum_X6tD6 :: Num a_X6tD4) ->
      let {
        z_s6uzN :: a_X6tD4
        [LclId]
        z_s6uzN
          = fromInteger
              @ a_X6tD4 $dNum_X6tD6 Data.Semigroup.Internal.$fMonoidSum1 } in
      letrec {
        go_X6u9R [Occ=LoopBreaker] :: [Sum a_X6tD4] -> Sum a_X6tD4
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_X6u9R
          = \ (ds_i6u2C :: [Sum a_X6tD4]) ->
              case ds_i6u2C of {
                [] ->
                  z_s6uzN
                  `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tD4>_R)
                          :: (a_X6tD4 :: *) ~R# (Sum a_X6tD4 :: *));
                : y_i6u2H ys_i6u2I ->
                  (+ @ a_X6tD4
                     $dNum_X6tD6
                     (y_i6u2H
                      `cast` (Data.Semigroup.Internal.N:Sum[0] <a_X6tD4>_R
                              :: (Sum a_X6tD4 :: *) ~R# (a_X6tD4 :: *)))
                     ((go_X6u9R ys_i6u2I)
                      `cast` (Data.Semigroup.Internal.N:Sum[0] <a_X6tD4>_R
                              :: (Sum a_X6tD4 :: *) ~R# (a_X6tD4 :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tD4>_R)
                          :: (a_X6tD4 :: *) ~R# (Sum a_X6tD4 :: *))
              }; } in
      go_X6u9R

-- RHS size: {terms: 11, types: 10, coercions: 14, joins: 0/0}
Data.Semigroup.Internal.$fMonoidSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Num a => Monoid (Sum a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(U,A,C(C1(U)),A,A,A,C(U))>m,
 Unf=DFun: \ (@ a_a6r2C) (v_X75 :: Num a_a6r2C) ->
       GHC.Base.C:Monoid TYPE: Sum a_a6r2C
                         Data.Semigroup.Internal.$fSemigroupSum @ a_a6r2C v_X75
                         (Data.Semigroup.Internal.$fMonoidSum2 @ a_a6r2C v_X75)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2C>_R)
                                 :: (a_a6r2C :: *) ~R# (Sum a_a6r2C :: *))
                         (+ @ a_a6r2C v_X75)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2C>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2C>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2C>_R)
                                 :: (a_a6r2C -> a_a6r2C -> a_a6r2C :: *)
                                    ~R# (Sum a_a6r2C -> Sum a_a6r2C -> Sum a_a6r2C :: *))
                         Data.Semigroup.Internal.$fMonoidSum_$cmconcat @ a_a6r2C v_X75]
Data.Semigroup.Internal.$fMonoidSum
  = \ (@ a_X6tD2) ($dNum_X6tD4 :: Num a_X6tD2) ->
      GHC.Base.C:Monoid
        @ (Sum a_X6tD2)
        (Data.Semigroup.Internal.$fSemigroupSum @ a_X6tD2 $dNum_X6tD4)
        ((Data.Semigroup.Internal.$fMonoidSum2 @ a_X6tD2 $dNum_X6tD4)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tD2>_R)
                 :: (a_X6tD2 :: *) ~R# (Sum a_X6tD2 :: *)))
        ((+ @ a_X6tD2 $dNum_X6tD4)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tD2>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tD2>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_X6tD2>_R)
                 :: (a_X6tD2 -> a_X6tD2 -> a_X6tD2 :: *)
                    ~R# (Sum a_X6tD2 -> Sum a_X6tD2 -> Sum a_X6tD2 :: *)))
        (Data.Semigroup.Internal.$fMonoidSum_$cmconcat
           @ a_X6tD2 $dNum_X6tD4)

-- RHS size: {terms: 5, types: 7, coercions: 31, joins: 0/0}
Data.Semigroup.Internal.$fFunctorSum [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor Sum
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: Sum
                          Data.Semigroup.Internal.$fFunctorDual2
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
                                  ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
                                  :: (forall a b. (a -> b) -> a -> b :: *)
                                     ~R# (forall a b. (a -> b) -> Sum a -> Sum b :: *))
                          (\ (@ a_a6tvQ) (@ b_a6tvR) ->
                             Data.Semigroup.Internal.$fFunctorDual1 @ b_a6tvR @ a_a6tvQ)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
                                  ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
                                  :: (forall a b. a -> b -> a :: *)
                                     ~R# (forall a b. a -> Sum b -> Sum a :: *))]
Data.Semigroup.Internal.$fFunctorSum
  = GHC.Base.C:Functor
      @ Sum
      (Data.Semigroup.Internal.$fFunctorDual2
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a -> b>_R
               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
               :: (forall a b. (a -> b) -> a -> b :: *)
                  ~R# (forall a b. (a -> b) -> Sum a -> Sum b :: *)))
      ((\ (@ a_a6tBn) (@ b_a6tBo) ->
          Data.Semigroup.Internal.$fFunctorDual1 @ b_a6tBo @ a_a6tBn)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
               :: (forall a b. a -> b -> a :: *)
                  ~R# (forall a b. a -> Sum b -> Sum a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeSum3
  :: forall a b. Sum (a -> b) -> Sum (a -> b)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tuY)
                 (@ b_a6tuZ)
                 (v_X7i [Occ=Once] :: Sum (a_a6tuY -> b_a6tuZ)) ->
                 v_X7i}]
Data.Semigroup.Internal.$fApplicativeSum3
  = \ (@ a_a6tuY) (@ b_a6tuZ) (v_X7i :: Sum (a_a6tuY -> b_a6tuZ)) ->
      v_X7i

-- RHS size: {terms: 7, types: 11, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeSum2
  :: forall a c b. (a -> b -> c) -> Sum a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tv8)
                 (@ c_a6tva)
                 (@ b_a6tv9)
                 (f1_X6u7p [Occ=Once!] :: a_a6tv8 -> b_a6tv9 -> c_a6tva)
                 (x_X6u7r [Occ=Once] :: Sum a_a6tv8) ->
                 f1_X6u7p
                   (x_X6u7r
                    `cast` (Data.Semigroup.Internal.N:Sum[0] <a_a6tv8>_R
                            :: (Sum a_a6tv8 :: *) ~R# (a_a6tv8 :: *)))}]
Data.Semigroup.Internal.$fApplicativeSum2
  = \ (@ a_a6tv8)
      (@ c_a6tva)
      (@ b_a6tv9)
      (f1_X6u7p :: a_a6tv8 -> b_a6tv9 -> c_a6tva)
      (x_X6u7r :: Sum a_a6tv8) ->
      f1_X6u7p
        (x_X6u7r
         `cast` (Data.Semigroup.Internal.N:Sum[0] <a_a6tv8>_R
                 :: (Sum a_a6tv8 :: *) ~R# (a_a6tv8 :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeSum_$c*>
  :: forall a b. Sum a -> Sum b -> Sum b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tvk)
                 (@ b_a6tvl)
                 _ [Occ=Dead]
                 (a2_i6tZZ [Occ=Once] :: Sum b_a6tvl) ->
                 a2_i6tZZ}]
Data.Semigroup.Internal.$fApplicativeSum_$c*>
  = \ (@ a_a6tvk)
      (@ b_a6tvl)
      _ [Occ=Dead]
      (a2_i6tZZ :: Sum b_a6tvl) ->
      a2_i6tZZ

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeSum1
  :: forall b a. Sum a -> b -> Sum a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_a6tvv)
                 (@ a_a6tvu)
                 (x_X6udb [Occ=Once] :: Sum a_a6tvu)
                 _ [Occ=Dead] ->
                 x_X6udb}]
Data.Semigroup.Internal.$fApplicativeSum1
  = \ (@ b_a6tvv)
      (@ a_a6tvu)
      (x_X6udb :: Sum a_a6tvu)
      _ [Occ=Dead] ->
      x_X6udb

-- RHS size: {terms: 12, types: 16, coercions: 66, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeSum [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative Sum
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: Sum
                              Data.Semigroup.Internal.$fFunctorSum
                              Data.Semigroup.Internal.$fApplicativeDual4
                              `cast` (forall (a :: <*>_N).
                                      <a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
                                      :: (forall a. a -> a :: *) ~R# (forall a. a -> Sum a :: *))
                              Data.Semigroup.Internal.$fApplicativeSum3
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Sum (a -> b)>_R
                                      ->_R Data.Semigroup.Internal.N:Sum[0]
                                               (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
                                                ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R))
                                      :: (forall a b. Sum (a -> b) -> Sum (a -> b) :: *)
                                         ~R# (forall a b. Sum (a -> b) -> Sum a -> Sum b :: *))
                              (\ (@ a_a6tv8) (@ b_a6tv9) (@ c_a6tva) ->
                                 Data.Semigroup.Internal.$fApplicativeSum2
                                   @ a_a6tv8 @ c_a6tva @ b_a6tv9)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                      <a -> b -> c>_R
                                      ->_R <Sum a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
                                      ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <c>_R)
                                      :: (forall a b c. (a -> b -> c) -> Sum a -> b -> c :: *)
                                         ~R# (forall a b c.
                                              (a -> b -> c) -> Sum a -> Sum b -> Sum c :: *))
                              Data.Semigroup.Internal.$fApplicativeSum_$c*>
                              (\ (@ a_a6tvu) (@ b_a6tvv) ->
                                 Data.Semigroup.Internal.$fApplicativeSum1 @ b_a6tvv @ a_a6tvu)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Sum a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
                                      ->_R Data.Semigroup.Internal.N:Sum[0]
                                               (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                                      :: (forall a b. Sum a -> b -> Sum a :: *)
                                         ~R# (forall a b. Sum a -> Sum b -> Sum a :: *))]
Data.Semigroup.Internal.$fApplicativeSum
  = GHC.Base.C:Applicative
      @ Sum
      Data.Semigroup.Internal.$fFunctorSum
      (Data.Semigroup.Internal.$fApplicativeDual4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Sum a :: *)))
      (Data.Semigroup.Internal.$fApplicativeSum3
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Sum (a -> b)>_R
               ->_R Data.Semigroup.Internal.N:Sum[0]
                        (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
                         ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R))
               :: (forall a b. Sum (a -> b) -> Sum (a -> b) :: *)
                  ~R# (forall a b. Sum (a -> b) -> Sum a -> Sum b :: *)))
      ((\ (@ a_a6tv8) (@ b_a6tv9) (@ c_a6tva) ->
          Data.Semigroup.Internal.$fApplicativeSum2
            @ a_a6tv8 @ c_a6tva @ b_a6tv9)
       `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
               <a -> b -> c>_R
               ->_R <Sum a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <c>_R)
               :: (forall a b c. (a -> b -> c) -> Sum a -> b -> c :: *)
                  ~R# (forall a b c. (a -> b -> c) -> Sum a -> Sum b -> Sum c :: *)))
      Data.Semigroup.Internal.$fApplicativeSum_$c*>
      ((\ (@ a_a6tvu) (@ b_a6tvv) ->
          Data.Semigroup.Internal.$fApplicativeSum1 @ b_a6tvv @ a_a6tvu)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Sum a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <b>_R)
               ->_R Data.Semigroup.Internal.N:Sum[0]
                        (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
               :: (forall a b. Sum a -> b -> Sum a :: *)
                  ~R# (forall a b. Sum a -> Sum b -> Sum a :: *)))

-- RHS size: {terms: 21, types: 30, coercions: 7, joins: 0/1}
Data.Semigroup.Internal.$w$csconcat2 [InlPrag=NOUSERINLINE[0]]
  :: forall a. Num a => Product a -> [Product a] -> Product a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(U)),A,A,A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 150 0}]
Data.Semigroup.Internal.$w$csconcat2
  = \ (@ a_s6uLe)
      (w_s6uLf :: Num a_s6uLe)
      (ww_s6uLj :: Product a_s6uLe)
      (ww1_s6uLk :: [Product a_s6uLe]) ->
      letrec {
        go_s6unZ [Occ=LoopBreaker]
          :: Product a_s6uLe -> [Product a_s6uLe] -> Product a_s6uLe
        [LclId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []]
        go_s6unZ
          = \ (b_i6tZa :: Product a_s6uLe)
              (ds1_i6tZb :: [Product a_s6uLe]) ->
              case ds1_i6tZb of {
                [] -> b_i6tZa;
                : c_i6tZj cs_i6tZk ->
                  (* @ a_s6uLe
                     w_s6uLf
                     (b_i6tZa
                      `cast` (Data.Semigroup.Internal.N:Product[0] <a_s6uLe>_R
                              :: (Product a_s6uLe :: *) ~R# (a_s6uLe :: *)))
                     ((go_s6unZ c_i6tZj cs_i6tZk)
                      `cast` (Data.Semigroup.Internal.N:Product[0] <a_s6uLe>_R
                              :: (Product a_s6uLe :: *) ~R# (a_s6uLe :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_s6uLe>_R)
                          :: (a_s6uLe :: *) ~R# (Product a_s6uLe :: *))
              }; } in
      go_s6unZ ww_s6uLj ww1_s6uLk

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupProduct_$csconcat [InlPrag=NOUSERINLINE[0]]
  :: forall a. Num a => NonEmpty (Product a) -> Product a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(U)),A,A,A,A)><S(LS),1*U(U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s6uLe)
                 (w_s6uLf [Occ=Once] :: Num a_s6uLe)
                 (w1_s6uLg [Occ=Once!] :: NonEmpty (Product a_s6uLe)) ->
                 case w1_s6uLg of { :| ww1_s6uLj [Occ=Once] ww2_s6uLk [Occ=Once] ->
                 Data.Semigroup.Internal.$w$csconcat2
                   @ a_s6uLe w_s6uLf ww1_s6uLj ww2_s6uLk
                 }}]
Data.Semigroup.Internal.$fSemigroupProduct_$csconcat
  = \ (@ a_s6uLe)
      (w_s6uLf :: Num a_s6uLe)
      (w1_s6uLg :: NonEmpty (Product a_s6uLe)) ->
      case w1_s6uLg of { :| ww1_s6uLj ww2_s6uLk ->
      Data.Semigroup.Internal.$w$csconcat2
        @ a_s6uLe w_s6uLf ww1_s6uLj ww2_s6uLk
      }

-- RHS size: {terms: 16, types: 17, coercions: 27, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Num a => Semigroup (Product a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,U,A,A,A,C(U))>m,
 Unf=DFun: \ (@ a_a6r2x) (v_X7D :: Num a_a6r2x) ->
       GHC.Base.C:Semigroup TYPE: Product a_a6r2x
                            (* @ a_a6r2x v_X7D)
                            `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2x>_R)
                                    ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2x>_R)
                                    ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2x>_R)
                                    :: (a_a6r2x -> a_a6r2x -> a_a6r2x :: *)
                                       ~R# (Product a_a6r2x
                                            -> Product a_a6r2x -> Product a_a6r2x :: *))
                            Data.Semigroup.Internal.$fSemigroupProduct_$csconcat
                              @ a_a6r2x v_X7D
                            (\ (@ b_X6tBy)
                               ($dIntegral_X6tBB [Occ=Once] :: Integral b_X6tBy)
                               (n_X6rae [Occ=Once] :: b_X6tBy)
                               (ds_X6u80 [Occ=Once] :: Product a_a6r2x) ->
                               ^ @ a_a6r2x
                                 @ b_X6tBy
                                 v_X7D
                                 $dIntegral_X6tBB
                                 (ds_X6u80
                                  `cast` (Data.Semigroup.Internal.N:Product[0] <a_a6r2x>_R
                                          :: (Product a_a6r2x :: *) ~R# (a_a6r2x :: *)))
                                 n_X6rae)
                            `cast` (forall (b :: <*>_N).
                                    <Integral b>_R
                                    ->_R <b>_R
                                    ->_R <Product a_a6r2x>_R
                                    ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2x>_R)
                                    :: (forall b.
                                        Integral b =>
                                        b -> Product a_a6r2x -> a_a6r2x :: *)
                                       ~R# (forall b.
                                            Integral b =>
                                            b -> Product a_a6r2x -> Product a_a6r2x :: *))]
Data.Semigroup.Internal.$fSemigroupProduct
  = \ (@ a_X6tB3) ($dNum_X6tB5 :: Num a_X6tB3) ->
      GHC.Base.C:Semigroup
        @ (Product a_X6tB3)
        ((* @ a_X6tB3 $dNum_X6tB5)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tB3>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tB3>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tB3>_R)
                 :: (a_X6tB3 -> a_X6tB3 -> a_X6tB3 :: *)
                    ~R# (Product a_X6tB3 -> Product a_X6tB3 -> Product a_X6tB3 :: *)))
        (Data.Semigroup.Internal.$fSemigroupProduct_$csconcat
           @ a_X6tB3 $dNum_X6tB5)
        ((\ (@ b_X6tBy)
            ($dIntegral_X6tBB :: Integral b_X6tBy)
            (n_X6rae :: b_X6tBy)
            (ds_X6u80 :: Product a_X6tB3) ->
            ^ @ a_X6tB3
              @ b_X6tBy
              $dNum_X6tB5
              $dIntegral_X6tBB
              (ds_X6u80
               `cast` (Data.Semigroup.Internal.N:Product[0] <a_X6tB3>_R
                       :: (Product a_X6tB3 :: *) ~R# (a_X6tB3 :: *)))
              n_X6rae)
         `cast` (forall (b :: <*>_N).
                 <Integral b>_R
                 ->_R <b>_R
                 ->_R <Product a_X6tB3>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tB3>_R)
                 :: (forall b. Integral b => b -> Product a_X6tB3 -> a_X6tB3 :: *)
                    ~R# (forall b.
                         Integral b =>
                         b -> Product a_X6tB3 -> Product a_X6tB3 :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonoidProduct1 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Data.Semigroup.Internal.$fMonoidProduct1 = 1

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonoidProduct2 :: forall a. Num a => a
[GblId,
 Arity=1,
 Str=<S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6tt3) ($dNum_a6tt4 [Occ=Once] :: Num a_a6tt3) ->
                 fromInteger
                   @ a_a6tt3 $dNum_a6tt4 Data.Semigroup.Internal.$fMonoidProduct1}]
Data.Semigroup.Internal.$fMonoidProduct2
  = \ (@ a_a6tt3) ($dNum_a6tt4 :: Num a_a6tt3) ->
      fromInteger
        @ a_a6tt3 $dNum_a6tt4 Data.Semigroup.Internal.$fMonoidProduct1

-- RHS size: {terms: 19, types: 23, coercions: 10, joins: 0/2}
Data.Semigroup.Internal.$fMonoidProduct_$cmconcat
  :: forall a. Num a => [Product a] -> Product a
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C1(U)),A,A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 140 60}]
Data.Semigroup.Internal.$fMonoidProduct_$cmconcat
  = \ (@ a_X6tAM) ($dNum_X6tAO :: Num a_X6tAM) ->
      let {
        z_s6uzS :: a_X6tAM
        [LclId]
        z_s6uzS
          = fromInteger
              @ a_X6tAM $dNum_X6tAO Data.Semigroup.Internal.$fMonoidProduct1 } in
      letrec {
        go_X6ua6 [Occ=LoopBreaker] :: [Product a_X6tAM] -> Product a_X6tAM
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_X6ua6
          = \ (ds_i6u2C :: [Product a_X6tAM]) ->
              case ds_i6u2C of {
                [] ->
                  z_s6uzS
                  `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tAM>_R)
                          :: (a_X6tAM :: *) ~R# (Product a_X6tAM :: *));
                : y_i6u2H ys_i6u2I ->
                  (* @ a_X6tAM
                     $dNum_X6tAO
                     (y_i6u2H
                      `cast` (Data.Semigroup.Internal.N:Product[0] <a_X6tAM>_R
                              :: (Product a_X6tAM :: *) ~R# (a_X6tAM :: *)))
                     ((go_X6ua6 ys_i6u2I)
                      `cast` (Data.Semigroup.Internal.N:Product[0] <a_X6tAM>_R
                              :: (Product a_X6tAM :: *) ~R# (a_X6tAM :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tAM>_R)
                          :: (a_X6tAM :: *) ~R# (Product a_X6tAM :: *))
              }; } in
      go_X6ua6

-- RHS size: {terms: 11, types: 10, coercions: 14, joins: 0/0}
Data.Semigroup.Internal.$fMonoidProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Num a => Monoid (Product a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,U,A,A,A,C(U))>m,
 Unf=DFun: \ (@ a_a6r2w) (v_X7J :: Num a_a6r2w) ->
       GHC.Base.C:Monoid TYPE: Product a_a6r2w
                         Data.Semigroup.Internal.$fSemigroupProduct @ a_a6r2w v_X7J
                         (Data.Semigroup.Internal.$fMonoidProduct2 @ a_a6r2w v_X7J)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2w>_R)
                                 :: (a_a6r2w :: *) ~R# (Product a_a6r2w :: *))
                         (* @ a_a6r2w v_X7J)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2w>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2w>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2w>_R)
                                 :: (a_a6r2w -> a_a6r2w -> a_a6r2w :: *)
                                    ~R# (Product a_a6r2w
                                         -> Product a_a6r2w -> Product a_a6r2w :: *))
                         Data.Semigroup.Internal.$fMonoidProduct_$cmconcat @ a_a6r2w v_X7J]
Data.Semigroup.Internal.$fMonoidProduct
  = \ (@ a_X6tAK) ($dNum_X6tAM :: Num a_X6tAK) ->
      GHC.Base.C:Monoid
        @ (Product a_X6tAK)
        (Data.Semigroup.Internal.$fSemigroupProduct @ a_X6tAK $dNum_X6tAM)
        ((Data.Semigroup.Internal.$fMonoidProduct2 @ a_X6tAK $dNum_X6tAM)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tAK>_R)
                 :: (a_X6tAK :: *) ~R# (Product a_X6tAK :: *)))
        ((* @ a_X6tAK $dNum_X6tAM)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tAK>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tAK>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_X6tAK>_R)
                 :: (a_X6tAK -> a_X6tAK -> a_X6tAK :: *)
                    ~R# (Product a_X6tAK -> Product a_X6tAK -> Product a_X6tAK :: *)))
        (Data.Semigroup.Internal.$fMonoidProduct_$cmconcat
           @ a_X6tAK $dNum_X6tAM)

-- RHS size: {terms: 5, types: 7, coercions: 31, joins: 0/0}
Data.Semigroup.Internal.$fFunctorProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor Product
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: Product
                          Data.Semigroup.Internal.$fFunctorDual2
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
                                  ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
                                  :: (forall a b. (a -> b) -> a -> b :: *)
                                     ~R# (forall a b. (a -> b) -> Product a -> Product b :: *))
                          (\ (@ a_a6tsU) (@ b_a6tsV) ->
                             Data.Semigroup.Internal.$fFunctorDual1 @ b_a6tsV @ a_a6tsU)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
                                  ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
                                  :: (forall a b. a -> b -> a :: *)
                                     ~R# (forall a b. a -> Product b -> Product a :: *))]
Data.Semigroup.Internal.$fFunctorProduct
  = GHC.Base.C:Functor
      @ Product
      (Data.Semigroup.Internal.$fFunctorDual2
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a -> b>_R
               ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
               :: (forall a b. (a -> b) -> a -> b :: *)
                  ~R# (forall a b. (a -> b) -> Product a -> Product b :: *)))
      ((\ (@ a_a6tBn) (@ b_a6tBo) ->
          Data.Semigroup.Internal.$fFunctorDual1 @ b_a6tBo @ a_a6tBn)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
               :: (forall a b. a -> b -> a :: *)
                  ~R# (forall a b. a -> Product b -> Product a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeProduct3
  :: forall a b. Product (a -> b) -> Product (a -> b)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6trL)
                 (@ b_a6trM)
                 (v_X7W [Occ=Once] :: Product (a_a6trL -> b_a6trM)) ->
                 v_X7W}]
Data.Semigroup.Internal.$fApplicativeProduct3
  = \ (@ a_a6trL)
      (@ b_a6trM)
      (v_X7W :: Product (a_a6trL -> b_a6trM)) ->
      v_X7W

-- RHS size: {terms: 7, types: 11, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeProduct2
  :: forall a c b. (a -> b -> c) -> Product a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6ts0)
                 (@ c_a6ts2)
                 (@ b_a6ts1)
                 (f1_X6u83 [Occ=Once!] :: a_a6ts0 -> b_a6ts1 -> c_a6ts2)
                 (x_X6u85 [Occ=Once] :: Product a_a6ts0) ->
                 f1_X6u83
                   (x_X6u85
                    `cast` (Data.Semigroup.Internal.N:Product[0] <a_a6ts0>_R
                            :: (Product a_a6ts0 :: *) ~R# (a_a6ts0 :: *)))}]
Data.Semigroup.Internal.$fApplicativeProduct2
  = \ (@ a_a6ts0)
      (@ c_a6ts2)
      (@ b_a6ts1)
      (f1_X6u83 :: a_a6ts0 -> b_a6ts1 -> c_a6ts2)
      (x_X6u85 :: Product a_a6ts0) ->
      f1_X6u83
        (x_X6u85
         `cast` (Data.Semigroup.Internal.N:Product[0] <a_a6ts0>_R
                 :: (Product a_a6ts0 :: *) ~R# (a_a6ts0 :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeProduct_$c*>
  :: forall a b. Product a -> Product b -> Product b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tsg)
                 (@ b_a6tsh)
                 _ [Occ=Dead]
                 (a2_i6tZZ [Occ=Once] :: Product b_a6tsh) ->
                 a2_i6tZZ}]
Data.Semigroup.Internal.$fApplicativeProduct_$c*>
  = \ (@ a_a6tsg)
      (@ b_a6tsh)
      _ [Occ=Dead]
      (a2_i6tZZ :: Product b_a6tsh) ->
      a2_i6tZZ

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeProduct1
  :: forall b a. Product a -> b -> Product a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_a6tsv)
                 (@ a_a6tsu)
                 (x_X6ue7 [Occ=Once] :: Product a_a6tsu)
                 _ [Occ=Dead] ->
                 x_X6ue7}]
Data.Semigroup.Internal.$fApplicativeProduct1
  = \ (@ b_a6tsv)
      (@ a_a6tsu)
      (x_X6ue7 :: Product a_a6tsu)
      _ [Occ=Dead] ->
      x_X6ue7

-- RHS size: {terms: 12, types: 16, coercions: 66, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative Product
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: Product
                              Data.Semigroup.Internal.$fFunctorProduct
                              Data.Semigroup.Internal.$fApplicativeDual4
                              `cast` (forall (a :: <*>_N).
                                      <a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
                                      :: (forall a. a -> a :: *)
                                         ~R# (forall a. a -> Product a :: *))
                              Data.Semigroup.Internal.$fApplicativeProduct3
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Product (a -> b)>_R
                                      ->_R Data.Semigroup.Internal.N:Product[0]
                                               (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
                                                ->_R Sym (Data.Semigroup.Internal.N:Product[0]
                                                              <b>_R))
                                      :: (forall a b. Product (a -> b) -> Product (a -> b) :: *)
                                         ~R# (forall a b.
                                              Product (a -> b) -> Product a -> Product b :: *))
                              (\ (@ a_a6ts0) (@ b_a6ts1) (@ c_a6ts2) ->
                                 Data.Semigroup.Internal.$fApplicativeProduct2
                                   @ a_a6ts0 @ c_a6ts2 @ b_a6ts1)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                      <a -> b -> c>_R
                                      ->_R <Product a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
                                      ->_R Sym (Data.Semigroup.Internal.N:Product[0] <c>_R)
                                      :: (forall a b c. (a -> b -> c) -> Product a -> b -> c :: *)
                                         ~R# (forall a b c.
                                              (a -> b -> c)
                                              -> Product a -> Product b -> Product c :: *))
                              Data.Semigroup.Internal.$fApplicativeProduct_$c*>
                              (\ (@ a_a6tsu) (@ b_a6tsv) ->
                                 Data.Semigroup.Internal.$fApplicativeProduct1 @ b_a6tsv @ a_a6tsu)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <Product a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
                                      ->_R Data.Semigroup.Internal.N:Product[0]
                                               (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                                      :: (forall a b. Product a -> b -> Product a :: *)
                                         ~R# (forall a b.
                                              Product a -> Product b -> Product a :: *))]
Data.Semigroup.Internal.$fApplicativeProduct
  = GHC.Base.C:Applicative
      @ Product
      Data.Semigroup.Internal.$fFunctorProduct
      (Data.Semigroup.Internal.$fApplicativeDual4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Product a :: *)))
      (Data.Semigroup.Internal.$fApplicativeProduct3
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Product (a -> b)>_R
               ->_R Data.Semigroup.Internal.N:Product[0]
                        (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
                         ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R))
               :: (forall a b. Product (a -> b) -> Product (a -> b) :: *)
                  ~R# (forall a b. Product (a -> b) -> Product a -> Product b :: *)))
      ((\ (@ a_a6ts0) (@ b_a6ts1) (@ c_a6ts2) ->
          Data.Semigroup.Internal.$fApplicativeProduct2
            @ a_a6ts0 @ c_a6ts2 @ b_a6ts1)
       `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
               <a -> b -> c>_R
               ->_R <Product a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
               ->_R Sym (Data.Semigroup.Internal.N:Product[0] <c>_R)
               :: (forall a b c. (a -> b -> c) -> Product a -> b -> c :: *)
                  ~R# (forall a b c.
                       (a -> b -> c) -> Product a -> Product b -> Product c :: *)))
      Data.Semigroup.Internal.$fApplicativeProduct_$c*>
      ((\ (@ a_a6tsu) (@ b_a6tsv) ->
          Data.Semigroup.Internal.$fApplicativeProduct1 @ b_a6tsv @ a_a6tsu)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <Product a>_R
               ->_R Sym (Data.Semigroup.Internal.N:Product[0] <b>_R)
               ->_R Data.Semigroup.Internal.N:Product[0]
                        (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
               :: (forall a b. Product a -> b -> Product a :: *)
                  ~R# (forall a b. Product a -> Product b -> Product a :: *)))

-- RHS size: {terms: 7, types: 12, coercions: 43, joins: 0/0}
Data.Semigroup.Internal.$fFunctorAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *). Functor f => Functor (Alt f)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ (f_a6r2k :: * -> *)) (v_X8k :: Functor f_a6r2k) ->
       GHC.Base.C:Functor TYPE: Alt f_a6r2k
                          (fmap @ f_a6r2k v_X8k)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                <*>_N <f_a6r2k>_R) <a>_N
                                  ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                <*>_N <f_a6r2k>_R) <b>_N
                                  :: (forall a b. (a -> b) -> f_a6r2k a -> f_a6r2k b :: *)
                                     ~R# (forall a b.
                                          (a -> b) -> Alt f_a6r2k a -> Alt f_a6r2k b :: *))
                          (<$ @ f_a6r2k v_X8k)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R
                                  ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                <*>_N <f_a6r2k>_R) <b>_N
                                  ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                <*>_N <f_a6r2k>_R) <a>_N
                                  :: (forall a b. a -> f_a6r2k b -> f_a6r2k a :: *)
                                     ~R# (forall a b. a -> Alt f_a6r2k b -> Alt f_a6r2k a :: *))]
Data.Semigroup.Internal.$fFunctorAlt
  = \ (@ (f_a6tow :: * -> *)) ($dFunctor_a6tox :: Functor f_a6tow) ->
      GHC.Base.C:Functor
        @ (Alt f_a6tow)
        ((fmap @ f_a6tow $dFunctor_a6tox)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tow>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tow>_R) <b>_N
                 :: (forall a b. (a -> b) -> f_a6tow a -> f_a6tow b :: *)
                    ~R# (forall a b. (a -> b) -> Alt f_a6tow a -> Alt f_a6tow b :: *)))
        ((<$ @ f_a6tow $dFunctor_a6tox)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tow>_R) <b>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tow>_R) <a>_N
                 :: (forall a b. a -> f_a6tow b -> f_a6tow a :: *)
                    ~R# (forall a b. a -> Alt f_a6tow b -> Alt f_a6tow a :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative
  :: forall (f :: * -> *). Applicative f => Functor (Alt f)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_a6tkt :: * -> *))
                 ($dApplicative_a6tku [Occ=Once] :: Applicative f_a6tkt) ->
                 Data.Semigroup.Internal.$fFunctorAlt
                   @ f_a6tkt (GHC.Base.$p1Applicative @ f_a6tkt $dApplicative_a6tku)}]
Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative
  = \ (@ (f_a6tkt :: * -> *))
      ($dApplicative_a6tku :: Applicative f_a6tkt) ->
      Data.Semigroup.Internal.$fFunctorAlt
        @ f_a6tkt (GHC.Base.$p1Applicative @ f_a6tkt $dApplicative_a6tku)

-- RHS size: {terms: 15, types: 16, coercions: 123, joins: 0/0}
Data.Semigroup.Internal.$fApplicativeAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *). Applicative f => Applicative (Alt f)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ (f_a6r2k :: * -> *))
             (v_X8v :: Applicative f_a6r2k) ->
       GHC.Base.C:Applicative TYPE: Alt f_a6r2k
                              Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative
                                @ f_a6r2k v_X8v
                              (pure @ f_a6r2k v_X8v)
                              `cast` (forall (a :: <*>_N).
                                      <a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <a>_N
                                      :: (forall a. a -> f_a6r2k a :: *)
                                         ~R# (forall a. a -> Alt f_a6r2k a :: *))
                              (<*> @ f_a6r2k v_X8v)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a
                                                                                                -> b>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <b>_N
                                      :: (forall a b.
                                          f_a6r2k (a -> b) -> f_a6r2k a -> f_a6r2k b :: *)
                                         ~R# (forall a b.
                                              Alt f_a6r2k (a -> b)
                                              -> Alt f_a6r2k a -> Alt f_a6r2k b :: *))
                              (liftA2 @ f_a6r2k v_X8v)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                      <a -> b -> c>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <b>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <c>_N
                                      :: (forall a b c.
                                          (a -> b -> c) -> f_a6r2k a -> f_a6r2k b -> f_a6r2k c :: *)
                                         ~R# (forall a b c.
                                              (a -> b -> c)
                                              -> Alt f_a6r2k a
                                              -> Alt f_a6r2k b
                                              -> Alt f_a6r2k c :: *))
                              (*> @ f_a6r2k v_X8v)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <b>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <b>_N
                                      :: (forall a b. f_a6r2k a -> f_a6r2k b -> f_a6r2k b :: *)
                                         ~R# (forall a b.
                                              Alt f_a6r2k a -> Alt f_a6r2k b -> Alt f_a6r2k b :: *))
                              (<* @ f_a6r2k v_X8v)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <b>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <a>_N
                                      :: (forall a b. f_a6r2k a -> f_a6r2k b -> f_a6r2k a :: *)
                                         ~R# (forall a b.
                                              Alt f_a6r2k a
                                              -> Alt f_a6r2k b -> Alt f_a6r2k a :: *))]
Data.Semigroup.Internal.$fApplicativeAlt
  = \ (@ (f_a6tkt :: * -> *))
      ($dApplicative_a6tku :: Applicative f_a6tkt) ->
      GHC.Base.C:Applicative
        @ (Alt f_a6tkt)
        (Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative
           @ f_a6tkt $dApplicative_a6tku)
        ((pure @ f_a6tkt $dApplicative_a6tku)
         `cast` (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <a>_N
                 :: (forall a. a -> f_a6tkt a :: *)
                    ~R# (forall a. a -> Alt f_a6tkt a :: *)))
        ((<*> @ f_a6tkt $dApplicative_a6tku)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <a -> b>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <b>_N
                 :: (forall a b. f_a6tkt (a -> b) -> f_a6tkt a -> f_a6tkt b :: *)
                    ~R# (forall a b.
                         Alt f_a6tkt (a -> b) -> Alt f_a6tkt a -> Alt f_a6tkt b :: *)))
        ((liftA2 @ f_a6tkt $dApplicative_a6tku)
         `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <a -> b -> c>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <b>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <c>_N
                 :: (forall a b c.
                     (a -> b -> c) -> f_a6tkt a -> f_a6tkt b -> f_a6tkt c :: *)
                    ~R# (forall a b c.
                         (a -> b -> c)
                         -> Alt f_a6tkt a -> Alt f_a6tkt b -> Alt f_a6tkt c :: *)))
        ((*> @ f_a6tkt $dApplicative_a6tku)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <b>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <b>_N
                 :: (forall a b. f_a6tkt a -> f_a6tkt b -> f_a6tkt b :: *)
                    ~R# (forall a b.
                         Alt f_a6tkt a -> Alt f_a6tkt b -> Alt f_a6tkt b :: *)))
        ((<* @ f_a6tkt $dApplicative_a6tku)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <b>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tkt>_R) <a>_N
                 :: (forall a b. f_a6tkt a -> f_a6tkt b -> f_a6tkt a :: *)
                    ~R# (forall a b.
                         Alt f_a6tkt a -> Alt f_a6tkt b -> Alt f_a6tkt a :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative
  :: forall (f :: * -> *). Alternative f => Applicative (Alt f)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_a6tn6 :: * -> *))
                 ($dAlternative_a6tn7 [Occ=Once] :: Alternative f_a6tn6) ->
                 Data.Semigroup.Internal.$fApplicativeAlt
                   @ f_a6tn6 (GHC.Base.$p1Alternative @ f_a6tn6 $dAlternative_a6tn7)}]
Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative
  = \ (@ (f_a6tn6 :: * -> *))
      ($dAlternative_a6tn7 :: Alternative f_a6tn6) ->
      Data.Semigroup.Internal.$fApplicativeAlt
        @ f_a6tn6 (GHC.Base.$p1Alternative @ f_a6tn6 $dAlternative_a6tn7)

-- RHS size: {terms: 13, types: 15, coercions: 66, joins: 0/0}
Data.Semigroup.Internal.$fAlternativeAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *). Alternative f => Alternative (Alt f)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ (f_a6r2k :: * -> *))
             (v_X8x :: Alternative f_a6r2k) ->
       GHC.Base.C:Alternative TYPE: Alt f_a6r2k
                              Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative
                                @ f_a6r2k v_X8x
                              (empty @ f_a6r2k v_X8x)
                              `cast` (forall (a :: <*>_N).
                                      Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                      :: (forall a. f_a6r2k a :: *)
                                         ~R# (forall a. Alt f_a6r2k a :: *))
                              (<|> @ f_a6r2k v_X8x)
                              `cast` (forall (a :: <*>_N).
                                      Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <a>_N
                                      :: (forall a. f_a6r2k a -> f_a6r2k a -> f_a6r2k a :: *)
                                         ~R# (forall a.
                                              Alt f_a6r2k a -> Alt f_a6r2k a -> Alt f_a6r2k a :: *))
                              (some @ f_a6r2k v_X8x)
                              `cast` (forall (a :: <*>_N).
                                      Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <[a]>_N
                                      :: (forall a. f_a6r2k a -> f_a6r2k [a] :: *)
                                         ~R# (forall a. Alt f_a6r2k a -> Alt f_a6r2k [a] :: *))
                              (many @ f_a6r2k v_X8x)
                              `cast` (forall (a :: <*>_N).
                                      Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <[a]>_N
                                      :: (forall a. f_a6r2k a -> f_a6r2k [a] :: *)
                                         ~R# (forall a. Alt f_a6r2k a -> Alt f_a6r2k [a] :: *))]
Data.Semigroup.Internal.$fAlternativeAlt
  = \ (@ (f_a6tn6 :: * -> *))
      ($dAlternative_a6tn7 :: Alternative f_a6tn6) ->
      GHC.Base.C:Alternative
        @ (Alt f_a6tn6)
        (Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative
           @ f_a6tn6 $dAlternative_a6tn7)
        ((empty @ f_a6tn6 $dAlternative_a6tn7)
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tn6>_R) <a>_N
                 :: (forall a. f_a6tn6 a :: *) ~R# (forall a. Alt f_a6tn6 a :: *)))
        ((<|> @ f_a6tn6 $dAlternative_a6tn7)
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tn6>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tn6>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tn6>_R) <a>_N
                 :: (forall a. f_a6tn6 a -> f_a6tn6 a -> f_a6tn6 a :: *)
                    ~R# (forall a.
                         Alt f_a6tn6 a -> Alt f_a6tn6 a -> Alt f_a6tn6 a :: *)))
        ((some @ f_a6tn6 $dAlternative_a6tn7)
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tn6>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <*>_N <f_a6tn6>_R) <[a]>_N
                 :: (forall a. f_a6tn6 a -> f_a6tn6 [a] :: *)
                    ~R# (forall a. Alt f_a6tn6 a -> Alt f_a6tn6 [a] :: *)))
        ((many @ f_a6tn6 $dAlternative_a6tn7)
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tn6>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <*>_N <f_a6tn6>_R) <[a]>_N
                 :: (forall a. f_a6tn6 a -> f_a6tn6 [a] :: *)
                    ~R# (forall a. Alt f_a6tn6 a -> Alt f_a6tn6 [a] :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus
  :: forall (f :: * -> *). MonadPlus f => Alternative (Alt f)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),1*U,1*U,1*U,1*U),A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_a6tjD :: * -> *))
                 ($dMonadPlus_a6tjE [Occ=Once] :: MonadPlus f_a6tjD) ->
                 Data.Semigroup.Internal.$fAlternativeAlt
                   @ f_a6tjD (GHC.Base.$p1MonadPlus @ f_a6tjD $dMonadPlus_a6tjE)}]
Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus
  = \ (@ (f_a6tjD :: * -> *))
      ($dMonadPlus_a6tjE :: MonadPlus f_a6tjD) ->
      Data.Semigroup.Internal.$fAlternativeAlt
        @ f_a6tjD (GHC.Base.$p1MonadPlus @ f_a6tjD $dMonadPlus_a6tjE)

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonadAlt_$cp1Monad
  :: forall (f :: * -> *). Monad f => Applicative (Alt f)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_a6thT :: * -> *))
                 ($dMonad_a6thU [Occ=Once] :: Monad f_a6thT) ->
                 Data.Semigroup.Internal.$fApplicativeAlt
                   @ f_a6thT (GHC.Base.$p1Monad @ f_a6thT $dMonad_a6thU)}]
Data.Semigroup.Internal.$fMonadAlt_$cp1Monad
  = \ (@ (f_a6thT :: * -> *)) ($dMonad_a6thU :: Monad f_a6thT) ->
      Data.Semigroup.Internal.$fApplicativeAlt
        @ f_a6thT (GHC.Base.$p1Monad @ f_a6thT $dMonad_a6thU)

-- RHS size: {terms: 13, types: 15, coercions: 77, joins: 0/0}
Data.Semigroup.Internal.$fMonadAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *). Monad f => Monad (Alt f)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ (f_a6r2k :: * -> *)) (v_X8G :: Monad f_a6r2k) ->
       GHC.Base.C:Monad TYPE: Alt f_a6r2k
                        Data.Semigroup.Internal.$fMonadAlt_$cp1Monad @ f_a6r2k v_X8G
                        (>>= @ f_a6r2k v_X8G)
                        `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                ->_R (<a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                    <*>_N <f_a6r2k>_R) <b>_N)
                                ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <b>_N
                                :: (forall a b. f_a6r2k a -> (a -> f_a6r2k b) -> f_a6r2k b :: *)
                                   ~R# (forall a b.
                                        Alt f_a6r2k a
                                        -> (a -> Alt f_a6r2k b) -> Alt f_a6r2k b :: *))
                        (>> @ f_a6r2k v_X8G)
                        `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <b>_N
                                ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <b>_N
                                :: (forall a b. f_a6r2k a -> f_a6r2k b -> f_a6r2k b :: *)
                                   ~R# (forall a b.
                                        Alt f_a6r2k a -> Alt f_a6r2k b -> Alt f_a6r2k b :: *))
                        (return @ f_a6r2k v_X8G)
                        `cast` (forall (a :: <*>_N).
                                <a>_R
                                ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                :: (forall a. a -> f_a6r2k a :: *)
                                   ~R# (forall a. a -> Alt f_a6r2k a :: *))
                        (fail @ f_a6r2k v_X8G)
                        `cast` (forall (a :: <*>_N).
                                <[Char]>_R
                                ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                :: (forall a. [Char] -> f_a6r2k a :: *)
                                   ~R# (forall a. [Char] -> Alt f_a6r2k a :: *))]
Data.Semigroup.Internal.$fMonadAlt
  = \ (@ (f_a6thT :: * -> *)) ($dMonad_a6thU :: Monad f_a6thT) ->
      GHC.Base.C:Monad
        @ (Alt f_a6thT)
        (Data.Semigroup.Internal.$fMonadAlt_$cp1Monad
           @ f_a6thT $dMonad_a6thU)
        ((>>= @ f_a6thT $dMonad_a6thU)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6thT>_R) <a>_N
                 ->_R (<a>_R
                       ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                     <*>_N <f_a6thT>_R) <b>_N)
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6thT>_R) <b>_N
                 :: (forall a b. f_a6thT a -> (a -> f_a6thT b) -> f_a6thT b :: *)
                    ~R# (forall a b.
                         Alt f_a6thT a -> (a -> Alt f_a6thT b) -> Alt f_a6thT b :: *)))
        ((>> @ f_a6thT $dMonad_a6thU)
         `cast` (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6thT>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6thT>_R) <b>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6thT>_R) <b>_N
                 :: (forall a b. f_a6thT a -> f_a6thT b -> f_a6thT b :: *)
                    ~R# (forall a b.
                         Alt f_a6thT a -> Alt f_a6thT b -> Alt f_a6thT b :: *)))
        ((return @ f_a6thT $dMonad_a6thU)
         `cast` (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6thT>_R) <a>_N
                 :: (forall a. a -> f_a6thT a :: *)
                    ~R# (forall a. a -> Alt f_a6thT a :: *)))
        ((fail @ f_a6thT $dMonad_a6thU)
         `cast` (forall (a :: <*>_N).
                 <[Char]>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6thT>_R) <a>_N
                 :: (forall a. [Char] -> f_a6thT a :: *)
                    ~R# (forall a. [Char] -> Alt f_a6thT a :: *)))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus
  :: forall (f :: * -> *). MonadPlus f => Monad (Alt f)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),1*U,1*U,1*U,1*U),A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_a6tjD :: * -> *))
                 ($dMonadPlus_a6tjE [Occ=Once] :: MonadPlus f_a6tjD) ->
                 Data.Semigroup.Internal.$fMonadAlt
                   @ f_a6tjD (GHC.Base.$p2MonadPlus @ f_a6tjD $dMonadPlus_a6tjE)}]
Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus
  = \ (@ (f_a6tjD :: * -> *))
      ($dMonadPlus_a6tjE :: MonadPlus f_a6tjD) ->
      Data.Semigroup.Internal.$fMonadAlt
        @ f_a6tjD (GHC.Base.$p2MonadPlus @ f_a6tjD $dMonadPlus_a6tjE)

-- RHS size: {terms: 11, types: 14, coercions: 32, joins: 0/0}
Data.Semigroup.Internal.$fMonadPlusAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *). MonadPlus f => MonadPlus (Alt f)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),1*U,1*U,1*U,1*U),1*U(1*U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U),1*U,1*U,1*U,1*U),1*U,1*U)>m,
 Unf=DFun: \ (@ (f_a6r2k :: * -> *)) (v_X8I :: MonadPlus f_a6r2k) ->
       GHC.Base.C:MonadPlus TYPE: Alt f_a6r2k
                            Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus
                              @ f_a6r2k v_X8I
                            Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus
                              @ f_a6r2k v_X8I
                            (mzero @ f_a6r2k v_X8I)
                            `cast` (forall (a :: <*>_N).
                                    Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                    :: (forall a. f_a6r2k a :: *)
                                       ~R# (forall a. Alt f_a6r2k a :: *))
                            (mplus @ f_a6r2k v_X8I)
                            `cast` (forall (a :: <*>_N).
                                    Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6r2k>_R) <a>_N
                                    ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                  <*>_N <f_a6r2k>_R) <a>_N
                                    ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                  <*>_N <f_a6r2k>_R) <a>_N
                                    :: (forall a. f_a6r2k a -> f_a6r2k a -> f_a6r2k a :: *)
                                       ~R# (forall a.
                                            Alt f_a6r2k a -> Alt f_a6r2k a -> Alt f_a6r2k a :: *))]
Data.Semigroup.Internal.$fMonadPlusAlt
  = \ (@ (f_a6tjD :: * -> *))
      ($dMonadPlus_a6tjE :: MonadPlus f_a6tjD) ->
      GHC.Base.C:MonadPlus
        @ (Alt f_a6tjD)
        (Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus
           @ f_a6tjD $dMonadPlus_a6tjE)
        (Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus
           @ f_a6tjD $dMonadPlus_a6tjE)
        ((mzero @ f_a6tjD $dMonadPlus_a6tjE)
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tjD>_R) <a>_N
                 :: (forall a. f_a6tjD a :: *) ~R# (forall a. Alt f_a6tjD a :: *)))
        ((mplus @ f_a6tjD $dMonadPlus_a6tjE)
         `cast` (forall (a :: <*>_N).
                 Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tjD>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tjD>_R) <a>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0] <*>_N <f_a6tjD>_R) <a>_N
                 :: (forall a. f_a6tjD a -> f_a6tjD a -> f_a6tjD a :: *)
                    ~R# (forall a.
                         Alt f_a6tjD a -> Alt f_a6tjD a -> Alt f_a6tjD a :: *)))

-- RHS size: {terms: 21, types: 29, coercions: 108, joins: 0/0}
Data.Semigroup.Internal.$fEnumAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (a :: k). Enum (f a) => Enum (Alt f a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ k_a6rdI)
             (@ (f_a6r2k :: k_a6rdI -> *))
             (@ (a_a6r2l :: k_a6rdI))
             (v_X9x :: Enum (f_a6r2k a_a6r2l)) ->
       GHC.Enum.C:Enum TYPE: Alt f_a6r2k a_a6r2l
                       (succ @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                        <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                  ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                       (pred @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                        <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                  ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                       (toEnum @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (<Int>_R
                               ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               :: (Int -> f_a6r2k a_a6r2l :: *)
                                  ~R# (Int -> Alt f_a6r2k a_a6r2l :: *))
                       (fromEnum @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                        <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R <Int>_R
                               :: (f_a6r2k a_a6r2l -> Int :: *)
                                  ~R# (Alt f_a6r2k a_a6r2l -> Int :: *))
                       (enumFrom @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                        <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N])_R
                               :: (f_a6r2k a_a6r2l -> [f_a6r2k a_a6r2l] :: *)
                                  ~R# (Alt f_a6r2k a_a6r2l -> [Alt f_a6r2k a_a6r2l] :: *))
                       (enumFromThen @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                        <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N])_R
                               :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> [f_a6r2k a_a6r2l] :: *)
                                  ~R# (Alt f_a6r2k a_a6r2l
                                       -> Alt f_a6r2k a_a6r2l -> [Alt f_a6r2k a_a6r2l] :: *))
                       (enumFromTo @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                        <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N])_R
                               :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> [f_a6r2k a_a6r2l] :: *)
                                  ~R# (Alt f_a6r2k a_a6r2l
                                       -> Alt f_a6r2k a_a6r2l -> [Alt f_a6r2k a_a6r2l] :: *))
                       (enumFromThenTo @ (f_a6r2k a_a6r2l) v_X9x)
                       `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                        <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                               ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N])_R
                               :: (f_a6r2k a_a6r2l
                                   -> f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> [f_a6r2k a_a6r2l] :: *)
                                  ~R# (Alt f_a6r2k a_a6r2l
                                       -> Alt f_a6r2k a_a6r2l
                                       -> Alt f_a6r2k a_a6r2l
                                       -> [Alt f_a6r2k a_a6r2l] :: *))]
Data.Semigroup.Internal.$fEnumAlt
  = \ (@ k_X6tyL)
      (@ (f_X6tpk :: k_X6tyL -> *))
      (@ (a_X6tpm :: k_X6tyL))
      ($dEnum_X6tpo :: Enum (f_X6tpk a_X6tpm)) ->
      GHC.Enum.C:Enum
        @ (Alt f_X6tpk a_X6tpm)
        ((succ @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 :: (f_X6tpk a_X6tpm -> f_X6tpk a_X6tpm :: *)
                    ~R# (Alt f_X6tpk a_X6tpm -> Alt f_X6tpk a_X6tpm :: *)))
        ((pred @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 :: (f_X6tpk a_X6tpm -> f_X6tpk a_X6tpm :: *)
                    ~R# (Alt f_X6tpk a_X6tpm -> Alt f_X6tpk a_X6tpm :: *)))
        ((toEnum @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (<Int>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 :: (Int -> f_X6tpk a_X6tpm :: *)
                    ~R# (Int -> Alt f_X6tpk a_X6tpm :: *)))
        ((fromEnum @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R <Int>_R
                 :: (f_X6tpk a_X6tpm -> Int :: *)
                    ~R# (Alt f_X6tpk a_X6tpm -> Int :: *)))
        ((enumFrom @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                 <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N])_R
                 :: (f_X6tpk a_X6tpm -> [f_X6tpk a_X6tpm] :: *)
                    ~R# (Alt f_X6tpk a_X6tpm -> [Alt f_X6tpk a_X6tpm] :: *)))
        ((enumFromThen @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                 <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N])_R
                 :: (f_X6tpk a_X6tpm -> f_X6tpk a_X6tpm -> [f_X6tpk a_X6tpm] :: *)
                    ~R# (Alt f_X6tpk a_X6tpm
                         -> Alt f_X6tpk a_X6tpm -> [Alt f_X6tpk a_X6tpm] :: *)))
        ((enumFromTo @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                 <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N])_R
                 :: (f_X6tpk a_X6tpm -> f_X6tpk a_X6tpm -> [f_X6tpk a_X6tpm] :: *)
                    ~R# (Alt f_X6tpk a_X6tpm
                         -> Alt f_X6tpk a_X6tpm -> [Alt f_X6tpk a_X6tpm] :: *)))
        ((enumFromThenTo @ (f_X6tpk a_X6tpm) $dEnum_X6tpo)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N
                 ->_R ([Sym (Data.Semigroup.Internal.N:Alt[0]
                                 <k_X6tyL>_N <f_X6tpk>_R) <a_X6tpm>_N])_R
                 :: (f_X6tpk a_X6tpm
                     -> f_X6tpk a_X6tpm -> f_X6tpk a_X6tpm -> [f_X6tpk a_X6tpm] :: *)
                    ~R# (Alt f_X6tpk a_X6tpm
                         -> Alt f_X6tpk a_X6tpm
                         -> Alt f_X6tpk a_X6tpm
                         -> [Alt f_X6tpk a_X6tpm] :: *)))

-- RHS size: {terms: 19, types: 27, coercions: 91, joins: 0/0}
Data.Semigroup.Internal.$fNumAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (a :: k). Num (f a) => Num (Alt f a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ k_a6rdI)
             (@ (f_a6r2k :: k_a6rdI -> *))
             (@ (a_a6r2l :: k_a6rdI))
             (v_Xae :: Num (f_a6r2k a_a6r2l)) ->
       GHC.Num.C:Num TYPE: Alt f_a6r2k a_a6r2l
                     (+ @ (f_a6r2k a_a6r2l) v_Xae)
                     `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                      <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                ~R# (Alt f_a6r2k a_a6r2l
                                     -> Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                     (- @ (f_a6r2k a_a6r2l) v_Xae)
                     `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                      <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                ~R# (Alt f_a6r2k a_a6r2l
                                     -> Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                     (* @ (f_a6r2k a_a6r2l) v_Xae)
                     `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                      <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                ~R# (Alt f_a6r2k a_a6r2l
                                     -> Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                     (negate @ (f_a6r2k a_a6r2l) v_Xae)
                     `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                      <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                     (abs @ (f_a6r2k a_a6r2l) v_Xae)
                     `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                      <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                     (signum @ (f_a6r2k a_a6r2l) v_Xae)
                     `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                      <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                     (fromInteger @ (f_a6r2k a_a6r2l) v_Xae)
                     `cast` (<Integer>_R
                             ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                           <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                             :: (Integer -> f_a6r2k a_a6r2l :: *)
                                ~R# (Integer -> Alt f_a6r2k a_a6r2l :: *))]
Data.Semigroup.Internal.$fNumAlt
  = \ (@ k_X6tym)
      (@ (f_X6toe :: k_X6tym -> *))
      (@ (a_X6tog :: k_X6tym))
      ($dNum_X6toi :: Num (f_X6toe a_X6tog)) ->
      GHC.Num.C:Num
        @ (Alt f_X6toe a_X6tog)
        ((+ @ (f_X6toe a_X6tog) $dNum_X6toi)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 :: (f_X6toe a_X6tog -> f_X6toe a_X6tog -> f_X6toe a_X6tog :: *)
                    ~R# (Alt f_X6toe a_X6tog
                         -> Alt f_X6toe a_X6tog -> Alt f_X6toe a_X6tog :: *)))
        ((- @ (f_X6toe a_X6tog) $dNum_X6toi)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 :: (f_X6toe a_X6tog -> f_X6toe a_X6tog -> f_X6toe a_X6tog :: *)
                    ~R# (Alt f_X6toe a_X6tog
                         -> Alt f_X6toe a_X6tog -> Alt f_X6toe a_X6tog :: *)))
        ((* @ (f_X6toe a_X6tog) $dNum_X6toi)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 :: (f_X6toe a_X6tog -> f_X6toe a_X6tog -> f_X6toe a_X6tog :: *)
                    ~R# (Alt f_X6toe a_X6tog
                         -> Alt f_X6toe a_X6tog -> Alt f_X6toe a_X6tog :: *)))
        ((negate @ (f_X6toe a_X6tog) $dNum_X6toi)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 :: (f_X6toe a_X6tog -> f_X6toe a_X6tog :: *)
                    ~R# (Alt f_X6toe a_X6tog -> Alt f_X6toe a_X6tog :: *)))
        ((abs @ (f_X6toe a_X6tog) $dNum_X6toi)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 :: (f_X6toe a_X6tog -> f_X6toe a_X6tog :: *)
                    ~R# (Alt f_X6toe a_X6tog -> Alt f_X6toe a_X6tog :: *)))
        ((signum @ (f_X6toe a_X6tog) $dNum_X6toi)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 :: (f_X6toe a_X6tog -> f_X6toe a_X6tog :: *)
                    ~R# (Alt f_X6toe a_X6tog -> Alt f_X6toe a_X6tog :: *)))
        ((fromInteger @ (f_X6toe a_X6tog) $dNum_X6toi)
         `cast` (<Integer>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tym>_N <f_X6toe>_R) <a_X6tog>_N
                 :: (Integer -> f_X6toe a_X6tog :: *)
                    ~R# (Integer -> Alt f_X6toe a_X6tog :: *)))

-- RHS size: {terms: 9, types: 17, coercions: 26, joins: 0/0}
Data.Semigroup.Internal.$fEqAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (a :: k). Eq (f a) => Eq (Alt f a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ k_a6rdI)
             (@ (f_a6r2k :: k_a6rdI -> *))
             (@ (a_a6r2l :: k_a6rdI))
             (v_Xb7 :: Eq (f_a6r2k a_a6r2l)) ->
       GHC.Classes.C:Eq TYPE: Alt f_a6r2k a_a6r2l
                        (== @ (f_a6r2k a_a6r2l) v_Xb7)
                        `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                         <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                              <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                ->_R <Bool>_R
                                :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> Bool :: *)
                                   ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l -> Bool :: *))
                        (/= @ (f_a6r2k a_a6r2l) v_Xb7)
                        `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                         <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                              <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                ->_R <Bool>_R
                                :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> Bool :: *)
                                   ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l -> Bool :: *))]
Data.Semigroup.Internal.$fEqAlt
  = \ (@ k_X6txn)
      (@ (f_X6txq :: k_X6txn -> *))
      (@ (a_X6txt :: k_X6txn))
      ($dEq_X6txw :: Eq (f_X6txq a_X6txt)) ->
      GHC.Classes.C:Eq
        @ (Alt f_X6txq a_X6txt)
        ((== @ (f_X6txq a_X6txt) $dEq_X6txw)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6txn>_N <f_X6txq>_R) <a_X6txt>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6txn>_N <f_X6txq>_R) <a_X6txt>_N
                 ->_R <Bool>_R
                 :: (f_X6txq a_X6txt -> f_X6txq a_X6txt -> Bool :: *)
                    ~R# (Alt f_X6txq a_X6txt -> Alt f_X6txq a_X6txt -> Bool :: *)))
        ((/= @ (f_X6txq a_X6txt) $dEq_X6txw)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6txn>_N <f_X6txq>_R) <a_X6txt>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6txn>_N <f_X6txq>_R) <a_X6txt>_N
                 ->_R <Bool>_R
                 :: (f_X6txq a_X6txt -> f_X6txq a_X6txt -> Bool :: *)
                    ~R# (Alt f_X6txq a_X6txt -> Alt f_X6txq a_X6txt -> Bool :: *)))

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fOrdAlt_$cp1Ord
  :: forall k (f :: k -> *) (a :: k). Ord (f a) => Eq (Alt f a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_X6tmZ)
                 (@ (f_X6tn1 :: k_X6tmZ -> *))
                 (@ (a_X6tn3 :: k_X6tmZ))
                 ($dOrd_X6tn5 [Occ=Once] :: Ord (f_X6tn1 a_X6tn3)) ->
                 Data.Semigroup.Internal.$fEqAlt
                   @ k_X6tmZ
                   @ f_X6tn1
                   @ a_X6tn3
                   (GHC.Classes.$p1Ord @ (f_X6tn1 a_X6tn3) $dOrd_X6tn5)}]
Data.Semigroup.Internal.$fOrdAlt_$cp1Ord
  = \ (@ k_X6tmZ)
      (@ (f_X6tn1 :: k_X6tmZ -> *))
      (@ (a_X6tn3 :: k_X6tmZ))
      ($dOrd_X6tn5 :: Ord (f_X6tn1 a_X6tn3)) ->
      Data.Semigroup.Internal.$fEqAlt
        @ k_X6tmZ
        @ f_X6tn1
        @ a_X6tn3
        (GHC.Classes.$p1Ord @ (f_X6tn1 a_X6tn3) $dOrd_X6tn5)

-- RHS size: {terms: 21, types: 30, coercions: 99, joins: 0/0}
Data.Semigroup.Internal.$fOrdAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (a :: k). Ord (f a) => Ord (Alt f a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ k_a6rdI)
             (@ (f_a6r2k :: k_a6rdI -> *))
             (@ (a_a6r2l :: k_a6rdI))
             (v_Xb9 :: Ord (f_a6r2k a_a6r2l)) ->
       GHC.Classes.C:Ord TYPE: Alt f_a6r2k a_a6r2l
                         Data.Semigroup.Internal.$fOrdAlt_$cp1Ord
                           @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xb9
                         (compare @ (f_a6r2k a_a6r2l) v_Xb9)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R <Ordering>_R
                                 :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> Ordering :: *)
                                    ~R# (Alt f_a6r2k a_a6r2l
                                         -> Alt f_a6r2k a_a6r2l -> Ordering :: *))
                         (< @ (f_a6r2k a_a6r2l) v_Xb9)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R <Bool>_R
                                 :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> Bool :: *)
                                    ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l -> Bool :: *))
                         (<= @ (f_a6r2k a_a6r2l) v_Xb9)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R <Bool>_R
                                 :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> Bool :: *)
                                    ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l -> Bool :: *))
                         (> @ (f_a6r2k a_a6r2l) v_Xb9)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R <Bool>_R
                                 :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> Bool :: *)
                                    ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l -> Bool :: *))
                         (>= @ (f_a6r2k a_a6r2l) v_Xb9)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R <Bool>_R
                                 :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> Bool :: *)
                                    ~R# (Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l -> Bool :: *))
                         (max @ (f_a6r2k a_a6r2l) v_Xb9)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                    ~R# (Alt f_a6r2k a_a6r2l
                                         -> Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))
                         (min @ (f_a6r2k a_a6r2l) v_Xb9)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N <f_a6r2k>_R) <a_a6r2l>_N
                                 :: (f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l -> f_a6r2k a_a6r2l :: *)
                                    ~R# (Alt f_a6r2k a_a6r2l
                                         -> Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *))]
Data.Semigroup.Internal.$fOrdAlt
  = \ (@ k_X6tn0)
      (@ (f_X6tn2 :: k_X6tn0 -> *))
      (@ (a_X6tn4 :: k_X6tn0))
      ($dOrd_X6tn6 :: Ord (f_X6tn2 a_X6tn4)) ->
      GHC.Classes.C:Ord
        @ (Alt f_X6tn2 a_X6tn4)
        (Data.Semigroup.Internal.$fOrdAlt_$cp1Ord
           @ k_X6tn0 @ f_X6tn2 @ a_X6tn4 $dOrd_X6tn6)
        ((compare @ (f_X6tn2 a_X6tn4) $dOrd_X6tn6)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R <Ordering>_R
                 :: (f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 -> Ordering :: *)
                    ~R# (Alt f_X6tn2 a_X6tn4 -> Alt f_X6tn2 a_X6tn4 -> Ordering :: *)))
        ((< @ (f_X6tn2 a_X6tn4) $dOrd_X6tn6)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R <Bool>_R
                 :: (f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 -> Bool :: *)
                    ~R# (Alt f_X6tn2 a_X6tn4 -> Alt f_X6tn2 a_X6tn4 -> Bool :: *)))
        ((<= @ (f_X6tn2 a_X6tn4) $dOrd_X6tn6)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R <Bool>_R
                 :: (f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 -> Bool :: *)
                    ~R# (Alt f_X6tn2 a_X6tn4 -> Alt f_X6tn2 a_X6tn4 -> Bool :: *)))
        ((> @ (f_X6tn2 a_X6tn4) $dOrd_X6tn6)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R <Bool>_R
                 :: (f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 -> Bool :: *)
                    ~R# (Alt f_X6tn2 a_X6tn4 -> Alt f_X6tn2 a_X6tn4 -> Bool :: *)))
        ((>= @ (f_X6tn2 a_X6tn4) $dOrd_X6tn6)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R <Bool>_R
                 :: (f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 -> Bool :: *)
                    ~R# (Alt f_X6tn2 a_X6tn4 -> Alt f_X6tn2 a_X6tn4 -> Bool :: *)))
        ((max @ (f_X6tn2 a_X6tn4) $dOrd_X6tn6)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 :: (f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 :: *)
                    ~R# (Alt f_X6tn2 a_X6tn4
                         -> Alt f_X6tn2 a_X6tn4 -> Alt f_X6tn2 a_X6tn4 :: *)))
        ((min @ (f_X6tn2 a_X6tn4) $dOrd_X6tn6)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <k_X6tn0>_N <f_X6tn2>_R) <a_X6tn4>_N
                 :: (f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 -> f_X6tn2 a_X6tn4 :: *)
                    ~R# (Alt f_X6tn2 a_X6tn4
                         -> Alt f_X6tn2 a_X6tn4 -> Alt f_X6tn2 a_X6tn4 :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAlt1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fShowAlt1 = GHC.Types.I# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAlt3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fShowAlt3 = "Alt {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAlt2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Semigroup.Internal.$fShowAlt2 = "getAlt = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll5 = "}"#

-- RHS size: {terms: 39, types: 23, coercions: 4, joins: 0/1}
Data.Semigroup.Internal.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (a :: k).
     Show (f a) =>
     Int# -> Alt f a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 331 120}]
Data.Semigroup.Internal.$w$cshowsPrec1
  = \ (@ k_s6uLq)
      (@ (f_s6uLr :: k_s6uLq -> *))
      (@ (a_s6uLs :: k_s6uLq))
      (w_s6uLt :: Show (f_s6uLr a_s6uLs))
      (ww_s6uLy :: Int#)
      (w1_s6uLv :: Alt f_s6uLr a_s6uLs) ->
      let {
        f1_s6unV [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f1_s6unV
          = showsPrec
              @ (f_s6uLr a_s6uLs)
              w_s6uLt
              Data.Semigroup.Internal.$fShowAlt1
              (w1_s6uLv
               `cast` (Data.Semigroup.Internal.N:Alt[0]
                           <k_s6uLq>_N <f_s6uLr>_R <a_s6uLs>_N
                       :: (Alt f_s6uLr a_s6uLs :: *) ~R# (f_s6uLr a_s6uLs :: *))) } in
      case >=# ww_s6uLy 11# of {
        __DEFAULT ->
          \ (x_X6u8N :: String) ->
            unpackAppendCString#
              Data.Semigroup.Internal.$fShowAlt3
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowAlt2
                 (f1_s6unV
                    (unpackAppendCString#
                       Data.Semigroup.Internal.$fReadAll5 x_X6u8N)));
        1# ->
          \ (x_i6tXd :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowAlt3
                 (unpackAppendCString#
                    Data.Semigroup.Internal.$fShowAlt2
                    (f1_s6unV
                       (unpackAppendCString#
                          Data.Semigroup.Internal.$fReadAll5
                          (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i6tXd)))))
      }

-- RHS size: {terms: 13, types: 19, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAlt_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall k (f :: k -> *) (a :: k).
     Show (f a) =>
     Int -> Alt f a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_s6uLq)
                 (@ (f_s6uLr :: k_s6uLq -> *))
                 (@ (a_s6uLs :: k_s6uLq))
                 (w_s6uLt [Occ=Once] :: Show (f_s6uLr a_s6uLs))
                 (w1_s6uLu [Occ=Once!] :: Int)
                 (w2_s6uLv [Occ=Once] :: Alt f_s6uLr a_s6uLs) ->
                 case w1_s6uLu of { I# ww1_s6uLy [Occ=Once] ->
                 Data.Semigroup.Internal.$w$cshowsPrec1
                   @ k_s6uLq @ f_s6uLr @ a_s6uLs w_s6uLt ww1_s6uLy w2_s6uLv
                 }}]
Data.Semigroup.Internal.$fShowAlt_$cshowsPrec
  = \ (@ k_s6uLq)
      (@ (f_s6uLr :: k_s6uLq -> *))
      (@ (a_s6uLs :: k_s6uLq))
      (w_s6uLt :: Show (f_s6uLr a_s6uLs))
      (w1_s6uLu :: Int)
      (w2_s6uLv :: Alt f_s6uLr a_s6uLs) ->
      case w1_s6uLu of { I# ww1_s6uLy ->
      Data.Semigroup.Internal.$w$cshowsPrec1
        @ k_s6uLq @ f_s6uLr @ a_s6uLs w_s6uLt ww1_s6uLy w2_s6uLv
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll4
  = unpackCString# Data.Semigroup.Internal.$fReadAll5

-- RHS size: {terms: 14, types: 15, coercions: 4, joins: 0/0}
Data.Semigroup.Internal.$fShowAlt_$cshow
  :: forall k (f :: k -> *) (a :: k). Show (f a) => Alt f a -> String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 110 0}]
Data.Semigroup.Internal.$fShowAlt_$cshow
  = \ (@ k_a6taK)
      (@ (f_a6taL :: k_a6taK -> *))
      (@ (a_a6taM :: k_a6taK))
      ($dShow_a6taN :: Show (f_a6taL a_a6taM))
      (x_i6tXp :: Alt f_a6taL a_a6taM) ->
      unpackAppendCString#
        Data.Semigroup.Internal.$fShowAlt3
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowAlt2
           (showsPrec
              @ (f_a6taL a_a6taM)
              $dShow_a6taN
              Data.Semigroup.Internal.$fShowAlt1
              (x_i6tXp
               `cast` (Data.Semigroup.Internal.N:Alt[0]
                           <k_a6taK>_N <f_a6taL>_R <a_a6taM>_N
                       :: (Alt f_a6taL a_a6taM :: *) ~R# (f_a6taL a_a6taM :: *)))
              Data.Semigroup.Internal.$fReadAll4))

-- RHS size: {terms: 14, types: 26, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAlt_$cshowList
  :: forall k (f :: k -> *) (a :: k).
     Show (f a) =>
     [Alt f a] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_a6taK)
                 (@ (f_a6taL :: k_a6taK -> *))
                 (@ (a_a6taM :: k_a6taK))
                 ($dShow_a6taN [Occ=Once] :: Show (f_a6taL a_a6taM))
                 (ls_i6tXs [Occ=Once] :: [Alt f_a6taL a_a6taM])
                 (s_i6tXt [Occ=Once] :: String) ->
                 showList__
                   @ (Alt f_a6taL a_a6taM)
                   (Data.Semigroup.Internal.$fShowAlt_$cshowsPrec
                      @ k_a6taK
                      @ f_a6taL
                      @ a_a6taM
                      $dShow_a6taN
                      Data.Semigroup.Internal.$fShowAlt1)
                   ls_i6tXs
                   s_i6tXt}]
Data.Semigroup.Internal.$fShowAlt_$cshowList
  = \ (@ k_a6taK)
      (@ (f_a6taL :: k_a6taK -> *))
      (@ (a_a6taM :: k_a6taK))
      ($dShow_a6taN :: Show (f_a6taL a_a6taM))
      (ls_i6tXs :: [Alt f_a6taL a_a6taM])
      (s_i6tXt :: String) ->
      showList__
        @ (Alt f_a6taL a_a6taM)
        (\ (w_s6uLv :: Alt f_a6taL a_a6taM) ->
           Data.Semigroup.Internal.$w$cshowsPrec1
             @ k_a6taK @ f_a6taL @ a_a6taM $dShow_a6taN 0# w_s6uLv)
        ls_i6tXs
        s_i6tXt

-- RHS size: {terms: 11, types: 22, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (a :: k). Show (f a) => Show (Alt f a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>m,
 Unf=DFun: \ (@ k_a6rdI)
             (@ (f_a6r2k :: k_a6rdI -> *))
             (@ (a_a6r2l :: k_a6rdI))
             (v_Xbb :: Show (f_a6r2k a_a6r2l)) ->
       GHC.Show.C:Show TYPE: Alt f_a6r2k a_a6r2l
                       Data.Semigroup.Internal.$fShowAlt_$cshowsPrec
                         @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xbb
                       Data.Semigroup.Internal.$fShowAlt_$cshow
                         @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xbb
                       Data.Semigroup.Internal.$fShowAlt_$cshowList
                         @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xbb]
Data.Semigroup.Internal.$fShowAlt
  = \ (@ k_a6taK)
      (@ (f_a6taL :: k_a6taK -> *))
      (@ (a_a6taM :: k_a6taK))
      ($dShow_a6taN :: Show (f_a6taL a_a6taM)) ->
      GHC.Show.C:Show
        @ (Alt f_a6taL a_a6taM)
        (Data.Semigroup.Internal.$fShowAlt_$cshowsPrec
           @ k_a6taK @ f_a6taL @ a_a6taM $dShow_a6taN)
        (Data.Semigroup.Internal.$fShowAlt_$cshow
           @ k_a6taK @ f_a6taL @ a_a6taM $dShow_a6taN)
        (Data.Semigroup.Internal.$fShowAlt_$cshowList
           @ k_a6taK @ f_a6taL @ a_a6taM $dShow_a6taN)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAlt5 = "Alt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAlt4
  = unpackCString# Data.Semigroup.Internal.$fReadAlt5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadAlt_lexeme
  = Text.Read.Lex.Ident Data.Semigroup.Internal.$fReadAlt4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll11 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll11 = "{"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll10 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll10
  = unpackCString# Data.Semigroup.Internal.$fReadAll11

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadAll_lexeme
  = Text.Read.Lex.Punc Data.Semigroup.Internal.$fReadAll10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadAlt3 = "getAlt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAlt2
  = unpackCString# Data.Semigroup.Internal.$fReadAlt3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll6 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadAll6 = GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll3 :: Text.Read.Lex.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadAll3
  = Text.Read.Lex.Punc Data.Semigroup.Internal.$fReadAll4

-- RHS size: {terms: 53, types: 74, coercions: 33, joins: 0/2}
Data.Semigroup.Internal.$fReadAlt1
  :: forall k (f :: k -> *) (a :: k).
     Read (f a) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Alt f a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 391 60}]
Data.Semigroup.Internal.$fReadAlt1
  = \ (@ k_a6t9R)
      (@ (f_a6t9S :: k_a6t9R -> *))
      (@ (a_a6t9T :: k_a6t9R))
      ($dRead_a6t9U :: Read (f_a6t9S a_a6t9T)) ->
      GHC.Read.list3
        @ (Alt f_a6t9S a_a6t9T)
        (let {
           lvl12_s6uoQ :: Text.ParserCombinators.ReadP.ReadP (f_a6t9S a_a6t9T)
           [LclId]
           lvl12_s6uoQ
             = ((readPrec @ (f_a6t9S a_a6t9T) $dRead_a6t9U)
                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                            <f_a6t9S a_a6t9T>_R
                        :: (Text.ParserCombinators.ReadPrec.ReadPrec
                              (f_a6t9S a_a6t9T) :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.Prec
                                -> Text.ParserCombinators.ReadP.ReadP (f_a6t9S a_a6t9T) :: *)))
                 Text.ParserCombinators.ReadPrec.minPrec } in
         let {
           ds_s6unH [Dmd=<L,C(C1(U))>]
             :: Text.ParserCombinators.ReadPrec.Prec
                -> Text.ParserCombinators.ReadP.ReadP (f_a6t9S a_a6t9T)
           [LclId,
            Arity=1,
            Str=<L,A>,
            Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                    WorkFree=True, Expandable=True,
                    Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                    Tmpl= \ _ [Occ=Dead] -> lvl12_s6uoQ}]
           ds_s6unH = \ _ [Occ=Dead] -> lvl12_s6uoQ } in
         (\ (c_i6ua8 :: Text.ParserCombinators.ReadPrec.Prec)
            (@ b_i6u9v)
            (eta_B1
               :: Alt f_a6t9S a_a6t9T
                  -> Text.ParserCombinators.ReadP.P b_i6u9v) ->
            case c_i6ua8 of { I# x_i6uab ->
            case <=# x_i6uab 11# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_i6u9v;
              1# ->
                case Text.Read.Lex.$wexpect
                       Data.Semigroup.Internal.$fReadAlt_lexeme
                       @ b_i6u9v
                       (\ _ [Occ=Dead, OS=OneShot] ->
                          case Text.Read.Lex.$wexpect
                                 Data.Semigroup.Internal.$fReadAll_lexeme
                                 @ b_i6u9v
                                 (\ _ [Occ=Dead, OS=OneShot] ->
                                    ((((readField
                                          @ (f_a6t9S a_a6t9T)
                                          Data.Semigroup.Internal.$fReadAlt2
                                          (ds_s6unH
                                           `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <f_a6t9S a_a6t9T>_R)
                                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            (f_a6t9S a_a6t9T) :: *)
                                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                             (f_a6t9S a_a6t9T) :: *))))
                                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <f_a6t9S a_a6t9T>_R
                                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                                     (f_a6t9S a_a6t9T) :: *)
                                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            (f_a6t9S a_a6t9T) :: *)))
                                        Data.Semigroup.Internal.$fReadAll6)
                                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                 <f_a6t9S a_a6t9T>_R
                                             :: (Text.ParserCombinators.ReadP.ReadP
                                                   (f_a6t9S a_a6t9T) :: *)
                                                ~R# (forall b.
                                                     (f_a6t9S a_a6t9T
                                                      -> Text.ParserCombinators.ReadP.P b)
                                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                                      @ b_i6u9v
                                      (\ (a3_i6ubd :: f_a6t9S a_a6t9T) ->
                                         case Text.Read.Lex.$wexpect
                                                Data.Semigroup.Internal.$fReadAll3
                                                @ b_i6u9v
                                                (\ _ [Occ=Dead, OS=OneShot] ->
                                                   eta_B1
                                                     (a3_i6ubd
                                                      `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                                                       <k_a6t9R>_N
                                                                       <f_a6t9S>_R) <a_a6t9T>_N
                                                              :: (f_a6t9S a_a6t9T :: *)
                                                                 ~R# (Alt f_a6t9S a_a6t9T :: *))))
                                         of
                                         { (# ww1_i6ub0 #) ->
                                         Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                                         }))
                          of
                          { (# ww1_i6ub0 #) ->
                          Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                          })
                of
                { (# ww1_i6ub0 #) ->
                Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                }
            }
            })
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Alt
                                   f_a6t9S
                                   a_a6t9T>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Alt f_a6t9S a_a6t9T>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Alt f_a6t9S a_a6t9T -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Alt f_a6t9S a_a6t9T) :: *)))

-- RHS size: {terms: 12, types: 36, coercions: 0, joins: 0/1}
Data.Semigroup.Internal.$fReadAlt_$creadsPrec
  :: forall k (f :: k -> *) (a :: k).
     Read (f a) =>
     Int -> ReadS (Alt f a)
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 60}]
Data.Semigroup.Internal.$fReadAlt_$creadsPrec
  = \ (@ k_X6tla)
      (@ (f_X6tlc :: k_X6tla -> *))
      (@ (a_X6tle :: k_X6tla))
      ($dRead_X6tlg :: Read (f_X6tlc a_X6tle)) ->
      let {
        ds_s6unz [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Alt f_X6tlc a_X6tle -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId]
        ds_s6unz
          = Data.Semigroup.Internal.$fReadAlt1
              @ k_X6tla @ f_X6tlc @ a_X6tle $dRead_X6tlg } in
      \ (n_i6tWE :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Alt f_X6tlc a_X6tle)
          (ds_s6unz
             n_i6tWE
             @ (Alt f_X6tlc a_X6tle)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Alt f_X6tlc a_X6tle)))

-- RHS size: {terms: 7, types: 16, coercions: 15, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt_$creadListPrec
  :: forall k (f :: k -> *) (a :: k).
     Read (f a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Alt f a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_X6tl8)
                 (@ (f_X6tla :: k_X6tl8 -> *))
                 (@ (a_X6tlc :: k_X6tl8))
                 ($dRead_X6tle [Occ=Once] :: Read (f_X6tla a_X6tlc)) ->
                 list
                   @ (Alt f_X6tla a_X6tlc)
                   ((Data.Semigroup.Internal.$fReadAlt1
                       @ k_X6tl8 @ f_X6tla @ a_X6tlc $dRead_X6tle)
                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Alt
                                              f_X6tla
                                              a_X6tlc>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Alt f_X6tla a_X6tlc>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> forall b.
                                   (Alt f_X6tla a_X6tlc -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                      (Alt f_X6tla a_X6tlc) :: *)))}]
Data.Semigroup.Internal.$fReadAlt_$creadListPrec
  = \ (@ k_X6tl8)
      (@ (f_X6tla :: k_X6tl8 -> *))
      (@ (a_X6tlc :: k_X6tl8))
      ($dRead_X6tle :: Read (f_X6tla a_X6tlc)) ->
      list
        @ (Alt f_X6tla a_X6tlc)
        ((Data.Semigroup.Internal.$fReadAlt1
            @ k_X6tl8 @ f_X6tla @ a_X6tlc $dRead_X6tle)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Alt
                                   f_X6tla
                                   a_X6tlc>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Alt f_X6tla a_X6tlc>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Alt f_X6tla a_X6tlc -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Alt f_X6tla a_X6tlc) :: *)))

-- RHS size: {terms: 10, types: 31, coercions: 27, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt_$creadList
  :: forall k (f :: k -> *) (a :: k). Read (f a) => ReadS [Alt f a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_X6tl9)
                 (@ (f_X6tlb :: k_X6tl9 -> *))
                 (@ (a_X6tld :: k_X6tl9))
                 ($dRead_X6tlf [Occ=Once] :: Read (f_X6tlb a_X6tld)) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Alt f_X6tlb a_X6tld]
                   (((((list
                          @ (Alt f_X6tlb a_X6tld)
                          ((Data.Semigroup.Internal.$fReadAlt1
                              @ k_X6tl9 @ f_X6tlb @ a_X6tld $dRead_X6tlf)
                           `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Alt
                                                     f_X6tlb
                                                     a_X6tld>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Alt
                                                                                f_X6tlb a_X6tld>_R)
                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                       -> forall b.
                                          (Alt f_X6tlb a_X6tld -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                             (Alt f_X6tlb a_X6tld) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Alt f_X6tlb a_X6tld]>_R
                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                     [Alt f_X6tlb a_X6tld] :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                       -> Text.ParserCombinators.ReadP.ReadP
                                            [Alt f_X6tlb a_X6tld] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[Alt f_X6tlb a_X6tld]>_R
                             :: (Text.ParserCombinators.ReadP.ReadP [Alt f_X6tlb a_X6tld] :: *)
                                ~R# (forall b.
                                     ([Alt f_X6tlb a_X6tld] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Alt f_X6tlb a_X6tld]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Alt f_X6tlb a_X6tld]))}]
Data.Semigroup.Internal.$fReadAlt_$creadList
  = \ (@ k_X6tl9)
      (@ (f_X6tlb :: k_X6tl9 -> *))
      (@ (a_X6tld :: k_X6tl9))
      ($dRead_X6tlf :: Read (f_X6tlb a_X6tld)) ->
      Text.ParserCombinators.ReadP.run
        @ [Alt f_X6tlb a_X6tld]
        (((((list
               @ (Alt f_X6tlb a_X6tld)
               ((Data.Semigroup.Internal.$fReadAlt1
                   @ k_X6tl9 @ f_X6tlb @ a_X6tld $dRead_X6tlf)
                `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Alt
                                          f_X6tlb
                                          a_X6tld>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Alt f_X6tlb a_X6tld>_R)
                        :: (Text.ParserCombinators.ReadPrec.Prec
                            -> forall b.
                               (Alt f_X6tlb a_X6tld -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                  (Alt f_X6tlb a_X6tld) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Alt f_X6tlb a_X6tld]>_R
                    :: (Text.ParserCombinators.ReadPrec.ReadPrec
                          [Alt f_X6tlb a_X6tld] :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.Prec
                            -> Text.ParserCombinators.ReadP.ReadP [Alt f_X6tlb a_X6tld] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[Alt f_X6tlb a_X6tld]>_R
                  :: (Text.ParserCombinators.ReadP.ReadP [Alt f_X6tlb a_X6tld] :: *)
                     ~R# (forall b.
                          ([Alt f_X6tlb a_X6tld] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Alt f_X6tlb a_X6tld]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Alt f_X6tlb a_X6tld]))

-- RHS size: {terms: 13, types: 25, coercions: 15, joins: 0/0}
Data.Semigroup.Internal.$fReadAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (a :: k). Read (f a) => Read (Alt f a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,C(U),A)>m,
 Unf=DFun: \ (@ k_a6rdI)
             (@ (f_a6r2k :: k_a6rdI -> *))
             (@ (a_a6r2l :: k_a6rdI))
             (v_Xbk :: Read (f_a6r2k a_a6r2l)) ->
       GHC.Read.C:Read TYPE: Alt f_a6r2k a_a6r2l
                       Data.Semigroup.Internal.$fReadAlt_$creadsPrec
                         @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xbk
                       Data.Semigroup.Internal.$fReadAlt_$creadList
                         @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xbk
                       (Data.Semigroup.Internal.$fReadAlt1
                          @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xbk)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Alt
                                                 f_a6r2k
                                                 a_a6r2l>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Alt f_a6r2k a_a6r2l>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Alt f_a6r2k a_a6r2l -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                         (Alt f_a6r2k a_a6r2l) :: *))
                       Data.Semigroup.Internal.$fReadAlt_$creadListPrec
                         @ k_a6rdI @ f_a6r2k @ a_a6r2l v_Xbk]
Data.Semigroup.Internal.$fReadAlt
  = \ (@ k_X6tl7)
      (@ (f_X6tl9 :: k_X6tl7 -> *))
      (@ (a_X6tlb :: k_X6tl7))
      ($dRead_X6tld :: Read (f_X6tl9 a_X6tlb)) ->
      GHC.Read.C:Read
        @ (Alt f_X6tl9 a_X6tlb)
        (Data.Semigroup.Internal.$fReadAlt_$creadsPrec
           @ k_X6tl7 @ f_X6tl9 @ a_X6tlb $dRead_X6tld)
        (Data.Semigroup.Internal.$fReadAlt_$creadList
           @ k_X6tl7 @ f_X6tl9 @ a_X6tlb $dRead_X6tld)
        ((Data.Semigroup.Internal.$fReadAlt1
            @ k_X6tl7 @ f_X6tl9 @ a_X6tlb $dRead_X6tld)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Alt
                                   f_X6tl9
                                   a_X6tlb>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Alt f_X6tl9 a_X6tlb>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Alt f_X6tl9 a_X6tlb -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Alt f_X6tl9 a_X6tlb) :: *)))
        (Data.Semigroup.Internal.$fReadAlt_$creadListPrec
           @ k_X6tl7 @ f_X6tl9 @ a_X6tlb $dRead_X6tld)

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Alt1
  :: forall k (f :: k -> *) (a :: k).
     Rep1 (Alt f) a -> Rep1 (Alt f) a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a6t8N)
                 (@ (f_a6t8O :: k_a6t8N -> *))
                 (@ (a_a6t9k :: k_a6t8N))
                 (ds_d6tYD [Occ=Once] :: Rep1 (Alt f_a6t8O) a_a6t9k) ->
                 ds_d6tYD}]
Data.Semigroup.Internal.$fGeneric1Alt1
  = \ (@ k_a6t8N)
      (@ (f_a6t8O :: k_a6t8N -> *))
      (@ (a_a6t9k :: k_a6t8N))
      (ds_d6tYD :: Rep1 (Alt f_a6t8O) a_a6t9k) ->
      ds_d6tYD

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Alt2
  :: forall k (f :: k -> *) (a :: k). Alt f a -> Alt f a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_X6tkd)
                 (@ (f_X6tkf :: k_X6tkd -> *))
                 (@ (a_a6t8S :: k_X6tkd))
                 (x_a6ssm [Occ=Once] :: Alt f_X6tkf a_a6t8S) ->
                 x_a6ssm}]
Data.Semigroup.Internal.$fGeneric1Alt2
  = \ (@ k_X6tkd)
      (@ (f_X6tkf :: k_X6tkd -> *))
      (@ (a_a6t8S :: k_X6tkd))
      (x_a6ssm :: Alt f_X6tkf a_a6t8S) ->
      x_a6ssm

-- RHS size: {terms: 5, types: 13, coercions: 172, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Alt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *). Generic1 (Alt f)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a6rif) (@ (f_a6r2k :: k_a6rif -> *)) ->
       GHC.Generics.C:Generic1 TYPE: k_a6rif
                               TYPE: Alt f_a6r2k
                               (Data.Semigroup.Internal.$fGeneric1Alt2 @ k_a6rif @ f_a6r2k)
                               `cast` (forall (a :: <k_a6rif>_N).
                                       <Alt f_a6r2k a>_R
                                       ->_R Data.Semigroup.Internal.N:Alt[0]
                                                <k_a6rif>_N
                                                (Sym (GHC.Generics.N:Rec1[0]
                                                          <k_a6rif>_N
                                                          <f_a6r2k>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                   <k_a6rif>_N
                                                                                   <S>_P
                                                                                   <'MetaSel
                                                                                      ('Just
                                                                                         "getAlt")
                                                                                      'NoSourceUnpackedness
                                                                                      'NoSourceStrictness
                                                                                      'DecidedLazy>_P
                                                                                   <Rec1
                                                                                      f_a6r2k>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                              <k_a6rif>_N
                                                                                                              <C>_P
                                                                                                              <'MetaCons
                                                                                                                 "Alt"
                                                                                                                 'PrefixI
                                                                                                                 'True>_P
                                                                                                              <M1
                                                                                                                 S
                                                                                                                 ('MetaSel
                                                                                                                    ('Just
                                                                                                                       "getAlt")
                                                                                                                    'NoSourceUnpackedness
                                                                                                                    'NoSourceStrictness
                                                                                                                    'DecidedLazy)
                                                                                                                 (Rec1
                                                                                                                    f_a6r2k)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                             <k_a6rif>_N
                                                                                                                                             <D>_P
                                                                                                                                             <'MetaData
                                                                                                                                                "Alt"
                                                                                                                                                "Data.Semigroup.Internal"
                                                                                                                                                "base"
                                                                                                                                                'True>_P
                                                                                                                                             <M1
                                                                                                                                                C
                                                                                                                                                ('MetaCons
                                                                                                                                                   "Alt"
                                                                                                                                                   'PrefixI
                                                                                                                                                   'True)
                                                                                                                                                (M1
                                                                                                                                                   S
                                                                                                                                                   ('MetaSel
                                                                                                                                                      ('Just
                                                                                                                                                         "getAlt")
                                                                                                                                                      'NoSourceUnpackedness
                                                                                                                                                      'NoSourceStrictness
                                                                                                                                                      'DecidedLazy)
                                                                                                                                                   (Rec1
                                                                                                                                                      f_a6r2k))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Alt[0]
                                                                                                                                                                                    <k_a6rif>_N
                                                                                                                                                                                    <f_a6r2k>_N)))))) <a>_N
                                       :: (forall (a :: k). Alt f_a6r2k a -> Alt f_a6r2k a :: *)
                                          ~R# (forall (a :: k).
                                               Alt f_a6r2k a -> Rep1 (Alt f_a6r2k) a :: *))
                               (Data.Semigroup.Internal.$fGeneric1Alt1 @ k_a6rif @ f_a6r2k)
                               `cast` (forall (a :: <k_a6rif>_N).
                                       <Rep1 (Alt f_a6r2k) a>_R
                                       ->_R (Sub (Data.Semigroup.Internal.Rep1_Alt[0]
                                                      <k_a6rif>_N
                                                      <f_a6r2k>_N) ; (GHC.Generics.N:M1[0]
                                                                          <k_a6rif>_N
                                                                          <D>_P
                                                                          <'MetaData
                                                                             "Alt"
                                                                             "Data.Semigroup.Internal"
                                                                             "base"
                                                                             'True>_P
                                                                          <M1
                                                                             C
                                                                             ('MetaCons
                                                                                "Alt"
                                                                                'PrefixI
                                                                                'True)
                                                                             (M1
                                                                                S
                                                                                ('MetaSel
                                                                                   ('Just "getAlt")
                                                                                   'NoSourceUnpackedness
                                                                                   'NoSourceStrictness
                                                                                   'DecidedLazy)
                                                                                (Rec1
                                                                                   f_a6r2k))>_R ; (GHC.Generics.N:M1[0]
                                                                                                       <k_a6rif>_N
                                                                                                       <C>_P
                                                                                                       <'MetaCons
                                                                                                          "Alt"
                                                                                                          'PrefixI
                                                                                                          'True>_P
                                                                                                       <M1
                                                                                                          S
                                                                                                          ('MetaSel
                                                                                                             ('Just
                                                                                                                "getAlt")
                                                                                                             'NoSourceUnpackedness
                                                                                                             'NoSourceStrictness
                                                                                                             'DecidedLazy)
                                                                                                          (Rec1
                                                                                                             f_a6r2k)>_R ; (GHC.Generics.N:M1[0]
                                                                                                                                <k_a6rif>_N
                                                                                                                                <S>_P
                                                                                                                                <'MetaSel
                                                                                                                                   ('Just
                                                                                                                                      "getAlt")
                                                                                                                                   'NoSourceUnpackedness
                                                                                                                                   'NoSourceStrictness
                                                                                                                                   'DecidedLazy>_P
                                                                                                                                <Rec1
                                                                                                                                   f_a6r2k>_R ; GHC.Generics.N:Rec1[0]
                                                                                                                                                    <k_a6rif>_N
                                                                                                                                                    (Sym (Data.Semigroup.Internal.N:Alt[0]
                                                                                                                                                              <k_a6rif>_N
                                                                                                                                                              <f_a6r2k>_R)))))) <a>_N
                                       :: (forall (a :: k).
                                           Rep1 (Alt f_a6r2k) a -> Rep1 (Alt f_a6r2k) a :: *)
                                          ~R# (forall (a :: k).
                                               Rep1 (Alt f_a6r2k) a -> Alt f_a6r2k a :: *))]
Data.Semigroup.Internal.$fGeneric1Alt
  = \ (@ k_X6tkj) (@ (f_X6tkl :: k_X6tkj -> *)) ->
      GHC.Generics.C:Generic1
        @ k_X6tkj
        @ (Alt f_X6tkl)
        ((Data.Semigroup.Internal.$fGeneric1Alt2 @ k_X6tkj @ f_X6tkl)
         `cast` (forall (a :: <k_X6tkj>_N).
                 <Alt f_X6tkl a>_R
                 ->_R Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tkj>_N
                          (Sym (GHC.Generics.N:Rec1[0]
                                    <k_X6tkj>_N <f_X6tkl>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                         <k_X6tkj>_N
                                                                         <S>_P
                                                                         <'MetaSel
                                                                            ('Just "getAlt")
                                                                            'NoSourceUnpackedness
                                                                            'NoSourceStrictness
                                                                            'DecidedLazy>_P
                                                                         <Rec1
                                                                            f_X6tkl>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                    <k_X6tkj>_N
                                                                                                    <C>_P
                                                                                                    <'MetaCons
                                                                                                       "Alt"
                                                                                                       'PrefixI
                                                                                                       'True>_P
                                                                                                    <M1
                                                                                                       S
                                                                                                       ('MetaSel
                                                                                                          ('Just
                                                                                                             "getAlt")
                                                                                                          'NoSourceUnpackedness
                                                                                                          'NoSourceStrictness
                                                                                                          'DecidedLazy)
                                                                                                       (Rec1
                                                                                                          f_X6tkl)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                   <k_X6tkj>_N
                                                                                                                                   <D>_P
                                                                                                                                   <'MetaData
                                                                                                                                      "Alt"
                                                                                                                                      "Data.Semigroup.Internal"
                                                                                                                                      "base"
                                                                                                                                      'True>_P
                                                                                                                                   <M1
                                                                                                                                      C
                                                                                                                                      ('MetaCons
                                                                                                                                         "Alt"
                                                                                                                                         'PrefixI
                                                                                                                                         'True)
                                                                                                                                      (M1
                                                                                                                                         S
                                                                                                                                         ('MetaSel
                                                                                                                                            ('Just
                                                                                                                                               "getAlt")
                                                                                                                                            'NoSourceUnpackedness
                                                                                                                                            'NoSourceStrictness
                                                                                                                                            'DecidedLazy)
                                                                                                                                         (Rec1
                                                                                                                                            f_X6tkl))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Alt[0]
                                                                                                                                                                          <k_X6tkj>_N
                                                                                                                                                                          <f_X6tkl>_N)))))) <a>_N
                 :: (forall (a :: k). Alt f_X6tkl a -> Alt f_X6tkl a :: *)
                    ~R# (forall (a :: k). Alt f_X6tkl a -> Rep1 (Alt f_X6tkl) a :: *)))
        ((Data.Semigroup.Internal.$fGeneric1Alt1 @ k_X6tkj @ f_X6tkl)
         `cast` (forall (a :: <k_X6tkj>_N).
                 <Rep1 (Alt f_X6tkl) a>_R
                 ->_R (Sub (Data.Semigroup.Internal.Rep1_Alt[0]
                                <k_X6tkj>_N <f_X6tkl>_N) ; (GHC.Generics.N:M1[0]
                                                                <k_X6tkj>_N
                                                                <D>_P
                                                                <'MetaData
                                                                   "Alt"
                                                                   "Data.Semigroup.Internal"
                                                                   "base"
                                                                   'True>_P
                                                                <M1
                                                                   C
                                                                   ('MetaCons "Alt" 'PrefixI 'True)
                                                                   (M1
                                                                      S
                                                                      ('MetaSel
                                                                         ('Just "getAlt")
                                                                         'NoSourceUnpackedness
                                                                         'NoSourceStrictness
                                                                         'DecidedLazy)
                                                                      (Rec1
                                                                         f_X6tkl))>_R ; (GHC.Generics.N:M1[0]
                                                                                             <k_X6tkj>_N
                                                                                             <C>_P
                                                                                             <'MetaCons
                                                                                                "Alt"
                                                                                                'PrefixI
                                                                                                'True>_P
                                                                                             <M1
                                                                                                S
                                                                                                ('MetaSel
                                                                                                   ('Just
                                                                                                      "getAlt")
                                                                                                   'NoSourceUnpackedness
                                                                                                   'NoSourceStrictness
                                                                                                   'DecidedLazy)
                                                                                                (Rec1
                                                                                                   f_X6tkl)>_R ; (GHC.Generics.N:M1[0]
                                                                                                                      <k_X6tkj>_N
                                                                                                                      <S>_P
                                                                                                                      <'MetaSel
                                                                                                                         ('Just
                                                                                                                            "getAlt")
                                                                                                                         'NoSourceUnpackedness
                                                                                                                         'NoSourceStrictness
                                                                                                                         'DecidedLazy>_P
                                                                                                                      <Rec1
                                                                                                                         f_X6tkl>_R ; GHC.Generics.N:Rec1[0]
                                                                                                                                          <k_X6tkj>_N
                                                                                                                                          (Sym (Data.Semigroup.Internal.N:Alt[0]
                                                                                                                                                    <k_X6tkj>_N
                                                                                                                                                    <f_X6tkl>_R)))))) <a>_N
                 :: (forall (a :: k).
                     Rep1 (Alt f_X6tkl) a -> Rep1 (Alt f_X6tkl) a :: *)
                    ~R# (forall (a :: k). Rep1 (Alt f_X6tkl) a -> Alt f_X6tkl a :: *)))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericAlt1
  :: forall k (f :: k -> *) (a :: k) x.
     Rep (Alt f a) x -> Rep (Alt f a) x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a6t7L)
                 (@ (f_a6t7M :: k_a6t7L -> *))
                 (@ (a_a6t7N :: k_a6t7L))
                 (@ x_a6t8j)
                 (ds_d6tYx [Occ=Once] :: Rep (Alt f_a6t7M a_a6t7N) x_a6t8j) ->
                 ds_d6tYx}]
Data.Semigroup.Internal.$fGenericAlt1
  = \ (@ k_a6t7L)
      (@ (f_a6t7M :: k_a6t7L -> *))
      (@ (a_a6t7N :: k_a6t7L))
      (@ x_a6t8j)
      (ds_d6tYx :: Rep (Alt f_a6t7M a_a6t7N) x_a6t8j) ->
      ds_d6tYx

-- RHS size: {terms: 6, types: 11, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericAlt2
  :: forall k (f :: k -> *) (a :: k) x. Alt f a -> Alt f a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_X6tjp)
                 (@ (f_X6tjr :: k_X6tjp -> *))
                 (@ (a_X6tjt :: k_X6tjp))
                 (@ x_a6t7R)
                 (x1_a6ssi [Occ=Once] :: Alt f_X6tjr a_X6tjt) ->
                 x1_a6ssi}]
Data.Semigroup.Internal.$fGenericAlt2
  = \ (@ k_X6tjp)
      (@ (f_X6tjr :: k_X6tjp -> *))
      (@ (a_X6tjt :: k_X6tjp))
      (@ x_a6t7R)
      (x1_a6ssi :: Alt f_X6tjr a_X6tjt) ->
      x1_a6ssi

-- RHS size: {terms: 6, types: 16, coercions: 218, joins: 0/0}
Data.Semigroup.Internal.$fGenericAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (f :: k -> *) (a :: k). Generic (Alt f a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a6rdI)
             (@ (f_a6r2k :: k_a6rdI -> *))
             (@ (a_a6r2l :: k_a6rdI)) ->
       GHC.Generics.C:Generic TYPE: Alt f_a6r2k a_a6r2l
                              (Data.Semigroup.Internal.$fGenericAlt2
                                 @ k_a6rdI @ f_a6r2k @ a_a6r2l)
                              `cast` (forall (x :: <*>_N).
                                      <Alt f_a6r2k a_a6r2l>_R
                                      ->_R Data.Semigroup.Internal.N:Alt[0]
                                               <k_a6rdI>_N
                                               <f_a6r2k>_R <a_a6r2l>_N ; (Sym (GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <R>_P
                                                                                   <f_a6r2k a_a6r2l>_R
                                                                                   <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                      <*>_N
                                                                                                      <S>_P
                                                                                                      <'MetaSel
                                                                                                         ('Just
                                                                                                            "getAlt")
                                                                                                         'NoSourceUnpackedness
                                                                                                         'NoSourceStrictness
                                                                                                         'DecidedLazy>_P
                                                                                                      <K1
                                                                                                         R
                                                                                                         (f_a6r2k a_a6r2l)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <C>_P
                                                                                                                                           <'MetaCons
                                                                                                                                              "Alt"
                                                                                                                                              'PrefixI
                                                                                                                                              'True>_P
                                                                                                                                           <M1
                                                                                                                                              S
                                                                                                                                              ('MetaSel
                                                                                                                                                 ('Just
                                                                                                                                                    "getAlt")
                                                                                                                                                 'NoSourceUnpackedness
                                                                                                                                                 'NoSourceStrictness
                                                                                                                                                 'DecidedLazy)
                                                                                                                                              (K1
                                                                                                                                                 R
                                                                                                                                                 (f_a6r2k a_a6r2l))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                    <*>_N
                                                                                                                                                                                    <D>_P
                                                                                                                                                                                    <'MetaData
                                                                                                                                                                                       "Alt"
                                                                                                                                                                                       "Data.Semigroup.Internal"
                                                                                                                                                                                       "base"
                                                                                                                                                                                       'True>_P
                                                                                                                                                                                    <M1
                                                                                                                                                                                       C
                                                                                                                                                                                       ('MetaCons
                                                                                                                                                                                          "Alt"
                                                                                                                                                                                          'PrefixI
                                                                                                                                                                                          'True)
                                                                                                                                                                                       (M1
                                                                                                                                                                                          S
                                                                                                                                                                                          ('MetaSel
                                                                                                                                                                                             ('Just
                                                                                                                                                                                                "getAlt")
                                                                                                                                                                                             'NoSourceUnpackedness
                                                                                                                                                                                             'NoSourceStrictness
                                                                                                                                                                                             'DecidedLazy)
                                                                                                                                                                                          (K1
                                                                                                                                                                                             R
                                                                                                                                                                                             (f_a6r2k a_a6r2l)))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Alt[0]
                                                                                                                                                                                                                                     <k_a6rdI>_N
                                                                                                                                                                                                                                     <f_a6r2k>_N
                                                                                                                                                                                                                                     <a_a6r2l>_N))))) <x>_N)
                                      :: (forall x. Alt f_a6r2k a_a6r2l -> Alt f_a6r2k a_a6r2l :: *)
                                         ~R# (forall x.
                                              Alt f_a6r2k a_a6r2l
                                              -> Rep (Alt f_a6r2k a_a6r2l) x :: *))
                              (Data.Semigroup.Internal.$fGenericAlt1
                                 @ k_a6rdI @ f_a6r2k @ a_a6r2l)
                              `cast` (forall (x :: <*>_N).
                                      <Rep (Alt f_a6r2k a_a6r2l) x>_R
                                      ->_R (Sub (Data.Semigroup.Internal.Rep_Alt[0]
                                                     <k_a6rdI>_N
                                                     <f_a6r2k>_N
                                                     <a_a6r2l>_N) ; (GHC.Generics.N:M1[0]
                                                                         <*>_N
                                                                         <D>_P
                                                                         <'MetaData
                                                                            "Alt"
                                                                            "Data.Semigroup.Internal"
                                                                            "base"
                                                                            'True>_P
                                                                         <M1
                                                                            C
                                                                            ('MetaCons
                                                                               "Alt" 'PrefixI 'True)
                                                                            (M1
                                                                               S
                                                                               ('MetaSel
                                                                                  ('Just "getAlt")
                                                                                  'NoSourceUnpackedness
                                                                                  'NoSourceStrictness
                                                                                  'DecidedLazy)
                                                                               (K1
                                                                                  R
                                                                                  (f_a6r2k a_a6r2l)))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                <*>_N
                                                                                                                <C>_P
                                                                                                                <'MetaCons
                                                                                                                   "Alt"
                                                                                                                   'PrefixI
                                                                                                                   'True>_P
                                                                                                                <M1
                                                                                                                   S
                                                                                                                   ('MetaSel
                                                                                                                      ('Just
                                                                                                                         "getAlt")
                                                                                                                      'NoSourceUnpackedness
                                                                                                                      'NoSourceStrictness
                                                                                                                      'DecidedLazy)
                                                                                                                   (K1
                                                                                                                      R
                                                                                                                      (f_a6r2k a_a6r2l))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                  <*>_N
                                                                                                                                                  <S>_P
                                                                                                                                                  <'MetaSel
                                                                                                                                                     ('Just
                                                                                                                                                        "getAlt")
                                                                                                                                                     'NoSourceUnpackedness
                                                                                                                                                     'NoSourceStrictness
                                                                                                                                                     'DecidedLazy>_P
                                                                                                                                                  <K1
                                                                                                                                                     R
                                                                                                                                                     (f_a6r2k a_a6r2l)>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                          <*>_N
                                                                                                                                                                                          <R>_P
                                                                                                                                                                                          <f_a6r2k a_a6r2l>_R
                                                                                                                                                                                          <x>_P ; Sym (Data.Semigroup.Internal.N:Alt[0]
                                                                                                                                                                                                           <k_a6rdI>_N
                                                                                                                                                                                                           <f_a6r2k>_R) <a_a6r2l>_N)
                                      :: (forall x.
                                          Rep (Alt f_a6r2k a_a6r2l) x
                                          -> Rep (Alt f_a6r2k a_a6r2l) x :: *)
                                         ~R# (forall x.
                                              Rep (Alt f_a6r2k a_a6r2l) x
                                              -> Alt f_a6r2k a_a6r2l :: *))]
Data.Semigroup.Internal.$fGenericAlt
  = \ (@ k_X6tjw)
      (@ (f_X6tjy :: k_X6tjw -> *))
      (@ (a_X6tjA :: k_X6tjw)) ->
      GHC.Generics.C:Generic
        @ (Alt f_X6tjy a_X6tjA)
        ((Data.Semigroup.Internal.$fGenericAlt2
            @ k_X6tjw @ f_X6tjy @ a_X6tjA)
         `cast` (forall (x :: <*>_N).
                 <Alt f_X6tjy a_X6tjA>_R
                 ->_R Data.Semigroup.Internal.N:Alt[0]
                          <k_X6tjw>_N <f_X6tjy>_R <a_X6tjA>_N ; (Sym (GHC.Generics.N:K1[0]
                                                                          <*>_N
                                                                          <R>_P
                                                                          <f_X6tjy a_X6tjA>_R
                                                                          <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <S>_P
                                                                                             <'MetaSel
                                                                                                ('Just
                                                                                                   "getAlt")
                                                                                                'NoSourceUnpackedness
                                                                                                'NoSourceStrictness
                                                                                                'DecidedLazy>_P
                                                                                             <K1
                                                                                                R
                                                                                                (f_X6tjy a_X6tjA)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                  <*>_N
                                                                                                                                  <C>_P
                                                                                                                                  <'MetaCons
                                                                                                                                     "Alt"
                                                                                                                                     'PrefixI
                                                                                                                                     'True>_P
                                                                                                                                  <M1
                                                                                                                                     S
                                                                                                                                     ('MetaSel
                                                                                                                                        ('Just
                                                                                                                                           "getAlt")
                                                                                                                                        'NoSourceUnpackedness
                                                                                                                                        'NoSourceStrictness
                                                                                                                                        'DecidedLazy)
                                                                                                                                     (K1
                                                                                                                                        R
                                                                                                                                        (f_X6tjy a_X6tjA))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                           <*>_N
                                                                                                                                                                           <D>_P
                                                                                                                                                                           <'MetaData
                                                                                                                                                                              "Alt"
                                                                                                                                                                              "Data.Semigroup.Internal"
                                                                                                                                                                              "base"
                                                                                                                                                                              'True>_P
                                                                                                                                                                           <M1
                                                                                                                                                                              C
                                                                                                                                                                              ('MetaCons
                                                                                                                                                                                 "Alt"
                                                                                                                                                                                 'PrefixI
                                                                                                                                                                                 'True)
                                                                                                                                                                              (M1
                                                                                                                                                                                 S
                                                                                                                                                                                 ('MetaSel
                                                                                                                                                                                    ('Just
                                                                                                                                                                                       "getAlt")
                                                                                                                                                                                    'NoSourceUnpackedness
                                                                                                                                                                                    'NoSourceStrictness
                                                                                                                                                                                    'DecidedLazy)
                                                                                                                                                                                 (K1
                                                                                                                                                                                    R
                                                                                                                                                                                    (f_X6tjy a_X6tjA)))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Alt[0]
                                                                                                                                                                                                                            <k_X6tjw>_N
                                                                                                                                                                                                                            <f_X6tjy>_N
                                                                                                                                                                                                                            <a_X6tjA>_N))))) <x>_N)
                 :: (forall x. Alt f_X6tjy a_X6tjA -> Alt f_X6tjy a_X6tjA :: *)
                    ~R# (forall x.
                         Alt f_X6tjy a_X6tjA -> Rep (Alt f_X6tjy a_X6tjA) x :: *)))
        ((Data.Semigroup.Internal.$fGenericAlt1
            @ k_X6tjw @ f_X6tjy @ a_X6tjA)
         `cast` (forall (x :: <*>_N).
                 <Rep (Alt f_X6tjy a_X6tjA) x>_R
                 ->_R (Sub (Data.Semigroup.Internal.Rep_Alt[0]
                                <k_X6tjw>_N <f_X6tjy>_N <a_X6tjA>_N) ; (GHC.Generics.N:M1[0]
                                                                            <*>_N
                                                                            <D>_P
                                                                            <'MetaData
                                                                               "Alt"
                                                                               "Data.Semigroup.Internal"
                                                                               "base"
                                                                               'True>_P
                                                                            <M1
                                                                               C
                                                                               ('MetaCons
                                                                                  "Alt"
                                                                                  'PrefixI
                                                                                  'True)
                                                                               (M1
                                                                                  S
                                                                                  ('MetaSel
                                                                                     ('Just
                                                                                        "getAlt")
                                                                                     'NoSourceUnpackedness
                                                                                     'NoSourceStrictness
                                                                                     'DecidedLazy)
                                                                                  (K1
                                                                                     R
                                                                                     (f_X6tjy a_X6tjA)))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                   <*>_N
                                                                                                                   <C>_P
                                                                                                                   <'MetaCons
                                                                                                                      "Alt"
                                                                                                                      'PrefixI
                                                                                                                      'True>_P
                                                                                                                   <M1
                                                                                                                      S
                                                                                                                      ('MetaSel
                                                                                                                         ('Just
                                                                                                                            "getAlt")
                                                                                                                         'NoSourceUnpackedness
                                                                                                                         'NoSourceStrictness
                                                                                                                         'DecidedLazy)
                                                                                                                      (K1
                                                                                                                         R
                                                                                                                         (f_X6tjy a_X6tjA))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                     <*>_N
                                                                                                                                                     <S>_P
                                                                                                                                                     <'MetaSel
                                                                                                                                                        ('Just
                                                                                                                                                           "getAlt")
                                                                                                                                                        'NoSourceUnpackedness
                                                                                                                                                        'NoSourceStrictness
                                                                                                                                                        'DecidedLazy>_P
                                                                                                                                                     <K1
                                                                                                                                                        R
                                                                                                                                                        (f_X6tjy a_X6tjA)>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                             <*>_N
                                                                                                                                                                                             <R>_P
                                                                                                                                                                                             <f_X6tjy a_X6tjA>_R
                                                                                                                                                                                             <x>_P ; Sym (Data.Semigroup.Internal.N:Alt[0]
                                                                                                                                                                                                              <k_X6tjw>_N
                                                                                                                                                                                                              <f_X6tjy>_R) <a_X6tjA>_N)
                 :: (forall x.
                     Rep (Alt f_X6tjy a_X6tjA) x -> Rep (Alt f_X6tjy a_X6tjA) x :: *)
                    ~R# (forall x.
                         Rep (Alt f_X6tjy a_X6tjA) x -> Alt f_X6tjy a_X6tjA :: *)))

-- RHS size: {terms: 17, types: 13, coercions: 59, joins: 0/0}
Data.Semigroup.Internal.$fNumProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Num a => Num (Product a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2m) (v_XbV :: Num a_a6r2m) ->
       GHC.Num.C:Num TYPE: Product a_a6r2m
                     (+ @ a_a6r2m v_XbV)
                     `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             :: (a_a6r2m -> a_a6r2m -> a_a6r2m :: *)
                                ~R# (Product a_a6r2m -> Product a_a6r2m -> Product a_a6r2m :: *))
                     (- @ a_a6r2m v_XbV)
                     `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             :: (a_a6r2m -> a_a6r2m -> a_a6r2m :: *)
                                ~R# (Product a_a6r2m -> Product a_a6r2m -> Product a_a6r2m :: *))
                     (* @ a_a6r2m v_XbV)
                     `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             :: (a_a6r2m -> a_a6r2m -> a_a6r2m :: *)
                                ~R# (Product a_a6r2m -> Product a_a6r2m -> Product a_a6r2m :: *))
                     (negate @ a_a6r2m v_XbV)
                     `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             :: (a_a6r2m -> a_a6r2m :: *)
                                ~R# (Product a_a6r2m -> Product a_a6r2m :: *))
                     (abs @ a_a6r2m v_XbV)
                     `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             :: (a_a6r2m -> a_a6r2m :: *)
                                ~R# (Product a_a6r2m -> Product a_a6r2m :: *))
                     (signum @ a_a6r2m v_XbV)
                     `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             :: (a_a6r2m -> a_a6r2m :: *)
                                ~R# (Product a_a6r2m -> Product a_a6r2m :: *))
                     (fromInteger @ a_a6r2m v_XbV)
                     `cast` (<Integer>_R
                             ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                             :: (Integer -> a_a6r2m :: *)
                                ~R# (Integer -> Product a_a6r2m :: *))]
Data.Semigroup.Internal.$fNumProduct
  = \ (@ a_a6t6g) ($dNum_a6t6h :: Num a_a6t6g) ->
      GHC.Num.C:Num
        @ (Product a_a6t6g)
        ((+ @ a_a6t6g $dNum_a6t6h)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 :: (a_a6t6g -> a_a6t6g -> a_a6t6g :: *)
                    ~R# (Product a_a6t6g -> Product a_a6t6g -> Product a_a6t6g :: *)))
        ((- @ a_a6t6g $dNum_a6t6h)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 :: (a_a6t6g -> a_a6t6g -> a_a6t6g :: *)
                    ~R# (Product a_a6t6g -> Product a_a6t6g -> Product a_a6t6g :: *)))
        ((* @ a_a6t6g $dNum_a6t6h)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 :: (a_a6t6g -> a_a6t6g -> a_a6t6g :: *)
                    ~R# (Product a_a6t6g -> Product a_a6t6g -> Product a_a6t6g :: *)))
        ((negate @ a_a6t6g $dNum_a6t6h)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 :: (a_a6t6g -> a_a6t6g :: *)
                    ~R# (Product a_a6t6g -> Product a_a6t6g :: *)))
        ((abs @ a_a6t6g $dNum_a6t6h)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 :: (a_a6t6g -> a_a6t6g :: *)
                    ~R# (Product a_a6t6g -> Product a_a6t6g :: *)))
        ((signum @ a_a6t6g $dNum_a6t6h)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 :: (a_a6t6g -> a_a6t6g :: *)
                    ~R# (Product a_a6t6g -> Product a_a6t6g :: *)))
        ((fromInteger @ a_a6t6g $dNum_a6t6h)
         `cast` (<Integer>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t6g>_R)
                 :: (Integer -> a_a6t6g :: *)
                    ~R# (Integer -> Product a_a6t6g :: *)))

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Product1
  :: forall a. Rep1 Product a -> Rep1 Product a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6t5R)
                 (ds_d6tYs [Occ=Once] :: Rep1 Product a_a6t5R) ->
                 ds_d6tYs}]
Data.Semigroup.Internal.$fGeneric1Product1
  = \ (@ a_a6t5R) (ds_d6tYs :: Rep1 Product a_a6t5R) -> ds_d6tYs

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Product2
  :: forall a. Product a -> Product a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6t5s) (x_a6sse [Occ=Once] :: Product a_a6t5s) ->
                 x_a6sse}]
Data.Semigroup.Internal.$fGeneric1Product2
  = \ (@ a_a6t5s) (x_a6sse :: Product a_a6t5s) -> x_a6sse

-- RHS size: {terms: 3, types: 3, coercions: 163, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Product [InlPrag=NOUSERINLINE CONLIKE]
  :: Generic1 Product
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Generics.C:Generic1 TYPE: *
                               TYPE: Product
                               Data.Semigroup.Internal.$fGeneric1Product2
                               `cast` (forall (a :: <*>_N).
                                       <Product a>_R
                                       ->_R Data.Semigroup.Internal.N:Product[0]
                                                (Sym (GHC.Generics.N:Par1[0]
                                                          <a>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                             <*>_N
                                                                             <S>_P
                                                                             <'MetaSel
                                                                                ('Just "getProduct")
                                                                                'NoSourceUnpackedness
                                                                                'NoSourceStrictness
                                                                                'DecidedLazy>_P
                                                                             <Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                   <*>_N
                                                                                                   <C>_P
                                                                                                   <'MetaCons
                                                                                                      "Product"
                                                                                                      'PrefixI
                                                                                                      'True>_P
                                                                                                   <M1
                                                                                                      S
                                                                                                      ('MetaSel
                                                                                                         ('Just
                                                                                                            "getProduct")
                                                                                                         'NoSourceUnpackedness
                                                                                                         'NoSourceStrictness
                                                                                                         'DecidedLazy)
                                                                                                      Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                           <*>_N
                                                                                                                           <D>_P
                                                                                                                           <'MetaData
                                                                                                                              "Product"
                                                                                                                              "Data.Semigroup.Internal"
                                                                                                                              "base"
                                                                                                                              'True>_P
                                                                                                                           <M1
                                                                                                                              C
                                                                                                                              ('MetaCons
                                                                                                                                 "Product"
                                                                                                                                 'PrefixI
                                                                                                                                 'True)
                                                                                                                              (M1
                                                                                                                                 S
                                                                                                                                 ('MetaSel
                                                                                                                                    ('Just
                                                                                                                                       "getProduct")
                                                                                                                                    'NoSourceUnpackedness
                                                                                                                                    'NoSourceStrictness
                                                                                                                                    'DecidedLazy)
                                                                                                                                 Par1)>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Product[0]))))) <a>_N)
                                       :: (forall a. Product a -> Product a :: *)
                                          ~R# (forall a. Product a -> Rep1 Product a :: *))
                               Data.Semigroup.Internal.$fGeneric1Product1
                               `cast` (forall (a :: <*>_N).
                                       <Rep1 Product a>_R
                                       ->_R (Sub (Data.Semigroup.Internal.Rep1_Product[0]) ; (GHC.Generics.N:M1[0]
                                                                                                  <*>_N
                                                                                                  <D>_P
                                                                                                  <'MetaData
                                                                                                     "Product"
                                                                                                     "Data.Semigroup.Internal"
                                                                                                     "base"
                                                                                                     'True>_P
                                                                                                  <M1
                                                                                                     C
                                                                                                     ('MetaCons
                                                                                                        "Product"
                                                                                                        'PrefixI
                                                                                                        'True)
                                                                                                     (M1
                                                                                                        S
                                                                                                        ('MetaSel
                                                                                                           ('Just
                                                                                                              "getProduct")
                                                                                                           'NoSourceUnpackedness
                                                                                                           'NoSourceStrictness
                                                                                                           'DecidedLazy)
                                                                                                        Par1)>_R ; (GHC.Generics.N:M1[0]
                                                                                                                        <*>_N
                                                                                                                        <C>_P
                                                                                                                        <'MetaCons
                                                                                                                           "Product"
                                                                                                                           'PrefixI
                                                                                                                           'True>_P
                                                                                                                        <M1
                                                                                                                           S
                                                                                                                           ('MetaSel
                                                                                                                              ('Just
                                                                                                                                 "getProduct")
                                                                                                                              'NoSourceUnpackedness
                                                                                                                              'NoSourceStrictness
                                                                                                                              'DecidedLazy)
                                                                                                                           Par1>_R ; GHC.Generics.N:M1[0]
                                                                                                                                         <*>_N
                                                                                                                                         <S>_P
                                                                                                                                         <'MetaSel
                                                                                                                                            ('Just
                                                                                                                                               "getProduct")
                                                                                                                                            'NoSourceUnpackedness
                                                                                                                                            'NoSourceStrictness
                                                                                                                                            'DecidedLazy>_P
                                                                                                                                         <Par1>_R))) <a>_N ; GHC.Generics.N:Par1[0]
                                                                                                                                                                 (Sym (Data.Semigroup.Internal.N:Product[0]
                                                                                                                                                                           <a>_R))
                                       :: (forall a. Rep1 Product a -> Rep1 Product a :: *)
                                          ~R# (forall a. Rep1 Product a -> Product a :: *))]
Data.Semigroup.Internal.$fGeneric1Product
  = GHC.Generics.C:Generic1
      @ *
      @ Product
      (Data.Semigroup.Internal.$fGeneric1Product2
       `cast` (forall (a :: <*>_N).
               <Product a>_R
               ->_R Data.Semigroup.Internal.N:Product[0]
                        (Sym (GHC.Generics.N:Par1[0] <a>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                        <*>_N
                                                                        <S>_P
                                                                        <'MetaSel
                                                                           ('Just "getProduct")
                                                                           'NoSourceUnpackedness
                                                                           'NoSourceStrictness
                                                                           'DecidedLazy>_P
                                                                        <Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                              <*>_N
                                                                                              <C>_P
                                                                                              <'MetaCons
                                                                                                 "Product"
                                                                                                 'PrefixI
                                                                                                 'True>_P
                                                                                              <M1
                                                                                                 S
                                                                                                 ('MetaSel
                                                                                                    ('Just
                                                                                                       "getProduct")
                                                                                                    'NoSourceUnpackedness
                                                                                                    'NoSourceStrictness
                                                                                                    'DecidedLazy)
                                                                                                 Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                      <*>_N
                                                                                                                      <D>_P
                                                                                                                      <'MetaData
                                                                                                                         "Product"
                                                                                                                         "Data.Semigroup.Internal"
                                                                                                                         "base"
                                                                                                                         'True>_P
                                                                                                                      <M1
                                                                                                                         C
                                                                                                                         ('MetaCons
                                                                                                                            "Product"
                                                                                                                            'PrefixI
                                                                                                                            'True)
                                                                                                                         (M1
                                                                                                                            S
                                                                                                                            ('MetaSel
                                                                                                                               ('Just
                                                                                                                                  "getProduct")
                                                                                                                               'NoSourceUnpackedness
                                                                                                                               'NoSourceStrictness
                                                                                                                               'DecidedLazy)
                                                                                                                            Par1)>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Product[0]))))) <a>_N)
               :: (forall a. Product a -> Product a :: *)
                  ~R# (forall a. Product a -> Rep1 Product a :: *)))
      (Data.Semigroup.Internal.$fGeneric1Product1
       `cast` (forall (a :: <*>_N).
               <Rep1 Product a>_R
               ->_R (Sub (Data.Semigroup.Internal.Rep1_Product[0]) ; (GHC.Generics.N:M1[0]
                                                                          <*>_N
                                                                          <D>_P
                                                                          <'MetaData
                                                                             "Product"
                                                                             "Data.Semigroup.Internal"
                                                                             "base"
                                                                             'True>_P
                                                                          <M1
                                                                             C
                                                                             ('MetaCons
                                                                                "Product"
                                                                                'PrefixI
                                                                                'True)
                                                                             (M1
                                                                                S
                                                                                ('MetaSel
                                                                                   ('Just
                                                                                      "getProduct")
                                                                                   'NoSourceUnpackedness
                                                                                   'NoSourceStrictness
                                                                                   'DecidedLazy)
                                                                                Par1)>_R ; (GHC.Generics.N:M1[0]
                                                                                                <*>_N
                                                                                                <C>_P
                                                                                                <'MetaCons
                                                                                                   "Product"
                                                                                                   'PrefixI
                                                                                                   'True>_P
                                                                                                <M1
                                                                                                   S
                                                                                                   ('MetaSel
                                                                                                      ('Just
                                                                                                         "getProduct")
                                                                                                      'NoSourceUnpackedness
                                                                                                      'NoSourceStrictness
                                                                                                      'DecidedLazy)
                                                                                                   Par1>_R ; GHC.Generics.N:M1[0]
                                                                                                                 <*>_N
                                                                                                                 <S>_P
                                                                                                                 <'MetaSel
                                                                                                                    ('Just
                                                                                                                       "getProduct")
                                                                                                                    'NoSourceUnpackedness
                                                                                                                    'NoSourceStrictness
                                                                                                                    'DecidedLazy>_P
                                                                                                                 <Par1>_R))) <a>_N ; GHC.Generics.N:Par1[0]
                                                                                                                                         (Sym (Data.Semigroup.Internal.N:Product[0]
                                                                                                                                                   <a>_R))
               :: (forall a. Rep1 Product a -> Rep1 Product a :: *)
                  ~R# (forall a. Rep1 Product a -> Product a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericProduct1
  :: forall a x. Rep (Product a) x -> Rep (Product a) x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6t4r)
                 (@ x_a6t4X)
                 (ds_d6tYm [Occ=Once] :: Rep (Product a_a6t4r) x_a6t4X) ->
                 ds_d6tYm}]
Data.Semigroup.Internal.$fGenericProduct1
  = \ (@ a_a6t4r)
      (@ x_a6t4X)
      (ds_d6tYm :: Rep (Product a_a6t4r) x_a6t4X) ->
      ds_d6tYm

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericProduct2
  :: forall a x. Product a -> Product a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_X6tgz)
                 (@ x_a6t4v)
                 (x1_a6ssa [Occ=Once] :: Product a_X6tgz) ->
                 x1_a6ssa}]
Data.Semigroup.Internal.$fGenericProduct2
  = \ (@ a_X6tgz) (@ x_a6t4v) (x1_a6ssa :: Product a_X6tgz) ->
      x1_a6ssa

-- RHS size: {terms: 4, types: 6, coercions: 199, joins: 0/0}
Data.Semigroup.Internal.$fGenericProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Generic (Product a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ a_a6r2m) ->
       GHC.Generics.C:Generic TYPE: Product a_a6r2m
                              (Data.Semigroup.Internal.$fGenericProduct2 @ a_a6r2m)
                              `cast` (forall (x :: <*>_N).
                                      <Product a_a6r2m>_R
                                      ->_R Data.Semigroup.Internal.N:Product[0]
                                               (Sym (GHC.Generics.N:K1[0]
                                                         <*>_N
                                                         <R>_P
                                                         <a_a6r2m>_R
                                                         <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                            <*>_N
                                                                            <S>_P
                                                                            <'MetaSel
                                                                               ('Just "getProduct")
                                                                               'NoSourceUnpackedness
                                                                               'NoSourceStrictness
                                                                               'DecidedLazy>_P
                                                                            <K1
                                                                               R
                                                                               a_a6r2m>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <C>_P
                                                                                                       <'MetaCons
                                                                                                          "Product"
                                                                                                          'PrefixI
                                                                                                          'True>_P
                                                                                                       <M1
                                                                                                          S
                                                                                                          ('MetaSel
                                                                                                             ('Just
                                                                                                                "getProduct")
                                                                                                             'NoSourceUnpackedness
                                                                                                             'NoSourceStrictness
                                                                                                             'DecidedLazy)
                                                                                                          (K1
                                                                                                             R
                                                                                                             a_a6r2m)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                      <*>_N
                                                                                                                                      <D>_P
                                                                                                                                      <'MetaData
                                                                                                                                         "Product"
                                                                                                                                         "Data.Semigroup.Internal"
                                                                                                                                         "base"
                                                                                                                                         'True>_P
                                                                                                                                      <M1
                                                                                                                                         C
                                                                                                                                         ('MetaCons
                                                                                                                                            "Product"
                                                                                                                                            'PrefixI
                                                                                                                                            'True)
                                                                                                                                         (M1
                                                                                                                                            S
                                                                                                                                            ('MetaSel
                                                                                                                                               ('Just
                                                                                                                                                  "getProduct")
                                                                                                                                               'NoSourceUnpackedness
                                                                                                                                               'NoSourceStrictness
                                                                                                                                               'DecidedLazy)
                                                                                                                                            (K1
                                                                                                                                               R
                                                                                                                                               a_a6r2m))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Product[0]
                                                                                                                                                                             <a_a6r2m>_N))))) <x>_N)
                                      :: (forall x. Product a_a6r2m -> Product a_a6r2m :: *)
                                         ~R# (forall x.
                                              Product a_a6r2m -> Rep (Product a_a6r2m) x :: *))
                              (Data.Semigroup.Internal.$fGenericProduct1 @ a_a6r2m)
                              `cast` (forall (x :: <*>_N).
                                      <Rep (Product a_a6r2m) x>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Product[0]
                                                    (Sym (GHC.Generics.N:K1[0]
                                                              <*>_N
                                                              <R>_P
                                                              <a_a6r2m>_R
                                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                 <*>_N
                                                                                 <S>_P
                                                                                 <'MetaSel
                                                                                    ('Just
                                                                                       "getProduct")
                                                                                    'NoSourceUnpackedness
                                                                                    'NoSourceStrictness
                                                                                    'DecidedLazy>_P
                                                                                 <K1
                                                                                    R
                                                                                    a_a6r2m>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <C>_P
                                                                                                            <'MetaCons
                                                                                                               "Product"
                                                                                                               'PrefixI
                                                                                                               'True>_P
                                                                                                            <M1
                                                                                                               S
                                                                                                               ('MetaSel
                                                                                                                  ('Just
                                                                                                                     "getProduct")
                                                                                                                  'NoSourceUnpackedness
                                                                                                                  'NoSourceStrictness
                                                                                                                  'DecidedLazy)
                                                                                                               (K1
                                                                                                                  R
                                                                                                                  a_a6r2m)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <D>_P
                                                                                                                                           <'MetaData
                                                                                                                                              "Product"
                                                                                                                                              "Data.Semigroup.Internal"
                                                                                                                                              "base"
                                                                                                                                              'True>_P
                                                                                                                                           <M1
                                                                                                                                              C
                                                                                                                                              ('MetaCons
                                                                                                                                                 "Product"
                                                                                                                                                 'PrefixI
                                                                                                                                                 'True)
                                                                                                                                              (M1
                                                                                                                                                 S
                                                                                                                                                 ('MetaSel
                                                                                                                                                    ('Just
                                                                                                                                                       "getProduct")
                                                                                                                                                    'NoSourceUnpackedness
                                                                                                                                                    'NoSourceStrictness
                                                                                                                                                    'DecidedLazy)
                                                                                                                                                 (K1
                                                                                                                                                    R
                                                                                                                                                    a_a6r2m))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Product[0]
                                                                                                                                                                                  <a_a6r2m>_N))))) <x>_N))
                                      :: (forall x.
                                          Rep (Product a_a6r2m) x -> Rep (Product a_a6r2m) x :: *)
                                         ~R# (forall x.
                                              Rep (Product a_a6r2m) x -> Product a_a6r2m :: *))]
Data.Semigroup.Internal.$fGenericProduct
  = \ (@ a_X6tgE) ->
      GHC.Generics.C:Generic
        @ (Product a_X6tgE)
        ((Data.Semigroup.Internal.$fGenericProduct2 @ a_X6tgE)
         `cast` (forall (x :: <*>_N).
                 <Product a_X6tgE>_R
                 ->_R Data.Semigroup.Internal.N:Product[0]
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N <R>_P <a_X6tgE>_R <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                               <*>_N
                                                                               <S>_P
                                                                               <'MetaSel
                                                                                  ('Just
                                                                                     "getProduct")
                                                                                  'NoSourceUnpackedness
                                                                                  'NoSourceStrictness
                                                                                  'DecidedLazy>_P
                                                                               <K1
                                                                                  R
                                                                                  a_X6tgE>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                          <*>_N
                                                                                                          <C>_P
                                                                                                          <'MetaCons
                                                                                                             "Product"
                                                                                                             'PrefixI
                                                                                                             'True>_P
                                                                                                          <M1
                                                                                                             S
                                                                                                             ('MetaSel
                                                                                                                ('Just
                                                                                                                   "getProduct")
                                                                                                                'NoSourceUnpackedness
                                                                                                                'NoSourceStrictness
                                                                                                                'DecidedLazy)
                                                                                                             (K1
                                                                                                                R
                                                                                                                a_X6tgE)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                         <*>_N
                                                                                                                                         <D>_P
                                                                                                                                         <'MetaData
                                                                                                                                            "Product"
                                                                                                                                            "Data.Semigroup.Internal"
                                                                                                                                            "base"
                                                                                                                                            'True>_P
                                                                                                                                         <M1
                                                                                                                                            C
                                                                                                                                            ('MetaCons
                                                                                                                                               "Product"
                                                                                                                                               'PrefixI
                                                                                                                                               'True)
                                                                                                                                            (M1
                                                                                                                                               S
                                                                                                                                               ('MetaSel
                                                                                                                                                  ('Just
                                                                                                                                                     "getProduct")
                                                                                                                                                  'NoSourceUnpackedness
                                                                                                                                                  'NoSourceStrictness
                                                                                                                                                  'DecidedLazy)
                                                                                                                                               (K1
                                                                                                                                                  R
                                                                                                                                                  a_X6tgE))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Product[0]
                                                                                                                                                                                <a_X6tgE>_N))))) <x>_N)
                 :: (forall x. Product a_X6tgE -> Product a_X6tgE :: *)
                    ~R# (forall x. Product a_X6tgE -> Rep (Product a_X6tgE) x :: *)))
        ((Data.Semigroup.Internal.$fGenericProduct1 @ a_X6tgE)
         `cast` (forall (x :: <*>_N).
                 <Rep (Product a_X6tgE) x>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0]
                               (Sym (GHC.Generics.N:K1[0]
                                         <*>_N <R>_P <a_X6tgE>_R <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                    <*>_N
                                                                                    <S>_P
                                                                                    <'MetaSel
                                                                                       ('Just
                                                                                          "getProduct")
                                                                                       'NoSourceUnpackedness
                                                                                       'NoSourceStrictness
                                                                                       'DecidedLazy>_P
                                                                                    <K1
                                                                                       R
                                                                                       a_X6tgE>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                               <*>_N
                                                                                                               <C>_P
                                                                                                               <'MetaCons
                                                                                                                  "Product"
                                                                                                                  'PrefixI
                                                                                                                  'True>_P
                                                                                                               <M1
                                                                                                                  S
                                                                                                                  ('MetaSel
                                                                                                                     ('Just
                                                                                                                        "getProduct")
                                                                                                                     'NoSourceUnpackedness
                                                                                                                     'NoSourceStrictness
                                                                                                                     'DecidedLazy)
                                                                                                                  (K1
                                                                                                                     R
                                                                                                                     a_X6tgE)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                              <*>_N
                                                                                                                                              <D>_P
                                                                                                                                              <'MetaData
                                                                                                                                                 "Product"
                                                                                                                                                 "Data.Semigroup.Internal"
                                                                                                                                                 "base"
                                                                                                                                                 'True>_P
                                                                                                                                              <M1
                                                                                                                                                 C
                                                                                                                                                 ('MetaCons
                                                                                                                                                    "Product"
                                                                                                                                                    'PrefixI
                                                                                                                                                    'True)
                                                                                                                                                 (M1
                                                                                                                                                    S
                                                                                                                                                    ('MetaSel
                                                                                                                                                       ('Just
                                                                                                                                                          "getProduct")
                                                                                                                                                       'NoSourceUnpackedness
                                                                                                                                                       'NoSourceStrictness
                                                                                                                                                       'DecidedLazy)
                                                                                                                                                    (K1
                                                                                                                                                       R
                                                                                                                                                       a_X6tgE))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Product[0]
                                                                                                                                                                                     <a_X6tgE>_N))))) <x>_N))
                 :: (forall x.
                     Rep (Product a_X6tgE) x -> Rep (Product a_X6tgE) x :: *)
                    ~R# (forall x. Rep (Product a_X6tgE) x -> Product a_X6tgE :: *)))

-- RHS size: {terms: 7, types: 8, coercions: 6, joins: 0/0}
Data.Semigroup.Internal.$fBoundedProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Bounded a => Bounded (Product a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2m) (v_Xci :: Bounded a_a6r2m) ->
       GHC.Enum.C:Bounded TYPE: Product a_a6r2m
                          (minBound @ a_a6r2m v_Xci)
                          `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                  :: (a_a6r2m :: *) ~R# (Product a_a6r2m :: *))
                          (maxBound @ a_a6r2m v_Xci)
                          `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                  :: (a_a6r2m :: *) ~R# (Product a_a6r2m :: *))]
Data.Semigroup.Internal.$fBoundedProduct
  = \ (@ a_a6t49) ($dBounded_a6t4a :: Bounded a_a6t49) ->
      GHC.Enum.C:Bounded
        @ (Product a_a6t49)
        ((minBound @ a_a6t49 $dBounded_a6t4a)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t49>_R)
                 :: (a_a6t49 :: *) ~R# (Product a_a6t49 :: *)))
        ((maxBound @ a_a6t49 $dBounded_a6t4a)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t49>_R)
                 :: (a_a6t49 :: *) ~R# (Product a_a6t49 :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowProduct2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Semigroup.Internal.$fShowProduct2 = "Product {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowProduct1 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Data.Semigroup.Internal.$fShowProduct1 = "getProduct = "#

-- RHS size: {terms: 37, types: 15, coercions: 2, joins: 0/1}
Data.Semigroup.Internal.$w$cshowsPrec4 [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int# -> Product a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 331 120}]
Data.Semigroup.Internal.$w$cshowsPrec4
  = \ (@ a_s6uLO)
      (w_s6uLP :: Show a_s6uLO)
      (ww_s6uLU :: Int#)
      (w1_s6uLR :: Product a_s6uLO) ->
      let {
        f_s6unv [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f_s6unv
          = showsPrec
              @ a_s6uLO
              w_s6uLP
              Data.Semigroup.Internal.$fShowAlt1
              (w1_s6uLR
               `cast` (Data.Semigroup.Internal.N:Product[0] <a_s6uLO>_R
                       :: (Product a_s6uLO :: *) ~R# (a_s6uLO :: *))) } in
      case >=# ww_s6uLU 11# of {
        __DEFAULT ->
          \ (x_X6u9W :: String) ->
            unpackAppendCString#
              Data.Semigroup.Internal.$fShowProduct2
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowProduct1
                 (f_s6unv
                    (unpackAppendCString#
                       Data.Semigroup.Internal.$fReadAll5 x_X6u9W)));
        1# ->
          \ (x_i6tXd :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowProduct2
                 (unpackAppendCString#
                    Data.Semigroup.Internal.$fShowProduct1
                    (f_s6unv
                       (unpackAppendCString#
                          Data.Semigroup.Internal.$fReadAll5
                          (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i6tXd)))))
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowProduct_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int -> Product a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s6uLO)
                 (w_s6uLP [Occ=Once] :: Show a_s6uLO)
                 (w1_s6uLQ [Occ=Once!] :: Int)
                 (w2_s6uLR [Occ=Once] :: Product a_s6uLO) ->
                 case w1_s6uLQ of { I# ww1_s6uLU [Occ=Once] ->
                 Data.Semigroup.Internal.$w$cshowsPrec4
                   @ a_s6uLO w_s6uLP ww1_s6uLU w2_s6uLR
                 }}]
Data.Semigroup.Internal.$fShowProduct_$cshowsPrec
  = \ (@ a_s6uLO)
      (w_s6uLP :: Show a_s6uLO)
      (w1_s6uLQ :: Int)
      (w2_s6uLR :: Product a_s6uLO) ->
      case w1_s6uLQ of { I# ww1_s6uLU ->
      Data.Semigroup.Internal.$w$cshowsPrec4
        @ a_s6uLO w_s6uLP ww1_s6uLU w2_s6uLR
      }

-- RHS size: {terms: 12, types: 7, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fShowProduct_$cshow
  :: forall a. Show a => Product a -> String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 110 0}]
Data.Semigroup.Internal.$fShowProduct_$cshow
  = \ (@ a_a6t3E)
      ($dShow_a6t3F :: Show a_a6t3E)
      (x_i6tXp :: Product a_a6t3E) ->
      unpackAppendCString#
        Data.Semigroup.Internal.$fShowProduct2
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowProduct1
           (showsPrec
              @ a_a6t3E
              $dShow_a6t3F
              Data.Semigroup.Internal.$fShowAlt1
              (x_i6tXp
               `cast` (Data.Semigroup.Internal.N:Product[0] <a_a6t3E>_R
                       :: (Product a_a6t3E :: *) ~R# (a_a6t3E :: *)))
              Data.Semigroup.Internal.$fReadAll4))

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowProduct_$cshowList
  :: forall a. Show a => [Product a] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6t3E)
                 ($dShow_a6t3F [Occ=Once] :: Show a_a6t3E)
                 (ls_i6tXs [Occ=Once] :: [Product a_a6t3E])
                 (s_i6tXt [Occ=Once] :: String) ->
                 showList__
                   @ (Product a_a6t3E)
                   (Data.Semigroup.Internal.$fShowProduct_$cshowsPrec
                      @ a_a6t3E $dShow_a6t3F Data.Semigroup.Internal.$fShowAlt1)
                   ls_i6tXs
                   s_i6tXt}]
Data.Semigroup.Internal.$fShowProduct_$cshowList
  = \ (@ a_a6t3E)
      ($dShow_a6t3F :: Show a_a6t3E)
      (ls_i6tXs :: [Product a_a6t3E])
      (s_i6tXt :: String) ->
      showList__
        @ (Product a_a6t3E)
        (\ (w_s6uLR :: Product a_a6t3E) ->
           Data.Semigroup.Internal.$w$cshowsPrec4
             @ a_a6t3E $dShow_a6t3F 0# w_s6uLR)
        ls_i6tXs
        s_i6tXt

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Product a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>m,
 Unf=DFun: \ (@ a_a6r2m) (v_Xck :: Show a_a6r2m) ->
       GHC.Show.C:Show TYPE: Product a_a6r2m
                       Data.Semigroup.Internal.$fShowProduct_$cshowsPrec @ a_a6r2m v_Xck
                       Data.Semigroup.Internal.$fShowProduct_$cshow @ a_a6r2m v_Xck
                       Data.Semigroup.Internal.$fShowProduct_$cshowList @ a_a6r2m v_Xck]
Data.Semigroup.Internal.$fShowProduct
  = \ (@ a_a6t3E) ($dShow_a6t3F :: Show a_a6t3E) ->
      GHC.Show.C:Show
        @ (Product a_a6t3E)
        (Data.Semigroup.Internal.$fShowProduct_$cshowsPrec
           @ a_a6t3E $dShow_a6t3F)
        (Data.Semigroup.Internal.$fShowProduct_$cshow
           @ a_a6t3E $dShow_a6t3F)
        (Data.Semigroup.Internal.$fShowProduct_$cshowList
           @ a_a6t3E $dShow_a6t3F)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadProduct5 = "Product"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadProduct4
  = unpackCString# Data.Semigroup.Internal.$fReadProduct5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct_lexeme
  :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadProduct_lexeme
  = Text.Read.Lex.Ident Data.Semigroup.Internal.$fReadProduct4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Semigroup.Internal.$fReadProduct3 = "getProduct"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadProduct2
  = unpackCString# Data.Semigroup.Internal.$fReadProduct3

-- RHS size: {terms: 51, types: 60, coercions: 23, joins: 0/2}
Data.Semigroup.Internal.$fReadProduct1
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Product a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 391 60}]
Data.Semigroup.Internal.$fReadProduct1
  = \ (@ a_a6t2P) ($dRead_a6t2Q :: Read a_a6t2P) ->
      GHC.Read.list3
        @ (Product a_a6t2P)
        (let {
           lvl12_s6upv :: Text.ParserCombinators.ReadP.ReadP a_a6t2P
           [LclId]
           lvl12_s6upv
             = ((readPrec @ a_a6t2P $dRead_a6t2Q)
                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a6t2P>_R
                        :: (Text.ParserCombinators.ReadPrec.ReadPrec a_a6t2P :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.Prec
                                -> Text.ParserCombinators.ReadP.ReadP a_a6t2P :: *)))
                 Text.ParserCombinators.ReadPrec.minPrec } in
         let {
           ds_s6unh [Dmd=<L,C(C1(U))>]
             :: Text.ParserCombinators.ReadPrec.Prec
                -> Text.ParserCombinators.ReadP.ReadP a_a6t2P
           [LclId,
            Arity=1,
            Str=<L,A>,
            Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                    WorkFree=True, Expandable=True,
                    Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                    Tmpl= \ _ [Occ=Dead] -> lvl12_s6upv}]
           ds_s6unh = \ _ [Occ=Dead] -> lvl12_s6upv } in
         (\ (c_i6ua8 :: Text.ParserCombinators.ReadPrec.Prec)
            (@ b_i6u9v)
            (eta_B1
               :: Product a_a6t2P -> Text.ParserCombinators.ReadP.P b_i6u9v) ->
            case c_i6ua8 of { I# x_i6uab ->
            case <=# x_i6uab 11# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_i6u9v;
              1# ->
                case Text.Read.Lex.$wexpect
                       Data.Semigroup.Internal.$fReadProduct_lexeme
                       @ b_i6u9v
                       (\ _ [Occ=Dead, OS=OneShot] ->
                          case Text.Read.Lex.$wexpect
                                 Data.Semigroup.Internal.$fReadAll_lexeme
                                 @ b_i6u9v
                                 (\ _ [Occ=Dead, OS=OneShot] ->
                                    ((((readField
                                          @ a_a6t2P
                                          Data.Semigroup.Internal.$fReadProduct2
                                          (ds_s6unh
                                           `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <a_a6t2P>_R)
                                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            a_a6t2P :: *)
                                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                             a_a6t2P :: *))))
                                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <a_a6t2P>_R
                                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                                     a_a6t2P :: *)
                                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            a_a6t2P :: *)))
                                        Data.Semigroup.Internal.$fReadAll6)
                                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a6t2P>_R
                                             :: (Text.ParserCombinators.ReadP.ReadP a_a6t2P :: *)
                                                ~R# (forall b.
                                                     (a_a6t2P -> Text.ParserCombinators.ReadP.P b)
                                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                                      @ b_i6u9v
                                      (\ (a3_i6ubd :: a_a6t2P) ->
                                         case Text.Read.Lex.$wexpect
                                                Data.Semigroup.Internal.$fReadAll3
                                                @ b_i6u9v
                                                (\ _ [Occ=Dead, OS=OneShot] ->
                                                   eta_B1
                                                     (a3_i6ubd
                                                      `cast` (Sym (Data.Semigroup.Internal.N:Product[0]
                                                                       <a_a6t2P>_R)
                                                              :: (a_a6t2P :: *)
                                                                 ~R# (Product a_a6t2P :: *))))
                                         of
                                         { (# ww1_i6ub0 #) ->
                                         Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                                         }))
                          of
                          { (# ww1_i6ub0 #) ->
                          Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                          })
                of
                { (# ww1_i6ub0 #) ->
                Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                }
            }
            })
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Product
                                   a_a6t2P>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Product a_a6t2P>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Product a_a6t2P -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Product a_a6t2P) :: *)))

-- RHS size: {terms: 10, types: 21, coercions: 0, joins: 0/1}
Data.Semigroup.Internal.$fReadProduct_$creadsPrec
  :: forall a. Read a => Int -> ReadS (Product a)
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 60}]
Data.Semigroup.Internal.$fReadProduct_$creadsPrec
  = \ (@ a_X6tfh) ($dRead_X6tfj :: Read a_X6tfh) ->
      let {
        ds_s6un9 [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Product a_X6tfh -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId]
        ds_s6un9
          = Data.Semigroup.Internal.$fReadProduct1
              @ a_X6tfh $dRead_X6tfj } in
      \ (n_i6tWE :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Product a_X6tfh)
          (ds_s6un9
             n_i6tWE
             @ (Product a_X6tfh)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Product a_X6tfh)))

-- RHS size: {terms: 5, types: 7, coercions: 11, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct_$creadListPrec
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Product a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X6tff) ($dRead_X6tfh [Occ=Once] :: Read a_X6tff) ->
                 list
                   @ (Product a_X6tff)
                   ((Data.Semigroup.Internal.$fReadProduct1 @ a_X6tff $dRead_X6tfh)
                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Product
                                              a_X6tff>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Product a_X6tff>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> forall b.
                                   (Product a_X6tff -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                      (Product a_X6tff) :: *)))}]
Data.Semigroup.Internal.$fReadProduct_$creadListPrec
  = \ (@ a_X6tff) ($dRead_X6tfh :: Read a_X6tff) ->
      list
        @ (Product a_X6tff)
        ((Data.Semigroup.Internal.$fReadProduct1 @ a_X6tff $dRead_X6tfh)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Product
                                   a_X6tff>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Product a_X6tff>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Product a_X6tff -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Product a_X6tff) :: *)))

-- RHS size: {terms: 8, types: 16, coercions: 19, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct_$creadList
  :: forall a. Read a => ReadS [Product a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X6tfg) ($dRead_X6tfi [Occ=Once] :: Read a_X6tfg) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Product a_X6tfg]
                   (((((list
                          @ (Product a_X6tfg)
                          ((Data.Semigroup.Internal.$fReadProduct1 @ a_X6tfg $dRead_X6tfi)
                           `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Product
                                                     a_X6tfg>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Product a_X6tfg>_R)
                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                       -> forall b.
                                          (Product a_X6tfg -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                             (Product a_X6tfg) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Product a_X6tfg]>_R
                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                     [Product a_X6tfg] :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                       -> Text.ParserCombinators.ReadP.ReadP
                                            [Product a_X6tfg] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[Product a_X6tfg]>_R
                             :: (Text.ParserCombinators.ReadP.ReadP [Product a_X6tfg] :: *)
                                ~R# (forall b.
                                     ([Product a_X6tfg] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Product a_X6tfg]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Product a_X6tfg]))}]
Data.Semigroup.Internal.$fReadProduct_$creadList
  = \ (@ a_X6tfg) ($dRead_X6tfi :: Read a_X6tfg) ->
      Text.ParserCombinators.ReadP.run
        @ [Product a_X6tfg]
        (((((list
               @ (Product a_X6tfg)
               ((Data.Semigroup.Internal.$fReadProduct1 @ a_X6tfg $dRead_X6tfi)
                `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Product
                                          a_X6tfg>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Product a_X6tfg>_R)
                        :: (Text.ParserCombinators.ReadPrec.Prec
                            -> forall b.
                               (Product a_X6tfg -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                  (Product a_X6tfg) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Product a_X6tfg]>_R
                    :: (Text.ParserCombinators.ReadPrec.ReadPrec
                          [Product a_X6tfg] :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.Prec
                            -> Text.ParserCombinators.ReadP.ReadP [Product a_X6tfg] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[Product a_X6tfg]>_R
                  :: (Text.ParserCombinators.ReadP.ReadP [Product a_X6tfg] :: *)
                     ~R# (forall b.
                          ([Product a_X6tfg] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Product a_X6tfg]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Product a_X6tfg]))

-- RHS size: {terms: 11, types: 10, coercions: 11, joins: 0/0}
Data.Semigroup.Internal.$fReadProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Read a => Read (Product a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,C(U),A)>m,
 Unf=DFun: \ (@ a_a6r2m) (v_Xcr :: Read a_a6r2m) ->
       GHC.Read.C:Read TYPE: Product a_a6r2m
                       Data.Semigroup.Internal.$fReadProduct_$creadsPrec @ a_a6r2m v_Xcr
                       Data.Semigroup.Internal.$fReadProduct_$creadList @ a_a6r2m v_Xcr
                       (Data.Semigroup.Internal.$fReadProduct1 @ a_a6r2m v_Xcr)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Product
                                                 a_a6r2m>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Product a_a6r2m>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Product a_a6r2m -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                         (Product a_a6r2m) :: *))
                       Data.Semigroup.Internal.$fReadProduct_$creadListPrec
                         @ a_a6r2m v_Xcr]
Data.Semigroup.Internal.$fReadProduct
  = \ (@ a_X6tfe) ($dRead_X6tfg :: Read a_X6tfe) ->
      GHC.Read.C:Read
        @ (Product a_X6tfe)
        (Data.Semigroup.Internal.$fReadProduct_$creadsPrec
           @ a_X6tfe $dRead_X6tfg)
        (Data.Semigroup.Internal.$fReadProduct_$creadList
           @ a_X6tfe $dRead_X6tfg)
        ((Data.Semigroup.Internal.$fReadProduct1 @ a_X6tfe $dRead_X6tfg)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Product
                                   a_X6tfe>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Product a_X6tfe>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Product a_X6tfe -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Product a_X6tfe) :: *)))
        (Data.Semigroup.Internal.$fReadProduct_$creadListPrec
           @ a_X6tfe $dRead_X6tfg)

-- RHS size: {terms: 7, types: 8, coercions: 18, joins: 0/0}
Data.Semigroup.Internal.$fEqProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Eq a => Eq (Product a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2m) (v_XcE :: Eq a_a6r2m) ->
       GHC.Classes.C:Eq TYPE: Product a_a6r2m
                        (== @ a_a6r2m v_XcE)
                        `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                ->_R <Bool>_R
                                :: (a_a6r2m -> a_a6r2m -> Bool :: *)
                                   ~R# (Product a_a6r2m -> Product a_a6r2m -> Bool :: *))
                        (/= @ a_a6r2m v_XcE)
                        `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                ->_R <Bool>_R
                                :: (a_a6r2m -> a_a6r2m -> Bool :: *)
                                   ~R# (Product a_a6r2m -> Product a_a6r2m -> Bool :: *))]
Data.Semigroup.Internal.$fEqProduct
  = \ (@ a_a6t0s) ($dEq_a6t0t :: Eq a_a6t0s) ->
      GHC.Classes.C:Eq
        @ (Product a_a6t0s)
        ((== @ a_a6t0s $dEq_a6t0t)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t0s>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t0s>_R)
                 ->_R <Bool>_R
                 :: (a_a6t0s -> a_a6t0s -> Bool :: *)
                    ~R# (Product a_a6t0s -> Product a_a6t0s -> Bool :: *)))
        ((/= @ a_a6t0s $dEq_a6t0t)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t0s>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t0s>_R)
                 ->_R <Bool>_R
                 :: (a_a6t0s -> a_a6t0s -> Bool :: *)
                    ~R# (Product a_a6t0s -> Product a_a6t0s -> Bool :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fOrdProduct_$cp1Ord
  :: forall a. Ord a => Eq (Product a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6t10) ($dOrd_a6t11 [Occ=Once] :: Ord a_a6t10) ->
                 Data.Semigroup.Internal.$fEqProduct
                   @ a_a6t10 (GHC.Classes.$p1Ord @ a_a6t10 $dOrd_a6t11)}]
Data.Semigroup.Internal.$fOrdProduct_$cp1Ord
  = \ (@ a_a6t10) ($dOrd_a6t11 :: Ord a_a6t10) ->
      Data.Semigroup.Internal.$fEqProduct
        @ a_a6t10 (GHC.Classes.$p1Ord @ a_a6t10 $dOrd_a6t11)

-- RHS size: {terms: 19, types: 14, coercions: 67, joins: 0/0}
Data.Semigroup.Internal.$fOrdProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Ord a => Ord (Product a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2m) (v_XcG :: Ord a_a6r2m) ->
       GHC.Classes.C:Ord TYPE: Product a_a6r2m
                         Data.Semigroup.Internal.$fOrdProduct_$cp1Ord @ a_a6r2m v_XcG
                         (compare @ a_a6r2m v_XcG)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R <Ordering>_R
                                 :: (a_a6r2m -> a_a6r2m -> Ordering :: *)
                                    ~R# (Product a_a6r2m -> Product a_a6r2m -> Ordering :: *))
                         (< @ a_a6r2m v_XcG)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2m -> a_a6r2m -> Bool :: *)
                                    ~R# (Product a_a6r2m -> Product a_a6r2m -> Bool :: *))
                         (<= @ a_a6r2m v_XcG)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2m -> a_a6r2m -> Bool :: *)
                                    ~R# (Product a_a6r2m -> Product a_a6r2m -> Bool :: *))
                         (> @ a_a6r2m v_XcG)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2m -> a_a6r2m -> Bool :: *)
                                    ~R# (Product a_a6r2m -> Product a_a6r2m -> Bool :: *))
                         (>= @ a_a6r2m v_XcG)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2m -> a_a6r2m -> Bool :: *)
                                    ~R# (Product a_a6r2m -> Product a_a6r2m -> Bool :: *))
                         (max @ a_a6r2m v_XcG)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 :: (a_a6r2m -> a_a6r2m -> a_a6r2m :: *)
                                    ~R# (Product a_a6r2m
                                         -> Product a_a6r2m -> Product a_a6r2m :: *))
                         (min @ a_a6r2m v_XcG)
                         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6r2m>_R)
                                 :: (a_a6r2m -> a_a6r2m -> a_a6r2m :: *)
                                    ~R# (Product a_a6r2m
                                         -> Product a_a6r2m -> Product a_a6r2m :: *))]
Data.Semigroup.Internal.$fOrdProduct
  = \ (@ a_a6t10) ($dOrd_a6t11 :: Ord a_a6t10) ->
      GHC.Classes.C:Ord
        @ (Product a_a6t10)
        (Data.Semigroup.Internal.$fOrdProduct_$cp1Ord
           @ a_a6t10 $dOrd_a6t11)
        ((compare @ a_a6t10 $dOrd_a6t11)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R <Ordering>_R
                 :: (a_a6t10 -> a_a6t10 -> Ordering :: *)
                    ~R# (Product a_a6t10 -> Product a_a6t10 -> Ordering :: *)))
        ((< @ a_a6t10 $dOrd_a6t11)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R <Bool>_R
                 :: (a_a6t10 -> a_a6t10 -> Bool :: *)
                    ~R# (Product a_a6t10 -> Product a_a6t10 -> Bool :: *)))
        ((<= @ a_a6t10 $dOrd_a6t11)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R <Bool>_R
                 :: (a_a6t10 -> a_a6t10 -> Bool :: *)
                    ~R# (Product a_a6t10 -> Product a_a6t10 -> Bool :: *)))
        ((> @ a_a6t10 $dOrd_a6t11)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R <Bool>_R
                 :: (a_a6t10 -> a_a6t10 -> Bool :: *)
                    ~R# (Product a_a6t10 -> Product a_a6t10 -> Bool :: *)))
        ((>= @ a_a6t10 $dOrd_a6t11)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R <Bool>_R
                 :: (a_a6t10 -> a_a6t10 -> Bool :: *)
                    ~R# (Product a_a6t10 -> Product a_a6t10 -> Bool :: *)))
        ((max @ a_a6t10 $dOrd_a6t11)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 :: (a_a6t10 -> a_a6t10 -> a_a6t10 :: *)
                    ~R# (Product a_a6t10 -> Product a_a6t10 -> Product a_a6t10 :: *)))
        ((min @ a_a6t10 $dOrd_a6t11)
         `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a_a6t10>_R)
                 :: (a_a6t10 -> a_a6t10 -> a_a6t10 :: *)
                    ~R# (Product a_a6t10 -> Product a_a6t10 -> Product a_a6t10 :: *)))

-- RHS size: {terms: 17, types: 13, coercions: 59, joins: 0/0}
Data.Semigroup.Internal.$fNumSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Num a => Num (Sum a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2n) (v_XcO :: Num a_a6r2n) ->
       GHC.Num.C:Num TYPE: Sum a_a6r2n
                     (+ @ a_a6r2n v_XcO)
                     `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             :: (a_a6r2n -> a_a6r2n -> a_a6r2n :: *)
                                ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Sum a_a6r2n :: *))
                     (- @ a_a6r2n v_XcO)
                     `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             :: (a_a6r2n -> a_a6r2n -> a_a6r2n :: *)
                                ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Sum a_a6r2n :: *))
                     (* @ a_a6r2n v_XcO)
                     `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             :: (a_a6r2n -> a_a6r2n -> a_a6r2n :: *)
                                ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Sum a_a6r2n :: *))
                     (negate @ a_a6r2n v_XcO)
                     `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             :: (a_a6r2n -> a_a6r2n :: *) ~R# (Sum a_a6r2n -> Sum a_a6r2n :: *))
                     (abs @ a_a6r2n v_XcO)
                     `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             :: (a_a6r2n -> a_a6r2n :: *) ~R# (Sum a_a6r2n -> Sum a_a6r2n :: *))
                     (signum @ a_a6r2n v_XcO)
                     `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             :: (a_a6r2n -> a_a6r2n :: *) ~R# (Sum a_a6r2n -> Sum a_a6r2n :: *))
                     (fromInteger @ a_a6r2n v_XcO)
                     `cast` (<Integer>_R
                             ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                             :: (Integer -> a_a6r2n :: *) ~R# (Integer -> Sum a_a6r2n :: *))]
Data.Semigroup.Internal.$fNumSum
  = \ (@ a_a6sYX) ($dNum_a6sYY :: Num a_a6sYX) ->
      GHC.Num.C:Num
        @ (Sum a_a6sYX)
        ((+ @ a_a6sYX $dNum_a6sYY)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 :: (a_a6sYX -> a_a6sYX -> a_a6sYX :: *)
                    ~R# (Sum a_a6sYX -> Sum a_a6sYX -> Sum a_a6sYX :: *)))
        ((- @ a_a6sYX $dNum_a6sYY)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 :: (a_a6sYX -> a_a6sYX -> a_a6sYX :: *)
                    ~R# (Sum a_a6sYX -> Sum a_a6sYX -> Sum a_a6sYX :: *)))
        ((* @ a_a6sYX $dNum_a6sYY)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 :: (a_a6sYX -> a_a6sYX -> a_a6sYX :: *)
                    ~R# (Sum a_a6sYX -> Sum a_a6sYX -> Sum a_a6sYX :: *)))
        ((negate @ a_a6sYX $dNum_a6sYY)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 :: (a_a6sYX -> a_a6sYX :: *)
                    ~R# (Sum a_a6sYX -> Sum a_a6sYX :: *)))
        ((abs @ a_a6sYX $dNum_a6sYY)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 :: (a_a6sYX -> a_a6sYX :: *)
                    ~R# (Sum a_a6sYX -> Sum a_a6sYX :: *)))
        ((signum @ a_a6sYX $dNum_a6sYY)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 :: (a_a6sYX -> a_a6sYX :: *)
                    ~R# (Sum a_a6sYX -> Sum a_a6sYX :: *)))
        ((fromInteger @ a_a6sYX $dNum_a6sYY)
         `cast` (<Integer>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sYX>_R)
                 :: (Integer -> a_a6sYX :: *) ~R# (Integer -> Sum a_a6sYX :: *)))

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Sum1
  :: forall a. Rep1 Sum a -> Rep1 Sum a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6sYy) (ds_d6tYf [Occ=Once] :: Rep1 Sum a_a6sYy) ->
                 ds_d6tYf}]
Data.Semigroup.Internal.$fGeneric1Sum1
  = \ (@ a_a6sYy) (ds_d6tYf :: Rep1 Sum a_a6sYy) -> ds_d6tYf

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Sum2 :: forall a. Sum a -> Sum a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6sY9) (x_a6ss3 [Occ=Once] :: Sum a_a6sY9) ->
                 x_a6ss3}]
Data.Semigroup.Internal.$fGeneric1Sum2
  = \ (@ a_a6sY9) (x_a6ss3 :: Sum a_a6sY9) -> x_a6ss3

-- RHS size: {terms: 3, types: 3, coercions: 163, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Sum [InlPrag=NOUSERINLINE CONLIKE]
  :: Generic1 Sum
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Generics.C:Generic1 TYPE: *
                               TYPE: Sum
                               Data.Semigroup.Internal.$fGeneric1Sum2
                               `cast` (forall (a :: <*>_N).
                                       <Sum a>_R
                                       ->_R Data.Semigroup.Internal.N:Sum[0]
                                                (Sym (GHC.Generics.N:Par1[0]
                                                          <a>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                             <*>_N
                                                                             <S>_P
                                                                             <'MetaSel
                                                                                ('Just "getSum")
                                                                                'NoSourceUnpackedness
                                                                                'NoSourceStrictness
                                                                                'DecidedLazy>_P
                                                                             <Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                   <*>_N
                                                                                                   <C>_P
                                                                                                   <'MetaCons
                                                                                                      "Sum"
                                                                                                      'PrefixI
                                                                                                      'True>_P
                                                                                                   <M1
                                                                                                      S
                                                                                                      ('MetaSel
                                                                                                         ('Just
                                                                                                            "getSum")
                                                                                                         'NoSourceUnpackedness
                                                                                                         'NoSourceStrictness
                                                                                                         'DecidedLazy)
                                                                                                      Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                           <*>_N
                                                                                                                           <D>_P
                                                                                                                           <'MetaData
                                                                                                                              "Sum"
                                                                                                                              "Data.Semigroup.Internal"
                                                                                                                              "base"
                                                                                                                              'True>_P
                                                                                                                           <M1
                                                                                                                              C
                                                                                                                              ('MetaCons
                                                                                                                                 "Sum"
                                                                                                                                 'PrefixI
                                                                                                                                 'True)
                                                                                                                              (M1
                                                                                                                                 S
                                                                                                                                 ('MetaSel
                                                                                                                                    ('Just
                                                                                                                                       "getSum")
                                                                                                                                    'NoSourceUnpackedness
                                                                                                                                    'NoSourceStrictness
                                                                                                                                    'DecidedLazy)
                                                                                                                                 Par1)>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Sum[0]))))) <a>_N)
                                       :: (forall a. Sum a -> Sum a :: *)
                                          ~R# (forall a. Sum a -> Rep1 Sum a :: *))
                               Data.Semigroup.Internal.$fGeneric1Sum1
                               `cast` (forall (a :: <*>_N).
                                       <Rep1 Sum a>_R
                                       ->_R (Sub (Data.Semigroup.Internal.Rep1_Sum[0]) ; (GHC.Generics.N:M1[0]
                                                                                              <*>_N
                                                                                              <D>_P
                                                                                              <'MetaData
                                                                                                 "Sum"
                                                                                                 "Data.Semigroup.Internal"
                                                                                                 "base"
                                                                                                 'True>_P
                                                                                              <M1
                                                                                                 C
                                                                                                 ('MetaCons
                                                                                                    "Sum"
                                                                                                    'PrefixI
                                                                                                    'True)
                                                                                                 (M1
                                                                                                    S
                                                                                                    ('MetaSel
                                                                                                       ('Just
                                                                                                          "getSum")
                                                                                                       'NoSourceUnpackedness
                                                                                                       'NoSourceStrictness
                                                                                                       'DecidedLazy)
                                                                                                    Par1)>_R ; (GHC.Generics.N:M1[0]
                                                                                                                    <*>_N
                                                                                                                    <C>_P
                                                                                                                    <'MetaCons
                                                                                                                       "Sum"
                                                                                                                       'PrefixI
                                                                                                                       'True>_P
                                                                                                                    <M1
                                                                                                                       S
                                                                                                                       ('MetaSel
                                                                                                                          ('Just
                                                                                                                             "getSum")
                                                                                                                          'NoSourceUnpackedness
                                                                                                                          'NoSourceStrictness
                                                                                                                          'DecidedLazy)
                                                                                                                       Par1>_R ; GHC.Generics.N:M1[0]
                                                                                                                                     <*>_N
                                                                                                                                     <S>_P
                                                                                                                                     <'MetaSel
                                                                                                                                        ('Just
                                                                                                                                           "getSum")
                                                                                                                                        'NoSourceUnpackedness
                                                                                                                                        'NoSourceStrictness
                                                                                                                                        'DecidedLazy>_P
                                                                                                                                     <Par1>_R))) <a>_N ; GHC.Generics.N:Par1[0]
                                                                                                                                                             (Sym (Data.Semigroup.Internal.N:Sum[0]
                                                                                                                                                                       <a>_R))
                                       :: (forall a. Rep1 Sum a -> Rep1 Sum a :: *)
                                          ~R# (forall a. Rep1 Sum a -> Sum a :: *))]
Data.Semigroup.Internal.$fGeneric1Sum
  = GHC.Generics.C:Generic1
      @ *
      @ Sum
      (Data.Semigroup.Internal.$fGeneric1Sum2
       `cast` (forall (a :: <*>_N).
               <Sum a>_R
               ->_R Data.Semigroup.Internal.N:Sum[0]
                        (Sym (GHC.Generics.N:Par1[0] <a>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                        <*>_N
                                                                        <S>_P
                                                                        <'MetaSel
                                                                           ('Just "getSum")
                                                                           'NoSourceUnpackedness
                                                                           'NoSourceStrictness
                                                                           'DecidedLazy>_P
                                                                        <Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                              <*>_N
                                                                                              <C>_P
                                                                                              <'MetaCons
                                                                                                 "Sum"
                                                                                                 'PrefixI
                                                                                                 'True>_P
                                                                                              <M1
                                                                                                 S
                                                                                                 ('MetaSel
                                                                                                    ('Just
                                                                                                       "getSum")
                                                                                                    'NoSourceUnpackedness
                                                                                                    'NoSourceStrictness
                                                                                                    'DecidedLazy)
                                                                                                 Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                      <*>_N
                                                                                                                      <D>_P
                                                                                                                      <'MetaData
                                                                                                                         "Sum"
                                                                                                                         "Data.Semigroup.Internal"
                                                                                                                         "base"
                                                                                                                         'True>_P
                                                                                                                      <M1
                                                                                                                         C
                                                                                                                         ('MetaCons
                                                                                                                            "Sum"
                                                                                                                            'PrefixI
                                                                                                                            'True)
                                                                                                                         (M1
                                                                                                                            S
                                                                                                                            ('MetaSel
                                                                                                                               ('Just
                                                                                                                                  "getSum")
                                                                                                                               'NoSourceUnpackedness
                                                                                                                               'NoSourceStrictness
                                                                                                                               'DecidedLazy)
                                                                                                                            Par1)>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Sum[0]))))) <a>_N)
               :: (forall a. Sum a -> Sum a :: *)
                  ~R# (forall a. Sum a -> Rep1 Sum a :: *)))
      (Data.Semigroup.Internal.$fGeneric1Sum1
       `cast` (forall (a :: <*>_N).
               <Rep1 Sum a>_R
               ->_R (Sub (Data.Semigroup.Internal.Rep1_Sum[0]) ; (GHC.Generics.N:M1[0]
                                                                      <*>_N
                                                                      <D>_P
                                                                      <'MetaData
                                                                         "Sum"
                                                                         "Data.Semigroup.Internal"
                                                                         "base"
                                                                         'True>_P
                                                                      <M1
                                                                         C
                                                                         ('MetaCons
                                                                            "Sum" 'PrefixI 'True)
                                                                         (M1
                                                                            S
                                                                            ('MetaSel
                                                                               ('Just "getSum")
                                                                               'NoSourceUnpackedness
                                                                               'NoSourceStrictness
                                                                               'DecidedLazy)
                                                                            Par1)>_R ; (GHC.Generics.N:M1[0]
                                                                                            <*>_N
                                                                                            <C>_P
                                                                                            <'MetaCons
                                                                                               "Sum"
                                                                                               'PrefixI
                                                                                               'True>_P
                                                                                            <M1
                                                                                               S
                                                                                               ('MetaSel
                                                                                                  ('Just
                                                                                                     "getSum")
                                                                                                  'NoSourceUnpackedness
                                                                                                  'NoSourceStrictness
                                                                                                  'DecidedLazy)
                                                                                               Par1>_R ; GHC.Generics.N:M1[0]
                                                                                                             <*>_N
                                                                                                             <S>_P
                                                                                                             <'MetaSel
                                                                                                                ('Just
                                                                                                                   "getSum")
                                                                                                                'NoSourceUnpackedness
                                                                                                                'NoSourceStrictness
                                                                                                                'DecidedLazy>_P
                                                                                                             <Par1>_R))) <a>_N ; GHC.Generics.N:Par1[0]
                                                                                                                                     (Sym (Data.Semigroup.Internal.N:Sum[0]
                                                                                                                                               <a>_R))
               :: (forall a. Rep1 Sum a -> Rep1 Sum a :: *)
                  ~R# (forall a. Rep1 Sum a -> Sum a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericSum1
  :: forall a x. Rep (Sum a) x -> Rep (Sum a) x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6sX8)
                 (@ x_a6sXE)
                 (ds_d6tY9 [Occ=Once] :: Rep (Sum a_a6sX8) x_a6sXE) ->
                 ds_d6tY9}]
Data.Semigroup.Internal.$fGenericSum1
  = \ (@ a_a6sX8)
      (@ x_a6sXE)
      (ds_d6tY9 :: Rep (Sum a_a6sX8) x_a6sXE) ->
      ds_d6tY9

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericSum2 :: forall a x. Sum a -> Sum a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_X6ta9)
                 (@ x_a6sXc)
                 (x1_a6srZ [Occ=Once] :: Sum a_X6ta9) ->
                 x1_a6srZ}]
Data.Semigroup.Internal.$fGenericSum2
  = \ (@ a_X6ta9) (@ x_a6sXc) (x1_a6srZ :: Sum a_X6ta9) -> x1_a6srZ

-- RHS size: {terms: 4, types: 6, coercions: 199, joins: 0/0}
Data.Semigroup.Internal.$fGenericSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Generic (Sum a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ a_a6r2n) ->
       GHC.Generics.C:Generic TYPE: Sum a_a6r2n
                              (Data.Semigroup.Internal.$fGenericSum2 @ a_a6r2n)
                              `cast` (forall (x :: <*>_N).
                                      <Sum a_a6r2n>_R
                                      ->_R Data.Semigroup.Internal.N:Sum[0]
                                               (Sym (GHC.Generics.N:K1[0]
                                                         <*>_N
                                                         <R>_P
                                                         <a_a6r2n>_R
                                                         <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                            <*>_N
                                                                            <S>_P
                                                                            <'MetaSel
                                                                               ('Just "getSum")
                                                                               'NoSourceUnpackedness
                                                                               'NoSourceStrictness
                                                                               'DecidedLazy>_P
                                                                            <K1
                                                                               R
                                                                               a_a6r2n>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <C>_P
                                                                                                       <'MetaCons
                                                                                                          "Sum"
                                                                                                          'PrefixI
                                                                                                          'True>_P
                                                                                                       <M1
                                                                                                          S
                                                                                                          ('MetaSel
                                                                                                             ('Just
                                                                                                                "getSum")
                                                                                                             'NoSourceUnpackedness
                                                                                                             'NoSourceStrictness
                                                                                                             'DecidedLazy)
                                                                                                          (K1
                                                                                                             R
                                                                                                             a_a6r2n)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                      <*>_N
                                                                                                                                      <D>_P
                                                                                                                                      <'MetaData
                                                                                                                                         "Sum"
                                                                                                                                         "Data.Semigroup.Internal"
                                                                                                                                         "base"
                                                                                                                                         'True>_P
                                                                                                                                      <M1
                                                                                                                                         C
                                                                                                                                         ('MetaCons
                                                                                                                                            "Sum"
                                                                                                                                            'PrefixI
                                                                                                                                            'True)
                                                                                                                                         (M1
                                                                                                                                            S
                                                                                                                                            ('MetaSel
                                                                                                                                               ('Just
                                                                                                                                                  "getSum")
                                                                                                                                               'NoSourceUnpackedness
                                                                                                                                               'NoSourceStrictness
                                                                                                                                               'DecidedLazy)
                                                                                                                                            (K1
                                                                                                                                               R
                                                                                                                                               a_a6r2n))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Sum[0]
                                                                                                                                                                             <a_a6r2n>_N))))) <x>_N)
                                      :: (forall x. Sum a_a6r2n -> Sum a_a6r2n :: *)
                                         ~R# (forall x. Sum a_a6r2n -> Rep (Sum a_a6r2n) x :: *))
                              (Data.Semigroup.Internal.$fGenericSum1 @ a_a6r2n)
                              `cast` (forall (x :: <*>_N).
                                      <Rep (Sum a_a6r2n) x>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Sum[0]
                                                    (Sym (GHC.Generics.N:K1[0]
                                                              <*>_N
                                                              <R>_P
                                                              <a_a6r2n>_R
                                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                 <*>_N
                                                                                 <S>_P
                                                                                 <'MetaSel
                                                                                    ('Just "getSum")
                                                                                    'NoSourceUnpackedness
                                                                                    'NoSourceStrictness
                                                                                    'DecidedLazy>_P
                                                                                 <K1
                                                                                    R
                                                                                    a_a6r2n>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <C>_P
                                                                                                            <'MetaCons
                                                                                                               "Sum"
                                                                                                               'PrefixI
                                                                                                               'True>_P
                                                                                                            <M1
                                                                                                               S
                                                                                                               ('MetaSel
                                                                                                                  ('Just
                                                                                                                     "getSum")
                                                                                                                  'NoSourceUnpackedness
                                                                                                                  'NoSourceStrictness
                                                                                                                  'DecidedLazy)
                                                                                                               (K1
                                                                                                                  R
                                                                                                                  a_a6r2n)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <D>_P
                                                                                                                                           <'MetaData
                                                                                                                                              "Sum"
                                                                                                                                              "Data.Semigroup.Internal"
                                                                                                                                              "base"
                                                                                                                                              'True>_P
                                                                                                                                           <M1
                                                                                                                                              C
                                                                                                                                              ('MetaCons
                                                                                                                                                 "Sum"
                                                                                                                                                 'PrefixI
                                                                                                                                                 'True)
                                                                                                                                              (M1
                                                                                                                                                 S
                                                                                                                                                 ('MetaSel
                                                                                                                                                    ('Just
                                                                                                                                                       "getSum")
                                                                                                                                                    'NoSourceUnpackedness
                                                                                                                                                    'NoSourceStrictness
                                                                                                                                                    'DecidedLazy)
                                                                                                                                                 (K1
                                                                                                                                                    R
                                                                                                                                                    a_a6r2n))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Sum[0]
                                                                                                                                                                                  <a_a6r2n>_N))))) <x>_N))
                                      :: (forall x. Rep (Sum a_a6r2n) x -> Rep (Sum a_a6r2n) x :: *)
                                         ~R# (forall x. Rep (Sum a_a6r2n) x -> Sum a_a6r2n :: *))]
Data.Semigroup.Internal.$fGenericSum
  = \ (@ a_X6tae) ->
      GHC.Generics.C:Generic
        @ (Sum a_X6tae)
        ((Data.Semigroup.Internal.$fGenericSum2 @ a_X6tae)
         `cast` (forall (x :: <*>_N).
                 <Sum a_X6tae>_R
                 ->_R Data.Semigroup.Internal.N:Sum[0]
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N <R>_P <a_X6tae>_R <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                               <*>_N
                                                                               <S>_P
                                                                               <'MetaSel
                                                                                  ('Just "getSum")
                                                                                  'NoSourceUnpackedness
                                                                                  'NoSourceStrictness
                                                                                  'DecidedLazy>_P
                                                                               <K1
                                                                                  R
                                                                                  a_X6tae>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                          <*>_N
                                                                                                          <C>_P
                                                                                                          <'MetaCons
                                                                                                             "Sum"
                                                                                                             'PrefixI
                                                                                                             'True>_P
                                                                                                          <M1
                                                                                                             S
                                                                                                             ('MetaSel
                                                                                                                ('Just
                                                                                                                   "getSum")
                                                                                                                'NoSourceUnpackedness
                                                                                                                'NoSourceStrictness
                                                                                                                'DecidedLazy)
                                                                                                             (K1
                                                                                                                R
                                                                                                                a_X6tae)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                         <*>_N
                                                                                                                                         <D>_P
                                                                                                                                         <'MetaData
                                                                                                                                            "Sum"
                                                                                                                                            "Data.Semigroup.Internal"
                                                                                                                                            "base"
                                                                                                                                            'True>_P
                                                                                                                                         <M1
                                                                                                                                            C
                                                                                                                                            ('MetaCons
                                                                                                                                               "Sum"
                                                                                                                                               'PrefixI
                                                                                                                                               'True)
                                                                                                                                            (M1
                                                                                                                                               S
                                                                                                                                               ('MetaSel
                                                                                                                                                  ('Just
                                                                                                                                                     "getSum")
                                                                                                                                                  'NoSourceUnpackedness
                                                                                                                                                  'NoSourceStrictness
                                                                                                                                                  'DecidedLazy)
                                                                                                                                               (K1
                                                                                                                                                  R
                                                                                                                                                  a_X6tae))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Sum[0]
                                                                                                                                                                                <a_X6tae>_N))))) <x>_N)
                 :: (forall x. Sum a_X6tae -> Sum a_X6tae :: *)
                    ~R# (forall x. Sum a_X6tae -> Rep (Sum a_X6tae) x :: *)))
        ((Data.Semigroup.Internal.$fGenericSum1 @ a_X6tae)
         `cast` (forall (x :: <*>_N).
                 <Rep (Sum a_X6tae) x>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0]
                               (Sym (GHC.Generics.N:K1[0]
                                         <*>_N <R>_P <a_X6tae>_R <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                    <*>_N
                                                                                    <S>_P
                                                                                    <'MetaSel
                                                                                       ('Just
                                                                                          "getSum")
                                                                                       'NoSourceUnpackedness
                                                                                       'NoSourceStrictness
                                                                                       'DecidedLazy>_P
                                                                                    <K1
                                                                                       R
                                                                                       a_X6tae>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                               <*>_N
                                                                                                               <C>_P
                                                                                                               <'MetaCons
                                                                                                                  "Sum"
                                                                                                                  'PrefixI
                                                                                                                  'True>_P
                                                                                                               <M1
                                                                                                                  S
                                                                                                                  ('MetaSel
                                                                                                                     ('Just
                                                                                                                        "getSum")
                                                                                                                     'NoSourceUnpackedness
                                                                                                                     'NoSourceStrictness
                                                                                                                     'DecidedLazy)
                                                                                                                  (K1
                                                                                                                     R
                                                                                                                     a_X6tae)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                              <*>_N
                                                                                                                                              <D>_P
                                                                                                                                              <'MetaData
                                                                                                                                                 "Sum"
                                                                                                                                                 "Data.Semigroup.Internal"
                                                                                                                                                 "base"
                                                                                                                                                 'True>_P
                                                                                                                                              <M1
                                                                                                                                                 C
                                                                                                                                                 ('MetaCons
                                                                                                                                                    "Sum"
                                                                                                                                                    'PrefixI
                                                                                                                                                    'True)
                                                                                                                                                 (M1
                                                                                                                                                    S
                                                                                                                                                    ('MetaSel
                                                                                                                                                       ('Just
                                                                                                                                                          "getSum")
                                                                                                                                                       'NoSourceUnpackedness
                                                                                                                                                       'NoSourceStrictness
                                                                                                                                                       'DecidedLazy)
                                                                                                                                                    (K1
                                                                                                                                                       R
                                                                                                                                                       a_X6tae))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Sum[0]
                                                                                                                                                                                     <a_X6tae>_N))))) <x>_N))
                 :: (forall x. Rep (Sum a_X6tae) x -> Rep (Sum a_X6tae) x :: *)
                    ~R# (forall x. Rep (Sum a_X6tae) x -> Sum a_X6tae :: *)))

-- RHS size: {terms: 7, types: 8, coercions: 6, joins: 0/0}
Data.Semigroup.Internal.$fBoundedSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Bounded a => Bounded (Sum a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2n) (v_Xdb :: Bounded a_a6r2n) ->
       GHC.Enum.C:Bounded TYPE: Sum a_a6r2n
                          (minBound @ a_a6r2n v_Xdb)
                          `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                  :: (a_a6r2n :: *) ~R# (Sum a_a6r2n :: *))
                          (maxBound @ a_a6r2n v_Xdb)
                          `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                  :: (a_a6r2n :: *) ~R# (Sum a_a6r2n :: *))]
Data.Semigroup.Internal.$fBoundedSum
  = \ (@ a_a6sWQ) ($dBounded_a6sWR :: Bounded a_a6sWQ) ->
      GHC.Enum.C:Bounded
        @ (Sum a_a6sWQ)
        ((minBound @ a_a6sWQ $dBounded_a6sWR)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sWQ>_R)
                 :: (a_a6sWQ :: *) ~R# (Sum a_a6sWQ :: *)))
        ((maxBound @ a_a6sWQ $dBounded_a6sWR)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sWQ>_R)
                 :: (a_a6sWQ :: *) ~R# (Sum a_a6sWQ :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowSum2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fShowSum2 = "Sum {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowSum1 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Semigroup.Internal.$fShowSum1 = "getSum = "#

-- RHS size: {terms: 37, types: 15, coercions: 2, joins: 0/1}
Data.Semigroup.Internal.$w$cshowsPrec5 [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int# -> Sum a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 331 120}]
Data.Semigroup.Internal.$w$cshowsPrec5
  = \ (@ a_s6uM4)
      (w_s6uM5 :: Show a_s6uM4)
      (ww_s6uMa :: Int#)
      (w1_s6uM7 :: Sum a_s6uM4) ->
      let {
        f_s6un5 [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f_s6un5
          = showsPrec
              @ a_s6uM4
              w_s6uM5
              Data.Semigroup.Internal.$fShowAlt1
              (w1_s6uM7
               `cast` (Data.Semigroup.Internal.N:Sum[0] <a_s6uM4>_R
                       :: (Sum a_s6uM4 :: *) ~R# (a_s6uM4 :: *))) } in
      case >=# ww_s6uMa 11# of {
        __DEFAULT ->
          \ (x_X6uaP :: String) ->
            unpackAppendCString#
              Data.Semigroup.Internal.$fShowSum2
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowSum1
                 (f_s6un5
                    (unpackAppendCString#
                       Data.Semigroup.Internal.$fReadAll5 x_X6uaP)));
        1# ->
          \ (x_i6tXd :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowSum2
                 (unpackAppendCString#
                    Data.Semigroup.Internal.$fShowSum1
                    (f_s6un5
                       (unpackAppendCString#
                          Data.Semigroup.Internal.$fReadAll5
                          (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i6tXd)))))
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowSum_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int -> Sum a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s6uM4)
                 (w_s6uM5 [Occ=Once] :: Show a_s6uM4)
                 (w1_s6uM6 [Occ=Once!] :: Int)
                 (w2_s6uM7 [Occ=Once] :: Sum a_s6uM4) ->
                 case w1_s6uM6 of { I# ww1_s6uMa [Occ=Once] ->
                 Data.Semigroup.Internal.$w$cshowsPrec5
                   @ a_s6uM4 w_s6uM5 ww1_s6uMa w2_s6uM7
                 }}]
Data.Semigroup.Internal.$fShowSum_$cshowsPrec
  = \ (@ a_s6uM4)
      (w_s6uM5 :: Show a_s6uM4)
      (w1_s6uM6 :: Int)
      (w2_s6uM7 :: Sum a_s6uM4) ->
      case w1_s6uM6 of { I# ww1_s6uMa ->
      Data.Semigroup.Internal.$w$cshowsPrec5
        @ a_s6uM4 w_s6uM5 ww1_s6uMa w2_s6uM7
      }

-- RHS size: {terms: 12, types: 7, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fShowSum_$cshow
  :: forall a. Show a => Sum a -> String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 110 0}]
Data.Semigroup.Internal.$fShowSum_$cshow
  = \ (@ a_a6sWl)
      ($dShow_a6sWm :: Show a_a6sWl)
      (x_i6tXp :: Sum a_a6sWl) ->
      unpackAppendCString#
        Data.Semigroup.Internal.$fShowSum2
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowSum1
           (showsPrec
              @ a_a6sWl
              $dShow_a6sWm
              Data.Semigroup.Internal.$fShowAlt1
              (x_i6tXp
               `cast` (Data.Semigroup.Internal.N:Sum[0] <a_a6sWl>_R
                       :: (Sum a_a6sWl :: *) ~R# (a_a6sWl :: *)))
              Data.Semigroup.Internal.$fReadAll4))

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowSum_$cshowList
  :: forall a. Show a => [Sum a] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6sWl)
                 ($dShow_a6sWm [Occ=Once] :: Show a_a6sWl)
                 (ls_i6tXs [Occ=Once] :: [Sum a_a6sWl])
                 (s_i6tXt [Occ=Once] :: String) ->
                 showList__
                   @ (Sum a_a6sWl)
                   (Data.Semigroup.Internal.$fShowSum_$cshowsPrec
                      @ a_a6sWl $dShow_a6sWm Data.Semigroup.Internal.$fShowAlt1)
                   ls_i6tXs
                   s_i6tXt}]
Data.Semigroup.Internal.$fShowSum_$cshowList
  = \ (@ a_a6sWl)
      ($dShow_a6sWm :: Show a_a6sWl)
      (ls_i6tXs :: [Sum a_a6sWl])
      (s_i6tXt :: String) ->
      showList__
        @ (Sum a_a6sWl)
        (\ (w_s6uM7 :: Sum a_a6sWl) ->
           Data.Semigroup.Internal.$w$cshowsPrec5
             @ a_a6sWl $dShow_a6sWm 0# w_s6uM7)
        ls_i6tXs
        s_i6tXt

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Sum a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>m,
 Unf=DFun: \ (@ a_a6r2n) (v_Xdd :: Show a_a6r2n) ->
       GHC.Show.C:Show TYPE: Sum a_a6r2n
                       Data.Semigroup.Internal.$fShowSum_$cshowsPrec @ a_a6r2n v_Xdd
                       Data.Semigroup.Internal.$fShowSum_$cshow @ a_a6r2n v_Xdd
                       Data.Semigroup.Internal.$fShowSum_$cshowList @ a_a6r2n v_Xdd]
Data.Semigroup.Internal.$fShowSum
  = \ (@ a_a6sWl) ($dShow_a6sWm :: Show a_a6sWl) ->
      GHC.Show.C:Show
        @ (Sum a_a6sWl)
        (Data.Semigroup.Internal.$fShowSum_$cshowsPrec
           @ a_a6sWl $dShow_a6sWm)
        (Data.Semigroup.Internal.$fShowSum_$cshow @ a_a6sWl $dShow_a6sWm)
        (Data.Semigroup.Internal.$fShowSum_$cshowList
           @ a_a6sWl $dShow_a6sWm)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadSum5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadSum5 = "Sum"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadSum4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadSum4
  = unpackCString# Data.Semigroup.Internal.$fReadSum5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadSum_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadSum_lexeme
  = Text.Read.Lex.Ident Data.Semigroup.Internal.$fReadSum4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadSum3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadSum3 = "getSum"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadSum2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadSum2
  = unpackCString# Data.Semigroup.Internal.$fReadSum3

-- RHS size: {terms: 51, types: 60, coercions: 23, joins: 0/2}
Data.Semigroup.Internal.$fReadSum1
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Sum a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 391 60}]
Data.Semigroup.Internal.$fReadSum1
  = \ (@ a_a6sVw) ($dRead_a6sVx :: Read a_a6sVw) ->
      GHC.Read.list3
        @ (Sum a_a6sVw)
        (let {
           lvl12_s6uqa :: Text.ParserCombinators.ReadP.ReadP a_a6sVw
           [LclId]
           lvl12_s6uqa
             = ((readPrec @ a_a6sVw $dRead_a6sVx)
                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a6sVw>_R
                        :: (Text.ParserCombinators.ReadPrec.ReadPrec a_a6sVw :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.Prec
                                -> Text.ParserCombinators.ReadP.ReadP a_a6sVw :: *)))
                 Text.ParserCombinators.ReadPrec.minPrec } in
         let {
           ds_s6umR [Dmd=<L,C(C1(U))>]
             :: Text.ParserCombinators.ReadPrec.Prec
                -> Text.ParserCombinators.ReadP.ReadP a_a6sVw
           [LclId,
            Arity=1,
            Str=<L,A>,
            Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                    WorkFree=True, Expandable=True,
                    Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                    Tmpl= \ _ [Occ=Dead] -> lvl12_s6uqa}]
           ds_s6umR = \ _ [Occ=Dead] -> lvl12_s6uqa } in
         (\ (c_i6ua8 :: Text.ParserCombinators.ReadPrec.Prec)
            (@ b_i6u9v)
            (eta_B1
               :: Sum a_a6sVw -> Text.ParserCombinators.ReadP.P b_i6u9v) ->
            case c_i6ua8 of { I# x_i6uab ->
            case <=# x_i6uab 11# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_i6u9v;
              1# ->
                case Text.Read.Lex.$wexpect
                       Data.Semigroup.Internal.$fReadSum_lexeme
                       @ b_i6u9v
                       (\ _ [Occ=Dead, OS=OneShot] ->
                          case Text.Read.Lex.$wexpect
                                 Data.Semigroup.Internal.$fReadAll_lexeme
                                 @ b_i6u9v
                                 (\ _ [Occ=Dead, OS=OneShot] ->
                                    ((((readField
                                          @ a_a6sVw
                                          Data.Semigroup.Internal.$fReadSum2
                                          (ds_s6umR
                                           `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <a_a6sVw>_R)
                                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            a_a6sVw :: *)
                                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                             a_a6sVw :: *))))
                                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <a_a6sVw>_R
                                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                                     a_a6sVw :: *)
                                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            a_a6sVw :: *)))
                                        Data.Semigroup.Internal.$fReadAll6)
                                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a6sVw>_R
                                             :: (Text.ParserCombinators.ReadP.ReadP a_a6sVw :: *)
                                                ~R# (forall b.
                                                     (a_a6sVw -> Text.ParserCombinators.ReadP.P b)
                                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                                      @ b_i6u9v
                                      (\ (a3_i6ubd :: a_a6sVw) ->
                                         case Text.Read.Lex.$wexpect
                                                Data.Semigroup.Internal.$fReadAll3
                                                @ b_i6u9v
                                                (\ _ [Occ=Dead, OS=OneShot] ->
                                                   eta_B1
                                                     (a3_i6ubd
                                                      `cast` (Sym (Data.Semigroup.Internal.N:Sum[0]
                                                                       <a_a6sVw>_R)
                                                              :: (a_a6sVw :: *)
                                                                 ~R# (Sum a_a6sVw :: *))))
                                         of
                                         { (# ww1_i6ub0 #) ->
                                         Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                                         }))
                          of
                          { (# ww1_i6ub0 #) ->
                          Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                          })
                of
                { (# ww1_i6ub0 #) ->
                Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                }
            }
            })
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Sum
                                   a_a6sVw>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Sum a_a6sVw>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Sum a_a6sVw -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec (Sum a_a6sVw) :: *)))

-- RHS size: {terms: 10, types: 21, coercions: 0, joins: 0/1}
Data.Semigroup.Internal.$fReadSum_$creadsPrec
  :: forall a. Read a => Int -> ReadS (Sum a)
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 60}]
Data.Semigroup.Internal.$fReadSum_$creadsPrec
  = \ (@ a_X6t8R) ($dRead_X6t8T :: Read a_X6t8R) ->
      let {
        ds_s6umJ [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Sum a_X6t8R -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId]
        ds_s6umJ
          = Data.Semigroup.Internal.$fReadSum1 @ a_X6t8R $dRead_X6t8T } in
      \ (n_i6tWE :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Sum a_X6t8R)
          (ds_s6umJ
             n_i6tWE
             @ (Sum a_X6t8R)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Sum a_X6t8R)))

-- RHS size: {terms: 5, types: 7, coercions: 11, joins: 0/0}
Data.Semigroup.Internal.$fReadSum_$creadListPrec
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Sum a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X6t8P) ($dRead_X6t8R [Occ=Once] :: Read a_X6t8P) ->
                 list
                   @ (Sum a_X6t8P)
                   ((Data.Semigroup.Internal.$fReadSum1 @ a_X6t8P $dRead_X6t8R)
                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Sum
                                              a_X6t8P>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Sum a_X6t8P>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> forall b.
                                   (Sum a_X6t8P -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                      (Sum a_X6t8P) :: *)))}]
Data.Semigroup.Internal.$fReadSum_$creadListPrec
  = \ (@ a_X6t8P) ($dRead_X6t8R :: Read a_X6t8P) ->
      list
        @ (Sum a_X6t8P)
        ((Data.Semigroup.Internal.$fReadSum1 @ a_X6t8P $dRead_X6t8R)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Sum
                                   a_X6t8P>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Sum a_X6t8P>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Sum a_X6t8P -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec (Sum a_X6t8P) :: *)))

-- RHS size: {terms: 8, types: 16, coercions: 19, joins: 0/0}
Data.Semigroup.Internal.$fReadSum_$creadList
  :: forall a. Read a => ReadS [Sum a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X6t8Q) ($dRead_X6t8S [Occ=Once] :: Read a_X6t8Q) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Sum a_X6t8Q]
                   (((((list
                          @ (Sum a_X6t8Q)
                          ((Data.Semigroup.Internal.$fReadSum1 @ a_X6t8Q $dRead_X6t8S)
                           `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Sum
                                                     a_X6t8Q>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Sum a_X6t8Q>_R)
                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                       -> forall b.
                                          (Sum a_X6t8Q -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                             (Sum a_X6t8Q) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Sum a_X6t8Q]>_R
                               :: (Text.ParserCombinators.ReadPrec.ReadPrec [Sum a_X6t8Q] :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                       -> Text.ParserCombinators.ReadP.ReadP [Sum a_X6t8Q] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Sum a_X6t8Q]>_R
                             :: (Text.ParserCombinators.ReadP.ReadP [Sum a_X6t8Q] :: *)
                                ~R# (forall b.
                                     ([Sum a_X6t8Q] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Sum a_X6t8Q]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Sum a_X6t8Q]))}]
Data.Semigroup.Internal.$fReadSum_$creadList
  = \ (@ a_X6t8Q) ($dRead_X6t8S :: Read a_X6t8Q) ->
      Text.ParserCombinators.ReadP.run
        @ [Sum a_X6t8Q]
        (((((list
               @ (Sum a_X6t8Q)
               ((Data.Semigroup.Internal.$fReadSum1 @ a_X6t8Q $dRead_X6t8S)
                `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Sum
                                          a_X6t8Q>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Sum a_X6t8Q>_R)
                        :: (Text.ParserCombinators.ReadPrec.Prec
                            -> forall b.
                               (Sum a_X6t8Q -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                  (Sum a_X6t8Q) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Sum a_X6t8Q]>_R
                    :: (Text.ParserCombinators.ReadPrec.ReadPrec [Sum a_X6t8Q] :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.Prec
                            -> Text.ParserCombinators.ReadP.ReadP [Sum a_X6t8Q] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Sum a_X6t8Q]>_R
                  :: (Text.ParserCombinators.ReadP.ReadP [Sum a_X6t8Q] :: *)
                     ~R# (forall b.
                          ([Sum a_X6t8Q] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Sum a_X6t8Q]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Sum a_X6t8Q]))

-- RHS size: {terms: 11, types: 10, coercions: 11, joins: 0/0}
Data.Semigroup.Internal.$fReadSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Read a => Read (Sum a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,C(U),A)>m,
 Unf=DFun: \ (@ a_a6r2n) (v_Xdk :: Read a_a6r2n) ->
       GHC.Read.C:Read TYPE: Sum a_a6r2n
                       Data.Semigroup.Internal.$fReadSum_$creadsPrec @ a_a6r2n v_Xdk
                       Data.Semigroup.Internal.$fReadSum_$creadList @ a_a6r2n v_Xdk
                       (Data.Semigroup.Internal.$fReadSum1 @ a_a6r2n v_Xdk)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Sum
                                                 a_a6r2n>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Sum a_a6r2n>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Sum a_a6r2n -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec (Sum a_a6r2n) :: *))
                       Data.Semigroup.Internal.$fReadSum_$creadListPrec @ a_a6r2n v_Xdk]
Data.Semigroup.Internal.$fReadSum
  = \ (@ a_X6t8O) ($dRead_X6t8Q :: Read a_X6t8O) ->
      GHC.Read.C:Read
        @ (Sum a_X6t8O)
        (Data.Semigroup.Internal.$fReadSum_$creadsPrec
           @ a_X6t8O $dRead_X6t8Q)
        (Data.Semigroup.Internal.$fReadSum_$creadList
           @ a_X6t8O $dRead_X6t8Q)
        ((Data.Semigroup.Internal.$fReadSum1 @ a_X6t8O $dRead_X6t8Q)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Sum
                                   a_X6t8O>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Sum a_X6t8O>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Sum a_X6t8O -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec (Sum a_X6t8O) :: *)))
        (Data.Semigroup.Internal.$fReadSum_$creadListPrec
           @ a_X6t8O $dRead_X6t8Q)

-- RHS size: {terms: 7, types: 8, coercions: 18, joins: 0/0}
Data.Semigroup.Internal.$fEqSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Eq a => Eq (Sum a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2n) (v_Xdx :: Eq a_a6r2n) ->
       GHC.Classes.C:Eq TYPE: Sum a_a6r2n
                        (== @ a_a6r2n v_Xdx)
                        `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                ->_R <Bool>_R
                                :: (a_a6r2n -> a_a6r2n -> Bool :: *)
                                   ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Bool :: *))
                        (/= @ a_a6r2n v_Xdx)
                        `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                ->_R <Bool>_R
                                :: (a_a6r2n -> a_a6r2n -> Bool :: *)
                                   ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Bool :: *))]
Data.Semigroup.Internal.$fEqSum
  = \ (@ a_a6sT9) ($dEq_a6sTa :: Eq a_a6sT9) ->
      GHC.Classes.C:Eq
        @ (Sum a_a6sT9)
        ((== @ a_a6sT9 $dEq_a6sTa)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sT9>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sT9>_R)
                 ->_R <Bool>_R
                 :: (a_a6sT9 -> a_a6sT9 -> Bool :: *)
                    ~R# (Sum a_a6sT9 -> Sum a_a6sT9 -> Bool :: *)))
        ((/= @ a_a6sT9 $dEq_a6sTa)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sT9>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sT9>_R)
                 ->_R <Bool>_R
                 :: (a_a6sT9 -> a_a6sT9 -> Bool :: *)
                    ~R# (Sum a_a6sT9 -> Sum a_a6sT9 -> Bool :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fOrdSum_$cp1Ord
  :: forall a. Ord a => Eq (Sum a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6sTH) ($dOrd_a6sTI [Occ=Once] :: Ord a_a6sTH) ->
                 Data.Semigroup.Internal.$fEqSum
                   @ a_a6sTH (GHC.Classes.$p1Ord @ a_a6sTH $dOrd_a6sTI)}]
Data.Semigroup.Internal.$fOrdSum_$cp1Ord
  = \ (@ a_a6sTH) ($dOrd_a6sTI :: Ord a_a6sTH) ->
      Data.Semigroup.Internal.$fEqSum
        @ a_a6sTH (GHC.Classes.$p1Ord @ a_a6sTH $dOrd_a6sTI)

-- RHS size: {terms: 19, types: 14, coercions: 67, joins: 0/0}
Data.Semigroup.Internal.$fOrdSum [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Ord a => Ord (Sum a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2n) (v_Xdz :: Ord a_a6r2n) ->
       GHC.Classes.C:Ord TYPE: Sum a_a6r2n
                         Data.Semigroup.Internal.$fOrdSum_$cp1Ord @ a_a6r2n v_Xdz
                         (compare @ a_a6r2n v_Xdz)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R <Ordering>_R
                                 :: (a_a6r2n -> a_a6r2n -> Ordering :: *)
                                    ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Ordering :: *))
                         (< @ a_a6r2n v_Xdz)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2n -> a_a6r2n -> Bool :: *)
                                    ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Bool :: *))
                         (<= @ a_a6r2n v_Xdz)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2n -> a_a6r2n -> Bool :: *)
                                    ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Bool :: *))
                         (> @ a_a6r2n v_Xdz)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2n -> a_a6r2n -> Bool :: *)
                                    ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Bool :: *))
                         (>= @ a_a6r2n v_Xdz)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2n -> a_a6r2n -> Bool :: *)
                                    ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Bool :: *))
                         (max @ a_a6r2n v_Xdz)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 :: (a_a6r2n -> a_a6r2n -> a_a6r2n :: *)
                                    ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Sum a_a6r2n :: *))
                         (min @ a_a6r2n v_Xdz)
                         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6r2n>_R)
                                 :: (a_a6r2n -> a_a6r2n -> a_a6r2n :: *)
                                    ~R# (Sum a_a6r2n -> Sum a_a6r2n -> Sum a_a6r2n :: *))]
Data.Semigroup.Internal.$fOrdSum
  = \ (@ a_a6sTH) ($dOrd_a6sTI :: Ord a_a6sTH) ->
      GHC.Classes.C:Ord
        @ (Sum a_a6sTH)
        (Data.Semigroup.Internal.$fOrdSum_$cp1Ord @ a_a6sTH $dOrd_a6sTI)
        ((compare @ a_a6sTH $dOrd_a6sTI)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R <Ordering>_R
                 :: (a_a6sTH -> a_a6sTH -> Ordering :: *)
                    ~R# (Sum a_a6sTH -> Sum a_a6sTH -> Ordering :: *)))
        ((< @ a_a6sTH $dOrd_a6sTI)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R <Bool>_R
                 :: (a_a6sTH -> a_a6sTH -> Bool :: *)
                    ~R# (Sum a_a6sTH -> Sum a_a6sTH -> Bool :: *)))
        ((<= @ a_a6sTH $dOrd_a6sTI)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R <Bool>_R
                 :: (a_a6sTH -> a_a6sTH -> Bool :: *)
                    ~R# (Sum a_a6sTH -> Sum a_a6sTH -> Bool :: *)))
        ((> @ a_a6sTH $dOrd_a6sTI)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R <Bool>_R
                 :: (a_a6sTH -> a_a6sTH -> Bool :: *)
                    ~R# (Sum a_a6sTH -> Sum a_a6sTH -> Bool :: *)))
        ((>= @ a_a6sTH $dOrd_a6sTI)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R <Bool>_R
                 :: (a_a6sTH -> a_a6sTH -> Bool :: *)
                    ~R# (Sum a_a6sTH -> Sum a_a6sTH -> Bool :: *)))
        ((max @ a_a6sTH $dOrd_a6sTI)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 :: (a_a6sTH -> a_a6sTH -> a_a6sTH :: *)
                    ~R# (Sum a_a6sTH -> Sum a_a6sTH -> Sum a_a6sTH :: *)))
        ((min @ a_a6sTH $dOrd_a6sTI)
         `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a_a6sTH>_R)
                 :: (a_a6sTH -> a_a6sTH -> a_a6sTH :: *)
                    ~R# (Sum a_a6sTH -> Sum a_a6sTH -> Sum a_a6sTH :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericAny1
  :: forall x. Rep Any x -> Rep Any x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ x_a6sSI) (ds_d6tY1 [Occ=Once] :: Rep Any x_a6sSI) ->
                 ds_d6tY1}]
Data.Semigroup.Internal.$fGenericAny1
  = \ (@ x_a6sSI) (ds_d6tY1 :: Rep Any x_a6sSI) -> ds_d6tY1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericAny2 :: forall x. Any -> Any
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ x_a6sSg) (x1_a6srS [Occ=Once] :: Any) -> x1_a6srS}]
Data.Semigroup.Internal.$fGenericAny2
  = \ (@ x_a6sSg) (x1_a6srS :: Any) -> x1_a6srS

-- RHS size: {terms: 3, types: 1, coercions: 192, joins: 0/0}
Data.Semigroup.Internal.$fGenericAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Generic Any
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Generics.C:Generic TYPE: Any
                              Data.Semigroup.Internal.$fGenericAny2
                              `cast` (forall (x :: <*>_N).
                                      <Any>_R
                                      ->_R Data.Semigroup.Internal.N:Any[0] ; (Sym (GHC.Generics.N:K1[0]
                                                                                        <*>_N
                                                                                        <R>_P
                                                                                        <Bool>_R
                                                                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                           <*>_N
                                                                                                           <S>_P
                                                                                                           <'MetaSel
                                                                                                              ('Just
                                                                                                                 "getAny")
                                                                                                              'NoSourceUnpackedness
                                                                                                              'NoSourceStrictness
                                                                                                              'DecidedLazy>_P
                                                                                                           <K1
                                                                                                              R
                                                                                                              Bool>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                   <*>_N
                                                                                                                                   <C>_P
                                                                                                                                   <'MetaCons
                                                                                                                                      "Any"
                                                                                                                                      'PrefixI
                                                                                                                                      'True>_P
                                                                                                                                   <M1
                                                                                                                                      S
                                                                                                                                      ('MetaSel
                                                                                                                                         ('Just
                                                                                                                                            "getAny")
                                                                                                                                         'NoSourceUnpackedness
                                                                                                                                         'NoSourceStrictness
                                                                                                                                         'DecidedLazy)
                                                                                                                                      (K1
                                                                                                                                         R
                                                                                                                                         Bool)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                               <*>_N
                                                                                                                                                               <D>_P
                                                                                                                                                               <'MetaData
                                                                                                                                                                  "Any"
                                                                                                                                                                  "Data.Semigroup.Internal"
                                                                                                                                                                  "base"
                                                                                                                                                                  'True>_P
                                                                                                                                                               <M1
                                                                                                                                                                  C
                                                                                                                                                                  ('MetaCons
                                                                                                                                                                     "Any"
                                                                                                                                                                     'PrefixI
                                                                                                                                                                     'True)
                                                                                                                                                                  (M1
                                                                                                                                                                     S
                                                                                                                                                                     ('MetaSel
                                                                                                                                                                        ('Just
                                                                                                                                                                           "getAny")
                                                                                                                                                                        'NoSourceUnpackedness
                                                                                                                                                                        'NoSourceStrictness
                                                                                                                                                                        'DecidedLazy)
                                                                                                                                                                     (K1
                                                                                                                                                                        R
                                                                                                                                                                        Bool))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Any[0]))))) <x>_N)
                                      :: (forall x. Any -> Any :: *)
                                         ~R# (forall x. Any -> Rep Any x :: *))
                              Data.Semigroup.Internal.$fGenericAny1
                              `cast` (forall (x :: <*>_N).
                                      <Rep Any x>_R
                                      ->_R (Sub (Data.Semigroup.Internal.Rep_Any[0]) ; (GHC.Generics.N:M1[0]
                                                                                            <*>_N
                                                                                            <D>_P
                                                                                            <'MetaData
                                                                                               "Any"
                                                                                               "Data.Semigroup.Internal"
                                                                                               "base"
                                                                                               'True>_P
                                                                                            <M1
                                                                                               C
                                                                                               ('MetaCons
                                                                                                  "Any"
                                                                                                  'PrefixI
                                                                                                  'True)
                                                                                               (M1
                                                                                                  S
                                                                                                  ('MetaSel
                                                                                                     ('Just
                                                                                                        "getAny")
                                                                                                     'NoSourceUnpackedness
                                                                                                     'NoSourceStrictness
                                                                                                     'DecidedLazy)
                                                                                                  (K1
                                                                                                     R
                                                                                                     Bool))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                      <*>_N
                                                                                                                      <C>_P
                                                                                                                      <'MetaCons
                                                                                                                         "Any"
                                                                                                                         'PrefixI
                                                                                                                         'True>_P
                                                                                                                      <M1
                                                                                                                         S
                                                                                                                         ('MetaSel
                                                                                                                            ('Just
                                                                                                                               "getAny")
                                                                                                                            'NoSourceUnpackedness
                                                                                                                            'NoSourceStrictness
                                                                                                                            'DecidedLazy)
                                                                                                                         (K1
                                                                                                                            R
                                                                                                                            Bool)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <S>_P
                                                                                                                                           <'MetaSel
                                                                                                                                              ('Just
                                                                                                                                                 "getAny")
                                                                                                                                              'NoSourceUnpackedness
                                                                                                                                              'NoSourceStrictness
                                                                                                                                              'DecidedLazy>_P
                                                                                                                                           <K1
                                                                                                                                              R
                                                                                                                                              Bool>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                      <*>_N
                                                                                                                                                                      <R>_P
                                                                                                                                                                      <Bool>_R
                                                                                                                                                                      <x>_P ; Sym (Data.Semigroup.Internal.N:Any[0]))
                                      :: (forall x. Rep Any x -> Rep Any x :: *)
                                         ~R# (forall x. Rep Any x -> Any :: *))]
Data.Semigroup.Internal.$fGenericAny
  = GHC.Generics.C:Generic
      @ Any
      (Data.Semigroup.Internal.$fGenericAny2
       `cast` (forall (x :: <*>_N).
               <Any>_R
               ->_R Data.Semigroup.Internal.N:Any[0] ; (Sym (GHC.Generics.N:K1[0]
                                                                 <*>_N
                                                                 <R>_P
                                                                 <Bool>_R
                                                                 <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                    <*>_N
                                                                                    <S>_P
                                                                                    <'MetaSel
                                                                                       ('Just
                                                                                          "getAny")
                                                                                       'NoSourceUnpackedness
                                                                                       'NoSourceStrictness
                                                                                       'DecidedLazy>_P
                                                                                    <K1
                                                                                       R
                                                                                       Bool>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <C>_P
                                                                                                            <'MetaCons
                                                                                                               "Any"
                                                                                                               'PrefixI
                                                                                                               'True>_P
                                                                                                            <M1
                                                                                                               S
                                                                                                               ('MetaSel
                                                                                                                  ('Just
                                                                                                                     "getAny")
                                                                                                                  'NoSourceUnpackedness
                                                                                                                  'NoSourceStrictness
                                                                                                                  'DecidedLazy)
                                                                                                               (K1
                                                                                                                  R
                                                                                                                  Bool)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                        <*>_N
                                                                                                                                        <D>_P
                                                                                                                                        <'MetaData
                                                                                                                                           "Any"
                                                                                                                                           "Data.Semigroup.Internal"
                                                                                                                                           "base"
                                                                                                                                           'True>_P
                                                                                                                                        <M1
                                                                                                                                           C
                                                                                                                                           ('MetaCons
                                                                                                                                              "Any"
                                                                                                                                              'PrefixI
                                                                                                                                              'True)
                                                                                                                                           (M1
                                                                                                                                              S
                                                                                                                                              ('MetaSel
                                                                                                                                                 ('Just
                                                                                                                                                    "getAny")
                                                                                                                                                 'NoSourceUnpackedness
                                                                                                                                                 'NoSourceStrictness
                                                                                                                                                 'DecidedLazy)
                                                                                                                                              (K1
                                                                                                                                                 R
                                                                                                                                                 Bool))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Any[0]))))) <x>_N)
               :: (forall x. Any -> Any :: *)
                  ~R# (forall x. Any -> Rep Any x :: *)))
      (Data.Semigroup.Internal.$fGenericAny1
       `cast` (forall (x :: <*>_N).
               <Rep Any x>_R
               ->_R (Sub (Data.Semigroup.Internal.Rep_Any[0]) ; (GHC.Generics.N:M1[0]
                                                                     <*>_N
                                                                     <D>_P
                                                                     <'MetaData
                                                                        "Any"
                                                                        "Data.Semigroup.Internal"
                                                                        "base"
                                                                        'True>_P
                                                                     <M1
                                                                        C
                                                                        ('MetaCons
                                                                           "Any" 'PrefixI 'True)
                                                                        (M1
                                                                           S
                                                                           ('MetaSel
                                                                              ('Just "getAny")
                                                                              'NoSourceUnpackedness
                                                                              'NoSourceStrictness
                                                                              'DecidedLazy)
                                                                           (K1
                                                                              R
                                                                              Bool))>_R ; (GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <C>_P
                                                                                               <'MetaCons
                                                                                                  "Any"
                                                                                                  'PrefixI
                                                                                                  'True>_P
                                                                                               <M1
                                                                                                  S
                                                                                                  ('MetaSel
                                                                                                     ('Just
                                                                                                        "getAny")
                                                                                                     'NoSourceUnpackedness
                                                                                                     'NoSourceStrictness
                                                                                                     'DecidedLazy)
                                                                                                  (K1
                                                                                                     R
                                                                                                     Bool)>_R ; GHC.Generics.N:M1[0]
                                                                                                                    <*>_N
                                                                                                                    <S>_P
                                                                                                                    <'MetaSel
                                                                                                                       ('Just
                                                                                                                          "getAny")
                                                                                                                       'NoSourceUnpackedness
                                                                                                                       'NoSourceStrictness
                                                                                                                       'DecidedLazy>_P
                                                                                                                    <K1
                                                                                                                       R
                                                                                                                       Bool>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                               <*>_N
                                                                                                                                               <R>_P
                                                                                                                                               <Bool>_R
                                                                                                                                               <x>_P ; Sym (Data.Semigroup.Internal.N:Any[0]))
               :: (forall x. Rep Any x -> Rep Any x :: *)
                  ~R# (forall x. Rep Any x -> Any :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
Data.Semigroup.Internal.$fBoundedAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded Any
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: Any
                          GHC.Types.False
                          `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                  :: (Bool :: *) ~R# (Any :: *))
                          GHC.Types.True
                          `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                  :: (Bool :: *) ~R# (Any :: *))]
Data.Semigroup.Internal.$fBoundedAny
  = GHC.Enum.C:Bounded
      @ Any
      (GHC.Types.False
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               :: (Bool :: *) ~R# (Any :: *)))
      (GHC.Types.True
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               :: (Bool :: *) ~R# (Any :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAny4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fShowAny4 = "Any {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAny3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fShowAny3
  = unpackCString# Data.Semigroup.Internal.$fShowAny4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAny2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Semigroup.Internal.$fShowAny2 = "getAny = "#

-- RHS size: {terms: 51, types: 19, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Any -> String -> String
[GblId,
 Arity=3,
 Str=<S,U><L,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 190 0] 451 30}]
Data.Semigroup.Internal.$w$cshowsPrec2
  = \ (ww_s6uMp :: Int#) (w_s6uMl :: Any) (w1_s6uMm :: String) ->
      case >=# ww_s6uMp 11# of {
        __DEFAULT ->
          ++
            @ Char
            Data.Semigroup.Internal.$fShowAny3
            (unpackAppendCString#
               Data.Semigroup.Internal.$fShowAny2
               (case w_s6uMl
                     `cast` (Data.Semigroup.Internal.N:Any[0]
                             :: (Any :: *) ~R# (Bool :: *))
                of {
                  False ->
                    ++
                      @ Char
                      GHC.Show.$fShowBool4
                      (++ @ Char Data.Semigroup.Internal.$fReadAll4 w1_s6uMm);
                  True ->
                    ++
                      @ Char
                      GHC.Show.$fShowBool2
                      (++ @ Char Data.Semigroup.Internal.$fReadAll4 w1_s6uMm)
                }));
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (++
               @ Char
               Data.Semigroup.Internal.$fShowAny3
               (unpackAppendCString#
                  Data.Semigroup.Internal.$fShowAny2
                  (case w_s6uMl
                        `cast` (Data.Semigroup.Internal.N:Any[0]
                                :: (Any :: *) ~R# (Bool :: *))
                   of {
                     False ->
                       ++
                         @ Char
                         GHC.Show.$fShowBool4
                         (++
                            @ Char
                            Data.Semigroup.Internal.$fReadAll4
                            (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_s6uMm));
                     True ->
                       ++
                         @ Char
                         GHC.Show.$fShowBool2
                         (++
                            @ Char
                            Data.Semigroup.Internal.$fReadAll4
                            (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_s6uMm))
                   })))
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAny_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Any -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6uMk [Occ=Once!] :: Int)
                 (w1_s6uMl [Occ=Once] :: Any)
                 (w2_s6uMm [Occ=Once] :: String) ->
                 case w_s6uMk of { I# ww1_s6uMp [Occ=Once] ->
                 Data.Semigroup.Internal.$w$cshowsPrec2 ww1_s6uMp w1_s6uMl w2_s6uMm
                 }}]
Data.Semigroup.Internal.$fShowAny_$cshowsPrec
  = \ (w_s6uMk :: Int) (w1_s6uMl :: Any) (w2_s6uMm :: String) ->
      case w_s6uMk of { I# ww1_s6uMp ->
      Data.Semigroup.Internal.$w$cshowsPrec2 ww1_s6uMp w1_s6uMl w2_s6uMm
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fShowAll6
  = ++ @ Char GHC.Show.$fShowBool4 Data.Semigroup.Internal.$fReadAll4

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fShowAll5
  = ++ @ Char GHC.Show.$fShowBool2 Data.Semigroup.Internal.$fReadAll4

-- RHS size: {terms: 11, types: 3, coercions: 1, joins: 0/0}
Data.Semigroup.Internal.$fShowAny_$cshow :: Any -> String
[GblId,
 Arity=1,
 Str=<L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 80 0}]
Data.Semigroup.Internal.$fShowAny_$cshow
  = \ (x_i6tXp :: Any) ->
      ++
        @ Char
        Data.Semigroup.Internal.$fShowAny3
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowAny2
           (case x_i6tXp
                 `cast` (Data.Semigroup.Internal.N:Any[0]
                         :: (Any :: *) ~R# (Bool :: *))
            of {
              False -> Data.Semigroup.Internal.$fShowAll6;
              True -> Data.Semigroup.Internal.$fShowAll5
            }))

-- RHS size: {terms: 20, types: 8, coercions: 1, joins: 0/0}
Data.Semigroup.Internal.$fShowAny1 :: Any -> ShowS
[GblId,
 Arity=2,
 Str=<L,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90 0] 200 0}]
Data.Semigroup.Internal.$fShowAny1
  = \ (ds_d6tXZ :: Any) (x_X6ubn :: String) ->
      ++
        @ Char
        Data.Semigroup.Internal.$fShowAny3
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowAny2
           (case ds_d6tXZ
                 `cast` (Data.Semigroup.Internal.N:Any[0]
                         :: (Any :: *) ~R# (Bool :: *))
            of {
              False ->
                ++
                  @ Char
                  GHC.Show.$fShowBool4
                  (++ @ Char Data.Semigroup.Internal.$fReadAll4 x_X6ubn);
              True ->
                ++
                  @ Char
                  GHC.Show.$fShowBool2
                  (++ @ Char Data.Semigroup.Internal.$fReadAll4 x_X6ubn)
            }))

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAny_$cshowList :: [Any] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i6tXs [Occ=Once] :: [Any])
                 (s_i6tXt [Occ=Once] :: String) ->
                 showList__
                   @ Any Data.Semigroup.Internal.$fShowAny1 ls_i6tXs s_i6tXt}]
Data.Semigroup.Internal.$fShowAny_$cshowList
  = \ (ls_i6tXs :: [Any]) (s_i6tXt :: String) ->
      showList__
        @ Any Data.Semigroup.Internal.$fShowAny1 ls_i6tXs s_i6tXt

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Any
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Any
                       Data.Semigroup.Internal.$fShowAny_$cshowsPrec
                       Data.Semigroup.Internal.$fShowAny_$cshow
                       Data.Semigroup.Internal.$fShowAny_$cshowList]
Data.Semigroup.Internal.$fShowAny
  = GHC.Show.C:Show
      @ Any
      Data.Semigroup.Internal.$fShowAny_$cshowsPrec
      Data.Semigroup.Internal.$fShowAny_$cshow
      Data.Semigroup.Internal.$fShowAny_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAny6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAny6 = "Any"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAny5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAny5
  = unpackCString# Data.Semigroup.Internal.$fReadAny6

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAny_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadAny_lexeme
  = Text.Read.Lex.Ident Data.Semigroup.Internal.$fReadAny5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAny4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadAny4 = "getAny"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAny3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAny3
  = unpackCString# Data.Semigroup.Internal.$fReadAny4

-- RHS size: {terms: 7, types: 8, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAll7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Bool -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i6tWM)
                 (eta_B1 [Occ=Once]
                    :: Bool -> Text.ParserCombinators.ReadP.P b_i6tWM) ->
                 GHC.Read.list3
                   @ Bool
                   (GHC.Read.$fReadBool2
                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <Bool>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> forall b.
                                   (Bool -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Bool :: *)))
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ b_i6tWM
                   eta_B1}]
Data.Semigroup.Internal.$fReadAll7
  = \ _ [Occ=Dead]
      (@ b_i6tWM)
      (eta_B1 :: Bool -> Text.ParserCombinators.ReadP.P b_i6tWM) ->
      GHC.Read.list3
        @ Bool
        (GHC.Read.$fReadBool2
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <Bool>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Bool -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Bool :: *)))
        Text.ParserCombinators.ReadPrec.minPrec
        @ b_i6tWM
        eta_B1

-- RHS size: {terms: 38, types: 44, coercions: 15, joins: 0/0}
Data.Semigroup.Internal.$w$creadPrec1 [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> forall b.
        (Any -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<S,U><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60] 281 30}]
Data.Semigroup.Internal.$w$creadPrec1
  = \ (ww_s6uMA :: Int#)
      (@ b_s6uMw)
      (w_s6uMx :: Any -> Text.ParserCombinators.ReadP.P b_s6uMw) ->
      case <=# ww_s6uMA 11# of {
        __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_s6uMw;
        1# ->
          case Text.Read.Lex.$wexpect
                 Data.Semigroup.Internal.$fReadAny_lexeme
                 @ b_s6uMw
                 (\ _ [Occ=Dead, OS=OneShot] ->
                    case Text.Read.Lex.$wexpect
                           Data.Semigroup.Internal.$fReadAll_lexeme
                           @ b_s6uMw
                           (\ _ [Occ=Dead, OS=OneShot] ->
                              ((((readField
                                    @ Bool
                                    Data.Semigroup.Internal.$fReadAny3
                                    (Data.Semigroup.Internal.$fReadAll7
                                     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                  <Bool>_R)
                                             :: (Text.ParserCombinators.ReadPrec.Prec
                                                 -> forall b.
                                                    (Bool -> Text.ParserCombinators.ReadP.P b)
                                                    -> Text.ParserCombinators.ReadP.P b :: *)
                                                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                       Bool :: *))))
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Bool>_R
                                         :: (Text.ParserCombinators.ReadPrec.ReadPrec Bool :: *)
                                            ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                 -> Text.ParserCombinators.ReadP.ReadP Bool :: *)))
                                  Data.Semigroup.Internal.$fReadAll6)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Bool>_R
                                       :: (Text.ParserCombinators.ReadP.ReadP Bool :: *)
                                          ~R# (forall b.
                                               (Bool -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b_s6uMw
                                (\ (a3_i6ubd :: Bool) ->
                                   case Text.Read.Lex.$wexpect
                                          Data.Semigroup.Internal.$fReadAll3
                                          @ b_s6uMw
                                          (\ _ [Occ=Dead, OS=OneShot] ->
                                             w_s6uMx
                                               (a3_i6ubd
                                                `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                                        :: (Bool :: *) ~R# (Any :: *))))
                                   of
                                   { (# ww2_i6ub0 #) ->
                                   Text.ParserCombinators.ReadP.Look @ b_s6uMw ww2_i6ub0
                                   }))
                    of
                    { (# ww2_i6ub0 #) ->
                    Text.ParserCombinators.ReadP.Look @ b_s6uMw ww2_i6ub0
                    })
          of
          { (# ww2_i6ub0 #) ->
          Text.ParserCombinators.ReadP.Look @ b_s6uMw ww2_i6ub0
          }
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAny2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Any -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><L,C(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6uMv [Occ=Once!]
                    :: Text.ParserCombinators.ReadPrec.Prec)
                 (@ b_s6uMw)
                 (w1_s6uMx [Occ=Once]
                    :: Any -> Text.ParserCombinators.ReadP.P b_s6uMw) ->
                 case w_s6uMv of { I# ww1_s6uMA [Occ=Once] ->
                 Data.Semigroup.Internal.$w$creadPrec1 ww1_s6uMA @ b_s6uMw w1_s6uMx
                 }}]
Data.Semigroup.Internal.$fReadAny2
  = \ (w_s6uMv :: Text.ParserCombinators.ReadPrec.Prec)
      (@ b_s6uMw)
      (w1_s6uMx :: Any -> Text.ParserCombinators.ReadP.P b_s6uMw) ->
      case w_s6uMv of { I# ww1_s6uMA ->
      Data.Semigroup.Internal.$w$creadPrec1 ww1_s6uMA @ b_s6uMw w1_s6uMx
      }

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAny1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Any -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Semigroup.Internal.$fReadAny1
  = GHC.Read.list3
      @ Any
      (Data.Semigroup.Internal.$fReadAny2
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Any>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <Any>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Any -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Any :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAny_$creadsPrec :: Int -> ReadS Any
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_i6tWE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Any
                   (GHC.Read.list3
                      @ Any
                      (Data.Semigroup.Internal.$fReadAny2
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Any>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <Any>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Any -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Any :: *)))
                      n_i6tWE
                      @ Any
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Any))}]
Data.Semigroup.Internal.$fReadAny_$creadsPrec
  = \ (n_i6tWE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Any
        (GHC.Read.list3
           @ Any
           (Data.Semigroup.Internal.$fReadAny2
            `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Any>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Any>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> forall b.
                           (Any -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Any :: *)))
           n_i6tWE
           @ Any
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Any))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAny_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Any]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAny_$creadListPrec
  = list
      @ Any
      (Data.Semigroup.Internal.$fReadAny1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Any>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <Any>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Any -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Any :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
Data.Semigroup.Internal.$fReadAny7
  :: Text.ParserCombinators.ReadP.P [Any]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadAny7
  = (((Data.Semigroup.Internal.$fReadAny_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Any]>_R
               :: (Text.ParserCombinators.ReadPrec.ReadPrec [Any] :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                       -> Text.ParserCombinators.ReadP.ReadP [Any] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Any]>_R
             :: (Text.ParserCombinators.ReadP.ReadP [Any] :: *)
                ~R# (forall b.
                     ([Any] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Any]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Any])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAny_$creadList :: ReadS [Any]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Semigroup.Internal.$fReadAny_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [Any] Data.Semigroup.Internal.$fReadAny7

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Read Any
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Any
                       Data.Semigroup.Internal.$fReadAny_$creadsPrec
                       Data.Semigroup.Internal.$fReadAny_$creadList
                       Data.Semigroup.Internal.$fReadAny1
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Any>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <Any>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Any -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Any :: *))
                       Data.Semigroup.Internal.$fReadAny_$creadListPrec]
Data.Semigroup.Internal.$fReadAny
  = GHC.Read.C:Read
      @ Any
      Data.Semigroup.Internal.$fReadAny_$creadsPrec
      Data.Semigroup.Internal.$fReadAny_$creadList
      (Data.Semigroup.Internal.$fReadAny1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Any>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <Any>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Any -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Any :: *)))
      Data.Semigroup.Internal.$fReadAny_$creadListPrec

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
Data.Semigroup.Internal.$fEqAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Any
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Any
                        GHC.Classes.$fEqBool_$c==
                        `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                ->_R <Bool>_R
                                :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *))
                        GHC.Classes.$fEqBool_$c/=
                        `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                ->_R <Bool>_R
                                :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *))]
Data.Semigroup.Internal.$fEqAny
  = GHC.Classes.C:Eq
      @ Any
      (GHC.Classes.$fEqBool_$c==
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *)))
      (GHC.Classes.$fEqBool_$c/=
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
Data.Semigroup.Internal.$fOrdAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord Any
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: Any
                         Data.Semigroup.Internal.$fEqAny
                         GHC.Classes.$fOrdBool_$ccompare
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R <Ordering>_R
                                 :: (Bool -> Bool -> Ordering :: *)
                                    ~R# (Any -> Any -> Ordering :: *))
                         GHC.Classes.$fOrdBool_$c<
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *))
                         GHC.Classes.$fOrdBool_$c<=
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *))
                         GHC.Classes.$fOrdBool_$c>
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *))
                         GHC.Classes.$fOrdBool_$c>=
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *))
                         GHC.Classes.$fOrdBool_$cmax
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *))
                         GHC.Classes.$fOrdBool_$cmin
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *))]
Data.Semigroup.Internal.$fOrdAny
  = GHC.Classes.C:Ord
      @ Any
      Data.Semigroup.Internal.$fEqAny
      (GHC.Classes.$fOrdBool_$ccompare
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R <Ordering>_R
               :: (Bool -> Bool -> Ordering :: *)
                  ~R# (Any -> Any -> Ordering :: *)))
      (GHC.Classes.$fOrdBool_$c<
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$c<=
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$c>
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$c>=
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$cmax
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *)))
      (GHC.Classes.$fOrdBool_$cmin
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericAll1
  :: forall x. Rep All x -> Rep All x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ x_a6sNY) (ds_d6tXT [Occ=Once] :: Rep All x_a6sNY) ->
                 ds_d6tXT}]
Data.Semigroup.Internal.$fGenericAll1
  = \ (@ x_a6sNY) (ds_d6tXT :: Rep All x_a6sNY) -> ds_d6tXT

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericAll2 :: forall x. All -> All
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ x_a6sNw) (x1_a6srL [Occ=Once] :: All) -> x1_a6srL}]
Data.Semigroup.Internal.$fGenericAll2
  = \ (@ x_a6sNw) (x1_a6srL :: All) -> x1_a6srL

-- RHS size: {terms: 3, types: 1, coercions: 192, joins: 0/0}
Data.Semigroup.Internal.$fGenericAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Generic All
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Generics.C:Generic TYPE: All
                              Data.Semigroup.Internal.$fGenericAll2
                              `cast` (forall (x :: <*>_N).
                                      <All>_R
                                      ->_R Data.Semigroup.Internal.N:All[0] ; (Sym (GHC.Generics.N:K1[0]
                                                                                        <*>_N
                                                                                        <R>_P
                                                                                        <Bool>_R
                                                                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                           <*>_N
                                                                                                           <S>_P
                                                                                                           <'MetaSel
                                                                                                              ('Just
                                                                                                                 "getAll")
                                                                                                              'NoSourceUnpackedness
                                                                                                              'NoSourceStrictness
                                                                                                              'DecidedLazy>_P
                                                                                                           <K1
                                                                                                              R
                                                                                                              Bool>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                   <*>_N
                                                                                                                                   <C>_P
                                                                                                                                   <'MetaCons
                                                                                                                                      "All"
                                                                                                                                      'PrefixI
                                                                                                                                      'True>_P
                                                                                                                                   <M1
                                                                                                                                      S
                                                                                                                                      ('MetaSel
                                                                                                                                         ('Just
                                                                                                                                            "getAll")
                                                                                                                                         'NoSourceUnpackedness
                                                                                                                                         'NoSourceStrictness
                                                                                                                                         'DecidedLazy)
                                                                                                                                      (K1
                                                                                                                                         R
                                                                                                                                         Bool)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                               <*>_N
                                                                                                                                                               <D>_P
                                                                                                                                                               <'MetaData
                                                                                                                                                                  "All"
                                                                                                                                                                  "Data.Semigroup.Internal"
                                                                                                                                                                  "base"
                                                                                                                                                                  'True>_P
                                                                                                                                                               <M1
                                                                                                                                                                  C
                                                                                                                                                                  ('MetaCons
                                                                                                                                                                     "All"
                                                                                                                                                                     'PrefixI
                                                                                                                                                                     'True)
                                                                                                                                                                  (M1
                                                                                                                                                                     S
                                                                                                                                                                     ('MetaSel
                                                                                                                                                                        ('Just
                                                                                                                                                                           "getAll")
                                                                                                                                                                        'NoSourceUnpackedness
                                                                                                                                                                        'NoSourceStrictness
                                                                                                                                                                        'DecidedLazy)
                                                                                                                                                                     (K1
                                                                                                                                                                        R
                                                                                                                                                                        Bool))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_All[0]))))) <x>_N)
                                      :: (forall x. All -> All :: *)
                                         ~R# (forall x. All -> Rep All x :: *))
                              Data.Semigroup.Internal.$fGenericAll1
                              `cast` (forall (x :: <*>_N).
                                      <Rep All x>_R
                                      ->_R (Sub (Data.Semigroup.Internal.Rep_All[0]) ; (GHC.Generics.N:M1[0]
                                                                                            <*>_N
                                                                                            <D>_P
                                                                                            <'MetaData
                                                                                               "All"
                                                                                               "Data.Semigroup.Internal"
                                                                                               "base"
                                                                                               'True>_P
                                                                                            <M1
                                                                                               C
                                                                                               ('MetaCons
                                                                                                  "All"
                                                                                                  'PrefixI
                                                                                                  'True)
                                                                                               (M1
                                                                                                  S
                                                                                                  ('MetaSel
                                                                                                     ('Just
                                                                                                        "getAll")
                                                                                                     'NoSourceUnpackedness
                                                                                                     'NoSourceStrictness
                                                                                                     'DecidedLazy)
                                                                                                  (K1
                                                                                                     R
                                                                                                     Bool))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                      <*>_N
                                                                                                                      <C>_P
                                                                                                                      <'MetaCons
                                                                                                                         "All"
                                                                                                                         'PrefixI
                                                                                                                         'True>_P
                                                                                                                      <M1
                                                                                                                         S
                                                                                                                         ('MetaSel
                                                                                                                            ('Just
                                                                                                                               "getAll")
                                                                                                                            'NoSourceUnpackedness
                                                                                                                            'NoSourceStrictness
                                                                                                                            'DecidedLazy)
                                                                                                                         (K1
                                                                                                                            R
                                                                                                                            Bool)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <S>_P
                                                                                                                                           <'MetaSel
                                                                                                                                              ('Just
                                                                                                                                                 "getAll")
                                                                                                                                              'NoSourceUnpackedness
                                                                                                                                              'NoSourceStrictness
                                                                                                                                              'DecidedLazy>_P
                                                                                                                                           <K1
                                                                                                                                              R
                                                                                                                                              Bool>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                      <*>_N
                                                                                                                                                                      <R>_P
                                                                                                                                                                      <Bool>_R
                                                                                                                                                                      <x>_P ; Sym (Data.Semigroup.Internal.N:All[0]))
                                      :: (forall x. Rep All x -> Rep All x :: *)
                                         ~R# (forall x. Rep All x -> All :: *))]
Data.Semigroup.Internal.$fGenericAll
  = GHC.Generics.C:Generic
      @ All
      (Data.Semigroup.Internal.$fGenericAll2
       `cast` (forall (x :: <*>_N).
               <All>_R
               ->_R Data.Semigroup.Internal.N:All[0] ; (Sym (GHC.Generics.N:K1[0]
                                                                 <*>_N
                                                                 <R>_P
                                                                 <Bool>_R
                                                                 <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                    <*>_N
                                                                                    <S>_P
                                                                                    <'MetaSel
                                                                                       ('Just
                                                                                          "getAll")
                                                                                       'NoSourceUnpackedness
                                                                                       'NoSourceStrictness
                                                                                       'DecidedLazy>_P
                                                                                    <K1
                                                                                       R
                                                                                       Bool>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <C>_P
                                                                                                            <'MetaCons
                                                                                                               "All"
                                                                                                               'PrefixI
                                                                                                               'True>_P
                                                                                                            <M1
                                                                                                               S
                                                                                                               ('MetaSel
                                                                                                                  ('Just
                                                                                                                     "getAll")
                                                                                                                  'NoSourceUnpackedness
                                                                                                                  'NoSourceStrictness
                                                                                                                  'DecidedLazy)
                                                                                                               (K1
                                                                                                                  R
                                                                                                                  Bool)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                        <*>_N
                                                                                                                                        <D>_P
                                                                                                                                        <'MetaData
                                                                                                                                           "All"
                                                                                                                                           "Data.Semigroup.Internal"
                                                                                                                                           "base"
                                                                                                                                           'True>_P
                                                                                                                                        <M1
                                                                                                                                           C
                                                                                                                                           ('MetaCons
                                                                                                                                              "All"
                                                                                                                                              'PrefixI
                                                                                                                                              'True)
                                                                                                                                           (M1
                                                                                                                                              S
                                                                                                                                              ('MetaSel
                                                                                                                                                 ('Just
                                                                                                                                                    "getAll")
                                                                                                                                                 'NoSourceUnpackedness
                                                                                                                                                 'NoSourceStrictness
                                                                                                                                                 'DecidedLazy)
                                                                                                                                              (K1
                                                                                                                                                 R
                                                                                                                                                 Bool))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_All[0]))))) <x>_N)
               :: (forall x. All -> All :: *)
                  ~R# (forall x. All -> Rep All x :: *)))
      (Data.Semigroup.Internal.$fGenericAll1
       `cast` (forall (x :: <*>_N).
               <Rep All x>_R
               ->_R (Sub (Data.Semigroup.Internal.Rep_All[0]) ; (GHC.Generics.N:M1[0]
                                                                     <*>_N
                                                                     <D>_P
                                                                     <'MetaData
                                                                        "All"
                                                                        "Data.Semigroup.Internal"
                                                                        "base"
                                                                        'True>_P
                                                                     <M1
                                                                        C
                                                                        ('MetaCons
                                                                           "All" 'PrefixI 'True)
                                                                        (M1
                                                                           S
                                                                           ('MetaSel
                                                                              ('Just "getAll")
                                                                              'NoSourceUnpackedness
                                                                              'NoSourceStrictness
                                                                              'DecidedLazy)
                                                                           (K1
                                                                              R
                                                                              Bool))>_R ; (GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <C>_P
                                                                                               <'MetaCons
                                                                                                  "All"
                                                                                                  'PrefixI
                                                                                                  'True>_P
                                                                                               <M1
                                                                                                  S
                                                                                                  ('MetaSel
                                                                                                     ('Just
                                                                                                        "getAll")
                                                                                                     'NoSourceUnpackedness
                                                                                                     'NoSourceStrictness
                                                                                                     'DecidedLazy)
                                                                                                  (K1
                                                                                                     R
                                                                                                     Bool)>_R ; GHC.Generics.N:M1[0]
                                                                                                                    <*>_N
                                                                                                                    <S>_P
                                                                                                                    <'MetaSel
                                                                                                                       ('Just
                                                                                                                          "getAll")
                                                                                                                       'NoSourceUnpackedness
                                                                                                                       'NoSourceStrictness
                                                                                                                       'DecidedLazy>_P
                                                                                                                    <K1
                                                                                                                       R
                                                                                                                       Bool>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                               <*>_N
                                                                                                                                               <R>_P
                                                                                                                                               <Bool>_R
                                                                                                                                               <x>_P ; Sym (Data.Semigroup.Internal.N:All[0]))
               :: (forall x. Rep All x -> Rep All x :: *)
                  ~R# (forall x. Rep All x -> All :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
Data.Semigroup.Internal.$fBoundedAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded All
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: All
                          GHC.Types.False
                          `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                  :: (Bool :: *) ~R# (All :: *))
                          GHC.Types.True
                          `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                  :: (Bool :: *) ~R# (All :: *))]
Data.Semigroup.Internal.$fBoundedAll
  = GHC.Enum.C:Bounded
      @ All
      (GHC.Types.False
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               :: (Bool :: *) ~R# (All :: *)))
      (GHC.Types.True
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               :: (Bool :: *) ~R# (All :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fShowAll4 = "All {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fShowAll3
  = unpackCString# Data.Semigroup.Internal.$fShowAll4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Semigroup.Internal.$fShowAll2 = "getAll = "#

-- RHS size: {terms: 51, types: 19, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int# -> All -> String -> String
[GblId,
 Arity=3,
 Str=<S,U><L,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 190 0] 451 30}]
Data.Semigroup.Internal.$w$cshowsPrec
  = \ (ww_s6uMI :: Int#) (w_s6uME :: All) (w1_s6uMF :: String) ->
      case >=# ww_s6uMI 11# of {
        __DEFAULT ->
          ++
            @ Char
            Data.Semigroup.Internal.$fShowAll3
            (unpackAppendCString#
               Data.Semigroup.Internal.$fShowAll2
               (case w_s6uME
                     `cast` (Data.Semigroup.Internal.N:All[0]
                             :: (All :: *) ~R# (Bool :: *))
                of {
                  False ->
                    ++
                      @ Char
                      GHC.Show.$fShowBool4
                      (++ @ Char Data.Semigroup.Internal.$fReadAll4 w1_s6uMF);
                  True ->
                    ++
                      @ Char
                      GHC.Show.$fShowBool2
                      (++ @ Char Data.Semigroup.Internal.$fReadAll4 w1_s6uMF)
                }));
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (++
               @ Char
               Data.Semigroup.Internal.$fShowAll3
               (unpackAppendCString#
                  Data.Semigroup.Internal.$fShowAll2
                  (case w_s6uME
                        `cast` (Data.Semigroup.Internal.N:All[0]
                                :: (All :: *) ~R# (Bool :: *))
                   of {
                     False ->
                       ++
                         @ Char
                         GHC.Show.$fShowBool4
                         (++
                            @ Char
                            Data.Semigroup.Internal.$fReadAll4
                            (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_s6uMF));
                     True ->
                       ++
                         @ Char
                         GHC.Show.$fShowBool2
                         (++
                            @ Char
                            Data.Semigroup.Internal.$fReadAll4
                            (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_s6uMF))
                   })))
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> All -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6uMD [Occ=Once!] :: Int)
                 (w1_s6uME [Occ=Once] :: All)
                 (w2_s6uMF [Occ=Once] :: String) ->
                 case w_s6uMD of { I# ww1_s6uMI [Occ=Once] ->
                 Data.Semigroup.Internal.$w$cshowsPrec ww1_s6uMI w1_s6uME w2_s6uMF
                 }}]
Data.Semigroup.Internal.$fShowAll_$cshowsPrec
  = \ (w_s6uMD :: Int) (w1_s6uME :: All) (w2_s6uMF :: String) ->
      case w_s6uMD of { I# ww1_s6uMI ->
      Data.Semigroup.Internal.$w$cshowsPrec ww1_s6uMI w1_s6uME w2_s6uMF
      }

-- RHS size: {terms: 11, types: 3, coercions: 1, joins: 0/0}
Data.Semigroup.Internal.$fShowAll_$cshow :: All -> String
[GblId,
 Arity=1,
 Str=<L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 80 0}]
Data.Semigroup.Internal.$fShowAll_$cshow
  = \ (x_i6tXp :: All) ->
      ++
        @ Char
        Data.Semigroup.Internal.$fShowAll3
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowAll2
           (case x_i6tXp
                 `cast` (Data.Semigroup.Internal.N:All[0]
                         :: (All :: *) ~R# (Bool :: *))
            of {
              False -> Data.Semigroup.Internal.$fShowAll6;
              True -> Data.Semigroup.Internal.$fShowAll5
            }))

-- RHS size: {terms: 20, types: 8, coercions: 1, joins: 0/0}
Data.Semigroup.Internal.$fShowAll1 :: All -> ShowS
[GblId,
 Arity=2,
 Str=<L,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90 0] 200 0}]
Data.Semigroup.Internal.$fShowAll1
  = \ (ds_d6tXR :: All) (x_X6ubW :: String) ->
      ++
        @ Char
        Data.Semigroup.Internal.$fShowAll3
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowAll2
           (case ds_d6tXR
                 `cast` (Data.Semigroup.Internal.N:All[0]
                         :: (All :: *) ~R# (Bool :: *))
            of {
              False ->
                ++
                  @ Char
                  GHC.Show.$fShowBool4
                  (++ @ Char Data.Semigroup.Internal.$fReadAll4 x_X6ubW);
              True ->
                ++
                  @ Char
                  GHC.Show.$fShowBool2
                  (++ @ Char Data.Semigroup.Internal.$fReadAll4 x_X6ubW)
            }))

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll_$cshowList :: [All] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i6tXs [Occ=Once] :: [All])
                 (s_i6tXt [Occ=Once] :: String) ->
                 showList__
                   @ All Data.Semigroup.Internal.$fShowAll1 ls_i6tXs s_i6tXt}]
Data.Semigroup.Internal.$fShowAll_$cshowList
  = \ (ls_i6tXs :: [All]) (s_i6tXt :: String) ->
      showList__
        @ All Data.Semigroup.Internal.$fShowAll1 ls_i6tXs s_i6tXt

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Show All
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: All
                       Data.Semigroup.Internal.$fShowAll_$cshowsPrec
                       Data.Semigroup.Internal.$fShowAll_$cshow
                       Data.Semigroup.Internal.$fShowAll_$cshowList]
Data.Semigroup.Internal.$fShowAll
  = GHC.Show.C:Show
      @ All
      Data.Semigroup.Internal.$fShowAll_$cshowsPrec
      Data.Semigroup.Internal.$fShowAll_$cshow
      Data.Semigroup.Internal.$fShowAll_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll13 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll13 = "All"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll12 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll12
  = unpackCString# Data.Semigroup.Internal.$fReadAll13

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll_lexeme1 :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadAll_lexeme1
  = Text.Read.Lex.Ident Data.Semigroup.Internal.$fReadAll12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll9 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadAll9 = "getAll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll8
  = unpackCString# Data.Semigroup.Internal.$fReadAll9

-- RHS size: {terms: 38, types: 44, coercions: 15, joins: 0/0}
Data.Semigroup.Internal.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> forall b.
        (All -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<S,U><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60] 281 30}]
Data.Semigroup.Internal.$w$creadPrec
  = \ (ww_s6uMT :: Int#)
      (@ b_s6uMP)
      (w_s6uMQ :: All -> Text.ParserCombinators.ReadP.P b_s6uMP) ->
      case <=# ww_s6uMT 11# of {
        __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_s6uMP;
        1# ->
          case Text.Read.Lex.$wexpect
                 Data.Semigroup.Internal.$fReadAll_lexeme1
                 @ b_s6uMP
                 (\ _ [Occ=Dead, OS=OneShot] ->
                    case Text.Read.Lex.$wexpect
                           Data.Semigroup.Internal.$fReadAll_lexeme
                           @ b_s6uMP
                           (\ _ [Occ=Dead, OS=OneShot] ->
                              ((((readField
                                    @ Bool
                                    Data.Semigroup.Internal.$fReadAll8
                                    (Data.Semigroup.Internal.$fReadAll7
                                     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                  <Bool>_R)
                                             :: (Text.ParserCombinators.ReadPrec.Prec
                                                 -> forall b.
                                                    (Bool -> Text.ParserCombinators.ReadP.P b)
                                                    -> Text.ParserCombinators.ReadP.P b :: *)
                                                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                       Bool :: *))))
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Bool>_R
                                         :: (Text.ParserCombinators.ReadPrec.ReadPrec Bool :: *)
                                            ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                 -> Text.ParserCombinators.ReadP.ReadP Bool :: *)))
                                  Data.Semigroup.Internal.$fReadAll6)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Bool>_R
                                       :: (Text.ParserCombinators.ReadP.ReadP Bool :: *)
                                          ~R# (forall b.
                                               (Bool -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b_s6uMP
                                (\ (a3_i6ubd :: Bool) ->
                                   case Text.Read.Lex.$wexpect
                                          Data.Semigroup.Internal.$fReadAll3
                                          @ b_s6uMP
                                          (\ _ [Occ=Dead, OS=OneShot] ->
                                             w_s6uMQ
                                               (a3_i6ubd
                                                `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                                        :: (Bool :: *) ~R# (All :: *))))
                                   of
                                   { (# ww2_i6ub0 #) ->
                                   Text.ParserCombinators.ReadP.Look @ b_s6uMP ww2_i6ub0
                                   }))
                    of
                    { (# ww2_i6ub0 #) ->
                    Text.ParserCombinators.ReadP.Look @ b_s6uMP ww2_i6ub0
                    })
          of
          { (# ww2_i6ub0 #) ->
          Text.ParserCombinators.ReadP.Look @ b_s6uMP ww2_i6ub0
          }
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (All -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><L,C(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6uMO [Occ=Once!]
                    :: Text.ParserCombinators.ReadPrec.Prec)
                 (@ b_s6uMP)
                 (w1_s6uMQ [Occ=Once]
                    :: All -> Text.ParserCombinators.ReadP.P b_s6uMP) ->
                 case w_s6uMO of { I# ww1_s6uMT [Occ=Once] ->
                 Data.Semigroup.Internal.$w$creadPrec ww1_s6uMT @ b_s6uMP w1_s6uMQ
                 }}]
Data.Semigroup.Internal.$fReadAll2
  = \ (w_s6uMO :: Text.ParserCombinators.ReadPrec.Prec)
      (@ b_s6uMP)
      (w1_s6uMQ :: All -> Text.ParserCombinators.ReadP.P b_s6uMP) ->
      case w_s6uMO of { I# ww1_s6uMT ->
      Data.Semigroup.Internal.$w$creadPrec ww1_s6uMT @ b_s6uMP w1_s6uMQ
      }

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAll1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (All -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Semigroup.Internal.$fReadAll1
  = GHC.Read.list3
      @ All
      (Data.Semigroup.Internal.$fReadAll2
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <All>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <All>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (All -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec All :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAll_$creadsPrec :: Int -> ReadS All
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_i6tWE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ All
                   (GHC.Read.list3
                      @ All
                      (Data.Semigroup.Internal.$fReadAll2
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <All>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <All>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (All -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec All :: *)))
                      n_i6tWE
                      @ All
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ All))}]
Data.Semigroup.Internal.$fReadAll_$creadsPrec
  = \ (n_i6tWE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ All
        (GHC.Read.list3
           @ All
           (Data.Semigroup.Internal.$fReadAll2
            `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <All>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <All>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> forall b.
                           (All -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec All :: *)))
           n_i6tWE
           @ All
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ All))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAll_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [All]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadAll_$creadListPrec
  = list
      @ All
      (Data.Semigroup.Internal.$fReadAll1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <All>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <All>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (All -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec All :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
Data.Semigroup.Internal.$fReadAll14
  :: Text.ParserCombinators.ReadP.P [All]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadAll14
  = (((Data.Semigroup.Internal.$fReadAll_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[All]>_R
               :: (Text.ParserCombinators.ReadPrec.ReadPrec [All] :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                       -> Text.ParserCombinators.ReadP.ReadP [All] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[All]>_R
             :: (Text.ParserCombinators.ReadP.ReadP [All] :: *)
                ~R# (forall b.
                     ([All] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [All]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [All])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadAll_$creadList :: ReadS [All]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Semigroup.Internal.$fReadAll_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [All] Data.Semigroup.Internal.$fReadAll14

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
Data.Semigroup.Internal.$fReadAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Read All
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: All
                       Data.Semigroup.Internal.$fReadAll_$creadsPrec
                       Data.Semigroup.Internal.$fReadAll_$creadList
                       Data.Semigroup.Internal.$fReadAll1
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <All>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <All>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (All -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec All :: *))
                       Data.Semigroup.Internal.$fReadAll_$creadListPrec]
Data.Semigroup.Internal.$fReadAll
  = GHC.Read.C:Read
      @ All
      Data.Semigroup.Internal.$fReadAll_$creadsPrec
      Data.Semigroup.Internal.$fReadAll_$creadList
      (Data.Semigroup.Internal.$fReadAll1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <All>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <All>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (All -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec All :: *)))
      Data.Semigroup.Internal.$fReadAll_$creadListPrec

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
Data.Semigroup.Internal.$fEqAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq All
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: All
                        GHC.Classes.$fEqBool_$c==
                        `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                ->_R <Bool>_R
                                :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *))
                        GHC.Classes.$fEqBool_$c/=
                        `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                ->_R <Bool>_R
                                :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *))]
Data.Semigroup.Internal.$fEqAll
  = GHC.Classes.C:Eq
      @ All
      (GHC.Classes.$fEqBool_$c==
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *)))
      (GHC.Classes.$fEqBool_$c/=
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
Data.Semigroup.Internal.$fOrdAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord All
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: All
                         Data.Semigroup.Internal.$fEqAll
                         GHC.Classes.$fOrdBool_$ccompare
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R <Ordering>_R
                                 :: (Bool -> Bool -> Ordering :: *)
                                    ~R# (All -> All -> Ordering :: *))
                         GHC.Classes.$fOrdBool_$c<
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *))
                         GHC.Classes.$fOrdBool_$c<=
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *))
                         GHC.Classes.$fOrdBool_$c>
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *))
                         GHC.Classes.$fOrdBool_$c>=
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R <Bool>_R
                                 :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *))
                         GHC.Classes.$fOrdBool_$cmax
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *))
                         GHC.Classes.$fOrdBool_$cmin
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *))]
Data.Semigroup.Internal.$fOrdAll
  = GHC.Classes.C:Ord
      @ All
      Data.Semigroup.Internal.$fEqAll
      (GHC.Classes.$fOrdBool_$ccompare
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R <Ordering>_R
               :: (Bool -> Bool -> Ordering :: *)
                  ~R# (All -> All -> Ordering :: *)))
      (GHC.Classes.$fOrdBool_$c<
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$c<=
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$c>
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$c>=
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R <Bool>_R
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> Bool :: *)))
      (GHC.Classes.$fOrdBool_$cmax
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *)))
      (GHC.Classes.$fOrdBool_$cmin
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericEndo1
  :: forall a x. Rep (Endo a) x -> Rep (Endo a) x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6sIH)
                 (@ x_a6sJd)
                 (ds_d6tXL [Occ=Once] :: Rep (Endo a_a6sIH) x_a6sJd) ->
                 ds_d6tXL}]
Data.Semigroup.Internal.$fGenericEndo1
  = \ (@ a_a6sIH)
      (@ x_a6sJd)
      (ds_d6tXL :: Rep (Endo a_a6sIH) x_a6sJd) ->
      ds_d6tXL

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericEndo2
  :: forall a x. Endo a -> Endo a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_X6sXs)
                 (@ x_a6sIL)
                 (x1_a6srE [Occ=Once] :: Endo a_X6sXs) ->
                 x1_a6srE}]
Data.Semigroup.Internal.$fGenericEndo2
  = \ (@ a_X6sXs) (@ x_a6sIL) (x1_a6srE :: Endo a_X6sXs) -> x1_a6srE

-- RHS size: {terms: 4, types: 6, coercions: 206, joins: 0/0}
Data.Semigroup.Internal.$fGenericEndo [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Generic (Endo a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ a_a6r2o) ->
       GHC.Generics.C:Generic TYPE: Endo a_a6r2o
                              (Data.Semigroup.Internal.$fGenericEndo2 @ a_a6r2o)
                              `cast` (forall (x :: <*>_N).
                                      <Endo a_a6r2o>_R
                                      ->_R Data.Semigroup.Internal.N:Endo[0]
                                               <a_a6r2o>_R ; (Sym (GHC.Generics.N:K1[0]
                                                                       <*>_N
                                                                       <R>_P
                                                                       <a_a6r2o -> a_a6r2o>_R
                                                                       <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <S>_P
                                                                                          <'MetaSel
                                                                                             ('Just
                                                                                                "appEndo")
                                                                                             'NoSourceUnpackedness
                                                                                             'NoSourceStrictness
                                                                                             'DecidedLazy>_P
                                                                                          <K1
                                                                                             R
                                                                                             (a_a6r2o
                                                                                              -> a_a6r2o)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                          <*>_N
                                                                                                                          <C>_P
                                                                                                                          <'MetaCons
                                                                                                                             "Endo"
                                                                                                                             'PrefixI
                                                                                                                             'True>_P
                                                                                                                          <M1
                                                                                                                             S
                                                                                                                             ('MetaSel
                                                                                                                                ('Just
                                                                                                                                   "appEndo")
                                                                                                                                'NoSourceUnpackedness
                                                                                                                                'NoSourceStrictness
                                                                                                                                'DecidedLazy)
                                                                                                                             (K1
                                                                                                                                R
                                                                                                                                (a_a6r2o
                                                                                                                                 -> a_a6r2o))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                              <*>_N
                                                                                                                                                              <D>_P
                                                                                                                                                              <'MetaData
                                                                                                                                                                 "Endo"
                                                                                                                                                                 "Data.Semigroup.Internal"
                                                                                                                                                                 "base"
                                                                                                                                                                 'True>_P
                                                                                                                                                              <M1
                                                                                                                                                                 C
                                                                                                                                                                 ('MetaCons
                                                                                                                                                                    "Endo"
                                                                                                                                                                    'PrefixI
                                                                                                                                                                    'True)
                                                                                                                                                                 (M1
                                                                                                                                                                    S
                                                                                                                                                                    ('MetaSel
                                                                                                                                                                       ('Just
                                                                                                                                                                          "appEndo")
                                                                                                                                                                       'NoSourceUnpackedness
                                                                                                                                                                       'NoSourceStrictness
                                                                                                                                                                       'DecidedLazy)
                                                                                                                                                                    (K1
                                                                                                                                                                       R
                                                                                                                                                                       (a_a6r2o
                                                                                                                                                                        -> a_a6r2o)))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Endo[0]
                                                                                                                                                                                                          <a_a6r2o>_N))))) <x>_N)
                                      :: (forall x. Endo a_a6r2o -> Endo a_a6r2o :: *)
                                         ~R# (forall x. Endo a_a6r2o -> Rep (Endo a_a6r2o) x :: *))
                              (Data.Semigroup.Internal.$fGenericEndo1 @ a_a6r2o)
                              `cast` (forall (x :: <*>_N).
                                      <Rep (Endo a_a6r2o) x>_R
                                      ->_R (Sub (Data.Semigroup.Internal.Rep_Endo[0]
                                                     <a_a6r2o>_N) ; (GHC.Generics.N:M1[0]
                                                                         <*>_N
                                                                         <D>_P
                                                                         <'MetaData
                                                                            "Endo"
                                                                            "Data.Semigroup.Internal"
                                                                            "base"
                                                                            'True>_P
                                                                         <M1
                                                                            C
                                                                            ('MetaCons
                                                                               "Endo"
                                                                               'PrefixI
                                                                               'True)
                                                                            (M1
                                                                               S
                                                                               ('MetaSel
                                                                                  ('Just "appEndo")
                                                                                  'NoSourceUnpackedness
                                                                                  'NoSourceStrictness
                                                                                  'DecidedLazy)
                                                                               (K1
                                                                                  R
                                                                                  (a_a6r2o
                                                                                   -> a_a6r2o)))>_R ; (GHC.Generics.N:M1[0]
                                                                                                           <*>_N
                                                                                                           <C>_P
                                                                                                           <'MetaCons
                                                                                                              "Endo"
                                                                                                              'PrefixI
                                                                                                              'True>_P
                                                                                                           <M1
                                                                                                              S
                                                                                                              ('MetaSel
                                                                                                                 ('Just
                                                                                                                    "appEndo")
                                                                                                                 'NoSourceUnpackedness
                                                                                                                 'NoSourceStrictness
                                                                                                                 'DecidedLazy)
                                                                                                              (K1
                                                                                                                 R
                                                                                                                 (a_a6r2o
                                                                                                                  -> a_a6r2o))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                        <*>_N
                                                                                                                                        <S>_P
                                                                                                                                        <'MetaSel
                                                                                                                                           ('Just
                                                                                                                                              "appEndo")
                                                                                                                                           'NoSourceUnpackedness
                                                                                                                                           'NoSourceStrictness
                                                                                                                                           'DecidedLazy>_P
                                                                                                                                        <K1
                                                                                                                                           R
                                                                                                                                           (a_a6r2o
                                                                                                                                            -> a_a6r2o)>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                           <*>_N
                                                                                                                                                                           <R>_P
                                                                                                                                                                           <a_a6r2o
                                                                                                                                                                            -> a_a6r2o>_R
                                                                                                                                                                           <x>_P ; Sym (Data.Semigroup.Internal.N:Endo[0]
                                                                                                                                                                                            <a_a6r2o>_R))
                                      :: (forall x.
                                          Rep (Endo a_a6r2o) x -> Rep (Endo a_a6r2o) x :: *)
                                         ~R# (forall x. Rep (Endo a_a6r2o) x -> Endo a_a6r2o :: *))]
Data.Semigroup.Internal.$fGenericEndo
  = \ (@ a_X6sXx) ->
      GHC.Generics.C:Generic
        @ (Endo a_X6sXx)
        ((Data.Semigroup.Internal.$fGenericEndo2 @ a_X6sXx)
         `cast` (forall (x :: <*>_N).
                 <Endo a_X6sXx>_R
                 ->_R Data.Semigroup.Internal.N:Endo[0]
                          <a_X6sXx>_R ; (Sym (GHC.Generics.N:K1[0]
                                                  <*>_N
                                                  <R>_P
                                                  <a_X6sXx -> a_X6sXx>_R
                                                  <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                     <*>_N
                                                                     <S>_P
                                                                     <'MetaSel
                                                                        ('Just "appEndo")
                                                                        'NoSourceUnpackedness
                                                                        'NoSourceStrictness
                                                                        'DecidedLazy>_P
                                                                     <K1
                                                                        R
                                                                        (a_X6sXx
                                                                         -> a_X6sXx)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                     <*>_N
                                                                                                     <C>_P
                                                                                                     <'MetaCons
                                                                                                        "Endo"
                                                                                                        'PrefixI
                                                                                                        'True>_P
                                                                                                     <M1
                                                                                                        S
                                                                                                        ('MetaSel
                                                                                                           ('Just
                                                                                                              "appEndo")
                                                                                                           'NoSourceUnpackedness
                                                                                                           'NoSourceStrictness
                                                                                                           'DecidedLazy)
                                                                                                        (K1
                                                                                                           R
                                                                                                           (a_X6sXx
                                                                                                            -> a_X6sXx))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                         <*>_N
                                                                                                                                         <D>_P
                                                                                                                                         <'MetaData
                                                                                                                                            "Endo"
                                                                                                                                            "Data.Semigroup.Internal"
                                                                                                                                            "base"
                                                                                                                                            'True>_P
                                                                                                                                         <M1
                                                                                                                                            C
                                                                                                                                            ('MetaCons
                                                                                                                                               "Endo"
                                                                                                                                               'PrefixI
                                                                                                                                               'True)
                                                                                                                                            (M1
                                                                                                                                               S
                                                                                                                                               ('MetaSel
                                                                                                                                                  ('Just
                                                                                                                                                     "appEndo")
                                                                                                                                                  'NoSourceUnpackedness
                                                                                                                                                  'NoSourceStrictness
                                                                                                                                                  'DecidedLazy)
                                                                                                                                               (K1
                                                                                                                                                  R
                                                                                                                                                  (a_X6sXx
                                                                                                                                                   -> a_X6sXx)))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Endo[0]
                                                                                                                                                                                     <a_X6sXx>_N))))) <x>_N)
                 :: (forall x. Endo a_X6sXx -> Endo a_X6sXx :: *)
                    ~R# (forall x. Endo a_X6sXx -> Rep (Endo a_X6sXx) x :: *)))
        ((Data.Semigroup.Internal.$fGenericEndo1 @ a_X6sXx)
         `cast` (forall (x :: <*>_N).
                 <Rep (Endo a_X6sXx) x>_R
                 ->_R (Sub (Data.Semigroup.Internal.Rep_Endo[0]
                                <a_X6sXx>_N) ; (GHC.Generics.N:M1[0]
                                                    <*>_N
                                                    <D>_P
                                                    <'MetaData
                                                       "Endo"
                                                       "Data.Semigroup.Internal"
                                                       "base"
                                                       'True>_P
                                                    <M1
                                                       C
                                                       ('MetaCons "Endo" 'PrefixI 'True)
                                                       (M1
                                                          S
                                                          ('MetaSel
                                                             ('Just "appEndo")
                                                             'NoSourceUnpackedness
                                                             'NoSourceStrictness
                                                             'DecidedLazy)
                                                          (K1
                                                             R
                                                             (a_X6sXx
                                                              -> a_X6sXx)))>_R ; (GHC.Generics.N:M1[0]
                                                                                      <*>_N
                                                                                      <C>_P
                                                                                      <'MetaCons
                                                                                         "Endo"
                                                                                         'PrefixI
                                                                                         'True>_P
                                                                                      <M1
                                                                                         S
                                                                                         ('MetaSel
                                                                                            ('Just
                                                                                               "appEndo")
                                                                                            'NoSourceUnpackedness
                                                                                            'NoSourceStrictness
                                                                                            'DecidedLazy)
                                                                                         (K1
                                                                                            R
                                                                                            (a_X6sXx
                                                                                             -> a_X6sXx))>_R ; GHC.Generics.N:M1[0]
                                                                                                                   <*>_N
                                                                                                                   <S>_P
                                                                                                                   <'MetaSel
                                                                                                                      ('Just
                                                                                                                         "appEndo")
                                                                                                                      'NoSourceUnpackedness
                                                                                                                      'NoSourceStrictness
                                                                                                                      'DecidedLazy>_P
                                                                                                                   <K1
                                                                                                                      R
                                                                                                                      (a_X6sXx
                                                                                                                       -> a_X6sXx)>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                      <*>_N
                                                                                                                                                      <R>_P
                                                                                                                                                      <a_X6sXx
                                                                                                                                                       -> a_X6sXx>_R
                                                                                                                                                      <x>_P ; Sym (Data.Semigroup.Internal.N:Endo[0]
                                                                                                                                                                       <a_X6sXx>_R))
                 :: (forall x. Rep (Endo a_X6sXx) x -> Rep (Endo a_X6sXx) x :: *)
                    ~R# (forall x. Rep (Endo a_X6sXx) x -> Endo a_X6sXx :: *)))

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Dual1
  :: forall a. Rep1 Dual a -> Rep1 Dual a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6sIg) (ds_d6tXD [Occ=Once] :: Rep1 Dual a_a6sIg) ->
                 ds_d6tXD}]
Data.Semigroup.Internal.$fGeneric1Dual1
  = \ (@ a_a6sIg) (ds_d6tXD :: Rep1 Dual a_a6sIg) -> ds_d6tXD

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Dual2
  :: forall a. Dual a -> Dual a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6sHP) (x_a6srA [Occ=Once] :: Dual a_a6sHP) ->
                 x_a6srA}]
Data.Semigroup.Internal.$fGeneric1Dual2
  = \ (@ a_a6sHP) (x_a6srA :: Dual a_a6sHP) -> x_a6srA

-- RHS size: {terms: 3, types: 3, coercions: 163, joins: 0/0}
Data.Semigroup.Internal.$fGeneric1Dual [InlPrag=NOUSERINLINE CONLIKE]
  :: Generic1 Dual
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Generics.C:Generic1 TYPE: *
                               TYPE: Dual
                               Data.Semigroup.Internal.$fGeneric1Dual2
                               `cast` (forall (a :: <*>_N).
                                       <Dual a>_R
                                       ->_R Data.Semigroup.Internal.N:Dual[0]
                                                (Sym (GHC.Generics.N:Par1[0]
                                                          <a>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                             <*>_N
                                                                             <S>_P
                                                                             <'MetaSel
                                                                                ('Just "getDual")
                                                                                'NoSourceUnpackedness
                                                                                'NoSourceStrictness
                                                                                'DecidedLazy>_P
                                                                             <Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                   <*>_N
                                                                                                   <C>_P
                                                                                                   <'MetaCons
                                                                                                      "Dual"
                                                                                                      'PrefixI
                                                                                                      'True>_P
                                                                                                   <M1
                                                                                                      S
                                                                                                      ('MetaSel
                                                                                                         ('Just
                                                                                                            "getDual")
                                                                                                         'NoSourceUnpackedness
                                                                                                         'NoSourceStrictness
                                                                                                         'DecidedLazy)
                                                                                                      Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                           <*>_N
                                                                                                                           <D>_P
                                                                                                                           <'MetaData
                                                                                                                              "Dual"
                                                                                                                              "Data.Semigroup.Internal"
                                                                                                                              "base"
                                                                                                                              'True>_P
                                                                                                                           <M1
                                                                                                                              C
                                                                                                                              ('MetaCons
                                                                                                                                 "Dual"
                                                                                                                                 'PrefixI
                                                                                                                                 'True)
                                                                                                                              (M1
                                                                                                                                 S
                                                                                                                                 ('MetaSel
                                                                                                                                    ('Just
                                                                                                                                       "getDual")
                                                                                                                                    'NoSourceUnpackedness
                                                                                                                                    'NoSourceStrictness
                                                                                                                                    'DecidedLazy)
                                                                                                                                 Par1)>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Dual[0]))))) <a>_N)
                                       :: (forall a. Dual a -> Dual a :: *)
                                          ~R# (forall a. Dual a -> Rep1 Dual a :: *))
                               Data.Semigroup.Internal.$fGeneric1Dual1
                               `cast` (forall (a :: <*>_N).
                                       <Rep1 Dual a>_R
                                       ->_R (Sub (Data.Semigroup.Internal.Rep1_Dual[0]) ; (GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <D>_P
                                                                                               <'MetaData
                                                                                                  "Dual"
                                                                                                  "Data.Semigroup.Internal"
                                                                                                  "base"
                                                                                                  'True>_P
                                                                                               <M1
                                                                                                  C
                                                                                                  ('MetaCons
                                                                                                     "Dual"
                                                                                                     'PrefixI
                                                                                                     'True)
                                                                                                  (M1
                                                                                                     S
                                                                                                     ('MetaSel
                                                                                                        ('Just
                                                                                                           "getDual")
                                                                                                        'NoSourceUnpackedness
                                                                                                        'NoSourceStrictness
                                                                                                        'DecidedLazy)
                                                                                                     Par1)>_R ; (GHC.Generics.N:M1[0]
                                                                                                                     <*>_N
                                                                                                                     <C>_P
                                                                                                                     <'MetaCons
                                                                                                                        "Dual"
                                                                                                                        'PrefixI
                                                                                                                        'True>_P
                                                                                                                     <M1
                                                                                                                        S
                                                                                                                        ('MetaSel
                                                                                                                           ('Just
                                                                                                                              "getDual")
                                                                                                                           'NoSourceUnpackedness
                                                                                                                           'NoSourceStrictness
                                                                                                                           'DecidedLazy)
                                                                                                                        Par1>_R ; GHC.Generics.N:M1[0]
                                                                                                                                      <*>_N
                                                                                                                                      <S>_P
                                                                                                                                      <'MetaSel
                                                                                                                                         ('Just
                                                                                                                                            "getDual")
                                                                                                                                         'NoSourceUnpackedness
                                                                                                                                         'NoSourceStrictness
                                                                                                                                         'DecidedLazy>_P
                                                                                                                                      <Par1>_R))) <a>_N ; GHC.Generics.N:Par1[0]
                                                                                                                                                              (Sym (Data.Semigroup.Internal.N:Dual[0]
                                                                                                                                                                        <a>_R))
                                       :: (forall a. Rep1 Dual a -> Rep1 Dual a :: *)
                                          ~R# (forall a. Rep1 Dual a -> Dual a :: *))]
Data.Semigroup.Internal.$fGeneric1Dual
  = GHC.Generics.C:Generic1
      @ *
      @ Dual
      (Data.Semigroup.Internal.$fGeneric1Dual2
       `cast` (forall (a :: <*>_N).
               <Dual a>_R
               ->_R Data.Semigroup.Internal.N:Dual[0]
                        (Sym (GHC.Generics.N:Par1[0] <a>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                        <*>_N
                                                                        <S>_P
                                                                        <'MetaSel
                                                                           ('Just "getDual")
                                                                           'NoSourceUnpackedness
                                                                           'NoSourceStrictness
                                                                           'DecidedLazy>_P
                                                                        <Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                              <*>_N
                                                                                              <C>_P
                                                                                              <'MetaCons
                                                                                                 "Dual"
                                                                                                 'PrefixI
                                                                                                 'True>_P
                                                                                              <M1
                                                                                                 S
                                                                                                 ('MetaSel
                                                                                                    ('Just
                                                                                                       "getDual")
                                                                                                    'NoSourceUnpackedness
                                                                                                    'NoSourceStrictness
                                                                                                    'DecidedLazy)
                                                                                                 Par1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                      <*>_N
                                                                                                                      <D>_P
                                                                                                                      <'MetaData
                                                                                                                         "Dual"
                                                                                                                         "Data.Semigroup.Internal"
                                                                                                                         "base"
                                                                                                                         'True>_P
                                                                                                                      <M1
                                                                                                                         C
                                                                                                                         ('MetaCons
                                                                                                                            "Dual"
                                                                                                                            'PrefixI
                                                                                                                            'True)
                                                                                                                         (M1
                                                                                                                            S
                                                                                                                            ('MetaSel
                                                                                                                               ('Just
                                                                                                                                  "getDual")
                                                                                                                               'NoSourceUnpackedness
                                                                                                                               'NoSourceStrictness
                                                                                                                               'DecidedLazy)
                                                                                                                            Par1)>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep1_Dual[0]))))) <a>_N)
               :: (forall a. Dual a -> Dual a :: *)
                  ~R# (forall a. Dual a -> Rep1 Dual a :: *)))
      (Data.Semigroup.Internal.$fGeneric1Dual1
       `cast` (forall (a :: <*>_N).
               <Rep1 Dual a>_R
               ->_R (Sub (Data.Semigroup.Internal.Rep1_Dual[0]) ; (GHC.Generics.N:M1[0]
                                                                       <*>_N
                                                                       <D>_P
                                                                       <'MetaData
                                                                          "Dual"
                                                                          "Data.Semigroup.Internal"
                                                                          "base"
                                                                          'True>_P
                                                                       <M1
                                                                          C
                                                                          ('MetaCons
                                                                             "Dual" 'PrefixI 'True)
                                                                          (M1
                                                                             S
                                                                             ('MetaSel
                                                                                ('Just "getDual")
                                                                                'NoSourceUnpackedness
                                                                                'NoSourceStrictness
                                                                                'DecidedLazy)
                                                                             Par1)>_R ; (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <C>_P
                                                                                             <'MetaCons
                                                                                                "Dual"
                                                                                                'PrefixI
                                                                                                'True>_P
                                                                                             <M1
                                                                                                S
                                                                                                ('MetaSel
                                                                                                   ('Just
                                                                                                      "getDual")
                                                                                                   'NoSourceUnpackedness
                                                                                                   'NoSourceStrictness
                                                                                                   'DecidedLazy)
                                                                                                Par1>_R ; GHC.Generics.N:M1[0]
                                                                                                              <*>_N
                                                                                                              <S>_P
                                                                                                              <'MetaSel
                                                                                                                 ('Just
                                                                                                                    "getDual")
                                                                                                                 'NoSourceUnpackedness
                                                                                                                 'NoSourceStrictness
                                                                                                                 'DecidedLazy>_P
                                                                                                              <Par1>_R))) <a>_N ; GHC.Generics.N:Par1[0]
                                                                                                                                      (Sym (Data.Semigroup.Internal.N:Dual[0]
                                                                                                                                                <a>_R))
               :: (forall a. Rep1 Dual a -> Rep1 Dual a :: *)
                  ~R# (forall a. Rep1 Dual a -> Dual a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericDual1
  :: forall a x. Rep (Dual a) x -> Rep (Dual a) x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6sGJ)
                 (@ x_a6sHj)
                 (ds_d6tXx [Occ=Once] :: Rep (Dual a_a6sGJ) x_a6sHj) ->
                 ds_d6tXx}]
Data.Semigroup.Internal.$fGenericDual1
  = \ (@ a_a6sGJ)
      (@ x_a6sHj)
      (ds_d6tXx :: Rep (Dual a_a6sGJ) x_a6sHj) ->
      ds_d6tXx

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fGenericDual2
  :: forall a x. Dual a -> Dual a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_X6sVO)
                 (@ x_a6sGO)
                 (x1_a6srw [Occ=Once] :: Dual a_X6sVO) ->
                 x1_a6srw}]
Data.Semigroup.Internal.$fGenericDual2
  = \ (@ a_X6sVO) (@ x_a6sGO) (x1_a6srw :: Dual a_X6sVO) -> x1_a6srw

-- RHS size: {terms: 4, types: 6, coercions: 199, joins: 0/0}
Data.Semigroup.Internal.$fGenericDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Generic (Dual a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ a_a6r2p) ->
       GHC.Generics.C:Generic TYPE: Dual a_a6r2p
                              (Data.Semigroup.Internal.$fGenericDual2 @ a_a6r2p)
                              `cast` (forall (x :: <*>_N).
                                      <Dual a_a6r2p>_R
                                      ->_R Data.Semigroup.Internal.N:Dual[0]
                                               (Sym (GHC.Generics.N:K1[0]
                                                         <*>_N
                                                         <R>_P
                                                         <a_a6r2p>_R
                                                         <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                            <*>_N
                                                                            <S>_P
                                                                            <'MetaSel
                                                                               ('Just "getDual")
                                                                               'NoSourceUnpackedness
                                                                               'NoSourceStrictness
                                                                               'DecidedLazy>_P
                                                                            <K1
                                                                               R
                                                                               a_a6r2p>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <C>_P
                                                                                                       <'MetaCons
                                                                                                          "Dual"
                                                                                                          'PrefixI
                                                                                                          'True>_P
                                                                                                       <M1
                                                                                                          S
                                                                                                          ('MetaSel
                                                                                                             ('Just
                                                                                                                "getDual")
                                                                                                             'NoSourceUnpackedness
                                                                                                             'NoSourceStrictness
                                                                                                             'DecidedLazy)
                                                                                                          (K1
                                                                                                             R
                                                                                                             a_a6r2p)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                      <*>_N
                                                                                                                                      <D>_P
                                                                                                                                      <'MetaData
                                                                                                                                         "Dual"
                                                                                                                                         "Data.Semigroup.Internal"
                                                                                                                                         "base"
                                                                                                                                         'True>_P
                                                                                                                                      <M1
                                                                                                                                         C
                                                                                                                                         ('MetaCons
                                                                                                                                            "Dual"
                                                                                                                                            'PrefixI
                                                                                                                                            'True)
                                                                                                                                         (M1
                                                                                                                                            S
                                                                                                                                            ('MetaSel
                                                                                                                                               ('Just
                                                                                                                                                  "getDual")
                                                                                                                                               'NoSourceUnpackedness
                                                                                                                                               'NoSourceStrictness
                                                                                                                                               'DecidedLazy)
                                                                                                                                            (K1
                                                                                                                                               R
                                                                                                                                               a_a6r2p))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Dual[0]
                                                                                                                                                                             <a_a6r2p>_N))))) <x>_N)
                                      :: (forall x. Dual a_a6r2p -> Dual a_a6r2p :: *)
                                         ~R# (forall x. Dual a_a6r2p -> Rep (Dual a_a6r2p) x :: *))
                              (Data.Semigroup.Internal.$fGenericDual1 @ a_a6r2p)
                              `cast` (forall (x :: <*>_N).
                                      <Rep (Dual a_a6r2p) x>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                                    (Sym (GHC.Generics.N:K1[0]
                                                              <*>_N
                                                              <R>_P
                                                              <a_a6r2p>_R
                                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                 <*>_N
                                                                                 <S>_P
                                                                                 <'MetaSel
                                                                                    ('Just
                                                                                       "getDual")
                                                                                    'NoSourceUnpackedness
                                                                                    'NoSourceStrictness
                                                                                    'DecidedLazy>_P
                                                                                 <K1
                                                                                    R
                                                                                    a_a6r2p>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <C>_P
                                                                                                            <'MetaCons
                                                                                                               "Dual"
                                                                                                               'PrefixI
                                                                                                               'True>_P
                                                                                                            <M1
                                                                                                               S
                                                                                                               ('MetaSel
                                                                                                                  ('Just
                                                                                                                     "getDual")
                                                                                                                  'NoSourceUnpackedness
                                                                                                                  'NoSourceStrictness
                                                                                                                  'DecidedLazy)
                                                                                                               (K1
                                                                                                                  R
                                                                                                                  a_a6r2p)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <D>_P
                                                                                                                                           <'MetaData
                                                                                                                                              "Dual"
                                                                                                                                              "Data.Semigroup.Internal"
                                                                                                                                              "base"
                                                                                                                                              'True>_P
                                                                                                                                           <M1
                                                                                                                                              C
                                                                                                                                              ('MetaCons
                                                                                                                                                 "Dual"
                                                                                                                                                 'PrefixI
                                                                                                                                                 'True)
                                                                                                                                              (M1
                                                                                                                                                 S
                                                                                                                                                 ('MetaSel
                                                                                                                                                    ('Just
                                                                                                                                                       "getDual")
                                                                                                                                                    'NoSourceUnpackedness
                                                                                                                                                    'NoSourceStrictness
                                                                                                                                                    'DecidedLazy)
                                                                                                                                                 (K1
                                                                                                                                                    R
                                                                                                                                                    a_a6r2p))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Dual[0]
                                                                                                                                                                                  <a_a6r2p>_N))))) <x>_N))
                                      :: (forall x.
                                          Rep (Dual a_a6r2p) x -> Rep (Dual a_a6r2p) x :: *)
                                         ~R# (forall x. Rep (Dual a_a6r2p) x -> Dual a_a6r2p :: *))]
Data.Semigroup.Internal.$fGenericDual
  = \ (@ a_X6sVT) ->
      GHC.Generics.C:Generic
        @ (Dual a_X6sVT)
        ((Data.Semigroup.Internal.$fGenericDual2 @ a_X6sVT)
         `cast` (forall (x :: <*>_N).
                 <Dual a_X6sVT>_R
                 ->_R Data.Semigroup.Internal.N:Dual[0]
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N <R>_P <a_X6sVT>_R <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                               <*>_N
                                                                               <S>_P
                                                                               <'MetaSel
                                                                                  ('Just "getDual")
                                                                                  'NoSourceUnpackedness
                                                                                  'NoSourceStrictness
                                                                                  'DecidedLazy>_P
                                                                               <K1
                                                                                  R
                                                                                  a_X6sVT>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                          <*>_N
                                                                                                          <C>_P
                                                                                                          <'MetaCons
                                                                                                             "Dual"
                                                                                                             'PrefixI
                                                                                                             'True>_P
                                                                                                          <M1
                                                                                                             S
                                                                                                             ('MetaSel
                                                                                                                ('Just
                                                                                                                   "getDual")
                                                                                                                'NoSourceUnpackedness
                                                                                                                'NoSourceStrictness
                                                                                                                'DecidedLazy)
                                                                                                             (K1
                                                                                                                R
                                                                                                                a_X6sVT)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                         <*>_N
                                                                                                                                         <D>_P
                                                                                                                                         <'MetaData
                                                                                                                                            "Dual"
                                                                                                                                            "Data.Semigroup.Internal"
                                                                                                                                            "base"
                                                                                                                                            'True>_P
                                                                                                                                         <M1
                                                                                                                                            C
                                                                                                                                            ('MetaCons
                                                                                                                                               "Dual"
                                                                                                                                               'PrefixI
                                                                                                                                               'True)
                                                                                                                                            (M1
                                                                                                                                               S
                                                                                                                                               ('MetaSel
                                                                                                                                                  ('Just
                                                                                                                                                     "getDual")
                                                                                                                                                  'NoSourceUnpackedness
                                                                                                                                                  'NoSourceStrictness
                                                                                                                                                  'DecidedLazy)
                                                                                                                                               (K1
                                                                                                                                                  R
                                                                                                                                                  a_X6sVT))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Dual[0]
                                                                                                                                                                                <a_X6sVT>_N))))) <x>_N)
                 :: (forall x. Dual a_X6sVT -> Dual a_X6sVT :: *)
                    ~R# (forall x. Dual a_X6sVT -> Rep (Dual a_X6sVT) x :: *)))
        ((Data.Semigroup.Internal.$fGenericDual1 @ a_X6sVT)
         `cast` (forall (x :: <*>_N).
                 <Rep (Dual a_X6sVT) x>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                               (Sym (GHC.Generics.N:K1[0]
                                         <*>_N <R>_P <a_X6sVT>_R <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                    <*>_N
                                                                                    <S>_P
                                                                                    <'MetaSel
                                                                                       ('Just
                                                                                          "getDual")
                                                                                       'NoSourceUnpackedness
                                                                                       'NoSourceStrictness
                                                                                       'DecidedLazy>_P
                                                                                    <K1
                                                                                       R
                                                                                       a_X6sVT>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                               <*>_N
                                                                                                               <C>_P
                                                                                                               <'MetaCons
                                                                                                                  "Dual"
                                                                                                                  'PrefixI
                                                                                                                  'True>_P
                                                                                                               <M1
                                                                                                                  S
                                                                                                                  ('MetaSel
                                                                                                                     ('Just
                                                                                                                        "getDual")
                                                                                                                     'NoSourceUnpackedness
                                                                                                                     'NoSourceStrictness
                                                                                                                     'DecidedLazy)
                                                                                                                  (K1
                                                                                                                     R
                                                                                                                     a_X6sVT)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                              <*>_N
                                                                                                                                              <D>_P
                                                                                                                                              <'MetaData
                                                                                                                                                 "Dual"
                                                                                                                                                 "Data.Semigroup.Internal"
                                                                                                                                                 "base"
                                                                                                                                                 'True>_P
                                                                                                                                              <M1
                                                                                                                                                 C
                                                                                                                                                 ('MetaCons
                                                                                                                                                    "Dual"
                                                                                                                                                    'PrefixI
                                                                                                                                                    'True)
                                                                                                                                                 (M1
                                                                                                                                                    S
                                                                                                                                                    ('MetaSel
                                                                                                                                                       ('Just
                                                                                                                                                          "getDual")
                                                                                                                                                       'NoSourceUnpackedness
                                                                                                                                                       'NoSourceStrictness
                                                                                                                                                       'DecidedLazy)
                                                                                                                                                    (K1
                                                                                                                                                       R
                                                                                                                                                       a_X6sVT))>_R) ; Sub (Sym (Data.Semigroup.Internal.Rep_Dual[0]
                                                                                                                                                                                     <a_X6sVT>_N))))) <x>_N))
                 :: (forall x. Rep (Dual a_X6sVT) x -> Rep (Dual a_X6sVT) x :: *)
                    ~R# (forall x. Rep (Dual a_X6sVT) x -> Dual a_X6sVT :: *)))

-- RHS size: {terms: 7, types: 8, coercions: 6, joins: 0/0}
Data.Semigroup.Internal.$fBoundedDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Bounded a => Bounded (Dual a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2p) (v_Xff :: Bounded a_a6r2p) ->
       GHC.Enum.C:Bounded TYPE: Dual a_a6r2p
                          (minBound @ a_a6r2p v_Xff)
                          `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                  :: (a_a6r2p :: *) ~R# (Dual a_a6r2p :: *))
                          (maxBound @ a_a6r2p v_Xff)
                          `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                  :: (a_a6r2p :: *) ~R# (Dual a_a6r2p :: *))]
Data.Semigroup.Internal.$fBoundedDual
  = \ (@ a_a6sGr) ($dBounded_a6sGs :: Bounded a_a6sGr) ->
      GHC.Enum.C:Bounded
        @ (Dual a_a6sGr)
        ((minBound @ a_a6sGr $dBounded_a6sGs)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sGr>_R)
                 :: (a_a6sGr :: *) ~R# (Dual a_a6sGr :: *)))
        ((maxBound @ a_a6sGr $dBounded_a6sGs)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sGr>_R)
                 :: (a_a6sGr :: *) ~R# (Dual a_a6sGr :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowDual2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fShowDual2 = "Dual {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowDual1 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Semigroup.Internal.$fShowDual1 = "getDual = "#

-- RHS size: {terms: 37, types: 15, coercions: 2, joins: 0/1}
Data.Semigroup.Internal.$w$cshowsPrec3 [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int# -> Dual a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 331 120}]
Data.Semigroup.Internal.$w$cshowsPrec3
  = \ (@ a_s6uMW)
      (w_s6uMX :: Show a_s6uMW)
      (ww_s6uN2 :: Int#)
      (w1_s6uMZ :: Dual a_s6uMW) ->
      let {
        f_s6ump [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f_s6ump
          = showsPrec
              @ a_s6uMW
              w_s6uMX
              Data.Semigroup.Internal.$fShowAlt1
              (w1_s6uMZ
               `cast` (Data.Semigroup.Internal.N:Dual[0] <a_s6uMW>_R
                       :: (Dual a_s6uMW :: *) ~R# (a_s6uMW :: *))) } in
      case >=# ww_s6uN2 11# of {
        __DEFAULT ->
          \ (x_X6ucT :: String) ->
            unpackAppendCString#
              Data.Semigroup.Internal.$fShowDual2
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowDual1
                 (f_s6ump
                    (unpackAppendCString#
                       Data.Semigroup.Internal.$fReadAll5 x_X6ucT)));
        1# ->
          \ (x_i6tXd :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (unpackAppendCString#
                 Data.Semigroup.Internal.$fShowDual2
                 (unpackAppendCString#
                    Data.Semigroup.Internal.$fShowDual1
                    (f_s6ump
                       (unpackAppendCString#
                          Data.Semigroup.Internal.$fReadAll5
                          (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i6tXd)))))
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowDual_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int -> Dual a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s6uMW)
                 (w_s6uMX [Occ=Once] :: Show a_s6uMW)
                 (w1_s6uMY [Occ=Once!] :: Int)
                 (w2_s6uMZ [Occ=Once] :: Dual a_s6uMW) ->
                 case w1_s6uMY of { I# ww1_s6uN2 [Occ=Once] ->
                 Data.Semigroup.Internal.$w$cshowsPrec3
                   @ a_s6uMW w_s6uMX ww1_s6uN2 w2_s6uMZ
                 }}]
Data.Semigroup.Internal.$fShowDual_$cshowsPrec
  = \ (@ a_s6uMW)
      (w_s6uMX :: Show a_s6uMW)
      (w1_s6uMY :: Int)
      (w2_s6uMZ :: Dual a_s6uMW) ->
      case w1_s6uMY of { I# ww1_s6uN2 ->
      Data.Semigroup.Internal.$w$cshowsPrec3
        @ a_s6uMW w_s6uMX ww1_s6uN2 w2_s6uMZ
      }

-- RHS size: {terms: 12, types: 7, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fShowDual_$cshow
  :: forall a. Show a => Dual a -> String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 110 0}]
Data.Semigroup.Internal.$fShowDual_$cshow
  = \ (@ a_a6sFL)
      ($dShow_a6sFM :: Show a_a6sFL)
      (x_i6tXp :: Dual a_a6sFL) ->
      unpackAppendCString#
        Data.Semigroup.Internal.$fShowDual2
        (unpackAppendCString#
           Data.Semigroup.Internal.$fShowDual1
           (showsPrec
              @ a_a6sFL
              $dShow_a6sFM
              Data.Semigroup.Internal.$fShowAlt1
              (x_i6tXp
               `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6sFL>_R
                       :: (Dual a_a6sFL :: *) ~R# (a_a6sFL :: *)))
              Data.Semigroup.Internal.$fReadAll4))

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowDual_$cshowList
  :: forall a. Show a => [Dual a] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6sFL)
                 ($dShow_a6sFM [Occ=Once] :: Show a_a6sFL)
                 (ls_i6tXs [Occ=Once] :: [Dual a_a6sFL])
                 (s_i6tXt [Occ=Once] :: String) ->
                 showList__
                   @ (Dual a_a6sFL)
                   (Data.Semigroup.Internal.$fShowDual_$cshowsPrec
                      @ a_a6sFL $dShow_a6sFM Data.Semigroup.Internal.$fShowAlt1)
                   ls_i6tXs
                   s_i6tXt}]
Data.Semigroup.Internal.$fShowDual_$cshowList
  = \ (@ a_a6sFL)
      ($dShow_a6sFM :: Show a_a6sFL)
      (ls_i6tXs :: [Dual a_a6sFL])
      (s_i6tXt :: String) ->
      showList__
        @ (Dual a_a6sFL)
        (\ (w_s6uMZ :: Dual a_a6sFL) ->
           Data.Semigroup.Internal.$w$cshowsPrec3
             @ a_a6sFL $dShow_a6sFM 0# w_s6uMZ)
        ls_i6tXs
        s_i6tXt

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fShowDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Dual a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>m,
 Unf=DFun: \ (@ a_a6r2p) (v_Xfh :: Show a_a6r2p) ->
       GHC.Show.C:Show TYPE: Dual a_a6r2p
                       Data.Semigroup.Internal.$fShowDual_$cshowsPrec @ a_a6r2p v_Xfh
                       Data.Semigroup.Internal.$fShowDual_$cshow @ a_a6r2p v_Xfh
                       Data.Semigroup.Internal.$fShowDual_$cshowList @ a_a6r2p v_Xfh]
Data.Semigroup.Internal.$fShowDual
  = \ (@ a_a6sFL) ($dShow_a6sFM :: Show a_a6sFL) ->
      GHC.Show.C:Show
        @ (Dual a_a6sFL)
        (Data.Semigroup.Internal.$fShowDual_$cshowsPrec
           @ a_a6sFL $dShow_a6sFM)
        (Data.Semigroup.Internal.$fShowDual_$cshow @ a_a6sFL $dShow_a6sFM)
        (Data.Semigroup.Internal.$fShowDual_$cshowList
           @ a_a6sFL $dShow_a6sFM)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadDual5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadDual5 = "Dual"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadDual4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadDual4
  = unpackCString# Data.Semigroup.Internal.$fReadDual5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadDual_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$fReadDual_lexeme
  = Text.Read.Lex.Ident Data.Semigroup.Internal.$fReadDual4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadDual3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$fReadDual3 = "getDual"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fReadDual2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$fReadDual2
  = unpackCString# Data.Semigroup.Internal.$fReadDual3

-- RHS size: {terms: 51, types: 60, coercions: 23, joins: 0/2}
Data.Semigroup.Internal.$fReadDual1
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Dual a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 391 60}]
Data.Semigroup.Internal.$fReadDual1
  = \ (@ a_a6sEx) ($dRead_a6sEy :: Read a_a6sEx) ->
      GHC.Read.list3
        @ (Dual a_a6sEx)
        (let {
           lvl12_s6urV :: Text.ParserCombinators.ReadP.ReadP a_a6sEx
           [LclId]
           lvl12_s6urV
             = ((readPrec @ a_a6sEx $dRead_a6sEy)
                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a6sEx>_R
                        :: (Text.ParserCombinators.ReadPrec.ReadPrec a_a6sEx :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.Prec
                                -> Text.ParserCombinators.ReadP.ReadP a_a6sEx :: *)))
                 Text.ParserCombinators.ReadPrec.minPrec } in
         let {
           ds_s6umb [Dmd=<L,C(C1(U))>]
             :: Text.ParserCombinators.ReadPrec.Prec
                -> Text.ParserCombinators.ReadP.ReadP a_a6sEx
           [LclId,
            Arity=1,
            Str=<L,A>,
            Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                    WorkFree=True, Expandable=True,
                    Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                    Tmpl= \ _ [Occ=Dead] -> lvl12_s6urV}]
           ds_s6umb = \ _ [Occ=Dead] -> lvl12_s6urV } in
         (\ (c_X6uiR :: Text.ParserCombinators.ReadPrec.Prec)
            (@ b_i6u9v)
            (eta_B1
               :: Dual a_a6sEx -> Text.ParserCombinators.ReadP.P b_i6u9v) ->
            case c_X6uiR of { I# x_i6uab ->
            case <=# x_i6uab 11# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_i6u9v;
              1# ->
                case Text.Read.Lex.$wexpect
                       Data.Semigroup.Internal.$fReadDual_lexeme
                       @ b_i6u9v
                       (\ _ [Occ=Dead, OS=OneShot] ->
                          case Text.Read.Lex.$wexpect
                                 Data.Semigroup.Internal.$fReadAll_lexeme
                                 @ b_i6u9v
                                 (\ _ [Occ=Dead, OS=OneShot] ->
                                    ((((readField
                                          @ a_a6sEx
                                          Data.Semigroup.Internal.$fReadDual2
                                          (ds_s6umb
                                           `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <a_a6sEx>_R)
                                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            a_a6sEx :: *)
                                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                             a_a6sEx :: *))))
                                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <a_a6sEx>_R
                                               :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                                     a_a6sEx :: *)
                                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                       -> Text.ParserCombinators.ReadP.ReadP
                                                            a_a6sEx :: *)))
                                        Data.Semigroup.Internal.$fReadAll6)
                                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a6sEx>_R
                                             :: (Text.ParserCombinators.ReadP.ReadP a_a6sEx :: *)
                                                ~R# (forall b.
                                                     (a_a6sEx -> Text.ParserCombinators.ReadP.P b)
                                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                                      @ b_i6u9v
                                      (\ (a3_i6ubd :: a_a6sEx) ->
                                         case Text.Read.Lex.$wexpect
                                                Data.Semigroup.Internal.$fReadAll3
                                                @ b_i6u9v
                                                (\ _ [Occ=Dead, OS=OneShot] ->
                                                   eta_B1
                                                     (a3_i6ubd
                                                      `cast` (Sym (Data.Semigroup.Internal.N:Dual[0]
                                                                       <a_a6sEx>_R)
                                                              :: (a_a6sEx :: *)
                                                                 ~R# (Dual a_a6sEx :: *))))
                                         of
                                         { (# ww1_i6ub0 #) ->
                                         Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                                         }))
                          of
                          { (# ww1_i6ub0 #) ->
                          Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                          })
                of
                { (# ww1_i6ub0 #) ->
                Text.ParserCombinators.ReadP.Look @ b_i6u9v ww1_i6ub0
                }
            }
            })
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Dual
                                   a_a6sEx>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Dual a_a6sEx>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Dual a_a6sEx -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Dual a_a6sEx) :: *)))

-- RHS size: {terms: 10, types: 21, coercions: 0, joins: 0/1}
Data.Semigroup.Internal.$fReadDual_$creadsPrec
  :: forall a. Read a => Int -> ReadS (Dual a)
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 60}]
Data.Semigroup.Internal.$fReadDual_$creadsPrec
  = \ (@ a_X6sTW) ($dRead_X6sTY :: Read a_X6sTW) ->
      let {
        ds_s6um3 [Dmd=<L,C(C1(U))>]
          :: Text.ParserCombinators.ReadPrec.Prec
             -> forall b.
                (Dual a_X6sTW -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b
        [LclId]
        ds_s6um3
          = Data.Semigroup.Internal.$fReadDual1 @ a_X6sTW $dRead_X6sTY } in
      \ (n_i6tWE :: Int) ->
        Text.ParserCombinators.ReadP.run
          @ (Dual a_X6sTW)
          (ds_s6um3
             n_i6tWE
             @ (Dual a_X6sTW)
             (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                @ (Dual a_X6sTW)))

-- RHS size: {terms: 5, types: 7, coercions: 11, joins: 0/0}
Data.Semigroup.Internal.$fReadDual_$creadListPrec
  :: forall a.
     Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Dual a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X6sTU) ($dRead_X6sTW [Occ=Once] :: Read a_X6sTU) ->
                 list
                   @ (Dual a_X6sTU)
                   ((Data.Semigroup.Internal.$fReadDual1 @ a_X6sTU $dRead_X6sTW)
                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Dual
                                              a_X6sTU>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Dual a_X6sTU>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> forall b.
                                   (Dual a_X6sTU -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                      (Dual a_X6sTU) :: *)))}]
Data.Semigroup.Internal.$fReadDual_$creadListPrec
  = \ (@ a_X6sTU) ($dRead_X6sTW :: Read a_X6sTU) ->
      list
        @ (Dual a_X6sTU)
        ((Data.Semigroup.Internal.$fReadDual1 @ a_X6sTU $dRead_X6sTW)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Dual
                                   a_X6sTU>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Dual a_X6sTU>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Dual a_X6sTU -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Dual a_X6sTU) :: *)))

-- RHS size: {terms: 8, types: 16, coercions: 19, joins: 0/0}
Data.Semigroup.Internal.$fReadDual_$creadList
  :: forall a. Read a => ReadS [Dual a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(U),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X6sTV) ($dRead_X6sTX [Occ=Once] :: Read a_X6sTV) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Dual a_X6sTV]
                   (((((list
                          @ (Dual a_X6sTV)
                          ((Data.Semigroup.Internal.$fReadDual1 @ a_X6sTV $dRead_X6sTX)
                           `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Dual
                                                     a_X6sTV>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Dual a_X6sTV>_R)
                                   :: (Text.ParserCombinators.ReadPrec.Prec
                                       -> forall b.
                                          (Dual a_X6sTV -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                             (Dual a_X6sTV) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Dual a_X6sTV]>_R
                               :: (Text.ParserCombinators.ReadPrec.ReadPrec [Dual a_X6sTV] :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                                       -> Text.ParserCombinators.ReadP.ReadP [Dual a_X6sTV] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Dual a_X6sTV]>_R
                             :: (Text.ParserCombinators.ReadP.ReadP [Dual a_X6sTV] :: *)
                                ~R# (forall b.
                                     ([Dual a_X6sTV] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Dual a_X6sTV]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Dual a_X6sTV]))}]
Data.Semigroup.Internal.$fReadDual_$creadList
  = \ (@ a_X6sTV) ($dRead_X6sTX :: Read a_X6sTV) ->
      Text.ParserCombinators.ReadP.run
        @ [Dual a_X6sTV]
        (((((list
               @ (Dual a_X6sTV)
               ((Data.Semigroup.Internal.$fReadDual1 @ a_X6sTV $dRead_X6sTX)
                `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Dual
                                          a_X6sTV>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Dual a_X6sTV>_R)
                        :: (Text.ParserCombinators.ReadPrec.Prec
                            -> forall b.
                               (Dual a_X6sTV -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                  (Dual a_X6sTV) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Dual a_X6sTV]>_R
                    :: (Text.ParserCombinators.ReadPrec.ReadPrec [Dual a_X6sTV] :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.Prec
                            -> Text.ParserCombinators.ReadP.ReadP [Dual a_X6sTV] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Dual a_X6sTV]>_R
                  :: (Text.ParserCombinators.ReadP.ReadP [Dual a_X6sTV] :: *)
                     ~R# (forall b.
                          ([Dual a_X6sTV] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Dual a_X6sTV]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Dual a_X6sTV]))

-- RHS size: {terms: 11, types: 10, coercions: 11, joins: 0/0}
Data.Semigroup.Internal.$fReadDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Read a => Read (Dual a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,C(U),A)>m,
 Unf=DFun: \ (@ a_a6r2p) (v_Xfo :: Read a_a6r2p) ->
       GHC.Read.C:Read TYPE: Dual a_a6r2p
                       Data.Semigroup.Internal.$fReadDual_$creadsPrec @ a_a6r2p v_Xfo
                       Data.Semigroup.Internal.$fReadDual_$creadList @ a_a6r2p v_Xfo
                       (Data.Semigroup.Internal.$fReadDual1 @ a_a6r2p v_Xfo)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Dual
                                                 a_a6r2p>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Dual a_a6r2p>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Dual a_a6r2p -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                         (Dual a_a6r2p) :: *))
                       Data.Semigroup.Internal.$fReadDual_$creadListPrec @ a_a6r2p v_Xfo]
Data.Semigroup.Internal.$fReadDual
  = \ (@ a_X6sTT) ($dRead_X6sTV :: Read a_X6sTT) ->
      GHC.Read.C:Read
        @ (Dual a_X6sTT)
        (Data.Semigroup.Internal.$fReadDual_$creadsPrec
           @ a_X6sTT $dRead_X6sTV)
        (Data.Semigroup.Internal.$fReadDual_$creadList
           @ a_X6sTT $dRead_X6sTV)
        ((Data.Semigroup.Internal.$fReadDual1 @ a_X6sTT $dRead_X6sTV)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Dual
                                   a_X6sTT>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Dual a_X6sTT>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Dual a_X6sTT -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Dual a_X6sTT) :: *)))
        (Data.Semigroup.Internal.$fReadDual_$creadListPrec
           @ a_X6sTT $dRead_X6sTV)

-- RHS size: {terms: 7, types: 8, coercions: 18, joins: 0/0}
Data.Semigroup.Internal.$fEqDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Eq a => Eq (Dual a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2p) (v_XfB :: Eq a_a6r2p) ->
       GHC.Classes.C:Eq TYPE: Dual a_a6r2p
                        (== @ a_a6r2p v_XfB)
                        `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                ->_R <Bool>_R
                                :: (a_a6r2p -> a_a6r2p -> Bool :: *)
                                   ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Bool :: *))
                        (/= @ a_a6r2p v_XfB)
                        `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                ->_R <Bool>_R
                                :: (a_a6r2p -> a_a6r2p -> Bool :: *)
                                   ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Bool :: *))]
Data.Semigroup.Internal.$fEqDual
  = \ (@ a_a6sCa) ($dEq_a6sCb :: Eq a_a6sCa) ->
      GHC.Classes.C:Eq
        @ (Dual a_a6sCa)
        ((== @ a_a6sCa $dEq_a6sCb)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCa>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCa>_R)
                 ->_R <Bool>_R
                 :: (a_a6sCa -> a_a6sCa -> Bool :: *)
                    ~R# (Dual a_a6sCa -> Dual a_a6sCa -> Bool :: *)))
        ((/= @ a_a6sCa $dEq_a6sCb)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCa>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCa>_R)
                 ->_R <Bool>_R
                 :: (a_a6sCa -> a_a6sCa -> Bool :: *)
                    ~R# (Dual a_a6sCa -> Dual a_a6sCa -> Bool :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fOrdDual_$cp1Ord
  :: forall a. Ord a => Eq (Dual a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6sCI) ($dOrd_a6sCJ [Occ=Once] :: Ord a_a6sCI) ->
                 Data.Semigroup.Internal.$fEqDual
                   @ a_a6sCI (GHC.Classes.$p1Ord @ a_a6sCI $dOrd_a6sCJ)}]
Data.Semigroup.Internal.$fOrdDual_$cp1Ord
  = \ (@ a_a6sCI) ($dOrd_a6sCJ :: Ord a_a6sCI) ->
      Data.Semigroup.Internal.$fEqDual
        @ a_a6sCI (GHC.Classes.$p1Ord @ a_a6sCI $dOrd_a6sCJ)

-- RHS size: {terms: 19, types: 14, coercions: 67, joins: 0/0}
Data.Semigroup.Internal.$fOrdDual [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Ord a => Ord (Dual a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=DFun: \ (@ a_a6r2p) (v_XfD :: Ord a_a6r2p) ->
       GHC.Classes.C:Ord TYPE: Dual a_a6r2p
                         Data.Semigroup.Internal.$fOrdDual_$cp1Ord @ a_a6r2p v_XfD
                         (compare @ a_a6r2p v_XfD)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R <Ordering>_R
                                 :: (a_a6r2p -> a_a6r2p -> Ordering :: *)
                                    ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Ordering :: *))
                         (< @ a_a6r2p v_XfD)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2p -> a_a6r2p -> Bool :: *)
                                    ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Bool :: *))
                         (<= @ a_a6r2p v_XfD)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2p -> a_a6r2p -> Bool :: *)
                                    ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Bool :: *))
                         (> @ a_a6r2p v_XfD)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2p -> a_a6r2p -> Bool :: *)
                                    ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Bool :: *))
                         (>= @ a_a6r2p v_XfD)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R <Bool>_R
                                 :: (a_a6r2p -> a_a6r2p -> Bool :: *)
                                    ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Bool :: *))
                         (max @ a_a6r2p v_XfD)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 :: (a_a6r2p -> a_a6r2p -> a_a6r2p :: *)
                                    ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Dual a_a6r2p :: *))
                         (min @ a_a6r2p v_XfD)
                         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6r2p>_R)
                                 :: (a_a6r2p -> a_a6r2p -> a_a6r2p :: *)
                                    ~R# (Dual a_a6r2p -> Dual a_a6r2p -> Dual a_a6r2p :: *))]
Data.Semigroup.Internal.$fOrdDual
  = \ (@ a_a6sCI) ($dOrd_a6sCJ :: Ord a_a6sCI) ->
      GHC.Classes.C:Ord
        @ (Dual a_a6sCI)
        (Data.Semigroup.Internal.$fOrdDual_$cp1Ord @ a_a6sCI $dOrd_a6sCJ)
        ((compare @ a_a6sCI $dOrd_a6sCJ)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R <Ordering>_R
                 :: (a_a6sCI -> a_a6sCI -> Ordering :: *)
                    ~R# (Dual a_a6sCI -> Dual a_a6sCI -> Ordering :: *)))
        ((< @ a_a6sCI $dOrd_a6sCJ)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R <Bool>_R
                 :: (a_a6sCI -> a_a6sCI -> Bool :: *)
                    ~R# (Dual a_a6sCI -> Dual a_a6sCI -> Bool :: *)))
        ((<= @ a_a6sCI $dOrd_a6sCJ)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R <Bool>_R
                 :: (a_a6sCI -> a_a6sCI -> Bool :: *)
                    ~R# (Dual a_a6sCI -> Dual a_a6sCI -> Bool :: *)))
        ((> @ a_a6sCI $dOrd_a6sCJ)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R <Bool>_R
                 :: (a_a6sCI -> a_a6sCI -> Bool :: *)
                    ~R# (Dual a_a6sCI -> Dual a_a6sCI -> Bool :: *)))
        ((>= @ a_a6sCI $dOrd_a6sCJ)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R <Bool>_R
                 :: (a_a6sCI -> a_a6sCI -> Bool :: *)
                    ~R# (Dual a_a6sCI -> Dual a_a6sCI -> Bool :: *)))
        ((max @ a_a6sCI $dOrd_a6sCJ)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 :: (a_a6sCI -> a_a6sCI -> a_a6sCI :: *)
                    ~R# (Dual a_a6sCI -> Dual a_a6sCI -> Dual a_a6sCI :: *)))
        ((min @ a_a6sCI $dOrd_a6sCJ)
         `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a_a6sCI>_R)
                 :: (a_a6sCI -> a_a6sCI -> a_a6sCI :: *)
                    ~R# (Dual a_a6sCI -> Dual a_a6sCI -> Dual a_a6sCI :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
getDual :: forall a. Dual a -> a
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Semigroup.Internal.$fGeneric1Dual2
               `cast` (forall (a :: <*>_N).
                       <Dual a>_R ->_R Data.Semigroup.Internal.N:Dual[0] <a>_R
                       :: (forall a. Dual a -> Dual a :: *)
                          ~R# (forall a. Dual a -> a :: *))}]
getDual
  = Data.Semigroup.Internal.$fGeneric1Dual2
    `cast` (forall (a :: <*>_N).
            <Dual a>_R ->_R Data.Semigroup.Internal.N:Dual[0] <a>_R
            :: (forall a. Dual a -> Dual a :: *)
               ~R# (forall a. Dual a -> a :: *))

-- RHS size: {terms: 6, types: 9, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fMonadDual_$c>>=
  :: forall a b. Dual a -> (a -> Dual b) -> Dual b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tzM)
                 (@ b_a6tzN)
                 (m_a6r2I [Occ=Once] :: Dual a_a6tzM)
                 (k_a6r2J [Occ=Once!] :: a_a6tzM -> Dual b_a6tzN) ->
                 k_a6r2J
                   (m_a6r2I
                    `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6tzM>_R
                            :: (Dual a_a6tzM :: *) ~R# (a_a6tzM :: *)))}]
Data.Semigroup.Internal.$fMonadDual_$c>>=
  = \ (@ a_a6tzM)
      (@ b_a6tzN)
      (m_a6r2I :: Dual a_a6tzM)
      (k_a6r2J :: a_a6tzM -> Dual b_a6tzN) ->
      k_a6r2J
        (m_a6r2I
         `cast` (Data.Semigroup.Internal.N:Dual[0] <a_a6tzM>_R
                 :: (Dual a_a6tzM :: *) ~R# (a_a6tzM :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonadDual_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. Dual a -> Dual b -> Dual b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a6tzT)
                 (@ b_a6tzU)
                 _ [Occ=Dead]
                 (k_i6tZA [Occ=Once] :: Dual b_a6tzU) ->
                 k_i6tZA}]
Data.Semigroup.Internal.$fMonadDual_$c>>
  = Data.Semigroup.Internal.$fApplicativeDual_$c*>

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl_r6v16 :: forall a. [Char] -> Dual a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl_r6v16
  = \ (@ a_a6tAb) (eta_B1 :: [Char]) ->
      errorWithoutStackTrace @ 'LiftedRep @ (Dual a_a6tAb) eta_B1

-- RHS size: {terms: 6, types: 1, coercions: 8, joins: 0/0}
Data.Semigroup.Internal.$fMonadDual [InlPrag=NOUSERINLINE CONLIKE]
  :: Monad Dual
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: Dual
                        Data.Semigroup.Internal.$fApplicativeDual
                        Data.Semigroup.Internal.$fMonadDual_$c>>=
                        Data.Semigroup.Internal.$fMonadDual_$c>>
                        Data.Semigroup.Internal.$fApplicativeDual4
                        `cast` (forall (a :: <*>_N).
                                <a>_R ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
                                :: (forall a. a -> a :: *) ~R# (forall a. a -> Dual a :: *))
                        \ (@ a_a6tAb) ->
                          errorWithoutStackTrace @ 'LiftedRep @ (Dual a_a6tAb)]
Data.Semigroup.Internal.$fMonadDual
  = GHC.Base.C:Monad
      @ Dual
      Data.Semigroup.Internal.$fApplicativeDual
      Data.Semigroup.Internal.$fMonadDual_$c>>=
      Data.Semigroup.Internal.$fMonadDual_$c>>
      (Data.Semigroup.Internal.$fApplicativeDual4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Dual a :: *)))
      lvl_r6v16

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.appEndo1 :: forall a. Endo a -> Endo a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6raJ) (ds_d6tWx [Occ=Once] :: Endo a_a6raJ) ->
                 ds_d6tWx}]
Data.Semigroup.Internal.appEndo1
  = \ (@ a_a6raJ) (ds_d6tWx :: Endo a_a6raJ) -> ds_d6tWx

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
appEndo :: forall a. Endo a -> a -> a
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Semigroup.Internal.appEndo1
               `cast` (forall (a :: <*>_N).
                       <Endo a>_R ->_R Data.Semigroup.Internal.N:Endo[0] <a>_R
                       :: (forall a. Endo a -> Endo a :: *)
                          ~R# (forall a. Endo a -> a -> a :: *))}]
appEndo
  = Data.Semigroup.Internal.appEndo1
    `cast` (forall (a :: <*>_N).
            <Endo a>_R ->_R Data.Semigroup.Internal.N:Endo[0] <a>_R
            :: (forall a. Endo a -> Endo a :: *)
               ~R# (forall a. Endo a -> a -> a :: *))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.getAll1 :: All -> All
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (ds_d6tWv [Occ=Once] :: All) -> ds_d6tWv}]
Data.Semigroup.Internal.getAll1 = \ (ds_d6tWv :: All) -> ds_d6tWv

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getAll :: All -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Semigroup.Internal.getAll1
               `cast` (<All>_R ->_R Data.Semigroup.Internal.N:All[0]
                       :: (All -> All :: *) ~R# (All -> Bool :: *))}]
getAll
  = Data.Semigroup.Internal.getAll1
    `cast` (<All>_R ->_R Data.Semigroup.Internal.N:All[0]
            :: (All -> All :: *) ~R# (All -> Bool :: *))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.getAny1 :: Any -> Any
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (ds_d6tWt [Occ=Once] :: Any) -> ds_d6tWt}]
Data.Semigroup.Internal.getAny1 = \ (ds_d6tWt :: Any) -> ds_d6tWt

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getAny :: Any -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Semigroup.Internal.getAny1
               `cast` (<Any>_R ->_R Data.Semigroup.Internal.N:Any[0]
                       :: (Any -> Any :: *) ~R# (Any -> Bool :: *))}]
getAny
  = Data.Semigroup.Internal.getAny1
    `cast` (<Any>_R ->_R Data.Semigroup.Internal.N:Any[0]
            :: (Any -> Any :: *) ~R# (Any -> Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
getSum :: forall a. Sum a -> a
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Semigroup.Internal.$fGeneric1Sum2
               `cast` (forall (a :: <*>_N).
                       <Sum a>_R ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R
                       :: (forall a. Sum a -> Sum a :: *)
                          ~R# (forall a. Sum a -> a :: *))}]
getSum
  = Data.Semigroup.Internal.$fGeneric1Sum2
    `cast` (forall (a :: <*>_N).
            <Sum a>_R ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R
            :: (forall a. Sum a -> Sum a :: *) ~R# (forall a. Sum a -> a :: *))

-- RHS size: {terms: 6, types: 9, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fMonadSum_$c>>=
  :: forall a b. Sum a -> (a -> Sum b) -> Sum b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tuf)
                 (@ b_a6tug)
                 (m_a6r2A [Occ=Once] :: Sum a_a6tuf)
                 (k_a6r2B [Occ=Once!] :: a_a6tuf -> Sum b_a6tug) ->
                 k_a6r2B
                   (m_a6r2A
                    `cast` (Data.Semigroup.Internal.N:Sum[0] <a_a6tuf>_R
                            :: (Sum a_a6tuf :: *) ~R# (a_a6tuf :: *)))}]
Data.Semigroup.Internal.$fMonadSum_$c>>=
  = \ (@ a_a6tuf)
      (@ b_a6tug)
      (m_a6r2A :: Sum a_a6tuf)
      (k_a6r2B :: a_a6tuf -> Sum b_a6tug) ->
      k_a6r2B
        (m_a6r2A
         `cast` (Data.Semigroup.Internal.N:Sum[0] <a_a6tuf>_R
                 :: (Sum a_a6tuf :: *) ~R# (a_a6tuf :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonadSum_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. Sum a -> Sum b -> Sum b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a6tum)
                 (@ b_a6tun)
                 _ [Occ=Dead]
                 (k_i6tZA [Occ=Once] :: Sum b_a6tun) ->
                 k_i6tZA}]
Data.Semigroup.Internal.$fMonadSum_$c>>
  = Data.Semigroup.Internal.$fApplicativeSum_$c*>

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl1_r6v17 :: forall a. [Char] -> Sum a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl1_r6v17
  = \ (@ a_a6tuE) (eta_B1 :: [Char]) ->
      errorWithoutStackTrace @ 'LiftedRep @ (Sum a_a6tuE) eta_B1

-- RHS size: {terms: 6, types: 1, coercions: 8, joins: 0/0}
Data.Semigroup.Internal.$fMonadSum [InlPrag=NOUSERINLINE CONLIKE]
  :: Monad Sum
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: Sum
                        Data.Semigroup.Internal.$fApplicativeSum
                        Data.Semigroup.Internal.$fMonadSum_$c>>=
                        Data.Semigroup.Internal.$fMonadSum_$c>>
                        Data.Semigroup.Internal.$fApplicativeDual4
                        `cast` (forall (a :: <*>_N).
                                <a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
                                :: (forall a. a -> a :: *) ~R# (forall a. a -> Sum a :: *))
                        \ (@ a_a6tuE) ->
                          errorWithoutStackTrace @ 'LiftedRep @ (Sum a_a6tuE)]
Data.Semigroup.Internal.$fMonadSum
  = GHC.Base.C:Monad
      @ Sum
      Data.Semigroup.Internal.$fApplicativeSum
      Data.Semigroup.Internal.$fMonadSum_$c>>=
      Data.Semigroup.Internal.$fMonadSum_$c>>
      (Data.Semigroup.Internal.$fApplicativeDual4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Sum a :: *)))
      lvl1_r6v17

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
getProduct :: forall a. Product a -> a
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Semigroup.Internal.$fGeneric1Product2
               `cast` (forall (a :: <*>_N).
                       <Product a>_R ->_R Data.Semigroup.Internal.N:Product[0] <a>_R
                       :: (forall a. Product a -> Product a :: *)
                          ~R# (forall a. Product a -> a :: *))}]
getProduct
  = Data.Semigroup.Internal.$fGeneric1Product2
    `cast` (forall (a :: <*>_N).
            <Product a>_R ->_R Data.Semigroup.Internal.N:Product[0] <a>_R
            :: (forall a. Product a -> Product a :: *)
               ~R# (forall a. Product a -> a :: *))

-- RHS size: {terms: 6, types: 9, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fMonadProduct_$c>>=
  :: forall a b. Product a -> (a -> Product b) -> Product b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a6tqS)
                 (@ b_a6tqT)
                 (m_a6r2u [Occ=Once] :: Product a_a6tqS)
                 (k_a6r2v [Occ=Once!] :: a_a6tqS -> Product b_a6tqT) ->
                 k_a6r2v
                   (m_a6r2u
                    `cast` (Data.Semigroup.Internal.N:Product[0] <a_a6tqS>_R
                            :: (Product a_a6tqS :: *) ~R# (a_a6tqS :: *)))}]
Data.Semigroup.Internal.$fMonadProduct_$c>>=
  = \ (@ a_a6tqS)
      (@ b_a6tqT)
      (m_a6r2u :: Product a_a6tqS)
      (k_a6r2v :: a_a6tqS -> Product b_a6tqT) ->
      k_a6r2v
        (m_a6r2u
         `cast` (Data.Semigroup.Internal.N:Product[0] <a_a6tqS>_R
                 :: (Product a_a6tqS :: *) ~R# (a_a6tqS :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fMonadProduct_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. Product a -> Product b -> Product b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a6tr3)
                 (@ b_a6tr4)
                 _ [Occ=Dead]
                 (k_i6tZA [Occ=Once] :: Product b_a6tr4) ->
                 k_i6tZA}]
Data.Semigroup.Internal.$fMonadProduct_$c>>
  = Data.Semigroup.Internal.$fApplicativeProduct_$c*>

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl2_r6v18 :: forall a. [Char] -> Product a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl2_r6v18
  = \ (@ a_a6trr) (eta_B1 :: [Char]) ->
      errorWithoutStackTrace @ 'LiftedRep @ (Product a_a6trr) eta_B1

-- RHS size: {terms: 6, types: 1, coercions: 8, joins: 0/0}
Data.Semigroup.Internal.$fMonadProduct [InlPrag=NOUSERINLINE CONLIKE]
  :: Monad Product
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: Product
                        Data.Semigroup.Internal.$fApplicativeProduct
                        Data.Semigroup.Internal.$fMonadProduct_$c>>=
                        Data.Semigroup.Internal.$fMonadProduct_$c>>
                        Data.Semigroup.Internal.$fApplicativeDual4
                        `cast` (forall (a :: <*>_N).
                                <a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
                                :: (forall a. a -> a :: *) ~R# (forall a. a -> Product a :: *))
                        \ (@ a_a6trr) ->
                          errorWithoutStackTrace @ 'LiftedRep @ (Product a_a6trr)]
Data.Semigroup.Internal.$fMonadProduct
  = GHC.Base.C:Monad
      @ Product
      Data.Semigroup.Internal.$fApplicativeProduct
      Data.Semigroup.Internal.$fMonadProduct_$c>>=
      Data.Semigroup.Internal.$fMonadProduct_$c>>
      (Data.Semigroup.Internal.$fApplicativeDual4
       `cast` (forall (a :: <*>_N).
               <a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)
               :: (forall a. a -> a :: *) ~R# (forall a. a -> Product a :: *)))
      lvl2_r6v18

-- RHS size: {terms: 1, types: 0, coercions: 18, joins: 0/0}
getAlt :: forall k (f :: k -> *) (a :: k). Alt f a -> f a
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Data.Semigroup.Internal.$fGeneric1Alt2
               `cast` (forall (k :: <*>_N) (f :: <k -> *>_N) (a :: <k>_N).
                       <Alt f a>_R ->_R Data.Semigroup.Internal.N:Alt[0] <k>_N <f>_R <a>_N
                       :: (forall k (f :: k -> *) (a :: k). Alt f a -> Alt f a :: *)
                          ~R# (forall k (f :: k -> *) (a :: k). Alt f a -> f a :: *))}]
getAlt
  = Data.Semigroup.Internal.$fGeneric1Alt2
    `cast` (forall (k :: <*>_N) (f :: <k -> *>_N) (a :: <k>_N).
            <Alt f a>_R ->_R Data.Semigroup.Internal.N:Alt[0] <k>_N <f>_R <a>_N
            :: (forall k (f :: k -> *) (a :: k). Alt f a -> Alt f a :: *)
               ~R# (forall k (f :: k -> *) (a :: k). Alt f a -> f a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_r6v19 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_r6v19 = "stimesIdempotent: positive multiplier expected"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.stimesIdempotent1 :: forall a. a
[GblId, Str=x]
Data.Semigroup.Internal.stimesIdempotent1
  = \ (@ a_a6sC0) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ a_a6sC0 (unpackCString# lvl3_r6v19)

-- RHS size: {terms: 21, types: 17, coercions: 0, joins: 0/1}
stimesIdempotent :: forall b a. Integral b => b -> a -> a
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),1*U(1*U(1*U(A,A,A,A,A,A,1*C1(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 160 0}]
stimesIdempotent
  = \ (@ b_a6sBZ)
      (@ a_a6sC0)
      ($dIntegral_a6sC2 :: Integral b_a6sBZ)
      (eta_B2 :: b_a6sBZ)
      (eta1_B1 :: a_a6sC0) ->
      let {
        $dReal_s6um1 [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,A,A,A,A,A,1*C1(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
          :: Real b_a6sBZ
        [LclId]
        $dReal_s6um1 = GHC.Real.$p1Integral @ b_a6sBZ $dIntegral_a6sC2 } in
      case <=
             @ b_a6sBZ
             (GHC.Real.$p2Real @ b_a6sBZ $dReal_s6um1)
             eta_B2
             (fromInteger
                @ b_a6sBZ
                (GHC.Real.$p1Real @ b_a6sBZ $dReal_s6um1)
                Data.Semigroup.Internal.$fMonoidSum1)
      of {
        False -> eta1_B1;
        True -> Data.Semigroup.Internal.stimesIdempotent1 @ a_a6sC0
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_r6v1a :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_r6v1a = "stimesIdempotentMonoid: negative multiplier"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.stimesIdempotentMonoid1 :: forall a. a
[GblId, Str=x]
Data.Semigroup.Internal.stimesIdempotentMonoid1
  = \ (@ a_a6sBK) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ a_a6sBK (unpackCString# lvl4_r6v1a)

-- RHS size: {terms: 25, types: 20, coercions: 0, joins: 0/1}
stimesIdempotentMonoid
  :: forall b a. (Integral b, Monoid a) => b -> a -> a
[GblId,
 Arity=4,
 Str=<S(S(LS(LC(C(S))LLLLLL)L)LLLLLLLL),1*U(1*U(1*U(A,A,A,A,A,A,1*C1(U)),1*U(A,1*C1(C1(U)),A,A,A,A,A,A),A),A,A,A,A,A,A,A,A)><L,1*U(A,1*U,A,A)><L,U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 0] 190 0}]
stimesIdempotentMonoid
  = \ (@ b_a6sBJ)
      (@ a_a6sBK)
      ($dIntegral_a6sBM :: Integral b_a6sBJ)
      ($dMonoid_a6sBN :: Monoid a_a6sBK)
      (eta_B2 :: b_a6sBJ)
      (eta1_B1 :: a_a6sBK) ->
      let {
        $dReal_s6ulZ [Dmd=<S(LS(LC(C(S))LLLLLL)L),U(1*U(A,A,A,A,A,A,1*C1(U)),1*U(A,1*C1(C1(U)),A,A,A,A,A,A),A)>]
          :: Real b_a6sBJ
        [LclId]
        $dReal_s6ulZ = GHC.Real.$p1Integral @ b_a6sBJ $dIntegral_a6sBM } in
      case compare
             @ b_a6sBJ
             (GHC.Real.$p2Real @ b_a6sBJ $dReal_s6ulZ)
             eta_B2
             (fromInteger
                @ b_a6sBJ
                (GHC.Real.$p1Real @ b_a6sBJ $dReal_s6ulZ)
                Data.Semigroup.Internal.$fMonoidSum1)
      of {
        LT -> Data.Semigroup.Internal.stimesIdempotentMonoid1 @ a_a6sBK;
        EQ -> mempty @ a_a6sBK $dMonoid_a6sBN;
        GT -> eta1_B1
      }

Rec {
-- RHS size: {terms: 15, types: 9, coercions: 3, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAny_go [Occ=LoopBreaker]
  :: Any -> [Any] -> Any
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []]
Data.Semigroup.Internal.$fSemigroupAny_go
  = \ (b_i6tZa :: Any) (ds1_i6tZb :: [Any]) ->
      case ds1_i6tZb of {
        [] -> b_i6tZa;
        : c_i6tZj cs_i6tZk ->
          case b_i6tZa
               `cast` (Data.Semigroup.Internal.N:Any[0]
                       :: (Any :: *) ~R# (Bool :: *))
          of {
            False ->
              Data.Semigroup.Internal.$fSemigroupAny_go c_i6tZj cs_i6tZk;
            True ->
              GHC.Types.True
              `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                      :: (Bool :: *) ~R# (Any :: *))
          }
      }
end Rec }

-- RHS size: {terms: 7, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAny_$csconcat
  :: NonEmpty Any -> Any
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_i6tZ5 [Occ=Once!] :: NonEmpty Any) ->
                 case ds_i6tZ5 of { :| a1_i6tZc [Occ=Once] as_i6tZd [Occ=Once] ->
                 Data.Semigroup.Internal.$fSemigroupAny_go a1_i6tZc as_i6tZd
                 }}]
Data.Semigroup.Internal.$fSemigroupAny_$csconcat
  = \ (ds_i6tZ5 :: NonEmpty Any) ->
      case ds_i6tZ5 of { :| a1_i6tZc as_i6tZd ->
      Data.Semigroup.Internal.$fSemigroupAny_go a1_i6tZc as_i6tZd
      }

Rec {
-- RHS size: {terms: 13, types: 8, coercions: 5, joins: 0/0}
Data.Semigroup.Internal.$fMonoidAny_go [Occ=LoopBreaker]
  :: [Any] -> Any
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
Data.Semigroup.Internal.$fMonoidAny_go
  = \ (ds_i6u2C :: [Any]) ->
      case ds_i6u2C of {
        [] ->
          GHC.Types.False
          `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                  :: (Bool :: *) ~R# (Any :: *));
        : y_i6u2H ys_i6u2I ->
          case y_i6u2H
               `cast` (Data.Semigroup.Internal.N:Any[0]
                       :: (Any :: *) ~R# (Bool :: *))
          of {
            False -> Data.Semigroup.Internal.$fMonoidAny_go ys_i6u2I;
            True ->
              GHC.Types.True
              `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                      :: (Bool :: *) ~R# (Any :: *))
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 8, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Semigroup Any
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Semigroup TYPE: Any
                            ||
                            `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                    ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                    ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                    :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *))
                            Data.Semigroup.Internal.$fSemigroupAny_$csconcat
                            Data.Semigroup.Internal.$fSemigroupAny_$cstimes]
Data.Semigroup.Internal.$fSemigroupAny
  = GHC.Base.C:Semigroup
      @ Any
      (||
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *)))
      Data.Semigroup.Internal.$fSemigroupAny_$csconcat
      Data.Semigroup.Internal.$fSemigroupAny_$cstimes

-- RHS size: {terms: 5, types: 1, coercions: 10, joins: 0/0}
Data.Semigroup.Internal.$fMonoidAny [InlPrag=NOUSERINLINE CONLIKE]
  :: Monoid Any
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monoid TYPE: Any
                         Data.Semigroup.Internal.$fSemigroupAny
                         GHC.Types.False
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 :: (Bool :: *) ~R# (Any :: *))
                         ||
                         `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:Any[0])
                                 :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *))
                         Data.Semigroup.Internal.$fMonoidAny_go]
Data.Semigroup.Internal.$fMonoidAny
  = GHC.Base.C:Monoid
      @ Any
      Data.Semigroup.Internal.$fSemigroupAny
      (GHC.Types.False
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               :: (Bool :: *) ~R# (Any :: *)))
      (||
       `cast` (Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               ->_R Sym (Data.Semigroup.Internal.N:Any[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (Any -> Any -> Any :: *)))
      Data.Semigroup.Internal.$fMonoidAny_go

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAny_$cstimes [Occ=LoopBreaker]
  :: forall b. Integral b => b -> Any -> Any
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,A,A,A,A,C(U)),U(A,C(C1(U)),A,A,A,A,A,A),A),A,A,A,A,A,A,A,A)>,
 Unf=OtherCon []]
Data.Semigroup.Internal.$fSemigroupAny_$cstimes
  = \ (@ b_a6txF) ($dIntegral_a6txH :: Integral b_a6txF) ->
      stimesIdempotentMonoid
        @ b_a6txF
        @ Any
        $dIntegral_a6txH
        Data.Semigroup.Internal.$fMonoidAny
end Rec }

Rec {
-- RHS size: {terms: 15, types: 9, coercions: 3, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAll_go [Occ=LoopBreaker]
  :: All -> [All] -> All
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []]
Data.Semigroup.Internal.$fSemigroupAll_go
  = \ (b_i6tZa :: All) (ds1_i6tZb :: [All]) ->
      case ds1_i6tZb of {
        [] -> b_i6tZa;
        : c_i6tZj cs_i6tZk ->
          case b_i6tZa
               `cast` (Data.Semigroup.Internal.N:All[0]
                       :: (All :: *) ~R# (Bool :: *))
          of {
            False ->
              GHC.Types.False
              `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                      :: (Bool :: *) ~R# (All :: *));
            True -> Data.Semigroup.Internal.$fSemigroupAll_go c_i6tZj cs_i6tZk
          }
      }
end Rec }

-- RHS size: {terms: 7, types: 7, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAll_$csconcat
  :: NonEmpty All -> All
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_i6tZ5 [Occ=Once!] :: NonEmpty All) ->
                 case ds_i6tZ5 of { :| a1_i6tZc [Occ=Once] as_i6tZd [Occ=Once] ->
                 Data.Semigroup.Internal.$fSemigroupAll_go a1_i6tZc as_i6tZd
                 }}]
Data.Semigroup.Internal.$fSemigroupAll_$csconcat
  = \ (ds_i6tZ5 :: NonEmpty All) ->
      case ds_i6tZ5 of { :| a1_i6tZc as_i6tZd ->
      Data.Semigroup.Internal.$fSemigroupAll_go a1_i6tZc as_i6tZd
      }

Rec {
-- RHS size: {terms: 13, types: 8, coercions: 5, joins: 0/0}
Data.Semigroup.Internal.$fMonoidAll_go [Occ=LoopBreaker]
  :: [All] -> All
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
Data.Semigroup.Internal.$fMonoidAll_go
  = \ (ds_i6u2C :: [All]) ->
      case ds_i6u2C of {
        [] ->
          GHC.Types.True
          `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                  :: (Bool :: *) ~R# (All :: *));
        : y_i6u2H ys_i6u2I ->
          case y_i6u2H
               `cast` (Data.Semigroup.Internal.N:All[0]
                       :: (All :: *) ~R# (Bool :: *))
          of {
            False ->
              GHC.Types.False
              `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                      :: (Bool :: *) ~R# (All :: *));
            True -> Data.Semigroup.Internal.$fMonoidAll_go ys_i6u2I
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 8, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Semigroup All
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Semigroup TYPE: All
                            &&
                            `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                    ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                    ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                    :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *))
                            Data.Semigroup.Internal.$fSemigroupAll_$csconcat
                            Data.Semigroup.Internal.$fSemigroupAll_$cstimes]
Data.Semigroup.Internal.$fSemigroupAll
  = GHC.Base.C:Semigroup
      @ All
      (&&
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *)))
      Data.Semigroup.Internal.$fSemigroupAll_$csconcat
      Data.Semigroup.Internal.$fSemigroupAll_$cstimes

-- RHS size: {terms: 5, types: 1, coercions: 10, joins: 0/0}
Data.Semigroup.Internal.$fMonoidAll [InlPrag=NOUSERINLINE CONLIKE]
  :: Monoid All
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monoid TYPE: All
                         Data.Semigroup.Internal.$fSemigroupAll
                         GHC.Types.True
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 :: (Bool :: *) ~R# (All :: *))
                         &&
                         `cast` (Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 ->_R Sym (Data.Semigroup.Internal.N:All[0])
                                 :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *))
                         Data.Semigroup.Internal.$fMonoidAll_go]
Data.Semigroup.Internal.$fMonoidAll
  = GHC.Base.C:Monoid
      @ All
      Data.Semigroup.Internal.$fSemigroupAll
      (GHC.Types.True
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               :: (Bool :: *) ~R# (All :: *)))
      (&&
       `cast` (Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               ->_R Sym (Data.Semigroup.Internal.N:All[0])
               :: (Bool -> Bool -> Bool :: *) ~R# (All -> All -> All :: *)))
      Data.Semigroup.Internal.$fMonoidAll_go

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAll_$cstimes [Occ=LoopBreaker]
  :: forall b. Integral b => b -> All -> All
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,A,A,A,A,C(U)),U(A,C(C1(U)),A,A,A,A,A,A),A),A,A,A,A,A,A,A,A)>,
 Unf=OtherCon []]
Data.Semigroup.Internal.$fSemigroupAll_$cstimes
  = \ (@ b_a6tyo) ($dIntegral_a6tyq :: Integral b_a6tyo) ->
      stimesIdempotentMonoid
        @ b_a6tyo
        @ All
        $dIntegral_a6tyq
        Data.Semigroup.Internal.$fMonoidAll
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_r6v1b :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl5_r6v1b = "stimesMonoid: negative multiplier"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
lvl6_r6v1c :: forall a. a
[GblId, Str=x]
lvl6_r6v1c
  = \ (@ a_a6szh) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ a_a6szh (unpackCString# lvl5_r6v1b)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_r6v1d :: Integer
[GblId, Unf=OtherCon []]
lvl7_r6v1d = 2

-- RHS size: {terms: 136, types: 73, coercions: 0, joins: 4/10}
stimesMonoid :: forall b a. (Integral b, Monoid a) => b -> a -> a
[GblId,
 Arity=4,
 Str=<S(S(LS(LC(C(S))LLLLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),1*C1(C1(U)),A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,1*U,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []]
stimesMonoid
  = \ (@ b_a6szg)
      (@ a_a6szh)
      ($dIntegral_a6szj :: Integral b_a6szg)
      ($dMonoid_a6szk :: Monoid a_a6szh)
      (eta_B2 :: b_a6szg)
      (eta1_B1 :: a_a6szh) ->
      let {
        $dReal_s6ulF [Dmd=<S(LS(LC(C(S))LLLLLL)L),U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),1*C1(C1(U)),A,A,A,A,A,A),A)>]
          :: Real b_a6szg
        [LclId]
        $dReal_s6ulF = GHC.Real.$p1Integral @ b_a6szg $dIntegral_a6szj } in
      case compare
             @ b_a6szg
             (GHC.Real.$p2Real @ b_a6szg $dReal_s6ulF)
             eta_B2
             (fromInteger
                @ b_a6szg
                (GHC.Real.$p1Real @ b_a6szg $dReal_s6ulF)
                Data.Semigroup.Internal.$fMonoidSum1)
      of {
        LT -> lvl6_r6v1c @ a_a6szh;
        EQ -> mempty @ a_a6szh $dMonoid_a6szk;
        GT ->
          let {
            $dNum_s6ulO [Dmd=<L,U(A,A,A,A,A,A,C(U))>] :: Num b_a6szg
            [LclId]
            $dNum_s6ulO = GHC.Real.$p1Real @ b_a6szg $dReal_s6ulF } in
          let {
            lvl12_s6usD :: b_a6szg
            [LclId]
            lvl12_s6usD = fromInteger @ b_a6szg $dNum_s6ulO lvl7_r6v1d } in
          join {
            exit_X7s [Dmd=<C(C(S)),C(C1(U))>] :: a_a6szh -> b_a6szg -> a_a6szh
            [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>]
            exit_X7s (x_a6r3a [OS=OneShot] :: a_a6szh)
                     (y_a6r3b [OS=OneShot] :: b_a6szg)
              = let {
                  $dEq_s6ulN [Dmd=<S(S(C(C(S))L)LLLLLLL),1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>]
                    :: Ord b_a6szg
                  [LclId]
                  $dEq_s6ulN = GHC.Real.$p2Real @ b_a6szg $dReal_s6ulF } in
                let {
                  $dEq1_s6ulM [Dmd=<S(C(C(S))L),U(C(C1(U)),A)>] :: Eq b_a6szg
                  [LclId]
                  $dEq1_s6ulM = GHC.Classes.$p1Ord @ b_a6szg $dEq_s6ulN } in
                let {
                  lvl13_s6usl :: b_a6szg
                  [LclId]
                  lvl13_s6usl
                    = fromInteger
                        @ b_a6szg $dNum_s6ulO Data.Semigroup.Internal.$fMonoidProduct1 } in
                case == @ b_a6szg $dEq1_s6ulM y_a6r3b lvl13_s6usl of {
                  False ->
                    join {
                      exit1_X7z [Dmd=<C(C(S)),C(C1(U))>] :: a_a6szh -> a_a6szh -> a_a6szh
                      [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>]
                      exit1_X7z (x1_a6r3c [OS=OneShot] :: a_a6szh)
                                (z_a6r3e [OS=OneShot] :: a_a6szh)
                        = mappend @ a_a6szh $dMonoid_a6szk x1_a6r3c z_a6r3e } in
                    joinrec {
                      g_s6ulL [Occ=LoopBreaker]
                        :: a_a6szh -> b_a6szg -> a_a6szh -> a_a6szh
                      [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []]
                      g_s6ulL (x1_a6r3c :: a_a6szh)
                              (y1_a6r3d :: b_a6szg)
                              (z_a6r3e :: a_a6szh)
                        = case even @ b_a6szg $dIntegral_a6szj y1_a6r3d of {
                            False ->
                              case == @ b_a6szg $dEq1_s6ulM y1_a6r3d lvl13_s6usl of {
                                False ->
                                  jump g_s6ulL
                                    (mappend @ a_a6szh $dMonoid_a6szk x1_a6r3c x1_a6r3c)
                                    (quot @ b_a6szg $dIntegral_a6szj y1_a6r3d lvl12_s6usD)
                                    (mappend @ a_a6szh $dMonoid_a6szk x1_a6r3c z_a6r3e);
                                True -> jump exit1_X7z x1_a6r3c z_a6r3e
                              };
                            True ->
                              jump g_s6ulL
                                (mappend @ a_a6szh $dMonoid_a6szk x1_a6r3c x1_a6r3c)
                                (quot @ b_a6szg $dIntegral_a6szj y1_a6r3d lvl12_s6usD)
                                z_a6r3e
                          }; } in
                    jump g_s6ulL
                      (mappend @ a_a6szh $dMonoid_a6szk x_a6r3a x_a6r3a)
                      (quot @ b_a6szg $dIntegral_a6szj y_a6r3b lvl12_s6usD)
                      x_a6r3a;
                  True -> x_a6r3a
                } } in
          joinrec {
            f_s6ulE [Occ=LoopBreaker] :: a_a6szh -> b_a6szg -> a_a6szh
            [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
            f_s6ulE (x_a6r3a :: a_a6szh) (y_a6r3b :: b_a6szg)
              = case even @ b_a6szg $dIntegral_a6szj y_a6r3b of {
                  False -> jump exit_X7s x_a6r3a y_a6r3b;
                  True ->
                    jump f_s6ulE
                      (mappend @ a_a6szh $dMonoid_a6szk x_a6r3a x_a6r3a)
                      (quot @ b_a6szg $dIntegral_a6szj y_a6r3b lvl12_s6usD)
                }; } in
          jump f_s6ulE eta1_B1 eta_B2
      }

-- RHS size: {terms: 22, types: 65, coercions: 16, joins: 0/1}
Data.Semigroup.Internal.$w$csconcat [InlPrag=NOUSERINLINE[0]]
  :: forall (f :: * -> *) a.
     Alternative f =>
     Alt f a -> [Alt f a] -> Alt f a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(U)),A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 150 0}]
Data.Semigroup.Internal.$w$csconcat
  = \ (@ (f_s6uNK :: * -> *))
      (@ a_s6uNL)
      (w_s6uNM :: Alternative f_s6uNK)
      (ww_s6uNQ :: Alt f_s6uNK a_s6uNL)
      (ww1_s6uNR :: [Alt f_s6uNK a_s6uNL]) ->
      letrec {
        go_s6ulx [Occ=LoopBreaker]
          :: Alt f_s6uNK a_s6uNL
             -> [Alt f_s6uNK a_s6uNL] -> Alt f_s6uNK a_s6uNL
        [LclId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []]
        go_s6ulx
          = \ (b_i6tZa :: Alt f_s6uNK a_s6uNL)
              (ds1_i6tZb :: [Alt f_s6uNK a_s6uNL]) ->
              case ds1_i6tZb of {
                [] -> b_i6tZa;
                : c_i6tZj cs_i6tZk ->
                  (<|>
                     @ f_s6uNK
                     w_s6uNM
                     @ a_s6uNL
                     (b_i6tZa
                      `cast` (Data.Semigroup.Internal.N:Alt[0]
                                  <*>_N <f_s6uNK>_R <a_s6uNL>_N
                              :: (Alt f_s6uNK a_s6uNL :: *) ~R# (f_s6uNK a_s6uNL :: *)))
                     ((go_s6ulx c_i6tZj cs_i6tZk)
                      `cast` (Data.Semigroup.Internal.N:Alt[0]
                                  <*>_N <f_s6uNK>_R <a_s6uNL>_N
                              :: (Alt f_s6uNK a_s6uNL :: *) ~R# (f_s6uNK a_s6uNL :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                   <*>_N <f_s6uNK>_R) <a_s6uNL>_N
                          :: (f_s6uNK a_s6uNL :: *) ~R# (Alt f_s6uNK a_s6uNL :: *))
              }; } in
      go_s6ulx ww_s6uNQ ww1_s6uNR

-- RHS size: {terms: 11, types: 33, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAlt_$csconcat [InlPrag=NOUSERINLINE[0]]
  :: forall (f :: * -> *) a.
     Alternative f =>
     NonEmpty (Alt f a) -> Alt f a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (f_s6uNK :: * -> *))
                 (@ a_s6uNL)
                 (w_s6uNM [Occ=Once] :: Alternative f_s6uNK)
                 (w1_s6uNN [Occ=Once!] :: NonEmpty (Alt f_s6uNK a_s6uNL)) ->
                 case w1_s6uNN of { :| ww1_s6uNQ [Occ=Once] ww2_s6uNR [Occ=Once] ->
                 Data.Semigroup.Internal.$w$csconcat
                   @ f_s6uNK @ a_s6uNL w_s6uNM ww1_s6uNQ ww2_s6uNR
                 }}]
Data.Semigroup.Internal.$fSemigroupAlt_$csconcat
  = \ (@ (f_s6uNK :: * -> *))
      (@ a_s6uNL)
      (w_s6uNM :: Alternative f_s6uNK)
      (w1_s6uNN :: NonEmpty (Alt f_s6uNK a_s6uNL)) ->
      case w1_s6uNN of { :| ww1_s6uNQ ww2_s6uNR ->
      Data.Semigroup.Internal.$w$csconcat
        @ f_s6uNK @ a_s6uNL w_s6uNM ww1_s6uNQ ww2_s6uNR
      }

-- RHS size: {terms: 21, types: 54, coercions: 22, joins: 0/2}
Data.Semigroup.Internal.$fMonoidAlt_$cmconcat
  :: forall (f :: * -> *) a. Alternative f => [Alt f a] -> Alt f a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(A,1*U,C(C1(U)),A,A)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0] 150 0}]
Data.Semigroup.Internal.$fMonoidAlt_$cmconcat
  = \ (@ (f_X6tGf :: * -> *))
      (@ a_X6tGh)
      ($dAlternative_X6tGj :: Alternative f_X6tGf)
      (eta_B1 :: [Alt f_X6tGf a_X6tGh]) ->
      let {
        z_s6uBs :: f_X6tGf a_X6tGh
        [LclId]
        z_s6uBs = empty @ f_X6tGf $dAlternative_X6tGj @ a_X6tGh } in
      letrec {
        go_X6ueP [Occ=LoopBreaker]
          :: [Alt f_X6tGf a_X6tGh] -> Alt f_X6tGf a_X6tGh
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_X6ueP
          = \ (ds_i6u2C :: [Alt f_X6tGf a_X6tGh]) ->
              case ds_i6u2C of {
                [] ->
                  z_s6uBs
                  `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                   <*>_N <f_X6tGf>_R) <a_X6tGh>_N
                          :: (f_X6tGf a_X6tGh :: *) ~R# (Alt f_X6tGf a_X6tGh :: *));
                : y_i6u2H ys_i6u2I ->
                  (<|>
                     @ f_X6tGf
                     $dAlternative_X6tGj
                     @ a_X6tGh
                     (y_i6u2H
                      `cast` (Data.Semigroup.Internal.N:Alt[0]
                                  <*>_N <f_X6tGf>_R <a_X6tGh>_N
                              :: (Alt f_X6tGf a_X6tGh :: *) ~R# (f_X6tGf a_X6tGh :: *)))
                     ((go_X6ueP ys_i6u2I)
                      `cast` (Data.Semigroup.Internal.N:Alt[0]
                                  <*>_N <f_X6tGf>_R <a_X6tGh>_N
                              :: (Alt f_X6tGf a_X6tGh :: *) ~R# (f_X6tGf a_X6tGh :: *))))
                  `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                   <*>_N <f_X6tGf>_R) <a_X6tGh>_N
                          :: (f_X6tGf a_X6tGh :: *) ~R# (Alt f_X6tGf a_X6tGh :: *))
              }; } in
      go_X6ueP eta_B1

Rec {
-- RHS size: {terms: 10, types: 19, coercions: 20, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) a. Alternative f => Semigroup (Alt f a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,U,U,A,A)>m,
 Unf=DFun: \ (@ (f_a6r2s :: * -> *))
             (@ a_a6r2t)
             (v_XgB :: Alternative f_a6r2s) ->
       GHC.Base.C:Semigroup TYPE: Alt f_a6r2s a_a6r2t
                            (<|> @ f_a6r2s v_XgB @ a_a6r2t)
                            `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                             <*>_N <f_a6r2s>_R) <a_a6r2t>_N
                                    ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                  <*>_N <f_a6r2s>_R) <a_a6r2t>_N
                                    ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                                  <*>_N <f_a6r2s>_R) <a_a6r2t>_N
                                    :: (f_a6r2s a_a6r2t -> f_a6r2s a_a6r2t -> f_a6r2s a_a6r2t :: *)
                                       ~R# (Alt f_a6r2s a_a6r2t
                                            -> Alt f_a6r2s a_a6r2t -> Alt f_a6r2s a_a6r2t :: *))
                            Data.Semigroup.Internal.$fSemigroupAlt_$csconcat
                              @ f_a6r2s @ a_a6r2t v_XgB
                            Data.Semigroup.Internal.$fSemigroupAlt_$cstimes
                              @ f_a6r2s @ a_a6r2t v_XgB]
Data.Semigroup.Internal.$fSemigroupAlt
  = \ (@ (f_X6tGD :: * -> *))
      (@ a_X6tGF)
      ($dAlternative_X6tGH :: Alternative f_X6tGD) ->
      GHC.Base.C:Semigroup
        @ (Alt f_X6tGD a_X6tGF)
        ((<|> @ f_X6tGD $dAlternative_X6tGH @ a_X6tGF)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <*>_N <f_X6tGD>_R) <a_X6tGF>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <*>_N <f_X6tGD>_R) <a_X6tGF>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <*>_N <f_X6tGD>_R) <a_X6tGF>_N
                 :: (f_X6tGD a_X6tGF -> f_X6tGD a_X6tGF -> f_X6tGD a_X6tGF :: *)
                    ~R# (Alt f_X6tGD a_X6tGF
                         -> Alt f_X6tGD a_X6tGF -> Alt f_X6tGD a_X6tGF :: *)))
        (Data.Semigroup.Internal.$fSemigroupAlt_$csconcat
           @ f_X6tGD @ a_X6tGF $dAlternative_X6tGH)
        (Data.Semigroup.Internal.$fSemigroupAlt_$cstimes
           @ f_X6tGD @ a_X6tGF $dAlternative_X6tGH)

-- RHS size: {terms: 12, types: 21, coercions: 26, joins: 0/0}
Data.Semigroup.Internal.$fMonoidAlt [InlPrag=NOUSERINLINE CONLIKE]
  :: forall (f :: * -> *) a. Alternative f => Monoid (Alt f a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,U,U,A,A)>m,
 Unf=DFun: \ (@ (f_a6r2q :: * -> *))
             (@ a_a6r2r)
             (v_XgC :: Alternative f_a6r2q) ->
       GHC.Base.C:Monoid TYPE: Alt f_a6r2q a_a6r2r
                         Data.Semigroup.Internal.$fSemigroupAlt @ f_a6r2q @ a_a6r2r v_XgC
                         (empty @ f_a6r2q v_XgC @ a_a6r2r)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <*>_N <f_a6r2q>_R) <a_a6r2r>_N
                                 :: (f_a6r2q a_a6r2r :: *) ~R# (Alt f_a6r2q a_a6r2r :: *))
                         (<|> @ f_a6r2q v_XgC @ a_a6r2r)
                         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                                          <*>_N <f_a6r2q>_R) <a_a6r2r>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <*>_N <f_a6r2q>_R) <a_a6r2r>_N
                                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                                               <*>_N <f_a6r2q>_R) <a_a6r2r>_N
                                 :: (f_a6r2q a_a6r2r -> f_a6r2q a_a6r2r -> f_a6r2q a_a6r2r :: *)
                                    ~R# (Alt f_a6r2q a_a6r2r
                                         -> Alt f_a6r2q a_a6r2r -> Alt f_a6r2q a_a6r2r :: *))
                         Data.Semigroup.Internal.$fMonoidAlt_$cmconcat
                           @ f_a6r2q @ a_a6r2r v_XgC]
Data.Semigroup.Internal.$fMonoidAlt
  = \ (@ (f_X6tG7 :: * -> *))
      (@ a_X6tG9)
      ($dAlternative_X6tGb :: Alternative f_X6tG7) ->
      GHC.Base.C:Monoid
        @ (Alt f_X6tG7 a_X6tG9)
        (Data.Semigroup.Internal.$fSemigroupAlt
           @ f_X6tG7 @ a_X6tG9 $dAlternative_X6tGb)
        ((empty @ f_X6tG7 $dAlternative_X6tGb @ a_X6tG9)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <*>_N <f_X6tG7>_R) <a_X6tG9>_N
                 :: (f_X6tG7 a_X6tG9 :: *) ~R# (Alt f_X6tG7 a_X6tG9 :: *)))
        ((<|> @ f_X6tG7 $dAlternative_X6tGb @ a_X6tG9)
         `cast` (Sym (Data.Semigroup.Internal.N:Alt[0]
                          <*>_N <f_X6tG7>_R) <a_X6tG9>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <*>_N <f_X6tG7>_R) <a_X6tG9>_N
                 ->_R Sym (Data.Semigroup.Internal.N:Alt[0]
                               <*>_N <f_X6tG7>_R) <a_X6tG9>_N
                 :: (f_X6tG7 a_X6tG9 -> f_X6tG7 a_X6tG9 -> f_X6tG7 a_X6tG9 :: *)
                    ~R# (Alt f_X6tG7 a_X6tG9
                         -> Alt f_X6tG7 a_X6tG9 -> Alt f_X6tG7 a_X6tG9 :: *)))
        (Data.Semigroup.Internal.$fMonoidAlt_$cmconcat
           @ f_X6tG7 @ a_X6tG9 $dAlternative_X6tGb)

-- RHS size: {terms: 9, types: 20, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupAlt_$cstimes [Occ=LoopBreaker]
  :: forall (f :: * -> *) a.
     Alternative f =>
     forall b. Integral b => b -> Alt f a -> Alt f a
[GblId,
 Arity=2,
 Str=<L,U(A,U,U,A,A)><L,U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)>,
 Unf=OtherCon []]
Data.Semigroup.Internal.$fSemigroupAlt_$cstimes
  = \ (@ (f_X6tGK :: * -> *))
      (@ a_X6tGM)
      ($dAlternative_X6tGO :: Alternative f_X6tGK)
      (@ b_a6tqB)
      ($dIntegral_a6tqD :: Integral b_a6tqB) ->
      stimesMonoid
        @ b_a6tqB
        @ (Alt f_X6tGK a_X6tGM)
        $dIntegral_a6tqD
        (Data.Semigroup.Internal.$fMonoidAlt
           @ f_X6tGK @ a_X6tGM $dAlternative_X6tGO)
end Rec }

Rec {
-- RHS size: {terms: 16, types: 19, coercions: 7, joins: 0/1}
Data.Semigroup.Internal.$fSemigroupEndo1 [Occ=LoopBreaker]
  :: forall a. Endo a -> [Endo a] -> Endo a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,1*U>, Unf=OtherCon []]
Data.Semigroup.Internal.$fSemigroupEndo1
  = \ (@ a_a6tyX)
      (b_i6tZa :: Endo a_a6tyX)
      (ds1_i6tZb :: [Endo a_a6tyX]) ->
      case ds1_i6tZb of {
        [] -> b_i6tZa;
        : c_i6tZj cs_i6tZk ->
          let {
            g_s6ulv [Dmd=<L,C(U)>] :: Endo a_a6tyX
            [LclId]
            g_s6ulv
              = Data.Semigroup.Internal.$fSemigroupEndo1
                  @ a_a6tyX c_i6tZj cs_i6tZk } in
          (\ (x_i6tXm :: a_a6tyX) ->
             (b_i6tZa
              `cast` (Data.Semigroup.Internal.N:Endo[0] <a_a6tyX>_R
                      :: (Endo a_a6tyX :: *) ~R# (a_a6tyX -> a_a6tyX :: *)))
               ((g_s6ulv
                 `cast` (Data.Semigroup.Internal.N:Endo[0] <a_a6tyX>_R
                         :: (Endo a_a6tyX :: *) ~R# (a_a6tyX -> a_a6tyX :: *)))
                  x_i6tXm))
          `cast` (Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6tyX>_R)
                  :: (a_a6tyX -> a_a6tyX :: *) ~R# (Endo a_a6tyX :: *))
      }
end Rec }

-- RHS size: {terms: 8, types: 14, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupEndo_$csconcat
  :: forall a. NonEmpty (Endo a) -> Endo a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a6tyX)
                 (ds_i6tZ5 [Occ=Once!] :: NonEmpty (Endo a_a6tyX)) ->
                 case ds_i6tZ5 of { :| a1_i6tZc [Occ=Once] as_i6tZd [Occ=Once] ->
                 Data.Semigroup.Internal.$fSemigroupEndo1
                   @ a_a6tyX a1_i6tZc as_i6tZd
                 }}]
Data.Semigroup.Internal.$fSemigroupEndo_$csconcat
  = \ (@ a_a6tyX) (ds_i6tZ5 :: NonEmpty (Endo a_a6tyX)) ->
      case ds_i6tZ5 of { :| a1_i6tZc as_i6tZd ->
      Data.Semigroup.Internal.$fSemigroupEndo1
        @ a_a6tyX a1_i6tZc as_i6tZd
      }

Rec {
-- RHS size: {terms: 12, types: 15, coercions: 2, joins: 0/0}
Data.Semigroup.Internal.$fMonoidEndo1 [Occ=LoopBreaker]
  :: forall a. [Endo a] -> a -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []]
Data.Semigroup.Internal.$fMonoidEndo1
  = \ (@ a_a6tyy) (ds_i6u2C :: [Endo a_a6tyy]) (eta_B1 :: a_a6tyy) ->
      case ds_i6u2C of {
        [] -> eta_B1;
        : y_i6u2H ys_i6u2I ->
          (y_i6u2H
           `cast` (Data.Semigroup.Internal.N:Endo[0] <a_a6tyy>_R
                   :: (Endo a_a6tyy :: *) ~R# (a_a6tyy -> a_a6tyy :: *)))
            (Data.Semigroup.Internal.$fMonoidEndo1 @ a_a6tyy ys_i6u2I eta_B1)
      }
end Rec }

Rec {
-- RHS size: {terms: 5, types: 9, coercions: 11, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupEndo [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Semigroup (Endo a)
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ (@ a_a6r2H) ->
       GHC.Base.C:Semigroup TYPE: Endo a_a6r2H
                            (. @ a_a6r2H @ a_a6r2H @ a_a6r2H)
                            `cast` (Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2H>_R)
                                    ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2H>_R)
                                    ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2H>_R)
                                    :: ((a_a6r2H -> a_a6r2H)
                                        -> (a_a6r2H -> a_a6r2H) -> a_a6r2H -> a_a6r2H :: *)
                                       ~R# (Endo a_a6r2H -> Endo a_a6r2H -> Endo a_a6r2H :: *))
                            Data.Semigroup.Internal.$fSemigroupEndo_$csconcat @ a_a6r2H
                            Data.Semigroup.Internal.$fSemigroupEndo_$cstimes @ a_a6r2H]
Data.Semigroup.Internal.$fSemigroupEndo
  = \ (@ a_a6tyX) ->
      GHC.Base.C:Semigroup
        @ (Endo a_a6tyX)
        ((. @ a_a6tyX @ a_a6tyX @ a_a6tyX)
         `cast` (Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6tyX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6tyX>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6tyX>_R)
                 :: ((a_a6tyX -> a_a6tyX)
                     -> (a_a6tyX -> a_a6tyX) -> a_a6tyX -> a_a6tyX :: *)
                    ~R# (Endo a_a6tyX -> Endo a_a6tyX -> Endo a_a6tyX :: *)))
        (Data.Semigroup.Internal.$fSemigroupEndo_$csconcat @ a_a6tyX)
        (Data.Semigroup.Internal.$fSemigroupEndo_$cstimes @ a_a6tyX)

-- RHS size: {terms: 6, types: 10, coercions: 21, joins: 0/0}
Data.Semigroup.Internal.$fMonoidEndo [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Monoid (Endo a)
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ (@ a_a6r2G) ->
       GHC.Base.C:Monoid TYPE: Endo a_a6r2G
                         Data.Semigroup.Internal.$fSemigroupEndo @ a_a6r2G
                         (id @ a_a6r2G)
                         `cast` (Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2G>_R)
                                 :: (a_a6r2G -> a_a6r2G :: *) ~R# (Endo a_a6r2G :: *))
                         (. @ a_a6r2G @ a_a6r2G @ a_a6r2G)
                         `cast` (Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2G>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2G>_R)
                                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2G>_R)
                                 :: ((a_a6r2G -> a_a6r2G)
                                     -> (a_a6r2G -> a_a6r2G) -> a_a6r2G -> a_a6r2G :: *)
                                    ~R# (Endo a_a6r2G -> Endo a_a6r2G -> Endo a_a6r2G :: *))
                         (Data.Semigroup.Internal.$fMonoidEndo1 @ a_a6r2G)
                         `cast` (<[Endo a_a6r2G]>_R
                                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_a6r2G>_R)
                                 :: ([Endo a_a6r2G] -> a_a6r2G -> a_a6r2G :: *)
                                    ~R# ([Endo a_a6r2G] -> Endo a_a6r2G :: *))]
Data.Semigroup.Internal.$fMonoidEndo
  = \ (@ a_X6tKH) ->
      GHC.Base.C:Monoid
        @ (Endo a_X6tKH)
        (Data.Semigroup.Internal.$fSemigroupEndo @ a_X6tKH)
        ((id @ a_X6tKH)
         `cast` (Sym (Data.Semigroup.Internal.N:Endo[0] <a_X6tKH>_R)
                 :: (a_X6tKH -> a_X6tKH :: *) ~R# (Endo a_X6tKH :: *)))
        ((. @ a_X6tKH @ a_X6tKH @ a_X6tKH)
         `cast` (Sym (Data.Semigroup.Internal.N:Endo[0] <a_X6tKH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_X6tKH>_R)
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_X6tKH>_R)
                 :: ((a_X6tKH -> a_X6tKH)
                     -> (a_X6tKH -> a_X6tKH) -> a_X6tKH -> a_X6tKH :: *)
                    ~R# (Endo a_X6tKH -> Endo a_X6tKH -> Endo a_X6tKH :: *)))
        ((Data.Semigroup.Internal.$fMonoidEndo1 @ a_X6tKH)
         `cast` (<[Endo a_X6tKH]>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <a_X6tKH>_R)
                 :: ([Endo a_X6tKH] -> a_X6tKH -> a_X6tKH :: *)
                    ~R# ([Endo a_X6tKH] -> Endo a_X6tKH :: *)))

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$fSemigroupEndo_$cstimes [Occ=LoopBreaker]
  :: forall a b. Integral b => b -> Endo a -> Endo a
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)>,
 Unf=OtherCon []]
Data.Semigroup.Internal.$fSemigroupEndo_$cstimes
  = \ (@ a_a6tyX)
      (@ b_a6tzv)
      ($dIntegral_a6tzx :: Integral b_a6tzv) ->
      stimesMonoid
        @ b_a6tzv
        @ (Endo a_a6tyX)
        $dIntegral_a6tzx
        (Data.Semigroup.Internal.$fMonoidEndo @ a_a6tyX)
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8_r6v1e :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl8_r6v1e = "stimes: positive multiplier expected"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
lvl9_r6v1f :: forall a. a
[GblId, Str=x]
lvl9_r6v1f
  = \ (@ a_a6swE) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ a_a6swE (unpackCString# lvl8_r6v1e)

-- RHS size: {terms: 133, types: 72, coercions: 0, joins: 4/10}
stimesDefault
  :: forall b a. (Integral b, Semigroup a) => b -> a -> a
[GblId,
 Arity=4,
 Str=<S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(C(C1(U)),A,A)><L,U><L,U>,
 Unf=OtherCon []]
stimesDefault
  = \ (@ b_a6swD)
      (@ a_a6swE)
      ($dIntegral_a6swG :: Integral b_a6swD)
      ($dSemigroup_a6swH :: Semigroup a_a6swE)
      (eta_B2 :: b_a6swD)
      (eta1_B1 :: a_a6swE) ->
      let {
        $dReal_s6uld [Dmd=<S(LS(S(C(C(S))L)LLC(C(S))LLLL)L),U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A)>]
          :: Real b_a6swD
        [LclId]
        $dReal_s6uld = GHC.Real.$p1Integral @ b_a6swD $dIntegral_a6swG } in
      case <=
             @ b_a6swD
             (GHC.Real.$p2Real @ b_a6swD $dReal_s6uld)
             eta_B2
             (fromInteger
                @ b_a6swD
                (GHC.Real.$p1Real @ b_a6swD $dReal_s6uld)
                Data.Semigroup.Internal.$fMonoidSum1)
      of {
        False ->
          let {
            $dNum_s6ulm [Dmd=<L,U(A,A,A,A,A,A,C(U))>] :: Num b_a6swD
            [LclId]
            $dNum_s6ulm = GHC.Real.$p1Real @ b_a6swD $dReal_s6uld } in
          let {
            lvl12_s6ut0 :: b_a6swD
            [LclId]
            lvl12_s6ut0 = fromInteger @ b_a6swD $dNum_s6ulm lvl7_r6v1d } in
          join {
            exit_X7s [Dmd=<C(C(S)),C(C1(U))>] :: a_a6swE -> b_a6swD -> a_a6swE
            [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>]
            exit_X7s (x_a6r3j [OS=OneShot] :: a_a6swE)
                     (y_a6r3k [OS=OneShot] :: b_a6swD)
              = let {
                  $dEq_s6ull [Dmd=<S(S(C(C(S))L)LLLLLLL),1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>]
                    :: Ord b_a6swD
                  [LclId]
                  $dEq_s6ull = GHC.Real.$p2Real @ b_a6swD $dReal_s6uld } in
                let {
                  $dEq1_s6ulk [Dmd=<S(C(C(S))L),U(C(C1(U)),A)>] :: Eq b_a6swD
                  [LclId]
                  $dEq1_s6ulk = GHC.Classes.$p1Ord @ b_a6swD $dEq_s6ull } in
                let {
                  lvl13_s6usI :: b_a6swD
                  [LclId]
                  lvl13_s6usI
                    = fromInteger
                        @ b_a6swD $dNum_s6ulm Data.Semigroup.Internal.$fMonoidProduct1 } in
                case == @ b_a6swD $dEq1_s6ulk y_a6r3k lvl13_s6usI of {
                  False ->
                    join {
                      exit1_X7z [Dmd=<C(C(S)),C(C1(U))>] :: a_a6swE -> a_a6swE -> a_a6swE
                      [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>]
                      exit1_X7z (x1_a6r3l [OS=OneShot] :: a_a6swE)
                                (z_a6r3n [OS=OneShot] :: a_a6swE)
                        = <> @ a_a6swE $dSemigroup_a6swH x1_a6r3l z_a6r3n } in
                    joinrec {
                      g_s6ulj [Occ=LoopBreaker]
                        :: a_a6swE -> b_a6swD -> a_a6swE -> a_a6swE
                      [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []]
                      g_s6ulj (x1_a6r3l :: a_a6swE)
                              (y1_a6r3m :: b_a6swD)
                              (z_a6r3n :: a_a6swE)
                        = case even @ b_a6swD $dIntegral_a6swG y1_a6r3m of {
                            False ->
                              case == @ b_a6swD $dEq1_s6ulk y1_a6r3m lvl13_s6usI of {
                                False ->
                                  jump g_s6ulj
                                    (<> @ a_a6swE $dSemigroup_a6swH x1_a6r3l x1_a6r3l)
                                    (quot @ b_a6swD $dIntegral_a6swG y1_a6r3m lvl12_s6ut0)
                                    (<> @ a_a6swE $dSemigroup_a6swH x1_a6r3l z_a6r3n);
                                True -> jump exit1_X7z x1_a6r3l z_a6r3n
                              };
                            True ->
                              jump g_s6ulj
                                (<> @ a_a6swE $dSemigroup_a6swH x1_a6r3l x1_a6r3l)
                                (quot @ b_a6swD $dIntegral_a6swG y1_a6r3m lvl12_s6ut0)
                                z_a6r3n
                          }; } in
                    jump g_s6ulj
                      (<> @ a_a6swE $dSemigroup_a6swH x_a6r3j x_a6r3j)
                      (quot @ b_a6swD $dIntegral_a6swG y_a6r3k lvl12_s6ut0)
                      x_a6r3j;
                  True -> x_a6r3j
                } } in
          joinrec {
            f_s6ulc [Occ=LoopBreaker] :: a_a6swE -> b_a6swD -> a_a6swE
            [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
            f_s6ulc (x_a6r3j :: a_a6swE) (y_a6r3k :: b_a6swD)
              = case even @ b_a6swD $dIntegral_a6swG y_a6r3k of {
                  False -> jump exit_X7s x_a6r3j y_a6r3k;
                  True ->
                    jump f_s6ulc
                      (<> @ a_a6swE $dSemigroup_a6swH x_a6r3j x_a6r3j)
                      (quot @ b_a6swD $dIntegral_a6swG y_a6r3k lvl12_s6ut0)
                }; } in
          jump f_s6ulc eta1_B1 eta_B2;
        True -> lvl9_r6v1f @ a_a6swE
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl10_r6v1g :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl10_r6v1g = "stimes: Maybe, negative multiplier"#

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.stimesMaybe1 :: forall a. Maybe a
[GblId, Str=x]
Data.Semigroup.Internal.stimesMaybe1
  = \ (@ a_a6swi) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ (Maybe a_a6swi) (unpackCString# lvl10_r6v1g)

-- RHS size: {terms: 34, types: 28, coercions: 0, joins: 0/1}
stimesMaybe
  :: forall b a. (Integral b, Semigroup a) => b -> Maybe a -> Maybe a
[GblId,
 Arity=4,
 Str=<L,U(U(U(U,U,U,U,U,U,U),U(U,U,U,U,U,U,U,U),U),U,U,U,U,U,U,U,U)><L,1*U(A,A,1*C1(C1(C1(U))))><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 30] 250 40}]
stimesMaybe
  = \ (@ b_a6swh)
      (@ a_a6swi)
      ($dIntegral_a6swk :: Integral b_a6swh)
      ($dSemigroup_a6swl :: Semigroup a_a6swi)
      (eta_B2 :: b_a6swh)
      (eta1_B1 :: Maybe a_a6swi) ->
      case eta1_B1 of {
        Nothing -> GHC.Base.Nothing @ a_a6swi;
        Just a1_a6r3p ->
          let {
            $dReal_s6ul5 [Dmd=<S(LS(LC(C(S))LLLLLL)L),U(1*U(A,A,A,A,A,A,1*C1(U)),1*U(A,1*C1(C1(U)),A,A,A,A,A,A),A)>]
              :: Real b_a6swh
            [LclId]
            $dReal_s6ul5 = GHC.Real.$p1Integral @ b_a6swh $dIntegral_a6swk } in
          case compare
                 @ b_a6swh
                 (GHC.Real.$p2Real @ b_a6swh $dReal_s6ul5)
                 eta_B2
                 (fromInteger
                    @ b_a6swh
                    (GHC.Real.$p1Real @ b_a6swh $dReal_s6ul5)
                    Data.Semigroup.Internal.$fMonoidSum1)
          of {
            LT -> Data.Semigroup.Internal.stimesMaybe1 @ a_a6swi;
            EQ -> GHC.Base.Nothing @ a_a6swi;
            GT ->
              GHC.Base.Just
                @ a_a6swi
                (stimes
                   @ a_a6swi
                   $dSemigroup_a6swl
                   @ b_a6swh
                   $dIntegral_a6swk
                   eta_B2
                   a1_a6r3p)
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl11_r6v1h :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl11_r6v1h = "stimes: [], negative multiplier"#

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.stimesList1 :: forall a. [a]
[GblId, Str=x]
Data.Semigroup.Internal.stimesList1
  = \ (@ a_a6svs) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ [a_a6svs] (unpackCString# lvl11_r6v1h)

-- RHS size: {terms: 54, types: 38, coercions: 0, joins: 0/7}
stimesList :: forall b a. Integral b => b -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(S(C(C(S))L)LC(C(S))LLLLL)L)LLLLLLLL),1*U(1*U(1*U(A,C(C1(U)),A,A,A,A,C(U)),1*U(1*U(C(C1(U)),A),A,1*C1(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 480 0}]
stimesList
  = \ (@ b_a6svr)
      (@ a_a6svs)
      ($dIntegral_a6svu :: Integral b_a6svr)
      (eta_B2 :: b_a6svr)
      (eta1_B1 :: [a_a6svs]) ->
      let {
        $dReal_s6ul3 [Dmd=<S(LS(S(C(C(S))L)LC(C(S))LLLLL)L),U(1*U(A,C(C1(U)),A,A,A,A,C(U)),1*U(1*U(C(C1(U)),A),A,1*C1(C1(U)),A,A,A,A,A),A)>]
          :: Real b_a6svr
        [LclId]
        $dReal_s6ul3 = GHC.Real.$p1Integral @ b_a6svr $dIntegral_a6svu } in
      let {
        $dNum_s6ul2 [Dmd=<L,U(A,C(C1(U)),A,A,A,A,C(U))>] :: Num b_a6svr
        [LclId]
        $dNum_s6ul2 = GHC.Real.$p1Real @ b_a6svr $dReal_s6ul3 } in
      let {
        $dOrd_s6ul1 [Dmd=<S(S(C(C(S))L)LC(C(S))LLLLL),U(1*U(C(C1(U)),A),A,1*C1(C1(U)),A,A,A,A,A)>]
          :: Ord b_a6svr
        [LclId]
        $dOrd_s6ul1 = GHC.Real.$p2Real @ b_a6svr $dReal_s6ul3 } in
      case < @ b_a6svr
             $dOrd_s6ul1
             eta_B2
             (fromInteger
                @ b_a6svr $dNum_s6ul2 Data.Semigroup.Internal.$fMonoidSum1)
      of {
        False ->
          let {
            lvl12_s6utd :: b_a6svr
            [LclId]
            lvl12_s6utd
              = fromInteger
                  @ b_a6svr $dNum_s6ul2 Data.Semigroup.Internal.$fMonoidProduct1 } in
          let {
            lvl13_s6uta :: b_a6svr
            [LclId]
            lvl13_s6uta
              = fromInteger
                  @ b_a6svr $dNum_s6ul2 Data.Semigroup.Internal.$fMonoidSum1 } in
          let {
            $dEq_s6ul0 [Dmd=<S(C(C(S))L),U(C(C1(U)),A)>] :: Eq b_a6svr
            [LclId]
            $dEq_s6ul0 = GHC.Classes.$p1Ord @ b_a6svr $dOrd_s6ul1 } in
          letrec {
            rep_s6ukZ [Occ=LoopBreaker] :: b_a6svr -> [a_a6svs]
            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
            rep_s6ukZ
              = \ (ds_d6tTT :: b_a6svr) ->
                  case == @ b_a6svr $dEq_s6ul0 ds_d6tTT lvl13_s6uta of {
                    False ->
                      ++
                        @ a_a6svs
                        eta1_B1
                        (rep_s6ukZ (- @ b_a6svr $dNum_s6ul2 ds_d6tTT lvl12_s6utd));
                    True -> GHC.Types.[] @ a_a6svs
                  }; } in
          rep_s6ukZ eta_B2;
        True -> Data.Semigroup.Internal.stimesList1 @ a_a6svs
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$trModule3
  = GHC.Types.TrNameS Data.Semigroup.Internal.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
Data.Semigroup.Internal.$trModule2 = "Data.Semigroup.Internal"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$trModule1
  = GHC.Types.TrNameS Data.Semigroup.Internal.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Semigroup.Internal.$trModule
  = GHC.Types.Module
      Data.Semigroup.Internal.$trModule3
      Data.Semigroup.Internal.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r6v1i :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r6v1i
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcBool (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1_r6v1j :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep1_r6v1j = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r6v1k :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep2_r6v1k = GHC.Types.KindRepFun $krep1_r6v1j $krep1_r6v1j

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r6v1l :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep3_r6v1l = GHC.Types.KindRepFun $krep1_r6v1j GHC.Types.krep$*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcAlt1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tcAlt1
  = GHC.Types.KindRepFun $krep3_r6v1l $krep3_r6v1l

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep4_r6v1m :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_r6v1m = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep5_r6v1n :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_r6v1n = GHC.Types.KindRepVar 2#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r6v1o :: KindRep
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []]
$krep6_r6v1o = GHC.Types.KindRepApp $krep4_r6v1m $krep5_r6v1n

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcDual1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tcDual1
  = GHC.Types.TrNameS Data.Semigroup.Internal.$fReadDual5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcDual :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tcDual
  = GHC.Types.TyCon
      14711416616195557841##
      10971851269997195248##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tcDual1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_r6v1p :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r6v1p
  = GHC.Types.: @ KindRep $krep1_r6v1j (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r6v1q :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_r6v1q
  = GHC.Types.KindRepTyConApp
      Data.Semigroup.Internal.$tcDual $krep7_r6v1p

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Dual1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tc'Dual1
  = GHC.Types.KindRepFun $krep1_r6v1j $krep8_r6v1q

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Dual3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$tc'Dual3 = "'Dual"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Dual2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tc'Dual2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tc'Dual3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Dual :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tc'Dual
  = GHC.Types.TyCon
      15885009659242865261##
      15931193389986079612##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tc'Dual2
      1#
      Data.Semigroup.Internal.$tc'Dual1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcEndo2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$tcEndo2 = "Endo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcEndo1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tcEndo1
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tcEndo2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcEndo :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tcEndo
  = GHC.Types.TyCon
      16820921632006328603##
      4981834339379479823##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tcEndo1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r6v1r :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r6v1r
  = GHC.Types.KindRepTyConApp
      Data.Semigroup.Internal.$tcEndo $krep7_r6v1p

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Endo1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tc'Endo1
  = GHC.Types.KindRepFun $krep2_r6v1k $krep9_r6v1r

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Endo3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$tc'Endo3 = "'Endo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Endo2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tc'Endo2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tc'Endo3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Endo :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tc'Endo
  = GHC.Types.TyCon
      156297185665537802##
      8988325904501215692##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tc'Endo2
      1#
      Data.Semigroup.Internal.$tc'Endo1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcAll1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tcAll1
  = GHC.Types.TrNameS Data.Semigroup.Internal.$fReadAll13

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcAll :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tcAll
  = GHC.Types.TyCon
      14149274874874504208##
      8164254778609961234##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tcAll1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_r6v1s :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r6v1s
  = GHC.Types.KindRepTyConApp
      Data.Semigroup.Internal.$tcAll (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'All1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tc'All1
  = GHC.Types.KindRepFun $krep_r6v1i $krep10_r6v1s

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'All3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$tc'All3 = "'All"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'All2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tc'All2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tc'All3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'All :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tc'All
  = GHC.Types.TyCon
      1168494541548489787##
      10689931498683547374##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tc'All2
      0#
      Data.Semigroup.Internal.$tc'All1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcAny1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tcAny1
  = GHC.Types.TrNameS Data.Semigroup.Internal.$fReadAny6

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcAny :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tcAny
  = GHC.Types.TyCon
      11600287624241135668##
      17600231731807245316##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tcAny1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_r6v1t :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r6v1t
  = GHC.Types.KindRepTyConApp
      Data.Semigroup.Internal.$tcAny (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Any1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tc'Any1
  = GHC.Types.KindRepFun $krep_r6v1i $krep11_r6v1t

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Any3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$tc'Any3 = "'Any"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Any2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tc'Any2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tc'Any3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Any :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tc'Any
  = GHC.Types.TyCon
      16164188984560189013##
      110490866064676064##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tc'Any2
      0#
      Data.Semigroup.Internal.$tc'Any1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcSum1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tcSum1
  = GHC.Types.TrNameS Data.Semigroup.Internal.$fReadSum5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcSum :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tcSum
  = GHC.Types.TyCon
      7521450980204740829##
      14029043805042477297##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tcSum1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r6v1u :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep12_r6v1u
  = GHC.Types.KindRepTyConApp
      Data.Semigroup.Internal.$tcSum $krep7_r6v1p

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Sum1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tc'Sum1
  = GHC.Types.KindRepFun $krep1_r6v1j $krep12_r6v1u

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Sum3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$tc'Sum3 = "'Sum"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Sum2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tc'Sum2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tc'Sum3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Sum :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tc'Sum
  = GHC.Types.TyCon
      7144872330799658717##
      13465414667749873698##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tc'Sum2
      1#
      Data.Semigroup.Internal.$tc'Sum1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcProduct1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tcProduct1
  = GHC.Types.TrNameS Data.Semigroup.Internal.$fReadProduct5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcProduct :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tcProduct
  = GHC.Types.TyCon
      12271745360620305859##
      5747185732973757022##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tcProduct1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r6v1v :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r6v1v
  = GHC.Types.KindRepTyConApp
      Data.Semigroup.Internal.$tcProduct $krep7_r6v1p

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Product1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tc'Product1
  = GHC.Types.KindRepFun $krep1_r6v1j $krep13_r6v1v

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Product3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Semigroup.Internal.$tc'Product3 = "'Product"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Product2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tc'Product2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tc'Product3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Product :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tc'Product
  = GHC.Types.TyCon
      3191278115598904989##
      12638872580785847167##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tc'Product2
      1#
      Data.Semigroup.Internal.$tc'Product1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcAlt2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tcAlt2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$fReadAlt5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tcAlt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tcAlt
  = GHC.Types.TyCon
      7601313288863504805##
      2369500163797891218##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tcAlt2
      1#
      Data.Semigroup.Internal.$tcAlt1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep14_r6v1w :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep14_r6v1w
  = GHC.Types.: @ KindRep $krep5_r6v1n (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_r6v1x :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep15_r6v1x = GHC.Types.: @ KindRep $krep4_r6v1m $krep14_r6v1w

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep16_r6v1y :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep16_r6v1y = GHC.Types.: @ KindRep $krep1_r6v1j $krep15_r6v1x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r6v1z :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep17_r6v1z
  = GHC.Types.KindRepTyConApp
      Data.Semigroup.Internal.$tcAlt $krep16_r6v1y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Alt1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Semigroup.Internal.$tc'Alt1
  = GHC.Types.KindRepFun $krep6_r6v1o $krep17_r6v1z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Alt3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Semigroup.Internal.$tc'Alt3 = "'Alt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Alt2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Semigroup.Internal.$tc'Alt2
  = GHC.Types.TrNameS Data.Semigroup.Internal.$tc'Alt3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Semigroup.Internal.$tc'Alt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Semigroup.Internal.$tc'Alt
  = GHC.Types.TyCon
      1436877498177162483##
      16937142347825669760##
      Data.Semigroup.Internal.$trModule
      Data.Semigroup.Internal.$tc'Alt2
      3#
      Data.Semigroup.Internal.$tc'Alt1


