
==================== Raw Cmm ====================
2018-03-16 16:01:44.211968791 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:01:44.215191907 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat1_closure" {
     Data.Semigroup.Internal.$w$csconcat1_closure:
         const Data.Semigroup.Internal.$w$csconcat1_info;
 },
 go_s6v1E_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6yl3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yl4; else goto c6yl5;
       c6yl4: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yl5: // global
           I64[Sp - 32] = block_c6ykW_info;
           _s6v1E::P64 = R1;
           _s6v1B::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6v1B::P64;
           P64[Sp - 16] = _s6v1E::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6ylf; else goto c6ykX;
       u6ylf: // global
           call _c6ykW(R1) args: 0, res: 0, upd: 0;
       c6ykX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6v1E_info" {
     go_s6v1E_info:
         const go_s6v1E_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6ykW() //  [R1]
         { []
         }
     {offset
       c6ykW: // global
           if (R1 & 7 == 1) goto c6yl0; else goto c6yl1;
       c6yl0: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6yl1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6yld; else goto c6ylc;
       c6yld: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ylc: // global
           _s6v1I::P64 = P64[R1 + 6];
           _s6v1J::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6v1I::P64;
           P64[Hp] = _s6v1J::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ykW_info" {
     block_c6ykW_info:
         const _c6ykW;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ylg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ylk; else goto c6ylj;
       c6ylk: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ylj: // global
           I64[Hp - 8] = go_s6v1E_info;
           P64[Hp] = R2;
           _s6v1C::P64 = R3;
           R3 = R4;
           R2 = _s6v1C::P64;
           R1 = Hp - 6;
           call go_s6v1E_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat1_info" {
     Data.Semigroup.Internal.$w$csconcat1_info:
         const Data.Semigroup.Internal.$w$csconcat1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.224121307 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupDual_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupDual_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupDual_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupDual_$csconcat_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c6ylI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ylJ; else goto c6ylK;
       c6ylJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupDual_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ylK: // global
           I64[Sp - 16] = block_c6ylF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6ylO; else goto c6ylG;
       u6ylO: // global
           call _c6ylF(R1) args: 0, res: 0, upd: 0;
       c6ylG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupDual_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupDual_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupDual_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6ylF() //  [R1]
         { []
         }
     {offset
       c6ylF: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ylF_info" {
     block_c6ylF_info:
         const _c6ylF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.232138934 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupDual_closure" {
     Data.Semigroup.Internal.$fSemigroupDual_closure:
         const Data.Semigroup.Internal.$fSemigroupDual_info;
 },
 sat_s6v1Y_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6ym7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ym8; else goto c6ym9;
       c6ym8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ym9: // global
           _s6v1V::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6v1V::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Base.stimes_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v1Y_info" {
     sat_s6v1Y_info:
         const sat_s6v1Y_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6v1U_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ymf: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupDual_$csconcat_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v1U_info" {
     sat_s6v1U_info:
         const sat_s6v1U_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v1T_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ymn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ymo; else goto c6ymp;
       c6ymo: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ymp: // global
           _s6v1R::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6v1R::P64;
           Sp = Sp - 24;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v1T_info" {
     sat_s6v1T_info:
         const sat_s6v1T_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fSemigroupDual_entry() //  [R2]
         { []
         }
     {offset
       c6ymr: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6ymv; else goto c6ymu;
       c6ymv: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ymu: // global
           I64[Hp - 72] = sat_s6v1Y_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v1U_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v1T_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 69;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupDual_info" {
     Data.Semigroup.Internal.$fSemigroupDual_info:
         const Data.Semigroup.Internal.$fSemigroupDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.246382192 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_closure" {
     Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_closure:
         const Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_info;
 },
 sat_s6v20_entry() //  [R1]
         { []
         }
     {offset
       c6ymX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ymY; else goto c6ymZ;
       c6ymY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ymZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v20_info" {
     sat_s6v20_info:
         const sat_s6v20_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       c6yn0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yn4; else goto c6yn3;
       c6yn4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yn3: // global
           I64[Hp - 16] = sat_s6v20_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fSemigroupDual_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_info" {
     Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_info:
         const Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.254108454 UTC

[section ""data" . $cmappend_r6v15_closure" {
     $cmappend_r6v15_closure:
         const $cmappend_r6v15_info;
 },
 $cmappend_r6v15_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ynj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ynk; else goto c6ynl;
       c6ynk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r6v15_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ynl: // global
           I64[Sp - 24] = block_c6ynh_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $cmappend_r6v15_info" {
     $cmappend_r6v15_info:
         const $cmappend_r6v15_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ynh() //  [R1]
         { []
         }
     {offset
       c6ynh: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _s6v22::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6v22::P64;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ynh_info" {
     block_c6ynh_info:
         const _c6ynh;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.260077715 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_$cmappend_closure" {
     Data.Semigroup.Internal.$fMonoidDual_$cmappend_closure:
         const Data.Semigroup.Internal.$fMonoidDual_$cmappend_info;
 },
 Data.Semigroup.Internal.$fMonoidDual_$cmappend_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       c6ynC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r6v15_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_$cmappend_info" {
     Data.Semigroup.Internal.$fMonoidDual_$cmappend_info:
         const Data.Semigroup.Internal.$fMonoidDual_$cmappend_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.265972803 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidDual_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidDual_$cmconcat_info;
 },
 lvl12_s6v27_entry() //  [R1]
         { []
         }
     {offset
       c6ynR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ynS; else goto c6ynT;
       c6ynS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ynT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6v27_info" {
     lvl12_s6v27_info:
         const lvl12_s6v27_entry;
         const 1;
         const 16;
 },
 z_s6v28_entry() //  [R1]
         { []
         }
     {offset
       c6ynY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ynZ; else goto c6yo0;
       c6ynZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yo0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6v28_info" {
     z_s6v28_info:
         const z_s6v28_entry;
         const 1;
         const 16;
 },
 go_s6v29_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yod: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yoe; else goto c6yof;
       c6yoe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yof: // global
           I64[Sp - 32] = block_c6yo6_info;
           _s6v29::P64 = R1;
           _s6v27::P64 = P64[R1 + 7];
           _s6v28::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6v27::P64;
           P64[Sp - 16] = _s6v28::P64;
           P64[Sp - 8] = _s6v29::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6yop; else goto c6yo7;
       u6yop: // global
           call _c6yo6(R1) args: 0, res: 0, upd: 0;
       c6yo7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6v29_info" {
     go_s6v29_info:
         const go_s6v29_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6yo6() //  [R1]
         { []
         }
     {offset
       c6yo6: // global
           if (R1 & 7 == 1) goto c6yoa; else goto c6yob;
       c6yoa: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6yob: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yon; else goto c6yom;
       c6yon: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yom: // global
           _s6v2c::P64 = P64[R1 + 6];
           _s6v2d::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6v2d::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 24] = _s6v2c::P64;
           Sp = Sp + 8;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yo6_info" {
     block_c6yo6_info:
         const _c6yo6;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidDual_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c6yoq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6you; else goto c6yot;
       c6you: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidDual_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yot: // global
           I64[Hp - 64] = lvl12_s6v27_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = z_s6v28_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6v29_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_s6v29_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidDual_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidDual_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.279446836 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_closure" {
     Data.Semigroup.Internal.$fMonoidDual_closure:
         const Data.Semigroup.Internal.$fMonoidDual_info;
 },
 sat_s6v2j_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yp4: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fMonoidDual_$cmconcat_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v2j_info" {
     sat_s6v2j_info:
         const sat_s6v2j_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v2i_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ypc: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fMonoidDual_$cmappend_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v2i_info" {
     sat_s6v2i_info:
         const sat_s6v2i_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6v2h_entry() //  [R1]
         { []
         }
     {offset
       c6ypj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ypk; else goto c6ypl;
       c6ypk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ypl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v2h_info" {
     sat_s6v2h_info:
         const sat_s6v2h_entry;
         const 1;
         const 16;
 },
 sat_s6v2g_entry() //  [R1]
         { []
         }
     {offset
       c6ypq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ypr; else goto c6yps;
       c6ypr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yps: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v2g_info" {
     sat_s6v2g_info:
         const sat_s6v2g_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonoidDual_entry() //  [R2]
         { []
         }
     {offset
       c6ypu: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c6ypy; else goto c6ypx;
       c6ypy: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ypx: // global
           I64[Hp - 112] = sat_s6v2j_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s6v2i_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v2h_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v2g_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 111;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_info" {
     Data.Semigroup.Internal.$fMonoidDual_info:
         const Data.Semigroup.Internal.$fMonoidDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.289648969 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorDual2_closure" {
     Data.Semigroup.Internal.$fFunctorDual2_closure:
         const Data.Semigroup.Internal.$fFunctorDual2_info;
 },
 Data.Semigroup.Internal.$fFunctorDual2_entry() //  [R2]
         { []
         }
     {offset
       c6yq0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fFunctorDual2_info" {
     Data.Semigroup.Internal.$fFunctorDual2_info:
         const Data.Semigroup.Internal.$fFunctorDual2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.293165383 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorDual1_closure" {
     Data.Semigroup.Internal.$fFunctorDual1_closure:
         const Data.Semigroup.Internal.$fFunctorDual1_info;
 },
 Data.Semigroup.Internal.$fFunctorDual1_entry() //  [R2]
         { []
         }
     {offset
       c6yqb: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fFunctorDual1_info" {
     Data.Semigroup.Internal.$fFunctorDual1_info:
         const Data.Semigroup.Internal.$fFunctorDual1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.297005404 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorDual_closure" {
     Data.Semigroup.Internal.$fFunctorDual_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.Internal.$fFunctorDual2_closure+1;
         const Data.Semigroup.Internal.$fFunctorDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.299147372 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual3_closure" {
     Data.Semigroup.Internal.$fApplicativeDual3_closure:
         const Data.Semigroup.Internal.$fApplicativeDual3_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual3_entry() //  [R2]
         { []
         }
     {offset
       c6yqn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual3_info" {
     Data.Semigroup.Internal.$fApplicativeDual3_info:
         const Data.Semigroup.Internal.$fApplicativeDual3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.302527076 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual4_closure" {
     Data.Semigroup.Internal.$fApplicativeDual4_closure:
         const Data.Semigroup.Internal.$fApplicativeDual4_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual4_entry() //  [R2]
         { []
         }
     {offset
       c6yqy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual4_info" {
     Data.Semigroup.Internal.$fApplicativeDual4_info:
         const Data.Semigroup.Internal.$fApplicativeDual4_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.305975336 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual2_closure" {
     Data.Semigroup.Internal.$fApplicativeDual2_closure:
         const Data.Semigroup.Internal.$fApplicativeDual2_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6yqJ: // global
           _s6v2p::P64 = R2;
           R2 = R3;
           R1 = _s6v2p::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual2_info" {
     Data.Semigroup.Internal.$fApplicativeDual2_info:
         const Data.Semigroup.Internal.$fApplicativeDual2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.309802527 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual_$c*>_closure" {
     Data.Semigroup.Internal.$fApplicativeDual_$c*>_closure:
         const Data.Semigroup.Internal.$fApplicativeDual_$c*>_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual_$c*>_entry() //  [R3]
         { []
         }
     {offset
       c6yqU: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual_$c*>_info" {
     Data.Semigroup.Internal.$fApplicativeDual_$c*>_info:
         const Data.Semigroup.Internal.$fApplicativeDual_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.313217497 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual1_closure" {
     Data.Semigroup.Internal.$fApplicativeDual1_closure:
         const Data.Semigroup.Internal.$fApplicativeDual1_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual1_entry() //  [R2]
         { []
         }
     {offset
       c6yr5: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual1_info" {
     Data.Semigroup.Internal.$fApplicativeDual1_info:
         const Data.Semigroup.Internal.$fApplicativeDual1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.316618732 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual_closure" {
     Data.Semigroup.Internal.$fApplicativeDual_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.Internal.$fFunctorDual_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual3_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual2_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual_$c*>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.320756572 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupSum1_closure" {
     Data.Semigroup.Internal.$fSemigroupSum1_closure:
         const Data.Semigroup.Internal.$fSemigroupSum1_info;
 },
 sat_s6v2z_entry() //  [R1]
         { []
         }
     {offset
       c6yrp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yrq; else goto c6yrr;
       c6yrq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yrr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v2z_info" {
     sat_s6v2z_info:
         const sat_s6v2z_entry;
         const 2;
         const 18;
 },
 sat_s6v2A_entry() //  [R1]
         { []
         }
     {offset
       c6yrs: // global
           _s6v2A::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c6yrt; else goto c6yru;
       c6yru: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yrw; else goto c6yrv;
       c6yrw: // global
           HpAlloc = 32;
           goto c6yrt;
       c6yrt: // global
           R1 = _s6v2A::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yrv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v2A::P64;
           _s6v2v::P64 = P64[_s6v2A::P64 + 16];
           _s6v2w::P64 = P64[_s6v2A::P64 + 24];
           _s6v2x::P64 = P64[_s6v2A::P64 + 32];
           I64[Hp - 24] = sat_s6v2z_info;
           P64[Hp - 8] = _s6v2w::P64;
           P64[Hp] = _s6v2x::P64;
           R2 = _s6v2v::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v2A_info" {
     sat_s6v2A_info:
         const sat_s6v2A_entry;
         const 3;
         const 15;
 },
 Data.Semigroup.Internal.$fSemigroupSum1_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       c6yrx: // global
           _s6v2y::P64 = R5;
           _s6v2x::P64 = R4;
           _s6v2w::P64 = R3;
           _s6v2v::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6yry; else goto c6yrz;
       c6yrz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6yrB; else goto c6yrA;
       c6yrB: // global
           HpAlloc = 40;
           goto c6yry;
       c6yry: // global
           R5 = _s6v2y::P64;
           R4 = _s6v2x::P64;
           R3 = _s6v2w::P64;
           R2 = _s6v2v::P64;
           R1 = Data.Semigroup.Internal.$fSemigroupSum1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yrA: // global
           I64[Hp - 32] = sat_s6v2A_info;
           P64[Hp - 16] = _s6v2v::P64;
           P64[Hp - 8] = _s6v2w::P64;
           P64[Hp] = _s6v2x::P64;
           R2 = _s6v2v::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6v2y::P64;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupSum1_info" {
     Data.Semigroup.Internal.$fSemigroupSum1_info:
         const Data.Semigroup.Internal.$fSemigroupSum1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.330242001 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat3_closure" {
     Data.Semigroup.Internal.$w$csconcat3_closure:
         const Data.Semigroup.Internal.$w$csconcat3_info;
 },
 go_s6v2E_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ys8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ys9; else goto c6ysa;
       c6ys9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ysa: // global
           I64[Sp - 32] = block_c6ys1_info;
           _s6v2E::P64 = R1;
           _s6v2B::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6v2B::P64;
           P64[Sp - 16] = _s6v2E::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6ysk; else goto c6ys2;
       u6ysk: // global
           call _c6ys1(R1) args: 0, res: 0, upd: 0;
       c6ys2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6v2E_info" {
     go_s6v2E_info:
         const go_s6v2E_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6ys1() //  [R1]
         { []
         }
     {offset
       c6ys1: // global
           _s6v2F::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6ys5; else goto c6ys6;
       c6ys5: // global
           R1 = _s6v2F::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ys6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6ysi; else goto c6ysh;
       c6ysi: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ysh: // global
           _s6v2I::P64 = P64[R1 + 6];
           _s6v2J::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6v2I::P64;
           P64[Hp] = _s6v2J::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6v2F::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ys1_info" {
     block_c6ys1_info:
         const _c6ys1;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ysl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ysp; else goto c6yso;
       c6ysp: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yso: // global
           I64[Hp - 8] = go_s6v2E_info;
           P64[Hp] = R2;
           _s6v2C::P64 = R3;
           R3 = R4;
           R2 = _s6v2C::P64;
           R1 = Hp - 6;
           call go_s6v2E_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat3_info" {
     Data.Semigroup.Internal.$w$csconcat3_info:
         const Data.Semigroup.Internal.$w$csconcat3_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.338744234 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupSum_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupSum_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupSum_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupSum_$csconcat_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c6ysN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ysO; else goto c6ysP;
       c6ysO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupSum_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ysP: // global
           I64[Sp - 16] = block_c6ysK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6ysT; else goto c6ysL;
       u6ysT: // global
           call _c6ysK(R1) args: 0, res: 0, upd: 0;
       c6ysL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupSum_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupSum_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupSum_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6ysK() //  [R1]
         { []
         }
     {offset
       c6ysK: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ysK_info" {
     block_c6ysK_info:
         const _c6ysK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.346354392 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupSum_closure" {
     Data.Semigroup.Internal.$fSemigroupSum_closure:
         const Data.Semigroup.Internal.$fSemigroupSum_info;
 },
 sat_s6v2T_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6ytc: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.Internal.$fSemigroupSum1_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v2T_info" {
     sat_s6v2T_info:
         const sat_s6v2T_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6v2S_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ytk: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupSum_$csconcat_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v2S_info" {
     sat_s6v2S_info:
         const sat_s6v2S_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v2R_entry() //  [R1]
         { []
         }
     {offset
       c6ytr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yts; else goto c6ytt;
       c6yts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ytt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v2R_info" {
     sat_s6v2R_info:
         const sat_s6v2R_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fSemigroupSum_entry() //  [R2]
         { []
         }
     {offset
       c6ytv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6ytz; else goto c6yty;
       c6ytz: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yty: // global
           I64[Hp - 80] = sat_s6v2T_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6v2S_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6v2R_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 77;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupSum_info" {
     Data.Semigroup.Internal.$fSemigroupSum_info:
         const Data.Semigroup.Internal.$fSemigroupSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.355028144 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum1_closure" {
     Data.Semigroup.Internal.$fMonoidSum1_closure:
         const Data.Semigroup.Internal.$fMonoidSum1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidSum1_entry() //  [R1]
         { []
         }
     {offset
       c6ytY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ytZ; else goto c6yu0;
       c6ytZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yu0: // global
           (_c6ytV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ytV::I64 == 0) goto c6ytX; else goto c6ytW;
       c6ytX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ytW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ytV::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum1_info" {
     Data.Semigroup.Internal.$fMonoidSum1_info:
         const Data.Semigroup.Internal.$fMonoidSum1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.359236733 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum2_closure" {
     Data.Semigroup.Internal.$fMonoidSum2_closure:
         const Data.Semigroup.Internal.$fMonoidSum2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidSum2_entry() //  [R2]
         { []
         }
     {offset
       c6yuc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yud; else goto c6yue;
       c6yud: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidSum2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yue: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum2_info" {
     Data.Semigroup.Internal.$fMonoidSum2_info:
         const Data.Semigroup.Internal.$fMonoidSum2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.364919429 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidSum_$cmconcat_info;
         const 0;
 },
 z_s6v2W_entry() //  [R1]
         { []
         }
     {offset
       c6yus: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yut; else goto c6yuu;
       c6yut: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yuu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6v2W_info" {
     z_s6v2W_info:
         const z_s6v2W_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt;
 },
 go_s6v2X_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yuH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yuI; else goto c6yuJ;
       c6yuI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yuJ: // global
           I64[Sp - 32] = block_c6yuA_info;
           _s6v2X::P64 = R1;
           _s6v2V::P64 = P64[R1 + 7];
           _s6v2W::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6v2V::P64;
           P64[Sp - 16] = _s6v2W::P64;
           P64[Sp - 8] = _s6v2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6yuT; else goto c6yuB;
       u6yuT: // global
           call _c6yuA(R1) args: 0, res: 0, upd: 0;
       c6yuB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6v2X_info" {
     go_s6v2X_info:
         const go_s6v2X_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6yuA() //  [R1]
         { []
         }
     {offset
       c6yuA: // global
           if (R1 & 7 == 1) goto c6yuE; else goto c6yuF;
       c6yuE: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6yuF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yuR; else goto c6yuQ;
       c6yuR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yuQ: // global
           _s6v30::P64 = P64[R1 + 6];
           _s6v31::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6v31::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6v30::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yuA_info" {
     block_c6yuA_info:
         const _c6yuA;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidSum_$cmconcat_entry() //  [R2]
         { []
         }
     {offset
       c6yuU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6yuY; else goto c6yuX;
       c6yuY: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yuX: // global
           I64[Hp - 40] = z_s6v2W_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6v2X_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidSum_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidSum_$cmconcat_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S6vn0_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.377226048 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum_closure" {
     Data.Semigroup.Internal.$fMonoidSum_closure:
         const Data.Semigroup.Internal.$fMonoidSum_info;
         const 0;
 },
 sat_s6v37_entry() //  [R1]
         { []
         }
     {offset
       c6yvt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yvu; else goto c6yvv;
       c6yvu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yvv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_$cmconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v37_info" {
     sat_s6v37_info:
         const sat_s6v37_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+16;
 },
 sat_s6v36_entry() //  [R1]
         { []
         }
     {offset
       c6yvA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yvB; else goto c6yvC;
       c6yvB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yvC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v36_info" {
     sat_s6v36_info:
         const sat_s6v36_entry;
         const 1;
         const 16;
 },
 sat_s6v35_entry() //  [R1]
         { []
         }
     {offset
       c6yvH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yvI; else goto c6yvJ;
       c6yvI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yvJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v35_info" {
     sat_s6v35_info:
         const sat_s6v35_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+8;
 },
 sat_s6v34_entry() //  [R1]
         { []
         }
     {offset
       c6yvO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yvP; else goto c6yvQ;
       c6yvP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yvQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v34_info" {
     sat_s6v34_info:
         const sat_s6v34_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonoidSum_entry() //  [R2]
         { []
         }
     {offset
       c6yvS: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6yvW; else goto c6yvV;
       c6yvW: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yvV: // global
           I64[Hp - 128] = sat_s6v37_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v36_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v35_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v34_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum_info" {
     Data.Semigroup.Internal.$fMonoidSum_info:
         const Data.Semigroup.Internal.$fMonoidSum_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S6vn0_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.387859653 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorSum_closure" {
     Data.Semigroup.Internal.$fFunctorSum_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.Internal.$fFunctorDual2_closure+1;
         const Data.Semigroup.Internal.$fFunctorDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.390198602 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum3_closure" {
     Data.Semigroup.Internal.$fApplicativeSum3_closure:
         const Data.Semigroup.Internal.$fApplicativeSum3_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum3_entry() //  [R2]
         { []
         }
     {offset
       c6ywr: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum3_info" {
     Data.Semigroup.Internal.$fApplicativeSum3_info:
         const Data.Semigroup.Internal.$fApplicativeSum3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.394340456 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum2_closure" {
     Data.Semigroup.Internal.$fApplicativeSum2_closure:
         const Data.Semigroup.Internal.$fApplicativeSum2_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ywC: // global
           _s6v39::P64 = R2;
           R2 = R3;
           R1 = _s6v39::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum2_info" {
     Data.Semigroup.Internal.$fApplicativeSum2_info:
         const Data.Semigroup.Internal.$fApplicativeSum2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.39809536 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum_$c*>_closure" {
     Data.Semigroup.Internal.$fApplicativeSum_$c*>_closure:
         const Data.Semigroup.Internal.$fApplicativeSum_$c*>_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum_$c*>_entry() //  [R3]
         { []
         }
     {offset
       c6ywN: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum_$c*>_info" {
     Data.Semigroup.Internal.$fApplicativeSum_$c*>_info:
         const Data.Semigroup.Internal.$fApplicativeSum_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.401399352 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum1_closure" {
     Data.Semigroup.Internal.$fApplicativeSum1_closure:
         const Data.Semigroup.Internal.$fApplicativeSum1_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum1_entry() //  [R2]
         { []
         }
     {offset
       c6ywY: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum1_info" {
     Data.Semigroup.Internal.$fApplicativeSum1_info:
         const Data.Semigroup.Internal.$fApplicativeSum1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.404551142 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum_closure" {
     Data.Semigroup.Internal.$fApplicativeSum_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.Internal.$fFunctorSum_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const Data.Semigroup.Internal.$fApplicativeSum3_closure+1;
         const Data.Semigroup.Internal.$fApplicativeSum2_closure+2;
         const Data.Semigroup.Internal.$fApplicativeSum_$c*>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeSum1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.408264352 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat2_closure" {
     Data.Semigroup.Internal.$w$csconcat2_closure:
         const Data.Semigroup.Internal.$w$csconcat2_info;
 },
 go_s6v3i_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6yxm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yxn; else goto c6yxo;
       c6yxn: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yxo: // global
           I64[Sp - 32] = block_c6yxf_info;
           _s6v3i::P64 = R1;
           _s6v3f::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6v3f::P64;
           P64[Sp - 16] = _s6v3i::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6yxy; else goto c6yxg;
       u6yxy: // global
           call _c6yxf(R1) args: 0, res: 0, upd: 0;
       c6yxg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6v3i_info" {
     go_s6v3i_info:
         const go_s6v3i_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6yxf() //  [R1]
         { []
         }
     {offset
       c6yxf: // global
           _s6v3j::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6yxj; else goto c6yxk;
       c6yxj: // global
           R1 = _s6v3j::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6yxk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6yxw; else goto c6yxv;
       c6yxw: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yxv: // global
           _s6v3m::P64 = P64[R1 + 6];
           _s6v3n::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6v3m::P64;
           P64[Hp] = _s6v3n::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6v3j::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yxf_info" {
     block_c6yxf_info:
         const _c6yxf;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6yxz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6yxD; else goto c6yxC;
       c6yxD: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yxC: // global
           I64[Hp - 8] = go_s6v3i_info;
           P64[Hp] = R2;
           _s6v3g::P64 = R3;
           R3 = R4;
           R2 = _s6v3g::P64;
           R1 = Hp - 6;
           call go_s6v3i_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat2_info" {
     Data.Semigroup.Internal.$w$csconcat2_info:
         const Data.Semigroup.Internal.$w$csconcat2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.417595249 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c6yy1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yy2; else goto c6yy3;
       c6yy2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yy3: // global
           I64[Sp - 16] = block_c6yxY_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6yy7; else goto c6yxZ;
       u6yy7: // global
           call _c6yxY(R1) args: 0, res: 0, upd: 0;
       c6yxZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6yxY() //  [R1]
         { []
         }
     {offset
       c6yxY: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat2_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yxY_info" {
     block_c6yxY_info:
         const _c6yxY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.42430277 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupProduct_closure" {
     Data.Semigroup.Internal.$fSemigroupProduct_closure:
         const Data.Semigroup.Internal.$fSemigroupProduct_info;
         const 0;
 },
 sat_s6v3A_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6yyq: // global
           R5 = R3;
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v3A_info" {
     sat_s6v3A_info:
         const sat_s6v3A_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6vn0_srt+32;
 },
 sat_s6v3w_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yyy: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v3w_info" {
     sat_s6v3w_info:
         const sat_s6v3w_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v3v_entry() //  [R1]
         { []
         }
     {offset
       c6yyF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yyG; else goto c6yyH;
       c6yyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v3v_info" {
     sat_s6v3v_info:
         const sat_s6v3v_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fSemigroupProduct_entry() //  [R2]
         { []
         }
     {offset
       c6yyJ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6yyN; else goto c6yyM;
       c6yyN: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yyM: // global
           I64[Hp - 80] = sat_s6v3A_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6v3w_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6v3v_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 77;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupProduct_info" {
     Data.Semigroup.Internal.$fSemigroupProduct_info:
         const Data.Semigroup.Internal.$fSemigroupProduct_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.432820137 UTC

[section ""data" . sat_s6v3B_closure" {
     sat_s6v3B_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.434647694 UTC

[section ""data" . sat_s6v3C_closure" {
     sat_s6v3C_closure:
         const :_con_info;
         const sat_s6v3B_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.43730124 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct1_closure" {
     Data.Semigroup.Internal.$fMonoidProduct1_closure:
         const Data.Semigroup.Internal.$fMonoidProduct1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidProduct1_entry() //  [R1]
         { []
         }
     {offset
       c6yze: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yzf; else goto c6yzg;
       c6yzf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yzg: // global
           (_c6yzb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6yzb::I64 == 0) goto c6yzd; else goto c6yzc;
       c6yzd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6yzc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6yzb::I64;
           R3 = sat_s6v3C_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct1_info" {
     Data.Semigroup.Internal.$fMonoidProduct1_info:
         const Data.Semigroup.Internal.$fMonoidProduct1_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.442112633 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct2_closure" {
     Data.Semigroup.Internal.$fMonoidProduct2_closure:
         const Data.Semigroup.Internal.$fMonoidProduct2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidProduct2_entry() //  [R2]
         { []
         }
     {offset
       c6yzs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yzt; else goto c6yzu;
       c6yzt: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidProduct2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yzu: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct2_info" {
     Data.Semigroup.Internal.$fMonoidProduct2_info:
         const Data.Semigroup.Internal.$fMonoidProduct2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.448043989 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_info;
         const 0;
 },
 z_s6v3F_entry() //  [R1]
         { []
         }
     {offset
       c6yzI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yzJ; else goto c6yzK;
       c6yzJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yzK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6v3F_info" {
     z_s6v3F_info:
         const z_s6v3F_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+56;
 },
 go_s6v3G_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yzX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yzY; else goto c6yzZ;
       c6yzY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yzZ: // global
           I64[Sp - 32] = block_c6yzQ_info;
           _s6v3G::P64 = R1;
           _s6v3E::P64 = P64[R1 + 7];
           _s6v3F::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6v3E::P64;
           P64[Sp - 16] = _s6v3F::P64;
           P64[Sp - 8] = _s6v3G::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6yA9; else goto c6yzR;
       u6yA9: // global
           call _c6yzQ(R1) args: 0, res: 0, upd: 0;
       c6yzR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6v3G_info" {
     go_s6v3G_info:
         const go_s6v3G_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6yzQ() //  [R1]
         { []
         }
     {offset
       c6yzQ: // global
           if (R1 & 7 == 1) goto c6yzU; else goto c6yzV;
       c6yzU: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6yzV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yA7; else goto c6yA6;
       c6yA7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yA6: // global
           _s6v3J::P64 = P64[R1 + 6];
           _s6v3K::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6v3K::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6v3J::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yzQ_info" {
     block_c6yzQ_info:
         const _c6yzQ;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_entry() //  [R2]
         { []
         }
     {offset
       c6yAa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6yAe; else goto c6yAd;
       c6yAe: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yAd: // global
           I64[Hp - 40] = z_s6v3F_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6v3G_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S6vn0_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.459482132 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct_closure" {
     Data.Semigroup.Internal.$fMonoidProduct_closure:
         const Data.Semigroup.Internal.$fMonoidProduct_info;
         const 0;
 },
 sat_s6v3Q_entry() //  [R1]
         { []
         }
     {offset
       c6yAJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yAK; else goto c6yAL;
       c6yAK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yAL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v3Q_info" {
     sat_s6v3Q_info:
         const sat_s6v3Q_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+72;
 },
 sat_s6v3P_entry() //  [R1]
         { []
         }
     {offset
       c6yAQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yAR; else goto c6yAS;
       c6yAR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yAS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v3P_info" {
     sat_s6v3P_info:
         const sat_s6v3P_entry;
         const 1;
         const 16;
 },
 sat_s6v3O_entry() //  [R1]
         { []
         }
     {offset
       c6yAX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yAY; else goto c6yAZ;
       c6yAY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yAZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v3O_info" {
     sat_s6v3O_info:
         const sat_s6v3O_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+64;
 },
 sat_s6v3N_entry() //  [R1]
         { []
         }
     {offset
       c6yB4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yB5; else goto c6yB6;
       c6yB5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yB6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v3N_info" {
     sat_s6v3N_info:
         const sat_s6v3N_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+40;
 },
 Data.Semigroup.Internal.$fMonoidProduct_entry() //  [R2]
         { []
         }
     {offset
       c6yB8: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6yBc; else goto c6yBb;
       c6yBc: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yBb: // global
           I64[Hp - 128] = sat_s6v3Q_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v3P_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v3O_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v3N_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct_info" {
     Data.Semigroup.Internal.$fMonoidProduct_info:
         const Data.Semigroup.Internal.$fMonoidProduct_entry;
         const 0;
         const 244813135886;
         const 4294967301;
         const S6vn0_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.470441811 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorProduct_closure" {
     Data.Semigroup.Internal.$fFunctorProduct_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.Internal.$fFunctorDual2_closure+1;
         const Data.Semigroup.Internal.$fFunctorDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.472608949 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct3_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct3_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct3_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct3_entry() //  [R2]
         { []
         }
     {offset
       c6yBH: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct3_info" {
     Data.Semigroup.Internal.$fApplicativeProduct3_info:
         const Data.Semigroup.Internal.$fApplicativeProduct3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.476183644 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct2_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct2_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct2_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6yBS: // global
           _s6v3S::P64 = R2;
           R2 = R3;
           R1 = _s6v3S::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct2_info" {
     Data.Semigroup.Internal.$fApplicativeProduct2_info:
         const Data.Semigroup.Internal.$fApplicativeProduct2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.479651031 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct_$c*>_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct_$c*>_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct_$c*>_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct_$c*>_entry() //  [R3]
         { []
         }
     {offset
       c6yC3: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct_$c*>_info" {
     Data.Semigroup.Internal.$fApplicativeProduct_$c*>_info:
         const Data.Semigroup.Internal.$fApplicativeProduct_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.482987583 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct1_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct1_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct1_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct1_entry() //  [R2]
         { []
         }
     {offset
       c6yCe: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct1_info" {
     Data.Semigroup.Internal.$fApplicativeProduct1_info:
         const Data.Semigroup.Internal.$fApplicativeProduct1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.486258834 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.Internal.$fFunctorProduct_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const Data.Semigroup.Internal.$fApplicativeProduct3_closure+1;
         const Data.Semigroup.Internal.$fApplicativeProduct2_closure+2;
         const Data.Semigroup.Internal.$fApplicativeProduct_$c*>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeProduct1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.489963026 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorAlt_closure" {
     Data.Semigroup.Internal.$fFunctorAlt_closure:
         const Data.Semigroup.Internal.$fFunctorAlt_info;
 },
 sat_s6v40_entry() //  [R1]
         { []
         }
     {offset
       c6yCu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yCv; else goto c6yCw;
       c6yCv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yCw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<$_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v40_info" {
     sat_s6v40_info:
         const sat_s6v40_entry;
         const 1;
         const 16;
 },
 sat_s6v3Z_entry() //  [R1]
         { []
         }
     {offset
       c6yCB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yCC; else goto c6yCD;
       c6yCC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yCD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.fmap_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v3Z_info" {
     sat_s6v3Z_info:
         const sat_s6v3Z_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fFunctorAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yCF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6yCJ; else goto c6yCI;
       c6yCJ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fFunctorAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yCI: // global
           I64[Hp - 64] = sat_s6v40_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v3Z_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fFunctorAlt_info" {
     Data.Semigroup.Internal.$fFunctorAlt_info:
         const Data.Semigroup.Internal.$fFunctorAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.49746099 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_closure" {
     Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_closure:
         const Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_info;
 },
 sat_s6v42_entry() //  [R1]
         { []
         }
     {offset
       c6yD7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yD8; else goto c6yD9;
       c6yD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yD9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v42_info" {
     sat_s6v42_info:
         const sat_s6v42_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_entry() //  [R2]
         { []
         }
     {offset
       c6yDa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yDe; else goto c6yDd;
       c6yDe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yDd: // global
           I64[Hp - 16] = sat_s6v42_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fFunctorAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_info" {
     Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_info:
         const Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.505109404 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeAlt_closure" {
     Data.Semigroup.Internal.$fApplicativeAlt_closure:
         const Data.Semigroup.Internal.$fApplicativeAlt_info;
 },
 sat_s6v49_entry() //  [R1]
         { []
         }
     {offset
       c6yDv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yDw; else goto c6yDx;
       c6yDw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yDx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v49_info" {
     sat_s6v49_info:
         const sat_s6v49_entry;
         const 1;
         const 16;
 },
 sat_s6v48_entry() //  [R1]
         { []
         }
     {offset
       c6yDC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yDD; else goto c6yDE;
       c6yDD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yDE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v48_info" {
     sat_s6v48_info:
         const sat_s6v48_entry;
         const 1;
         const 16;
 },
 sat_s6v47_entry() //  [R1]
         { []
         }
     {offset
       c6yDJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yDK; else goto c6yDL;
       c6yDK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yDL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.liftA2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v47_info" {
     sat_s6v47_info:
         const sat_s6v47_entry;
         const 1;
         const 16;
 },
 sat_s6v46_entry() //  [R1]
         { []
         }
     {offset
       c6yDQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yDR; else goto c6yDS;
       c6yDR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yDS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v46_info" {
     sat_s6v46_info:
         const sat_s6v46_entry;
         const 1;
         const 16;
 },
 sat_s6v45_entry() //  [R1]
         { []
         }
     {offset
       c6yDX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yDY; else goto c6yDZ;
       c6yDY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yDZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v45_info" {
     sat_s6v45_info:
         const sat_s6v45_entry;
         const 1;
         const 16;
 },
 sat_s6v44_entry() //  [R1]
         { []
         }
     {offset
       c6yE4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yE5; else goto c6yE6;
       c6yE5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yE6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v44_info" {
     sat_s6v44_info:
         const sat_s6v44_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fApplicativeAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yE8: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c6yEc; else goto c6yEb;
       c6yEc: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fApplicativeAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yEb: // global
           I64[Hp - 192] = sat_s6v49_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s6v48_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s6v47_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s6v46_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s6v45_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s6v44_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 120;
           P64[Hp - 16] = Hp - 144;
           P64[Hp - 8] = Hp - 168;
           P64[Hp] = Hp - 192;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeAlt_info" {
     Data.Semigroup.Internal.$fApplicativeAlt_info:
         const Data.Semigroup.Internal.$fApplicativeAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.520599421 UTC

[section ""data" . Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_closure" {
     Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_closure:
         const Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_info;
 },
 sat_s6v4b_entry() //  [R1]
         { []
         }
     {offset
       c6yEU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yEV; else goto c6yEW;
       c6yEV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yEW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4b_info" {
     sat_s6v4b_info:
         const sat_s6v4b_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_entry() //  [R2]
         { []
         }
     {offset
       c6yEX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yF1; else goto c6yF0;
       c6yF1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yF0: // global
           I64[Hp - 16] = sat_s6v4b_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fApplicativeAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_info" {
     Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_info:
         const Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.527710718 UTC

[section ""data" . Data.Semigroup.Internal.$fAlternativeAlt_closure" {
     Data.Semigroup.Internal.$fAlternativeAlt_closure:
         const Data.Semigroup.Internal.$fAlternativeAlt_info;
 },
 sat_s6v4h_entry() //  [R1]
         { []
         }
     {offset
       c6yFi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yFj; else goto c6yFk;
       c6yFj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yFk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.many_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4h_info" {
     sat_s6v4h_info:
         const sat_s6v4h_entry;
         const 1;
         const 16;
 },
 sat_s6v4g_entry() //  [R1]
         { []
         }
     {offset
       c6yFp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yFq; else goto c6yFr;
       c6yFq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yFr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.some_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4g_info" {
     sat_s6v4g_info:
         const sat_s6v4g_entry;
         const 1;
         const 16;
 },
 sat_s6v4f_entry() //  [R1]
         { []
         }
     {offset
       c6yFw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yFx; else goto c6yFy;
       c6yFx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yFy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4f_info" {
     sat_s6v4f_info:
         const sat_s6v4f_entry;
         const 1;
         const 16;
 },
 sat_s6v4e_entry() //  [R1]
         { []
         }
     {offset
       c6yFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yFE; else goto c6yFF;
       c6yFE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yFF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4e_info" {
     sat_s6v4e_info:
         const sat_s6v4e_entry;
         const 1;
         const 16;
 },
 sat_s6v4d_entry() //  [R1]
         { []
         }
     {offset
       c6yFK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yFL; else goto c6yFM;
       c6yFL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yFM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4d_info" {
     sat_s6v4d_info:
         const sat_s6v4d_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fAlternativeAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yFO: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c6yFS; else goto c6yFR;
       c6yFS: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fAlternativeAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yFR: // global
           I64[Hp - 160] = sat_s6v4h_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6v4g_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6v4f_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6v4e_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6v4d_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fAlternativeAlt_info" {
     Data.Semigroup.Internal.$fAlternativeAlt_info:
         const Data.Semigroup.Internal.$fAlternativeAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.54089527 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_closure" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_closure:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_info;
 },
 sat_s6v4j_entry() //  [R1]
         { []
         }
     {offset
       c6yGv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yGw; else goto c6yGx;
       c6yGw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yGx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4j_info" {
     sat_s6v4j_info:
         const sat_s6v4j_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_entry() //  [R2]
         { []
         }
     {offset
       c6yGy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yGC; else goto c6yGB;
       c6yGC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yGB: // global
           I64[Hp - 16] = sat_s6v4j_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fAlternativeAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_info" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_info:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.547087792 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_closure" {
     Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_closure:
         const Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_info;
 },
 sat_s6v4l_entry() //  [R1]
         { []
         }
     {offset
       c6yGT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yGU; else goto c6yGV;
       c6yGU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4l_info" {
     sat_s6v4l_info:
         const sat_s6v4l_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_entry() //  [R2]
         { []
         }
     {offset
       c6yGW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yH0; else goto c6yGZ;
       c6yH0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yGZ: // global
           I64[Hp - 16] = sat_s6v4l_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fApplicativeAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_info" {
     Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_info:
         const Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.554740242 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadAlt_closure" {
     Data.Semigroup.Internal.$fMonadAlt_closure:
         const Data.Semigroup.Internal.$fMonadAlt_info;
 },
 sat_s6v4r_entry() //  [R1]
         { []
         }
     {offset
       c6yHh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yHi; else goto c6yHj;
       c6yHi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yHj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.fail_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4r_info" {
     sat_s6v4r_info:
         const sat_s6v4r_entry;
         const 1;
         const 16;
 },
 sat_s6v4q_entry() //  [R1]
         { []
         }
     {offset
       c6yHo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yHp; else goto c6yHq;
       c6yHp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yHq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4q_info" {
     sat_s6v4q_info:
         const sat_s6v4q_entry;
         const 1;
         const 16;
 },
 sat_s6v4p_entry() //  [R1]
         { []
         }
     {offset
       c6yHv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yHw; else goto c6yHx;
       c6yHw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4p_info" {
     sat_s6v4p_info:
         const sat_s6v4p_entry;
         const 1;
         const 16;
 },
 sat_s6v4o_entry() //  [R1]
         { []
         }
     {offset
       c6yHC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yHD; else goto c6yHE;
       c6yHD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yHE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4o_info" {
     sat_s6v4o_info:
         const sat_s6v4o_entry;
         const 1;
         const 16;
 },
 sat_s6v4n_entry() //  [R1]
         { []
         }
     {offset
       c6yHJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yHK; else goto c6yHL;
       c6yHK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yHL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4n_info" {
     sat_s6v4n_info:
         const sat_s6v4n_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yHN: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c6yHR; else goto c6yHQ;
       c6yHR: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yHQ: // global
           I64[Hp - 160] = sat_s6v4r_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6v4q_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6v4p_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6v4o_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6v4n_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Monad_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadAlt_info" {
     Data.Semigroup.Internal.$fMonadAlt_info:
         const Data.Semigroup.Internal.$fMonadAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.56825723 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_closure" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_closure:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_info;
 },
 sat_s6v4t_entry() //  [R1]
         { []
         }
     {offset
       c6yIu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yIv; else goto c6yIw;
       c6yIv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4t_info" {
     sat_s6v4t_info:
         const sat_s6v4t_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_entry() //  [R2]
         { []
         }
     {offset
       c6yIx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yIB; else goto c6yIA;
       c6yIB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yIA: // global
           I64[Hp - 16] = sat_s6v4t_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fMonadAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_info" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_info:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.57493284 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadPlusAlt_closure" {
     Data.Semigroup.Internal.$fMonadPlusAlt_closure:
         const Data.Semigroup.Internal.$fMonadPlusAlt_info;
 },
 sat_s6v4y_entry() //  [R1]
         { []
         }
     {offset
       c6yIS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yIT; else goto c6yIU;
       c6yIT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yIU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mplus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4y_info" {
     sat_s6v4y_info:
         const sat_s6v4y_entry;
         const 1;
         const 16;
 },
 sat_s6v4x_entry() //  [R1]
         { []
         }
     {offset
       c6yIZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yJ0; else goto c6yJ1;
       c6yJ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yJ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4x_info" {
     sat_s6v4x_info:
         const sat_s6v4x_entry;
         const 1;
         const 16;
 },
 sat_s6v4w_entry() //  [R1]
         { []
         }
     {offset
       c6yJ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yJ7; else goto c6yJ8;
       c6yJ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yJ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4w_info" {
     sat_s6v4w_info:
         const sat_s6v4w_entry;
         const 1;
         const 16;
 },
 sat_s6v4v_entry() //  [R1]
         { []
         }
     {offset
       c6yJd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yJe; else goto c6yJf;
       c6yJe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yJf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4v_info" {
     sat_s6v4v_info:
         const sat_s6v4v_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadPlusAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yJh: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6yJl; else goto c6yJk;
       c6yJl: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadPlusAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yJk: // global
           I64[Hp - 128] = sat_s6v4y_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v4x_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v4w_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v4v_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:MonadPlus_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadPlusAlt_info" {
     Data.Semigroup.Internal.$fMonadPlusAlt_info:
         const Data.Semigroup.Internal.$fMonadPlusAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.58927838 UTC

[section ""data" . Data.Semigroup.Internal.$fEnumAlt_closure" {
     Data.Semigroup.Internal.$fEnumAlt_closure:
         const Data.Semigroup.Internal.$fEnumAlt_info;
 },
 sat_s6v4H_entry() //  [R1]
         { []
         }
     {offset
       c6yJT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yJU; else goto c6yJV;
       c6yJU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yJV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4H_info" {
     sat_s6v4H_info:
         const sat_s6v4H_entry;
         const 1;
         const 16;
 },
 sat_s6v4G_entry() //  [R1]
         { []
         }
     {offset
       c6yK0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yK1; else goto c6yK2;
       c6yK1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yK2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4G_info" {
     sat_s6v4G_info:
         const sat_s6v4G_entry;
         const 1;
         const 16;
 },
 sat_s6v4F_entry() //  [R1]
         { []
         }
     {offset
       c6yK7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yK8; else goto c6yK9;
       c6yK8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4F_info" {
     sat_s6v4F_info:
         const sat_s6v4F_entry;
         const 1;
         const 16;
 },
 sat_s6v4E_entry() //  [R1]
         { []
         }
     {offset
       c6yKe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yKf; else goto c6yKg;
       c6yKf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yKg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4E_info" {
     sat_s6v4E_info:
         const sat_s6v4E_entry;
         const 1;
         const 16;
 },
 sat_s6v4D_entry() //  [R1]
         { []
         }
     {offset
       c6yKl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yKm; else goto c6yKn;
       c6yKm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4D_info" {
     sat_s6v4D_info:
         const sat_s6v4D_entry;
         const 1;
         const 16;
 },
 sat_s6v4C_entry() //  [R1]
         { []
         }
     {offset
       c6yKs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yKt; else goto c6yKu;
       c6yKt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yKu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4C_info" {
     sat_s6v4C_info:
         const sat_s6v4C_entry;
         const 1;
         const 16;
 },
 sat_s6v4B_entry() //  [R1]
         { []
         }
     {offset
       c6yKz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yKA; else goto c6yKB;
       c6yKA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yKB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4B_info" {
     sat_s6v4B_info:
         const sat_s6v4B_entry;
         const 1;
         const 16;
 },
 sat_s6v4A_entry() //  [R1]
         { []
         }
     {offset
       c6yKG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yKH; else goto c6yKI;
       c6yKH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yKI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4A_info" {
     sat_s6v4A_info:
         const sat_s6v4A_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEnumAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yKK: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6yKO; else goto c6yKN;
       c6yKO: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEnumAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yKN: // global
           I64[Hp - 256] = sat_s6v4H_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6v4G_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6v4F_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6v4E_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6v4D_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6v4C_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6v4B_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6v4A_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEnumAlt_info" {
     Data.Semigroup.Internal.$fEnumAlt_info:
         const Data.Semigroup.Internal.$fEnumAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.609895742 UTC

[section ""data" . Data.Semigroup.Internal.$fNumAlt_closure" {
     Data.Semigroup.Internal.$fNumAlt_closure:
         const Data.Semigroup.Internal.$fNumAlt_info;
 },
 sat_s6v4P_entry() //  [R1]
         { []
         }
     {offset
       c6yLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yLH; else goto c6yLI;
       c6yLH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yLI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4P_info" {
     sat_s6v4P_info:
         const sat_s6v4P_entry;
         const 1;
         const 16;
 },
 sat_s6v4O_entry() //  [R1]
         { []
         }
     {offset
       c6yLN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yLO; else goto c6yLP;
       c6yLO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yLP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4O_info" {
     sat_s6v4O_info:
         const sat_s6v4O_entry;
         const 1;
         const 16;
 },
 sat_s6v4N_entry() //  [R1]
         { []
         }
     {offset
       c6yLU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yLV; else goto c6yLW;
       c6yLV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yLW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4N_info" {
     sat_s6v4N_info:
         const sat_s6v4N_entry;
         const 1;
         const 16;
 },
 sat_s6v4M_entry() //  [R1]
         { []
         }
     {offset
       c6yM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yM2; else goto c6yM3;
       c6yM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4M_info" {
     sat_s6v4M_info:
         const sat_s6v4M_entry;
         const 1;
         const 16;
 },
 sat_s6v4L_entry() //  [R1]
         { []
         }
     {offset
       c6yM8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yM9; else goto c6yMa;
       c6yM9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yMa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4L_info" {
     sat_s6v4L_info:
         const sat_s6v4L_entry;
         const 1;
         const 16;
 },
 sat_s6v4K_entry() //  [R1]
         { []
         }
     {offset
       c6yMf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yMg; else goto c6yMh;
       c6yMg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yMh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4K_info" {
     sat_s6v4K_info:
         const sat_s6v4K_entry;
         const 1;
         const 16;
 },
 sat_s6v4J_entry() //  [R1]
         { []
         }
     {offset
       c6yMm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yMn; else goto c6yMo;
       c6yMn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yMo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4J_info" {
     sat_s6v4J_info:
         const sat_s6v4J_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fNumAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yMq: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c6yMu; else goto c6yMt;
       c6yMu: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fNumAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yMt: // global
           I64[Hp - 224] = sat_s6v4P_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s6v4O_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6v4N_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6v4M_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s6v4L_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v4K_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v4J_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fNumAlt_info" {
     Data.Semigroup.Internal.$fNumAlt_info:
         const Data.Semigroup.Internal.$fNumAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.626414209 UTC

[section ""data" . Data.Semigroup.Internal.$fEqAlt_closure" {
     Data.Semigroup.Internal.$fEqAlt_closure:
         const Data.Semigroup.Internal.$fEqAlt_info;
 },
 sat_s6v4S_entry() //  [R1]
         { []
         }
     {offset
       c6yNh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yNi; else goto c6yNj;
       c6yNi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yNj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4S_info" {
     sat_s6v4S_info:
         const sat_s6v4S_entry;
         const 1;
         const 16;
 },
 sat_s6v4R_entry() //  [R1]
         { []
         }
     {offset
       c6yNo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yNp; else goto c6yNq;
       c6yNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4R_info" {
     sat_s6v4R_info:
         const sat_s6v4R_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yNs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6yNw; else goto c6yNv;
       c6yNw: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yNv: // global
           I64[Hp - 64] = sat_s6v4S_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v4R_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqAlt_info" {
     Data.Semigroup.Internal.$fEqAlt_info:
         const Data.Semigroup.Internal.$fEqAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.634589875 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_info;
 },
 sat_s6v4U_entry() //  [R1]
         { []
         }
     {offset
       c6yNU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yNV; else goto c6yNW;
       c6yNV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yNW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4U_info" {
     sat_s6v4U_info:
         const sat_s6v4U_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6yNX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yO1; else goto c6yO0;
       c6yO1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yO0: // global
           I64[Hp - 16] = sat_s6v4U_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.643131452 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAlt_closure" {
     Data.Semigroup.Internal.$fOrdAlt_closure:
         const Data.Semigroup.Internal.$fOrdAlt_info;
 },
 sat_s6v53_entry() //  [R1]
         { []
         }
     {offset
       c6yOi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yOj; else goto c6yOk;
       c6yOj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yOk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v53_info" {
     sat_s6v53_info:
         const sat_s6v53_entry;
         const 1;
         const 16;
 },
 sat_s6v52_entry() //  [R1]
         { []
         }
     {offset
       c6yOp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yOq; else goto c6yOr;
       c6yOq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yOr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v52_info" {
     sat_s6v52_info:
         const sat_s6v52_entry;
         const 1;
         const 16;
 },
 sat_s6v51_entry() //  [R1]
         { []
         }
     {offset
       c6yOw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yOx; else goto c6yOy;
       c6yOx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yOy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v51_info" {
     sat_s6v51_info:
         const sat_s6v51_entry;
         const 1;
         const 16;
 },
 sat_s6v50_entry() //  [R1]
         { []
         }
     {offset
       c6yOD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yOE; else goto c6yOF;
       c6yOE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yOF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v50_info" {
     sat_s6v50_info:
         const sat_s6v50_entry;
         const 1;
         const 16;
 },
 sat_s6v4Z_entry() //  [R1]
         { []
         }
     {offset
       c6yOK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yOL; else goto c6yOM;
       c6yOL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yOM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4Z_info" {
     sat_s6v4Z_info:
         const sat_s6v4Z_entry;
         const 1;
         const 16;
 },
 sat_s6v4Y_entry() //  [R1]
         { []
         }
     {offset
       c6yOR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yOS; else goto c6yOT;
       c6yOS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yOT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4Y_info" {
     sat_s6v4Y_info:
         const sat_s6v4Y_entry;
         const 1;
         const 16;
 },
 sat_s6v4X_entry() //  [R1]
         { []
         }
     {offset
       c6yOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yOZ; else goto c6yP0;
       c6yOZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yP0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4X_info" {
     sat_s6v4X_info:
         const sat_s6v4X_entry;
         const 1;
         const 16;
 },
 sat_s6v4W_entry() //  [R1]
         { []
         }
     {offset
       c6yP5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yP6; else goto c6yP7;
       c6yP6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v4W_info" {
     sat_s6v4W_info:
         const sat_s6v4W_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yP9: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6yPd; else goto c6yPc;
       c6yPd: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yPc: // global
           I64[Hp - 256] = sat_s6v53_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6v52_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6v51_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6v50_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6v4Z_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6v4Y_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6v4X_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6v4W_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdAlt_info" {
     Data.Semigroup.Internal.$fOrdAlt_info:
         const Data.Semigroup.Internal.$fOrdAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.66052228 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt1_closure" {
     Data.Semigroup.Internal.$fShowAlt1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.662230875 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAlt3_bytes" {
     Data.Semigroup.Internal.$fShowAlt3_bytes:
         I8[] [65,108,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.663881506 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAlt2_bytes" {
     Data.Semigroup.Internal.$fShowAlt2_bytes:
         I8[] [103,101,116,65,108,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.665766713 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll5_bytes" {
     Data.Semigroup.Internal.$fReadAll5_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.673072169 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec1_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec1_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec1_info;
 },
 f1_s6v57_entry() //  [R1]
         { []
         }
     {offset
       c6yQ9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6yQa; else goto c6yQb;
       c6yQa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yQb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6v57_info" {
     f1_s6v57_info:
         const f1_s6v57_entry;
         const 2;
         const 18;
 },
 sat_s6v5a_entry() //  [R1]
         { []
         }
     {offset
       c6yQw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yQx; else goto c6yQy;
       c6yQx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yQy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5a_info" {
     sat_s6v5a_info:
         const sat_s6v5a_entry;
         const 1;
         const 16;
 },
 sat_s6v5b_entry() //  [R1]
         { []
         }
     {offset
       c6yQz: // global
           _s6v5b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6yQA; else goto c6yQB;
       c6yQB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yQD; else goto c6yQC;
       c6yQD: // global
           HpAlloc = 24;
           goto c6yQA;
       c6yQA: // global
           R1 = _s6v5b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yQC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v5b::P64;
           _s6v57::P64 = P64[_s6v5b::P64 + 16];
           _s6v59::P64 = P64[_s6v5b::P64 + 24];
           I64[Hp - 16] = sat_s6v5a_info;
           P64[Hp] = _s6v59::P64;
           R2 = Hp - 16;
           R1 = _s6v57::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5b_info" {
     sat_s6v5b_info:
         const sat_s6v5b_entry;
         const 2;
         const 18;
 },
 sat_s6v5c_entry() //  [R1]
         { []
         }
     {offset
       c6yQE: // global
           _s6v5c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6yQF; else goto c6yQG;
       c6yQG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yQI; else goto c6yQH;
       c6yQI: // global
           HpAlloc = 32;
           goto c6yQF;
       c6yQF: // global
           R1 = _s6v5c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yQH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v5c::P64;
           _s6v57::P64 = P64[_s6v5c::P64 + 16];
           _s6v59::P64 = P64[_s6v5c::P64 + 24];
           I64[Hp - 24] = sat_s6v5b_info;
           P64[Hp - 8] = _s6v57::P64;
           P64[Hp] = _s6v59::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5c_info" {
     sat_s6v5c_info:
         const sat_s6v5c_entry;
         const 2;
         const 18;
 },
 sat_s6v5d_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yQJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yQN; else goto c6yQM;
       c6yQN: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yQM: // global
           _s6v57::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6v5c_info;
           P64[Hp - 8] = _s6v57::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5d_info" {
     sat_s6v5d_info:
         const sat_s6v5d_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v5g_entry() //  [R1]
         { []
         }
     {offset
       c6yRb: // global
           _s6v5g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6yRc; else goto c6yRd;
       c6yRd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yRf; else goto c6yRe;
       c6yRf: // global
           HpAlloc = 24;
           goto c6yRc;
       c6yRc: // global
           R1 = _s6v5g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yRe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v5g::P64;
           _s6v5e::P64 = P64[_s6v5g::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6v5e::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5g_info" {
     sat_s6v5g_info:
         const sat_s6v5g_entry;
         const 1;
         const 16;
 },
 sat_s6v5h_entry() //  [R1]
         { []
         }
     {offset
       c6yRg: // global
           _s6v5h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6yRh; else goto c6yRi;
       c6yRi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yRk; else goto c6yRj;
       c6yRk: // global
           HpAlloc = 24;
           goto c6yRh;
       c6yRh: // global
           R1 = _s6v5h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yRj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v5h::P64;
           _s6v57::P64 = P64[_s6v5h::P64 + 16];
           _s6v5e::P64 = P64[_s6v5h::P64 + 24];
           I64[Hp - 16] = sat_s6v5g_info;
           P64[Hp] = _s6v5e::P64;
           R2 = Hp - 16;
           R1 = _s6v57::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5h_info" {
     sat_s6v5h_info:
         const sat_s6v5h_entry;
         const 2;
         const 18;
 },
 sat_s6v5i_entry() //  [R1]
         { []
         }
     {offset
       c6yRl: // global
           _s6v5i::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6yRm; else goto c6yRn;
       c6yRn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yRp; else goto c6yRo;
       c6yRp: // global
           HpAlloc = 32;
           goto c6yRm;
       c6yRm: // global
           R1 = _s6v5i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yRo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v5i::P64;
           _s6v57::P64 = P64[_s6v5i::P64 + 16];
           _s6v5e::P64 = P64[_s6v5i::P64 + 24];
           I64[Hp - 24] = sat_s6v5h_info;
           P64[Hp - 8] = _s6v57::P64;
           P64[Hp] = _s6v5e::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5i_info" {
     sat_s6v5i_info:
         const sat_s6v5i_entry;
         const 2;
         const 18;
 },
 sat_s6v5j_entry() //  [R1]
         { []
         }
     {offset
       c6yRq: // global
           _s6v5j::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6yRr; else goto c6yRs;
       c6yRs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yRu; else goto c6yRt;
       c6yRu: // global
           HpAlloc = 32;
           goto c6yRr;
       c6yRr: // global
           R1 = _s6v5j::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yRt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v5j::P64;
           _s6v57::P64 = P64[_s6v5j::P64 + 16];
           _s6v5e::P64 = P64[_s6v5j::P64 + 24];
           I64[Hp - 24] = sat_s6v5i_info;
           P64[Hp - 8] = _s6v57::P64;
           P64[Hp] = _s6v5e::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5j_info" {
     sat_s6v5j_info:
         const sat_s6v5j_entry;
         const 2;
         const 18;
 },
 sat_s6v5k_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yRw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6yRA; else goto c6yRz;
       c6yRA: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yRz: // global
           _s6v57::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6v5j_info;
           P64[Hp - 32] = _s6v57::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5k_info" {
     sat_s6v5k_info:
         const sat_s6v5k_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6yRE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6yRI; else goto c6yRH;
       c6yRI: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yRH: // global
           I64[Hp - 40] = f1_s6v57_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6yQ5::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6yRC; else goto c6yRD;
       c6yRC: // global
           I64[Hp - 8] = sat_s6v5d_info;
           P64[Hp] = _c6yQ5::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6yRD: // global
           I64[Hp - 8] = sat_s6v5k_info;
           P64[Hp] = _c6yQ5::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec1_info" {
     Data.Semigroup.Internal.$w$cshowsPrec1_info:
         const Data.Semigroup.Internal.$w$cshowsPrec1_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.696599343 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6ySB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ySC; else goto c6ySD;
       c6ySC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ySD: // global
           I64[Sp - 24] = block_c6ySy_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6ySH; else goto c6ySz;
       u6ySH: // global
           call _c6ySy(R1) args: 0, res: 0, upd: 0;
       c6ySz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ySy() //  [R1]
         { []
         }
     {offset
       c6ySy: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ySy_info" {
     block_c6ySy_info:
         const _c6ySy;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.702960939 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll4_closure" {
     Data.Semigroup.Internal.$fReadAll4_closure:
         const Data.Semigroup.Internal.$fReadAll4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll4_entry() //  [R1]
         { []
         }
     {offset
       c6ySX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ySY; else goto c6ySZ;
       c6ySY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ySZ: // global
           (_c6ySU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ySU::I64 == 0) goto c6ySW; else goto c6ySV;
       c6ySW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ySV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ySU::I64;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll4_info" {
     Data.Semigroup.Internal.$fReadAll4_info:
         const Data.Semigroup.Internal.$fReadAll4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.708197068 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_$cshow_closure" {
     Data.Semigroup.Internal.$fShowAlt_$cshow_closure:
         const Data.Semigroup.Internal.$fShowAlt_$cshow_info;
         const 0;
 },
 sat_s6v5s_entry() //  [R1]
         { []
         }
     {offset
       c6yTj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6yTk; else goto c6yTl;
       c6yTk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yTl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5s_info" {
     sat_s6v5s_info:
         const sat_s6v5s_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+88;
 },
 sat_s6v5t_entry() //  [R1]
         { []
         }
     {offset
       c6yTm: // global
           _s6v5t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6yTn; else goto c6yTo;
       c6yTo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yTq; else goto c6yTp;
       c6yTq: // global
           HpAlloc = 32;
           goto c6yTn;
       c6yTn: // global
           R1 = _s6v5t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yTp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v5t::P64;
           _s6v5q::P64 = P64[_s6v5t::P64 + 16];
           _s6v5r::P64 = P64[_s6v5t::P64 + 24];
           I64[Hp - 24] = sat_s6v5s_info;
           P64[Hp - 8] = _s6v5q::P64;
           P64[Hp] = _s6v5r::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v5t_info" {
     sat_s6v5t_info:
         const sat_s6v5t_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+88;
 },
 Data.Semigroup.Internal.$fShowAlt_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6yTr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yTv; else goto c6yTu;
       c6yTv: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yTu: // global
           I64[Hp - 24] = sat_s6v5t_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_$cshow_info" {
     Data.Semigroup.Internal.$fShowAlt_$cshow_info:
         const Data.Semigroup.Internal.$fShowAlt_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6vn0_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.716601167 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowAlt_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowAlt_$cshowList_info;
 },
 sat_s6v5y_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yTS: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5y_info" {
     sat_s6v5y_info:
         const sat_s6v5y_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowAlt_$cshowList_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c6yTV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6yTZ; else goto c6yTY;
       c6yTZ: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yTY: // global
           I64[Hp - 8] = sat_s6v5y_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_$cshowList_info" {
     Data.Semigroup.Internal.$fShowAlt_$cshowList_info:
         const Data.Semigroup.Internal.$fShowAlt_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.723154404 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_closure" {
     Data.Semigroup.Internal.$fShowAlt_closure:
         const Data.Semigroup.Internal.$fShowAlt_info;
         const 0;
 },
 sat_s6v5C_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6yUg: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowAlt_$cshowList_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5C_info" {
     sat_s6v5C_info:
         const sat_s6v5C_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6v5B_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yUo: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowAlt_$cshow_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5B_info" {
     sat_s6v5B_info:
         const sat_s6v5B_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6vn0_srt+96;
 },
 sat_s6v5A_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6yUw: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5A_info" {
     sat_s6v5A_info:
         const sat_s6v5A_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowAlt_entry() //  [R2]
         { []
         }
     {offset
       c6yUA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6yUE; else goto c6yUD;
       c6yUE: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yUD: // global
           I64[Hp - 72] = sat_s6v5C_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v5B_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v5A_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_info" {
     Data.Semigroup.Internal.$fShowAlt_info:
         const Data.Semigroup.Internal.$fShowAlt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.731566747 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAlt5_bytes" {
     Data.Semigroup.Internal.$fReadAlt5_bytes:
         I8[] [65,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.734337595 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt4_closure" {
     Data.Semigroup.Internal.$fReadAlt4_closure:
         const Data.Semigroup.Internal.$fReadAlt4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAlt4_entry() //  [R1]
         { []
         }
     {offset
       c6yV3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yV4; else goto c6yV5;
       c6yV4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yV5: // global
           (_c6yV0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6yV0::I64 == 0) goto c6yV2; else goto c6yV1;
       c6yV2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6yV1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6yV0::I64;
           R2 = Data.Semigroup.Internal.$fReadAlt5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt4_info" {
     Data.Semigroup.Internal.$fReadAlt4_info:
         const Data.Semigroup.Internal.$fReadAlt4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.737959603 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_lexeme_closure" {
     Data.Semigroup.Internal.$fReadAlt_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadAlt4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.73975542 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll11_bytes" {
     Data.Semigroup.Internal.$fReadAll11_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.742170447 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll10_closure" {
     Data.Semigroup.Internal.$fReadAll10_closure:
         const Data.Semigroup.Internal.$fReadAll10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll10_entry() //  [R1]
         { []
         }
     {offset
       c6yVl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yVm; else goto c6yVn;
       c6yVm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yVn: // global
           (_c6yVi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6yVi::I64 == 0) goto c6yVk; else goto c6yVj;
       c6yVk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6yVj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6yVi::I64;
           R2 = Data.Semigroup.Internal.$fReadAll11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll10_info" {
     Data.Semigroup.Internal.$fReadAll10_info:
         const Data.Semigroup.Internal.$fReadAll10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.74645635 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_lexeme_closure" {
     Data.Semigroup.Internal.$fReadAll_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.Internal.$fReadAll10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.748305061 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAlt3_bytes" {
     Data.Semigroup.Internal.$fReadAlt3_bytes:
         I8[] [103,101,116,65,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.751186738 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt2_closure" {
     Data.Semigroup.Internal.$fReadAlt2_closure:
         const Data.Semigroup.Internal.$fReadAlt2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAlt2_entry() //  [R1]
         { []
         }
     {offset
       c6yVD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yVE; else goto c6yVF;
       c6yVE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yVF: // global
           (_c6yVA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6yVA::I64 == 0) goto c6yVC; else goto c6yVB;
       c6yVC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6yVB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6yVA::I64;
           R2 = Data.Semigroup.Internal.$fReadAlt3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt2_info" {
     Data.Semigroup.Internal.$fReadAlt2_info:
         const Data.Semigroup.Internal.$fReadAlt2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.754801359 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll6_closure" {
     Data.Semigroup.Internal.$fReadAll6_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.756593005 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll3_closure" {
     Data.Semigroup.Internal.$fReadAll3_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.763733949 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt1_closure" {
     Data.Semigroup.Internal.$fReadAlt1_closure:
         const Data.Semigroup.Internal.$fReadAlt1_info;
         const 0;
 },
 lvl12_s6v5E_entry() //  [R1]
         { []
         }
     {offset
       c6yVX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6yVY; else goto c6yVZ;
       c6yVY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yVZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6v5E_info" {
     lvl12_s6v5E_info:
         const lvl12_s6v5E_entry;
         const 1;
         const 16;
 },
 ds_s6v5F_entry() //  [R1]
         { []
         }
     {offset
       c6yW5: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6v5F_info" {
     ds_s6v5F_info:
         const ds_s6v5F_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v5Q_entry() //  [R1]
         { []
         }
     {offset
       c6yWG: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5Q_info" {
     sat_s6v5Q_info:
         const sat_s6v5Q_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6v5T_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yWM: // global
           _s6v5O::P64 = R2;
           _s6v5T::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6yWN; else goto c6yWO;
       c6yWO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yWQ; else goto c6yWP;
       c6yWQ: // global
           HpAlloc = 24;
           goto c6yWN;
       c6yWN: // global
           R2 = _s6v5O::P64;
           R1 = _s6v5T::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yWP: // global
           _s6v5I::P64 = P64[_s6v5T::P64 + 7];
           I64[Hp - 16] = sat_s6v5Q_info;
           P64[Hp - 8] = _s6v5I::P64;
           P64[Hp] = _s6v5O::P64;
           I64[Sp - 8] = block_c6yWJ_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5T_info" {
     sat_s6v5T_info:
         const sat_s6v5T_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6vn0_srt+112;
 },
 _c6yWJ() //  [R1]
         { []
         }
     {offset
       c6yWJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6yWT; else goto c6yWS;
       c6yWT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yWS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yWJ_info" {
     block_c6yWJ_info:
         const _c6yWJ;
         const 0;
         const 30;
 },
 sat_s6v5U_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yWU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6yWY; else goto c6yWX;
       c6yWY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yWX: // global
           _s6v5F::P64 = P64[R1 + 7];
           _s6v5I::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6v5T_info;
           P64[Hp] = _s6v5I::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6v5F::P64;
           R2 = Data.Semigroup.Internal.$fReadAlt2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5U_info" {
     sat_s6v5U_info:
         const sat_s6v5U_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const S6vn0_srt+112;
 },
 sat_s6v5X_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yX2: // global
           _s6v5M::P64 = R2;
           _s6v5X::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6yX3; else goto c6yX4;
       c6yX4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yX6; else goto c6yX5;
       c6yX6: // global
           HpAlloc = 24;
           goto c6yX3;
       c6yX3: // global
           R2 = _s6v5M::P64;
           R1 = _s6v5X::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yX5: // global
           _s6v5F::P64 = P64[_s6v5X::P64 + 7];
           _s6v5I::P64 = P64[_s6v5X::P64 + 15];
           I64[Hp - 16] = sat_s6v5U_info;
           P64[Hp - 8] = _s6v5F::P64;
           P64[Hp] = _s6v5I::P64;
           I64[Sp - 8] = block_c6yWZ_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v5X_info" {
     sat_s6v5X_info:
         const sat_s6v5X_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const S6vn0_srt+112;
 },
 _c6yWZ() //  [R1]
         { []
         }
     {offset
       c6yWZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6yX9; else goto c6yX8;
       c6yX9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yX8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yWZ_info" {
     block_c6yWZ_info:
         const _c6yWZ;
         const 0;
         const 30;
 },
 sat_s6v60_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6yXa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6yXb; else goto c6yXc;
       c6yXb: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6yXc: // global
           I64[Sp - 24] = block_c6yWd_info;
           _s6v5F::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6v5F::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6yXp; else goto c6yWe;
       u6yXp: // global
           call _c6yWd(R1) args: 0, res: 0, upd: 0;
       c6yWe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v60_info" {
     sat_s6v60_info:
         const sat_s6v60_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const S6vn0_srt+112;
 },
 _c6yWd() //  [R1]
         { []
         }
     {offset
       c6yWd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yXf; else goto c6yXe;
       c6yXf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yXe: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6yXh; else goto c6yXl;
       c6yXh: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6yXl: // global
           I64[Hp - 16] = sat_s6v5X_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6yXi_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAlt_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yWd_info" {
     block_c6yWd_info:
         const _c6yWd;
         const 2;
         const 270582939678;
         const S6vn0_srt+112;
 },
 _c6yXi() //  [R1]
         { []
         }
     {offset
       c6yXi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6yXo; else goto c6yXn;
       c6yXo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6yXn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6yXi_info" {
     block_c6yXi_info:
         const _c6yXi;
         const 0;
         const 30;
 },
 Data.Semigroup.Internal.$fReadAlt1_entry() //  [R2]
         { []
         }
     {offset
       c6yXq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6yXu; else goto c6yXt;
       c6yXu: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yXt: // global
           I64[Hp - 48] = lvl12_s6v5E_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6v5F_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6v60_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt1_info" {
     Data.Semigroup.Internal.$fReadAlt1_info:
         const Data.Semigroup.Internal.$fReadAlt1_entry;
         const 0;
         const 1095216660494;
         const 4294967301;
         const S6vn0_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.788566024 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadAlt_$creadsPrec_info;
         const 0;
 },
 ds_s6v62_entry() //  [R1]
         { []
         }
     {offset
       c6yYr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yYs; else goto c6yYt;
       c6yYs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yYt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6v62_info" {
     ds_s6v62_info:
         const ds_s6v62_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+168;
 },
 sat_s6v64_entry() //  [R1]
         { []
         }
     {offset
       c6yYD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6yYE; else goto c6yYF;
       c6yYE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yYF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v64_info" {
     sat_s6v64_info:
         const sat_s6v64_entry;
         const 2;
         const 18;
 },
 sat_s6v65_entry() //  [R1, R2]
         { []
         }
     {offset
       c6yYG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6yYK; else goto c6yYJ;
       c6yYK: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yYJ: // global
           _s6v62::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6v64_info;
           P64[Hp - 8] = _s6v62::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v65_info" {
     sat_s6v65_info:
         const sat_s6v65_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadAlt_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6yYL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6yYP; else goto c6yYO;
       c6yYP: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yYO: // global
           I64[Hp - 32] = ds_s6v62_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6v65_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadAlt_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadAlt_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.801118371 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadAlt_$creadListPrec_info;
         const 0;
 },
 sat_s6v67_entry() //  [R1]
         { []
         }
     {offset
       c6yZf: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v67_info" {
     sat_s6v67_info:
         const sat_s6v67_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+168;
 },
 Data.Semigroup.Internal.$fReadAlt_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6yZi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yZm; else goto c6yZl;
       c6yZm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yZl: // global
           I64[Hp - 16] = sat_s6v67_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadAlt_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadAlt_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S6vn0_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.809673236 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_$creadList_closure" {
     Data.Semigroup.Internal.$fReadAlt_$creadList_closure:
         const Data.Semigroup.Internal.$fReadAlt_$creadList_info;
         const 0;
 },
 sat_s6v69_entry() //  [R1]
         { []
         }
     {offset
       c6yZG: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v69_info" {
     sat_s6v69_info:
         const sat_s6v69_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+168;
 },
 sat_s6v6a_entry() //  [R1]
         { []
         }
     {offset
       c6yZJ: // global
           _s6v6a::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6yZK; else goto c6yZL;
       c6yZL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yZN; else goto c6yZM;
       c6yZN: // global
           HpAlloc = 24;
           goto c6yZK;
       c6yZK: // global
           R1 = _s6v6a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6yZM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6a::P64;
           _s6v68::P64 = P64[_s6v6a::P64 + 16];
           I64[Hp - 16] = sat_s6v69_info;
           P64[Hp] = _s6v68::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6a_info" {
     sat_s6v6a_info:
         const sat_s6v6a_entry;
         const 1;
         const 21474836496;
         const S6vn0_srt+168;
 },
 Data.Semigroup.Internal.$fReadAlt_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6yZO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6yZS; else goto c6yZR;
       c6yZS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6yZR: // global
           I64[Hp - 16] = sat_s6v6a_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_$creadList_info" {
     Data.Semigroup.Internal.$fReadAlt_$creadList_info:
         const Data.Semigroup.Internal.$fReadAlt_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const S6vn0_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.820479751 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_closure" {
     Data.Semigroup.Internal.$fReadAlt_closure:
         const Data.Semigroup.Internal.$fReadAlt_info;
         const 0;
 },
 sat_s6v6f_entry() //  [R1]
         { []
         }
     {offset
       c6z0c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z0d; else goto c6z0e;
       c6z0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6f_info" {
     sat_s6v6f_info:
         const sat_s6v6f_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+192;
 },
 sat_s6v6e_entry() //  [R1]
         { []
         }
     {offset
       c6z0j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z0k; else goto c6z0l;
       c6z0k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z0l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6e_info" {
     sat_s6v6e_info:
         const sat_s6v6e_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+168;
 },
 sat_s6v6d_entry() //  [R1]
         { []
         }
     {offset
       c6z0q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z0r; else goto c6z0s;
       c6z0r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z0s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6d_info" {
     sat_s6v6d_info:
         const sat_s6v6d_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+200;
 },
 sat_s6v6c_entry() //  [R1]
         { []
         }
     {offset
       c6z0x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z0y; else goto c6z0z;
       c6z0y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z0z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6c_info" {
     sat_s6v6c_info:
         const sat_s6v6c_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+176;
 },
 Data.Semigroup.Internal.$fReadAlt_entry() //  [R2]
         { []
         }
     {offset
       c6z0B: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6z0F; else goto c6z0E;
       c6z0F: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6z0E: // global
           I64[Hp - 128] = sat_s6v6f_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v6e_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v6d_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v6c_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_info" {
     Data.Semigroup.Internal.$fReadAlt_info:
         const Data.Semigroup.Internal.$fReadAlt_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S6vn0_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.83200062 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Alt1_closure" {
     Data.Semigroup.Internal.$fGeneric1Alt1_closure:
         const Data.Semigroup.Internal.$fGeneric1Alt1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Alt1_entry() //  [R2]
         { []
         }
     {offset
       c6z19: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Alt1_info" {
     Data.Semigroup.Internal.$fGeneric1Alt1_info:
         const Data.Semigroup.Internal.$fGeneric1Alt1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.835278229 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Alt2_closure" {
     Data.Semigroup.Internal.$fGeneric1Alt2_closure:
         const Data.Semigroup.Internal.$fGeneric1Alt2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Alt2_entry() //  [R2]
         { []
         }
     {offset
       c6z1k: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Alt2_info" {
     Data.Semigroup.Internal.$fGeneric1Alt2_info:
         const Data.Semigroup.Internal.$fGeneric1Alt2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.83860209 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Alt_closure" {
     Data.Semigroup.Internal.$fGeneric1Alt_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Alt2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Alt1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.840556774 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAlt1_closure" {
     Data.Semigroup.Internal.$fGenericAlt1_closure:
         const Data.Semigroup.Internal.$fGenericAlt1_info;
 },
 Data.Semigroup.Internal.$fGenericAlt1_entry() //  [R2]
         { []
         }
     {offset
       c6z1w: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAlt1_info" {
     Data.Semigroup.Internal.$fGenericAlt1_info:
         const Data.Semigroup.Internal.$fGenericAlt1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.843891946 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAlt2_closure" {
     Data.Semigroup.Internal.$fGenericAlt2_closure:
         const Data.Semigroup.Internal.$fGenericAlt2_info;
 },
 Data.Semigroup.Internal.$fGenericAlt2_entry() //  [R2]
         { []
         }
     {offset
       c6z1H: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAlt2_info" {
     Data.Semigroup.Internal.$fGenericAlt2_info:
         const Data.Semigroup.Internal.$fGenericAlt2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.847040079 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAlt_closure" {
     Data.Semigroup.Internal.$fGenericAlt_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericAlt2_closure+1;
         const Data.Semigroup.Internal.$fGenericAlt1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.852538105 UTC

[section ""data" . Data.Semigroup.Internal.$fNumProduct_closure" {
     Data.Semigroup.Internal.$fNumProduct_closure:
         const Data.Semigroup.Internal.$fNumProduct_info;
 },
 sat_s6v6r_entry() //  [R1]
         { []
         }
     {offset
       c6z1X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z1Y; else goto c6z1Z;
       c6z1Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z1Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6r_info" {
     sat_s6v6r_info:
         const sat_s6v6r_entry;
         const 1;
         const 16;
 },
 sat_s6v6q_entry() //  [R1]
         { []
         }
     {offset
       c6z24: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z25; else goto c6z26;
       c6z25: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z26: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6q_info" {
     sat_s6v6q_info:
         const sat_s6v6q_entry;
         const 1;
         const 16;
 },
 sat_s6v6p_entry() //  [R1]
         { []
         }
     {offset
       c6z2b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z2c; else goto c6z2d;
       c6z2c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z2d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6p_info" {
     sat_s6v6p_info:
         const sat_s6v6p_entry;
         const 1;
         const 16;
 },
 sat_s6v6o_entry() //  [R1]
         { []
         }
     {offset
       c6z2i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z2j; else goto c6z2k;
       c6z2j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z2k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6o_info" {
     sat_s6v6o_info:
         const sat_s6v6o_entry;
         const 1;
         const 16;
 },
 sat_s6v6n_entry() //  [R1]
         { []
         }
     {offset
       c6z2p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z2q; else goto c6z2r;
       c6z2q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z2r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6n_info" {
     sat_s6v6n_info:
         const sat_s6v6n_entry;
         const 1;
         const 16;
 },
 sat_s6v6m_entry() //  [R1]
         { []
         }
     {offset
       c6z2w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z2x; else goto c6z2y;
       c6z2x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z2y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6m_info" {
     sat_s6v6m_info:
         const sat_s6v6m_entry;
         const 1;
         const 16;
 },
 sat_s6v6l_entry() //  [R1]
         { []
         }
     {offset
       c6z2D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z2E; else goto c6z2F;
       c6z2E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z2F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6l_info" {
     sat_s6v6l_info:
         const sat_s6v6l_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fNumProduct_entry() //  [R2]
         { []
         }
     {offset
       c6z2H: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c6z2L; else goto c6z2K;
       c6z2L: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fNumProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6z2K: // global
           I64[Hp - 224] = sat_s6v6r_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s6v6q_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6v6p_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6v6o_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s6v6n_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v6m_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v6l_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fNumProduct_info" {
     Data.Semigroup.Internal.$fNumProduct_info:
         const Data.Semigroup.Internal.$fNumProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.868171289 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Product1_closure" {
     Data.Semigroup.Internal.$fGeneric1Product1_closure:
         const Data.Semigroup.Internal.$fGeneric1Product1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Product1_entry() //  [R2]
         { []
         }
     {offset
       c6z3u: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Product1_info" {
     Data.Semigroup.Internal.$fGeneric1Product1_info:
         const Data.Semigroup.Internal.$fGeneric1Product1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.872065925 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Product2_closure" {
     Data.Semigroup.Internal.$fGeneric1Product2_closure:
         const Data.Semigroup.Internal.$fGeneric1Product2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Product2_entry() //  [R2]
         { []
         }
     {offset
       c6z3F: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Product2_info" {
     Data.Semigroup.Internal.$fGeneric1Product2_info:
         const Data.Semigroup.Internal.$fGeneric1Product2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.875780853 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Product_closure" {
     Data.Semigroup.Internal.$fGeneric1Product_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Product2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Product1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.877848572 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericProduct1_closure" {
     Data.Semigroup.Internal.$fGenericProduct1_closure:
         const Data.Semigroup.Internal.$fGenericProduct1_info;
 },
 Data.Semigroup.Internal.$fGenericProduct1_entry() //  [R2]
         { []
         }
     {offset
       c6z3R: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericProduct1_info" {
     Data.Semigroup.Internal.$fGenericProduct1_info:
         const Data.Semigroup.Internal.$fGenericProduct1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.881229857 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericProduct2_closure" {
     Data.Semigroup.Internal.$fGenericProduct2_closure:
         const Data.Semigroup.Internal.$fGenericProduct2_info;
 },
 Data.Semigroup.Internal.$fGenericProduct2_entry() //  [R2]
         { []
         }
     {offset
       c6z42: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericProduct2_info" {
     Data.Semigroup.Internal.$fGenericProduct2_info:
         const Data.Semigroup.Internal.$fGenericProduct2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.884375339 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericProduct_closure" {
     Data.Semigroup.Internal.$fGenericProduct_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericProduct2_closure+1;
         const Data.Semigroup.Internal.$fGenericProduct1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.887802755 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedProduct_closure" {
     Data.Semigroup.Internal.$fBoundedProduct_closure:
         const Data.Semigroup.Internal.$fBoundedProduct_info;
 },
 sat_s6v6y_entry() //  [R1]
         { []
         }
     {offset
       c6z4i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z4j; else goto c6z4k;
       c6z4j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z4k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6y_info" {
     sat_s6v6y_info:
         const sat_s6v6y_entry;
         const 1;
         const 16;
 },
 sat_s6v6x_entry() //  [R1]
         { []
         }
     {offset
       c6z4p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z4q; else goto c6z4r;
       c6z4q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z4r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6x_info" {
     sat_s6v6x_info:
         const sat_s6v6x_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fBoundedProduct_entry() //  [R2]
         { []
         }
     {offset
       c6z4t: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6z4x; else goto c6z4w;
       c6z4x: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fBoundedProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6z4w: // global
           I64[Hp - 64] = sat_s6v6y_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v6x_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fBoundedProduct_info" {
     Data.Semigroup.Internal.$fBoundedProduct_info:
         const Data.Semigroup.Internal.$fBoundedProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.894553408 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowProduct2_bytes" {
     Data.Semigroup.Internal.$fShowProduct2_bytes:
         I8[] [80,114,111,100,117,99,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.896403622 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowProduct1_bytes" {
     Data.Semigroup.Internal.$fShowProduct1_bytes:
         I8[] [103,101,116,80,114,111,100,117,99,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.904533754 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec4_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec4_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec4_info;
 },
 f_s6v6C_entry() //  [R1]
         { []
         }
     {offset
       c6z4X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6z4Y; else goto c6z4Z;
       c6z4Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z4Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6v6C_info" {
     f_s6v6C_info:
         const f_s6v6C_entry;
         const 2;
         const 18;
 },
 sat_s6v6F_entry() //  [R1]
         { []
         }
     {offset
       c6z5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z5l; else goto c6z5m;
       c6z5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z5m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6F_info" {
     sat_s6v6F_info:
         const sat_s6v6F_entry;
         const 1;
         const 16;
 },
 sat_s6v6G_entry() //  [R1]
         { []
         }
     {offset
       c6z5n: // global
           _s6v6G::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6z5o; else goto c6z5p;
       c6z5p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6z5r; else goto c6z5q;
       c6z5r: // global
           HpAlloc = 24;
           goto c6z5o;
       c6z5o: // global
           R1 = _s6v6G::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z5q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6G::P64;
           _s6v6C::P64 = P64[_s6v6G::P64 + 16];
           _s6v6E::P64 = P64[_s6v6G::P64 + 24];
           I64[Hp - 16] = sat_s6v6F_info;
           P64[Hp] = _s6v6E::P64;
           R2 = Hp - 16;
           R1 = _s6v6C::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6G_info" {
     sat_s6v6G_info:
         const sat_s6v6G_entry;
         const 2;
         const 18;
 },
 sat_s6v6H_entry() //  [R1]
         { []
         }
     {offset
       c6z5s: // global
           _s6v6H::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6z5t; else goto c6z5u;
       c6z5u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6z5w; else goto c6z5v;
       c6z5w: // global
           HpAlloc = 32;
           goto c6z5t;
       c6z5t: // global
           R1 = _s6v6H::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z5v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6H::P64;
           _s6v6C::P64 = P64[_s6v6H::P64 + 16];
           _s6v6E::P64 = P64[_s6v6H::P64 + 24];
           I64[Hp - 24] = sat_s6v6G_info;
           P64[Hp - 8] = _s6v6C::P64;
           P64[Hp] = _s6v6E::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6H_info" {
     sat_s6v6H_info:
         const sat_s6v6H_entry;
         const 2;
         const 18;
 },
 sat_s6v6I_entry() //  [R1, R2]
         { []
         }
     {offset
       c6z5x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6z5B; else goto c6z5A;
       c6z5B: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6z5A: // global
           _s6v6C::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6v6H_info;
           P64[Hp - 8] = _s6v6C::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v6I_info" {
     sat_s6v6I_info:
         const sat_s6v6I_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v6L_entry() //  [R1]
         { []
         }
     {offset
       c6z5Z: // global
           _s6v6L::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6z60; else goto c6z61;
       c6z61: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6z63; else goto c6z62;
       c6z63: // global
           HpAlloc = 24;
           goto c6z60;
       c6z60: // global
           R1 = _s6v6L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z62: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6L::P64;
           _s6v6J::P64 = P64[_s6v6L::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6v6J::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6L_info" {
     sat_s6v6L_info:
         const sat_s6v6L_entry;
         const 1;
         const 16;
 },
 sat_s6v6M_entry() //  [R1]
         { []
         }
     {offset
       c6z64: // global
           _s6v6M::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6z65; else goto c6z66;
       c6z66: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6z68; else goto c6z67;
       c6z68: // global
           HpAlloc = 24;
           goto c6z65;
       c6z65: // global
           R1 = _s6v6M::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6M::P64;
           _s6v6C::P64 = P64[_s6v6M::P64 + 16];
           _s6v6J::P64 = P64[_s6v6M::P64 + 24];
           I64[Hp - 16] = sat_s6v6L_info;
           P64[Hp] = _s6v6J::P64;
           R2 = Hp - 16;
           R1 = _s6v6C::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6M_info" {
     sat_s6v6M_info:
         const sat_s6v6M_entry;
         const 2;
         const 18;
 },
 sat_s6v6N_entry() //  [R1]
         { []
         }
     {offset
       c6z69: // global
           _s6v6N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6z6a; else goto c6z6b;
       c6z6b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6z6d; else goto c6z6c;
       c6z6d: // global
           HpAlloc = 32;
           goto c6z6a;
       c6z6a: // global
           R1 = _s6v6N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z6c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6N::P64;
           _s6v6C::P64 = P64[_s6v6N::P64 + 16];
           _s6v6J::P64 = P64[_s6v6N::P64 + 24];
           I64[Hp - 24] = sat_s6v6M_info;
           P64[Hp - 8] = _s6v6C::P64;
           P64[Hp] = _s6v6J::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6N_info" {
     sat_s6v6N_info:
         const sat_s6v6N_entry;
         const 2;
         const 18;
 },
 sat_s6v6O_entry() //  [R1]
         { []
         }
     {offset
       c6z6e: // global
           _s6v6O::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6z6f; else goto c6z6g;
       c6z6g: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6z6i; else goto c6z6h;
       c6z6i: // global
           HpAlloc = 32;
           goto c6z6f;
       c6z6f: // global
           R1 = _s6v6O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z6h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6O::P64;
           _s6v6C::P64 = P64[_s6v6O::P64 + 16];
           _s6v6J::P64 = P64[_s6v6O::P64 + 24];
           I64[Hp - 24] = sat_s6v6N_info;
           P64[Hp - 8] = _s6v6C::P64;
           P64[Hp] = _s6v6J::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6O_info" {
     sat_s6v6O_info:
         const sat_s6v6O_entry;
         const 2;
         const 18;
 },
 sat_s6v6P_entry() //  [R1, R2]
         { []
         }
     {offset
       c6z6k: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6z6o; else goto c6z6n;
       c6z6o: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6z6n: // global
           _s6v6C::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6v6O_info;
           P64[Hp - 32] = _s6v6C::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v6P_info" {
     sat_s6v6P_info:
         const sat_s6v6P_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6z6s: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6z6w; else goto c6z6v;
       c6z6w: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6z6v: // global
           I64[Hp - 40] = f_s6v6C_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6z4T::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6z6q; else goto c6z6r;
       c6z6q: // global
           I64[Hp - 8] = sat_s6v6I_info;
           P64[Hp] = _c6z4T::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6z6r: // global
           I64[Hp - 8] = sat_s6v6P_info;
           P64[Hp] = _c6z4T::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec4_info" {
     Data.Semigroup.Internal.$w$cshowsPrec4_info:
         const Data.Semigroup.Internal.$w$cshowsPrec4_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.927679341 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       c6z7p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6z7q; else goto c6z7r;
       c6z7q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6z7r: // global
           I64[Sp - 24] = block_c6z7m_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6z7v; else goto c6z7n;
       u6z7v: // global
           call _c6z7m(R1) args: 0, res: 0, upd: 0;
       c6z7n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6z7m() //  [R1]
         { []
         }
     {offset
       c6z7m: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6z7m_info" {
     block_c6z7m_info:
         const _c6z7m;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.934236474 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_$cshow_closure" {
     Data.Semigroup.Internal.$fShowProduct_$cshow_closure:
         const Data.Semigroup.Internal.$fShowProduct_$cshow_info;
         const 0;
 },
 sat_s6v6X_entry() //  [R1]
         { []
         }
     {offset
       c6z7R: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6z7S; else goto c6z7T;
       c6z7S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z7T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6X_info" {
     sat_s6v6X_info:
         const sat_s6v6X_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+88;
 },
 sat_s6v6Y_entry() //  [R1]
         { []
         }
     {offset
       c6z7U: // global
           _s6v6Y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6z7V; else goto c6z7W;
       c6z7W: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6z7Y; else goto c6z7X;
       c6z7Y: // global
           HpAlloc = 32;
           goto c6z7V;
       c6z7V: // global
           R1 = _s6v6Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z7X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v6Y::P64;
           _s6v6V::P64 = P64[_s6v6Y::P64 + 16];
           _s6v6W::P64 = P64[_s6v6Y::P64 + 24];
           I64[Hp - 24] = sat_s6v6X_info;
           P64[Hp - 8] = _s6v6V::P64;
           P64[Hp] = _s6v6W::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v6Y_info" {
     sat_s6v6Y_info:
         const sat_s6v6Y_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+88;
 },
 Data.Semigroup.Internal.$fShowProduct_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6z7Z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6z83; else goto c6z82;
       c6z83: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6z82: // global
           I64[Hp - 24] = sat_s6v6Y_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_$cshow_info" {
     Data.Semigroup.Internal.$fShowProduct_$cshow_info:
         const Data.Semigroup.Internal.$fShowProduct_$cshow_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const S6vn0_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.942494845 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowProduct_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowProduct_$cshowList_info;
 },
 sat_s6v73_entry() //  [R1, R2]
         { []
         }
     {offset
       c6z8q: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v73_info" {
     sat_s6v73_info:
         const sat_s6v73_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowProduct_$cshowList_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c6z8t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6z8x; else goto c6z8w;
       c6z8x: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6z8w: // global
           I64[Hp - 8] = sat_s6v73_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_$cshowList_info" {
     Data.Semigroup.Internal.$fShowProduct_$cshowList_info:
         const Data.Semigroup.Internal.$fShowProduct_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.949308584 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_closure" {
     Data.Semigroup.Internal.$fShowProduct_closure:
         const Data.Semigroup.Internal.$fShowProduct_info;
         const 0;
 },
 sat_s6v77_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6z8O: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowProduct_$cshowList_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v77_info" {
     sat_s6v77_info:
         const sat_s6v77_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6v76_entry() //  [R1, R2]
         { []
         }
     {offset
       c6z8W: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowProduct_$cshow_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v76_info" {
     sat_s6v76_info:
         const sat_s6v76_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6vn0_srt+216;
 },
 sat_s6v75_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6z94: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v75_info" {
     sat_s6v75_info:
         const sat_s6v75_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowProduct_entry() //  [R2]
         { []
         }
     {offset
       c6z98: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6z9c; else goto c6z9b;
       c6z9c: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6z9b: // global
           I64[Hp - 72] = sat_s6v77_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v76_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v75_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_info" {
     Data.Semigroup.Internal.$fShowProduct_info:
         const Data.Semigroup.Internal.$fShowProduct_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.95692697 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadProduct5_bytes" {
     Data.Semigroup.Internal.$fReadProduct5_bytes:
         I8[] [80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.959550769 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct4_closure" {
     Data.Semigroup.Internal.$fReadProduct4_closure:
         const Data.Semigroup.Internal.$fReadProduct4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadProduct4_entry() //  [R1]
         { []
         }
     {offset
       c6z9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z9C; else goto c6z9D;
       c6z9C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z9D: // global
           (_c6z9y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6z9y::I64 == 0) goto c6z9A; else goto c6z9z;
       c6z9A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6z9z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6z9y::I64;
           R2 = Data.Semigroup.Internal.$fReadProduct5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct4_info" {
     Data.Semigroup.Internal.$fReadProduct4_info:
         const Data.Semigroup.Internal.$fReadProduct4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.963247659 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_lexeme_closure" {
     Data.Semigroup.Internal.$fReadProduct_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadProduct4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.9649514 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadProduct3_bytes" {
     Data.Semigroup.Internal.$fReadProduct3_bytes:
         I8[] [103,101,116,80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.967325308 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct2_closure" {
     Data.Semigroup.Internal.$fReadProduct2_closure:
         const Data.Semigroup.Internal.$fReadProduct2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadProduct2_entry() //  [R1]
         { []
         }
     {offset
       c6z9T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6z9U; else goto c6z9V;
       c6z9U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6z9V: // global
           (_c6z9Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6z9Q::I64 == 0) goto c6z9S; else goto c6z9R;
       c6z9S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6z9R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6z9Q::I64;
           R2 = Data.Semigroup.Internal.$fReadProduct3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct2_info" {
     Data.Semigroup.Internal.$fReadProduct2_info:
         const Data.Semigroup.Internal.$fReadProduct2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:44.976913716 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct1_closure" {
     Data.Semigroup.Internal.$fReadProduct1_closure:
         const Data.Semigroup.Internal.$fReadProduct1_info;
         const 0;
 },
 lvl12_s6v79_entry() //  [R1]
         { []
         }
     {offset
       c6zab: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zac; else goto c6zad;
       c6zac: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zad: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6v79_info" {
     lvl12_s6v79_info:
         const lvl12_s6v79_entry;
         const 1;
         const 16;
 },
 ds_s6v7a_entry() //  [R1]
         { []
         }
     {offset
       c6zaj: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6v7a_info" {
     ds_s6v7a_info:
         const ds_s6v7a_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v7l_entry() //  [R1]
         { []
         }
     {offset
       c6zaU: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7l_info" {
     sat_s6v7l_info:
         const sat_s6v7l_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6v7o_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zb0: // global
           _s6v7j::P64 = R2;
           _s6v7o::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zb1; else goto c6zb2;
       c6zb2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zb4; else goto c6zb3;
       c6zb4: // global
           HpAlloc = 24;
           goto c6zb1;
       c6zb1: // global
           R2 = _s6v7j::P64;
           R1 = _s6v7o::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zb3: // global
           _s6v7d::P64 = P64[_s6v7o::P64 + 7];
           I64[Hp - 16] = sat_s6v7l_info;
           P64[Hp - 8] = _s6v7d::P64;
           P64[Hp] = _s6v7j::P64;
           I64[Sp - 8] = block_c6zaX_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7o_info" {
     sat_s6v7o_info:
         const sat_s6v7o_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6vn0_srt+112;
 },
 _c6zaX() //  [R1]
         { []
         }
     {offset
       c6zaX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zb7; else goto c6zb6;
       c6zb7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zb6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zaX_info" {
     block_c6zaX_info:
         const _c6zaX;
         const 0;
         const 30;
 },
 sat_s6v7p_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zb8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zbc; else goto c6zbb;
       c6zbc: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zbb: // global
           _s6v7a::P64 = P64[R1 + 7];
           _s6v7d::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6v7o_info;
           P64[Hp] = _s6v7d::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6v7a::P64;
           R2 = Data.Semigroup.Internal.$fReadProduct2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7p_info" {
     sat_s6v7p_info:
         const sat_s6v7p_entry;
         const 2;
         const 140767553126411;
         const 4294967301;
         const S6vn0_srt+112;
 },
 sat_s6v7s_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zbg: // global
           _s6v7h::P64 = R2;
           _s6v7s::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zbh; else goto c6zbi;
       c6zbi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zbk; else goto c6zbj;
       c6zbk: // global
           HpAlloc = 24;
           goto c6zbh;
       c6zbh: // global
           R2 = _s6v7h::P64;
           R1 = _s6v7s::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zbj: // global
           _s6v7a::P64 = P64[_s6v7s::P64 + 7];
           _s6v7d::P64 = P64[_s6v7s::P64 + 15];
           I64[Hp - 16] = sat_s6v7p_info;
           P64[Hp - 8] = _s6v7a::P64;
           P64[Hp] = _s6v7d::P64;
           I64[Sp - 8] = block_c6zbd_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7s_info" {
     sat_s6v7s_info:
         const sat_s6v7s_entry;
         const 2;
         const 140836272603147;
         const 4294967301;
         const S6vn0_srt+112;
 },
 _c6zbd() //  [R1]
         { []
         }
     {offset
       c6zbd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zbn; else goto c6zbm;
       c6zbn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zbm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zbd_info" {
     block_c6zbd_info:
         const _c6zbd;
         const 0;
         const 30;
 },
 sat_s6v7v_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6zbo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6zbp; else goto c6zbq;
       c6zbp: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zbq: // global
           I64[Sp - 24] = block_c6zar_info;
           _s6v7a::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6v7a::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6zbD; else goto c6zas;
       u6zbD: // global
           call _c6zar(R1) args: 0, res: 0, upd: 0;
       c6zas: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7v_info" {
     sat_s6v7v_info:
         const sat_s6v7v_entry;
         const 1;
         const 422311249313801;
         const 8589934607;
         const S6vn0_srt+112;
 },
 _c6zar() //  [R1]
         { []
         }
     {offset
       c6zar: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zbt; else goto c6zbs;
       c6zbt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zbs: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6zbv; else goto c6zbz;
       c6zbv: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6zbz: // global
           I64[Hp - 16] = sat_s6v7s_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6zbw_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadProduct_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zar_info" {
     block_c6zar_info:
         const _c6zar;
         const 2;
         const 422311249313822;
         const S6vn0_srt+112;
 },
 _c6zbw() //  [R1]
         { []
         }
     {offset
       c6zbw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zbC; else goto c6zbB;
       c6zbC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zbB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zbw_info" {
     block_c6zbw_info:
         const _c6zbw;
         const 0;
         const 30;
 },
 Data.Semigroup.Internal.$fReadProduct1_entry() //  [R2]
         { []
         }
     {offset
       c6zbE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6zbI; else goto c6zbH;
       c6zbI: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zbH: // global
           I64[Hp - 48] = lvl12_s6v79_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6v7a_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6v7v_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct1_info" {
     Data.Semigroup.Internal.$fReadProduct1_info:
         const Data.Semigroup.Internal.$fReadProduct1_entry;
         const 0;
         const 985536080642062;
         const 4294967301;
         const S6vn0_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.000968271 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadProduct_$creadsPrec_info;
         const 0;
 },
 ds_s6v7x_entry() //  [R1]
         { []
         }
     {offset
       c6zcF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zcG; else goto c6zcH;
       c6zcG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zcH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6v7x_info" {
     ds_s6v7x_info:
         const ds_s6v7x_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+248;
 },
 sat_s6v7z_entry() //  [R1]
         { []
         }
     {offset
       c6zcR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zcS; else goto c6zcT;
       c6zcS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zcT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7z_info" {
     sat_s6v7z_info:
         const sat_s6v7z_entry;
         const 2;
         const 18;
 },
 sat_s6v7A_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zcU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zcY; else goto c6zcX;
       c6zcY: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zcX: // global
           _s6v7x::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6v7z_info;
           P64[Hp - 8] = _s6v7x::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7A_info" {
     sat_s6v7A_info:
         const sat_s6v7A_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadProduct_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6zcZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6zd3; else goto c6zd2;
       c6zd3: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zd2: // global
           I64[Hp - 32] = ds_s6v7x_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6v7A_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadProduct_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadProduct_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.009920745 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadProduct_$creadListPrec_info;
         const 0;
 },
 sat_s6v7C_entry() //  [R1]
         { []
         }
     {offset
       c6zdt: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7C_info" {
     sat_s6v7C_info:
         const sat_s6v7C_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+248;
 },
 Data.Semigroup.Internal.$fReadProduct_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6zdw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zdA; else goto c6zdz;
       c6zdA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zdz: // global
           I64[Hp - 16] = sat_s6v7C_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadProduct_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadProduct_$creadListPrec_entry;
         const 0;
         const 5501853106190;
         const 4294967301;
         const S6vn0_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.015851389 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_$creadList_closure" {
     Data.Semigroup.Internal.$fReadProduct_$creadList_closure:
         const Data.Semigroup.Internal.$fReadProduct_$creadList_info;
         const 0;
 },
 sat_s6v7E_entry() //  [R1]
         { []
         }
     {offset
       c6zdU: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v7E_info" {
     sat_s6v7E_info:
         const sat_s6v7E_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+248;
 },
 sat_s6v7F_entry() //  [R1]
         { []
         }
     {offset
       c6zdX: // global
           _s6v7F::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6zdY; else goto c6zdZ;
       c6zdZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ze1; else goto c6ze0;
       c6ze1: // global
           HpAlloc = 24;
           goto c6zdY;
       c6zdY: // global
           R1 = _s6v7F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ze0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v7F::P64;
           _s6v7D::P64 = P64[_s6v7F::P64 + 16];
           I64[Hp - 16] = sat_s6v7E_info;
           P64[Hp] = _s6v7D::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7F_info" {
     sat_s6v7F_info:
         const sat_s6v7F_entry;
         const 1;
         const 1103806595088;
         const S6vn0_srt+184;
 },
 Data.Semigroup.Internal.$fReadProduct_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6ze2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ze6; else goto c6ze5;
       c6ze6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ze5: // global
           I64[Hp - 16] = sat_s6v7F_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_$creadList_info" {
     Data.Semigroup.Internal.$fReadProduct_$creadList_info:
         const Data.Semigroup.Internal.$fReadProduct_$creadList_entry;
         const 0;
         const 9899899617294;
         const 4294967301;
         const S6vn0_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.024929801 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_closure" {
     Data.Semigroup.Internal.$fReadProduct_closure:
         const Data.Semigroup.Internal.$fReadProduct_info;
         const 0;
 },
 sat_s6v7K_entry() //  [R1]
         { []
         }
     {offset
       c6zeq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zer; else goto c6zes;
       c6zer: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zes: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7K_info" {
     sat_s6v7K_info:
         const sat_s6v7K_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+264;
 },
 sat_s6v7J_entry() //  [R1]
         { []
         }
     {offset
       c6zex: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zey; else goto c6zez;
       c6zey: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zez: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7J_info" {
     sat_s6v7J_info:
         const sat_s6v7J_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+248;
 },
 sat_s6v7I_entry() //  [R1]
         { []
         }
     {offset
       c6zeE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zeF; else goto c6zeG;
       c6zeF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zeG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7I_info" {
     sat_s6v7I_info:
         const sat_s6v7I_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+272;
 },
 sat_s6v7H_entry() //  [R1]
         { []
         }
     {offset
       c6zeL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zeM; else goto c6zeN;
       c6zeM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zeN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7H_info" {
     sat_s6v7H_info:
         const sat_s6v7H_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+256;
 },
 Data.Semigroup.Internal.$fReadProduct_entry() //  [R2]
         { []
         }
     {offset
       c6zeP: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6zeT; else goto c6zeS;
       c6zeT: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zeS: // global
           I64[Hp - 128] = sat_s6v7K_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v7J_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v7I_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v7H_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_info" {
     Data.Semigroup.Internal.$fReadProduct_info:
         const Data.Semigroup.Internal.$fReadProduct_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6vn0_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.036203185 UTC

[section ""data" . Data.Semigroup.Internal.$fEqProduct_closure" {
     Data.Semigroup.Internal.$fEqProduct_closure:
         const Data.Semigroup.Internal.$fEqProduct_info;
 },
 sat_s6v7N_entry() //  [R1]
         { []
         }
     {offset
       c6zfr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zfs; else goto c6zft;
       c6zfs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zft: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7N_info" {
     sat_s6v7N_info:
         const sat_s6v7N_entry;
         const 1;
         const 16;
 },
 sat_s6v7M_entry() //  [R1]
         { []
         }
     {offset
       c6zfy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zfz; else goto c6zfA;
       c6zfz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zfA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7M_info" {
     sat_s6v7M_info:
         const sat_s6v7M_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqProduct_entry() //  [R2]
         { []
         }
     {offset
       c6zfC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6zfG; else goto c6zfF;
       c6zfG: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zfF: // global
           I64[Hp - 64] = sat_s6v7N_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v7M_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqProduct_info" {
     Data.Semigroup.Internal.$fEqProduct_info:
         const Data.Semigroup.Internal.$fEqProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.045831037 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_info;
 },
 sat_s6v7P_entry() //  [R1]
         { []
         }
     {offset
       c6zg4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zg5; else goto c6zg6;
       c6zg5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7P_info" {
     sat_s6v7P_info:
         const sat_s6v7P_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6zg7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zgb; else goto c6zga;
       c6zgb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zga: // global
           I64[Hp - 16] = sat_s6v7P_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqProduct_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.054474746 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdProduct_closure" {
     Data.Semigroup.Internal.$fOrdProduct_closure:
         const Data.Semigroup.Internal.$fOrdProduct_info;
 },
 sat_s6v7Y_entry() //  [R1]
         { []
         }
     {offset
       c6zgs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zgt; else goto c6zgu;
       c6zgt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zgu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7Y_info" {
     sat_s6v7Y_info:
         const sat_s6v7Y_entry;
         const 1;
         const 16;
 },
 sat_s6v7X_entry() //  [R1]
         { []
         }
     {offset
       c6zgz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zgA; else goto c6zgB;
       c6zgA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zgB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7X_info" {
     sat_s6v7X_info:
         const sat_s6v7X_entry;
         const 1;
         const 16;
 },
 sat_s6v7W_entry() //  [R1]
         { []
         }
     {offset
       c6zgG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zgH; else goto c6zgI;
       c6zgH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zgI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7W_info" {
     sat_s6v7W_info:
         const sat_s6v7W_entry;
         const 1;
         const 16;
 },
 sat_s6v7V_entry() //  [R1]
         { []
         }
     {offset
       c6zgN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zgO; else goto c6zgP;
       c6zgO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zgP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7V_info" {
     sat_s6v7V_info:
         const sat_s6v7V_entry;
         const 1;
         const 16;
 },
 sat_s6v7U_entry() //  [R1]
         { []
         }
     {offset
       c6zgU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zgV; else goto c6zgW;
       c6zgV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zgW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7U_info" {
     sat_s6v7U_info:
         const sat_s6v7U_entry;
         const 1;
         const 16;
 },
 sat_s6v7T_entry() //  [R1]
         { []
         }
     {offset
       c6zh1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zh2; else goto c6zh3;
       c6zh2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zh3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7T_info" {
     sat_s6v7T_info:
         const sat_s6v7T_entry;
         const 1;
         const 16;
 },
 sat_s6v7S_entry() //  [R1]
         { []
         }
     {offset
       c6zh8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zh9; else goto c6zha;
       c6zh9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zha: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7S_info" {
     sat_s6v7S_info:
         const sat_s6v7S_entry;
         const 1;
         const 16;
 },
 sat_s6v7R_entry() //  [R1]
         { []
         }
     {offset
       c6zhf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zhg; else goto c6zhh;
       c6zhg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zhh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v7R_info" {
     sat_s6v7R_info:
         const sat_s6v7R_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdProduct_entry() //  [R2]
         { []
         }
     {offset
       c6zhj: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6zhn; else goto c6zhm;
       c6zhn: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zhm: // global
           I64[Hp - 256] = sat_s6v7Y_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6v7X_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6v7W_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6v7V_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6v7U_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6v7T_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6v7S_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6v7R_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdProduct_info" {
     Data.Semigroup.Internal.$fOrdProduct_info:
         const Data.Semigroup.Internal.$fOrdProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.075779078 UTC

[section ""data" . Data.Semigroup.Internal.$fNumSum_closure" {
     Data.Semigroup.Internal.$fNumSum_closure:
         const Data.Semigroup.Internal.$fNumSum_info;
 },
 sat_s6v86_entry() //  [R1]
         { []
         }
     {offset
       c6zif: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zig; else goto c6zih;
       c6zig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v86_info" {
     sat_s6v86_info:
         const sat_s6v86_entry;
         const 1;
         const 16;
 },
 sat_s6v85_entry() //  [R1]
         { []
         }
     {offset
       c6zim: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zin; else goto c6zio;
       c6zin: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zio: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v85_info" {
     sat_s6v85_info:
         const sat_s6v85_entry;
         const 1;
         const 16;
 },
 sat_s6v84_entry() //  [R1]
         { []
         }
     {offset
       c6zit: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ziu; else goto c6ziv;
       c6ziu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ziv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v84_info" {
     sat_s6v84_info:
         const sat_s6v84_entry;
         const 1;
         const 16;
 },
 sat_s6v83_entry() //  [R1]
         { []
         }
     {offset
       c6ziA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ziB; else goto c6ziC;
       c6ziB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ziC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v83_info" {
     sat_s6v83_info:
         const sat_s6v83_entry;
         const 1;
         const 16;
 },
 sat_s6v82_entry() //  [R1]
         { []
         }
     {offset
       c6ziH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ziI; else goto c6ziJ;
       c6ziI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ziJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v82_info" {
     sat_s6v82_info:
         const sat_s6v82_entry;
         const 1;
         const 16;
 },
 sat_s6v81_entry() //  [R1]
         { []
         }
     {offset
       c6ziO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ziP; else goto c6ziQ;
       c6ziP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ziQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v81_info" {
     sat_s6v81_info:
         const sat_s6v81_entry;
         const 1;
         const 16;
 },
 sat_s6v80_entry() //  [R1]
         { []
         }
     {offset
       c6ziV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ziW; else goto c6ziX;
       c6ziW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ziX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v80_info" {
     sat_s6v80_info:
         const sat_s6v80_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fNumSum_entry() //  [R2]
         { []
         }
     {offset
       c6ziZ: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c6zj3; else goto c6zj2;
       c6zj3: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fNumSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zj2: // global
           I64[Hp - 224] = sat_s6v86_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s6v85_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6v84_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6v83_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s6v82_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v81_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v80_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fNumSum_info" {
     Data.Semigroup.Internal.$fNumSum_info:
         const Data.Semigroup.Internal.$fNumSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.091942525 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Sum1_closure" {
     Data.Semigroup.Internal.$fGeneric1Sum1_closure:
         const Data.Semigroup.Internal.$fGeneric1Sum1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Sum1_entry() //  [R2]
         { []
         }
     {offset
       c6zjM: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Sum1_info" {
     Data.Semigroup.Internal.$fGeneric1Sum1_info:
         const Data.Semigroup.Internal.$fGeneric1Sum1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.095445996 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Sum2_closure" {
     Data.Semigroup.Internal.$fGeneric1Sum2_closure:
         const Data.Semigroup.Internal.$fGeneric1Sum2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Sum2_entry() //  [R2]
         { []
         }
     {offset
       c6zjX: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Sum2_info" {
     Data.Semigroup.Internal.$fGeneric1Sum2_info:
         const Data.Semigroup.Internal.$fGeneric1Sum2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.09924017 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Sum_closure" {
     Data.Semigroup.Internal.$fGeneric1Sum_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Sum2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Sum1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.101212515 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericSum1_closure" {
     Data.Semigroup.Internal.$fGenericSum1_closure:
         const Data.Semigroup.Internal.$fGenericSum1_info;
 },
 Data.Semigroup.Internal.$fGenericSum1_entry() //  [R2]
         { []
         }
     {offset
       c6zk9: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericSum1_info" {
     Data.Semigroup.Internal.$fGenericSum1_info:
         const Data.Semigroup.Internal.$fGenericSum1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.10458478 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericSum2_closure" {
     Data.Semigroup.Internal.$fGenericSum2_closure:
         const Data.Semigroup.Internal.$fGenericSum2_info;
 },
 Data.Semigroup.Internal.$fGenericSum2_entry() //  [R2]
         { []
         }
     {offset
       c6zkk: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericSum2_info" {
     Data.Semigroup.Internal.$fGenericSum2_info:
         const Data.Semigroup.Internal.$fGenericSum2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.107635685 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericSum_closure" {
     Data.Semigroup.Internal.$fGenericSum_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericSum2_closure+1;
         const Data.Semigroup.Internal.$fGenericSum1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.110628056 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedSum_closure" {
     Data.Semigroup.Internal.$fBoundedSum_closure:
         const Data.Semigroup.Internal.$fBoundedSum_info;
 },
 sat_s6v8d_entry() //  [R1]
         { []
         }
     {offset
       c6zkA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zkB; else goto c6zkC;
       c6zkB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zkC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8d_info" {
     sat_s6v8d_info:
         const sat_s6v8d_entry;
         const 1;
         const 16;
 },
 sat_s6v8c_entry() //  [R1]
         { []
         }
     {offset
       c6zkH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zkI; else goto c6zkJ;
       c6zkI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zkJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8c_info" {
     sat_s6v8c_info:
         const sat_s6v8c_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fBoundedSum_entry() //  [R2]
         { []
         }
     {offset
       c6zkL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6zkP; else goto c6zkO;
       c6zkP: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fBoundedSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zkO: // global
           I64[Hp - 64] = sat_s6v8d_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v8c_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fBoundedSum_info" {
     Data.Semigroup.Internal.$fBoundedSum_info:
         const Data.Semigroup.Internal.$fBoundedSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.117223909 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowSum2_bytes" {
     Data.Semigroup.Internal.$fShowSum2_bytes:
         I8[] [83,117,109,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.119915382 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowSum1_bytes" {
     Data.Semigroup.Internal.$fShowSum1_bytes:
         I8[] [103,101,116,83,117,109,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.127027251 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec5_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec5_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec5_info;
 },
 f_s6v8h_entry() //  [R1]
         { []
         }
     {offset
       c6zlf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6zlg; else goto c6zlh;
       c6zlg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zlh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6v8h_info" {
     f_s6v8h_info:
         const f_s6v8h_entry;
         const 2;
         const 18;
 },
 sat_s6v8k_entry() //  [R1]
         { []
         }
     {offset
       c6zlC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zlD; else goto c6zlE;
       c6zlD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zlE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8k_info" {
     sat_s6v8k_info:
         const sat_s6v8k_entry;
         const 1;
         const 16;
 },
 sat_s6v8l_entry() //  [R1]
         { []
         }
     {offset
       c6zlF: // global
           _s6v8l::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zlG; else goto c6zlH;
       c6zlH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zlJ; else goto c6zlI;
       c6zlJ: // global
           HpAlloc = 24;
           goto c6zlG;
       c6zlG: // global
           R1 = _s6v8l::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zlI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v8l::P64;
           _s6v8h::P64 = P64[_s6v8l::P64 + 16];
           _s6v8j::P64 = P64[_s6v8l::P64 + 24];
           I64[Hp - 16] = sat_s6v8k_info;
           P64[Hp] = _s6v8j::P64;
           R2 = Hp - 16;
           R1 = _s6v8h::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8l_info" {
     sat_s6v8l_info:
         const sat_s6v8l_entry;
         const 2;
         const 18;
 },
 sat_s6v8m_entry() //  [R1]
         { []
         }
     {offset
       c6zlK: // global
           _s6v8m::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zlL; else goto c6zlM;
       c6zlM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zlO; else goto c6zlN;
       c6zlO: // global
           HpAlloc = 32;
           goto c6zlL;
       c6zlL: // global
           R1 = _s6v8m::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zlN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v8m::P64;
           _s6v8h::P64 = P64[_s6v8m::P64 + 16];
           _s6v8j::P64 = P64[_s6v8m::P64 + 24];
           I64[Hp - 24] = sat_s6v8l_info;
           P64[Hp - 8] = _s6v8h::P64;
           P64[Hp] = _s6v8j::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8m_info" {
     sat_s6v8m_info:
         const sat_s6v8m_entry;
         const 2;
         const 18;
 },
 sat_s6v8n_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zlP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zlT; else goto c6zlS;
       c6zlT: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zlS: // global
           _s6v8h::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6v8m_info;
           P64[Hp - 8] = _s6v8h::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v8n_info" {
     sat_s6v8n_info:
         const sat_s6v8n_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v8q_entry() //  [R1]
         { []
         }
     {offset
       c6zmh: // global
           _s6v8q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zmi; else goto c6zmj;
       c6zmj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zml; else goto c6zmk;
       c6zml: // global
           HpAlloc = 24;
           goto c6zmi;
       c6zmi: // global
           R1 = _s6v8q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zmk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v8q::P64;
           _s6v8o::P64 = P64[_s6v8q::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6v8o::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8q_info" {
     sat_s6v8q_info:
         const sat_s6v8q_entry;
         const 1;
         const 16;
 },
 sat_s6v8r_entry() //  [R1]
         { []
         }
     {offset
       c6zmm: // global
           _s6v8r::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zmn; else goto c6zmo;
       c6zmo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zmq; else goto c6zmp;
       c6zmq: // global
           HpAlloc = 24;
           goto c6zmn;
       c6zmn: // global
           R1 = _s6v8r::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zmp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v8r::P64;
           _s6v8h::P64 = P64[_s6v8r::P64 + 16];
           _s6v8o::P64 = P64[_s6v8r::P64 + 24];
           I64[Hp - 16] = sat_s6v8q_info;
           P64[Hp] = _s6v8o::P64;
           R2 = Hp - 16;
           R1 = _s6v8h::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8r_info" {
     sat_s6v8r_info:
         const sat_s6v8r_entry;
         const 2;
         const 18;
 },
 sat_s6v8s_entry() //  [R1]
         { []
         }
     {offset
       c6zmr: // global
           _s6v8s::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zms; else goto c6zmt;
       c6zmt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zmv; else goto c6zmu;
       c6zmv: // global
           HpAlloc = 32;
           goto c6zms;
       c6zms: // global
           R1 = _s6v8s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zmu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v8s::P64;
           _s6v8h::P64 = P64[_s6v8s::P64 + 16];
           _s6v8o::P64 = P64[_s6v8s::P64 + 24];
           I64[Hp - 24] = sat_s6v8r_info;
           P64[Hp - 8] = _s6v8h::P64;
           P64[Hp] = _s6v8o::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8s_info" {
     sat_s6v8s_info:
         const sat_s6v8s_entry;
         const 2;
         const 18;
 },
 sat_s6v8t_entry() //  [R1]
         { []
         }
     {offset
       c6zmw: // global
           _s6v8t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zmx; else goto c6zmy;
       c6zmy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zmA; else goto c6zmz;
       c6zmA: // global
           HpAlloc = 32;
           goto c6zmx;
       c6zmx: // global
           R1 = _s6v8t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zmz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v8t::P64;
           _s6v8h::P64 = P64[_s6v8t::P64 + 16];
           _s6v8o::P64 = P64[_s6v8t::P64 + 24];
           I64[Hp - 24] = sat_s6v8s_info;
           P64[Hp - 8] = _s6v8h::P64;
           P64[Hp] = _s6v8o::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8t_info" {
     sat_s6v8t_info:
         const sat_s6v8t_entry;
         const 2;
         const 18;
 },
 sat_s6v8u_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zmC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6zmG; else goto c6zmF;
       c6zmG: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zmF: // global
           _s6v8h::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6v8t_info;
           P64[Hp - 32] = _s6v8h::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v8u_info" {
     sat_s6v8u_info:
         const sat_s6v8u_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6zmK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6zmO; else goto c6zmN;
       c6zmO: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zmN: // global
           I64[Hp - 40] = f_s6v8h_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6zlb::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6zmI; else goto c6zmJ;
       c6zmI: // global
           I64[Hp - 8] = sat_s6v8n_info;
           P64[Hp] = _c6zlb::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6zmJ: // global
           I64[Hp - 8] = sat_s6v8u_info;
           P64[Hp] = _c6zlb::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec5_info" {
     Data.Semigroup.Internal.$w$cshowsPrec5_info:
         const Data.Semigroup.Internal.$w$cshowsPrec5_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.150999545 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowSum_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowSum_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowSum_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6znH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6znI; else goto c6znJ;
       c6znI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6znJ: // global
           I64[Sp - 24] = block_c6znE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6znN; else goto c6znF;
       u6znN: // global
           call _c6znE(R1) args: 0, res: 0, upd: 0;
       c6znF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowSum_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowSum_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6znE() //  [R1]
         { []
         }
     {offset
       c6znE: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec5_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6znE_info" {
     block_c6znE_info:
         const _c6znE;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.157326751 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_$cshow_closure" {
     Data.Semigroup.Internal.$fShowSum_$cshow_closure:
         const Data.Semigroup.Internal.$fShowSum_$cshow_info;
         const 0;
 },
 sat_s6v8C_entry() //  [R1]
         { []
         }
     {offset
       c6zo9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6zoa; else goto c6zob;
       c6zoa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zob: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8C_info" {
     sat_s6v8C_info:
         const sat_s6v8C_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+88;
 },
 sat_s6v8D_entry() //  [R1]
         { []
         }
     {offset
       c6zoc: // global
           _s6v8D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zod; else goto c6zoe;
       c6zoe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zog; else goto c6zof;
       c6zog: // global
           HpAlloc = 32;
           goto c6zod;
       c6zod: // global
           R1 = _s6v8D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zof: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v8D::P64;
           _s6v8A::P64 = P64[_s6v8D::P64 + 16];
           _s6v8B::P64 = P64[_s6v8D::P64 + 24];
           I64[Hp - 24] = sat_s6v8C_info;
           P64[Hp - 8] = _s6v8A::P64;
           P64[Hp] = _s6v8B::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v8D_info" {
     sat_s6v8D_info:
         const sat_s6v8D_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+88;
 },
 Data.Semigroup.Internal.$fShowSum_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zoh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zol; else goto c6zok;
       c6zol: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zok: // global
           I64[Hp - 24] = sat_s6v8D_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_$cshow_info" {
     Data.Semigroup.Internal.$fShowSum_$cshow_info:
         const Data.Semigroup.Internal.$fShowSum_$cshow_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const S6vn0_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.165520977 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowSum_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowSum_$cshowList_info;
 },
 sat_s6v8I_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zoI: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec5_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v8I_info" {
     sat_s6v8I_info:
         const sat_s6v8I_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowSum_$cshowList_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c6zoL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zoP; else goto c6zoO;
       c6zoP: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zoO: // global
           I64[Hp - 8] = sat_s6v8I_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_$cshowList_info" {
     Data.Semigroup.Internal.$fShowSum_$cshowList_info:
         const Data.Semigroup.Internal.$fShowSum_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.1721942 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_closure" {
     Data.Semigroup.Internal.$fShowSum_closure:
         const Data.Semigroup.Internal.$fShowSum_info;
         const 0;
 },
 sat_s6v8M_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6zp6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowSum_$cshowList_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v8M_info" {
     sat_s6v8M_info:
         const sat_s6v8M_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6v8L_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zpe: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowSum_$cshow_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v8L_info" {
     sat_s6v8L_info:
         const sat_s6v8L_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6vn0_srt+288;
 },
 sat_s6v8K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6zpm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowSum_$cshowsPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v8K_info" {
     sat_s6v8K_info:
         const sat_s6v8K_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowSum_entry() //  [R2]
         { []
         }
     {offset
       c6zpq: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6zpu; else goto c6zpt;
       c6zpu: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zpt: // global
           I64[Hp - 72] = sat_s6v8M_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v8L_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v8K_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_info" {
     Data.Semigroup.Internal.$fShowSum_info:
         const Data.Semigroup.Internal.$fShowSum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.180061881 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadSum5_bytes" {
     Data.Semigroup.Internal.$fReadSum5_bytes:
         I8[] [83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.182477935 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum4_closure" {
     Data.Semigroup.Internal.$fReadSum4_closure:
         const Data.Semigroup.Internal.$fReadSum4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadSum4_entry() //  [R1]
         { []
         }
     {offset
       c6zpT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zpU; else goto c6zpV;
       c6zpU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zpV: // global
           (_c6zpQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zpQ::I64 == 0) goto c6zpS; else goto c6zpR;
       c6zpS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zpR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zpQ::I64;
           R2 = Data.Semigroup.Internal.$fReadSum5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum4_info" {
     Data.Semigroup.Internal.$fReadSum4_info:
         const Data.Semigroup.Internal.$fReadSum4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.186220814 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_lexeme_closure" {
     Data.Semigroup.Internal.$fReadSum_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadSum4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.187904681 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadSum3_bytes" {
     Data.Semigroup.Internal.$fReadSum3_bytes:
         I8[] [103,101,116,83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.190325519 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum2_closure" {
     Data.Semigroup.Internal.$fReadSum2_closure:
         const Data.Semigroup.Internal.$fReadSum2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadSum2_entry() //  [R1]
         { []
         }
     {offset
       c6zqb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zqc; else goto c6zqd;
       c6zqc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zqd: // global
           (_c6zq8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zq8::I64 == 0) goto c6zqa; else goto c6zq9;
       c6zqa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zq9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zq8::I64;
           R2 = Data.Semigroup.Internal.$fReadSum3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum2_info" {
     Data.Semigroup.Internal.$fReadSum2_info:
         const Data.Semigroup.Internal.$fReadSum2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.199845034 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum1_closure" {
     Data.Semigroup.Internal.$fReadSum1_closure:
         const Data.Semigroup.Internal.$fReadSum1_info;
         const 0;
 },
 lvl12_s6v8O_entry() //  [R1]
         { []
         }
     {offset
       c6zqt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zqu; else goto c6zqv;
       c6zqu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zqv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6v8O_info" {
     lvl12_s6v8O_info:
         const lvl12_s6v8O_entry;
         const 1;
         const 16;
 },
 ds_s6v8P_entry() //  [R1]
         { []
         }
     {offset
       c6zqB: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6v8P_info" {
     ds_s6v8P_info:
         const ds_s6v8P_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6v90_entry() //  [R1]
         { []
         }
     {offset
       c6zrc: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v90_info" {
     sat_s6v90_info:
         const sat_s6v90_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6v93_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zri: // global
           _s6v8Y::P64 = R2;
           _s6v93::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zrj; else goto c6zrk;
       c6zrk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zrm; else goto c6zrl;
       c6zrm: // global
           HpAlloc = 24;
           goto c6zrj;
       c6zrj: // global
           R2 = _s6v8Y::P64;
           R1 = _s6v93::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zrl: // global
           _s6v8S::P64 = P64[_s6v93::P64 + 7];
           I64[Hp - 16] = sat_s6v90_info;
           P64[Hp - 8] = _s6v8S::P64;
           P64[Hp] = _s6v8Y::P64;
           I64[Sp - 8] = block_c6zrf_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v93_info" {
     sat_s6v93_info:
         const sat_s6v93_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6vn0_srt+112;
 },
 _c6zrf() //  [R1]
         { []
         }
     {offset
       c6zrf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zrp; else goto c6zro;
       c6zrp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zro: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zrf_info" {
     block_c6zrf_info:
         const _c6zrf;
         const 0;
         const 30;
 },
 sat_s6v94_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zrq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zru; else goto c6zrt;
       c6zru: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zrt: // global
           _s6v8P::P64 = P64[R1 + 7];
           _s6v8S::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6v93_info;
           P64[Hp] = _s6v8S::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6v8P::P64;
           R2 = Data.Semigroup.Internal.$fReadSum2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v94_info" {
     sat_s6v94_info:
         const sat_s6v94_entry;
         const 2;
         const 72057624102699019;
         const 4294967301;
         const S6vn0_srt+112;
 },
 sat_s6v97_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zry: // global
           _s6v8W::P64 = R2;
           _s6v97::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zrz; else goto c6zrA;
       c6zrA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zrC; else goto c6zrB;
       c6zrC: // global
           HpAlloc = 24;
           goto c6zrz;
       c6zrz: // global
           R2 = _s6v8W::P64;
           R1 = _s6v97::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zrB: // global
           _s6v8P::P64 = P64[_s6v97::P64 + 7];
           _s6v8S::P64 = P64[_s6v97::P64 + 15];
           I64[Hp - 16] = sat_s6v94_info;
           P64[Hp - 8] = _s6v8P::P64;
           P64[Hp] = _s6v8S::P64;
           I64[Sp - 8] = block_c6zrv_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v97_info" {
     sat_s6v97_info:
         const sat_s6v97_entry;
         const 2;
         const 72057692822175755;
         const 4294967301;
         const S6vn0_srt+112;
 },
 _c6zrv() //  [R1]
         { []
         }
     {offset
       c6zrv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zrF; else goto c6zrE;
       c6zrF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zrE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zrv_info" {
     block_c6zrv_info:
         const _c6zrv;
         const 0;
         const 30;
 },
 sat_s6v9a_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6zrG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6zrH; else goto c6zrI;
       c6zrH: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zrI: // global
           I64[Sp - 24] = block_c6zqJ_info;
           _s6v8P::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6v8P::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6zrV; else goto c6zqK;
       u6zrV: // global
           call _c6zqJ(R1) args: 0, res: 0, upd: 0;
       c6zqK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9a_info" {
     sat_s6v9a_info:
         const sat_s6v9a_entry;
         const 1;
         const 216172880898031625;
         const 8589934607;
         const S6vn0_srt+112;
 },
 _c6zqJ() //  [R1]
         { []
         }
     {offset
       c6zqJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zrL; else goto c6zrK;
       c6zrL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zrK: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6zrN; else goto c6zrR;
       c6zrN: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6zrR: // global
           I64[Hp - 16] = sat_s6v97_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6zrO_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadSum_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zqJ_info" {
     block_c6zqJ_info:
         const _c6zqJ;
         const 2;
         const 216172880898031646;
         const S6vn0_srt+112;
 },
 _c6zrO() //  [R1]
         { []
         }
     {offset
       c6zrO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zrU; else goto c6zrT;
       c6zrU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zrT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zrO_info" {
     block_c6zrO_info:
         const _c6zrO;
         const 0;
         const 30;
 },
 Data.Semigroup.Internal.$fReadSum1_entry() //  [R2]
         { []
         }
     {offset
       c6zrW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6zs0; else goto c6zrZ;
       c6zs0: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zrZ: // global
           I64[Hp - 48] = lvl12_s6v8O_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6v8P_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6v9a_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum1_info" {
     Data.Semigroup.Internal.$fReadSum1_info:
         const Data.Semigroup.Internal.$fReadSum1_entry;
         const 0;
         const 504403531927650318;
         const 4294967301;
         const S6vn0_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.224340882 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadSum_$creadsPrec_info;
         const 0;
 },
 ds_s6v9c_entry() //  [R1]
         { []
         }
     {offset
       c6zsX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zsY; else goto c6zsZ;
       c6zsY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zsZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6v9c_info" {
     ds_s6v9c_info:
         const ds_s6v9c_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+320;
 },
 sat_s6v9e_entry() //  [R1]
         { []
         }
     {offset
       c6zt9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zta; else goto c6ztb;
       c6zta: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ztb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9e_info" {
     sat_s6v9e_info:
         const sat_s6v9e_entry;
         const 2;
         const 18;
 },
 sat_s6v9f_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ztc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6ztg; else goto c6ztf;
       c6ztg: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ztf: // global
           _s6v9c::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6v9e_info;
           P64[Hp - 8] = _s6v9c::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9f_info" {
     sat_s6v9f_info:
         const sat_s6v9f_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadSum_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6zth: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6ztl; else goto c6ztk;
       c6ztl: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ztk: // global
           I64[Hp - 32] = ds_s6v9c_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6v9f_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadSum_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadSum_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.233403878 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadSum_$creadListPrec_info;
         const 0;
 },
 sat_s6v9h_entry() //  [R1]
         { []
         }
     {offset
       c6ztL: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9h_info" {
     sat_s6v9h_info:
         const sat_s6v9h_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+320;
 },
 Data.Semigroup.Internal.$fReadSum_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6ztO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ztS; else goto c6ztR;
       c6ztS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ztR: // global
           I64[Hp - 16] = sat_s6v9h_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadSum_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadSum_$creadListPrec_entry;
         const 0;
         const 2814754062073870;
         const 4294967301;
         const S6vn0_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.239916365 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_$creadList_closure" {
     Data.Semigroup.Internal.$fReadSum_$creadList_closure:
         const Data.Semigroup.Internal.$fReadSum_$creadList_info;
         const 0;
 },
 sat_s6v9j_entry() //  [R1]
         { []
         }
     {offset
       c6zuc: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9j_info" {
     sat_s6v9j_info:
         const sat_s6v9j_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+320;
 },
 sat_s6v9k_entry() //  [R1]
         { []
         }
     {offset
       c6zuf: // global
           _s6v9k::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6zug; else goto c6zuh;
       c6zuh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zuj; else goto c6zui;
       c6zuj: // global
           HpAlloc = 24;
           goto c6zug;
       c6zug: // global
           R1 = _s6v9k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zui: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v9k::P64;
           _s6v9i::P64 = P64[_s6v9k::P64 + 16];
           I64[Hp - 16] = sat_s6v9j_info;
           P64[Hp] = _s6v9i::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9k_info" {
     sat_s6v9k_info:
         const sat_s6v9k_entry;
         const 1;
         const 562954248388624;
         const S6vn0_srt+184;
 },
 Data.Semigroup.Internal.$fReadSum_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6zuk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zuo; else goto c6zun;
       c6zuo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zun: // global
           I64[Hp - 16] = sat_s6v9k_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_$creadList_info" {
     Data.Semigroup.Internal.$fReadSum_$creadList_info:
         const Data.Semigroup.Internal.$fReadSum_$creadList_entry;
         const 0;
         const 5066553875759118;
         const 4294967301;
         const S6vn0_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.248884826 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_closure" {
     Data.Semigroup.Internal.$fReadSum_closure:
         const Data.Semigroup.Internal.$fReadSum_info;
         const 0;
 },
 sat_s6v9p_entry() //  [R1]
         { []
         }
     {offset
       c6zuI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zuJ; else goto c6zuK;
       c6zuJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zuK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9p_info" {
     sat_s6v9p_info:
         const sat_s6v9p_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+336;
 },
 sat_s6v9o_entry() //  [R1]
         { []
         }
     {offset
       c6zuP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zuQ; else goto c6zuR;
       c6zuQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zuR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9o_info" {
     sat_s6v9o_info:
         const sat_s6v9o_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+320;
 },
 sat_s6v9n_entry() //  [R1]
         { []
         }
     {offset
       c6zuW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zuX; else goto c6zuY;
       c6zuX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zuY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9n_info" {
     sat_s6v9n_info:
         const sat_s6v9n_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+344;
 },
 sat_s6v9m_entry() //  [R1]
         { []
         }
     {offset
       c6zv3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zv4; else goto c6zv5;
       c6zv4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zv5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9m_info" {
     sat_s6v9m_info:
         const sat_s6v9m_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+328;
 },
 Data.Semigroup.Internal.$fReadSum_entry() //  [R2]
         { []
         }
     {offset
       c6zv7: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6zvb; else goto c6zva;
       c6zvb: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zva: // global
           I64[Hp - 128] = sat_s6v9p_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6v9o_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6v9n_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6v9m_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_info" {
     Data.Semigroup.Internal.$fReadSum_info:
         const Data.Semigroup.Internal.$fReadSum_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6vn0_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.260529419 UTC

[section ""data" . Data.Semigroup.Internal.$fEqSum_closure" {
     Data.Semigroup.Internal.$fEqSum_closure:
         const Data.Semigroup.Internal.$fEqSum_info;
 },
 sat_s6v9s_entry() //  [R1]
         { []
         }
     {offset
       c6zvJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zvK; else goto c6zvL;
       c6zvK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zvL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9s_info" {
     sat_s6v9s_info:
         const sat_s6v9s_entry;
         const 1;
         const 16;
 },
 sat_s6v9r_entry() //  [R1]
         { []
         }
     {offset
       c6zvQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zvR; else goto c6zvS;
       c6zvR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zvS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9r_info" {
     sat_s6v9r_info:
         const sat_s6v9r_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqSum_entry() //  [R2]
         { []
         }
     {offset
       c6zvU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6zvY; else goto c6zvX;
       c6zvY: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zvX: // global
           I64[Hp - 64] = sat_s6v9s_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6v9r_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqSum_info" {
     Data.Semigroup.Internal.$fEqSum_info:
         const Data.Semigroup.Internal.$fEqSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.268951351 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdSum_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdSum_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdSum_$cp1Ord_info;
 },
 sat_s6v9u_entry() //  [R1]
         { []
         }
     {offset
       c6zwm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zwn; else goto c6zwo;
       c6zwn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zwo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9u_info" {
     sat_s6v9u_info:
         const sat_s6v9u_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdSum_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6zwp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zwt; else goto c6zws;
       c6zwt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdSum_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zws: // global
           I64[Hp - 16] = sat_s6v9u_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqSum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdSum_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdSum_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdSum_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.278469269 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdSum_closure" {
     Data.Semigroup.Internal.$fOrdSum_closure:
         const Data.Semigroup.Internal.$fOrdSum_info;
 },
 sat_s6v9D_entry() //  [R1]
         { []
         }
     {offset
       c6zwK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zwL; else goto c6zwM;
       c6zwL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zwM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9D_info" {
     sat_s6v9D_info:
         const sat_s6v9D_entry;
         const 1;
         const 16;
 },
 sat_s6v9C_entry() //  [R1]
         { []
         }
     {offset
       c6zwR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zwS; else goto c6zwT;
       c6zwS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zwT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9C_info" {
     sat_s6v9C_info:
         const sat_s6v9C_entry;
         const 1;
         const 16;
 },
 sat_s6v9B_entry() //  [R1]
         { []
         }
     {offset
       c6zwY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zwZ; else goto c6zx0;
       c6zwZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zx0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9B_info" {
     sat_s6v9B_info:
         const sat_s6v9B_entry;
         const 1;
         const 16;
 },
 sat_s6v9A_entry() //  [R1]
         { []
         }
     {offset
       c6zx5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zx6; else goto c6zx7;
       c6zx6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zx7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9A_info" {
     sat_s6v9A_info:
         const sat_s6v9A_entry;
         const 1;
         const 16;
 },
 sat_s6v9z_entry() //  [R1]
         { []
         }
     {offset
       c6zxc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zxd; else goto c6zxe;
       c6zxd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zxe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9z_info" {
     sat_s6v9z_info:
         const sat_s6v9z_entry;
         const 1;
         const 16;
 },
 sat_s6v9y_entry() //  [R1]
         { []
         }
     {offset
       c6zxj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zxk; else goto c6zxl;
       c6zxk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zxl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9y_info" {
     sat_s6v9y_info:
         const sat_s6v9y_entry;
         const 1;
         const 16;
 },
 sat_s6v9x_entry() //  [R1]
         { []
         }
     {offset
       c6zxq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zxr; else goto c6zxs;
       c6zxr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zxs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9x_info" {
     sat_s6v9x_info:
         const sat_s6v9x_entry;
         const 1;
         const 16;
 },
 sat_s6v9w_entry() //  [R1]
         { []
         }
     {offset
       c6zxx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zxy; else goto c6zxz;
       c6zxy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zxz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdSum_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9w_info" {
     sat_s6v9w_info:
         const sat_s6v9w_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdSum_entry() //  [R2]
         { []
         }
     {offset
       c6zxB: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6zxF; else goto c6zxE;
       c6zxF: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zxE: // global
           I64[Hp - 256] = sat_s6v9D_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6v9C_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6v9B_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6v9A_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6v9z_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6v9y_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6v9x_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6v9w_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdSum_info" {
     Data.Semigroup.Internal.$fOrdSum_info:
         const Data.Semigroup.Internal.$fOrdSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.296200664 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAny1_closure" {
     Data.Semigroup.Internal.$fGenericAny1_closure:
         const Data.Semigroup.Internal.$fGenericAny1_info;
 },
 Data.Semigroup.Internal.$fGenericAny1_entry() //  [R2]
         { []
         }
     {offset
       c6zyt: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAny1_info" {
     Data.Semigroup.Internal.$fGenericAny1_info:
         const Data.Semigroup.Internal.$fGenericAny1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.299551736 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAny2_closure" {
     Data.Semigroup.Internal.$fGenericAny2_closure:
         const Data.Semigroup.Internal.$fGenericAny2_info;
 },
 Data.Semigroup.Internal.$fGenericAny2_entry() //  [R2]
         { []
         }
     {offset
       c6zyE: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAny2_info" {
     Data.Semigroup.Internal.$fGenericAny2_info:
         const Data.Semigroup.Internal.$fGenericAny2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.302969862 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAny_closure" {
     Data.Semigroup.Internal.$fGenericAny_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericAny2_closure+1;
         const Data.Semigroup.Internal.$fGenericAny1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.304674063 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedAny_closure" {
     Data.Semigroup.Internal.$fBoundedAny_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.306415825 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAny4_bytes" {
     Data.Semigroup.Internal.$fShowAny4_bytes:
         I8[] [65,110,121,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.308667747 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny3_closure" {
     Data.Semigroup.Internal.$fShowAny3_closure:
         const Data.Semigroup.Internal.$fShowAny3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAny3_entry() //  [R1]
         { []
         }
     {offset
       c6zyW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zyX; else goto c6zyY;
       c6zyX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zyY: // global
           (_c6zyT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zyT::I64 == 0) goto c6zyV; else goto c6zyU;
       c6zyV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zyU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zyT::I64;
           R2 = Data.Semigroup.Internal.$fShowAny4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny3_info" {
     Data.Semigroup.Internal.$fShowAny3_info:
         const Data.Semigroup.Internal.$fShowAny3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.312960455 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAny2_bytes" {
     Data.Semigroup.Internal.$fShowAny2_bytes:
         I8[] [103,101,116,65,110,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.320760652 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec2_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec2_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec2_info;
         const 0;
 },
 sat_s6v9L_entry() //  [R1]
         { []
         }
     {offset
       c6zzv: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9L_info" {
     sat_s6v9L_info:
         const sat_s6v9L_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6v9M_entry() //  [R1]
         { []
         }
     {offset
       c6zzE: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9M_info" {
     sat_s6v9M_info:
         const sat_s6v9M_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6v9N_entry() //  [R1]
         { []
         }
     {offset
       c6zzL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zzM; else goto c6zzN;
       c6zzM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zzN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6zzm_info;
           _s6v9I::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6v9I::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6zzU; else goto c6zzn;
       u6zzU: // global
           call _c6zzm(R1) args: 0, res: 0, upd: 0;
       c6zzn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9N_info" {
     sat_s6v9N_info:
         const sat_s6v9N_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 _c6zzm() //  [R1]
         { []
         }
     {offset
       c6zzm: // global
           _s6v9I::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6zzI; else goto c6zzJ;
       c6zzI: // global
           Hp = Hp + 24;
           _s6v9K::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zzT; else goto c6zzP;
       c6zzP: // global
           I64[Hp - 16] = sat_s6v9L_info;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6zzJ: // global
           Hp = Hp + 24;
           _s6v9K::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zzT; else goto c6zzS;
       c6zzT: // global
           HpAlloc = 24;
           R1 = _s6v9K::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6zzS: // global
           I64[Hp - 16] = sat_s6v9M_info;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zzm_info" {
     block_c6zzm_info:
         const _c6zzm;
         const 1;
         const 30064771102;
         const S6vn0_srt+360;
 },
 sat_s6v9O_entry() //  [R1]
         { []
         }
     {offset
       c6zzV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zzZ; else goto c6zzY;
       c6zzZ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zzY: // global
           _s6v9H::P64 = P64[R1 + 16];
           _s6v9I::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6v9N_info;
           P64[Hp - 8] = _s6v9H::P64;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9O_info" {
     sat_s6v9O_info:
         const sat_s6v9O_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 sat_s6v9R_entry() //  [R1]
         { []
         }
     {offset
       c6zAn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zAr; else goto c6zAq;
       c6zAr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zAq: // global
           _s6v9I::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9R_info" {
     sat_s6v9R_info:
         const sat_s6v9R_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6v9T_entry() //  [R1]
         { []
         }
     {offset
       c6zAz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zAD; else goto c6zAC;
       c6zAD: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zAC: // global
           _s6v9I::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9T_info" {
     sat_s6v9T_info:
         const sat_s6v9T_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6v9U_entry() //  [R1]
         { []
         }
     {offset
       c6zAI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zAJ; else goto c6zAK;
       c6zAJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zAK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6zAd_info;
           _s6v9I::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6v9I::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6zAR; else goto c6zAe;
       u6zAR: // global
           call _c6zAd(R1) args: 0, res: 0, upd: 0;
       c6zAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9U_info" {
     sat_s6v9U_info:
         const sat_s6v9U_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 _c6zAd() //  [R1]
         { []
         }
     {offset
       c6zAd: // global
           _s6v9I::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6zAF; else goto c6zAG;
       c6zAF: // global
           Hp = Hp + 24;
           _s6v9P::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zAQ; else goto c6zAM;
       c6zAM: // global
           I64[Hp - 16] = sat_s6v9R_info;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6zAG: // global
           Hp = Hp + 24;
           _s6v9P::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zAQ; else goto c6zAP;
       c6zAQ: // global
           HpAlloc = 24;
           R1 = _s6v9P::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6zAP: // global
           I64[Hp - 16] = sat_s6v9T_info;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zAd_info" {
     block_c6zAd_info:
         const _c6zAd;
         const 1;
         const 30064771102;
         const S6vn0_srt+360;
 },
 sat_s6v9V_entry() //  [R1]
         { []
         }
     {offset
       c6zAS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zAW; else goto c6zAV;
       c6zAW: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zAV: // global
           _s6v9H::P64 = P64[R1 + 16];
           _s6v9I::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6v9U_info;
           P64[Hp - 8] = _s6v9H::P64;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6v9V_info" {
     sat_s6v9V_info:
         const sat_s6v9V_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 sat_s6v9W_entry() //  [R1]
         { []
         }
     {offset
       c6zAX: // global
           _s6v9W::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zAY; else goto c6zAZ;
       c6zAZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zB1; else goto c6zB0;
       c6zB1: // global
           HpAlloc = 32;
           goto c6zAY;
       c6zAY: // global
           R1 = _s6v9W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zB0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6v9W::P64;
           _s6v9H::P64 = P64[_s6v9W::P64 + 16];
           _s6v9I::P64 = P64[_s6v9W::P64 + 24];
           I64[Hp - 24] = sat_s6v9V_info;
           P64[Hp - 8] = _s6v9H::P64;
           P64[Hp] = _s6v9I::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6v9W_info" {
     sat_s6v9W_info:
         const sat_s6v9W_entry;
         const 2;
         const 64424509458;
         const S6vn0_srt+360;
 },
 Data.Semigroup.Internal.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6zB5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6zB9; else goto c6zB8;
       c6zB9: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zB8: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c6zB3; else goto c6zB4;
       c6zB3: // global
           I64[Hp - 48] = sat_s6v9O_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c6zze::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c6zze::P64;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c6zB4: // global
           I64[Hp - 48] = sat_s6v9W_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec2_info" {
     Data.Semigroup.Internal.$w$cshowsPrec2_info:
         const Data.Semigroup.Internal.$w$cshowsPrec2_entry;
         const 0;
         const 133143986190;
         const 12884901907;
         const S6vn0_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.345889128 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAny_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6zC4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6zC5; else goto c6zC6;
       c6zC5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zC6: // global
           I64[Sp - 24] = block_c6zC1_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6zCa; else goto c6zC2;
       u6zCa: // global
           call _c6zC1(R1) args: 0, res: 0, upd: 0;
       c6zC2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowAny_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6vn0_srt+392;
 },
 _c6zC1() //  [R1]
         { []
         }
     {offset
       c6zC1: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec2_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zC1_info" {
     block_c6zC1_info:
         const _c6zC1;
         const 2;
         const 4294967326;
         const S6vn0_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.35153607 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll6_closure" {
     Data.Semigroup.Internal.$fShowAll6_closure:
         const Data.Semigroup.Internal.$fShowAll6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll6_entry() //  [R1]
         { []
         }
     {offset
       c6zCq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zCr; else goto c6zCs;
       c6zCr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zCs: // global
           (_c6zCn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zCn::I64 == 0) goto c6zCp; else goto c6zCo;
       c6zCp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zCo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zCn::I64;
           R3 = Data.Semigroup.Internal.$fReadAll4_closure;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll6_info" {
     Data.Semigroup.Internal.$fShowAll6_info:
         const Data.Semigroup.Internal.$fShowAll6_entry;
         const 0;
         const 21474836501;
         const S6vn0_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.356024918 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll5_closure" {
     Data.Semigroup.Internal.$fShowAll5_closure:
         const Data.Semigroup.Internal.$fShowAll5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll5_entry() //  [R1]
         { []
         }
     {offset
       c6zCG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zCH; else goto c6zCI;
       c6zCH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zCI: // global
           (_c6zCD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zCD::I64 == 0) goto c6zCF; else goto c6zCE;
       c6zCF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zCE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zCD::I64;
           R3 = Data.Semigroup.Internal.$fReadAll4_closure;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll5_info" {
     Data.Semigroup.Internal.$fShowAll5_info:
         const Data.Semigroup.Internal.$fShowAll5_entry;
         const 0;
         const 12884901909;
         const S6vn0_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.361580541 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_$cshow_closure" {
     Data.Semigroup.Internal.$fShowAny_$cshow_closure:
         const Data.Semigroup.Internal.$fShowAny_$cshow_info;
         const 0;
 },
 sat_s6va4_entry() //  [R1]
         { []
         }
     {offset
       c6zD9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6zDa; else goto c6zDb;
       c6zDa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zDb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6zD2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6zDi; else goto c6zD3;
       u6zDi: // global
           call _c6zD2(R1) args: 0, res: 0, upd: 0;
       c6zD3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6va4_info" {
     sat_s6va4_info:
         const sat_s6va4_entry;
         const 1;
         const 12884901904;
         const S6vn0_srt+408;
 },
 _c6zD2() //  [R1]
         { []
         }
     {offset
       c6zD2: // global
           if (R1 & 7 == 1) goto c6zD6; else goto c6zD7;
       c6zD6: // global
           R1 = Data.Semigroup.Internal.$fShowAll6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6zD7: // global
           R1 = Data.Semigroup.Internal.$fShowAll5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zD2_info" {
     block_c6zD2_info:
         const _c6zD2;
         const 0;
         const 12884901918;
         const S6vn0_srt+408;
 },
 sat_s6va5_entry() //  [R1]
         { []
         }
     {offset
       c6zDj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zDn; else goto c6zDm;
       c6zDn: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zDm: // global
           _s6va2::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s6va4_info;
           P64[Hp] = _s6va2::P64;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6va5_info" {
     sat_s6va5_info:
         const sat_s6va5_entry;
         const 1;
         const 12884901904;
         const S6vn0_srt+408;
 },
 Data.Semigroup.Internal.$fShowAny_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c6zDo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zDs; else goto c6zDr;
       c6zDs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAny_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zDr: // global
           I64[Hp - 16] = sat_s6va5_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny_$cshow_info" {
     Data.Semigroup.Internal.$fShowAny_$cshow_info:
         const Data.Semigroup.Internal.$fShowAny_$cshow_entry;
         const 0;
         const 244813135886;
         const 4294967301;
         const S6vn0_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.373411026 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny1_closure" {
     Data.Semigroup.Internal.$fShowAny1_closure:
         const Data.Semigroup.Internal.$fShowAny1_info;
         const 0;
 },
 sat_s6va9_entry() //  [R1]
         { []
         }
     {offset
       c6zE7: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6va9_info" {
     sat_s6va9_info:
         const sat_s6va9_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vaa_entry() //  [R1]
         { []
         }
     {offset
       c6zEg: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vaa_info" {
     sat_s6vaa_info:
         const sat_s6vaa_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vab_entry() //  [R1]
         { []
         }
     {offset
       c6zEn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zEo; else goto c6zEp;
       c6zEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zEp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6zDY_info;
           _s6va7::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6va7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6zEw; else goto c6zDZ;
       u6zEw: // global
           call _c6zDY(R1) args: 0, res: 0, upd: 0;
       c6zDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vab_info" {
     sat_s6vab_info:
         const sat_s6vab_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 _c6zDY() //  [R1]
         { []
         }
     {offset
       c6zDY: // global
           _s6va7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6zEk; else goto c6zEl;
       c6zEk: // global
           Hp = Hp + 24;
           _s6va8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zEv; else goto c6zEr;
       c6zEr: // global
           I64[Hp - 16] = sat_s6va9_info;
           P64[Hp] = _s6va7::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6zEl: // global
           Hp = Hp + 24;
           _s6va8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zEv; else goto c6zEu;
       c6zEv: // global
           HpAlloc = 24;
           R1 = _s6va8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6zEu: // global
           I64[Hp - 16] = sat_s6vaa_info;
           P64[Hp] = _s6va7::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zDY_info" {
     block_c6zDY_info:
         const _c6zDY;
         const 1;
         const 30064771102;
         const S6vn0_srt+360;
 },
 sat_s6vac_entry() //  [R1]
         { []
         }
     {offset
       c6zEx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zEB; else goto c6zEA;
       c6zEB: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zEA: // global
           _s6va6::P64 = P64[R1 + 16];
           _s6va7::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6vab_info;
           P64[Hp - 8] = _s6va6::P64;
           P64[Hp] = _s6va7::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vac_info" {
     sat_s6vac_info:
         const sat_s6vac_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 Data.Semigroup.Internal.$fShowAny1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zEC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zEG; else goto c6zEF;
       c6zEG: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAny1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zEF: // global
           I64[Hp - 24] = sat_s6vac_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny1_info" {
     Data.Semigroup.Internal.$fShowAny1_info:
         const Data.Semigroup.Internal.$fShowAny1_entry;
         const 0;
         const 2263447765006;
         const 8589934607;
         const S6vn0_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.386614399 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowAny_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowAny_$cshowList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAny_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zF8: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fShowAny1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny_$cshowList_info" {
     Data.Semigroup.Internal.$fShowAny_$cshowList_info:
         const Data.Semigroup.Internal.$fShowAny_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6vn0_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.389991671 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_closure" {
     Data.Semigroup.Internal.$fShowAny_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure+3;
         const Data.Semigroup.Internal.$fShowAny_$cshow_closure+1;
         const Data.Semigroup.Internal.$fShowAny_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.391808287 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAny6_bytes" {
     Data.Semigroup.Internal.$fReadAny6_bytes:
         I8[] [65,110,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.394160301 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny5_closure" {
     Data.Semigroup.Internal.$fReadAny5_closure:
         const Data.Semigroup.Internal.$fReadAny5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny5_entry() //  [R1]
         { []
         }
     {offset
       c6zFn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zFo; else goto c6zFp;
       c6zFo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zFp: // global
           (_c6zFk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zFk::I64 == 0) goto c6zFm; else goto c6zFl;
       c6zFm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zFl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zFk::I64;
           R2 = Data.Semigroup.Internal.$fReadAny6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny5_info" {
     Data.Semigroup.Internal.$fReadAny5_info:
         const Data.Semigroup.Internal.$fReadAny5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.398070057 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_lexeme_closure" {
     Data.Semigroup.Internal.$fReadAny_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadAny5_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.399753804 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAny4_bytes" {
     Data.Semigroup.Internal.$fReadAny4_bytes:
         I8[] [103,101,116,65,110,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.402076599 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny3_closure" {
     Data.Semigroup.Internal.$fReadAny3_closure:
         const Data.Semigroup.Internal.$fReadAny3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny3_entry() //  [R1]
         { []
         }
     {offset
       c6zFF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zFG; else goto c6zFH;
       c6zFG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zFH: // global
           (_c6zFC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zFC::I64 == 0) goto c6zFE; else goto c6zFD;
       c6zFE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zFD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zFC::I64;
           R2 = Data.Semigroup.Internal.$fReadAny4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny3_info" {
     Data.Semigroup.Internal.$fReadAny3_info:
         const Data.Semigroup.Internal.$fReadAny3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.405995115 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll7_closure" {
     Data.Semigroup.Internal.$fReadAll7_closure:
         const Data.Semigroup.Internal.$fReadAll7_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll7_entry() //  [R3]
         { []
         }
     {offset
       c6zFT: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Read.$fReadBool2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll7_info" {
     Data.Semigroup.Internal.$fReadAll7_info:
         const Data.Semigroup.Internal.$fReadAll7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6vn0_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.413910421 UTC

[section ""data" . Data.Semigroup.Internal.$w$creadPrec1_closure" {
     Data.Semigroup.Internal.$w$creadPrec1_closure:
         const Data.Semigroup.Internal.$w$creadPrec1_info;
         const 0;
 },
 sat_s6vao_entry() //  [R1]
         { []
         }
     {offset
       c6zGs: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vao_info" {
     sat_s6vao_info:
         const sat_s6vao_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6var_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zGy: // global
           _s6vam::P64 = R2;
           _s6var::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zGz; else goto c6zGA;
       c6zGA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zGC; else goto c6zGB;
       c6zGC: // global
           HpAlloc = 24;
           goto c6zGz;
       c6zGz: // global
           R2 = _s6vam::P64;
           R1 = _s6var::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zGB: // global
           _s6vai::P64 = P64[_s6var::P64 + 7];
           I64[Hp - 16] = sat_s6vao_info;
           P64[Hp - 8] = _s6vai::P64;
           P64[Hp] = _s6vam::P64;
           I64[Sp - 8] = block_c6zGv_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6var_info" {
     sat_s6var_info:
         const sat_s6var_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6vn0_srt+456;
 },
 _c6zGv() //  [R1]
         { []
         }
     {offset
       c6zGv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zGF; else goto c6zGE;
       c6zGF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zGE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zGv_info" {
     block_c6zGv_info:
         const _c6zGv;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6zHa_srtd" {
     u6zHa_srtd:
         const S6vn0_srt+128;
         const 45;
         const 32985348833281;
 },
 sat_s6vas_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zGG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zGK; else goto c6zGJ;
       c6zGK: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zGJ: // global
           _s6vai::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s6var_info;
           P64[Hp] = _s6vai::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = Data.Semigroup.Internal.$fReadAll7_closure+2;
           R2 = Data.Semigroup.Internal.$fReadAny3_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vas_info" {
     sat_s6vas_info:
         const sat_s6vas_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6zHa_srtd;
 },
 section ""relreadonly" . u6zHb_srtd" {
     u6zHb_srtd:
         const S6vn0_srt+128;
         const 45;
         const 32985348833285;
 },
 sat_s6vav_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zGO: // global
           _s6vak::P64 = R2;
           _s6vav::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zGP; else goto c6zGQ;
       c6zGQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zGS; else goto c6zGR;
       c6zGS: // global
           HpAlloc = 16;
           goto c6zGP;
       c6zGP: // global
           R2 = _s6vak::P64;
           R1 = _s6vav::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zGR: // global
           _s6vai::P64 = P64[_s6vav::P64 + 7];
           I64[Hp - 8] = sat_s6vas_info;
           P64[Hp] = _s6vai::P64;
           I64[Sp - 8] = block_c6zGL_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vav_info" {
     sat_s6vav_info:
         const sat_s6vav_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6zHb_srtd;
 },
 _c6zGL() //  [R1]
         { []
         }
     {offset
       c6zGL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zGV; else goto c6zGU;
       c6zGV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zGU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zGL_info" {
     block_c6zGL_info:
         const _c6zGL;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6zHc_srtd" {
     u6zHc_srtd:
         const S6vn0_srt+128;
         const 47;
         const 138538465099781;
 },
 Data.Semigroup.Internal.$w$creadPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zGZ: // global
           _s6vai::P64 = R3;
           _s6vah::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zH0; else goto c6zH1;
       c6zH1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zH3; else goto c6zH2;
       c6zH3: // global
           HpAlloc = 16;
           goto c6zH0;
       c6zH0: // global
           R3 = _s6vai::P64;
           R2 = _s6vah::I64;
           R1 = Data.Semigroup.Internal.$w$creadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zH2: // global
           if (%MO_S_Gt_W64(_s6vah::I64, 11)) goto c6zGX; else goto c6zGY;
       c6zGX: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6zGY: // global
           I64[Hp - 8] = sat_s6vav_info;
           P64[Hp] = _s6vai::P64;
           I64[Sp - 8] = block_c6zH4_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAny_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$creadPrec1_info" {
     Data.Semigroup.Internal.$w$creadPrec1_info:
         const Data.Semigroup.Internal.$w$creadPrec1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const u6zHc_srtd;
 },
 _c6zH4() //  [R1]
         { []
         }
     {offset
       c6zH4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zH9; else goto c6zH8;
       c6zH9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zH8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zH4_info" {
     block_c6zH4_info:
         const _c6zH4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.433114362 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny2_closure" {
     Data.Semigroup.Internal.$fReadAny2_closure:
         const Data.Semigroup.Internal.$fReadAny2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zHT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zHU; else goto c6zHV;
       c6zHU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAny2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zHV: // global
           I64[Sp - 16] = block_c6zHQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6zHZ; else goto c6zHR;
       u6zHZ: // global
           call _c6zHQ(R1) args: 0, res: 0, upd: 0;
       c6zHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny2_info" {
     Data.Semigroup.Internal.$fReadAny2_info:
         const Data.Semigroup.Internal.$fReadAny2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6vn0_srt+488;
 },
 _c6zHQ() //  [R1]
         { []
         }
     {offset
       c6zHQ: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$creadPrec1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zHQ_info" {
     block_c6zHQ_info:
         const _c6zHQ;
         const 1;
         const 4294967326;
         const S6vn0_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.438690826 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny1_closure" {
     Data.Semigroup.Internal.$fReadAny1_closure:
         const Data.Semigroup.Internal.$fReadAny1_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zId: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAny2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny1_info" {
     Data.Semigroup.Internal.$fReadAny1_info:
         const Data.Semigroup.Internal.$fReadAny1_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S6vn0_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.442954788 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_info;
         const 0;
 },
 sat_s6vaD_entry() //  [R1]
         { []
         }
     {offset
       c6zIs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zIt; else goto c6zIu;
       c6zIt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zIu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAny2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vaD_info" {
     sat_s6vaD_info:
         const sat_s6vaD_entry;
         const 1;
         const 554050781200;
         const S6vn0_srt+448;
 },
 Data.Semigroup.Internal.$fReadAny_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6zIv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zIz; else goto c6zIy;
       c6zIz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zIy: // global
           I64[Hp - 16] = sat_s6vaD_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadAny_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S6vn0_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.448565341 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c6zIO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zIP; else goto c6zIQ;
       c6zIP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zIQ: // global
           (_c6zIL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zIL::I64 == 0) goto c6zIN; else goto c6zIM;
       c6zIN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zIM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zIL::I64;
           R2 = Data.Semigroup.Internal.$fReadAny1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadAny_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S6vn0_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.452923529 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny7_closure" {
     Data.Semigroup.Internal.$fReadAny7_closure:
         const Data.Semigroup.Internal.$fReadAny7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny7_entry() //  [R1]
         { []
         }
     {offset
       c6zJ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zJ5; else goto c6zJ6;
       c6zJ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zJ6: // global
           (_c6zJ1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zJ1::I64 == 0) goto c6zJ3; else goto c6zJ2;
       c6zJ3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zJ2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zJ1::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny7_info" {
     Data.Semigroup.Internal.$fReadAny7_info:
         const Data.Semigroup.Internal.$fReadAny7_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.462537464 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_$creadList_closure" {
     Data.Semigroup.Internal.$fReadAny_$creadList_closure:
         const Data.Semigroup.Internal.$fReadAny_$creadList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6zJi: // global
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAny7_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny_$creadList_info" {
     Data.Semigroup.Internal.$fReadAny_$creadList_info:
         const Data.Semigroup.Internal.$fReadAny_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6vn0_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.466581915 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_closure" {
     Data.Semigroup.Internal.$fReadAny_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure+1;
         const Data.Semigroup.Internal.$fReadAny_$creadList_closure+1;
         const Data.Semigroup.Internal.$fReadAny1_closure+2;
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.469121252 UTC

[section ""data" . Data.Semigroup.Internal.$fEqAny_closure" {
     Data.Semigroup.Internal.$fEqAny_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.$fEqBool_$c==_closure+2;
         const GHC.Classes.$fEqBool_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.472084213 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAny_closure" {
     Data.Semigroup.Internal.$fOrdAny_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Semigroup.Internal.$fEqAny_closure+1;
         const GHC.Classes.$fOrdBool_$ccompare_closure+2;
         const GHC.Classes.$fOrdBool_$c<_closure+2;
         const GHC.Classes.$fOrdBool_$c<=_closure+2;
         const GHC.Classes.$fOrdBool_$c>_closure+2;
         const GHC.Classes.$fOrdBool_$c>=_closure+2;
         const GHC.Classes.$fOrdBool_$cmax_closure+2;
         const GHC.Classes.$fOrdBool_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.475003529 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAll1_closure" {
     Data.Semigroup.Internal.$fGenericAll1_closure:
         const Data.Semigroup.Internal.$fGenericAll1_info;
 },
 Data.Semigroup.Internal.$fGenericAll1_entry() //  [R2]
         { []
         }
     {offset
       c6zJw: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAll1_info" {
     Data.Semigroup.Internal.$fGenericAll1_info:
         const Data.Semigroup.Internal.$fGenericAll1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.479682914 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAll2_closure" {
     Data.Semigroup.Internal.$fGenericAll2_closure:
         const Data.Semigroup.Internal.$fGenericAll2_info;
 },
 Data.Semigroup.Internal.$fGenericAll2_entry() //  [R2]
         { []
         }
     {offset
       c6zJH: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAll2_info" {
     Data.Semigroup.Internal.$fGenericAll2_info:
         const Data.Semigroup.Internal.$fGenericAll2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.484139412 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAll_closure" {
     Data.Semigroup.Internal.$fGenericAll_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericAll2_closure+1;
         const Data.Semigroup.Internal.$fGenericAll1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.486813288 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedAll_closure" {
     Data.Semigroup.Internal.$fBoundedAll_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.488809186 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAll4_bytes" {
     Data.Semigroup.Internal.$fShowAll4_bytes:
         I8[] [65,108,108,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.491959874 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll3_closure" {
     Data.Semigroup.Internal.$fShowAll3_closure:
         const Data.Semigroup.Internal.$fShowAll3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll3_entry() //  [R1]
         { []
         }
     {offset
       c6zJZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zK0; else goto c6zK1;
       c6zK0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zK1: // global
           (_c6zJW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zJW::I64 == 0) goto c6zJY; else goto c6zJX;
       c6zJY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zJX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zJW::I64;
           R2 = Data.Semigroup.Internal.$fShowAll4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll3_info" {
     Data.Semigroup.Internal.$fShowAll3_info:
         const Data.Semigroup.Internal.$fShowAll3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.495649914 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAll2_bytes" {
     Data.Semigroup.Internal.$fShowAll2_bytes:
         I8[] [103,101,116,65,108,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.503156828 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec_info;
         const 0;
 },
 sat_s6vaL_entry() //  [R1]
         { []
         }
     {offset
       c6zKy: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vaL_info" {
     sat_s6vaL_info:
         const sat_s6vaL_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vaM_entry() //  [R1]
         { []
         }
     {offset
       c6zKH: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vaM_info" {
     sat_s6vaM_info:
         const sat_s6vaM_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vaN_entry() //  [R1]
         { []
         }
     {offset
       c6zKO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zKP; else goto c6zKQ;
       c6zKP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zKQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6zKp_info;
           _s6vaI::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6vaI::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6zKX; else goto c6zKq;
       u6zKX: // global
           call _c6zKp(R1) args: 0, res: 0, upd: 0;
       c6zKq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vaN_info" {
     sat_s6vaN_info:
         const sat_s6vaN_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 _c6zKp() //  [R1]
         { []
         }
     {offset
       c6zKp: // global
           _s6vaI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6zKL; else goto c6zKM;
       c6zKL: // global
           Hp = Hp + 24;
           _s6vaK::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zKW; else goto c6zKS;
       c6zKS: // global
           I64[Hp - 16] = sat_s6vaL_info;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6zKM: // global
           Hp = Hp + 24;
           _s6vaK::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zKW; else goto c6zKV;
       c6zKW: // global
           HpAlloc = 24;
           R1 = _s6vaK::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6zKV: // global
           I64[Hp - 16] = sat_s6vaM_info;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zKp_info" {
     block_c6zKp_info:
         const _c6zKp;
         const 1;
         const 30064771102;
         const S6vn0_srt+360;
 },
 sat_s6vaO_entry() //  [R1]
         { []
         }
     {offset
       c6zKY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zL2; else goto c6zL1;
       c6zL2: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zL1: // global
           _s6vaH::P64 = P64[R1 + 16];
           _s6vaI::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6vaN_info;
           P64[Hp - 8] = _s6vaH::P64;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vaO_info" {
     sat_s6vaO_info:
         const sat_s6vaO_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 sat_s6vaR_entry() //  [R1]
         { []
         }
     {offset
       c6zLq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zLu; else goto c6zLt;
       c6zLu: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zLt: // global
           _s6vaI::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vaR_info" {
     sat_s6vaR_info:
         const sat_s6vaR_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vaT_entry() //  [R1]
         { []
         }
     {offset
       c6zLC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zLG; else goto c6zLF;
       c6zLG: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zLF: // global
           _s6vaI::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vaT_info" {
     sat_s6vaT_info:
         const sat_s6vaT_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vaU_entry() //  [R1]
         { []
         }
     {offset
       c6zLL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zLM; else goto c6zLN;
       c6zLM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zLN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6zLg_info;
           _s6vaI::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6vaI::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6zLU; else goto c6zLh;
       u6zLU: // global
           call _c6zLg(R1) args: 0, res: 0, upd: 0;
       c6zLh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vaU_info" {
     sat_s6vaU_info:
         const sat_s6vaU_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 _c6zLg() //  [R1]
         { []
         }
     {offset
       c6zLg: // global
           _s6vaI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6zLI; else goto c6zLJ;
       c6zLI: // global
           Hp = Hp + 24;
           _s6vaP::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zLT; else goto c6zLP;
       c6zLP: // global
           I64[Hp - 16] = sat_s6vaR_info;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6zLJ: // global
           Hp = Hp + 24;
           _s6vaP::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zLT; else goto c6zLS;
       c6zLT: // global
           HpAlloc = 24;
           R1 = _s6vaP::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6zLS: // global
           I64[Hp - 16] = sat_s6vaT_info;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zLg_info" {
     block_c6zLg_info:
         const _c6zLg;
         const 1;
         const 30064771102;
         const S6vn0_srt+360;
 },
 sat_s6vaV_entry() //  [R1]
         { []
         }
     {offset
       c6zLV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zLZ; else goto c6zLY;
       c6zLZ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zLY: // global
           _s6vaH::P64 = P64[R1 + 16];
           _s6vaI::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6vaU_info;
           P64[Hp - 8] = _s6vaH::P64;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vaV_info" {
     sat_s6vaV_info:
         const sat_s6vaV_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 sat_s6vaW_entry() //  [R1]
         { []
         }
     {offset
       c6zM0: // global
           _s6vaW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zM1; else goto c6zM2;
       c6zM2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zM4; else goto c6zM3;
       c6zM4: // global
           HpAlloc = 32;
           goto c6zM1;
       c6zM1: // global
           R1 = _s6vaW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vaW::P64;
           _s6vaH::P64 = P64[_s6vaW::P64 + 16];
           _s6vaI::P64 = P64[_s6vaW::P64 + 24];
           I64[Hp - 24] = sat_s6vaV_info;
           P64[Hp - 8] = _s6vaH::P64;
           P64[Hp] = _s6vaI::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vaW_info" {
     sat_s6vaW_info:
         const sat_s6vaW_entry;
         const 2;
         const 72057624102699026;
         const S6vn0_srt+360;
 },
 Data.Semigroup.Internal.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6zM8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6zMc; else goto c6zMb;
       c6zMc: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zMb: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c6zM6; else goto c6zM7;
       c6zM6: // global
           I64[Hp - 48] = sat_s6vaO_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c6zKh::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c6zKh::P64;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c6zM7: // global
           I64[Hp - 48] = sat_s6vaW_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec_info" {
     Data.Semigroup.Internal.$w$cshowsPrec_info:
         const Data.Semigroup.Internal.$w$cshowsPrec_entry;
         const 0;
         const 216172812178554894;
         const 12884901907;
         const S6vn0_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.527782608 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6zN7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6zN8; else goto c6zN9;
       c6zN8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zN9: // global
           I64[Sp - 24] = block_c6zN4_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6zNd; else goto c6zN5;
       u6zNd: // global
           call _c6zN4(R1) args: 0, res: 0, upd: 0;
       c6zN5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowAll_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6vn0_srt+560;
 },
 _c6zN4() //  [R1]
         { []
         }
     {offset
       c6zN4: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zN4_info" {
     block_c6zN4_info:
         const _c6zN4;
         const 2;
         const 4294967326;
         const S6vn0_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.535013761 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_$cshow_closure" {
     Data.Semigroup.Internal.$fShowAll_$cshow_closure:
         const Data.Semigroup.Internal.$fShowAll_$cshow_info;
         const 0;
 },
 sat_s6vb4_entry() //  [R1]
         { []
         }
     {offset
       c6zNG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6zNH; else goto c6zNI;
       c6zNH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zNI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6zNz_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6zNP; else goto c6zNA;
       u6zNP: // global
           call _c6zNz(R1) args: 0, res: 0, upd: 0;
       c6zNA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vb4_info" {
     sat_s6vb4_info:
         const sat_s6vb4_entry;
         const 1;
         const 12884901904;
         const S6vn0_srt+408;
 },
 _c6zNz() //  [R1]
         { []
         }
     {offset
       c6zNz: // global
           if (R1 & 7 == 1) goto c6zND; else goto c6zNE;
       c6zND: // global
           R1 = Data.Semigroup.Internal.$fShowAll6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6zNE: // global
           R1 = Data.Semigroup.Internal.$fShowAll5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zNz_info" {
     block_c6zNz_info:
         const _c6zNz;
         const 0;
         const 12884901918;
         const S6vn0_srt+408;
 },
 sat_s6vb5_entry() //  [R1]
         { []
         }
     {offset
       c6zNQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zNU; else goto c6zNT;
       c6zNU: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zNT: // global
           _s6vb2::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s6vb4_info;
           P64[Hp] = _s6vb2::P64;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vb5_info" {
     sat_s6vb5_info:
         const sat_s6vb5_entry;
         const 1;
         const 12884901904;
         const S6vn0_srt+408;
 },
 Data.Semigroup.Internal.$fShowAll_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c6zNV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zNZ; else goto c6zNY;
       c6zNZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAll_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zNY: // global
           I64[Hp - 16] = sat_s6vb5_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll_$cshow_info" {
     Data.Semigroup.Internal.$fShowAll_$cshow_info:
         const Data.Semigroup.Internal.$fShowAll_$cshow_entry;
         const 0;
         const 10133112046485518;
         const 4294967301;
         const S6vn0_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.546987873 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll1_closure" {
     Data.Semigroup.Internal.$fShowAll1_closure:
         const Data.Semigroup.Internal.$fShowAll1_info;
         const 0;
 },
 sat_s6vb9_entry() //  [R1]
         { []
         }
     {offset
       c6zOE: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vb9_info" {
     sat_s6vb9_info:
         const sat_s6vb9_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vba_entry() //  [R1]
         { []
         }
     {offset
       c6zON: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vba_info" {
     sat_s6vba_info:
         const sat_s6vba_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+360;
 },
 sat_s6vbb_entry() //  [R1]
         { []
         }
     {offset
       c6zOU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6zOV; else goto c6zOW;
       c6zOV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zOW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6zOv_info;
           _s6vb7::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6vb7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6zP3; else goto c6zOw;
       u6zP3: // global
           call _c6zOv(R1) args: 0, res: 0, upd: 0;
       c6zOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbb_info" {
     sat_s6vbb_info:
         const sat_s6vbb_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 _c6zOv() //  [R1]
         { []
         }
     {offset
       c6zOv: // global
           _s6vb7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6zOR; else goto c6zOS;
       c6zOR: // global
           Hp = Hp + 24;
           _s6vb8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zP2; else goto c6zOY;
       c6zOY: // global
           I64[Hp - 16] = sat_s6vb9_info;
           P64[Hp] = _s6vb7::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6zOS: // global
           Hp = Hp + 24;
           _s6vb8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6zP2; else goto c6zP1;
       c6zP2: // global
           HpAlloc = 24;
           R1 = _s6vb8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6zP1: // global
           I64[Hp - 16] = sat_s6vba_info;
           P64[Hp] = _s6vb7::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6zOv_info" {
     block_c6zOv_info:
         const _c6zOv;
         const 1;
         const 30064771102;
         const S6vn0_srt+360;
 },
 sat_s6vbc_entry() //  [R1]
         { []
         }
     {offset
       c6zP4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zP8; else goto c6zP7;
       c6zP8: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zP7: // global
           _s6vb6::P64 = P64[R1 + 16];
           _s6vb7::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6vbb_info;
           P64[Hp - 8] = _s6vb6::P64;
           P64[Hp] = _s6vb7::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vbc_info" {
     sat_s6vbc_info:
         const sat_s6vbc_entry;
         const 2;
         const 30064771090;
         const S6vn0_srt+360;
 },
 Data.Semigroup.Internal.$fShowAll1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zP9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zPd; else goto c6zPc;
       c6zPd: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAll1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zPc: // global
           I64[Hp - 24] = sat_s6vbc_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll1_info" {
     Data.Semigroup.Internal.$fShowAll1_info:
         const Data.Semigroup.Internal.$fShowAll1_entry;
         const 0;
         const 1224979128709545998;
         const 8589934607;
         const S6vn0_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.55948157 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowAll_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowAll_$cshowList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zPF: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fShowAll1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll_$cshowList_info" {
     Data.Semigroup.Internal.$fShowAll_$cshowList_info:
         const Data.Semigroup.Internal.$fShowAll_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6vn0_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.563392093 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_closure" {
     Data.Semigroup.Internal.$fShowAll_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure+3;
         const Data.Semigroup.Internal.$fShowAll_$cshow_closure+1;
         const Data.Semigroup.Internal.$fShowAll_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.565183822 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll13_bytes" {
     Data.Semigroup.Internal.$fReadAll13_bytes:
         I8[] [65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.567599548 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll12_closure" {
     Data.Semigroup.Internal.$fReadAll12_closure:
         const Data.Semigroup.Internal.$fReadAll12_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll12_entry() //  [R1]
         { []
         }
     {offset
       c6zPU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zPV; else goto c6zPW;
       c6zPV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zPW: // global
           (_c6zPR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zPR::I64 == 0) goto c6zPT; else goto c6zPS;
       c6zPT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zPS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zPR::I64;
           R2 = Data.Semigroup.Internal.$fReadAll13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll12_info" {
     Data.Semigroup.Internal.$fReadAll12_info:
         const Data.Semigroup.Internal.$fReadAll12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.571643024 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_lexeme1_closure" {
     Data.Semigroup.Internal.$fReadAll_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadAll12_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.573355043 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll9_bytes" {
     Data.Semigroup.Internal.$fReadAll9_bytes:
         I8[] [103,101,116,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.575627989 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll8_closure" {
     Data.Semigroup.Internal.$fReadAll8_closure:
         const Data.Semigroup.Internal.$fReadAll8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll8_entry() //  [R1]
         { []
         }
     {offset
       c6zQc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zQd; else goto c6zQe;
       c6zQd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zQe: // global
           (_c6zQ9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zQ9::I64 == 0) goto c6zQb; else goto c6zQa;
       c6zQb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zQa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zQ9::I64;
           R2 = Data.Semigroup.Internal.$fReadAll9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll8_info" {
     Data.Semigroup.Internal.$fReadAll8_info:
         const Data.Semigroup.Internal.$fReadAll8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.583481866 UTC

[section ""data" . Data.Semigroup.Internal.$w$creadPrec_closure" {
     Data.Semigroup.Internal.$w$creadPrec_closure:
         const Data.Semigroup.Internal.$w$creadPrec_info;
         const 0;
 },
 sat_s6vbm_entry() //  [R1]
         { []
         }
     {offset
       c6zQO: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vbm_info" {
     sat_s6vbm_info:
         const sat_s6vbm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6vbp_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zQU: // global
           _s6vbk::P64 = R2;
           _s6vbp::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zQV; else goto c6zQW;
       c6zQW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zQY; else goto c6zQX;
       c6zQY: // global
           HpAlloc = 24;
           goto c6zQV;
       c6zQV: // global
           R2 = _s6vbk::P64;
           R1 = _s6vbp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zQX: // global
           _s6vbg::P64 = P64[_s6vbp::P64 + 7];
           I64[Hp - 16] = sat_s6vbm_info;
           P64[Hp - 8] = _s6vbg::P64;
           P64[Hp] = _s6vbk::P64;
           I64[Sp - 8] = block_c6zQR_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vbp_info" {
     sat_s6vbp_info:
         const sat_s6vbp_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6vn0_srt+456;
 },
 _c6zQR() //  [R1]
         { []
         }
     {offset
       c6zQR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zR1; else goto c6zR0;
       c6zR1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zR0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zQR_info" {
     block_c6zQR_info:
         const _c6zQR;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6zRw_srtd" {
     u6zRw_srtd:
         const S6vn0_srt+128;
         const 59;
         const 288245769314500609;
 },
 sat_s6vbq_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zR2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zR6; else goto c6zR5;
       c6zR6: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zR5: // global
           _s6vbg::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s6vbp_info;
           P64[Hp] = _s6vbg::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = Data.Semigroup.Internal.$fReadAll7_closure+2;
           R2 = Data.Semigroup.Internal.$fReadAll8_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vbq_info" {
     sat_s6vbq_info:
         const sat_s6vbq_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6zRw_srtd;
 },
 section ""relreadonly" . u6zRx_srtd" {
     u6zRx_srtd:
         const S6vn0_srt+128;
         const 59;
         const 288245769314500613;
 },
 sat_s6vbt_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zRa: // global
           _s6vbi::P64 = R2;
           _s6vbt::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zRb; else goto c6zRc;
       c6zRc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zRe; else goto c6zRd;
       c6zRe: // global
           HpAlloc = 16;
           goto c6zRb;
       c6zRb: // global
           R2 = _s6vbi::P64;
           R1 = _s6vbt::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zRd: // global
           _s6vbg::P64 = P64[_s6vbt::P64 + 7];
           I64[Hp - 8] = sat_s6vbq_info;
           P64[Hp] = _s6vbg::P64;
           I64[Sp - 8] = block_c6zR7_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vbt_info" {
     sat_s6vbt_info:
         const sat_s6vbt_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6zRx_srtd;
 },
 _c6zR7() //  [R1]
         { []
         }
     {offset
       c6zR7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zRh; else goto c6zRg;
       c6zRh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zRg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zR7_info" {
     block_c6zR7_info:
         const _c6zR7;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6zRy_srtd" {
     u6zRy_srtd:
         const S6vn0_srt+128;
         const 61;
         const 2017628026224771077;
 },
 Data.Semigroup.Internal.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zRl: // global
           _s6vbg::P64 = R3;
           _s6vbf::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c6zRm; else goto c6zRn;
       c6zRn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zRp; else goto c6zRo;
       c6zRp: // global
           HpAlloc = 16;
           goto c6zRm;
       c6zRm: // global
           R3 = _s6vbg::P64;
           R2 = _s6vbf::I64;
           R1 = Data.Semigroup.Internal.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zRo: // global
           if (%MO_S_Gt_W64(_s6vbf::I64, 11)) goto c6zRj; else goto c6zRk;
       c6zRj: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6zRk: // global
           I64[Hp - 8] = sat_s6vbt_info;
           P64[Hp] = _s6vbg::P64;
           I64[Sp - 8] = block_c6zRq_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$creadPrec_info" {
     Data.Semigroup.Internal.$w$creadPrec_info:
         const Data.Semigroup.Internal.$w$creadPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const u6zRy_srtd;
 },
 _c6zRq() //  [R1]
         { []
         }
     {offset
       c6zRq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zRv; else goto c6zRu;
       c6zRv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6zRu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zRq_info" {
     block_c6zRq_info:
         const _c6zRq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.602297833 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll2_closure" {
     Data.Semigroup.Internal.$fReadAll2_closure:
         const Data.Semigroup.Internal.$fReadAll2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zSf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zSg; else goto c6zSh;
       c6zSg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAll2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zSh: // global
           I64[Sp - 16] = block_c6zSc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6zSl; else goto c6zSd;
       u6zSl: // global
           call _c6zSc(R1) args: 0, res: 0, upd: 0;
       c6zSd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll2_info" {
     Data.Semigroup.Internal.$fReadAll2_info:
         const Data.Semigroup.Internal.$fReadAll2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6vn0_srt+600;
 },
 _c6zSc() //  [R1]
         { []
         }
     {offset
       c6zSc: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$creadPrec_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zSc_info" {
     block_c6zSc_info:
         const _c6zSc;
         const 1;
         const 4294967326;
         const S6vn0_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.610832718 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll1_closure" {
     Data.Semigroup.Internal.$fReadAll1_closure:
         const Data.Semigroup.Internal.$fReadAll1_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zSz: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAll2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll1_info" {
     Data.Semigroup.Internal.$fReadAll1_info:
         const Data.Semigroup.Internal.$fReadAll1_entry;
         const 0;
         const 9007203549708302;
         const 8589934607;
         const S6vn0_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.616032217 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_info;
         const 0;
 },
 sat_s6vbB_entry() //  [R1]
         { []
         }
     {offset
       c6zSO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zSP; else goto c6zSQ;
       c6zSP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zSQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbB_info" {
     sat_s6vbB_info:
         const sat_s6vbB_entry;
         const 1;
         const 9007203549708304;
         const S6vn0_srt+448;
 },
 Data.Semigroup.Internal.$fReadAll_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6zSR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zSV; else goto c6zSU;
       c6zSV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zSU: // global
           I64[Hp - 16] = sat_s6vbB_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadAll_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S6vn0_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.622665056 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c6zTa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zTb; else goto c6zTc;
       c6zTb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zTc: // global
           (_c6zT7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zT7::I64 == 0) goto c6zT9; else goto c6zT8;
       c6zT9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zT8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zT7::I64;
           R2 = Data.Semigroup.Internal.$fReadAll1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadAll_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_entry;
         const 0;
         const 35188667056149;
         const S6vn0_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.62719611 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll14_closure" {
     Data.Semigroup.Internal.$fReadAll14_closure:
         const Data.Semigroup.Internal.$fReadAll14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll14_entry() //  [R1]
         { []
         }
     {offset
       c6zTq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zTr; else goto c6zTs;
       c6zTr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zTs: // global
           (_c6zTn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6zTn::I64 == 0) goto c6zTp; else goto c6zTo;
       c6zTp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6zTo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6zTn::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll14_info" {
     Data.Semigroup.Internal.$fReadAll14_info:
         const Data.Semigroup.Internal.$fReadAll14_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.631893738 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_$creadList_closure" {
     Data.Semigroup.Internal.$fReadAll_$creadList_closure:
         const Data.Semigroup.Internal.$fReadAll_$creadList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6zTE: // global
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAll14_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll_$creadList_info" {
     Data.Semigroup.Internal.$fReadAll_$creadList_info:
         const Data.Semigroup.Internal.$fReadAll_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6vn0_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.635494032 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_closure" {
     Data.Semigroup.Internal.$fReadAll_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure+1;
         const Data.Semigroup.Internal.$fReadAll_$creadList_closure+1;
         const Data.Semigroup.Internal.$fReadAll1_closure+2;
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.63797503 UTC

[section ""data" . Data.Semigroup.Internal.$fEqAll_closure" {
     Data.Semigroup.Internal.$fEqAll_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.$fEqBool_$c==_closure+2;
         const GHC.Classes.$fEqBool_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.639915211 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAll_closure" {
     Data.Semigroup.Internal.$fOrdAll_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Semigroup.Internal.$fEqAll_closure+1;
         const GHC.Classes.$fOrdBool_$ccompare_closure+2;
         const GHC.Classes.$fOrdBool_$c<_closure+2;
         const GHC.Classes.$fOrdBool_$c<=_closure+2;
         const GHC.Classes.$fOrdBool_$c>_closure+2;
         const GHC.Classes.$fOrdBool_$c>=_closure+2;
         const GHC.Classes.$fOrdBool_$cmax_closure+2;
         const GHC.Classes.$fOrdBool_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.642225014 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericEndo1_closure" {
     Data.Semigroup.Internal.$fGenericEndo1_closure:
         const Data.Semigroup.Internal.$fGenericEndo1_info;
 },
 Data.Semigroup.Internal.$fGenericEndo1_entry() //  [R2]
         { []
         }
     {offset
       c6zTS: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericEndo1_info" {
     Data.Semigroup.Internal.$fGenericEndo1_info:
         const Data.Semigroup.Internal.$fGenericEndo1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.646004936 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericEndo2_closure" {
     Data.Semigroup.Internal.$fGenericEndo2_closure:
         const Data.Semigroup.Internal.$fGenericEndo2_info;
 },
 Data.Semigroup.Internal.$fGenericEndo2_entry() //  [R2]
         { []
         }
     {offset
       c6zU3: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericEndo2_info" {
     Data.Semigroup.Internal.$fGenericEndo2_info:
         const Data.Semigroup.Internal.$fGenericEndo2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.649229855 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericEndo_closure" {
     Data.Semigroup.Internal.$fGenericEndo_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericEndo2_closure+1;
         const Data.Semigroup.Internal.$fGenericEndo1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.651417647 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Dual1_closure" {
     Data.Semigroup.Internal.$fGeneric1Dual1_closure:
         const Data.Semigroup.Internal.$fGeneric1Dual1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Dual1_entry() //  [R2]
         { []
         }
     {offset
       c6zUf: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Dual1_info" {
     Data.Semigroup.Internal.$fGeneric1Dual1_info:
         const Data.Semigroup.Internal.$fGeneric1Dual1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.654880817 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Dual2_closure" {
     Data.Semigroup.Internal.$fGeneric1Dual2_closure:
         const Data.Semigroup.Internal.$fGeneric1Dual2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Dual2_entry() //  [R2]
         { []
         }
     {offset
       c6zUq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Dual2_info" {
     Data.Semigroup.Internal.$fGeneric1Dual2_info:
         const Data.Semigroup.Internal.$fGeneric1Dual2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.658175843 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Dual_closure" {
     Data.Semigroup.Internal.$fGeneric1Dual_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Dual2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Dual1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.66070253 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericDual1_closure" {
     Data.Semigroup.Internal.$fGenericDual1_closure:
         const Data.Semigroup.Internal.$fGenericDual1_info;
 },
 Data.Semigroup.Internal.$fGenericDual1_entry() //  [R2]
         { []
         }
     {offset
       c6zUC: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericDual1_info" {
     Data.Semigroup.Internal.$fGenericDual1_info:
         const Data.Semigroup.Internal.$fGenericDual1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.664535722 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericDual2_closure" {
     Data.Semigroup.Internal.$fGenericDual2_closure:
         const Data.Semigroup.Internal.$fGenericDual2_info;
 },
 Data.Semigroup.Internal.$fGenericDual2_entry() //  [R2]
         { []
         }
     {offset
       c6zUN: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericDual2_info" {
     Data.Semigroup.Internal.$fGenericDual2_info:
         const Data.Semigroup.Internal.$fGenericDual2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.66765366 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericDual_closure" {
     Data.Semigroup.Internal.$fGenericDual_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericDual2_closure+1;
         const Data.Semigroup.Internal.$fGenericDual1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.670574874 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedDual_closure" {
     Data.Semigroup.Internal.$fBoundedDual_closure:
         const Data.Semigroup.Internal.$fBoundedDual_info;
 },
 sat_s6vbK_entry() //  [R1]
         { []
         }
     {offset
       c6zV3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zV4; else goto c6zV5;
       c6zV4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zV5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbK_info" {
     sat_s6vbK_info:
         const sat_s6vbK_entry;
         const 1;
         const 16;
 },
 sat_s6vbJ_entry() //  [R1]
         { []
         }
     {offset
       c6zVa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zVb; else goto c6zVc;
       c6zVb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zVc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbJ_info" {
     sat_s6vbJ_info:
         const sat_s6vbJ_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fBoundedDual_entry() //  [R2]
         { []
         }
     {offset
       c6zVe: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6zVi; else goto c6zVh;
       c6zVi: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fBoundedDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zVh: // global
           I64[Hp - 64] = sat_s6vbK_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6vbJ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fBoundedDual_info" {
     Data.Semigroup.Internal.$fBoundedDual_info:
         const Data.Semigroup.Internal.$fBoundedDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.677616745 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowDual2_bytes" {
     Data.Semigroup.Internal.$fShowDual2_bytes:
         I8[] [68,117,97,108,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.679424597 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowDual1_bytes" {
     Data.Semigroup.Internal.$fShowDual1_bytes:
         I8[] [103,101,116,68,117,97,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.687648739 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec3_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec3_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec3_info;
 },
 f_s6vbO_entry() //  [R1]
         { []
         }
     {offset
       c6zVI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6zVJ; else goto c6zVK;
       c6zVJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zVK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6vbO_info" {
     f_s6vbO_info:
         const f_s6vbO_entry;
         const 2;
         const 18;
 },
 sat_s6vbR_entry() //  [R1]
         { []
         }
     {offset
       c6zW5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6zW6; else goto c6zW7;
       c6zW6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zW7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbR_info" {
     sat_s6vbR_info:
         const sat_s6vbR_entry;
         const 1;
         const 16;
 },
 sat_s6vbS_entry() //  [R1]
         { []
         }
     {offset
       c6zW8: // global
           _s6vbS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zW9; else goto c6zWa;
       c6zWa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zWc; else goto c6zWb;
       c6zWc: // global
           HpAlloc = 24;
           goto c6zW9;
       c6zW9: // global
           R1 = _s6vbS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zWb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vbS::P64;
           _s6vbO::P64 = P64[_s6vbS::P64 + 16];
           _s6vbQ::P64 = P64[_s6vbS::P64 + 24];
           I64[Hp - 16] = sat_s6vbR_info;
           P64[Hp] = _s6vbQ::P64;
           R2 = Hp - 16;
           R1 = _s6vbO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbS_info" {
     sat_s6vbS_info:
         const sat_s6vbS_entry;
         const 2;
         const 18;
 },
 sat_s6vbT_entry() //  [R1]
         { []
         }
     {offset
       c6zWd: // global
           _s6vbT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zWe; else goto c6zWf;
       c6zWf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zWh; else goto c6zWg;
       c6zWh: // global
           HpAlloc = 32;
           goto c6zWe;
       c6zWe: // global
           R1 = _s6vbT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zWg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vbT::P64;
           _s6vbO::P64 = P64[_s6vbT::P64 + 16];
           _s6vbQ::P64 = P64[_s6vbT::P64 + 24];
           I64[Hp - 24] = sat_s6vbS_info;
           P64[Hp - 8] = _s6vbO::P64;
           P64[Hp] = _s6vbQ::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbT_info" {
     sat_s6vbT_info:
         const sat_s6vbT_entry;
         const 2;
         const 18;
 },
 sat_s6vbU_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zWi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zWm; else goto c6zWl;
       c6zWm: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zWl: // global
           _s6vbO::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6vbT_info;
           P64[Hp - 8] = _s6vbO::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vbU_info" {
     sat_s6vbU_info:
         const sat_s6vbU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6vbX_entry() //  [R1]
         { []
         }
     {offset
       c6zWK: // global
           _s6vbX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zWL; else goto c6zWM;
       c6zWM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zWO; else goto c6zWN;
       c6zWO: // global
           HpAlloc = 24;
           goto c6zWL;
       c6zWL: // global
           R1 = _s6vbX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zWN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vbX::P64;
           _s6vbV::P64 = P64[_s6vbX::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6vbV::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbX_info" {
     sat_s6vbX_info:
         const sat_s6vbX_entry;
         const 1;
         const 16;
 },
 sat_s6vbY_entry() //  [R1]
         { []
         }
     {offset
       c6zWP: // global
           _s6vbY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zWQ; else goto c6zWR;
       c6zWR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6zWT; else goto c6zWS;
       c6zWT: // global
           HpAlloc = 24;
           goto c6zWQ;
       c6zWQ: // global
           R1 = _s6vbY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zWS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vbY::P64;
           _s6vbO::P64 = P64[_s6vbY::P64 + 16];
           _s6vbV::P64 = P64[_s6vbY::P64 + 24];
           I64[Hp - 16] = sat_s6vbX_info;
           P64[Hp] = _s6vbV::P64;
           R2 = Hp - 16;
           R1 = _s6vbO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbY_info" {
     sat_s6vbY_info:
         const sat_s6vbY_entry;
         const 2;
         const 18;
 },
 sat_s6vbZ_entry() //  [R1]
         { []
         }
     {offset
       c6zWU: // global
           _s6vbZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zWV; else goto c6zWW;
       c6zWW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zWY; else goto c6zWX;
       c6zWY: // global
           HpAlloc = 32;
           goto c6zWV;
       c6zWV: // global
           R1 = _s6vbZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zWX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vbZ::P64;
           _s6vbO::P64 = P64[_s6vbZ::P64 + 16];
           _s6vbV::P64 = P64[_s6vbZ::P64 + 24];
           I64[Hp - 24] = sat_s6vbY_info;
           P64[Hp - 8] = _s6vbO::P64;
           P64[Hp] = _s6vbV::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vbZ_info" {
     sat_s6vbZ_info:
         const sat_s6vbZ_entry;
         const 2;
         const 18;
 },
 sat_s6vc0_entry() //  [R1]
         { []
         }
     {offset
       c6zWZ: // global
           _s6vc0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zX0; else goto c6zX1;
       c6zX1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zX3; else goto c6zX2;
       c6zX3: // global
           HpAlloc = 32;
           goto c6zX0;
       c6zX0: // global
           R1 = _s6vc0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zX2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vc0::P64;
           _s6vbO::P64 = P64[_s6vc0::P64 + 16];
           _s6vbV::P64 = P64[_s6vc0::P64 + 24];
           I64[Hp - 24] = sat_s6vbZ_info;
           P64[Hp - 8] = _s6vbO::P64;
           P64[Hp] = _s6vbV::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vc0_info" {
     sat_s6vc0_info:
         const sat_s6vc0_entry;
         const 2;
         const 18;
 },
 sat_s6vc1_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zX5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6zX9; else goto c6zX8;
       c6zX9: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zX8: // global
           _s6vbO::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6vc0_info;
           P64[Hp - 32] = _s6vbO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vc1_info" {
     sat_s6vc1_info:
         const sat_s6vc1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6zXd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6zXh; else goto c6zXg;
       c6zXh: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zXg: // global
           I64[Hp - 40] = f_s6vbO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6zVE::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6zXb; else goto c6zXc;
       c6zXb: // global
           I64[Hp - 8] = sat_s6vbU_info;
           P64[Hp] = _c6zVE::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6zXc: // global
           I64[Hp - 8] = sat_s6vc1_info;
           P64[Hp] = _c6zVE::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec3_info" {
     Data.Semigroup.Internal.$w$cshowsPrec3_info:
         const Data.Semigroup.Internal.$w$cshowsPrec3_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.711237326 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowDual_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowDual_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowDual_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       c6zYa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6zYb; else goto c6zYc;
       c6zYb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zYc: // global
           I64[Sp - 24] = block_c6zY7_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6zYg; else goto c6zY8;
       u6zYg: // global
           call _c6zY7(R1) args: 0, res: 0, upd: 0;
       c6zY8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowDual_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowDual_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6zY7() //  [R1]
         { []
         }
     {offset
       c6zY7: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec3_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6zY7_info" {
     block_c6zY7_info:
         const _c6zY7;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.718130829 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_$cshow_closure" {
     Data.Semigroup.Internal.$fShowDual_$cshow_closure:
         const Data.Semigroup.Internal.$fShowDual_$cshow_info;
         const 0;
 },
 sat_s6vc9_entry() //  [R1]
         { []
         }
     {offset
       c6zYC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6zYD; else goto c6zYE;
       c6zYD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zYE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vc9_info" {
     sat_s6vc9_info:
         const sat_s6vc9_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+656;
 },
 sat_s6vca_entry() //  [R1]
         { []
         }
     {offset
       c6zYF: // global
           _s6vca::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6zYG; else goto c6zYH;
       c6zYH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zYJ; else goto c6zYI;
       c6zYJ: // global
           HpAlloc = 32;
           goto c6zYG;
       c6zYG: // global
           R1 = _s6vca::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6zYI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vca::P64;
           _s6vc7::P64 = P64[_s6vca::P64 + 16];
           _s6vc8::P64 = P64[_s6vca::P64 + 24];
           I64[Hp - 24] = sat_s6vc9_info;
           P64[Hp - 8] = _s6vc7::P64;
           P64[Hp] = _s6vc8::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vca_info" {
     sat_s6vca_info:
         const sat_s6vca_entry;
         const 2;
         const 4294967314;
         const S6vn0_srt+656;
 },
 Data.Semigroup.Internal.$fShowDual_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6zYK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6zYO; else goto c6zYN;
       c6zYO: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zYN: // global
           I64[Hp - 24] = sat_s6vca_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_$cshow_info" {
     Data.Semigroup.Internal.$fShowDual_$cshow_info:
         const Data.Semigroup.Internal.$fShowDual_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6vn0_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.726642213 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowDual_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowDual_$cshowList_info;
 },
 sat_s6vcf_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zZb: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec3_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcf_info" {
     sat_s6vcf_info:
         const sat_s6vcf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowDual_$cshowList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6zZe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6zZi; else goto c6zZh;
       c6zZi: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6zZh: // global
           I64[Hp - 8] = sat_s6vcf_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_$cshowList_info" {
     Data.Semigroup.Internal.$fShowDual_$cshowList_info:
         const Data.Semigroup.Internal.$fShowDual_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.733648221 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_closure" {
     Data.Semigroup.Internal.$fShowDual_closure:
         const Data.Semigroup.Internal.$fShowDual_info;
         const 0;
 },
 sat_s6vcj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6zZz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowDual_$cshowList_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcj_info" {
     sat_s6vcj_info:
         const sat_s6vcj_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6vci_entry() //  [R1, R2]
         { []
         }
     {offset
       c6zZH: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowDual_$cshow_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vci_info" {
     sat_s6vci_info:
         const sat_s6vci_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6vn0_srt+664;
 },
 sat_s6vch_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6zZP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowDual_$cshowsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vch_info" {
     sat_s6vch_info:
         const sat_s6vch_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowDual_entry() //  [R2]
         { []
         }
     {offset
       c6zZT: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6zZX; else goto c6zZW;
       c6zZX: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6zZW: // global
           I64[Hp - 72] = sat_s6vcj_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6vci_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6vch_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_info" {
     Data.Semigroup.Internal.$fShowDual_info:
         const Data.Semigroup.Internal.$fShowDual_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.74182157 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadDual5_bytes" {
     Data.Semigroup.Internal.$fReadDual5_bytes:
         I8[] [68,117,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.744156195 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual4_closure" {
     Data.Semigroup.Internal.$fReadDual4_closure:
         const Data.Semigroup.Internal.$fReadDual4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadDual4_entry() //  [R1]
         { []
         }
     {offset
       c6A0m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A0n; else goto c6A0o;
       c6A0n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A0o: // global
           (_c6A0j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6A0j::I64 == 0) goto c6A0l; else goto c6A0k;
       c6A0l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6A0k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6A0j::I64;
           R2 = Data.Semigroup.Internal.$fReadDual5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual4_info" {
     Data.Semigroup.Internal.$fReadDual4_info:
         const Data.Semigroup.Internal.$fReadDual4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.747976551 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_lexeme_closure" {
     Data.Semigroup.Internal.$fReadDual_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadDual4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.749775719 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadDual3_bytes" {
     Data.Semigroup.Internal.$fReadDual3_bytes:
         I8[] [103,101,116,68,117,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.752072605 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual2_closure" {
     Data.Semigroup.Internal.$fReadDual2_closure:
         const Data.Semigroup.Internal.$fReadDual2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadDual2_entry() //  [R1]
         { []
         }
     {offset
       c6A0E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A0F; else goto c6A0G;
       c6A0F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A0G: // global
           (_c6A0B::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6A0B::I64 == 0) goto c6A0D; else goto c6A0C;
       c6A0D: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6A0C: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6A0B::I64;
           R2 = Data.Semigroup.Internal.$fReadDual3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual2_info" {
     Data.Semigroup.Internal.$fReadDual2_info:
         const Data.Semigroup.Internal.$fReadDual2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.764967783 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual1_closure" {
     Data.Semigroup.Internal.$fReadDual1_closure:
         const Data.Semigroup.Internal.$fReadDual1_info;
         const 0;
 },
 lvl12_s6vcl_entry() //  [R1]
         { []
         }
     {offset
       c6A0W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6A0X; else goto c6A0Y;
       c6A0X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A0Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6vcl_info" {
     lvl12_s6vcl_info:
         const lvl12_s6vcl_entry;
         const 1;
         const 16;
 },
 ds_s6vcm_entry() //  [R1]
         { []
         }
     {offset
       c6A14: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6vcm_info" {
     ds_s6vcm_info:
         const ds_s6vcm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6vcx_entry() //  [R1]
         { []
         }
     {offset
       c6A1F: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcx_info" {
     sat_s6vcx_info:
         const sat_s6vcx_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6vcA_entry() //  [R1, R2]
         { []
         }
     {offset
       c6A1L: // global
           _s6vcv::P64 = R2;
           _s6vcA::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6A1M; else goto c6A1N;
       c6A1N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6A1P; else goto c6A1O;
       c6A1P: // global
           HpAlloc = 24;
           goto c6A1M;
       c6A1M: // global
           R2 = _s6vcv::P64;
           R1 = _s6vcA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A1O: // global
           _s6vcp::P64 = P64[_s6vcA::P64 + 7];
           I64[Hp - 16] = sat_s6vcx_info;
           P64[Hp - 8] = _s6vcp::P64;
           P64[Hp] = _s6vcv::P64;
           I64[Sp - 8] = block_c6A1I_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcA_info" {
     sat_s6vcA_info:
         const sat_s6vcA_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6vn0_srt+456;
 },
 _c6A1I() //  [R1]
         { []
         }
     {offset
       c6A1I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6A1S; else goto c6A1R;
       c6A1S: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6A1R: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6A1I_info" {
     block_c6A1I_info:
         const _c6A1I;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6A2u_srtd" {
     u6A2u_srtd:
         const S6vn0_srt+128;
         const 70;
         const 6597069766657;
         const 32;
 },
 sat_s6vcB_entry() //  [R1, R2]
         { []
         }
     {offset
       c6A1T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6A1X; else goto c6A1W;
       c6A1X: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A1W: // global
           _s6vcm::P64 = P64[R1 + 7];
           _s6vcp::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6vcA_info;
           P64[Hp] = _s6vcp::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6vcm::P64;
           R2 = Data.Semigroup.Internal.$fReadDual2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcB_info" {
     sat_s6vcB_info:
         const sat_s6vcB_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u6A2u_srtd;
 },
 section ""relreadonly" . u6A2v_srtd" {
     u6A2v_srtd:
         const S6vn0_srt+128;
         const 70;
         const 6597069766661;
         const 32;
 },
 sat_s6vcE_entry() //  [R1, R2]
         { []
         }
     {offset
       c6A21: // global
           _s6vct::P64 = R2;
           _s6vcE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6A22; else goto c6A23;
       c6A23: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6A25; else goto c6A24;
       c6A25: // global
           HpAlloc = 24;
           goto c6A22;
       c6A22: // global
           R2 = _s6vct::P64;
           R1 = _s6vcE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A24: // global
           _s6vcm::P64 = P64[_s6vcE::P64 + 7];
           _s6vcp::P64 = P64[_s6vcE::P64 + 15];
           I64[Hp - 16] = sat_s6vcB_info;
           P64[Hp - 8] = _s6vcm::P64;
           P64[Hp] = _s6vcp::P64;
           I64[Sp - 8] = block_c6A1Y_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcE_info" {
     sat_s6vcE_info:
         const sat_s6vcE_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u6A2v_srtd;
 },
 _c6A1Y() //  [R1]
         { []
         }
     {offset
       c6A1Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6A28; else goto c6A27;
       c6A28: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6A27: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6A1Y_info" {
     block_c6A1Y_info:
         const _c6A1Y;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6A2w_srtd" {
     u6A2w_srtd:
         const S6vn0_srt+128;
         const 71;
         const 6597069766661;
         const 96;
 },
 sat_s6vcH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6A29: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6A2a; else goto c6A2b;
       c6A2a: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6A2b: // global
           I64[Sp - 24] = block_c6A1c_info;
           _s6vcm::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6vcm::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6A2o; else goto c6A1d;
       u6A2o: // global
           call _c6A1c(R1) args: 0, res: 0, upd: 0;
       c6A1d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcH_info" {
     sat_s6vcH_info:
         const sat_s6vcH_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const u6A2w_srtd;
 },
 section ""relreadonly" . u6A2x_srtd" {
     u6A2x_srtd:
         const S6vn0_srt+128;
         const 71;
         const 6597069766661;
         const 96;
 },
 _c6A1c() //  [R1]
         { []
         }
     {offset
       c6A1c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6A2e; else goto c6A2d;
       c6A2e: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6A2d: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6A2g; else goto c6A2k;
       c6A2g: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6A2k: // global
           I64[Hp - 16] = sat_s6vcE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6A2h_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadDual_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6A1c_info" {
     block_c6A1c_info:
         const _c6A1c;
         const 2;
         const 18446744069414584350;
         const u6A2x_srtd;
 },
 _c6A2h() //  [R1]
         { []
         }
     {offset
       c6A2h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6A2n; else goto c6A2m;
       c6A2n: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6A2m: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6A2h_info" {
     block_c6A2h_info:
         const _c6A2h;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6A2y_srtd" {
     u6A2y_srtd:
         const S6vn0_srt+128;
         const 72;
         const 7696581394437;
         const 224;
 },
 Data.Semigroup.Internal.$fReadDual1_entry() //  [R2]
         { []
         }
     {offset
       c6A2p: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6A2t; else goto c6A2s;
       c6A2t: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A2s: // global
           I64[Hp - 48] = lvl12_s6vcl_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6vcm_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6vcH_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual1_info" {
     Data.Semigroup.Internal.$fReadDual1_info:
         const Data.Semigroup.Internal.$fReadDual1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u6A2y_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.79448473 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadDual_$creadsPrec_info;
         const 0;
 },
 ds_s6vcJ_entry() //  [R1]
         { []
         }
     {offset
       c6A3A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A3B; else goto c6A3C;
       c6A3B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A3C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6vcJ_info" {
     ds_s6vcJ_info:
         const ds_s6vcJ_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+696;
 },
 sat_s6vcL_entry() //  [R1]
         { []
         }
     {offset
       c6A3M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A3N; else goto c6A3O;
       c6A3N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A3O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcL_info" {
     sat_s6vcL_info:
         const sat_s6vcL_entry;
         const 2;
         const 18;
 },
 sat_s6vcM_entry() //  [R1, R2]
         { []
         }
     {offset
       c6A3P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6A3T; else goto c6A3S;
       c6A3T: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A3S: // global
           _s6vcJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6vcL_info;
           P64[Hp - 8] = _s6vcJ::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcM_info" {
     sat_s6vcM_info:
         const sat_s6vcM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadDual_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6A3U: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6A3Y; else goto c6A3X;
       c6A3Y: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A3X: // global
           I64[Hp - 32] = ds_s6vcJ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6vcM_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadDual_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadDual_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.804165951 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadDual_$creadListPrec_info;
         const 0;
 },
 sat_s6vcO_entry() //  [R1]
         { []
         }
     {offset
       c6A4o: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcO_info" {
     sat_s6vcO_info:
         const sat_s6vcO_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+696;
 },
 Data.Semigroup.Internal.$fReadDual_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6A4r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6A4v; else goto c6A4u;
       c6A4v: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A4u: // global
           I64[Hp - 16] = sat_s6vcO_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadDual_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadDual_$creadListPrec_entry;
         const 0;
         const 45036000568672270;
         const 4294967301;
         const S6vn0_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.810707523 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_$creadList_closure" {
     Data.Semigroup.Internal.$fReadDual_$creadList_closure:
         const Data.Semigroup.Internal.$fReadDual_$creadList_info;
         const 0;
 },
 sat_s6vcQ_entry() //  [R1]
         { []
         }
     {offset
       c6A4P: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vcQ_info" {
     sat_s6vcQ_info:
         const sat_s6vcQ_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+696;
 },
 sat_s6vcR_entry() //  [R1]
         { []
         }
     {offset
       c6A4S: // global
           _s6vcR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6A4T; else goto c6A4U;
       c6A4U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6A4W; else goto c6A4V;
       c6A4W: // global
           HpAlloc = 24;
           goto c6A4T;
       c6A4T: // global
           R1 = _s6vcR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A4V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6vcR::P64;
           _s6vcP::P64 = P64[_s6vcR::P64 + 16];
           I64[Hp - 16] = sat_s6vcQ_info;
           P64[Hp] = _s6vcP::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcR_info" {
     sat_s6vcR_info:
         const sat_s6vcR_entry;
         const 1;
         const 9007203549708304;
         const S6vn0_srt+528;
 },
 Data.Semigroup.Internal.$fReadDual_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6A4X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6A51; else goto c6A50;
       c6A51: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A50: // global
           I64[Hp - 16] = sat_s6vcR_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_$creadList_info" {
     Data.Semigroup.Internal.$fReadDual_$creadList_info:
         const Data.Semigroup.Internal.$fReadDual_$creadList_entry;
         const 0;
         const 81064797587636238;
         const 4294967301;
         const S6vn0_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.819734826 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_closure" {
     Data.Semigroup.Internal.$fReadDual_closure:
         const Data.Semigroup.Internal.$fReadDual_info;
         const 0;
 },
 sat_s6vcW_entry() //  [R1]
         { []
         }
     {offset
       c6A5l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A5m; else goto c6A5n;
       c6A5m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A5n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcW_info" {
     sat_s6vcW_info:
         const sat_s6vcW_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+712;
 },
 sat_s6vcV_entry() //  [R1]
         { []
         }
     {offset
       c6A5s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A5t; else goto c6A5u;
       c6A5t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A5u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcV_info" {
     sat_s6vcV_info:
         const sat_s6vcV_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+696;
 },
 sat_s6vcU_entry() //  [R1]
         { []
         }
     {offset
       c6A5z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A5A; else goto c6A5B;
       c6A5A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A5B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcU_info" {
     sat_s6vcU_info:
         const sat_s6vcU_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+720;
 },
 sat_s6vcT_entry() //  [R1]
         { []
         }
     {offset
       c6A5G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A5H; else goto c6A5I;
       c6A5H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A5I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcT_info" {
     sat_s6vcT_info:
         const sat_s6vcT_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+704;
 },
 Data.Semigroup.Internal.$fReadDual_entry() //  [R2]
         { []
         }
     {offset
       c6A5K: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6A5O; else goto c6A5N;
       c6A5O: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A5N: // global
           I64[Hp - 128] = sat_s6vcW_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6vcV_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6vcU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6vcT_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_info" {
     Data.Semigroup.Internal.$fReadDual_info:
         const Data.Semigroup.Internal.$fReadDual_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6vn0_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.832253587 UTC

[section ""data" . Data.Semigroup.Internal.$fEqDual_closure" {
     Data.Semigroup.Internal.$fEqDual_closure:
         const Data.Semigroup.Internal.$fEqDual_info;
 },
 sat_s6vcZ_entry() //  [R1]
         { []
         }
     {offset
       c6A6m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A6n; else goto c6A6o;
       c6A6n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A6o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcZ_info" {
     sat_s6vcZ_info:
         const sat_s6vcZ_entry;
         const 1;
         const 16;
 },
 sat_s6vcY_entry() //  [R1]
         { []
         }
     {offset
       c6A6t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A6u; else goto c6A6v;
       c6A6u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A6v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vcY_info" {
     sat_s6vcY_info:
         const sat_s6vcY_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqDual_entry() //  [R2]
         { []
         }
     {offset
       c6A6x: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6A6B; else goto c6A6A;
       c6A6B: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A6A: // global
           I64[Hp - 64] = sat_s6vcZ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6vcY_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqDual_info" {
     Data.Semigroup.Internal.$fEqDual_info:
         const Data.Semigroup.Internal.$fEqDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.839783872 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdDual_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdDual_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdDual_$cp1Ord_info;
 },
 sat_s6vd1_entry() //  [R1]
         { []
         }
     {offset
       c6A6Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A70; else goto c6A71;
       c6A70: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A71: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd1_info" {
     sat_s6vd1_info:
         const sat_s6vd1_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdDual_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6A72: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6A76; else goto c6A75;
       c6A76: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdDual_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A75: // global
           I64[Hp - 16] = sat_s6vd1_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqDual_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdDual_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdDual_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdDual_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.848028909 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdDual_closure" {
     Data.Semigroup.Internal.$fOrdDual_closure:
         const Data.Semigroup.Internal.$fOrdDual_info;
 },
 sat_s6vda_entry() //  [R1]
         { []
         }
     {offset
       c6A7n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A7o; else goto c6A7p;
       c6A7o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A7p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vda_info" {
     sat_s6vda_info:
         const sat_s6vda_entry;
         const 1;
         const 16;
 },
 sat_s6vd9_entry() //  [R1]
         { []
         }
     {offset
       c6A7u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A7v; else goto c6A7w;
       c6A7v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A7w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd9_info" {
     sat_s6vd9_info:
         const sat_s6vd9_entry;
         const 1;
         const 16;
 },
 sat_s6vd8_entry() //  [R1]
         { []
         }
     {offset
       c6A7B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A7C; else goto c6A7D;
       c6A7C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A7D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd8_info" {
     sat_s6vd8_info:
         const sat_s6vd8_entry;
         const 1;
         const 16;
 },
 sat_s6vd7_entry() //  [R1]
         { []
         }
     {offset
       c6A7I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A7J; else goto c6A7K;
       c6A7J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A7K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd7_info" {
     sat_s6vd7_info:
         const sat_s6vd7_entry;
         const 1;
         const 16;
 },
 sat_s6vd6_entry() //  [R1]
         { []
         }
     {offset
       c6A7P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A7Q; else goto c6A7R;
       c6A7Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A7R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd6_info" {
     sat_s6vd6_info:
         const sat_s6vd6_entry;
         const 1;
         const 16;
 },
 sat_s6vd5_entry() //  [R1]
         { []
         }
     {offset
       c6A7W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A7X; else goto c6A7Y;
       c6A7X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A7Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd5_info" {
     sat_s6vd5_info:
         const sat_s6vd5_entry;
         const 1;
         const 16;
 },
 sat_s6vd4_entry() //  [R1]
         { []
         }
     {offset
       c6A83: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A84; else goto c6A85;
       c6A84: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A85: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd4_info" {
     sat_s6vd4_info:
         const sat_s6vd4_entry;
         const 1;
         const 16;
 },
 sat_s6vd3_entry() //  [R1]
         { []
         }
     {offset
       c6A8a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6A8b; else goto c6A8c;
       c6A8b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6A8c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdDual_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vd3_info" {
     sat_s6vd3_info:
         const sat_s6vd3_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdDual_entry() //  [R2]
         { []
         }
     {offset
       c6A8e: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6A8i; else goto c6A8h;
       c6A8i: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6A8h: // global
           I64[Hp - 256] = sat_s6vda_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6vd9_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6vd8_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6vd7_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6vd6_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6vd5_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6vd4_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6vd3_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdDual_info" {
     Data.Semigroup.Internal.$fOrdDual_info:
         const Data.Semigroup.Internal.$fOrdDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.865995238 UTC

[section ""data" . Data.Semigroup.Internal.getDual_closure" {
     Data.Semigroup.Internal.getDual_closure:
         const Data.Semigroup.Internal.getDual_info;
 },
 Data.Semigroup.Internal.getDual_entry() //  [R2]
         { []
         }
     {offset
       c6A96: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getDual_info" {
     Data.Semigroup.Internal.getDual_info:
         const Data.Semigroup.Internal.getDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.869473587 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadDual_$c>>=_closure" {
     Data.Semigroup.Internal.$fMonadDual_$c>>=_closure:
         const Data.Semigroup.Internal.$fMonadDual_$c>>=_info;
 },
 Data.Semigroup.Internal.$fMonadDual_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c6A9h: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadDual_$c>>=_info" {
     Data.Semigroup.Internal.$fMonadDual_$c>>=_info:
         const Data.Semigroup.Internal.$fMonadDual_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.873095605 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadDual_$c>>_closure" {
     Data.Semigroup.Internal.$fMonadDual_$c>>_closure:
         const Data.Semigroup.Internal.$fMonadDual_$c>>_info;
 },
 Data.Semigroup.Internal.$fMonadDual_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6A9s: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.$fApplicativeDual_$c*>_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadDual_$c>>_info" {
     Data.Semigroup.Internal.$fMonadDual_$c>>_info:
         const Data.Semigroup.Internal.$fMonadDual_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.87749336 UTC

[section ""data" . lvl_r6v16_closure" {
     lvl_r6v16_closure:
         const lvl_r6v16_info;
         const 0;
 },
 lvl_r6v16_entry() //  [R2]
         { []
         }
     {offset
       c6A9D: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r6v16_info" {
     lvl_r6v16_info:
         const lvl_r6v16_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.880471601 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadDual_closure" {
     Data.Semigroup.Internal.$fMonadDual_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.Internal.$fApplicativeDual_closure+1;
         const Data.Semigroup.Internal.$fMonadDual_$c>>=_closure+2;
         const Data.Semigroup.Internal.$fMonadDual_$c>>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const lvl_r6v16_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.882676006 UTC

[section ""data" . Data.Semigroup.Internal.appEndo1_closure" {
     Data.Semigroup.Internal.appEndo1_closure:
         const Data.Semigroup.Internal.appEndo1_info;
 },
 Data.Semigroup.Internal.appEndo1_entry() //  [R2]
         { []
         }
     {offset
       c6A9P: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.appEndo1_info" {
     Data.Semigroup.Internal.appEndo1_info:
         const Data.Semigroup.Internal.appEndo1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.886257098 UTC

[section ""data" . Data.Semigroup.Internal.appEndo_closure" {
     Data.Semigroup.Internal.appEndo_closure:
         const Data.Semigroup.Internal.appEndo_info;
 },
 Data.Semigroup.Internal.appEndo_entry() //  [R2]
         { []
         }
     {offset
       c6Aa0: // global
           R2 = R2;
           call Data.Semigroup.Internal.appEndo1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.appEndo_info" {
     Data.Semigroup.Internal.appEndo_info:
         const Data.Semigroup.Internal.appEndo_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.889622637 UTC

[section ""data" . Data.Semigroup.Internal.getAll1_closure" {
     Data.Semigroup.Internal.getAll1_closure:
         const Data.Semigroup.Internal.getAll1_info;
 },
 Data.Semigroup.Internal.getAll1_entry() //  [R2]
         { []
         }
     {offset
       c6Aab: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAll1_info" {
     Data.Semigroup.Internal.getAll1_info:
         const Data.Semigroup.Internal.getAll1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.893033777 UTC

[section ""data" . Data.Semigroup.Internal.getAll_closure" {
     Data.Semigroup.Internal.getAll_closure:
         const Data.Semigroup.Internal.getAll_info;
 },
 Data.Semigroup.Internal.getAll_entry() //  [R2]
         { []
         }
     {offset
       c6Aao: // global
           R2 = R2;
           call Data.Semigroup.Internal.getAll1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAll_info" {
     Data.Semigroup.Internal.getAll_info:
         const Data.Semigroup.Internal.getAll_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.89665988 UTC

[section ""data" . Data.Semigroup.Internal.getAny1_closure" {
     Data.Semigroup.Internal.getAny1_closure:
         const Data.Semigroup.Internal.getAny1_info;
 },
 Data.Semigroup.Internal.getAny1_entry() //  [R2]
         { []
         }
     {offset
       c6Aaz: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAny1_info" {
     Data.Semigroup.Internal.getAny1_info:
         const Data.Semigroup.Internal.getAny1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.900542086 UTC

[section ""data" . Data.Semigroup.Internal.getAny_closure" {
     Data.Semigroup.Internal.getAny_closure:
         const Data.Semigroup.Internal.getAny_info;
 },
 Data.Semigroup.Internal.getAny_entry() //  [R2]
         { []
         }
     {offset
       c6AaM: // global
           R2 = R2;
           call Data.Semigroup.Internal.getAny1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAny_info" {
     Data.Semigroup.Internal.getAny_info:
         const Data.Semigroup.Internal.getAny_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.903974446 UTC

[section ""data" . Data.Semigroup.Internal.getSum_closure" {
     Data.Semigroup.Internal.getSum_closure:
         const Data.Semigroup.Internal.getSum_info;
 },
 Data.Semigroup.Internal.getSum_entry() //  [R2]
         { []
         }
     {offset
       c6AaX: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getSum_info" {
     Data.Semigroup.Internal.getSum_info:
         const Data.Semigroup.Internal.getSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.912104213 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadSum_$c>>=_closure" {
     Data.Semigroup.Internal.$fMonadSum_$c>>=_closure:
         const Data.Semigroup.Internal.$fMonadSum_$c>>=_info;
 },
 Data.Semigroup.Internal.$fMonadSum_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Ab8: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadSum_$c>>=_info" {
     Data.Semigroup.Internal.$fMonadSum_$c>>=_info:
         const Data.Semigroup.Internal.$fMonadSum_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.915564594 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadSum_$c>>_closure" {
     Data.Semigroup.Internal.$fMonadSum_$c>>_closure:
         const Data.Semigroup.Internal.$fMonadSum_$c>>_info;
 },
 Data.Semigroup.Internal.$fMonadSum_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Abj: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.$fApplicativeSum_$c*>_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadSum_$c>>_info" {
     Data.Semigroup.Internal.$fMonadSum_$c>>_info:
         const Data.Semigroup.Internal.$fMonadSum_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.918990052 UTC

[section ""data" . lvl1_r6v17_closure" {
     lvl1_r6v17_closure:
         const lvl1_r6v17_info;
         const 0;
 },
 lvl1_r6v17_entry() //  [R2]
         { []
         }
     {offset
       c6Abu: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_r6v17_info" {
     lvl1_r6v17_info:
         const lvl1_r6v17_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.92257544 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadSum_closure" {
     Data.Semigroup.Internal.$fMonadSum_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.Internal.$fApplicativeSum_closure+1;
         const Data.Semigroup.Internal.$fMonadSum_$c>>=_closure+2;
         const Data.Semigroup.Internal.$fMonadSum_$c>>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const lvl1_r6v17_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.925263144 UTC

[section ""data" . Data.Semigroup.Internal.getProduct_closure" {
     Data.Semigroup.Internal.getProduct_closure:
         const Data.Semigroup.Internal.getProduct_info;
 },
 Data.Semigroup.Internal.getProduct_entry() //  [R2]
         { []
         }
     {offset
       c6AbG: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getProduct_info" {
     Data.Semigroup.Internal.getProduct_info:
         const Data.Semigroup.Internal.getProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.928707174 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadProduct_$c>>=_closure" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>=_closure:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>=_info;
 },
 Data.Semigroup.Internal.$fMonadProduct_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c6AbR: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadProduct_$c>>=_info" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>=_info:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.932275941 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadProduct_$c>>_closure" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>_closure:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>_info;
 },
 Data.Semigroup.Internal.$fMonadProduct_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Ac2: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.$fApplicativeProduct_$c*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadProduct_$c>>_info" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>_info:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.935653816 UTC

[section ""data" . lvl2_r6v18_closure" {
     lvl2_r6v18_closure:
         const lvl2_r6v18_info;
         const 0;
 },
 lvl2_r6v18_entry() //  [R2]
         { []
         }
     {offset
       c6Acd: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_r6v18_info" {
     lvl2_r6v18_info:
         const lvl2_r6v18_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.939184675 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadProduct_closure" {
     Data.Semigroup.Internal.$fMonadProduct_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.Internal.$fApplicativeProduct_closure+1;
         const Data.Semigroup.Internal.$fMonadProduct_$c>>=_closure+2;
         const Data.Semigroup.Internal.$fMonadProduct_$c>>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const lvl2_r6v18_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.941357632 UTC

[section ""data" . Data.Semigroup.Internal.getAlt_closure" {
     Data.Semigroup.Internal.getAlt_closure:
         const Data.Semigroup.Internal.getAlt_info;
 },
 Data.Semigroup.Internal.getAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Acp: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Alt2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAlt_info" {
     Data.Semigroup.Internal.getAlt_info:
         const Data.Semigroup.Internal.getAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.94451599 UTC

[section ""cstring" . lvl3_r6v19_bytes" {
     lvl3_r6v19_bytes:
         I8[] [115,116,105,109,101,115,73,100,101,109,112,111,116,101,110,116,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.947505077 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotent1_closure" {
     Data.Semigroup.Internal.stimesIdempotent1_closure:
         const Data.Semigroup.Internal.stimesIdempotent1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesIdempotent1_entry() //  [R1]
         { []
         }
     {offset
       c6AcF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6AcG; else goto c6AcH;
       c6AcG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AcH: // global
           (_c6AcA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6AcA::I64 == 0) goto c6AcC; else goto c6AcB;
       c6AcC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6AcB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6AcA::I64;
           I64[Sp - 24] = block_c6AcD_info;
           R2 = lvl3_r6v19_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotent1_info" {
     Data.Semigroup.Internal.stimesIdempotent1_info:
         const Data.Semigroup.Internal.stimesIdempotent1_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+736;
 },
 _c6AcD() //  [R1]
         { []
         }
     {offset
       c6AcD: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AcD_info" {
     block_c6AcD_info:
         const _c6AcD;
         const 0;
         const 4294967326;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.955065791 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotent_closure" {
     Data.Semigroup.Internal.stimesIdempotent_closure:
         const Data.Semigroup.Internal.stimesIdempotent_info;
         const 0;
 },
 sat_s6vdu_entry() //  [R1]
         { []
         }
     {offset
       c6Ad9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Ada; else goto c6Adb;
       c6Ada: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Adb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6Ad7_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vdu_info" {
     sat_s6vdu_info:
         const sat_s6vdu_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+744;
 },
 _c6Ad7() //  [R1]
         { []
         }
     {offset
       c6Ad7: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Ad7_info" {
     block_c6Ad7_info:
         const _c6Ad7;
         const 0;
         const 4294967326;
         const S6vn0_srt+744;
 },
 Data.Semigroup.Internal.stimesIdempotent_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Adf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Adh; else goto c6Adi;
       c6Adh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesIdempotent_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Adi: // global
           I64[Sp - 24] = block_c6AcZ_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotent_info" {
     Data.Semigroup.Internal.stimesIdempotent_info:
         const Data.Semigroup.Internal.stimesIdempotent_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6vn0_srt+744;
 },
 _c6AcZ() //  [R1]
         { []
         }
     {offset
       c6AcZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Adl; else goto c6Adk;
       c6Adl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Adk: // global
           I64[Hp - 16] = sat_s6vdu_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6Adg_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AcZ_info" {
     block_c6AcZ_info:
         const _c6AcZ;
         const 2;
         const 21474836510;
         const S6vn0_srt+744;
 },
 _c6Adg() //  [R1]
         { []
         }
     {offset
       c6Adg: // global
           _s6vdp::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c6Adp_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s6vdp::P64;
           Sp = Sp - 8;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Adg_info" {
     block_c6Adg_info:
         const _c6Adg;
         const 3;
         const 4294967326;
         const S6vn0_srt+760;
 },
 _c6Adp() //  [R1]
         { []
         }
     {offset
       c6Adp: // global
           if (R1 & 7 == 1) goto c6Adw; else goto c6AdA;
       c6Adw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6AdA: // global
           R1 = Data.Semigroup.Internal.stimesIdempotent1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Adp_info" {
     block_c6Adp_info:
         const _c6Adp;
         const 1;
         const 4294967326;
         const S6vn0_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.966713018 UTC

[section ""cstring" . lvl4_r6v1a_bytes" {
     lvl4_r6v1a_bytes:
         I8[] [115,116,105,109,101,115,73,100,101,109,112,111,116,101,110,116,77,111,110,111,105,100,58,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.969405365 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotentMonoid1_closure" {
     Data.Semigroup.Internal.stimesIdempotentMonoid1_closure:
         const Data.Semigroup.Internal.stimesIdempotentMonoid1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesIdempotentMonoid1_entry() //  [R1]
         { []
         }
     {offset
       c6Ae9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Aea; else goto c6Aeb;
       c6Aea: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Aeb: // global
           (_c6Ae4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Ae4::I64 == 0) goto c6Ae6; else goto c6Ae5;
       c6Ae6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Ae5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Ae4::I64;
           I64[Sp - 24] = block_c6Ae7_info;
           R2 = lvl4_r6v1a_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotentMonoid1_info" {
     Data.Semigroup.Internal.stimesIdempotentMonoid1_info:
         const Data.Semigroup.Internal.stimesIdempotentMonoid1_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+736;
 },
 _c6Ae7() //  [R1]
         { []
         }
     {offset
       c6Ae7: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Ae7_info" {
     block_c6Ae7_info:
         const _c6Ae7;
         const 0;
         const 4294967326;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.977227256 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotentMonoid_closure" {
     Data.Semigroup.Internal.stimesIdempotentMonoid_closure:
         const Data.Semigroup.Internal.stimesIdempotentMonoid_info;
         const 0;
 },
 sat_s6vdE_entry() //  [R1]
         { []
         }
     {offset
       c6AeD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AeE; else goto c6AeF;
       c6AeE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AeF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6AeB_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vdE_info" {
     sat_s6vdE_info:
         const sat_s6vdE_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+744;
 },
 _c6AeB() //  [R1]
         { []
         }
     {offset
       c6AeB: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AeB_info" {
     block_c6AeB_info:
         const _c6AeB;
         const 0;
         const 4294967326;
         const S6vn0_srt+744;
 },
 Data.Semigroup.Internal.stimesIdempotentMonoid_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       c6AeJ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c6AeL; else goto c6AeM;
       c6AeL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesIdempotentMonoid_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6AeM: // global
           I64[Sp - 32] = block_c6Aet_info;
           R2 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotentMonoid_info" {
     Data.Semigroup.Internal.stimesIdempotentMonoid_info:
         const Data.Semigroup.Internal.stimesIdempotentMonoid_entry;
         const 0;
         const 107374182414;
         const 17179869208;
         const S6vn0_srt+744;
 },
 _c6Aet() //  [R1]
         { []
         }
     {offset
       c6Aet: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6AeP; else goto c6AeO;
       c6AeP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AeO: // global
           I64[Hp - 16] = sat_s6vdE_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6AeK_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Aet_info" {
     block_c6Aet_info:
         const _c6Aet;
         const 3;
         const 73014444062;
         const S6vn0_srt+744;
 },
 _c6AeK() //  [R1]
         { []
         }
     {offset
       c6AeK: // global
           _c6Aex::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c6AeT_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp] = _c6Aex::P64;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AeK_info" {
     block_c6AeK_info:
         const _c6AeK;
         const 4;
         const 4294967326;
         const S6vn0_srt+776;
 },
 _c6AeT() //  [R1]
         { []
         }
     {offset
       c6AeT: // global
           _c6Af9::P64 = R1 & 7;
           if (_c6Af9::P64 < 3) goto u6Afa; else goto c6Af8;
       u6Afa: // global
           if (_c6Af9::P64 < 2) goto c6Af0; else goto c6Af4;
       c6Af0: // global
           R1 = Data.Semigroup.Internal.stimesIdempotentMonoid1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Af4: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6Af8: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AeT_info" {
     block_c6AeT_info:
         const _c6AeT;
         const 131;
         const 4294967326;
         const S6vn0_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.990733474 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAny_go_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_go_closure:
         const Data.Semigroup.Internal.$fSemigroupAny_go_info;
 },
 Data.Semigroup.Internal.$fSemigroupAny_go_entry() //  [R2, R3]
         { []
         }
     {offset
       c6AfK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6AfL; else goto u6Ag6;
       c6AfL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAny_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u6Ag6: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c6AfA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAny_go_info" {
     Data.Semigroup.Internal.$fSemigroupAny_go_info:
         const Data.Semigroup.Internal.$fSemigroupAny_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6AfA() //  []
         { []
         }
     {offset
       c6AfA: // global
           I64[Sp - 8] = block_c6AfD_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Ag8; else goto c6AfE;
       u6Ag8: // global
           call _c6AfD(R1) args: 0, res: 0, upd: 0;
       c6AfE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6AfD() //  [R1]
         { []
         }
     {offset
       c6AfD: // global
           _s6vdG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6AfH; else goto c6AfI;
       c6AfH: // global
           R1 = _s6vdG::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6AfI: // global
           I64[Sp] = block_c6AfS_info;
           _s6vdJ::P64 = P64[R1 + 6];
           _s6vdK::P64 = P64[R1 + 14];
           R1 = _s6vdG::P64;
           P64[Sp + 8] = _s6vdK::P64;
           P64[Sp + 16] = _s6vdJ::P64;
           if (R1 & 7 != 0) goto u6Ag9; else goto c6AfU;
       u6Ag9: // global
           call _c6AfS(R1) args: 0, res: 0, upd: 0;
       c6AfU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AfD_info" {
     block_c6AfD_info:
         const _c6AfD;
         const 130;
         const 30;
 },
 _c6AfS() //  [R1]
         { []
         }
     {offset
       c6AfS: // global
           if (R1 & 7 == 1) goto c6Ag0; else goto c6Ag4;
       c6Ag0: // global
           _s6vdH::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6vdH::P64;
           Sp = Sp + 8;
           call _c6AfA() args: 0, res: 0, upd: 0;
       c6Ag4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AfS_info" {
     block_c6AfS_info:
         const _c6AfS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:45.999888183 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupAny_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupAny_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6AgG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6AgH; else goto c6AgI;
       c6AgH: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6AgI: // global
           I64[Sp - 8] = block_c6AgD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6AgM; else goto c6AgE;
       u6AgM: // global
           call _c6AgD(R1) args: 0, res: 0, upd: 0;
       c6AgE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAny_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupAny_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupAny_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6AgD() //  [R1]
         { []
         }
     {offset
       c6AgD: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.Internal.$fSemigroupAny_go_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AgD_info" {
     block_c6AgD_info:
         const _c6AgD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.005922117 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidAny_go_closure" {
     Data.Semigroup.Internal.$fMonoidAny_go_closure:
         const Data.Semigroup.Internal.$fMonoidAny_go_info;
 },
 Data.Semigroup.Internal.$fMonoidAny_go_entry() //  [R2]
         { []
         }
     {offset
       c6Ah7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Ah8; else goto u6Aht;
       c6Ah8: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAny_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u6Aht: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c6AgX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAny_go_info" {
     Data.Semigroup.Internal.$fMonoidAny_go_info:
         const Data.Semigroup.Internal.$fMonoidAny_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6AgX() //  []
         { []
         }
     {offset
       c6AgX: // global
           _s6vdQ::P64 = P64[Sp];
           I64[Sp] = block_c6Ah0_info;
           R1 = _s6vdQ::P64;
           if (R1 & 7 != 0) goto u6Ahv; else goto c6Ah1;
       u6Ahv: // global
           call _c6Ah0(R1) args: 0, res: 0, upd: 0;
       c6Ah1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Ah0() //  [R1]
         { []
         }
     {offset
       c6Ah0: // global
           if (R1 & 7 == 1) goto c6Ah4; else goto c6Ah5;
       c6Ah4: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Ah5: // global
           I64[Sp - 8] = block_c6Ahf_info;
           _s6vdT::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s6vdT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Ahw; else goto c6Ahh;
       u6Ahw: // global
           call _c6Ahf(R1) args: 0, res: 0, upd: 0;
       c6Ahh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Ah0_info" {
     block_c6Ah0_info:
         const _c6Ah0;
         const 0;
         const 30;
 },
 _c6Ahf() //  [R1]
         { []
         }
     {offset
       c6Ahf: // global
           if (R1 & 7 == 1) goto c6Ahn; else goto c6Ahr;
       c6Ahn: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6AgX() args: 0, res: 0, upd: 0;
       c6Ahr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Ahf_info" {
     block_c6Ahf_info:
         const _c6Ahf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.014376332 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAny_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_closure:
         const GHC.Base.C:Semigroup_con_info;
         const GHC.Classes.||_closure+2;
         const Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure+1;
         const Data.Semigroup.Internal.$fSemigroupAny_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidAny_closure" {
     Data.Semigroup.Internal.$fMonoidAny_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Semigroup.Internal.$fSemigroupAny_closure+1;
         const GHC.Types.False_closure+1;
         const GHC.Classes.||_closure+2;
         const Data.Semigroup.Internal.$fMonoidAny_go_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupAny_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupAny_$cstimes_info;
         const 0;
 },
 Data.Semigroup.Internal.$fSemigroupAny_$cstimes_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       c6AhZ: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Semigroup.Internal.$fMonoidAny_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAny_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupAny_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupAny_$cstimes_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S6vn0_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.021095137 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAll_go_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_go_closure:
         const Data.Semigroup.Internal.$fSemigroupAll_go_info;
 },
 Data.Semigroup.Internal.$fSemigroupAll_go_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Aij: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Aik; else goto u6AiF;
       c6Aik: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAll_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u6AiF: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c6Ai9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAll_go_info" {
     Data.Semigroup.Internal.$fSemigroupAll_go_info:
         const Data.Semigroup.Internal.$fSemigroupAll_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Ai9() //  []
         { []
         }
     {offset
       c6Ai9: // global
           I64[Sp - 8] = block_c6Aic_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6AiH; else goto c6Aid;
       u6AiH: // global
           call _c6Aic(R1) args: 0, res: 0, upd: 0;
       c6Aid: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Aic() //  [R1]
         { []
         }
     {offset
       c6Aic: // global
           _s6vdW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Aig; else goto c6Aih;
       c6Aig: // global
           R1 = _s6vdW::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6Aih: // global
           I64[Sp] = block_c6Air_info;
           _s6vdZ::P64 = P64[R1 + 6];
           _s6ve0::P64 = P64[R1 + 14];
           R1 = _s6vdW::P64;
           P64[Sp + 8] = _s6ve0::P64;
           P64[Sp + 16] = _s6vdZ::P64;
           if (R1 & 7 != 0) goto u6AiI; else goto c6Ait;
       u6AiI: // global
           call _c6Air(R1) args: 0, res: 0, upd: 0;
       c6Ait: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Aic_info" {
     block_c6Aic_info:
         const _c6Aic;
         const 130;
         const 30;
 },
 _c6Air() //  [R1]
         { []
         }
     {offset
       c6Air: // global
           if (R1 & 7 == 1) goto c6Aiz; else goto c6AiD;
       c6Aiz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6AiD: // global
           _s6vdX::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6vdX::P64;
           Sp = Sp + 8;
           call _c6Ai9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Air_info" {
     block_c6Air_info:
         const _c6Air;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.029663754 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupAll_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupAll_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6Ajf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Ajg; else goto c6Ajh;
       c6Ajg: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Ajh: // global
           I64[Sp - 8] = block_c6Ajc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Ajl; else goto c6Ajd;
       u6Ajl: // global
           call _c6Ajc(R1) args: 0, res: 0, upd: 0;
       c6Ajd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAll_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupAll_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupAll_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Ajc() //  [R1]
         { []
         }
     {offset
       c6Ajc: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.Internal.$fSemigroupAll_go_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Ajc_info" {
     block_c6Ajc_info:
         const _c6Ajc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.036001529 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidAll_go_closure" {
     Data.Semigroup.Internal.$fMonoidAll_go_closure:
         const Data.Semigroup.Internal.$fMonoidAll_go_info;
 },
 Data.Semigroup.Internal.$fMonoidAll_go_entry() //  [R2]
         { []
         }
     {offset
       c6AjG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AjH; else goto u6Ak2;
       c6AjH: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAll_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u6Ak2: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c6Ajw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAll_go_info" {
     Data.Semigroup.Internal.$fMonoidAll_go_info:
         const Data.Semigroup.Internal.$fMonoidAll_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Ajw() //  []
         { []
         }
     {offset
       c6Ajw: // global
           _s6ve6::P64 = P64[Sp];
           I64[Sp] = block_c6Ajz_info;
           R1 = _s6ve6::P64;
           if (R1 & 7 != 0) goto u6Ak4; else goto c6AjA;
       u6Ak4: // global
           call _c6Ajz(R1) args: 0, res: 0, upd: 0;
       c6AjA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Ajz() //  [R1]
         { []
         }
     {offset
       c6Ajz: // global
           if (R1 & 7 == 1) goto c6AjD; else goto c6AjE;
       c6AjD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6AjE: // global
           I64[Sp - 8] = block_c6AjO_info;
           _s6ve9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s6ve9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Ak5; else goto c6AjQ;
       u6Ak5: // global
           call _c6AjO(R1) args: 0, res: 0, upd: 0;
       c6AjQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Ajz_info" {
     block_c6Ajz_info:
         const _c6Ajz;
         const 0;
         const 30;
 },
 _c6AjO() //  [R1]
         { []
         }
     {offset
       c6AjO: // global
           if (R1 & 7 == 1) goto c6AjW; else goto c6Ak0;
       c6AjW: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Ak0: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6Ajw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6AjO_info" {
     block_c6AjO_info:
         const _c6AjO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.044862963 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAll_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_closure:
         const GHC.Base.C:Semigroup_con_info;
         const GHC.Classes.&&_closure+2;
         const Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure+1;
         const Data.Semigroup.Internal.$fSemigroupAll_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidAll_closure" {
     Data.Semigroup.Internal.$fMonoidAll_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Semigroup.Internal.$fSemigroupAll_closure+1;
         const GHC.Types.True_closure+2;
         const GHC.Classes.&&_closure+2;
         const Data.Semigroup.Internal.$fMonoidAll_go_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupAll_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupAll_$cstimes_info;
         const 0;
 },
 Data.Semigroup.Internal.$fSemigroupAll_$cstimes_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       c6Aky: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Semigroup.Internal.$fMonoidAll_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAll_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupAll_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupAll_$cstimes_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S6vn0_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.049729505 UTC

[section ""cstring" . lvl5_r6v1b_bytes" {
     lvl5_r6v1b_bytes:
         I8[] [115,116,105,109,101,115,77,111,110,111,105,100,58,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.052308141 UTC

[section ""data" . lvl6_r6v1c_closure" {
     lvl6_r6v1c_closure:
         const lvl6_r6v1c_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r6v1c_entry() //  [R1]
         { []
         }
     {offset
       c6AkQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6AkR; else goto c6AkS;
       c6AkR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AkS: // global
           (_c6AkL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6AkL::I64 == 0) goto c6AkN; else goto c6AkM;
       c6AkN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6AkM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6AkL::I64;
           I64[Sp - 24] = block_c6AkO_info;
           R2 = lvl5_r6v1b_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r6v1c_info" {
     lvl6_r6v1c_info:
         const lvl6_r6v1c_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+736;
 },
 _c6AkO() //  [R1]
         { []
         }
     {offset
       c6AkO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AkO_info" {
     block_c6AkO_info:
         const _c6AkO;
         const 0;
         const 4294967326;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.059345445 UTC

[section ""data" . sat_s6ved_closure" {
     sat_s6ved_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.061135774 UTC

[section ""data" . sat_s6vee_closure" {
     sat_s6vee_closure:
         const :_con_info;
         const sat_s6ved_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.063531788 UTC

[section ""data" . lvl7_r6v1d_closure" {
     lvl7_r6v1d_closure:
         const lvl7_r6v1d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r6v1d_entry() //  [R1]
         { []
         }
     {offset
       c6Ale: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Alf; else goto c6Alg;
       c6Alf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Alg: // global
           (_c6Alb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Alb::I64 == 0) goto c6Ald; else goto c6Alc;
       c6Ald: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Alc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Alb::I64;
           R3 = sat_s6vee_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r6v1d_info" {
     lvl7_r6v1d_info:
         const lvl7_r6v1d_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.079245678 UTC

[section ""data" . Data.Semigroup.Internal.stimesMonoid_closure" {
     Data.Semigroup.Internal.stimesMonoid_closure:
         const Data.Semigroup.Internal.stimesMonoid_info;
         const 0;
 },
 sat_s6vem_entry() //  [R1]
         { []
         }
     {offset
       c6AmP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AmQ; else goto c6AmR;
       c6AmQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AmR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6AmN_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vem_info" {
     sat_s6vem_info:
         const sat_s6vem_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+744;
 },
 _c6AmN() //  [R1]
         { []
         }
     {offset
       c6AmN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AmN_info" {
     block_c6AmN_info:
         const _c6AmN;
         const 0;
         const 4294967326;
         const S6vn0_srt+744;
 },
 $dNum_s6veo_entry() //  [R1]
         { []
         }
     {offset
       c6AmX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AmY; else goto c6AmZ;
       c6AmY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AmZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s6veo_info" {
     $dNum_s6veo_info:
         const $dNum_s6veo_entry;
         const 1;
         const 16;
 },
 lvl12_s6vep_entry() //  [R1]
         { []
         }
     {offset
       c6An2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6An3; else goto c6An4;
       c6An3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6An4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl7_r6v1d_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6vep_info" {
     lvl12_s6vep_info:
         const lvl12_s6vep_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+808;
 },
 lvl13_s6vev_entry() //  [R1]
         { []
         }
     {offset
       c6An7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6An8; else goto c6An9;
       c6An8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6An9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_s6vev_info" {
     lvl13_s6vev_info:
         const lvl13_s6vev_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+816;
 },
 sat_s6veM_entry() //  [R1]
         { []
         }
     {offset
       c6Anc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6And; else goto c6Ane;
       c6And: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Ane: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veM_info" {
     sat_s6veM_info:
         const sat_s6veM_entry;
         const 3;
         const 15;
 },
 sat_s6veL_entry() //  [R1]
         { []
         }
     {offset
       c6Anh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Ani; else goto c6Anj;
       c6Ani: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Anj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6ver::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6ver::P64;
           P64[Sp - 24] = _s6ver::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veL_info" {
     sat_s6veL_info:
         const sat_s6veL_entry;
         const 2;
         const 18;
 },
 sat_s6veI_entry() //  [R1]
         { []
         }
     {offset
       c6Anm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Ann; else goto c6Ano;
       c6Ann: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Ano: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veI_info" {
     sat_s6veI_info:
         const sat_s6veI_entry;
         const 3;
         const 15;
 },
 sat_s6veH_entry() //  [R1]
         { []
         }
     {offset
       c6Anr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Ans; else goto c6Ant;
       c6Ans: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Ant: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veH_info" {
     sat_s6veH_info:
         const sat_s6veH_entry;
         const 3;
         const 15;
 },
 sat_s6veG_entry() //  [R1]
         { []
         }
     {offset
       c6Anx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Any; else goto c6Anz;
       c6Any: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Anz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6veB::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6veB::P64;
           P64[Sp - 24] = _s6veB::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veG_info" {
     sat_s6veG_info:
         const sat_s6veG_entry;
         const 2;
         const 18;
 },
 sat_s6veK_entry() //  [R1]
         { []
         }
     {offset
       c6AnC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AnD; else goto c6AnE;
       c6AnD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AnE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veK_info" {
     sat_s6veK_info:
         const sat_s6veK_entry;
         const 3;
         const 15;
 },
 sat_s6veJ_entry() //  [R1]
         { []
         }
     {offset
       c6AnI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AnJ; else goto c6AnK;
       c6AnJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AnK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6veB::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6veB::P64;
           P64[Sp - 24] = _s6veB::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veJ_info" {
     sat_s6veJ_info:
         const sat_s6veJ_entry;
         const 2;
         const 18;
 },
 sat_s6veS_entry() //  [R1]
         { []
         }
     {offset
       c6AnN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AnO; else goto c6AnP;
       c6AnO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AnP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veS_info" {
     sat_s6veS_info:
         const sat_s6veS_entry;
         const 3;
         const 15;
 },
 sat_s6veR_entry() //  [R1]
         { []
         }
     {offset
       c6AnT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AnU; else goto c6AnV;
       c6AnU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AnV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6veO::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6veO::P64;
           P64[Sp - 24] = _s6veO::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6veR_info" {
     sat_s6veR_info:
         const sat_s6veR_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.Internal.stimesMonoid_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6AnW: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c6AnX; else goto c6AnY;
       c6AnX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesMonoid_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6AnY: // global
           I64[Sp - 40] = block_c6Als_info;
           _s6vef::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s6vef::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesMonoid_info" {
     Data.Semigroup.Internal.stimesMonoid_info:
         const Data.Semigroup.Internal.stimesMonoid_entry;
         const 0;
         const 34089155428366;
         const 17179869208;
         const S6vn0_srt+744;
 },
 _c6Als() //  [R1]
         { []
         }
     {offset
       c6Als: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Ao1; else goto c6Ao0;
       c6Ao1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Ao0: // global
           I64[Hp - 16] = sat_s6vem_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c6Aly_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Als_info" {
     block_c6Als_info:
         const _c6Als;
         const 4;
         const 25293062406174;
         const S6vn0_srt+744;
 },
 _c6Aly() //  [R1]
         { []
         }
     {offset
       c6Aly: // global
           I64[Sp] = block_c6AlC_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Aly_info" {
     block_c6Aly_info:
         const _c6Aly;
         const 6;
         const 98784247838;
         const S6vn0_srt+808;
 },
 _c6AlC() //  [R1]
         { []
         }
     {offset
       c6AlC: // global
           _c6AoW::P64 = R1 & 7;
           if (_c6AoW::P64 < 3) goto u6Ap1; else goto c6Aoa;
       u6Ap1: // global
           if (_c6AoW::P64 < 2) goto c6Ao6; else goto c6Ao9;
       c6Ao6: // global
           R1 = lvl6_r6v1c_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Ao9: // global
           R2 = P64[Sp + 32];
           Sp = Sp + 56;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6Aoa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Aod; else goto c6Aoc;
       c6Aod: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Aoc: // global
           I64[Hp - 40] = $dNum_s6veo_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = lvl12_s6vep_info;
           _c6AlI::P64 = Hp - 40;
           P64[Hp] = _c6AlI::P64;
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 16] = P64[Sp + 48];
           P64[Sp + 40] = Hp - 16;
           P64[Sp + 48] = _c6AlI::P64;
           call _c6AmB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6AlC_info" {
     block_c6AlC_info:
         const _c6AlC;
         const 134;
         const 98784247838;
         const S6vn0_srt+808;
 },
 _c6AmB() //  []
         { []
         }
     {offset
       c6AmB: // global
           I64[Sp - 8] = block_c6AmD_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6AmD() //  [R1]
         { []
         }
     {offset
       c6AmD: // global
           _s6veO::P64 = P64[Sp + 24];
           _s6veP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6AoR; else goto c6AoS;
       c6AoR: // global
           I64[Sp + 8] = block_c6AlR_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = _s6veP::P64;
           P64[Sp + 24] = _s6veO::P64;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c6AoS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6AoV; else goto c6AoU;
       c6AoV: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AoU: // global
           I64[Hp - 64] = sat_s6veS_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = _s6veP::P64;
           I64[Hp - 24] = sat_s6veR_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6veO::P64;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 8] = Hp - 64;
           Sp = Sp + 8;
           call _c6AmB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6AmD_info" {
     block_c6AmD_info:
         const _c6AmD;
         const 7;
         const 12884901918;
         const S6vn0_srt+816;
 },
 _c6AlR() //  [R1]
         { []
         }
     {offset
       c6AlR: // global
           I64[Sp] = block_c6AlV_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AlR_info" {
     block_c6AlR_info:
         const _c6AlR;
         const 6;
         const 12884901918;
         const S6vn0_srt+816;
 },
 _c6AlV() //  [R1]
         { []
         }
     {offset
       c6AlV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Aoi; else goto c6Aoh;
       c6Aoi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Aoh: // global
           I64[Hp - 16] = lvl13_s6vev_info;
           P64[Hp] = P64[Sp + 48];
           I64[Sp - 8] = block_c6Am1_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 8];
           _c6AlZ::P64 = Hp - 16;
           P64[Sp - 16] = _c6AlZ::P64;
           P64[Sp] = R1;
           P64[Sp + 48] = _c6AlZ::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AlV_info" {
     block_c6AlV_info:
         const _c6AlV;
         const 6;
         const 12884901918;
         const S6vn0_srt+816;
 },
 _c6Am1() //  [R1]
         { []
         }
     {offset
       c6Am1: // global
           _s6ver::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Aok; else goto c6AoM;
       c6Aok: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Aon; else goto c6Aom;
       c6Aon: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Aom: // global
           I64[Hp - 64] = sat_s6veM_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = sat_s6veL_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6ver::P64;
           P64[Sp] = _s6ver::P64;
           P64[Sp + 16] = Hp - 64;
           P64[Sp + 24] = Hp - 24;
           call _c6Ame() args: 0, res: 0, upd: 0;
       c6AoM: // global
           R1 = _s6ver::P64;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Am1_info" {
     block_c6Am1_info:
         const _c6Am1;
         const 7;
         const 4294967326;
         const S6vn0_srt+824;
 },
 _c6Ame() //  []
         { []
         }
     {offset
       c6Ame: // global
           I64[Sp - 8] = block_c6Amg_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6Amg() //  [R1]
         { []
         }
     {offset
       c6Amg: // global
           _s6veC::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Aov; else goto c6AoF;
       c6Aov: // global
           I64[Sp] = block_c6Amk_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6veC::P64;
           P64[Sp - 8] = P64[Sp + 64];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c6AoF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6AoI; else goto c6AoH;
       c6AoI: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AoH: // global
           I64[Hp - 64] = sat_s6veK_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = _s6veC::P64;
           I64[Hp - 24] = sat_s6veJ_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6Ame() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Amg_info" {
     block_c6Amg_info:
         const _c6Amg;
         const 8;
         const 4294967326;
         const S6vn0_srt+824;
 },
 _c6Amk() //  [R1]
         { []
         }
     {offset
       c6Amk: // global
           _s6veg::P64 = P64[Sp + 48];
           _s6veB::P64 = P64[Sp + 32];
           _s6veD::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Aox; else goto c6AoE;
       c6Aox: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c6AoA; else goto c6Aoz;
       c6AoA: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Aoz: // global
           I64[Hp - 104] = sat_s6veI_info;
           P64[Hp - 88] = _s6veg::P64;
           P64[Hp - 80] = _s6veB::P64;
           P64[Hp - 72] = _s6veD::P64;
           I64[Hp - 64] = sat_s6veH_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_s6veG_info;
           P64[Hp - 8] = _s6veg::P64;
           P64[Hp] = _s6veB::P64;
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = Hp - 104;
           Sp = Sp + 8;
           call _c6Ame() args: 0, res: 0, upd: 0;
       c6AoE: // global
           R2 = _s6veg::P64;
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = _s6veB::P64;
           P64[Sp + 64] = _s6veD::P64;
           Sp = Sp + 48;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Amk_info" {
     block_c6Amk_info:
         const _c6Amk;
         const 8;
         const 4294967326;
         const S6vn0_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.127919685 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat_closure" {
     Data.Semigroup.Internal.$w$csconcat_closure:
         const Data.Semigroup.Internal.$w$csconcat_info;
 },
 go_s6veW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ArM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ArN; else goto c6ArO;
       c6ArN: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ArO: // global
           I64[Sp - 32] = block_c6ArF_info;
           _s6veW::P64 = R1;
           _s6veT::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6veT::P64;
           P64[Sp - 16] = _s6veW::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6ArY; else goto c6ArG;
       u6ArY: // global
           call _c6ArF(R1) args: 0, res: 0, upd: 0;
       c6ArG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6veW_info" {
     go_s6veW_info:
         const go_s6veW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6ArF() //  [R1]
         { []
         }
     {offset
       c6ArF: // global
           _s6veX::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6ArJ; else goto c6ArK;
       c6ArJ: // global
           R1 = _s6veX::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ArK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6ArW; else goto c6ArV;
       c6ArW: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ArV: // global
           _s6vf0::P64 = P64[R1 + 6];
           _s6vf1::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6vf0::P64;
           P64[Hp] = _s6vf1::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6veX::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.<|>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ArF_info" {
     block_c6ArF_info:
         const _c6ArF;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ArZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6As3; else goto c6As2;
       c6As3: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6As2: // global
           I64[Hp - 8] = go_s6veW_info;
           P64[Hp] = R2;
           _s6veU::P64 = R3;
           R3 = R4;
           R2 = _s6veU::P64;
           R1 = Hp - 6;
           call go_s6veW_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat_info" {
     Data.Semigroup.Internal.$w$csconcat_info:
         const Data.Semigroup.Internal.$w$csconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.136043636 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c6Asr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Ass; else goto c6Ast;
       c6Ass: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Ast: // global
           I64[Sp - 16] = block_c6Aso_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Asx; else goto c6Asp;
       u6Asx: // global
           call _c6Aso(R1) args: 0, res: 0, upd: 0;
       c6Asp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Aso() //  [R1]
         { []
         }
     {offset
       c6Aso: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Aso_info" {
     block_c6Aso_info:
         const _c6Aso;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.143785334 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_info;
 },
 z_s6vfa_entry() //  [R1]
         { []
         }
     {offset
       c6AsP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AsQ; else goto c6AsR;
       c6AsQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AsR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6vfa_info" {
     z_s6vfa_info:
         const z_s6vfa_entry;
         const 1;
         const 16;
 },
 go_s6vfb_entry() //  [R1, R2]
         { []
         }
     {offset
       c6At4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6At5; else goto c6At6;
       c6At5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6At6: // global
           I64[Sp - 32] = block_c6AsX_info;
           _s6vfb::P64 = R1;
           _s6vf8::P64 = P64[R1 + 7];
           _s6vfa::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6vf8::P64;
           P64[Sp - 16] = _s6vfa::P64;
           P64[Sp - 8] = _s6vfb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Atg; else goto c6AsY;
       u6Atg: // global
           call _c6AsX(R1) args: 0, res: 0, upd: 0;
       c6AsY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6vfb_info" {
     go_s6vfb_info:
         const go_s6vfb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6AsX() //  [R1]
         { []
         }
     {offset
       c6AsX: // global
           if (R1 & 7 == 1) goto c6At1; else goto c6At2;
       c6At1: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6At2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Ate; else goto c6Atd;
       c6Ate: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Atd: // global
           _s6vfe::P64 = P64[R1 + 6];
           _s6vff::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6vff::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6vfe::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.<|>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AsX_info" {
     block_c6AsX_info:
         const _c6AsX;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Ath: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Atl; else goto c6Atk;
       c6Atl: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Atk: // global
           I64[Hp - 40] = z_s6vfa_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6vfb_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_s6vfb_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.156836936 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAlt_closure" {
     Data.Semigroup.Internal.$fSemigroupAlt_closure:
         const Data.Semigroup.Internal.$fSemigroupAlt_info;
         const 0;
 },
 sat_s6vfk_entry() //  [R1, R2]
         { []
         }
     {offset
       c6AtQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_entry(R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vfk_info" {
     sat_s6vfk_info:
         const sat_s6vfk_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6vn0_srt+848;
 },
 sat_s6vfj_entry() //  [R1, R2]
         { []
         }
     {offset
       c6AtY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vfj_info" {
     sat_s6vfj_info:
         const sat_s6vfj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6vfi_entry() //  [R1]
         { []
         }
     {offset
       c6Au5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Au6; else goto c6Au7;
       c6Au6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Au7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vfi_info" {
     sat_s6vfi_info:
         const sat_s6vfi_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fSemigroupAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Au9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6Aud; else goto c6Auc;
       c6Aud: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Auc: // global
           I64[Hp - 80] = sat_s6vfk_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6vfj_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6vfi_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 79;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAlt_info" {
     Data.Semigroup.Internal.$fSemigroupAlt_info:
         const Data.Semigroup.Internal.$fSemigroupAlt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+848;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidAlt_closure" {
     Data.Semigroup.Internal.$fMonoidAlt_closure:
         const Data.Semigroup.Internal.$fMonoidAlt_info;
         const 0;
 },
 sat_s6vfp_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Aun: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vfp_info" {
     sat_s6vfp_info:
         const sat_s6vfp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6vfo_entry() //  [R1]
         { []
         }
     {offset
       c6Auu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Auv; else goto c6Auw;
       c6Auv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Auw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vfo_info" {
     sat_s6vfo_info:
         const sat_s6vfo_entry;
         const 1;
         const 16;
 },
 sat_s6vfn_entry() //  [R1]
         { []
         }
     {offset
       c6AuB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AuC; else goto c6AuD;
       c6AuC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AuD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vfn_info" {
     sat_s6vfn_info:
         const sat_s6vfn_entry;
         const 1;
         const 16;
 },
 sat_s6vfm_entry() //  [R1]
         { []
         }
     {offset
       c6AuI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AuJ; else goto c6AuK;
       c6AuJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AuK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupAlt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vfm_info" {
     sat_s6vfm_info:
         const sat_s6vfm_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+856;
 },
 Data.Semigroup.Internal.$fMonoidAlt_entry() //  [R2]
         { []
         }
     {offset
       c6AuM: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c6AuQ; else goto c6AuP;
       c6AuQ: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6AuP: // global
           I64[Hp - 120] = sat_s6vfp_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6vfo_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6vfn_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6vfm_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 119;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAlt_info" {
     Data.Semigroup.Internal.$fMonoidAlt_info:
         const Data.Semigroup.Internal.$fMonoidAlt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6vn0_srt+856;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_info;
         const 0;
 },
 sat_s6vfs_entry() //  [R1]
         { []
         }
     {offset
       c6AuZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Av0; else goto c6Av1;
       c6Av0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Av1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidAlt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vfs_info" {
     sat_s6vfs_info:
         const sat_s6vfs_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+864;
 },
 Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c6Av2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Av6; else goto c6Av5;
       c6Av6: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Av5: // global
           I64[Hp - 16] = sat_s6vfs_info;
           P64[Hp] = R2;
           _s6vfr::P64 = R3;
           R3 = Hp - 16;
           R2 = _s6vfr::P64;
           R1 = Data.Semigroup.Internal.stimesMonoid_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_entry;
         const 0;
         const 90194313230;
         const 8589934607;
         const S6vn0_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.180800646 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupEndo1_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo1_closure:
         const Data.Semigroup.Internal.$fSemigroupEndo1_info;
 },
 g_s6vfy_entry() //  [R1]
         { []
         }
     {offset
       c6Aw9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Awa; else goto c6Awb;
       c6Awa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Awb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupEndo1_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6vfy_info" {
     g_s6vfy_info:
         const g_s6vfy_entry;
         const 2;
         const 18;
 },
 sat_s6vfB_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Awi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Awm; else goto c6Awl;
       c6Awm: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Awl: // global
           _s6vft::P64 = P64[R1 + 7];
           _s6vfy::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6vfy::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s6vft::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vfB_info" {
     sat_s6vfB_info:
         const sat_s6vfB_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fSemigroupEndo1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Awr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Aws; else goto c6Awt;
       c6Aws: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupEndo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Awt: // global
           I64[Sp - 16] = block_c6AvZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Awz; else goto c6Aw0;
       u6Awz: // global
           call _c6AvZ(R1) args: 0, res: 0, upd: 0;
       c6Aw0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupEndo1_info" {
     Data.Semigroup.Internal.$fSemigroupEndo1_info:
         const Data.Semigroup.Internal.$fSemigroupEndo1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6AvZ() //  [R1]
         { []
         }
     {offset
       c6AvZ: // global
           _s6vft::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Awo; else goto c6Awp;
       c6Awo: // global
           R1 = _s6vft::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Awp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Awy; else goto c6Awx;
       c6Awy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Awx: // global
           _s6vfw::P64 = P64[R1 + 6];
           _s6vfx::P64 = P64[R1 + 14];
           I64[Hp - 48] = g_s6vfy_info;
           P64[Hp - 32] = _s6vfw::P64;
           P64[Hp - 24] = _s6vfx::P64;
           I64[Hp - 16] = sat_s6vfB_info;
           P64[Hp - 8] = _s6vft::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AvZ_info" {
     block_c6AvZ_info:
         const _c6AvZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.191705222 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6Ax1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Ax2; else goto c6Ax3;
       c6Ax2: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Ax3: // global
           I64[Sp - 8] = block_c6AwY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Ax7; else goto c6AwZ;
       u6Ax7: // global
           call _c6AwY(R1) args: 0, res: 0, upd: 0;
       c6AwZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6AwY() //  [R1]
         { []
         }
     {offset
       c6AwY: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.Internal.$fSemigroupEndo1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AwY_info" {
     block_c6AwY_info:
         const _c6AwY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.198005695 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidEndo1_closure" {
     Data.Semigroup.Internal.$fMonoidEndo1_closure:
         const Data.Semigroup.Internal.$fMonoidEndo1_info;
 },
 sat_s6vfL_entry() //  [R1]
         { []
         }
     {offset
       c6Axv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Axw; else goto c6Axx;
       c6Axw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Axx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidEndo1_entry(R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vfL_info" {
     sat_s6vfL_info:
         const sat_s6vfL_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.Internal.$fMonoidEndo1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6AxC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AxD; else goto c6AxE;
       c6AxD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidEndo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6AxE: // global
           I64[Sp - 16] = block_c6Axl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6AxK; else goto c6Axm;
       u6AxK: // global
           call _c6Axl(R1) args: 0, res: 0, upd: 0;
       c6Axm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidEndo1_info" {
     Data.Semigroup.Internal.$fMonoidEndo1_info:
         const Data.Semigroup.Internal.$fMonoidEndo1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Axl() //  [R1]
         { []
         }
     {offset
       c6Axl: // global
           _s6vfH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Axz; else goto c6AxA;
       c6Axz: // global
           R1 = _s6vfH::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6AxA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6AxJ; else goto c6AxI;
       c6AxJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AxI: // global
           _s6vfJ::P64 = P64[R1 + 6];
           _s6vfK::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s6vfL_info;
           P64[Hp - 8] = _s6vfH::P64;
           P64[Hp] = _s6vfK::P64;
           R2 = Hp - 24;
           R1 = _s6vfJ::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Axl_info" {
     block_c6Axl_info:
         const _c6Axl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.207052984 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupEndo_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo_closure:
         const GHC.Base.C:Semigroup_con_info;
         const GHC.Base.._closure+3;
         const Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure+1;
         const Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidEndo_closure" {
     Data.Semigroup.Internal.$fMonoidEndo_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Semigroup.Internal.$fSemigroupEndo_closure+1;
         const GHC.Base.id_closure+1;
         const GHC.Base.._closure+3;
         const Data.Semigroup.Internal.$fMonoidEndo1_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_info;
         const 0;
 },
 Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c6Ay4: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Semigroup.Internal.$fMonoidEndo_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesMonoid_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S6vn0_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.212705173 UTC

[section ""cstring" . lvl8_r6v1e_bytes" {
     lvl8_r6v1e_bytes:
         I8[] [115,116,105,109,101,115,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.21547005 UTC

[section ""data" . lvl9_r6v1f_closure" {
     lvl9_r6v1f_closure:
         const lvl9_r6v1f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r6v1f_entry() //  [R1]
         { []
         }
     {offset
       c6Aym: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Ayn; else goto c6Ayo;
       c6Ayn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Ayo: // global
           (_c6Ayh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Ayh::I64 == 0) goto c6Ayj; else goto c6Ayi;
       c6Ayj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Ayi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Ayh::I64;
           I64[Sp - 24] = block_c6Ayk_info;
           R2 = lvl8_r6v1e_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r6v1f_info" {
     lvl9_r6v1f_info:
         const lvl9_r6v1f_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+736;
 },
 _c6Ayk() //  [R1]
         { []
         }
     {offset
       c6Ayk: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Ayk_info" {
     block_c6Ayk_info:
         const _c6Ayk;
         const 0;
         const 4294967326;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.231610478 UTC

[section ""data" . Data.Semigroup.Internal.stimesDefault_closure" {
     Data.Semigroup.Internal.stimesDefault_closure:
         const Data.Semigroup.Internal.stimesDefault_info;
         const 0;
 },
 sat_s6vfV_entry() //  [R1]
         { []
         }
     {offset
       c6AA1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AA2; else goto c6AA3;
       c6AA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6AzZ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vfV_info" {
     sat_s6vfV_info:
         const sat_s6vfV_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+744;
 },
 _c6AzZ() //  [R1]
         { []
         }
     {offset
       c6AzZ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AzZ_info" {
     block_c6AzZ_info:
         const _c6AzZ;
         const 0;
         const 4294967326;
         const S6vn0_srt+744;
 },
 $dNum_s6vfX_entry() //  [R1]
         { []
         }
     {offset
       c6AA9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AAa; else goto c6AAb;
       c6AAa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s6vfX_info" {
     $dNum_s6vfX_info:
         const $dNum_s6vfX_entry;
         const 1;
         const 16;
 },
 lvl12_s6vfY_entry() //  [R1]
         { []
         }
     {offset
       c6AAe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AAf; else goto c6AAg;
       c6AAf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl7_r6v1d_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6vfY_info" {
     lvl12_s6vfY_info:
         const lvl12_s6vfY_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+808;
 },
 lvl13_s6vg4_entry() //  [R1]
         { []
         }
     {offset
       c6AAj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AAk; else goto c6AAl;
       c6AAk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_s6vg4_info" {
     lvl13_s6vg4_info:
         const lvl13_s6vg4_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+816;
 },
 sat_s6vgl_entry() //  [R1]
         { []
         }
     {offset
       c6AAo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AAp; else goto c6AAq;
       c6AAp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgl_info" {
     sat_s6vgl_info:
         const sat_s6vgl_entry;
         const 3;
         const 15;
 },
 sat_s6vgk_entry() //  [R1]
         { []
         }
     {offset
       c6AAt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AAu; else goto c6AAv;
       c6AAu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6vg0::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6vg0::P64;
           P64[Sp - 24] = _s6vg0::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgk_info" {
     sat_s6vgk_info:
         const sat_s6vgk_entry;
         const 2;
         const 18;
 },
 sat_s6vgh_entry() //  [R1]
         { []
         }
     {offset
       c6AAy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AAz; else goto c6AAA;
       c6AAz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgh_info" {
     sat_s6vgh_info:
         const sat_s6vgh_entry;
         const 3;
         const 15;
 },
 sat_s6vgg_entry() //  [R1]
         { []
         }
     {offset
       c6AAD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AAE; else goto c6AAF;
       c6AAE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgg_info" {
     sat_s6vgg_info:
         const sat_s6vgg_entry;
         const 3;
         const 15;
 },
 sat_s6vgf_entry() //  [R1]
         { []
         }
     {offset
       c6AAJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AAK; else goto c6AAL;
       c6AAK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6vga::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6vga::P64;
           P64[Sp - 24] = _s6vga::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgf_info" {
     sat_s6vgf_info:
         const sat_s6vgf_entry;
         const 2;
         const 18;
 },
 sat_s6vgj_entry() //  [R1]
         { []
         }
     {offset
       c6AAO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AAP; else goto c6AAQ;
       c6AAP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgj_info" {
     sat_s6vgj_info:
         const sat_s6vgj_entry;
         const 3;
         const 15;
 },
 sat_s6vgi_entry() //  [R1]
         { []
         }
     {offset
       c6AAU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AAV; else goto c6AAW;
       c6AAV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AAW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6vga::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6vga::P64;
           P64[Sp - 24] = _s6vga::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgi_info" {
     sat_s6vgi_info:
         const sat_s6vgi_entry;
         const 2;
         const 18;
 },
 sat_s6vgr_entry() //  [R1]
         { []
         }
     {offset
       c6AAZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AB0; else goto c6AB1;
       c6AB0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AB1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgr_info" {
     sat_s6vgr_info:
         const sat_s6vgr_entry;
         const 3;
         const 15;
 },
 sat_s6vgq_entry() //  [R1]
         { []
         }
     {offset
       c6AB5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AB6; else goto c6AB7;
       c6AB6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AB7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6vgn::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6vgn::P64;
           P64[Sp - 24] = _s6vgn::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgq_info" {
     sat_s6vgq_info:
         const sat_s6vgq_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.Internal.stimesDefault_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6AB8: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c6AB9; else goto c6ABa;
       c6AB9: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ABa: // global
           I64[Sp - 40] = block_c6AyG_info;
           _s6vfO::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s6vfO::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesDefault_info" {
     Data.Semigroup.Internal.stimesDefault_info:
         const Data.Semigroup.Internal.stimesDefault_entry;
         const 0;
         const 1696550736625678;
         const 17179869208;
         const S6vn0_srt+744;
 },
 _c6AyG() //  [R1]
         { []
         }
     {offset
       c6AyG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ABd; else goto c6ABc;
       c6ABd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ABc: // global
           I64[Hp - 16] = sat_s6vfV_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c6AyM_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AyG_info" {
     block_c6AyG_info:
         const _c6AyG;
         const 4;
         const 1133600783204382;
         const S6vn0_srt+744;
 },
 _c6AyM() //  [R1]
         { []
         }
     {offset
       c6AyM: // global
           I64[Sp] = block_c6AyQ_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AyM_info" {
     block_c6AyM_info:
         const _c6AyM;
         const 6;
         const 4428111282206;
         const S6vn0_srt+808;
 },
 _c6AyQ() //  [R1]
         { []
         }
     {offset
       c6AyQ: // global
           if (R1 & 7 == 1) goto c6ABg; else goto c6AC5;
       c6ABg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ABj; else goto c6ABi;
       c6ABj: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ABi: // global
           I64[Hp - 40] = $dNum_s6vfX_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = lvl12_s6vfY_info;
           _c6AyU::P64 = Hp - 40;
           P64[Hp] = _c6AyU::P64;
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 16] = P64[Sp + 48];
           P64[Sp + 40] = Hp - 16;
           P64[Sp + 48] = _c6AyU::P64;
           call _c6AzN() args: 0, res: 0, upd: 0;
       c6AC5: // global
           R1 = lvl9_r6v1f_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AyQ_info" {
     block_c6AyQ_info:
         const _c6AyQ;
         const 134;
         const 4428111282206;
         const S6vn0_srt+808;
 },
 _c6AzN() //  []
         { []
         }
     {offset
       c6AzN: // global
           I64[Sp - 8] = block_c6AzP_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6AzP() //  [R1]
         { []
         }
     {offset
       c6AzP: // global
           _s6vgn::P64 = P64[Sp + 24];
           _s6vgo::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6ABX; else goto c6ABY;
       c6ABX: // global
           I64[Sp + 8] = block_c6Az3_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = _s6vgo::P64;
           P64[Sp + 24] = _s6vgn::P64;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c6ABY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6AC1; else goto c6AC0;
       c6AC1: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AC0: // global
           I64[Hp - 64] = sat_s6vgr_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = _s6vgo::P64;
           I64[Hp - 24] = sat_s6vgq_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6vgn::P64;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 8] = Hp - 64;
           Sp = Sp + 8;
           call _c6AzN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6AzP_info" {
     block_c6AzP_info:
         const _c6AzP;
         const 7;
         const 12884901918;
         const S6vn0_srt+816;
 },
 _c6Az3() //  [R1]
         { []
         }
     {offset
       c6Az3: // global
           I64[Sp] = block_c6Az7_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Az3_info" {
     block_c6Az3_info:
         const _c6Az3;
         const 6;
         const 12884901918;
         const S6vn0_srt+816;
 },
 _c6Az7() //  [R1]
         { []
         }
     {offset
       c6Az7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ABo; else goto c6ABn;
       c6ABo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ABn: // global
           I64[Hp - 16] = lvl13_s6vg4_info;
           P64[Hp] = P64[Sp + 48];
           I64[Sp - 8] = block_c6Azd_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 8];
           _c6Azb::P64 = Hp - 16;
           P64[Sp - 16] = _c6Azb::P64;
           P64[Sp] = R1;
           P64[Sp + 48] = _c6Azb::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Az7_info" {
     block_c6Az7_info:
         const _c6Az7;
         const 6;
         const 12884901918;
         const S6vn0_srt+816;
 },
 _c6Azd() //  [R1]
         { []
         }
     {offset
       c6Azd: // global
           _s6vg0::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6ABq; else goto c6ABS;
       c6ABq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6ABt; else goto c6ABs;
       c6ABt: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ABs: // global
           I64[Hp - 64] = sat_s6vgl_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = sat_s6vgk_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6vg0::P64;
           P64[Sp] = _s6vg0::P64;
           P64[Sp + 16] = Hp - 64;
           P64[Sp + 24] = Hp - 24;
           call _c6Azq() args: 0, res: 0, upd: 0;
       c6ABS: // global
           R1 = _s6vg0::P64;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Azd_info" {
     block_c6Azd_info:
         const _c6Azd;
         const 7;
         const 4294967326;
         const S6vn0_srt+824;
 },
 _c6Azq() //  []
         { []
         }
     {offset
       c6Azq: // global
           I64[Sp - 8] = block_c6Azs_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6Azs() //  [R1]
         { []
         }
     {offset
       c6Azs: // global
           _s6vgb::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6ABB; else goto c6ABL;
       c6ABB: // global
           I64[Sp] = block_c6Azw_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6vgb::P64;
           P64[Sp - 8] = P64[Sp + 64];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c6ABL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6ABO; else goto c6ABN;
       c6ABO: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ABN: // global
           I64[Hp - 64] = sat_s6vgj_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = _s6vgb::P64;
           I64[Hp - 24] = sat_s6vgi_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6Azq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Azs_info" {
     block_c6Azs_info:
         const _c6Azs;
         const 8;
         const 4294967326;
         const S6vn0_srt+824;
 },
 _c6Azw() //  [R1]
         { []
         }
     {offset
       c6Azw: // global
           _s6vfP::P64 = P64[Sp + 48];
           _s6vga::P64 = P64[Sp + 32];
           _s6vgc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6ABD; else goto c6ABK;
       c6ABD: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c6ABG; else goto c6ABF;
       c6ABG: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ABF: // global
           I64[Hp - 104] = sat_s6vgh_info;
           P64[Hp - 88] = _s6vfP::P64;
           P64[Hp - 80] = _s6vga::P64;
           P64[Hp - 72] = _s6vgc::P64;
           I64[Hp - 64] = sat_s6vgg_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_s6vgf_info;
           P64[Hp - 8] = _s6vfP::P64;
           P64[Hp] = _s6vga::P64;
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = Hp - 104;
           Sp = Sp + 8;
           call _c6Azq() args: 0, res: 0, upd: 0;
       c6ABK: // global
           R2 = _s6vfP::P64;
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = _s6vga::P64;
           P64[Sp + 64] = _s6vgc::P64;
           Sp = Sp + 48;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Azw_info" {
     block_c6Azw_info:
         const _c6Azw;
         const 8;
         const 4294967326;
         const S6vn0_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.278874539 UTC

[section ""cstring" . lvl10_r6v1g_bytes" {
     lvl10_r6v1g_bytes:
         I8[] [115,116,105,109,101,115,58,32,77,97,121,98,101,44,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.282271477 UTC

[section ""data" . Data.Semigroup.Internal.stimesMaybe1_closure" {
     Data.Semigroup.Internal.stimesMaybe1_closure:
         const Data.Semigroup.Internal.stimesMaybe1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesMaybe1_entry() //  [R1]
         { []
         }
     {offset
       c6AEP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6AEQ; else goto c6AER;
       c6AEQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AER: // global
           (_c6AEK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6AEK::I64 == 0) goto c6AEM; else goto c6AEL;
       c6AEM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6AEL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6AEK::I64;
           I64[Sp - 24] = block_c6AEN_info;
           R2 = lvl10_r6v1g_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesMaybe1_info" {
     Data.Semigroup.Internal.stimesMaybe1_info:
         const Data.Semigroup.Internal.stimesMaybe1_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+736;
 },
 _c6AEN() //  [R1]
         { []
         }
     {offset
       c6AEN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AEN_info" {
     block_c6AEN_info:
         const _c6AEN;
         const 0;
         const 4294967326;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.291060724 UTC

[section ""data" . Data.Semigroup.Internal.stimesMaybe_closure" {
     Data.Semigroup.Internal.stimesMaybe_closure:
         const Data.Semigroup.Internal.stimesMaybe_info;
         const 0;
 },
 sat_s6vgC_entry() //  [R1]
         { []
         }
     {offset
       c6AFp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AFq; else goto c6AFr;
       c6AFq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AFr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6AFn_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgC_info" {
     sat_s6vgC_info:
         const sat_s6vgC_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+744;
 },
 _c6AFn() //  [R1]
         { []
         }
     {offset
       c6AFn: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AFn_info" {
     block_c6AFn_info:
         const _c6AFn;
         const 0;
         const 4294967326;
         const S6vn0_srt+744;
 },
 sat_s6vgE_entry() //  [R1]
         { []
         }
     {offset
       c6AFJ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6AFK; else goto c6AFL;
       c6AFK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AFL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.stimes_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgE_info" {
     sat_s6vgE_info:
         const sat_s6vgE_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.Internal.stimesMaybe_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6AFQ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c6AFR; else goto c6AFS;
       c6AFR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesMaybe_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6AFS: // global
           I64[Sp - 32] = block_c6AF9_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6AGi; else goto c6AFa;
       u6AGi: // global
           call _c6AF9(R1) args: 0, res: 0, upd: 0;
       c6AFa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesMaybe_info" {
     Data.Semigroup.Internal.stimesMaybe_info:
         const Data.Semigroup.Internal.stimesMaybe_entry;
         const 0;
         const 6755403736023054;
         const 17179869208;
         const S6vn0_srt+744;
 },
 _c6AF9() //  [R1]
         { []
         }
     {offset
       c6AF9: // global
           if (R1 & 7 == 1) goto u6AGe; else goto c6AFO;
       u6AGe: // global
           Sp = Sp + 32;
           call _c6AG6() args: 0, res: 0, upd: 0;
       c6AFO: // global
           I64[Sp - 8] = block_c6AFf_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AF9_info" {
     block_c6AF9_info:
         const _c6AF9;
         const 3;
         const 4503603922337822;
         const S6vn0_srt+744;
 },
 _c6AFf() //  [R1]
         { []
         }
     {offset
       c6AFf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6AFY; else goto c6AFX;
       c6AFY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AFX: // global
           I64[Hp - 16] = sat_s6vgC_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6AFv_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AFf_info" {
     block_c6AFf_info:
         const _c6AFf;
         const 4;
         const 4503603922337822;
         const S6vn0_srt+744;
 },
 _c6AFv() //  [R1]
         { []
         }
     {offset
       c6AFv: // global
           _c6AFj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c6AFz_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = _c6AFj::P64;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AFv_info" {
     block_c6AFv_info:
         const _c6AFv;
         const 5;
         const 4294967326;
         const S6vn0_srt+904;
 },
 _c6AFz() //  [R1]
         { []
         }
     {offset
       c6AFz: // global
           _c6AGc::P64 = R1 & 7;
           if (_c6AGc::P64 < 3) goto u6AGd; else goto c6AG8;
       u6AGd: // global
           if (_c6AGc::P64 < 2) goto c6AG3; else goto u6AGf;
       c6AG3: // global
           R1 = Data.Semigroup.Internal.stimesMaybe1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u6AGf: // global
           Sp = Sp + 40;
           call _c6AG6() args: 0, res: 0, upd: 0;
       c6AG8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6AGb; else goto c6AGa;
       c6AGb: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AGa: // global
           I64[Hp - 56] = sat_s6vgE_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AFz_info" {
     block_c6AFz_info:
         const _c6AFz;
         const 4;
         const 4294967326;
         const S6vn0_srt+904;
 },
 _c6AG6() //  []
         { []
         }
     {offset
       c6AG6: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.308141546 UTC

[section ""cstring" . lvl11_r6v1h_bytes" {
     lvl11_r6v1h_bytes:
         I8[] [115,116,105,109,101,115,58,32,91,93,44,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.310818798 UTC

[section ""data" . Data.Semigroup.Internal.stimesList1_closure" {
     Data.Semigroup.Internal.stimesList1_closure:
         const Data.Semigroup.Internal.stimesList1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesList1_entry() //  [R1]
         { []
         }
     {offset
       c6AHe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6AHf; else goto c6AHg;
       c6AHf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AHg: // global
           (_c6AH9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6AH9::I64 == 0) goto c6AHb; else goto c6AHa;
       c6AHb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6AHa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6AH9::I64;
           I64[Sp - 24] = block_c6AHc_info;
           R2 = lvl11_r6v1h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesList1_info" {
     Data.Semigroup.Internal.stimesList1_info:
         const Data.Semigroup.Internal.stimesList1_entry;
         const 0;
         const 4294967317;
         const S6vn0_srt+736;
 },
 _c6AHc() //  [R1]
         { []
         }
     {offset
       c6AHc: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6AHc_info" {
     block_c6AHc_info:
         const _c6AHc;
         const 0;
         const 4294967326;
         const S6vn0_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.321875942 UTC

[section ""data" . Data.Semigroup.Internal.stimesList_closure" {
     Data.Semigroup.Internal.stimesList_closure:
         const Data.Semigroup.Internal.stimesList_info;
         const 0;
 },
 $dNum_s6vgK_entry() //  [R1]
         { []
         }
     {offset
       c6AHG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6AHH; else goto c6AHI;
       c6AHH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AHI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s6vgK_info" {
     $dNum_s6vgK_info:
         const $dNum_s6vgK_entry;
         const 1;
         const 16;
 },
 sat_s6vgM_entry() //  [R1]
         { []
         }
     {offset
       c6AHR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AHS; else goto c6AHT;
       c6AHS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AHT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgM_info" {
     sat_s6vgM_info:
         const sat_s6vgM_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+744;
 },
 lvl12_s6vgO_entry() //  [R1]
         { []
         }
     {offset
       c6AI2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AI3; else goto c6AI4;
       c6AI3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AI4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6vgO_info" {
     lvl12_s6vgO_info:
         const lvl12_s6vgO_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+816;
 },
 lvl13_s6vgP_entry() //  [R1]
         { []
         }
     {offset
       c6AI9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6AIa; else goto c6AIb;
       c6AIa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AIb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_s6vgP_info" {
     lvl13_s6vgP_info:
         const lvl13_s6vgP_entry;
         const 1;
         const 4294967312;
         const S6vn0_srt+744;
 },
 sat_s6vgU_entry() //  [R1]
         { []
         }
     {offset
       c6AIx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6AIy; else goto c6AIz;
       c6AIy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AIz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6vgU_info" {
     sat_s6vgU_info:
         const sat_s6vgU_entry;
         const 3;
         const 15;
 },
 sat_s6vgV_entry() //  [R1]
         { []
         }
     {offset
       c6AIA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6AIE; else goto c6AID;
       c6AIE: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6AID: // global
           _s6vgK::P64 = P64[R1 + 16];
           _s6vgO::P64 = P64[R1 + 24];
           _s6vgR::P64 = P64[R1 + 32];
           _s6vgS::P64 = P64[R1 + 40];
           I64[Hp - 32] = sat_s6vgU_info;
           P64[Hp - 16] = _s6vgK::P64;
           P64[Hp - 8] = _s6vgO::P64;
           P64[Hp] = _s6vgS::P64;
           R2 = Hp - 32;
           R1 = _s6vgR::P64;
           call rep_s6vgR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6vgV_info" {
     sat_s6vgV_info:
         const sat_s6vgV_entry;
         const 4;
         const 15;
 },
 rep_s6vgR_entry() //  [R1, R2]
         { []
         }
     {offset
       c6AIJ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c6AIK; else goto c6AIL;
       c6AIK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6AIL: // global
           I64[Sp - 48] = block_c6AIl_info;
           _s6vgS::P64 = R2;
           R2 = P64[R1 + 39];
           I64[Sp - 72] = stg_ap_pp_info;
           P64[Sp - 64] = _s6vgS::P64;
           P64[Sp - 56] = P64[R1 + 31];
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s6vgS::P64;
           Sp = Sp - 72;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . rep_s6vgR_info" {
     rep_s6vgR_info:
         const rep_s6vgR_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c6AIl() //  [R1]
         { []
         }
     {offset
       c6AIl: // global
           if (R1 & 7 == 1) goto c6AIG; else goto c6AIH;
       c6AIG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6AIO; else goto c6AIN;
       c6AIO: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AIN: // global
           I64[Hp - 40] = sat_s6vgV_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R3 = Hp - 40;
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c6AIH: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AIl_info" {
     block_c6AIl_info:
         const _c6AIl;
         const 5;
         const 30;
 },
 Data.Semigroup.Internal.stimesList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6AIS: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c6AIT; else goto c6AIU;
       c6AIT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6AIU: // global
           I64[Sp - 24] = block_c6AHy_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesList_info" {
     Data.Semigroup.Internal.stimesList_info:
         const Data.Semigroup.Internal.stimesList_entry;
         const 0;
         const 27023801082445838;
         const 12884901911;
         const S6vn0_srt+744;
 },
 _c6AHy() //  [R1]
         { []
         }
     {offset
       c6AHy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6AIX; else goto c6AIW;
       c6AIX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AIW: // global
           I64[Hp - 16] = $dNum_s6vgK_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6AHJ_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AHy_info" {
     block_c6AHy_info:
         const _c6AHy;
         const 2;
         const 18016601827704862;
         const S6vn0_srt+744;
 },
 _c6AHJ() //  [R1]
         { []
         }
     {offset
       c6AHJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6AJ0; else goto c6AIZ;
       c6AJ0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AIZ: // global
           I64[Hp - 16] = sat_s6vgM_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c6AHU_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AHJ_info" {
     block_c6AHJ_info:
         const _c6AHJ;
         const 3;
         const 18016601827704862;
         const S6vn0_srt+744;
 },
 _c6AHU() //  [R1]
         { []
         }
     {offset
       c6AHU: // global
           if (R1 & 7 == 1) goto c6AJ2; else goto c6AJc;
       c6AJ2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6AJ5; else goto c6AJ4;
       c6AJ5: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AJ4: // global
           I64[Hp - 40] = lvl12_s6vgO_info;
           _c6AHC::P64 = P64[Sp + 16];
           P64[Hp - 24] = _c6AHC::P64;
           I64[Hp - 16] = lvl13_s6vgP_info;
           P64[Hp] = _c6AHC::P64;
           I64[Sp - 8] = block_c6AIc_info;
           R2 = P64[Sp + 8];
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = Hp - 40;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c6AJc: // global
           R1 = Data.Semigroup.Internal.stimesList1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AHU_info" {
     block_c6AHU_info:
         const _c6AHU;
         const 4;
         const 18016601827704862;
         const S6vn0_srt+744;
 },
 _c6AIc() //  [R1]
         { []
         }
     {offset
       c6AIc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6AJ8; else goto c6AJ7;
       c6AJ8: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6AJ7: // global
           I64[Hp - 40] = rep_s6vgR_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call rep_s6vgR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6AIc_info" {
     block_c6AIc_info:
         const _c6AIc;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.347268281 UTC

[section ""cstring" . Data.Semigroup.Internal.$trModule4_bytes" {
     Data.Semigroup.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.349160638 UTC

[section ""data" . Data.Semigroup.Internal.$trModule3_closure" {
     Data.Semigroup.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.351560691 UTC

[section ""cstring" . Data.Semigroup.Internal.$trModule2_bytes" {
     Data.Semigroup.Internal.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,101,109,105,103,114,111,117,112,46,73,110,116,101,114,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.353376573 UTC

[section ""data" . Data.Semigroup.Internal.$trModule1_closure" {
     Data.Semigroup.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.355122006 UTC

[section ""data" . Data.Semigroup.Internal.$trModule_closure" {
     Data.Semigroup.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Semigroup.Internal.$trModule3_closure+1;
         const Data.Semigroup.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.356979621 UTC

[section ""data" . $krep_r6v1i_closure" {
     $krep_r6v1i_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.359192465 UTC

[section ""data" . $krep1_r6v1j_closure" {
     $krep1_r6v1j_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.360916916 UTC

[section ""data" . $krep2_r6v1k_closure" {
     $krep2_r6v1k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep1_r6v1j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.36274007 UTC

[section ""data" . $krep3_r6v1l_closure" {
     $krep3_r6v1l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.364524599 UTC

[section ""data" . Data.Semigroup.Internal.$tcAlt1_closure" {
     Data.Semigroup.Internal.$tcAlt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r6v1l_closure+4;
         const $krep3_r6v1l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.366559902 UTC

[section ""data" . $krep4_r6v1m_closure" {
     $krep4_r6v1m_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.368266858 UTC

[section ""data" . $krep5_r6v1n_closure" {
     $krep5_r6v1n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.370101303 UTC

[section ""data" . $krep6_r6v1o_closure" {
     $krep6_r6v1o_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep4_r6v1m_closure+2;
         const $krep5_r6v1n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.372545342 UTC

[section ""data" . Data.Semigroup.Internal.$tcDual1_closure" {
     Data.Semigroup.Internal.$tcDual1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadDual5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.37438717 UTC

[section ""data" . Data.Semigroup.Internal.$tcDual_closure" {
     Data.Semigroup.Internal.$tcDual_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcDual1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 14711416616195557841;
         const 10971851269997195248;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.376231862 UTC

[section ""data" . $krep7_r6v1p_closure" {
     $krep7_r6v1p_closure:
         const :_con_info;
         const $krep1_r6v1j_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.37797854 UTC

[section ""data" . $krep8_r6v1q_closure" {
     $krep8_r6v1q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcDual_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.379780572 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Dual1_closure" {
     Data.Semigroup.Internal.$tc'Dual1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep8_r6v1q_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.382088503 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Dual3_bytes" {
     Data.Semigroup.Internal.$tc'Dual3_bytes:
         I8[] [39,68,117,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.383833641 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Dual2_closure" {
     Data.Semigroup.Internal.$tc'Dual2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Dual3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.388063021 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Dual_closure" {
     Data.Semigroup.Internal.$tc'Dual_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Dual2_closure+1;
         const Data.Semigroup.Internal.$tc'Dual1_closure+4;
         const 15885009659242865261;
         const 15931193389986079612;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.390785384 UTC

[section ""cstring" . Data.Semigroup.Internal.$tcEndo2_bytes" {
     Data.Semigroup.Internal.$tcEndo2_bytes:
         I8[] [69,110,100,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.393558275 UTC

[section ""data" . Data.Semigroup.Internal.$tcEndo1_closure" {
     Data.Semigroup.Internal.$tcEndo1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tcEndo2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.396195806 UTC

[section ""data" . Data.Semigroup.Internal.$tcEndo_closure" {
     Data.Semigroup.Internal.$tcEndo_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcEndo1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 16820921632006328603;
         const 4981834339379479823;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.399612022 UTC

[section ""data" . $krep9_r6v1r_closure" {
     $krep9_r6v1r_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcEndo_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.40186815 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Endo1_closure" {
     Data.Semigroup.Internal.$tc'Endo1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r6v1k_closure+4;
         const $krep9_r6v1r_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.404131931 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Endo3_bytes" {
     Data.Semigroup.Internal.$tc'Endo3_bytes:
         I8[] [39,69,110,100,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.406963319 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Endo2_closure" {
     Data.Semigroup.Internal.$tc'Endo2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Endo3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.409615062 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Endo_closure" {
     Data.Semigroup.Internal.$tc'Endo_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Endo2_closure+1;
         const Data.Semigroup.Internal.$tc'Endo1_closure+4;
         const 156297185665537802;
         const 8988325904501215692;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.412156591 UTC

[section ""data" . Data.Semigroup.Internal.$tcAll1_closure" {
     Data.Semigroup.Internal.$tcAll1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadAll13_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.414689782 UTC

[section ""data" . Data.Semigroup.Internal.$tcAll_closure" {
     Data.Semigroup.Internal.$tcAll_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcAll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 14149274874874504208;
         const 8164254778609961234;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.417028801 UTC

[section ""data" . $krep10_r6v1s_closure" {
     $krep10_r6v1s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcAll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.419233878 UTC

[section ""data" . Data.Semigroup.Internal.$tc'All1_closure" {
     Data.Semigroup.Internal.$tc'All1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r6v1i_closure+1;
         const $krep10_r6v1s_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.421168734 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'All3_bytes" {
     Data.Semigroup.Internal.$tc'All3_bytes:
         I8[] [39,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.423107715 UTC

[section ""data" . Data.Semigroup.Internal.$tc'All2_closure" {
     Data.Semigroup.Internal.$tc'All2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'All3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.425516578 UTC

[section ""data" . Data.Semigroup.Internal.$tc'All_closure" {
     Data.Semigroup.Internal.$tc'All_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'All2_closure+1;
         const Data.Semigroup.Internal.$tc'All1_closure+4;
         const 1168494541548489787;
         const 10689931498683547374;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.427371596 UTC

[section ""data" . Data.Semigroup.Internal.$tcAny1_closure" {
     Data.Semigroup.Internal.$tcAny1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadAny6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.429146284 UTC

[section ""data" . Data.Semigroup.Internal.$tcAny_closure" {
     Data.Semigroup.Internal.$tcAny_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcAny1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11600287624241135668;
         const 17600231731807245316;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.431103318 UTC

[section ""data" . $krep11_r6v1t_closure" {
     $krep11_r6v1t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcAny_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.432857262 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Any1_closure" {
     Data.Semigroup.Internal.$tc'Any1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r6v1i_closure+1;
         const $krep11_r6v1t_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.434908642 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Any3_bytes" {
     Data.Semigroup.Internal.$tc'Any3_bytes:
         I8[] [39,65,110,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.436714788 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Any2_closure" {
     Data.Semigroup.Internal.$tc'Any2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Any3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.438564595 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Any_closure" {
     Data.Semigroup.Internal.$tc'Any_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Any2_closure+1;
         const Data.Semigroup.Internal.$tc'Any1_closure+4;
         const 16164188984560189013;
         const 110490866064676064;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.440433549 UTC

[section ""data" . Data.Semigroup.Internal.$tcSum1_closure" {
     Data.Semigroup.Internal.$tcSum1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadSum5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.442455159 UTC

[section ""data" . Data.Semigroup.Internal.$tcSum_closure" {
     Data.Semigroup.Internal.$tcSum_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcSum1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7521450980204740829;
         const 14029043805042477297;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.444891731 UTC

[section ""data" . $krep12_r6v1u_closure" {
     $krep12_r6v1u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcSum_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.447180933 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Sum1_closure" {
     Data.Semigroup.Internal.$tc'Sum1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep12_r6v1u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.448963079 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Sum3_bytes" {
     Data.Semigroup.Internal.$tc'Sum3_bytes:
         I8[] [39,83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.450702661 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Sum2_closure" {
     Data.Semigroup.Internal.$tc'Sum2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Sum3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.452536342 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Sum_closure" {
     Data.Semigroup.Internal.$tc'Sum_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Sum2_closure+1;
         const Data.Semigroup.Internal.$tc'Sum1_closure+4;
         const 7144872330799658717;
         const 13465414667749873698;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.454407498 UTC

[section ""data" . Data.Semigroup.Internal.$tcProduct1_closure" {
     Data.Semigroup.Internal.$tcProduct1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadProduct5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.456263688 UTC

[section ""data" . Data.Semigroup.Internal.$tcProduct_closure" {
     Data.Semigroup.Internal.$tcProduct_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcProduct1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12271745360620305859;
         const 5747185732973757022;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.45851578 UTC

[section ""data" . $krep13_r6v1v_closure" {
     $krep13_r6v1v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcProduct_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.460303523 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Product1_closure" {
     Data.Semigroup.Internal.$tc'Product1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep13_r6v1v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.462159829 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Product3_bytes" {
     Data.Semigroup.Internal.$tc'Product3_bytes:
         I8[] [39,80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.463977568 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Product2_closure" {
     Data.Semigroup.Internal.$tc'Product2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Product3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.466401729 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Product_closure" {
     Data.Semigroup.Internal.$tc'Product_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Product2_closure+1;
         const Data.Semigroup.Internal.$tc'Product1_closure+4;
         const 3191278115598904989;
         const 12638872580785847167;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.468329542 UTC

[section ""data" . Data.Semigroup.Internal.$tcAlt2_closure" {
     Data.Semigroup.Internal.$tcAlt2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadAlt5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.470565071 UTC

[section ""data" . Data.Semigroup.Internal.$tcAlt_closure" {
     Data.Semigroup.Internal.$tcAlt_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcAlt2_closure+1;
         const Data.Semigroup.Internal.$tcAlt1_closure+4;
         const 7601313288863504805;
         const 2369500163797891218;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.472457648 UTC

[section ""data" . $krep14_r6v1w_closure" {
     $krep14_r6v1w_closure:
         const :_con_info;
         const $krep5_r6v1n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.474250046 UTC

[section ""data" . $krep15_r6v1x_closure" {
     $krep15_r6v1x_closure:
         const :_con_info;
         const $krep4_r6v1m_closure+2;
         const $krep14_r6v1w_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.475936193 UTC

[section ""data" . $krep16_r6v1y_closure" {
     $krep16_r6v1y_closure:
         const :_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep15_r6v1x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.477706226 UTC

[section ""data" . $krep17_r6v1z_closure" {
     $krep17_r6v1z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcAlt_closure+1;
         const $krep16_r6v1y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.479523721 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Alt1_closure" {
     Data.Semigroup.Internal.$tc'Alt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r6v1o_closure+3;
         const $krep17_r6v1z_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.481724537 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Alt3_bytes" {
     Data.Semigroup.Internal.$tc'Alt3_bytes:
         I8[] [39,65,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.483556523 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Alt2_closure" {
     Data.Semigroup.Internal.$tc'Alt2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Alt3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.485410559 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Alt_closure" {
     Data.Semigroup.Internal.$tc'Alt_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Alt2_closure+1;
         const Data.Semigroup.Internal.$tc'Alt1_closure+4;
         const 1436877498177162483;
         const 16937142347825669760;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:46.48867354 UTC

[section ""relreadonly" . S6vn0_srt" {
     S6vn0_srt:
         const Data.Semigroup.Internal.$fMonoidSum1_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const GHC.Real.^_closure;
         const Data.Semigroup.Internal.$fSemigroupProduct_closure;
         const sat_s6v3C_closure;
         const Data.Semigroup.Internal.$fMonoidProduct1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const Data.Semigroup.Internal.$fShowAlt_$cshow_closure;
         const Data.Semigroup.Internal.$fShowAlt_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.Internal.$fReadAll3_closure;
         const GHC.Read.readField_closure;
         const Data.Semigroup.Internal.$fReadAlt2_closure;
         const Data.Semigroup.Internal.$fReadAll_lexeme_closure;
         const Data.Semigroup.Internal.$fReadAlt_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Semigroup.Internal.$fReadAlt1_closure;
         const Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadAlt_$creadList_closure;
         const Data.Semigroup.Internal.$fReadAlt_closure;
         const Data.Semigroup.Internal.$fShowProduct_$cshow_closure;
         const Data.Semigroup.Internal.$fShowProduct_closure;
         const Data.Semigroup.Internal.$fReadProduct2_closure;
         const Data.Semigroup.Internal.$fReadProduct_lexeme_closure;
         const Data.Semigroup.Internal.$fReadProduct1_closure;
         const Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadProduct_$creadList_closure;
         const Data.Semigroup.Internal.$fReadProduct_closure;
         const Data.Semigroup.Internal.$fShowSum_$cshow_closure;
         const Data.Semigroup.Internal.$fShowSum_closure;
         const Data.Semigroup.Internal.$fReadSum2_closure;
         const Data.Semigroup.Internal.$fReadSum_lexeme_closure;
         const Data.Semigroup.Internal.$fReadSum1_closure;
         const Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadSum_$creadList_closure;
         const Data.Semigroup.Internal.$fReadSum_closure;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const GHC.Show.$fShowBool2_closure;
         const GHC.Show.$fShowBool4_closure;
         const Data.Semigroup.Internal.$fShowAny3_closure;
         const Data.Semigroup.Internal.$w$cshowsPrec2_closure;
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure;
         const Data.Semigroup.Internal.$fShowAll5_closure;
         const Data.Semigroup.Internal.$fShowAll6_closure;
         const Data.Semigroup.Internal.$fShowAny_$cshow_closure;
         const Data.Semigroup.Internal.$fShowAny1_closure;
         const GHC.Read.$fReadBool2_closure;
         const GHC.Read.list3_closure;
         const Data.Semigroup.Internal.$fReadAll3_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.Internal.$fReadAll7_closure;
         const Data.Semigroup.Internal.$fReadAny3_closure;
         const Data.Semigroup.Internal.$w$creadPrec1_closure;
         const Data.Semigroup.Internal.$fReadAny_lexeme_closure;
         const Data.Semigroup.Internal.$fReadAny2_closure;
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadAny1_closure;
         const GHC.Read.list_closure;
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadAny7_closure;
         const Data.Semigroup.Internal.$fShowAll3_closure;
         const Data.Semigroup.Internal.$w$cshowsPrec_closure;
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure;
         const Data.Semigroup.Internal.$fShowAll_$cshow_closure;
         const Data.Semigroup.Internal.$fShowAll1_closure;
         const Data.Semigroup.Internal.$fReadAll8_closure;
         const Data.Semigroup.Internal.$w$creadPrec_closure;
         const Data.Semigroup.Internal.$fReadAll_lexeme1_closure;
         const Data.Semigroup.Internal.$fReadAll2_closure;
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadAll1_closure;
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadAll14_closure;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const Data.Semigroup.Internal.$fShowDual_$cshow_closure;
         const Data.Semigroup.Internal.$fShowDual_closure;
         const Data.Semigroup.Internal.$fReadDual2_closure;
         const Data.Semigroup.Internal.$fReadDual_lexeme_closure;
         const Data.Semigroup.Internal.$fReadDual1_closure;
         const Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadDual_$creadList_closure;
         const Data.Semigroup.Internal.$fReadDual_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Semigroup.Internal.$fMonoidSum1_closure;
         const Data.Semigroup.Internal.stimesIdempotent_closure;
         const Data.Semigroup.Internal.stimesIdempotent1_closure;
         const Data.Semigroup.Internal.stimesIdempotentMonoid_closure;
         const Data.Semigroup.Internal.stimesIdempotentMonoid1_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const sat_s6vee_closure;
         const lvl7_r6v1d_closure;
         const Data.Semigroup.Internal.$fMonoidProduct1_closure;
         const GHC.Real.even_closure;
         const Data.Semigroup.Internal.stimesMonoid_closure;
         const lvl6_r6v1c_closure;
         const Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure;
         const Data.Semigroup.Internal.$fSemigroupAlt_closure;
         const Data.Semigroup.Internal.$fMonoidAlt_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const lvl9_r6v1f_closure;
         const Data.Semigroup.Internal.stimesMaybe_closure;
         const Data.Semigroup.Internal.stimesMaybe1_closure;
         const Data.Semigroup.Internal.stimesList_closure;
         const Data.Semigroup.Internal.stimesList1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.89630427 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:01:53.899421346 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat1_closure" {
     Data.Semigroup.Internal.$w$csconcat1_closure:
         const Data.Semigroup.Internal.$w$csconcat1_info;
 },
 go_s6ALy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6B16: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6B17; else goto c6B18;
       c6B17: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B18: // global
           I64[Sp - 32] = block_c6B0Z_info;
           _s6ALy::P64 = R1;
           _s6ALv::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6ALv::P64;
           P64[Sp - 16] = _s6ALy::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6B1i; else goto c6B10;
       u6B1i: // global
           call _c6B0Z(R1) args: 0, res: 0, upd: 0;
       c6B10: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6ALy_info" {
     go_s6ALy_info:
         const go_s6ALy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6B0Z() //  [R1]
         { []
         }
     {offset
       c6B0Z: // global
           if (R1 & 7 == 1) goto c6B13; else goto c6B14;
       c6B13: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6B14: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6B1g; else goto c6B1f;
       c6B1g: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6B1f: // global
           _s6ALC::P64 = P64[R1 + 6];
           _s6ALD::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6ALC::P64;
           P64[Hp] = _s6ALD::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6B0Z_info" {
     block_c6B0Z_info:
         const _c6B0Z;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6B1j: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6B1n; else goto c6B1m;
       c6B1n: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B1m: // global
           I64[Hp - 8] = go_s6ALy_info;
           P64[Hp] = R2;
           _s6ALw::P64 = R3;
           R3 = R4;
           R2 = _s6ALw::P64;
           R1 = Hp - 6;
           call go_s6ALy_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat1_info" {
     Data.Semigroup.Internal.$w$csconcat1_info:
         const Data.Semigroup.Internal.$w$csconcat1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.907289323 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupDual_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupDual_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupDual_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupDual_$csconcat_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c6B1P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6B1Q; else goto c6B1R;
       c6B1Q: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupDual_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B1R: // global
           I64[Sp - 16] = block_c6B1M_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6B1V; else goto c6B1N;
       u6B1V: // global
           call _c6B1M(R1) args: 0, res: 0, upd: 0;
       c6B1N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupDual_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupDual_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupDual_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6B1M() //  [R1]
         { []
         }
     {offset
       c6B1M: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6B1M_info" {
     block_c6B1M_info:
         const _c6B1M;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.913676374 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupDual_closure" {
     Data.Semigroup.Internal.$fSemigroupDual_closure:
         const Data.Semigroup.Internal.$fSemigroupDual_info;
 },
 sat_s6ALS_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6B2f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6B2g; else goto c6B2h;
       c6B2g: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B2h: // global
           _s6ALP::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6ALP::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Base.stimes_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ALS_info" {
     sat_s6ALS_info:
         const sat_s6ALS_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6ALO_entry() //  [R1, R2]
         { []
         }
     {offset
       c6B2n: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupDual_$csconcat_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ALO_info" {
     sat_s6ALO_info:
         const sat_s6ALO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6ALN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6B2v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6B2w; else goto c6B2x;
       c6B2w: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B2x: // global
           _s6ALL::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6ALL::P64;
           Sp = Sp - 24;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ALN_info" {
     sat_s6ALN_info:
         const sat_s6ALN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fSemigroupDual_entry() //  [R2]
         { []
         }
     {offset
       c6B2z: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6B2D; else goto c6B2C;
       c6B2D: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6B2C: // global
           I64[Hp - 72] = sat_s6ALS_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6ALO_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6ALN_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 69;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupDual_info" {
     Data.Semigroup.Internal.$fSemigroupDual_info:
         const Data.Semigroup.Internal.$fSemigroupDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.922596267 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_closure" {
     Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_closure:
         const Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_info;
 },
 sat_s6ALU_entry() //  [R1]
         { []
         }
     {offset
       c6B3b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6B3c; else goto c6B3d;
       c6B3c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6B3d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ALU_info" {
     sat_s6ALU_info:
         const sat_s6ALU_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       c6B3e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6B3i; else goto c6B3h;
       c6B3i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6B3h: // global
           I64[Hp - 16] = sat_s6ALU_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fSemigroupDual_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_info" {
     Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_info:
         const Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.928242645 UTC

[section ""data" . $cmappend_r6v15_closure" {
     $cmappend_r6v15_closure:
         const $cmappend_r6v15_info;
 },
 $cmappend_r6v15_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6B3z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6B3A; else goto c6B3B;
       c6B3A: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r6v15_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B3B: // global
           I64[Sp - 24] = block_c6B3x_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $cmappend_r6v15_info" {
     $cmappend_r6v15_info:
         const $cmappend_r6v15_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6B3x() //  [R1]
         { []
         }
     {offset
       c6B3x: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _s6ALW::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6ALW::P64;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6B3x_info" {
     block_c6B3x_info:
         const _c6B3x;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.933125555 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_$cmappend_closure" {
     Data.Semigroup.Internal.$fMonoidDual_$cmappend_closure:
         const Data.Semigroup.Internal.$fMonoidDual_$cmappend_info;
 },
 Data.Semigroup.Internal.$fMonoidDual_$cmappend_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       c6B3U: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r6v15_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_$cmappend_info" {
     Data.Semigroup.Internal.$fMonoidDual_$cmappend_info:
         const Data.Semigroup.Internal.$fMonoidDual_$cmappend_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.9389385 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidDual_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidDual_$cmconcat_info;
 },
 lvl12_s6AM1_entry() //  [R1]
         { []
         }
     {offset
       c6B49: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6B4a; else goto c6B4b;
       c6B4a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6B4b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6AM1_info" {
     lvl12_s6AM1_info:
         const lvl12_s6AM1_entry;
         const 1;
         const 16;
 },
 z_s6AM2_entry() //  [R1]
         { []
         }
     {offset
       c6B4g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6B4h; else goto c6B4i;
       c6B4h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6B4i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6AM2_info" {
     z_s6AM2_info:
         const z_s6AM2_entry;
         const 1;
         const 16;
 },
 go_s6AM3_entry() //  [R1, R2]
         { []
         }
     {offset
       c6B4v: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6B4w; else goto c6B4x;
       c6B4w: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6B4x: // global
           I64[Sp - 32] = block_c6B4o_info;
           _s6AM3::P64 = R1;
           _s6AM1::P64 = P64[R1 + 7];
           _s6AM2::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6AM1::P64;
           P64[Sp - 16] = _s6AM2::P64;
           P64[Sp - 8] = _s6AM3::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6B4H; else goto c6B4p;
       u6B4H: // global
           call _c6B4o(R1) args: 0, res: 0, upd: 0;
       c6B4p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6AM3_info" {
     go_s6AM3_info:
         const go_s6AM3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6B4o() //  [R1]
         { []
         }
     {offset
       c6B4o: // global
           if (R1 & 7 == 1) goto c6B4s; else goto c6B4t;
       c6B4s: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6B4t: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6B4F; else goto c6B4E;
       c6B4F: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6B4E: // global
           _s6AM6::P64 = P64[R1 + 6];
           _s6AM7::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6AM7::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 24] = _s6AM6::P64;
           Sp = Sp + 8;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6B4o_info" {
     block_c6B4o_info:
         const _c6B4o;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidDual_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c6B4I: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6B4M; else goto c6B4L;
       c6B4M: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidDual_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B4L: // global
           I64[Hp - 64] = lvl12_s6AM1_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = z_s6AM2_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6AM3_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_s6AM3_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidDual_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidDual_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.950836016 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidDual_closure" {
     Data.Semigroup.Internal.$fMonoidDual_closure:
         const Data.Semigroup.Internal.$fMonoidDual_info;
 },
 sat_s6AMd_entry() //  [R1, R2]
         { []
         }
     {offset
       c6B5u: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fMonoidDual_$cmconcat_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AMd_info" {
     sat_s6AMd_info:
         const sat_s6AMd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6AMc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6B5C: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fMonoidDual_$cmappend_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AMc_info" {
     sat_s6AMc_info:
         const sat_s6AMc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6AMb_entry() //  [R1]
         { []
         }
     {offset
       c6B5J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6B5K; else goto c6B5L;
       c6B5K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6B5L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AMb_info" {
     sat_s6AMb_info:
         const sat_s6AMb_entry;
         const 1;
         const 16;
 },
 sat_s6AMa_entry() //  [R1]
         { []
         }
     {offset
       c6B5Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6B5R; else goto c6B5S;
       c6B5R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6B5S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AMa_info" {
     sat_s6AMa_info:
         const sat_s6AMa_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonoidDual_entry() //  [R2]
         { []
         }
     {offset
       c6B5U: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c6B5Y; else goto c6B5X;
       c6B5Y: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6B5X: // global
           I64[Hp - 112] = sat_s6AMd_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s6AMc_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AMb_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AMa_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 111;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidDual_info" {
     Data.Semigroup.Internal.$fMonoidDual_info:
         const Data.Semigroup.Internal.$fMonoidDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.960593325 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorDual2_closure" {
     Data.Semigroup.Internal.$fFunctorDual2_closure:
         const Data.Semigroup.Internal.$fFunctorDual2_info;
 },
 Data.Semigroup.Internal.$fFunctorDual2_entry() //  [R2]
         { []
         }
     {offset
       c6B6x: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fFunctorDual2_info" {
     Data.Semigroup.Internal.$fFunctorDual2_info:
         const Data.Semigroup.Internal.$fFunctorDual2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.963871311 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorDual1_closure" {
     Data.Semigroup.Internal.$fFunctorDual1_closure:
         const Data.Semigroup.Internal.$fFunctorDual1_info;
 },
 Data.Semigroup.Internal.$fFunctorDual1_entry() //  [R2]
         { []
         }
     {offset
       c6B6I: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fFunctorDual1_info" {
     Data.Semigroup.Internal.$fFunctorDual1_info:
         const Data.Semigroup.Internal.$fFunctorDual1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.967145054 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorDual_closure" {
     Data.Semigroup.Internal.$fFunctorDual_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.Internal.$fFunctorDual2_closure+1;
         const Data.Semigroup.Internal.$fFunctorDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.969082475 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual3_closure" {
     Data.Semigroup.Internal.$fApplicativeDual3_closure:
         const Data.Semigroup.Internal.$fApplicativeDual3_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual3_entry() //  [R2]
         { []
         }
     {offset
       c6B6U: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual3_info" {
     Data.Semigroup.Internal.$fApplicativeDual3_info:
         const Data.Semigroup.Internal.$fApplicativeDual3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.972397413 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual4_closure" {
     Data.Semigroup.Internal.$fApplicativeDual4_closure:
         const Data.Semigroup.Internal.$fApplicativeDual4_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual4_entry() //  [R2]
         { []
         }
     {offset
       c6B75: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual4_info" {
     Data.Semigroup.Internal.$fApplicativeDual4_info:
         const Data.Semigroup.Internal.$fApplicativeDual4_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.975617271 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual2_closure" {
     Data.Semigroup.Internal.$fApplicativeDual2_closure:
         const Data.Semigroup.Internal.$fApplicativeDual2_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6B7g: // global
           _s6AMj::P64 = R2;
           R2 = R3;
           R1 = _s6AMj::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual2_info" {
     Data.Semigroup.Internal.$fApplicativeDual2_info:
         const Data.Semigroup.Internal.$fApplicativeDual2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.979352973 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual_$c*>_closure" {
     Data.Semigroup.Internal.$fApplicativeDual_$c*>_closure:
         const Data.Semigroup.Internal.$fApplicativeDual_$c*>_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual_$c*>_entry() //  [R3]
         { []
         }
     {offset
       c6B7r: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual_$c*>_info" {
     Data.Semigroup.Internal.$fApplicativeDual_$c*>_info:
         const Data.Semigroup.Internal.$fApplicativeDual_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.982506971 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual1_closure" {
     Data.Semigroup.Internal.$fApplicativeDual1_closure:
         const Data.Semigroup.Internal.$fApplicativeDual1_info;
 },
 Data.Semigroup.Internal.$fApplicativeDual1_entry() //  [R2]
         { []
         }
     {offset
       c6B7C: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeDual1_info" {
     Data.Semigroup.Internal.$fApplicativeDual1_info:
         const Data.Semigroup.Internal.$fApplicativeDual1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.985648106 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeDual_closure" {
     Data.Semigroup.Internal.$fApplicativeDual_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.Internal.$fFunctorDual_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual3_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual2_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual_$c*>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.988830506 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupSum1_closure" {
     Data.Semigroup.Internal.$fSemigroupSum1_closure:
         const Data.Semigroup.Internal.$fSemigroupSum1_info;
 },
 sat_s6AMt_entry() //  [R1]
         { []
         }
     {offset
       c6B7W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6B7X; else goto c6B7Y;
       c6B7X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6B7Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AMt_info" {
     sat_s6AMt_info:
         const sat_s6AMt_entry;
         const 2;
         const 18;
 },
 sat_s6AMu_entry() //  [R1]
         { []
         }
     {offset
       c6B7Z: // global
           _s6AMu::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c6B80; else goto c6B81;
       c6B81: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6B83; else goto c6B82;
       c6B83: // global
           HpAlloc = 32;
           goto c6B80;
       c6B80: // global
           R1 = _s6AMu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6B82: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AMu::P64;
           _s6AMp::P64 = P64[_s6AMu::P64 + 16];
           _s6AMq::P64 = P64[_s6AMu::P64 + 24];
           _s6AMr::P64 = P64[_s6AMu::P64 + 32];
           I64[Hp - 24] = sat_s6AMt_info;
           P64[Hp - 8] = _s6AMq::P64;
           P64[Hp] = _s6AMr::P64;
           R2 = _s6AMp::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AMu_info" {
     sat_s6AMu_info:
         const sat_s6AMu_entry;
         const 3;
         const 15;
 },
 Data.Semigroup.Internal.$fSemigroupSum1_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       c6B84: // global
           _s6AMs::P64 = R5;
           _s6AMr::P64 = R4;
           _s6AMq::P64 = R3;
           _s6AMp::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6B85; else goto c6B86;
       c6B86: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6B88; else goto c6B87;
       c6B88: // global
           HpAlloc = 40;
           goto c6B85;
       c6B85: // global
           R5 = _s6AMs::P64;
           R4 = _s6AMr::P64;
           R3 = _s6AMq::P64;
           R2 = _s6AMp::P64;
           R1 = Data.Semigroup.Internal.$fSemigroupSum1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B87: // global
           I64[Hp - 32] = sat_s6AMu_info;
           P64[Hp - 16] = _s6AMp::P64;
           P64[Hp - 8] = _s6AMq::P64;
           P64[Hp] = _s6AMr::P64;
           R2 = _s6AMp::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6AMs::P64;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupSum1_info" {
     Data.Semigroup.Internal.$fSemigroupSum1_info:
         const Data.Semigroup.Internal.$fSemigroupSum1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:53.997829036 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat3_closure" {
     Data.Semigroup.Internal.$w$csconcat3_closure:
         const Data.Semigroup.Internal.$w$csconcat3_info;
 },
 go_s6AMy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6B8M: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6B8N; else goto c6B8O;
       c6B8N: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B8O: // global
           I64[Sp - 32] = block_c6B8F_info;
           _s6AMy::P64 = R1;
           _s6AMv::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6AMv::P64;
           P64[Sp - 16] = _s6AMy::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6B8Y; else goto c6B8G;
       u6B8Y: // global
           call _c6B8F(R1) args: 0, res: 0, upd: 0;
       c6B8G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6AMy_info" {
     go_s6AMy_info:
         const go_s6AMy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6B8F() //  [R1]
         { []
         }
     {offset
       c6B8F: // global
           _s6AMz::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6B8J; else goto c6B8K;
       c6B8J: // global
           R1 = _s6AMz::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6B8K: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6B8W; else goto c6B8V;
       c6B8W: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6B8V: // global
           _s6AMC::P64 = P64[R1 + 6];
           _s6AMD::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6AMC::P64;
           P64[Hp] = _s6AMD::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6AMz::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6B8F_info" {
     block_c6B8F_info:
         const _c6B8F;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6B8Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6B93; else goto c6B92;
       c6B93: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B92: // global
           I64[Hp - 8] = go_s6AMy_info;
           P64[Hp] = R2;
           _s6AMw::P64 = R3;
           R3 = R4;
           R2 = _s6AMw::P64;
           R1 = Hp - 6;
           call go_s6AMy_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat3_info" {
     Data.Semigroup.Internal.$w$csconcat3_info:
         const Data.Semigroup.Internal.$w$csconcat3_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.005428872 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupSum_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupSum_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupSum_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupSum_$csconcat_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c6B9v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6B9w; else goto c6B9x;
       c6B9w: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupSum_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6B9x: // global
           I64[Sp - 16] = block_c6B9s_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6B9B; else goto c6B9t;
       u6B9B: // global
           call _c6B9s(R1) args: 0, res: 0, upd: 0;
       c6B9t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupSum_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupSum_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupSum_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6B9s() //  [R1]
         { []
         }
     {offset
       c6B9s: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6B9s_info" {
     block_c6B9s_info:
         const _c6B9s;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.011475925 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupSum_closure" {
     Data.Semigroup.Internal.$fSemigroupSum_closure:
         const Data.Semigroup.Internal.$fSemigroupSum_info;
 },
 sat_s6AMN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6B9V: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.Internal.$fSemigroupSum1_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AMN_info" {
     sat_s6AMN_info:
         const sat_s6AMN_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6AMM_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Ba3: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupSum_$csconcat_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AMM_info" {
     sat_s6AMM_info:
         const sat_s6AMM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6AML_entry() //  [R1]
         { []
         }
     {offset
       c6Baa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bab; else goto c6Bac;
       c6Bab: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bac: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AML_info" {
     sat_s6AML_info:
         const sat_s6AML_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fSemigroupSum_entry() //  [R2]
         { []
         }
     {offset
       c6Bae: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6Bai; else goto c6Bah;
       c6Bai: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bah: // global
           I64[Hp - 80] = sat_s6AMN_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6AMM_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6AML_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 77;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupSum_info" {
     Data.Semigroup.Internal.$fSemigroupSum_info:
         const Data.Semigroup.Internal.$fSemigroupSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.019540635 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum1_closure" {
     Data.Semigroup.Internal.$fMonoidSum1_closure:
         const Data.Semigroup.Internal.$fMonoidSum1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidSum1_entry() //  [R1]
         { []
         }
     {offset
       c6BaM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BaN; else goto c6BaO;
       c6BaN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BaO: // global
           (_c6BaJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6BaJ::I64 == 0) goto c6BaL; else goto c6BaK;
       c6BaL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6BaK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6BaJ::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum1_info" {
     Data.Semigroup.Internal.$fMonoidSum1_info:
         const Data.Semigroup.Internal.$fMonoidSum1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.023457777 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum2_closure" {
     Data.Semigroup.Internal.$fMonoidSum2_closure:
         const Data.Semigroup.Internal.$fMonoidSum2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidSum2_entry() //  [R2]
         { []
         }
     {offset
       c6Bb3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bb4; else goto c6Bb5;
       c6Bb4: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidSum2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bb5: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum2_info" {
     Data.Semigroup.Internal.$fMonoidSum2_info:
         const Data.Semigroup.Internal.$fMonoidSum2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.028692407 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidSum_$cmconcat_info;
         const 0;
 },
 z_s6AMQ_entry() //  [R1]
         { []
         }
     {offset
       c6Bbm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Bbn; else goto c6Bbo;
       c6Bbn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bbo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6AMQ_info" {
     z_s6AMQ_info:
         const z_s6AMQ_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt;
 },
 go_s6AMR_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BbB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6BbC; else goto c6BbD;
       c6BbC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BbD: // global
           I64[Sp - 32] = block_c6Bbu_info;
           _s6AMR::P64 = R1;
           _s6AMP::P64 = P64[R1 + 7];
           _s6AMQ::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6AMP::P64;
           P64[Sp - 16] = _s6AMQ::P64;
           P64[Sp - 8] = _s6AMR::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6BbN; else goto c6Bbv;
       u6BbN: // global
           call _c6Bbu(R1) args: 0, res: 0, upd: 0;
       c6Bbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6AMR_info" {
     go_s6AMR_info:
         const go_s6AMR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6Bbu() //  [R1]
         { []
         }
     {offset
       c6Bbu: // global
           if (R1 & 7 == 1) goto c6Bby; else goto c6Bbz;
       c6Bby: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Bbz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BbL; else goto c6BbK;
       c6BbL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BbK: // global
           _s6AMU::P64 = P64[R1 + 6];
           _s6AMV::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6AMV::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6AMU::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Bbu_info" {
     block_c6Bbu_info:
         const _c6Bbu;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidSum_$cmconcat_entry() //  [R2]
         { []
         }
     {offset
       c6BbO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6BbS; else goto c6BbR;
       c6BbS: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BbR: // global
           I64[Hp - 40] = z_s6AMQ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6AMR_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidSum_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidSum_$cmconcat_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S6Bb6_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.039708675 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidSum_closure" {
     Data.Semigroup.Internal.$fMonoidSum_closure:
         const Data.Semigroup.Internal.$fMonoidSum_info;
         const 0;
 },
 sat_s6AN1_entry() //  [R1]
         { []
         }
     {offset
       c6Bcv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bcw; else goto c6Bcx;
       c6Bcw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bcx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_$cmconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AN1_info" {
     sat_s6AN1_info:
         const sat_s6AN1_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+16;
 },
 sat_s6AN0_entry() //  [R1]
         { []
         }
     {offset
       c6BcC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BcD; else goto c6BcE;
       c6BcD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BcE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AN0_info" {
     sat_s6AN0_info:
         const sat_s6AN0_entry;
         const 1;
         const 16;
 },
 sat_s6AMZ_entry() //  [R1]
         { []
         }
     {offset
       c6BcJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BcK; else goto c6BcL;
       c6BcK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BcL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AMZ_info" {
     sat_s6AMZ_info:
         const sat_s6AMZ_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+8;
 },
 sat_s6AMY_entry() //  [R1]
         { []
         }
     {offset
       c6BcQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BcR; else goto c6BcS;
       c6BcR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BcS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AMY_info" {
     sat_s6AMY_info:
         const sat_s6AMY_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonoidSum_entry() //  [R2]
         { []
         }
     {offset
       c6BcU: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6BcY; else goto c6BcX;
       c6BcY: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BcX: // global
           I64[Hp - 128] = sat_s6AN1_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6AN0_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AMZ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AMY_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidSum_info" {
     Data.Semigroup.Internal.$fMonoidSum_info:
         const Data.Semigroup.Internal.$fMonoidSum_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S6Bb6_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.049226077 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorSum_closure" {
     Data.Semigroup.Internal.$fFunctorSum_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.Internal.$fFunctorDual2_closure+1;
         const Data.Semigroup.Internal.$fFunctorDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.051387435 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum3_closure" {
     Data.Semigroup.Internal.$fApplicativeSum3_closure:
         const Data.Semigroup.Internal.$fApplicativeSum3_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum3_entry() //  [R2]
         { []
         }
     {offset
       c6BdC: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum3_info" {
     Data.Semigroup.Internal.$fApplicativeSum3_info:
         const Data.Semigroup.Internal.$fApplicativeSum3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.055896599 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum2_closure" {
     Data.Semigroup.Internal.$fApplicativeSum2_closure:
         const Data.Semigroup.Internal.$fApplicativeSum2_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6BdN: // global
           _s6AN3::P64 = R2;
           R2 = R3;
           R1 = _s6AN3::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum2_info" {
     Data.Semigroup.Internal.$fApplicativeSum2_info:
         const Data.Semigroup.Internal.$fApplicativeSum2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.060391397 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum_$c*>_closure" {
     Data.Semigroup.Internal.$fApplicativeSum_$c*>_closure:
         const Data.Semigroup.Internal.$fApplicativeSum_$c*>_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum_$c*>_entry() //  [R3]
         { []
         }
     {offset
       c6BdY: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum_$c*>_info" {
     Data.Semigroup.Internal.$fApplicativeSum_$c*>_info:
         const Data.Semigroup.Internal.$fApplicativeSum_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.064148843 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum1_closure" {
     Data.Semigroup.Internal.$fApplicativeSum1_closure:
         const Data.Semigroup.Internal.$fApplicativeSum1_info;
 },
 Data.Semigroup.Internal.$fApplicativeSum1_entry() //  [R2]
         { []
         }
     {offset
       c6Be9: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeSum1_info" {
     Data.Semigroup.Internal.$fApplicativeSum1_info:
         const Data.Semigroup.Internal.$fApplicativeSum1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.06718216 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeSum_closure" {
     Data.Semigroup.Internal.$fApplicativeSum_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.Internal.$fFunctorSum_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const Data.Semigroup.Internal.$fApplicativeSum3_closure+1;
         const Data.Semigroup.Internal.$fApplicativeSum2_closure+2;
         const Data.Semigroup.Internal.$fApplicativeSum_$c*>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeSum1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.071096928 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat2_closure" {
     Data.Semigroup.Internal.$w$csconcat2_closure:
         const Data.Semigroup.Internal.$w$csconcat2_info;
 },
 go_s6ANc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Bex: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Bey; else goto c6Bez;
       c6Bey: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Bez: // global
           I64[Sp - 32] = block_c6Beq_info;
           _s6ANc::P64 = R1;
           _s6AN9::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6AN9::P64;
           P64[Sp - 16] = _s6ANc::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6BeJ; else goto c6Ber;
       u6BeJ: // global
           call _c6Beq(R1) args: 0, res: 0, upd: 0;
       c6Ber: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6ANc_info" {
     go_s6ANc_info:
         const go_s6ANc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6Beq() //  [R1]
         { []
         }
     {offset
       c6Beq: // global
           _s6ANd::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Beu; else goto c6Bev;
       c6Beu: // global
           R1 = _s6ANd::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Bev: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6BeH; else goto c6BeG;
       c6BeH: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BeG: // global
           _s6ANg::P64 = P64[R1 + 6];
           _s6ANh::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6ANg::P64;
           P64[Hp] = _s6ANh::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6ANd::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Beq_info" {
     block_c6Beq_info:
         const _c6Beq;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6BeK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BeO; else goto c6BeN;
       c6BeO: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BeN: // global
           I64[Hp - 8] = go_s6ANc_info;
           P64[Hp] = R2;
           _s6ANa::P64 = R3;
           R3 = R4;
           R2 = _s6ANa::P64;
           R1 = Hp - 6;
           call go_s6ANc_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat2_info" {
     Data.Semigroup.Internal.$w$csconcat2_info:
         const Data.Semigroup.Internal.$w$csconcat2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.078734093 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c6Bfg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bfh; else goto c6Bfi;
       c6Bfh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Bfi: // global
           I64[Sp - 16] = block_c6Bfd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Bfm; else goto c6Bfe;
       u6Bfm: // global
           call _c6Bfd(R1) args: 0, res: 0, upd: 0;
       c6Bfe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Bfd() //  [R1]
         { []
         }
     {offset
       c6Bfd: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat2_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Bfd_info" {
     block_c6Bfd_info:
         const _c6Bfd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.085441435 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupProduct_closure" {
     Data.Semigroup.Internal.$fSemigroupProduct_closure:
         const Data.Semigroup.Internal.$fSemigroupProduct_info;
         const 0;
 },
 sat_s6ANu_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6BfG: // global
           R5 = R3;
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ANu_info" {
     sat_s6ANu_info:
         const sat_s6ANu_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6Bb6_srt+32;
 },
 sat_s6ANq_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BfO: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupProduct_$csconcat_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ANq_info" {
     sat_s6ANq_info:
         const sat_s6ANq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6ANp_entry() //  [R1]
         { []
         }
     {offset
       c6BfV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BfW; else goto c6BfX;
       c6BfW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BfX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANp_info" {
     sat_s6ANp_info:
         const sat_s6ANp_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fSemigroupProduct_entry() //  [R2]
         { []
         }
     {offset
       c6BfZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6Bg3; else goto c6Bg2;
       c6Bg3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bg2: // global
           I64[Hp - 80] = sat_s6ANu_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6ANq_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6ANp_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 77;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupProduct_info" {
     Data.Semigroup.Internal.$fSemigroupProduct_info:
         const Data.Semigroup.Internal.$fSemigroupProduct_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.093511544 UTC

[section ""data" . sat_s6ANv_closure" {
     sat_s6ANv_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.095138815 UTC

[section ""data" . sat_s6ANw_closure" {
     sat_s6ANw_closure:
         const :_con_info;
         const sat_s6ANv_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.097369021 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct1_closure" {
     Data.Semigroup.Internal.$fMonoidProduct1_closure:
         const Data.Semigroup.Internal.$fMonoidProduct1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidProduct1_entry() //  [R1]
         { []
         }
     {offset
       c6Bgz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BgA; else goto c6BgB;
       c6BgA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BgB: // global
           (_c6Bgw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Bgw::I64 == 0) goto c6Bgy; else goto c6Bgx;
       c6Bgy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Bgx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Bgw::I64;
           R3 = sat_s6ANw_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct1_info" {
     Data.Semigroup.Internal.$fMonoidProduct1_info:
         const Data.Semigroup.Internal.$fMonoidProduct1_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.101333059 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct2_closure" {
     Data.Semigroup.Internal.$fMonoidProduct2_closure:
         const Data.Semigroup.Internal.$fMonoidProduct2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fMonoidProduct2_entry() //  [R2]
         { []
         }
     {offset
       c6BgP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BgQ; else goto c6BgR;
       c6BgQ: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidProduct2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BgR: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct2_info" {
     Data.Semigroup.Internal.$fMonoidProduct2_info:
         const Data.Semigroup.Internal.$fMonoidProduct2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.106884855 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_info;
         const 0;
 },
 z_s6ANz_entry() //  [R1]
         { []
         }
     {offset
       c6Bh7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Bh8; else goto c6Bh9;
       c6Bh8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bh9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6ANz_info" {
     z_s6ANz_info:
         const z_s6ANz_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+56;
 },
 go_s6ANA_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Bhm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Bhn; else goto c6Bho;
       c6Bhn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bho: // global
           I64[Sp - 32] = block_c6Bhf_info;
           _s6ANA::P64 = R1;
           _s6ANy::P64 = P64[R1 + 7];
           _s6ANz::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6ANy::P64;
           P64[Sp - 16] = _s6ANz::P64;
           P64[Sp - 8] = _s6ANA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Bhy; else goto c6Bhg;
       u6Bhy: // global
           call _c6Bhf(R1) args: 0, res: 0, upd: 0;
       c6Bhg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6ANA_info" {
     go_s6ANA_info:
         const go_s6ANA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6Bhf() //  [R1]
         { []
         }
     {offset
       c6Bhf: // global
           if (R1 & 7 == 1) goto c6Bhj; else goto c6Bhk;
       c6Bhj: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Bhk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Bhw; else goto c6Bhv;
       c6Bhw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Bhv: // global
           _s6AND::P64 = P64[R1 + 6];
           _s6ANE::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6ANE::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6AND::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Bhf_info" {
     block_c6Bhf_info:
         const _c6Bhf;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_entry() //  [R2]
         { []
         }
     {offset
       c6Bhz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6BhD; else goto c6BhC;
       c6BhD: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BhC: // global
           I64[Hp - 40] = z_s6ANz_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6ANA_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S6Bb6_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.117312745 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidProduct_closure" {
     Data.Semigroup.Internal.$fMonoidProduct_closure:
         const Data.Semigroup.Internal.$fMonoidProduct_info;
         const 0;
 },
 sat_s6ANK_entry() //  [R1]
         { []
         }
     {offset
       c6Big: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bih; else goto c6Bii;
       c6Bih: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bii: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANK_info" {
     sat_s6ANK_info:
         const sat_s6ANK_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+72;
 },
 sat_s6ANJ_entry() //  [R1]
         { []
         }
     {offset
       c6Bin: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bio; else goto c6Bip;
       c6Bio: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANJ_info" {
     sat_s6ANJ_info:
         const sat_s6ANJ_entry;
         const 1;
         const 16;
 },
 sat_s6ANI_entry() //  [R1]
         { []
         }
     {offset
       c6Biu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Biv; else goto c6Biw;
       c6Biv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Biw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANI_info" {
     sat_s6ANI_info:
         const sat_s6ANI_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+64;
 },
 sat_s6ANH_entry() //  [R1]
         { []
         }
     {offset
       c6BiB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BiC; else goto c6BiD;
       c6BiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANH_info" {
     sat_s6ANH_info:
         const sat_s6ANH_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+40;
 },
 Data.Semigroup.Internal.$fMonoidProduct_entry() //  [R2]
         { []
         }
     {offset
       c6BiF: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6BiJ; else goto c6BiI;
       c6BiJ: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BiI: // global
           I64[Hp - 128] = sat_s6ANK_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6ANJ_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6ANI_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6ANH_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidProduct_info" {
     Data.Semigroup.Internal.$fMonoidProduct_info:
         const Data.Semigroup.Internal.$fMonoidProduct_entry;
         const 0;
         const 244813135886;
         const 4294967301;
         const S6Bb6_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.127135143 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorProduct_closure" {
     Data.Semigroup.Internal.$fFunctorProduct_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.Internal.$fFunctorDual2_closure+1;
         const Data.Semigroup.Internal.$fFunctorDual1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.129100564 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct3_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct3_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct3_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct3_entry() //  [R2]
         { []
         }
     {offset
       c6Bjn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct3_info" {
     Data.Semigroup.Internal.$fApplicativeProduct3_info:
         const Data.Semigroup.Internal.$fApplicativeProduct3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.132375397 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct2_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct2_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct2_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Bjy: // global
           _s6ANM::P64 = R2;
           R2 = R3;
           R1 = _s6ANM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct2_info" {
     Data.Semigroup.Internal.$fApplicativeProduct2_info:
         const Data.Semigroup.Internal.$fApplicativeProduct2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.13583537 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct_$c*>_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct_$c*>_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct_$c*>_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct_$c*>_entry() //  [R3]
         { []
         }
     {offset
       c6BjJ: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct_$c*>_info" {
     Data.Semigroup.Internal.$fApplicativeProduct_$c*>_info:
         const Data.Semigroup.Internal.$fApplicativeProduct_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.139448752 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct1_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct1_closure:
         const Data.Semigroup.Internal.$fApplicativeProduct1_info;
 },
 Data.Semigroup.Internal.$fApplicativeProduct1_entry() //  [R2]
         { []
         }
     {offset
       c6BjU: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeProduct1_info" {
     Data.Semigroup.Internal.$fApplicativeProduct1_info:
         const Data.Semigroup.Internal.$fApplicativeProduct1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.142453494 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeProduct_closure" {
     Data.Semigroup.Internal.$fApplicativeProduct_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.Internal.$fFunctorProduct_closure+1;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const Data.Semigroup.Internal.$fApplicativeProduct3_closure+1;
         const Data.Semigroup.Internal.$fApplicativeProduct2_closure+2;
         const Data.Semigroup.Internal.$fApplicativeProduct_$c*>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeProduct1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.145616182 UTC

[section ""data" . Data.Semigroup.Internal.$fFunctorAlt_closure" {
     Data.Semigroup.Internal.$fFunctorAlt_closure:
         const Data.Semigroup.Internal.$fFunctorAlt_info;
 },
 sat_s6ANU_entry() //  [R1]
         { []
         }
     {offset
       c6Bka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bkb; else goto c6Bkc;
       c6Bkb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bkc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<$_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANU_info" {
     sat_s6ANU_info:
         const sat_s6ANU_entry;
         const 1;
         const 16;
 },
 sat_s6ANT_entry() //  [R1]
         { []
         }
     {offset
       c6Bkh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bki; else goto c6Bkj;
       c6Bki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bkj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.fmap_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANT_info" {
     sat_s6ANT_info:
         const sat_s6ANT_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fFunctorAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Bkl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Bkp; else goto c6Bko;
       c6Bkp: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fFunctorAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bko: // global
           I64[Hp - 64] = sat_s6ANU_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6ANT_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fFunctorAlt_info" {
     Data.Semigroup.Internal.$fFunctorAlt_info:
         const Data.Semigroup.Internal.$fFunctorAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.152834773 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_closure" {
     Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_closure:
         const Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_info;
 },
 sat_s6ANW_entry() //  [R1]
         { []
         }
     {offset
       c6BkS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BkT; else goto c6BkU;
       c6BkT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BkU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANW_info" {
     sat_s6ANW_info:
         const sat_s6ANW_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_entry() //  [R2]
         { []
         }
     {offset
       c6BkV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BkZ; else goto c6BkY;
       c6BkZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BkY: // global
           I64[Hp - 16] = sat_s6ANW_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fFunctorAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_info" {
     Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_info:
         const Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.160569012 UTC

[section ""data" . Data.Semigroup.Internal.$fApplicativeAlt_closure" {
     Data.Semigroup.Internal.$fApplicativeAlt_closure:
         const Data.Semigroup.Internal.$fApplicativeAlt_info;
 },
 sat_s6AO3_entry() //  [R1]
         { []
         }
     {offset
       c6Bli: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Blj; else goto c6Blk;
       c6Blj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Blk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO3_info" {
     sat_s6AO3_info:
         const sat_s6AO3_entry;
         const 1;
         const 16;
 },
 sat_s6AO2_entry() //  [R1]
         { []
         }
     {offset
       c6Blp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Blq; else goto c6Blr;
       c6Blq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Blr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO2_info" {
     sat_s6AO2_info:
         const sat_s6AO2_entry;
         const 1;
         const 16;
 },
 sat_s6AO1_entry() //  [R1]
         { []
         }
     {offset
       c6Blw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Blx; else goto c6Bly;
       c6Blx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bly: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.liftA2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO1_info" {
     sat_s6AO1_info:
         const sat_s6AO1_entry;
         const 1;
         const 16;
 },
 sat_s6AO0_entry() //  [R1]
         { []
         }
     {offset
       c6BlD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BlE; else goto c6BlF;
       c6BlE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BlF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO0_info" {
     sat_s6AO0_info:
         const sat_s6AO0_entry;
         const 1;
         const 16;
 },
 sat_s6ANZ_entry() //  [R1]
         { []
         }
     {offset
       c6BlK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BlL; else goto c6BlM;
       c6BlL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BlM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANZ_info" {
     sat_s6ANZ_info:
         const sat_s6ANZ_entry;
         const 1;
         const 16;
 },
 sat_s6ANY_entry() //  [R1]
         { []
         }
     {offset
       c6BlR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BlS; else goto c6BlT;
       c6BlS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BlT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fApplicativeAlt_$cp1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ANY_info" {
     sat_s6ANY_info:
         const sat_s6ANY_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fApplicativeAlt_entry() //  [R2]
         { []
         }
     {offset
       c6BlV: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c6BlZ; else goto c6BlY;
       c6BlZ: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fApplicativeAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BlY: // global
           I64[Hp - 192] = sat_s6AO3_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s6AO2_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s6AO1_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s6AO0_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s6ANZ_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s6ANY_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 120;
           P64[Hp - 16] = Hp - 144;
           P64[Hp - 8] = Hp - 168;
           P64[Hp] = Hp - 192;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fApplicativeAlt_info" {
     Data.Semigroup.Internal.$fApplicativeAlt_info:
         const Data.Semigroup.Internal.$fApplicativeAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.176756141 UTC

[section ""data" . Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_closure" {
     Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_closure:
         const Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_info;
 },
 sat_s6AO5_entry() //  [R1]
         { []
         }
     {offset
       c6BmU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BmV; else goto c6BmW;
       c6BmV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BmW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO5_info" {
     sat_s6AO5_info:
         const sat_s6AO5_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_entry() //  [R2]
         { []
         }
     {offset
       c6BmX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Bn1; else goto c6Bn0;
       c6Bn1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bn0: // global
           I64[Hp - 16] = sat_s6AO5_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fApplicativeAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_info" {
     Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_info:
         const Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.184268707 UTC

[section ""data" . Data.Semigroup.Internal.$fAlternativeAlt_closure" {
     Data.Semigroup.Internal.$fAlternativeAlt_closure:
         const Data.Semigroup.Internal.$fAlternativeAlt_info;
 },
 sat_s6AOb_entry() //  [R1]
         { []
         }
     {offset
       c6Bnk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bnl; else goto c6Bnm;
       c6Bnl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bnm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.many_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOb_info" {
     sat_s6AOb_info:
         const sat_s6AOb_entry;
         const 1;
         const 16;
 },
 sat_s6AOa_entry() //  [R1]
         { []
         }
     {offset
       c6Bnr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bns; else goto c6Bnt;
       c6Bns: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bnt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.some_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOa_info" {
     sat_s6AOa_info:
         const sat_s6AOa_entry;
         const 1;
         const 16;
 },
 sat_s6AO9_entry() //  [R1]
         { []
         }
     {offset
       c6Bny: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bnz; else goto c6BnA;
       c6Bnz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BnA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO9_info" {
     sat_s6AO9_info:
         const sat_s6AO9_entry;
         const 1;
         const 16;
 },
 sat_s6AO8_entry() //  [R1]
         { []
         }
     {offset
       c6BnF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BnG; else goto c6BnH;
       c6BnG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BnH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO8_info" {
     sat_s6AO8_info:
         const sat_s6AO8_entry;
         const 1;
         const 16;
 },
 sat_s6AO7_entry() //  [R1]
         { []
         }
     {offset
       c6BnM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BnN; else goto c6BnO;
       c6BnN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BnO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fAlternativeAlt_$cp1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AO7_info" {
     sat_s6AO7_info:
         const sat_s6AO7_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fAlternativeAlt_entry() //  [R2]
         { []
         }
     {offset
       c6BnQ: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c6BnU; else goto c6BnT;
       c6BnU: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fAlternativeAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BnT: // global
           I64[Hp - 160] = sat_s6AOb_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6AOa_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6AO9_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6AO8_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6AO7_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fAlternativeAlt_info" {
     Data.Semigroup.Internal.$fAlternativeAlt_info:
         const Data.Semigroup.Internal.$fAlternativeAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.197441831 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_closure" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_closure:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_info;
 },
 sat_s6AOd_entry() //  [R1]
         { []
         }
     {offset
       c6BoI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BoJ; else goto c6BoK;
       c6BoJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BoK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOd_info" {
     sat_s6AOd_info:
         const sat_s6AOd_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_entry() //  [R2]
         { []
         }
     {offset
       c6BoL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BoP; else goto c6BoO;
       c6BoP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BoO: // global
           I64[Hp - 16] = sat_s6AOd_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fAlternativeAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_info" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_info:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.20318114 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_closure" {
     Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_closure:
         const Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_info;
 },
 sat_s6AOf_entry() //  [R1]
         { []
         }
     {offset
       c6Bp8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bp9; else goto c6Bpa;
       c6Bp9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bpa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOf_info" {
     sat_s6AOf_info:
         const sat_s6AOf_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_entry() //  [R2]
         { []
         }
     {offset
       c6Bpb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Bpf; else goto c6Bpe;
       c6Bpf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bpe: // global
           I64[Hp - 16] = sat_s6AOf_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fApplicativeAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_info" {
     Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_info:
         const Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.210864757 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadAlt_closure" {
     Data.Semigroup.Internal.$fMonadAlt_closure:
         const Data.Semigroup.Internal.$fMonadAlt_info;
 },
 sat_s6AOl_entry() //  [R1]
         { []
         }
     {offset
       c6Bpy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bpz; else goto c6BpA;
       c6Bpz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BpA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.fail_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOl_info" {
     sat_s6AOl_info:
         const sat_s6AOl_entry;
         const 1;
         const 16;
 },
 sat_s6AOk_entry() //  [R1]
         { []
         }
     {offset
       c6BpF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BpG; else goto c6BpH;
       c6BpG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BpH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOk_info" {
     sat_s6AOk_info:
         const sat_s6AOk_entry;
         const 1;
         const 16;
 },
 sat_s6AOj_entry() //  [R1]
         { []
         }
     {offset
       c6BpM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BpN; else goto c6BpO;
       c6BpN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BpO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOj_info" {
     sat_s6AOj_info:
         const sat_s6AOj_entry;
         const 1;
         const 16;
 },
 sat_s6AOi_entry() //  [R1]
         { []
         }
     {offset
       c6BpT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BpU; else goto c6BpV;
       c6BpU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BpV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOi_info" {
     sat_s6AOi_info:
         const sat_s6AOi_entry;
         const 1;
         const 16;
 },
 sat_s6AOh_entry() //  [R1]
         { []
         }
     {offset
       c6Bq0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bq1; else goto c6Bq2;
       c6Bq1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bq2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonadAlt_$cp1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOh_info" {
     sat_s6AOh_info:
         const sat_s6AOh_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Bq4: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c6Bq8; else goto c6Bq7;
       c6Bq8: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bq7: // global
           I64[Hp - 160] = sat_s6AOl_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6AOk_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6AOj_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6AOi_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6AOh_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Monad_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadAlt_info" {
     Data.Semigroup.Internal.$fMonadAlt_info:
         const Data.Semigroup.Internal.$fMonadAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.224209311 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_closure" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_closure:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_info;
 },
 sat_s6AOn_entry() //  [R1]
         { []
         }
     {offset
       c6BqW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BqX; else goto c6BqY;
       c6BqX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BqY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOn_info" {
     sat_s6AOn_info:
         const sat_s6AOn_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_entry() //  [R2]
         { []
         }
     {offset
       c6BqZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Br3; else goto c6Br2;
       c6Br3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Br2: // global
           I64[Hp - 16] = sat_s6AOn_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fMonadAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_info" {
     Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_info:
         const Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.231250741 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadPlusAlt_closure" {
     Data.Semigroup.Internal.$fMonadPlusAlt_closure:
         const Data.Semigroup.Internal.$fMonadPlusAlt_info;
 },
 sat_s6AOs_entry() //  [R1]
         { []
         }
     {offset
       c6Brm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Brn; else goto c6Bro;
       c6Brn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bro: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mplus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOs_info" {
     sat_s6AOs_info:
         const sat_s6AOs_entry;
         const 1;
         const 16;
 },
 sat_s6AOr_entry() //  [R1]
         { []
         }
     {offset
       c6Brt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bru; else goto c6Brv;
       c6Bru: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Brv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOr_info" {
     sat_s6AOr_info:
         const sat_s6AOr_entry;
         const 1;
         const 16;
 },
 sat_s6AOq_entry() //  [R1]
         { []
         }
     {offset
       c6BrA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BrB; else goto c6BrC;
       c6BrB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BrC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonadPlusAlt_$cp2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOq_info" {
     sat_s6AOq_info:
         const sat_s6AOq_entry;
         const 1;
         const 16;
 },
 sat_s6AOp_entry() //  [R1]
         { []
         }
     {offset
       c6BrH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BrI; else goto c6BrJ;
       c6BrI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BrJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonadPlusAlt_$cp1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOp_info" {
     sat_s6AOp_info:
         const sat_s6AOp_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fMonadPlusAlt_entry() //  [R2]
         { []
         }
     {offset
       c6BrL: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6BrP; else goto c6BrO;
       c6BrP: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonadPlusAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BrO: // global
           I64[Hp - 128] = sat_s6AOs_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6AOr_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AOq_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AOp_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:MonadPlus_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadPlusAlt_info" {
     Data.Semigroup.Internal.$fMonadPlusAlt_info:
         const Data.Semigroup.Internal.$fMonadPlusAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.244846107 UTC

[section ""data" . Data.Semigroup.Internal.$fEnumAlt_closure" {
     Data.Semigroup.Internal.$fEnumAlt_closure:
         const Data.Semigroup.Internal.$fEnumAlt_info;
 },
 sat_s6AOB_entry() //  [R1]
         { []
         }
     {offset
       c6Bsw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bsx; else goto c6Bsy;
       c6Bsx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bsy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOB_info" {
     sat_s6AOB_info:
         const sat_s6AOB_entry;
         const 1;
         const 16;
 },
 sat_s6AOA_entry() //  [R1]
         { []
         }
     {offset
       c6BsD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BsE; else goto c6BsF;
       c6BsE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BsF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOA_info" {
     sat_s6AOA_info:
         const sat_s6AOA_entry;
         const 1;
         const 16;
 },
 sat_s6AOz_entry() //  [R1]
         { []
         }
     {offset
       c6BsK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BsL; else goto c6BsM;
       c6BsL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BsM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOz_info" {
     sat_s6AOz_info:
         const sat_s6AOz_entry;
         const 1;
         const 16;
 },
 sat_s6AOy_entry() //  [R1]
         { []
         }
     {offset
       c6BsR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BsS; else goto c6BsT;
       c6BsS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BsT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOy_info" {
     sat_s6AOy_info:
         const sat_s6AOy_entry;
         const 1;
         const 16;
 },
 sat_s6AOx_entry() //  [R1]
         { []
         }
     {offset
       c6BsY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BsZ; else goto c6Bt0;
       c6BsZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bt0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOx_info" {
     sat_s6AOx_info:
         const sat_s6AOx_entry;
         const 1;
         const 16;
 },
 sat_s6AOw_entry() //  [R1]
         { []
         }
     {offset
       c6Bt5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bt6; else goto c6Bt7;
       c6Bt6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bt7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOw_info" {
     sat_s6AOw_info:
         const sat_s6AOw_entry;
         const 1;
         const 16;
 },
 sat_s6AOv_entry() //  [R1]
         { []
         }
     {offset
       c6Btc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Btd; else goto c6Bte;
       c6Btd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bte: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOv_info" {
     sat_s6AOv_info:
         const sat_s6AOv_entry;
         const 1;
         const 16;
 },
 sat_s6AOu_entry() //  [R1]
         { []
         }
     {offset
       c6Btj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Btk; else goto c6Btl;
       c6Btk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Btl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOu_info" {
     sat_s6AOu_info:
         const sat_s6AOu_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEnumAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Btn: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6Btr; else goto c6Btq;
       c6Btr: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEnumAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Btq: // global
           I64[Hp - 256] = sat_s6AOB_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6AOA_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6AOz_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6AOy_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6AOx_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6AOw_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6AOv_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6AOu_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEnumAlt_info" {
     Data.Semigroup.Internal.$fEnumAlt_info:
         const Data.Semigroup.Internal.$fEnumAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.264662662 UTC

[section ""data" . Data.Semigroup.Internal.$fNumAlt_closure" {
     Data.Semigroup.Internal.$fNumAlt_closure:
         const Data.Semigroup.Internal.$fNumAlt_info;
 },
 sat_s6AOJ_entry() //  [R1]
         { []
         }
     {offset
       c6BuA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BuB; else goto c6BuC;
       c6BuB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BuC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOJ_info" {
     sat_s6AOJ_info:
         const sat_s6AOJ_entry;
         const 1;
         const 16;
 },
 sat_s6AOI_entry() //  [R1]
         { []
         }
     {offset
       c6BuH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BuI; else goto c6BuJ;
       c6BuI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BuJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOI_info" {
     sat_s6AOI_info:
         const sat_s6AOI_entry;
         const 1;
         const 16;
 },
 sat_s6AOH_entry() //  [R1]
         { []
         }
     {offset
       c6BuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BuP; else goto c6BuQ;
       c6BuP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BuQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOH_info" {
     sat_s6AOH_info:
         const sat_s6AOH_entry;
         const 1;
         const 16;
 },
 sat_s6AOG_entry() //  [R1]
         { []
         }
     {offset
       c6BuV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BuW; else goto c6BuX;
       c6BuW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BuX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOG_info" {
     sat_s6AOG_info:
         const sat_s6AOG_entry;
         const 1;
         const 16;
 },
 sat_s6AOF_entry() //  [R1]
         { []
         }
     {offset
       c6Bv2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bv3; else goto c6Bv4;
       c6Bv3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bv4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOF_info" {
     sat_s6AOF_info:
         const sat_s6AOF_entry;
         const 1;
         const 16;
 },
 sat_s6AOE_entry() //  [R1]
         { []
         }
     {offset
       c6Bv9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bva; else goto c6Bvb;
       c6Bva: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bvb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOE_info" {
     sat_s6AOE_info:
         const sat_s6AOE_entry;
         const 1;
         const 16;
 },
 sat_s6AOD_entry() //  [R1]
         { []
         }
     {offset
       c6Bvg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bvh; else goto c6Bvi;
       c6Bvh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bvi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOD_info" {
     sat_s6AOD_info:
         const sat_s6AOD_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fNumAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Bvk: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c6Bvo; else goto c6Bvn;
       c6Bvo: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fNumAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bvn: // global
           I64[Hp - 224] = sat_s6AOJ_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s6AOI_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6AOH_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6AOG_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s6AOF_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6AOE_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AOD_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fNumAlt_info" {
     Data.Semigroup.Internal.$fNumAlt_info:
         const Data.Semigroup.Internal.$fNumAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.285514623 UTC

[section ""data" . Data.Semigroup.Internal.$fEqAlt_closure" {
     Data.Semigroup.Internal.$fEqAlt_closure:
         const Data.Semigroup.Internal.$fEqAlt_info;
 },
 sat_s6AOM_entry() //  [R1]
         { []
         }
     {offset
       c6Bwq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bwr; else goto c6Bws;
       c6Bwr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bws: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOM_info" {
     sat_s6AOM_info:
         const sat_s6AOM_entry;
         const 1;
         const 16;
 },
 sat_s6AOL_entry() //  [R1]
         { []
         }
     {offset
       c6Bwx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bwy; else goto c6Bwz;
       c6Bwy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bwz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOL_info" {
     sat_s6AOL_info:
         const sat_s6AOL_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqAlt_entry() //  [R2]
         { []
         }
     {offset
       c6BwB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6BwF; else goto c6BwE;
       c6BwF: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BwE: // global
           I64[Hp - 64] = sat_s6AOM_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6AOL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqAlt_info" {
     Data.Semigroup.Internal.$fEqAlt_info:
         const Data.Semigroup.Internal.$fEqAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.292888814 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_info;
 },
 sat_s6AOO_entry() //  [R1]
         { []
         }
     {offset
       c6Bx8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bx9; else goto c6Bxa;
       c6Bx9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Bxa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOO_info" {
     sat_s6AOO_info:
         const sat_s6AOO_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6Bxb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Bxf; else goto c6Bxe;
       c6Bxf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bxe: // global
           I64[Hp - 16] = sat_s6AOO_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.30283366 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAlt_closure" {
     Data.Semigroup.Internal.$fOrdAlt_closure:
         const Data.Semigroup.Internal.$fOrdAlt_info;
 },
 sat_s6AOX_entry() //  [R1]
         { []
         }
     {offset
       c6Bxy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bxz; else goto c6BxA;
       c6Bxz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BxA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOX_info" {
     sat_s6AOX_info:
         const sat_s6AOX_entry;
         const 1;
         const 16;
 },
 sat_s6AOW_entry() //  [R1]
         { []
         }
     {offset
       c6BxF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BxG; else goto c6BxH;
       c6BxG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BxH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOW_info" {
     sat_s6AOW_info:
         const sat_s6AOW_entry;
         const 1;
         const 16;
 },
 sat_s6AOV_entry() //  [R1]
         { []
         }
     {offset
       c6BxM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BxN; else goto c6BxO;
       c6BxN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BxO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOV_info" {
     sat_s6AOV_info:
         const sat_s6AOV_entry;
         const 1;
         const 16;
 },
 sat_s6AOU_entry() //  [R1]
         { []
         }
     {offset
       c6BxT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BxU; else goto c6BxV;
       c6BxU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BxV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOU_info" {
     sat_s6AOU_info:
         const sat_s6AOU_entry;
         const 1;
         const 16;
 },
 sat_s6AOT_entry() //  [R1]
         { []
         }
     {offset
       c6By0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6By1; else goto c6By2;
       c6By1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6By2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOT_info" {
     sat_s6AOT_info:
         const sat_s6AOT_entry;
         const 1;
         const 16;
 },
 sat_s6AOS_entry() //  [R1]
         { []
         }
     {offset
       c6By7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6By8; else goto c6By9;
       c6By8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6By9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOS_info" {
     sat_s6AOS_info:
         const sat_s6AOS_entry;
         const 1;
         const 16;
 },
 sat_s6AOR_entry() //  [R1]
         { []
         }
     {offset
       c6Bye: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Byf; else goto c6Byg;
       c6Byf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Byg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOR_info" {
     sat_s6AOR_info:
         const sat_s6AOR_entry;
         const 1;
         const 16;
 },
 sat_s6AOQ_entry() //  [R1]
         { []
         }
     {offset
       c6Byl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Bym; else goto c6Byn;
       c6Bym: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Byn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdAlt_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AOQ_info" {
     sat_s6AOQ_info:
         const sat_s6AOQ_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Byp: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6Byt; else goto c6Bys;
       c6Byt: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Bys: // global
           I64[Hp - 256] = sat_s6AOX_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6AOW_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6AOV_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6AOU_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6AOT_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6AOS_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6AOR_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6AOQ_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdAlt_info" {
     Data.Semigroup.Internal.$fOrdAlt_info:
         const Data.Semigroup.Internal.$fOrdAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.319426713 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt1_closure" {
     Data.Semigroup.Internal.$fShowAlt1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.321384852 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAlt3_bytes" {
     Data.Semigroup.Internal.$fShowAlt3_bytes:
         I8[] [65,108,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.323342522 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAlt2_bytes" {
     Data.Semigroup.Internal.$fShowAlt2_bytes:
         I8[] [103,101,116,65,108,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.325032533 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll5_bytes" {
     Data.Semigroup.Internal.$fReadAll5_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.332381055 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec1_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec1_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec1_info;
 },
 f1_s6AP1_entry() //  [R1]
         { []
         }
     {offset
       c6BzG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6BzH; else goto c6BzI;
       c6BzH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BzI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6AP1_info" {
     f1_s6AP1_info:
         const f1_s6AP1_entry;
         const 2;
         const 18;
 },
 sat_s6AP4_entry() //  [R1]
         { []
         }
     {offset
       c6BA3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BA4; else goto c6BA5;
       c6BA4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BA5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AP4_info" {
     sat_s6AP4_info:
         const sat_s6AP4_entry;
         const 1;
         const 16;
 },
 sat_s6AP5_entry() //  [R1]
         { []
         }
     {offset
       c6BA6: // global
           _s6AP5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BA7; else goto c6BA8;
       c6BA8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BAa; else goto c6BA9;
       c6BAa: // global
           HpAlloc = 24;
           goto c6BA7;
       c6BA7: // global
           R1 = _s6AP5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BA9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AP5::P64;
           _s6AP1::P64 = P64[_s6AP5::P64 + 16];
           _s6AP3::P64 = P64[_s6AP5::P64 + 24];
           I64[Hp - 16] = sat_s6AP4_info;
           P64[Hp] = _s6AP3::P64;
           R2 = Hp - 16;
           R1 = _s6AP1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AP5_info" {
     sat_s6AP5_info:
         const sat_s6AP5_entry;
         const 2;
         const 18;
 },
 sat_s6AP6_entry() //  [R1]
         { []
         }
     {offset
       c6BAb: // global
           _s6AP6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BAc; else goto c6BAd;
       c6BAd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BAf; else goto c6BAe;
       c6BAf: // global
           HpAlloc = 32;
           goto c6BAc;
       c6BAc: // global
           R1 = _s6AP6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BAe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AP6::P64;
           _s6AP1::P64 = P64[_s6AP6::P64 + 16];
           _s6AP3::P64 = P64[_s6AP6::P64 + 24];
           I64[Hp - 24] = sat_s6AP5_info;
           P64[Hp - 8] = _s6AP1::P64;
           P64[Hp] = _s6AP3::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AP6_info" {
     sat_s6AP6_info:
         const sat_s6AP6_entry;
         const 2;
         const 18;
 },
 sat_s6AP7_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BAg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BAk; else goto c6BAj;
       c6BAk: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BAj: // global
           _s6AP1::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6AP6_info;
           P64[Hp - 8] = _s6AP1::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AP7_info" {
     sat_s6AP7_info:
         const sat_s6AP7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6APa_entry() //  [R1]
         { []
         }
     {offset
       c6BAI: // global
           _s6APa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BAJ; else goto c6BAK;
       c6BAK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BAM; else goto c6BAL;
       c6BAM: // global
           HpAlloc = 24;
           goto c6BAJ;
       c6BAJ: // global
           R1 = _s6APa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BAL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6APa::P64;
           _s6AP8::P64 = P64[_s6APa::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6AP8::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6APa_info" {
     sat_s6APa_info:
         const sat_s6APa_entry;
         const 1;
         const 16;
 },
 sat_s6APb_entry() //  [R1]
         { []
         }
     {offset
       c6BAN: // global
           _s6APb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BAO; else goto c6BAP;
       c6BAP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BAR; else goto c6BAQ;
       c6BAR: // global
           HpAlloc = 24;
           goto c6BAO;
       c6BAO: // global
           R1 = _s6APb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BAQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6APb::P64;
           _s6AP1::P64 = P64[_s6APb::P64 + 16];
           _s6AP8::P64 = P64[_s6APb::P64 + 24];
           I64[Hp - 16] = sat_s6APa_info;
           P64[Hp] = _s6AP8::P64;
           R2 = Hp - 16;
           R1 = _s6AP1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6APb_info" {
     sat_s6APb_info:
         const sat_s6APb_entry;
         const 2;
         const 18;
 },
 sat_s6APc_entry() //  [R1]
         { []
         }
     {offset
       c6BAS: // global
           _s6APc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BAT; else goto c6BAU;
       c6BAU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BAW; else goto c6BAV;
       c6BAW: // global
           HpAlloc = 32;
           goto c6BAT;
       c6BAT: // global
           R1 = _s6APc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BAV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6APc::P64;
           _s6AP1::P64 = P64[_s6APc::P64 + 16];
           _s6AP8::P64 = P64[_s6APc::P64 + 24];
           I64[Hp - 24] = sat_s6APb_info;
           P64[Hp - 8] = _s6AP1::P64;
           P64[Hp] = _s6AP8::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6APc_info" {
     sat_s6APc_info:
         const sat_s6APc_entry;
         const 2;
         const 18;
 },
 sat_s6APd_entry() //  [R1]
         { []
         }
     {offset
       c6BAX: // global
           _s6APd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BAY; else goto c6BAZ;
       c6BAZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BB1; else goto c6BB0;
       c6BB1: // global
           HpAlloc = 32;
           goto c6BAY;
       c6BAY: // global
           R1 = _s6APd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BB0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6APd::P64;
           _s6AP1::P64 = P64[_s6APd::P64 + 16];
           _s6AP8::P64 = P64[_s6APd::P64 + 24];
           I64[Hp - 24] = sat_s6APc_info;
           P64[Hp - 8] = _s6AP1::P64;
           P64[Hp] = _s6AP8::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6APd_info" {
     sat_s6APd_info:
         const sat_s6APd_entry;
         const 2;
         const 18;
 },
 sat_s6APe_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BB3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6BB7; else goto c6BB6;
       c6BB7: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BB6: // global
           _s6AP1::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6APd_info;
           P64[Hp - 32] = _s6AP1::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APe_info" {
     sat_s6APe_info:
         const sat_s6APe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6BBb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6BBf; else goto c6BBe;
       c6BBf: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BBe: // global
           I64[Hp - 40] = f1_s6AP1_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6BzC::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6BB9; else goto c6BBa;
       c6BB9: // global
           I64[Hp - 8] = sat_s6AP7_info;
           P64[Hp] = _c6BzC::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6BBa: // global
           I64[Hp - 8] = sat_s6APe_info;
           P64[Hp] = _c6BzC::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec1_info" {
     Data.Semigroup.Internal.$w$cshowsPrec1_info:
         const Data.Semigroup.Internal.$w$cshowsPrec1_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.355145628 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6BCw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6BCx; else goto c6BCy;
       c6BCx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BCy: // global
           I64[Sp - 24] = block_c6BCt_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6BCC; else goto c6BCu;
       u6BCC: // global
           call _c6BCt(R1) args: 0, res: 0, upd: 0;
       c6BCu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6BCt() //  [R1]
         { []
         }
     {offset
       c6BCt: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BCt_info" {
     block_c6BCt_info:
         const _c6BCt;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.360897101 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll4_closure" {
     Data.Semigroup.Internal.$fReadAll4_closure:
         const Data.Semigroup.Internal.$fReadAll4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll4_entry() //  [R1]
         { []
         }
     {offset
       c6BCT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BCU; else goto c6BCV;
       c6BCU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BCV: // global
           (_c6BCQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6BCQ::I64 == 0) goto c6BCS; else goto c6BCR;
       c6BCS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6BCR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6BCQ::I64;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll4_info" {
     Data.Semigroup.Internal.$fReadAll4_info:
         const Data.Semigroup.Internal.$fReadAll4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.366361661 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_$cshow_closure" {
     Data.Semigroup.Internal.$fShowAlt_$cshow_closure:
         const Data.Semigroup.Internal.$fShowAlt_$cshow_info;
         const 0;
 },
 sat_s6APm_entry() //  [R1]
         { []
         }
     {offset
       c6BDg: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6BDh; else goto c6BDi;
       c6BDh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BDi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6APm_info" {
     sat_s6APm_info:
         const sat_s6APm_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+88;
 },
 sat_s6APn_entry() //  [R1]
         { []
         }
     {offset
       c6BDj: // global
           _s6APn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BDk; else goto c6BDl;
       c6BDl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BDn; else goto c6BDm;
       c6BDn: // global
           HpAlloc = 32;
           goto c6BDk;
       c6BDk: // global
           R1 = _s6APn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BDm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6APn::P64;
           _s6APk::P64 = P64[_s6APn::P64 + 16];
           _s6APl::P64 = P64[_s6APn::P64 + 24];
           I64[Hp - 24] = sat_s6APm_info;
           P64[Hp - 8] = _s6APk::P64;
           P64[Hp] = _s6APl::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6APn_info" {
     sat_s6APn_info:
         const sat_s6APn_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+88;
 },
 Data.Semigroup.Internal.$fShowAlt_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6BDo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BDs; else goto c6BDr;
       c6BDs: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BDr: // global
           I64[Hp - 24] = sat_s6APn_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAlt3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_$cshow_info" {
     Data.Semigroup.Internal.$fShowAlt_$cshow_info:
         const Data.Semigroup.Internal.$fShowAlt_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Bb6_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.37415255 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowAlt_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowAlt_$cshowList_info;
 },
 sat_s6APs_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BDW: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APs_info" {
     sat_s6APs_info:
         const sat_s6APs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowAlt_$cshowList_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c6BDZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BE3; else goto c6BE2;
       c6BE3: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BE2: // global
           I64[Hp - 8] = sat_s6APs_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_$cshowList_info" {
     Data.Semigroup.Internal.$fShowAlt_$cshowList_info:
         const Data.Semigroup.Internal.$fShowAlt_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.38023915 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAlt_closure" {
     Data.Semigroup.Internal.$fShowAlt_closure:
         const Data.Semigroup.Internal.$fShowAlt_info;
         const 0;
 },
 sat_s6APw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6BEl: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowAlt_$cshowList_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APw_info" {
     sat_s6APw_info:
         const sat_s6APw_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6APv_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BEt: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowAlt_$cshow_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APv_info" {
     sat_s6APv_info:
         const sat_s6APv_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Bb6_srt+96;
 },
 sat_s6APu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6BEB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowAlt_$cshowsPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APu_info" {
     sat_s6APu_info:
         const sat_s6APu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowAlt_entry() //  [R2]
         { []
         }
     {offset
       c6BEF: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6BEJ; else goto c6BEI;
       c6BEJ: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BEI: // global
           I64[Hp - 72] = sat_s6APw_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6APv_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6APu_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAlt_info" {
     Data.Semigroup.Internal.$fShowAlt_info:
         const Data.Semigroup.Internal.$fShowAlt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.388561767 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAlt5_bytes" {
     Data.Semigroup.Internal.$fReadAlt5_bytes:
         I8[] [65,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.390939744 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt4_closure" {
     Data.Semigroup.Internal.$fReadAlt4_closure:
         const Data.Semigroup.Internal.$fReadAlt4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAlt4_entry() //  [R1]
         { []
         }
     {offset
       c6BFc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BFd; else goto c6BFe;
       c6BFd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BFe: // global
           (_c6BF9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6BF9::I64 == 0) goto c6BFb; else goto c6BFa;
       c6BFb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6BFa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6BF9::I64;
           R2 = Data.Semigroup.Internal.$fReadAlt5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt4_info" {
     Data.Semigroup.Internal.$fReadAlt4_info:
         const Data.Semigroup.Internal.$fReadAlt4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.39478882 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_lexeme_closure" {
     Data.Semigroup.Internal.$fReadAlt_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadAlt4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.396538214 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll11_bytes" {
     Data.Semigroup.Internal.$fReadAll11_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.398901975 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll10_closure" {
     Data.Semigroup.Internal.$fReadAll10_closure:
         const Data.Semigroup.Internal.$fReadAll10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll10_entry() //  [R1]
         { []
         }
     {offset
       c6BFv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BFw; else goto c6BFx;
       c6BFw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BFx: // global
           (_c6BFs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6BFs::I64 == 0) goto c6BFu; else goto c6BFt;
       c6BFu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6BFt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6BFs::I64;
           R2 = Data.Semigroup.Internal.$fReadAll11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll10_info" {
     Data.Semigroup.Internal.$fReadAll10_info:
         const Data.Semigroup.Internal.$fReadAll10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.40246283 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_lexeme_closure" {
     Data.Semigroup.Internal.$fReadAll_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.Internal.$fReadAll10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.404137408 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAlt3_bytes" {
     Data.Semigroup.Internal.$fReadAlt3_bytes:
         I8[] [103,101,116,65,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.406472168 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt2_closure" {
     Data.Semigroup.Internal.$fReadAlt2_closure:
         const Data.Semigroup.Internal.$fReadAlt2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAlt2_entry() //  [R1]
         { []
         }
     {offset
       c6BFO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BFP; else goto c6BFQ;
       c6BFP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BFQ: // global
           (_c6BFL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6BFL::I64 == 0) goto c6BFN; else goto c6BFM;
       c6BFN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6BFM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6BFL::I64;
           R2 = Data.Semigroup.Internal.$fReadAlt3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt2_info" {
     Data.Semigroup.Internal.$fReadAlt2_info:
         const Data.Semigroup.Internal.$fReadAlt2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.40992438 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll6_closure" {
     Data.Semigroup.Internal.$fReadAll6_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.411654789 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll3_closure" {
     Data.Semigroup.Internal.$fReadAll3_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.419078247 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt1_closure" {
     Data.Semigroup.Internal.$fReadAlt1_closure:
         const Data.Semigroup.Internal.$fReadAlt1_info;
         const 0;
 },
 lvl12_s6APy_entry() //  [R1]
         { []
         }
     {offset
       c6BG9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6BGa; else goto c6BGb;
       c6BGa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BGb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6APy_info" {
     lvl12_s6APy_info:
         const lvl12_s6APy_entry;
         const 1;
         const 16;
 },
 ds_s6APz_entry() //  [R1]
         { []
         }
     {offset
       c6BGh: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6APz_info" {
     ds_s6APz_info:
         const ds_s6APz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6APK_entry() //  [R1]
         { []
         }
     {offset
       c6BGS: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APK_info" {
     sat_s6APK_info:
         const sat_s6APK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6APN_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BGY: // global
           _s6API::P64 = R2;
           _s6APN::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6BGZ; else goto c6BH0;
       c6BH0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BH2; else goto c6BH1;
       c6BH2: // global
           HpAlloc = 24;
           goto c6BGZ;
       c6BGZ: // global
           R2 = _s6API::P64;
           R1 = _s6APN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BH1: // global
           _s6APC::P64 = P64[_s6APN::P64 + 7];
           I64[Hp - 16] = sat_s6APK_info;
           P64[Hp - 8] = _s6APC::P64;
           P64[Hp] = _s6API::P64;
           I64[Sp - 8] = block_c6BGV_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APN_info" {
     sat_s6APN_info:
         const sat_s6APN_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 _c6BGV() //  [R1]
         { []
         }
     {offset
       c6BGV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BH5; else goto c6BH4;
       c6BH5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BH4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BGV_info" {
     block_c6BGV_info:
         const _c6BGV;
         const 0;
         const 30;
 },
 sat_s6APO_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BH6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BHa; else goto c6BH9;
       c6BHa: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BH9: // global
           _s6APz::P64 = P64[R1 + 7];
           _s6APC::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6APN_info;
           P64[Hp] = _s6APC::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6APz::P64;
           R2 = Data.Semigroup.Internal.$fReadAlt2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APO_info" {
     sat_s6APO_info:
         const sat_s6APO_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 sat_s6APR_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BHe: // global
           _s6APG::P64 = R2;
           _s6APR::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6BHf; else goto c6BHg;
       c6BHg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BHi; else goto c6BHh;
       c6BHi: // global
           HpAlloc = 24;
           goto c6BHf;
       c6BHf: // global
           R2 = _s6APG::P64;
           R1 = _s6APR::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BHh: // global
           _s6APz::P64 = P64[_s6APR::P64 + 7];
           _s6APC::P64 = P64[_s6APR::P64 + 15];
           I64[Hp - 16] = sat_s6APO_info;
           P64[Hp - 8] = _s6APz::P64;
           P64[Hp] = _s6APC::P64;
           I64[Sp - 8] = block_c6BHb_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APR_info" {
     sat_s6APR_info:
         const sat_s6APR_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 _c6BHb() //  [R1]
         { []
         }
     {offset
       c6BHb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BHl; else goto c6BHk;
       c6BHl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BHk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BHb_info" {
     block_c6BHb_info:
         const _c6BHb;
         const 0;
         const 30;
 },
 sat_s6APU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6BHm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6BHn; else goto c6BHo;
       c6BHn: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BHo: // global
           I64[Sp - 24] = block_c6BGp_info;
           _s6APz::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6APz::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6BHB; else goto c6BGq;
       u6BHB: // global
           call _c6BGp(R1) args: 0, res: 0, upd: 0;
       c6BGq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APU_info" {
     sat_s6APU_info:
         const sat_s6APU_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const S6Bb6_srt+112;
 },
 _c6BGp() //  [R1]
         { []
         }
     {offset
       c6BGp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BHr; else goto c6BHq;
       c6BHr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BHq: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6BHt; else goto c6BHx;
       c6BHt: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6BHx: // global
           I64[Hp - 16] = sat_s6APR_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6BHu_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAlt_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BGp_info" {
     block_c6BGp_info:
         const _c6BGp;
         const 2;
         const 270582939678;
         const S6Bb6_srt+112;
 },
 _c6BHu() //  [R1]
         { []
         }
     {offset
       c6BHu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BHA; else goto c6BHz;
       c6BHA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BHz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BHu_info" {
     block_c6BHu_info:
         const _c6BHu;
         const 0;
         const 30;
 },
 Data.Semigroup.Internal.$fReadAlt1_entry() //  [R2]
         { []
         }
     {offset
       c6BHC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6BHG; else goto c6BHF;
       c6BHG: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BHF: // global
           I64[Hp - 48] = lvl12_s6APy_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6APz_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6APU_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt1_info" {
     Data.Semigroup.Internal.$fReadAlt1_info:
         const Data.Semigroup.Internal.$fReadAlt1_entry;
         const 0;
         const 1095216660494;
         const 4294967301;
         const S6Bb6_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.443825986 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadAlt_$creadsPrec_info;
         const 0;
 },
 ds_s6APW_entry() //  [R1]
         { []
         }
     {offset
       c6BIW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BIX; else goto c6BIY;
       c6BIX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BIY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6APW_info" {
     ds_s6APW_info:
         const ds_s6APW_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+168;
 },
 sat_s6APY_entry() //  [R1]
         { []
         }
     {offset
       c6BJ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BJ9; else goto c6BJa;
       c6BJ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BJa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6APY_info" {
     sat_s6APY_info:
         const sat_s6APY_entry;
         const 2;
         const 18;
 },
 sat_s6APZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BJb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BJf; else goto c6BJe;
       c6BJf: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BJe: // global
           _s6APW::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6APY_info;
           P64[Hp - 8] = _s6APW::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6APZ_info" {
     sat_s6APZ_info:
         const sat_s6APZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadAlt_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6BJg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6BJk; else goto c6BJj;
       c6BJk: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BJj: // global
           I64[Hp - 32] = ds_s6APW_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6APZ_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadAlt_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadAlt_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.453221292 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadAlt_$creadListPrec_info;
         const 0;
 },
 sat_s6AQ1_entry() //  [R1]
         { []
         }
     {offset
       c6BJR: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AQ1_info" {
     sat_s6AQ1_info:
         const sat_s6AQ1_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+168;
 },
 Data.Semigroup.Internal.$fReadAlt_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6BJU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BJY; else goto c6BJX;
       c6BJY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BJX: // global
           I64[Hp - 16] = sat_s6AQ1_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadAlt_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadAlt_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S6Bb6_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.46038754 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_$creadList_closure" {
     Data.Semigroup.Internal.$fReadAlt_$creadList_closure:
         const Data.Semigroup.Internal.$fReadAlt_$creadList_info;
         const 0;
 },
 sat_s6AQ3_entry() //  [R1]
         { []
         }
     {offset
       c6BKj: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AQ3_info" {
     sat_s6AQ3_info:
         const sat_s6AQ3_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+168;
 },
 sat_s6AQ4_entry() //  [R1]
         { []
         }
     {offset
       c6BKm: // global
           _s6AQ4::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6BKn; else goto c6BKo;
       c6BKo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BKq; else goto c6BKp;
       c6BKq: // global
           HpAlloc = 24;
           goto c6BKn;
       c6BKn: // global
           R1 = _s6AQ4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BKp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQ4::P64;
           _s6AQ2::P64 = P64[_s6AQ4::P64 + 16];
           I64[Hp - 16] = sat_s6AQ3_info;
           P64[Hp] = _s6AQ2::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQ4_info" {
     sat_s6AQ4_info:
         const sat_s6AQ4_entry;
         const 1;
         const 21474836496;
         const S6Bb6_srt+168;
 },
 Data.Semigroup.Internal.$fReadAlt_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6BKr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BKv; else goto c6BKu;
       c6BKv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BKu: // global
           I64[Hp - 16] = sat_s6AQ4_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_$creadList_info" {
     Data.Semigroup.Internal.$fReadAlt_$creadList_info:
         const Data.Semigroup.Internal.$fReadAlt_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const S6Bb6_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.469305994 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAlt_closure" {
     Data.Semigroup.Internal.$fReadAlt_closure:
         const Data.Semigroup.Internal.$fReadAlt_info;
         const 0;
 },
 sat_s6AQ9_entry() //  [R1]
         { []
         }
     {offset
       c6BKX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BKY; else goto c6BKZ;
       c6BKY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BKZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQ9_info" {
     sat_s6AQ9_info:
         const sat_s6AQ9_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+192;
 },
 sat_s6AQ8_entry() //  [R1]
         { []
         }
     {offset
       c6BL4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BL5; else goto c6BL6;
       c6BL5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BL6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQ8_info" {
     sat_s6AQ8_info:
         const sat_s6AQ8_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+168;
 },
 sat_s6AQ7_entry() //  [R1]
         { []
         }
     {offset
       c6BLb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BLc; else goto c6BLd;
       c6BLc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BLd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQ7_info" {
     sat_s6AQ7_info:
         const sat_s6AQ7_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+200;
 },
 sat_s6AQ6_entry() //  [R1]
         { []
         }
     {offset
       c6BLi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BLj; else goto c6BLk;
       c6BLj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BLk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadAlt_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQ6_info" {
     sat_s6AQ6_info:
         const sat_s6AQ6_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+176;
 },
 Data.Semigroup.Internal.$fReadAlt_entry() //  [R2]
         { []
         }
     {offset
       c6BLm: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6BLq; else goto c6BLp;
       c6BLq: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BLp: // global
           I64[Hp - 128] = sat_s6AQ9_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6AQ8_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AQ7_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AQ6_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAlt_info" {
     Data.Semigroup.Internal.$fReadAlt_info:
         const Data.Semigroup.Internal.$fReadAlt_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S6Bb6_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.479905324 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Alt1_closure" {
     Data.Semigroup.Internal.$fGeneric1Alt1_closure:
         const Data.Semigroup.Internal.$fGeneric1Alt1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Alt1_entry() //  [R2]
         { []
         }
     {offset
       c6BM3: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Alt1_info" {
     Data.Semigroup.Internal.$fGeneric1Alt1_info:
         const Data.Semigroup.Internal.$fGeneric1Alt1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.4837396 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Alt2_closure" {
     Data.Semigroup.Internal.$fGeneric1Alt2_closure:
         const Data.Semigroup.Internal.$fGeneric1Alt2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Alt2_entry() //  [R2]
         { []
         }
     {offset
       c6BMe: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Alt2_info" {
     Data.Semigroup.Internal.$fGeneric1Alt2_info:
         const Data.Semigroup.Internal.$fGeneric1Alt2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.486866872 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Alt_closure" {
     Data.Semigroup.Internal.$fGeneric1Alt_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Alt2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Alt1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.488878835 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAlt1_closure" {
     Data.Semigroup.Internal.$fGenericAlt1_closure:
         const Data.Semigroup.Internal.$fGenericAlt1_info;
 },
 Data.Semigroup.Internal.$fGenericAlt1_entry() //  [R2]
         { []
         }
     {offset
       c6BMq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAlt1_info" {
     Data.Semigroup.Internal.$fGenericAlt1_info:
         const Data.Semigroup.Internal.$fGenericAlt1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.492443391 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAlt2_closure" {
     Data.Semigroup.Internal.$fGenericAlt2_closure:
         const Data.Semigroup.Internal.$fGenericAlt2_info;
 },
 Data.Semigroup.Internal.$fGenericAlt2_entry() //  [R2]
         { []
         }
     {offset
       c6BMB: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAlt2_info" {
     Data.Semigroup.Internal.$fGenericAlt2_info:
         const Data.Semigroup.Internal.$fGenericAlt2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.495498584 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAlt_closure" {
     Data.Semigroup.Internal.$fGenericAlt_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericAlt2_closure+1;
         const Data.Semigroup.Internal.$fGenericAlt1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.500647083 UTC

[section ""data" . Data.Semigroup.Internal.$fNumProduct_closure" {
     Data.Semigroup.Internal.$fNumProduct_closure:
         const Data.Semigroup.Internal.$fNumProduct_info;
 },
 sat_s6AQl_entry() //  [R1]
         { []
         }
     {offset
       c6BMR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BMS; else goto c6BMT;
       c6BMS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BMT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQl_info" {
     sat_s6AQl_info:
         const sat_s6AQl_entry;
         const 1;
         const 16;
 },
 sat_s6AQk_entry() //  [R1]
         { []
         }
     {offset
       c6BMY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BMZ; else goto c6BN0;
       c6BMZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BN0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQk_info" {
     sat_s6AQk_info:
         const sat_s6AQk_entry;
         const 1;
         const 16;
 },
 sat_s6AQj_entry() //  [R1]
         { []
         }
     {offset
       c6BN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BN6; else goto c6BN7;
       c6BN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BN7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQj_info" {
     sat_s6AQj_info:
         const sat_s6AQj_entry;
         const 1;
         const 16;
 },
 sat_s6AQi_entry() //  [R1]
         { []
         }
     {offset
       c6BNc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BNd; else goto c6BNe;
       c6BNd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BNe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQi_info" {
     sat_s6AQi_info:
         const sat_s6AQi_entry;
         const 1;
         const 16;
 },
 sat_s6AQh_entry() //  [R1]
         { []
         }
     {offset
       c6BNj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BNk; else goto c6BNl;
       c6BNk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BNl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQh_info" {
     sat_s6AQh_info:
         const sat_s6AQh_entry;
         const 1;
         const 16;
 },
 sat_s6AQg_entry() //  [R1]
         { []
         }
     {offset
       c6BNq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BNr; else goto c6BNs;
       c6BNr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BNs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQg_info" {
     sat_s6AQg_info:
         const sat_s6AQg_entry;
         const 1;
         const 16;
 },
 sat_s6AQf_entry() //  [R1]
         { []
         }
     {offset
       c6BNx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BNy; else goto c6BNz;
       c6BNy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BNz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQf_info" {
     sat_s6AQf_info:
         const sat_s6AQf_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fNumProduct_entry() //  [R2]
         { []
         }
     {offset
       c6BNB: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c6BNF; else goto c6BNE;
       c6BNF: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fNumProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BNE: // global
           I64[Hp - 224] = sat_s6AQl_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s6AQk_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6AQj_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6AQi_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s6AQh_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6AQg_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AQf_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fNumProduct_info" {
     Data.Semigroup.Internal.$fNumProduct_info:
         const Data.Semigroup.Internal.$fNumProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.51592277 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Product1_closure" {
     Data.Semigroup.Internal.$fGeneric1Product1_closure:
         const Data.Semigroup.Internal.$fGeneric1Product1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Product1_entry() //  [R2]
         { []
         }
     {offset
       c6BOD: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Product1_info" {
     Data.Semigroup.Internal.$fGeneric1Product1_info:
         const Data.Semigroup.Internal.$fGeneric1Product1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.519877606 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Product2_closure" {
     Data.Semigroup.Internal.$fGeneric1Product2_closure:
         const Data.Semigroup.Internal.$fGeneric1Product2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Product2_entry() //  [R2]
         { []
         }
     {offset
       c6BOO: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Product2_info" {
     Data.Semigroup.Internal.$fGeneric1Product2_info:
         const Data.Semigroup.Internal.$fGeneric1Product2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.522967446 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Product_closure" {
     Data.Semigroup.Internal.$fGeneric1Product_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Product2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Product1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.525044417 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericProduct1_closure" {
     Data.Semigroup.Internal.$fGenericProduct1_closure:
         const Data.Semigroup.Internal.$fGenericProduct1_info;
 },
 Data.Semigroup.Internal.$fGenericProduct1_entry() //  [R2]
         { []
         }
     {offset
       c6BP0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericProduct1_info" {
     Data.Semigroup.Internal.$fGenericProduct1_info:
         const Data.Semigroup.Internal.$fGenericProduct1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.528375632 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericProduct2_closure" {
     Data.Semigroup.Internal.$fGenericProduct2_closure:
         const Data.Semigroup.Internal.$fGenericProduct2_info;
 },
 Data.Semigroup.Internal.$fGenericProduct2_entry() //  [R2]
         { []
         }
     {offset
       c6BPb: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericProduct2_info" {
     Data.Semigroup.Internal.$fGenericProduct2_info:
         const Data.Semigroup.Internal.$fGenericProduct2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.532104368 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericProduct_closure" {
     Data.Semigroup.Internal.$fGenericProduct_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericProduct2_closure+1;
         const Data.Semigroup.Internal.$fGenericProduct1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.535135133 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedProduct_closure" {
     Data.Semigroup.Internal.$fBoundedProduct_closure:
         const Data.Semigroup.Internal.$fBoundedProduct_info;
 },
 sat_s6AQs_entry() //  [R1]
         { []
         }
     {offset
       c6BPr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BPs; else goto c6BPt;
       c6BPs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BPt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQs_info" {
     sat_s6AQs_info:
         const sat_s6AQs_entry;
         const 1;
         const 16;
 },
 sat_s6AQr_entry() //  [R1]
         { []
         }
     {offset
       c6BPy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BPz; else goto c6BPA;
       c6BPz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BPA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQr_info" {
     sat_s6AQr_info:
         const sat_s6AQr_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fBoundedProduct_entry() //  [R2]
         { []
         }
     {offset
       c6BPC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6BPG; else goto c6BPF;
       c6BPG: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fBoundedProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BPF: // global
           I64[Hp - 64] = sat_s6AQs_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6AQr_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fBoundedProduct_info" {
     Data.Semigroup.Internal.$fBoundedProduct_info:
         const Data.Semigroup.Internal.$fBoundedProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.541840804 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowProduct2_bytes" {
     Data.Semigroup.Internal.$fShowProduct2_bytes:
         I8[] [80,114,111,100,117,99,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.543676225 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowProduct1_bytes" {
     Data.Semigroup.Internal.$fShowProduct1_bytes:
         I8[] [103,101,116,80,114,111,100,117,99,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.551240628 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec4_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec4_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec4_info;
 },
 f_s6AQw_entry() //  [R1]
         { []
         }
     {offset
       c6BQb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6BQc; else goto c6BQd;
       c6BQc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BQd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6AQw_info" {
     f_s6AQw_info:
         const f_s6AQw_entry;
         const 2;
         const 18;
 },
 sat_s6AQz_entry() //  [R1]
         { []
         }
     {offset
       c6BQy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BQz; else goto c6BQA;
       c6BQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BQA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQz_info" {
     sat_s6AQz_info:
         const sat_s6AQz_entry;
         const 1;
         const 16;
 },
 sat_s6AQA_entry() //  [R1]
         { []
         }
     {offset
       c6BQB: // global
           _s6AQA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BQC; else goto c6BQD;
       c6BQD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BQF; else goto c6BQE;
       c6BQF: // global
           HpAlloc = 24;
           goto c6BQC;
       c6BQC: // global
           R1 = _s6AQA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BQE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQA::P64;
           _s6AQw::P64 = P64[_s6AQA::P64 + 16];
           _s6AQy::P64 = P64[_s6AQA::P64 + 24];
           I64[Hp - 16] = sat_s6AQz_info;
           P64[Hp] = _s6AQy::P64;
           R2 = Hp - 16;
           R1 = _s6AQw::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQA_info" {
     sat_s6AQA_info:
         const sat_s6AQA_entry;
         const 2;
         const 18;
 },
 sat_s6AQB_entry() //  [R1]
         { []
         }
     {offset
       c6BQG: // global
           _s6AQB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BQH; else goto c6BQI;
       c6BQI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BQK; else goto c6BQJ;
       c6BQK: // global
           HpAlloc = 32;
           goto c6BQH;
       c6BQH: // global
           R1 = _s6AQB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BQJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQB::P64;
           _s6AQw::P64 = P64[_s6AQB::P64 + 16];
           _s6AQy::P64 = P64[_s6AQB::P64 + 24];
           I64[Hp - 24] = sat_s6AQA_info;
           P64[Hp - 8] = _s6AQw::P64;
           P64[Hp] = _s6AQy::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQB_info" {
     sat_s6AQB_info:
         const sat_s6AQB_entry;
         const 2;
         const 18;
 },
 sat_s6AQC_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BQL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BQP; else goto c6BQO;
       c6BQP: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BQO: // global
           _s6AQw::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6AQB_info;
           P64[Hp - 8] = _s6AQw::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AQC_info" {
     sat_s6AQC_info:
         const sat_s6AQC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6AQF_entry() //  [R1]
         { []
         }
     {offset
       c6BRd: // global
           _s6AQF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BRe; else goto c6BRf;
       c6BRf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BRh; else goto c6BRg;
       c6BRh: // global
           HpAlloc = 24;
           goto c6BRe;
       c6BRe: // global
           R1 = _s6AQF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BRg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQF::P64;
           _s6AQD::P64 = P64[_s6AQF::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6AQD::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQF_info" {
     sat_s6AQF_info:
         const sat_s6AQF_entry;
         const 1;
         const 16;
 },
 sat_s6AQG_entry() //  [R1]
         { []
         }
     {offset
       c6BRi: // global
           _s6AQG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BRj; else goto c6BRk;
       c6BRk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BRm; else goto c6BRl;
       c6BRm: // global
           HpAlloc = 24;
           goto c6BRj;
       c6BRj: // global
           R1 = _s6AQG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BRl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQG::P64;
           _s6AQw::P64 = P64[_s6AQG::P64 + 16];
           _s6AQD::P64 = P64[_s6AQG::P64 + 24];
           I64[Hp - 16] = sat_s6AQF_info;
           P64[Hp] = _s6AQD::P64;
           R2 = Hp - 16;
           R1 = _s6AQw::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQG_info" {
     sat_s6AQG_info:
         const sat_s6AQG_entry;
         const 2;
         const 18;
 },
 sat_s6AQH_entry() //  [R1]
         { []
         }
     {offset
       c6BRn: // global
           _s6AQH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BRo; else goto c6BRp;
       c6BRp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BRr; else goto c6BRq;
       c6BRr: // global
           HpAlloc = 32;
           goto c6BRo;
       c6BRo: // global
           R1 = _s6AQH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BRq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQH::P64;
           _s6AQw::P64 = P64[_s6AQH::P64 + 16];
           _s6AQD::P64 = P64[_s6AQH::P64 + 24];
           I64[Hp - 24] = sat_s6AQG_info;
           P64[Hp - 8] = _s6AQw::P64;
           P64[Hp] = _s6AQD::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQH_info" {
     sat_s6AQH_info:
         const sat_s6AQH_entry;
         const 2;
         const 18;
 },
 sat_s6AQI_entry() //  [R1]
         { []
         }
     {offset
       c6BRs: // global
           _s6AQI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BRt; else goto c6BRu;
       c6BRu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BRw; else goto c6BRv;
       c6BRw: // global
           HpAlloc = 32;
           goto c6BRt;
       c6BRt: // global
           R1 = _s6AQI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BRv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQI::P64;
           _s6AQw::P64 = P64[_s6AQI::P64 + 16];
           _s6AQD::P64 = P64[_s6AQI::P64 + 24];
           I64[Hp - 24] = sat_s6AQH_info;
           P64[Hp - 8] = _s6AQw::P64;
           P64[Hp] = _s6AQD::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQI_info" {
     sat_s6AQI_info:
         const sat_s6AQI_entry;
         const 2;
         const 18;
 },
 sat_s6AQJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BRy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6BRC; else goto c6BRB;
       c6BRC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BRB: // global
           _s6AQw::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6AQI_info;
           P64[Hp - 32] = _s6AQw::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AQJ_info" {
     sat_s6AQJ_info:
         const sat_s6AQJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6BRG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6BRK; else goto c6BRJ;
       c6BRK: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BRJ: // global
           I64[Hp - 40] = f_s6AQw_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6BQ7::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6BRE; else goto c6BRF;
       c6BRE: // global
           I64[Hp - 8] = sat_s6AQC_info;
           P64[Hp] = _c6BQ7::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6BRF: // global
           I64[Hp - 8] = sat_s6AQJ_info;
           P64[Hp] = _c6BQ7::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec4_info" {
     Data.Semigroup.Internal.$w$cshowsPrec4_info:
         const Data.Semigroup.Internal.$w$cshowsPrec4_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.57408039 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       c6BT1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6BT2; else goto c6BT3;
       c6BT2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BT3: // global
           I64[Sp - 24] = block_c6BSY_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6BT7; else goto c6BSZ;
       u6BT7: // global
           call _c6BSY(R1) args: 0, res: 0, upd: 0;
       c6BSZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6BSY() //  [R1]
         { []
         }
     {offset
       c6BSY: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BSY_info" {
     block_c6BSY_info:
         const _c6BSY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.580831933 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_$cshow_closure" {
     Data.Semigroup.Internal.$fShowProduct_$cshow_closure:
         const Data.Semigroup.Internal.$fShowProduct_$cshow_info;
         const 0;
 },
 sat_s6AQR_entry() //  [R1]
         { []
         }
     {offset
       c6BTu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6BTv; else goto c6BTw;
       c6BTv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BTw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQR_info" {
     sat_s6AQR_info:
         const sat_s6AQR_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+88;
 },
 sat_s6AQS_entry() //  [R1]
         { []
         }
     {offset
       c6BTx: // global
           _s6AQS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6BTy; else goto c6BTz;
       c6BTz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BTB; else goto c6BTA;
       c6BTB: // global
           HpAlloc = 32;
           goto c6BTy;
       c6BTy: // global
           R1 = _s6AQS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BTA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AQS::P64;
           _s6AQP::P64 = P64[_s6AQS::P64 + 16];
           _s6AQQ::P64 = P64[_s6AQS::P64 + 24];
           I64[Hp - 24] = sat_s6AQR_info;
           P64[Hp - 8] = _s6AQP::P64;
           P64[Hp] = _s6AQQ::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AQS_info" {
     sat_s6AQS_info:
         const sat_s6AQS_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+88;
 },
 Data.Semigroup.Internal.$fShowProduct_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6BTC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BTG; else goto c6BTF;
       c6BTG: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BTF: // global
           I64[Hp - 24] = sat_s6AQS_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowProduct2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_$cshow_info" {
     Data.Semigroup.Internal.$fShowProduct_$cshow_info:
         const Data.Semigroup.Internal.$fShowProduct_$cshow_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const S6Bb6_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.588775525 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowProduct_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowProduct_$cshowList_info;
 },
 sat_s6AQX_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BUa: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AQX_info" {
     sat_s6AQX_info:
         const sat_s6AQX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowProduct_$cshowList_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c6BUd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BUh; else goto c6BUg;
       c6BUh: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BUg: // global
           I64[Hp - 8] = sat_s6AQX_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_$cshowList_info" {
     Data.Semigroup.Internal.$fShowProduct_$cshowList_info:
         const Data.Semigroup.Internal.$fShowProduct_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.595134434 UTC

[section ""data" . Data.Semigroup.Internal.$fShowProduct_closure" {
     Data.Semigroup.Internal.$fShowProduct_closure:
         const Data.Semigroup.Internal.$fShowProduct_info;
         const 0;
 },
 sat_s6AR1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6BUz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowProduct_$cshowList_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AR1_info" {
     sat_s6AR1_info:
         const sat_s6AR1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6AR0_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BUH: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowProduct_$cshow_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AR0_info" {
     sat_s6AR0_info:
         const sat_s6AR0_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Bb6_srt+216;
 },
 sat_s6AQZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6BUP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowProduct_$cshowsPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AQZ_info" {
     sat_s6AQZ_info:
         const sat_s6AQZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowProduct_entry() //  [R2]
         { []
         }
     {offset
       c6BUT: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6BUX; else goto c6BUW;
       c6BUX: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BUW: // global
           I64[Hp - 72] = sat_s6AR1_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AR0_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6AQZ_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowProduct_info" {
     Data.Semigroup.Internal.$fShowProduct_info:
         const Data.Semigroup.Internal.$fShowProduct_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.603284216 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadProduct5_bytes" {
     Data.Semigroup.Internal.$fReadProduct5_bytes:
         I8[] [80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.605790909 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct4_closure" {
     Data.Semigroup.Internal.$fReadProduct4_closure:
         const Data.Semigroup.Internal.$fReadProduct4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadProduct4_entry() //  [R1]
         { []
         }
     {offset
       c6BVq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BVr; else goto c6BVs;
       c6BVr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BVs: // global
           (_c6BVn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6BVn::I64 == 0) goto c6BVp; else goto c6BVo;
       c6BVp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6BVo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6BVn::I64;
           R2 = Data.Semigroup.Internal.$fReadProduct5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct4_info" {
     Data.Semigroup.Internal.$fReadProduct4_info:
         const Data.Semigroup.Internal.$fReadProduct4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.610169201 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_lexeme_closure" {
     Data.Semigroup.Internal.$fReadProduct_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadProduct4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.61214968 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadProduct3_bytes" {
     Data.Semigroup.Internal.$fReadProduct3_bytes:
         I8[] [103,101,116,80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.614640725 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct2_closure" {
     Data.Semigroup.Internal.$fReadProduct2_closure:
         const Data.Semigroup.Internal.$fReadProduct2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadProduct2_entry() //  [R1]
         { []
         }
     {offset
       c6BVJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BVK; else goto c6BVL;
       c6BVK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BVL: // global
           (_c6BVG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6BVG::I64 == 0) goto c6BVI; else goto c6BVH;
       c6BVI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6BVH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6BVG::I64;
           R2 = Data.Semigroup.Internal.$fReadProduct3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct2_info" {
     Data.Semigroup.Internal.$fReadProduct2_info:
         const Data.Semigroup.Internal.$fReadProduct2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.624240488 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct1_closure" {
     Data.Semigroup.Internal.$fReadProduct1_closure:
         const Data.Semigroup.Internal.$fReadProduct1_info;
         const 0;
 },
 lvl12_s6AR3_entry() //  [R1]
         { []
         }
     {offset
       c6BW2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6BW3; else goto c6BW4;
       c6BW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BW4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6AR3_info" {
     lvl12_s6AR3_info:
         const lvl12_s6AR3_entry;
         const 1;
         const 16;
 },
 ds_s6AR4_entry() //  [R1]
         { []
         }
     {offset
       c6BWa: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6AR4_info" {
     ds_s6AR4_info:
         const ds_s6AR4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6ARf_entry() //  [R1]
         { []
         }
     {offset
       c6BWL: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARf_info" {
     sat_s6ARf_info:
         const sat_s6ARf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6ARi_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BWR: // global
           _s6ARd::P64 = R2;
           _s6ARi::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6BWS; else goto c6BWT;
       c6BWT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BWV; else goto c6BWU;
       c6BWV: // global
           HpAlloc = 24;
           goto c6BWS;
       c6BWS: // global
           R2 = _s6ARd::P64;
           R1 = _s6ARi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BWU: // global
           _s6AR7::P64 = P64[_s6ARi::P64 + 7];
           I64[Hp - 16] = sat_s6ARf_info;
           P64[Hp - 8] = _s6AR7::P64;
           P64[Hp] = _s6ARd::P64;
           I64[Sp - 8] = block_c6BWO_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARi_info" {
     sat_s6ARi_info:
         const sat_s6ARi_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 _c6BWO() //  [R1]
         { []
         }
     {offset
       c6BWO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BWY; else goto c6BWX;
       c6BWY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BWX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BWO_info" {
     block_c6BWO_info:
         const _c6BWO;
         const 0;
         const 30;
 },
 sat_s6ARj_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BWZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BX3; else goto c6BX2;
       c6BX3: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BX2: // global
           _s6AR4::P64 = P64[R1 + 7];
           _s6AR7::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6ARi_info;
           P64[Hp] = _s6AR7::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6AR4::P64;
           R2 = Data.Semigroup.Internal.$fReadProduct2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARj_info" {
     sat_s6ARj_info:
         const sat_s6ARj_entry;
         const 2;
         const 140767553126411;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 sat_s6ARm_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BX7: // global
           _s6ARb::P64 = R2;
           _s6ARm::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6BX8; else goto c6BX9;
       c6BX9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BXb; else goto c6BXa;
       c6BXb: // global
           HpAlloc = 24;
           goto c6BX8;
       c6BX8: // global
           R2 = _s6ARb::P64;
           R1 = _s6ARm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BXa: // global
           _s6AR4::P64 = P64[_s6ARm::P64 + 7];
           _s6AR7::P64 = P64[_s6ARm::P64 + 15];
           I64[Hp - 16] = sat_s6ARj_info;
           P64[Hp - 8] = _s6AR4::P64;
           P64[Hp] = _s6AR7::P64;
           I64[Sp - 8] = block_c6BX4_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARm_info" {
     sat_s6ARm_info:
         const sat_s6ARm_entry;
         const 2;
         const 140836272603147;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 _c6BX4() //  [R1]
         { []
         }
     {offset
       c6BX4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BXe; else goto c6BXd;
       c6BXe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BXd: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BX4_info" {
     block_c6BX4_info:
         const _c6BX4;
         const 0;
         const 30;
 },
 sat_s6ARp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6BXf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6BXg; else goto c6BXh;
       c6BXg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6BXh: // global
           I64[Sp - 24] = block_c6BWi_info;
           _s6AR4::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6AR4::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6BXu; else goto c6BWj;
       u6BXu: // global
           call _c6BWi(R1) args: 0, res: 0, upd: 0;
       c6BWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARp_info" {
     sat_s6ARp_info:
         const sat_s6ARp_entry;
         const 1;
         const 422311249313801;
         const 8589934607;
         const S6Bb6_srt+112;
 },
 _c6BWi() //  [R1]
         { []
         }
     {offset
       c6BWi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BXk; else goto c6BXj;
       c6BXk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BXj: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6BXm; else goto c6BXq;
       c6BXm: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6BXq: // global
           I64[Hp - 16] = sat_s6ARm_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6BXn_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadProduct_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BWi_info" {
     block_c6BWi_info:
         const _c6BWi;
         const 2;
         const 422311249313822;
         const S6Bb6_srt+112;
 },
 _c6BXn() //  [R1]
         { []
         }
     {offset
       c6BXn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6BXt; else goto c6BXs;
       c6BXt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6BXs: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6BXn_info" {
     block_c6BXn_info:
         const _c6BXn;
         const 0;
         const 30;
 },
 Data.Semigroup.Internal.$fReadProduct1_entry() //  [R2]
         { []
         }
     {offset
       c6BXv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6BXz; else goto c6BXy;
       c6BXz: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BXy: // global
           I64[Hp - 48] = lvl12_s6AR3_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6AR4_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6ARp_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct1_info" {
     Data.Semigroup.Internal.$fReadProduct1_info:
         const Data.Semigroup.Internal.$fReadProduct1_entry;
         const 0;
         const 985536080642062;
         const 4294967301;
         const S6Bb6_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.650123618 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadProduct_$creadsPrec_info;
         const 0;
 },
 ds_s6ARr_entry() //  [R1]
         { []
         }
     {offset
       c6BYP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BYQ; else goto c6BYR;
       c6BYQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BYR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6ARr_info" {
     ds_s6ARr_info:
         const ds_s6ARr_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+248;
 },
 sat_s6ARt_entry() //  [R1]
         { []
         }
     {offset
       c6BZ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6BZ2; else goto c6BZ3;
       c6BZ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6BZ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARt_info" {
     sat_s6ARt_info:
         const sat_s6ARt_entry;
         const 2;
         const 18;
 },
 sat_s6ARu_entry() //  [R1, R2]
         { []
         }
     {offset
       c6BZ4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6BZ8; else goto c6BZ7;
       c6BZ8: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BZ7: // global
           _s6ARr::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6ARt_info;
           P64[Hp - 8] = _s6ARr::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARu_info" {
     sat_s6ARu_info:
         const sat_s6ARu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadProduct_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6BZ9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6BZd; else goto c6BZc;
       c6BZd: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BZc: // global
           I64[Hp - 32] = ds_s6ARr_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6ARu_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadProduct_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadProduct_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.659709574 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadProduct_$creadListPrec_info;
         const 0;
 },
 sat_s6ARw_entry() //  [R1]
         { []
         }
     {offset
       c6BZK: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARw_info" {
     sat_s6ARw_info:
         const sat_s6ARw_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+248;
 },
 Data.Semigroup.Internal.$fReadProduct_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6BZN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6BZR; else goto c6BZQ;
       c6BZR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6BZQ: // global
           I64[Hp - 16] = sat_s6ARw_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadProduct_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadProduct_$creadListPrec_entry;
         const 0;
         const 5501853106190;
         const 4294967301;
         const S6Bb6_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.666190779 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_$creadList_closure" {
     Data.Semigroup.Internal.$fReadProduct_$creadList_closure:
         const Data.Semigroup.Internal.$fReadProduct_$creadList_info;
         const 0;
 },
 sat_s6ARy_entry() //  [R1]
         { []
         }
     {offset
       c6C0c: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ARy_info" {
     sat_s6ARy_info:
         const sat_s6ARy_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+248;
 },
 sat_s6ARz_entry() //  [R1]
         { []
         }
     {offset
       c6C0f: // global
           _s6ARz::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6C0g; else goto c6C0h;
       c6C0h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6C0j; else goto c6C0i;
       c6C0j: // global
           HpAlloc = 24;
           goto c6C0g;
       c6C0g: // global
           R1 = _s6ARz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C0i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ARz::P64;
           _s6ARx::P64 = P64[_s6ARz::P64 + 16];
           I64[Hp - 16] = sat_s6ARy_info;
           P64[Hp] = _s6ARx::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARz_info" {
     sat_s6ARz_info:
         const sat_s6ARz_entry;
         const 1;
         const 1103806595088;
         const S6Bb6_srt+184;
 },
 Data.Semigroup.Internal.$fReadProduct_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6C0k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6C0o; else goto c6C0n;
       c6C0o: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C0n: // global
           I64[Hp - 16] = sat_s6ARz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_$creadList_info" {
     Data.Semigroup.Internal.$fReadProduct_$creadList_info:
         const Data.Semigroup.Internal.$fReadProduct_$creadList_entry;
         const 0;
         const 9899899617294;
         const 4294967301;
         const S6Bb6_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.675203644 UTC

[section ""data" . Data.Semigroup.Internal.$fReadProduct_closure" {
     Data.Semigroup.Internal.$fReadProduct_closure:
         const Data.Semigroup.Internal.$fReadProduct_info;
         const 0;
 },
 sat_s6ARE_entry() //  [R1]
         { []
         }
     {offset
       c6C0Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C0R; else goto c6C0S;
       c6C0R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C0S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARE_info" {
     sat_s6ARE_info:
         const sat_s6ARE_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+264;
 },
 sat_s6ARD_entry() //  [R1]
         { []
         }
     {offset
       c6C0X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C0Y; else goto c6C0Z;
       c6C0Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C0Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARD_info" {
     sat_s6ARD_info:
         const sat_s6ARD_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+248;
 },
 sat_s6ARC_entry() //  [R1]
         { []
         }
     {offset
       c6C14: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C15; else goto c6C16;
       c6C15: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C16: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARC_info" {
     sat_s6ARC_info:
         const sat_s6ARC_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+272;
 },
 sat_s6ARB_entry() //  [R1]
         { []
         }
     {offset
       c6C1b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C1c; else goto c6C1d;
       c6C1c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C1d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadProduct_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARB_info" {
     sat_s6ARB_info:
         const sat_s6ARB_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+256;
 },
 Data.Semigroup.Internal.$fReadProduct_entry() //  [R2]
         { []
         }
     {offset
       c6C1f: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6C1j; else goto c6C1i;
       c6C1j: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C1i: // global
           I64[Hp - 128] = sat_s6ARE_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6ARD_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6ARC_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6ARB_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadProduct_info" {
     Data.Semigroup.Internal.$fReadProduct_info:
         const Data.Semigroup.Internal.$fReadProduct_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6Bb6_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.68737528 UTC

[section ""data" . Data.Semigroup.Internal.$fEqProduct_closure" {
     Data.Semigroup.Internal.$fEqProduct_closure:
         const Data.Semigroup.Internal.$fEqProduct_info;
 },
 sat_s6ARH_entry() //  [R1]
         { []
         }
     {offset
       c6C20: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C21; else goto c6C22;
       c6C21: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C22: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARH_info" {
     sat_s6ARH_info:
         const sat_s6ARH_entry;
         const 1;
         const 16;
 },
 sat_s6ARG_entry() //  [R1]
         { []
         }
     {offset
       c6C27: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C28; else goto c6C29;
       c6C28: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C29: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARG_info" {
     sat_s6ARG_info:
         const sat_s6ARG_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqProduct_entry() //  [R2]
         { []
         }
     {offset
       c6C2b: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6C2f; else goto c6C2e;
       c6C2f: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C2e: // global
           I64[Hp - 64] = sat_s6ARH_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6ARG_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqProduct_info" {
     Data.Semigroup.Internal.$fEqProduct_info:
         const Data.Semigroup.Internal.$fEqProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.695672717 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_info;
 },
 sat_s6ARJ_entry() //  [R1]
         { []
         }
     {offset
       c6C2I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C2J; else goto c6C2K;
       c6C2J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C2K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARJ_info" {
     sat_s6ARJ_info:
         const sat_s6ARJ_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6C2L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6C2P; else goto c6C2O;
       c6C2P: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C2O: // global
           I64[Hp - 16] = sat_s6ARJ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqProduct_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.705306485 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdProduct_closure" {
     Data.Semigroup.Internal.$fOrdProduct_closure:
         const Data.Semigroup.Internal.$fOrdProduct_info;
 },
 sat_s6ARS_entry() //  [R1]
         { []
         }
     {offset
       c6C38: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C39; else goto c6C3a;
       c6C39: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARS_info" {
     sat_s6ARS_info:
         const sat_s6ARS_entry;
         const 1;
         const 16;
 },
 sat_s6ARR_entry() //  [R1]
         { []
         }
     {offset
       c6C3f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C3g; else goto c6C3h;
       c6C3g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARR_info" {
     sat_s6ARR_info:
         const sat_s6ARR_entry;
         const 1;
         const 16;
 },
 sat_s6ARQ_entry() //  [R1]
         { []
         }
     {offset
       c6C3m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C3n; else goto c6C3o;
       c6C3n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARQ_info" {
     sat_s6ARQ_info:
         const sat_s6ARQ_entry;
         const 1;
         const 16;
 },
 sat_s6ARP_entry() //  [R1]
         { []
         }
     {offset
       c6C3t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C3u; else goto c6C3v;
       c6C3u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARP_info" {
     sat_s6ARP_info:
         const sat_s6ARP_entry;
         const 1;
         const 16;
 },
 sat_s6ARO_entry() //  [R1]
         { []
         }
     {offset
       c6C3A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C3B; else goto c6C3C;
       c6C3B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARO_info" {
     sat_s6ARO_info:
         const sat_s6ARO_entry;
         const 1;
         const 16;
 },
 sat_s6ARN_entry() //  [R1]
         { []
         }
     {offset
       c6C3H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C3I; else goto c6C3J;
       c6C3I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARN_info" {
     sat_s6ARN_info:
         const sat_s6ARN_entry;
         const 1;
         const 16;
 },
 sat_s6ARM_entry() //  [R1]
         { []
         }
     {offset
       c6C3O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C3P; else goto c6C3Q;
       c6C3P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARM_info" {
     sat_s6ARM_info:
         const sat_s6ARM_entry;
         const 1;
         const 16;
 },
 sat_s6ARL_entry() //  [R1]
         { []
         }
     {offset
       c6C3V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C3W; else goto c6C3X;
       c6C3W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C3X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdProduct_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARL_info" {
     sat_s6ARL_info:
         const sat_s6ARL_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdProduct_entry() //  [R2]
         { []
         }
     {offset
       c6C3Z: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6C43; else goto c6C42;
       c6C43: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdProduct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C42: // global
           I64[Hp - 256] = sat_s6ARS_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6ARR_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6ARQ_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6ARP_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6ARO_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6ARN_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6ARM_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6ARL_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdProduct_info" {
     Data.Semigroup.Internal.$fOrdProduct_info:
         const Data.Semigroup.Internal.$fOrdProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.727841831 UTC

[section ""data" . Data.Semigroup.Internal.$fNumSum_closure" {
     Data.Semigroup.Internal.$fNumSum_closure:
         const Data.Semigroup.Internal.$fNumSum_info;
 },
 sat_s6AS0_entry() //  [R1]
         { []
         }
     {offset
       c6C5c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C5d; else goto c6C5e;
       c6C5d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C5e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AS0_info" {
     sat_s6AS0_info:
         const sat_s6AS0_entry;
         const 1;
         const 16;
 },
 sat_s6ARZ_entry() //  [R1]
         { []
         }
     {offset
       c6C5j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C5k; else goto c6C5l;
       c6C5k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C5l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARZ_info" {
     sat_s6ARZ_info:
         const sat_s6ARZ_entry;
         const 1;
         const 16;
 },
 sat_s6ARY_entry() //  [R1]
         { []
         }
     {offset
       c6C5q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C5r; else goto c6C5s;
       c6C5r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C5s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARY_info" {
     sat_s6ARY_info:
         const sat_s6ARY_entry;
         const 1;
         const 16;
 },
 sat_s6ARX_entry() //  [R1]
         { []
         }
     {offset
       c6C5x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C5y; else goto c6C5z;
       c6C5y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C5z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARX_info" {
     sat_s6ARX_info:
         const sat_s6ARX_entry;
         const 1;
         const 16;
 },
 sat_s6ARW_entry() //  [R1]
         { []
         }
     {offset
       c6C5E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C5F; else goto c6C5G;
       c6C5F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C5G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARW_info" {
     sat_s6ARW_info:
         const sat_s6ARW_entry;
         const 1;
         const 16;
 },
 sat_s6ARV_entry() //  [R1]
         { []
         }
     {offset
       c6C5L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C5M; else goto c6C5N;
       c6C5M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C5N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARV_info" {
     sat_s6ARV_info:
         const sat_s6ARV_entry;
         const 1;
         const 16;
 },
 sat_s6ARU_entry() //  [R1]
         { []
         }
     {offset
       c6C5S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C5T; else goto c6C5U;
       c6C5T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C5U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ARU_info" {
     sat_s6ARU_info:
         const sat_s6ARU_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fNumSum_entry() //  [R2]
         { []
         }
     {offset
       c6C5W: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c6C60; else goto c6C5Z;
       c6C60: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fNumSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C5Z: // global
           I64[Hp - 224] = sat_s6AS0_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s6ARZ_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6ARY_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6ARX_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s6ARW_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6ARV_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6ARU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fNumSum_info" {
     Data.Semigroup.Internal.$fNumSum_info:
         const Data.Semigroup.Internal.$fNumSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.746009642 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Sum1_closure" {
     Data.Semigroup.Internal.$fGeneric1Sum1_closure:
         const Data.Semigroup.Internal.$fGeneric1Sum1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Sum1_entry() //  [R2]
         { []
         }
     {offset
       c6C6Y: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Sum1_info" {
     Data.Semigroup.Internal.$fGeneric1Sum1_info:
         const Data.Semigroup.Internal.$fGeneric1Sum1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.749865932 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Sum2_closure" {
     Data.Semigroup.Internal.$fGeneric1Sum2_closure:
         const Data.Semigroup.Internal.$fGeneric1Sum2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Sum2_entry() //  [R2]
         { []
         }
     {offset
       c6C79: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Sum2_info" {
     Data.Semigroup.Internal.$fGeneric1Sum2_info:
         const Data.Semigroup.Internal.$fGeneric1Sum2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.753622026 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Sum_closure" {
     Data.Semigroup.Internal.$fGeneric1Sum_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Sum2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Sum1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.755876881 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericSum1_closure" {
     Data.Semigroup.Internal.$fGenericSum1_closure:
         const Data.Semigroup.Internal.$fGenericSum1_info;
 },
 Data.Semigroup.Internal.$fGenericSum1_entry() //  [R2]
         { []
         }
     {offset
       c6C7l: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericSum1_info" {
     Data.Semigroup.Internal.$fGenericSum1_info:
         const Data.Semigroup.Internal.$fGenericSum1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.759738107 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericSum2_closure" {
     Data.Semigroup.Internal.$fGenericSum2_closure:
         const Data.Semigroup.Internal.$fGenericSum2_info;
 },
 Data.Semigroup.Internal.$fGenericSum2_entry() //  [R2]
         { []
         }
     {offset
       c6C7w: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericSum2_info" {
     Data.Semigroup.Internal.$fGenericSum2_info:
         const Data.Semigroup.Internal.$fGenericSum2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.763372703 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericSum_closure" {
     Data.Semigroup.Internal.$fGenericSum_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericSum2_closure+1;
         const Data.Semigroup.Internal.$fGenericSum1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.766736084 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedSum_closure" {
     Data.Semigroup.Internal.$fBoundedSum_closure:
         const Data.Semigroup.Internal.$fBoundedSum_info;
 },
 sat_s6AS7_entry() //  [R1]
         { []
         }
     {offset
       c6C7M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C7N; else goto c6C7O;
       c6C7N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C7O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AS7_info" {
     sat_s6AS7_info:
         const sat_s6AS7_entry;
         const 1;
         const 16;
 },
 sat_s6AS6_entry() //  [R1]
         { []
         }
     {offset
       c6C7T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C7U; else goto c6C7V;
       c6C7U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C7V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AS6_info" {
     sat_s6AS6_info:
         const sat_s6AS6_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fBoundedSum_entry() //  [R2]
         { []
         }
     {offset
       c6C7X: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6C81; else goto c6C80;
       c6C81: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fBoundedSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C80: // global
           I64[Hp - 64] = sat_s6AS7_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6AS6_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fBoundedSum_info" {
     Data.Semigroup.Internal.$fBoundedSum_info:
         const Data.Semigroup.Internal.$fBoundedSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.775054415 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowSum2_bytes" {
     Data.Semigroup.Internal.$fShowSum2_bytes:
         I8[] [83,117,109,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.77705123 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowSum1_bytes" {
     Data.Semigroup.Internal.$fShowSum1_bytes:
         I8[] [103,101,116,83,117,109,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.785987224 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec5_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec5_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec5_info;
 },
 f_s6ASb_entry() //  [R1]
         { []
         }
     {offset
       c6C8w: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6C8x; else goto c6C8y;
       c6C8x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C8y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6ASb_info" {
     f_s6ASb_info:
         const f_s6ASb_entry;
         const 2;
         const 18;
 },
 sat_s6ASe_entry() //  [R1]
         { []
         }
     {offset
       c6C8T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6C8U; else goto c6C8V;
       c6C8U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C8V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASe_info" {
     sat_s6ASe_info:
         const sat_s6ASe_entry;
         const 1;
         const 16;
 },
 sat_s6ASf_entry() //  [R1]
         { []
         }
     {offset
       c6C8W: // global
           _s6ASf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6C8X; else goto c6C8Y;
       c6C8Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6C90; else goto c6C8Z;
       c6C90: // global
           HpAlloc = 24;
           goto c6C8X;
       c6C8X: // global
           R1 = _s6ASf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C8Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ASf::P64;
           _s6ASb::P64 = P64[_s6ASf::P64 + 16];
           _s6ASd::P64 = P64[_s6ASf::P64 + 24];
           I64[Hp - 16] = sat_s6ASe_info;
           P64[Hp] = _s6ASd::P64;
           R2 = Hp - 16;
           R1 = _s6ASb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASf_info" {
     sat_s6ASf_info:
         const sat_s6ASf_entry;
         const 2;
         const 18;
 },
 sat_s6ASg_entry() //  [R1]
         { []
         }
     {offset
       c6C91: // global
           _s6ASg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6C92; else goto c6C93;
       c6C93: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6C95; else goto c6C94;
       c6C95: // global
           HpAlloc = 32;
           goto c6C92;
       c6C92: // global
           R1 = _s6ASg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C94: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ASg::P64;
           _s6ASb::P64 = P64[_s6ASg::P64 + 16];
           _s6ASd::P64 = P64[_s6ASg::P64 + 24];
           I64[Hp - 24] = sat_s6ASf_info;
           P64[Hp - 8] = _s6ASb::P64;
           P64[Hp] = _s6ASd::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASg_info" {
     sat_s6ASg_info:
         const sat_s6ASg_entry;
         const 2;
         const 18;
 },
 sat_s6ASh_entry() //  [R1, R2]
         { []
         }
     {offset
       c6C96: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6C9a; else goto c6C99;
       c6C9a: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C99: // global
           _s6ASb::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6ASg_info;
           P64[Hp - 8] = _s6ASb::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASh_info" {
     sat_s6ASh_info:
         const sat_s6ASh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6ASk_entry() //  [R1]
         { []
         }
     {offset
       c6C9y: // global
           _s6ASk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6C9z; else goto c6C9A;
       c6C9A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6C9C; else goto c6C9B;
       c6C9C: // global
           HpAlloc = 24;
           goto c6C9z;
       c6C9z: // global
           R1 = _s6ASk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C9B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ASk::P64;
           _s6ASi::P64 = P64[_s6ASk::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6ASi::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASk_info" {
     sat_s6ASk_info:
         const sat_s6ASk_entry;
         const 1;
         const 16;
 },
 sat_s6ASl_entry() //  [R1]
         { []
         }
     {offset
       c6C9D: // global
           _s6ASl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6C9E; else goto c6C9F;
       c6C9F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6C9H; else goto c6C9G;
       c6C9H: // global
           HpAlloc = 24;
           goto c6C9E;
       c6C9E: // global
           R1 = _s6ASl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C9G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ASl::P64;
           _s6ASb::P64 = P64[_s6ASl::P64 + 16];
           _s6ASi::P64 = P64[_s6ASl::P64 + 24];
           I64[Hp - 16] = sat_s6ASk_info;
           P64[Hp] = _s6ASi::P64;
           R2 = Hp - 16;
           R1 = _s6ASb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASl_info" {
     sat_s6ASl_info:
         const sat_s6ASl_entry;
         const 2;
         const 18;
 },
 sat_s6ASm_entry() //  [R1]
         { []
         }
     {offset
       c6C9I: // global
           _s6ASm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6C9J; else goto c6C9K;
       c6C9K: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6C9M; else goto c6C9L;
       c6C9M: // global
           HpAlloc = 32;
           goto c6C9J;
       c6C9J: // global
           R1 = _s6ASm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C9L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ASm::P64;
           _s6ASb::P64 = P64[_s6ASm::P64 + 16];
           _s6ASi::P64 = P64[_s6ASm::P64 + 24];
           I64[Hp - 24] = sat_s6ASl_info;
           P64[Hp - 8] = _s6ASb::P64;
           P64[Hp] = _s6ASi::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASm_info" {
     sat_s6ASm_info:
         const sat_s6ASm_entry;
         const 2;
         const 18;
 },
 sat_s6ASn_entry() //  [R1]
         { []
         }
     {offset
       c6C9N: // global
           _s6ASn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6C9O; else goto c6C9P;
       c6C9P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6C9R; else goto c6C9Q;
       c6C9R: // global
           HpAlloc = 32;
           goto c6C9O;
       c6C9O: // global
           R1 = _s6ASn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6C9Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ASn::P64;
           _s6ASb::P64 = P64[_s6ASn::P64 + 16];
           _s6ASi::P64 = P64[_s6ASn::P64 + 24];
           I64[Hp - 24] = sat_s6ASm_info;
           P64[Hp - 8] = _s6ASb::P64;
           P64[Hp] = _s6ASi::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASn_info" {
     sat_s6ASn_info:
         const sat_s6ASn_entry;
         const 2;
         const 18;
 },
 sat_s6ASo_entry() //  [R1, R2]
         { []
         }
     {offset
       c6C9T: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6C9X; else goto c6C9W;
       c6C9X: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6C9W: // global
           _s6ASb::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6ASn_info;
           P64[Hp - 32] = _s6ASb::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASo_info" {
     sat_s6ASo_info:
         const sat_s6ASo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Ca1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Ca5; else goto c6Ca4;
       c6Ca5: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Ca4: // global
           I64[Hp - 40] = f_s6ASb_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6C8s::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6C9Z; else goto c6Ca0;
       c6C9Z: // global
           I64[Hp - 8] = sat_s6ASh_info;
           P64[Hp] = _c6C8s::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Ca0: // global
           I64[Hp - 8] = sat_s6ASo_info;
           P64[Hp] = _c6C8s::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec5_info" {
     Data.Semigroup.Internal.$w$cshowsPrec5_info:
         const Data.Semigroup.Internal.$w$cshowsPrec5_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.811985101 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowSum_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowSum_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowSum_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6Cbm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Cbn; else goto c6Cbo;
       c6Cbn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Cbo: // global
           I64[Sp - 24] = block_c6Cbj_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Cbs; else goto c6Cbk;
       u6Cbs: // global
           call _c6Cbj(R1) args: 0, res: 0, upd: 0;
       c6Cbk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowSum_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowSum_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Cbj() //  [R1]
         { []
         }
     {offset
       c6Cbj: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec5_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Cbj_info" {
     block_c6Cbj_info:
         const _c6Cbj;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.986908929 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_$cshow_closure" {
     Data.Semigroup.Internal.$fShowSum_$cshow_closure:
         const Data.Semigroup.Internal.$fShowSum_$cshow_info;
         const 0;
 },
 sat_s6ASw_entry() //  [R1]
         { []
         }
     {offset
       c6CbP: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6CbQ; else goto c6CbR;
       c6CbQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CbR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASw_info" {
     sat_s6ASw_info:
         const sat_s6ASw_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+88;
 },
 sat_s6ASx_entry() //  [R1]
         { []
         }
     {offset
       c6CbS: // global
           _s6ASx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CbT; else goto c6CbU;
       c6CbU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CbW; else goto c6CbV;
       c6CbW: // global
           HpAlloc = 32;
           goto c6CbT;
       c6CbT: // global
           R1 = _s6ASx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CbV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ASx::P64;
           _s6ASu::P64 = P64[_s6ASx::P64 + 16];
           _s6ASv::P64 = P64[_s6ASx::P64 + 24];
           I64[Hp - 24] = sat_s6ASw_info;
           P64[Hp - 8] = _s6ASu::P64;
           P64[Hp] = _s6ASv::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ASx_info" {
     sat_s6ASx_info:
         const sat_s6ASx_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+88;
 },
 Data.Semigroup.Internal.$fShowSum_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CbX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Cc1; else goto c6Cc0;
       c6Cc1: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Cc0: // global
           I64[Hp - 24] = sat_s6ASx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowSum2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_$cshow_info" {
     Data.Semigroup.Internal.$fShowSum_$cshow_info:
         const Data.Semigroup.Internal.$fShowSum_$cshow_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const S6Bb6_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:54.99544556 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowSum_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowSum_$cshowList_info;
 },
 sat_s6ASC_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Ccv: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec5_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASC_info" {
     sat_s6ASC_info:
         const sat_s6ASC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowSum_$cshowList_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c6Ccy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CcC; else goto c6CcB;
       c6CcC: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CcB: // global
           I64[Hp - 8] = sat_s6ASC_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_$cshowList_info" {
     Data.Semigroup.Internal.$fShowSum_$cshowList_info:
         const Data.Semigroup.Internal.$fShowSum_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.001890103 UTC

[section ""data" . Data.Semigroup.Internal.$fShowSum_closure" {
     Data.Semigroup.Internal.$fShowSum_closure:
         const Data.Semigroup.Internal.$fShowSum_info;
         const 0;
 },
 sat_s6ASG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6CcU: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowSum_$cshowList_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASG_info" {
     sat_s6ASG_info:
         const sat_s6ASG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6ASF_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Cd2: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowSum_$cshow_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASF_info" {
     sat_s6ASF_info:
         const sat_s6ASF_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Bb6_srt+288;
 },
 sat_s6ASE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Cda: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowSum_$cshowsPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASE_info" {
     sat_s6ASE_info:
         const sat_s6ASE_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowSum_entry() //  [R2]
         { []
         }
     {offset
       c6Cde: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6Cdi; else goto c6Cdh;
       c6Cdi: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cdh: // global
           I64[Hp - 72] = sat_s6ASG_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6ASF_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6ASE_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowSum_info" {
     Data.Semigroup.Internal.$fShowSum_info:
         const Data.Semigroup.Internal.$fShowSum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.009620983 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadSum5_bytes" {
     Data.Semigroup.Internal.$fReadSum5_bytes:
         I8[] [83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.012047397 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum4_closure" {
     Data.Semigroup.Internal.$fReadSum4_closure:
         const Data.Semigroup.Internal.$fReadSum4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadSum4_entry() //  [R1]
         { []
         }
     {offset
       c6CdL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CdM; else goto c6CdN;
       c6CdM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CdN: // global
           (_c6CdI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CdI::I64 == 0) goto c6CdK; else goto c6CdJ;
       c6CdK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CdJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CdI::I64;
           R2 = Data.Semigroup.Internal.$fReadSum5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum4_info" {
     Data.Semigroup.Internal.$fReadSum4_info:
         const Data.Semigroup.Internal.$fReadSum4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.015791038 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_lexeme_closure" {
     Data.Semigroup.Internal.$fReadSum_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadSum4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.017725161 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadSum3_bytes" {
     Data.Semigroup.Internal.$fReadSum3_bytes:
         I8[] [103,101,116,83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.020944405 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum2_closure" {
     Data.Semigroup.Internal.$fReadSum2_closure:
         const Data.Semigroup.Internal.$fReadSum2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadSum2_entry() //  [R1]
         { []
         }
     {offset
       c6Ce4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Ce5; else goto c6Ce6;
       c6Ce5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Ce6: // global
           (_c6Ce1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Ce1::I64 == 0) goto c6Ce3; else goto c6Ce2;
       c6Ce3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Ce2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Ce1::I64;
           R2 = Data.Semigroup.Internal.$fReadSum3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum2_info" {
     Data.Semigroup.Internal.$fReadSum2_info:
         const Data.Semigroup.Internal.$fReadSum2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.031543646 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum1_closure" {
     Data.Semigroup.Internal.$fReadSum1_closure:
         const Data.Semigroup.Internal.$fReadSum1_info;
         const 0;
 },
 lvl12_s6ASI_entry() //  [R1]
         { []
         }
     {offset
       c6Cen: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Ceo; else goto c6Cep;
       c6Ceo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cep: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6ASI_info" {
     lvl12_s6ASI_info:
         const lvl12_s6ASI_entry;
         const 1;
         const 16;
 },
 ds_s6ASJ_entry() //  [R1]
         { []
         }
     {offset
       c6Cev: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6ASJ_info" {
     ds_s6ASJ_info:
         const ds_s6ASJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6ASU_entry() //  [R1]
         { []
         }
     {offset
       c6Cf6: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASU_info" {
     sat_s6ASU_info:
         const sat_s6ASU_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6ASX_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Cfc: // global
           _s6ASS::P64 = R2;
           _s6ASX::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6Cfd; else goto c6Cfe;
       c6Cfe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Cfg; else goto c6Cff;
       c6Cfg: // global
           HpAlloc = 24;
           goto c6Cfd;
       c6Cfd: // global
           R2 = _s6ASS::P64;
           R1 = _s6ASX::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cff: // global
           _s6ASM::P64 = P64[_s6ASX::P64 + 7];
           I64[Hp - 16] = sat_s6ASU_info;
           P64[Hp - 8] = _s6ASM::P64;
           P64[Hp] = _s6ASS::P64;
           I64[Sp - 8] = block_c6Cf9_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASX_info" {
     sat_s6ASX_info:
         const sat_s6ASX_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 _c6Cf9() //  [R1]
         { []
         }
     {offset
       c6Cf9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Cfj; else goto c6Cfi;
       c6Cfj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Cfi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Cf9_info" {
     block_c6Cf9_info:
         const _c6Cf9;
         const 0;
         const 30;
 },
 sat_s6ASY_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Cfk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Cfo; else goto c6Cfn;
       c6Cfo: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cfn: // global
           _s6ASJ::P64 = P64[R1 + 7];
           _s6ASM::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6ASX_info;
           P64[Hp] = _s6ASM::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6ASJ::P64;
           R2 = Data.Semigroup.Internal.$fReadSum2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ASY_info" {
     sat_s6ASY_info:
         const sat_s6ASY_entry;
         const 2;
         const 72057624102699019;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 sat_s6AT1_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Cfs: // global
           _s6ASQ::P64 = R2;
           _s6AT1::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6Cft; else goto c6Cfu;
       c6Cfu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Cfw; else goto c6Cfv;
       c6Cfw: // global
           HpAlloc = 24;
           goto c6Cft;
       c6Cft: // global
           R2 = _s6ASQ::P64;
           R1 = _s6AT1::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cfv: // global
           _s6ASJ::P64 = P64[_s6AT1::P64 + 7];
           _s6ASM::P64 = P64[_s6AT1::P64 + 15];
           I64[Hp - 16] = sat_s6ASY_info;
           P64[Hp - 8] = _s6ASJ::P64;
           P64[Hp] = _s6ASM::P64;
           I64[Sp - 8] = block_c6Cfp_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AT1_info" {
     sat_s6AT1_info:
         const sat_s6AT1_entry;
         const 2;
         const 72057692822175755;
         const 4294967301;
         const S6Bb6_srt+112;
 },
 _c6Cfp() //  [R1]
         { []
         }
     {offset
       c6Cfp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Cfz; else goto c6Cfy;
       c6Cfz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Cfy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Cfp_info" {
     block_c6Cfp_info:
         const _c6Cfp;
         const 0;
         const 30;
 },
 sat_s6AT4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6CfA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6CfB; else goto c6CfC;
       c6CfB: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CfC: // global
           I64[Sp - 24] = block_c6CeD_info;
           _s6ASJ::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6ASJ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6CfP; else goto c6CeE;
       u6CfP: // global
           call _c6CeD(R1) args: 0, res: 0, upd: 0;
       c6CeE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AT4_info" {
     sat_s6AT4_info:
         const sat_s6AT4_entry;
         const 1;
         const 216172880898031625;
         const 8589934607;
         const S6Bb6_srt+112;
 },
 _c6CeD() //  [R1]
         { []
         }
     {offset
       c6CeD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CfF; else goto c6CfE;
       c6CfF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CfE: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6CfH; else goto c6CfL;
       c6CfH: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6CfL: // global
           I64[Hp - 16] = sat_s6AT1_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6CfI_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadSum_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CeD_info" {
     block_c6CeD_info:
         const _c6CeD;
         const 2;
         const 216172880898031646;
         const S6Bb6_srt+112;
 },
 _c6CfI() //  [R1]
         { []
         }
     {offset
       c6CfI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CfO; else goto c6CfN;
       c6CfO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CfN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CfI_info" {
     block_c6CfI_info:
         const _c6CfI;
         const 0;
         const 30;
 },
 Data.Semigroup.Internal.$fReadSum1_entry() //  [R2]
         { []
         }
     {offset
       c6CfQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6CfU; else goto c6CfT;
       c6CfU: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CfT: // global
           I64[Hp - 48] = lvl12_s6ASI_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6ASJ_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6AT4_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum1_info" {
     Data.Semigroup.Internal.$fReadSum1_info:
         const Data.Semigroup.Internal.$fReadSum1_entry;
         const 0;
         const 504403531927650318;
         const 4294967301;
         const S6Bb6_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.063900393 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadSum_$creadsPrec_info;
         const 0;
 },
 ds_s6AT6_entry() //  [R1]
         { []
         }
     {offset
       c6Cha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Chb; else goto c6Chc;
       c6Chb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Chc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6AT6_info" {
     ds_s6AT6_info:
         const ds_s6AT6_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+320;
 },
 sat_s6AT8_entry() //  [R1]
         { []
         }
     {offset
       c6Chm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Chn; else goto c6Cho;
       c6Chn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cho: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AT8_info" {
     sat_s6AT8_info:
         const sat_s6AT8_entry;
         const 2;
         const 18;
 },
 sat_s6AT9_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Chp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Cht; else goto c6Chs;
       c6Cht: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Chs: // global
           _s6AT6::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6AT8_info;
           P64[Hp - 8] = _s6AT6::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AT9_info" {
     sat_s6AT9_info:
         const sat_s6AT9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadSum_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6Chu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Chy; else goto c6Chx;
       c6Chy: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Chx: // global
           I64[Hp - 32] = ds_s6AT6_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6AT9_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadSum_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadSum_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.079155837 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadSum_$creadListPrec_info;
         const 0;
 },
 sat_s6ATb_entry() //  [R1]
         { []
         }
     {offset
       c6Ci5: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATb_info" {
     sat_s6ATb_info:
         const sat_s6ATb_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+320;
 },
 Data.Semigroup.Internal.$fReadSum_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6Ci8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Cic; else goto c6Cib;
       c6Cic: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cib: // global
           I64[Hp - 16] = sat_s6ATb_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadSum_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadSum_$creadListPrec_entry;
         const 0;
         const 2814754062073870;
         const 4294967301;
         const S6Bb6_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.088229539 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_$creadList_closure" {
     Data.Semigroup.Internal.$fReadSum_$creadList_closure:
         const Data.Semigroup.Internal.$fReadSum_$creadList_info;
         const 0;
 },
 sat_s6ATd_entry() //  [R1]
         { []
         }
     {offset
       c6Cix: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATd_info" {
     sat_s6ATd_info:
         const sat_s6ATd_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+320;
 },
 sat_s6ATe_entry() //  [R1]
         { []
         }
     {offset
       c6CiA: // global
           _s6ATe::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6CiB; else goto c6CiC;
       c6CiC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CiE; else goto c6CiD;
       c6CiE: // global
           HpAlloc = 24;
           goto c6CiB;
       c6CiB: // global
           R1 = _s6ATe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ATe::P64;
           _s6ATc::P64 = P64[_s6ATe::P64 + 16];
           I64[Hp - 16] = sat_s6ATd_info;
           P64[Hp] = _s6ATc::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATe_info" {
     sat_s6ATe_info:
         const sat_s6ATe_entry;
         const 1;
         const 562954248388624;
         const S6Bb6_srt+184;
 },
 Data.Semigroup.Internal.$fReadSum_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6CiF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CiJ; else goto c6CiI;
       c6CiJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CiI: // global
           I64[Hp - 16] = sat_s6ATe_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_$creadList_info" {
     Data.Semigroup.Internal.$fReadSum_$creadList_info:
         const Data.Semigroup.Internal.$fReadSum_$creadList_entry;
         const 0;
         const 5066553875759118;
         const 4294967301;
         const S6Bb6_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.102090169 UTC

[section ""data" . Data.Semigroup.Internal.$fReadSum_closure" {
     Data.Semigroup.Internal.$fReadSum_closure:
         const Data.Semigroup.Internal.$fReadSum_info;
         const 0;
 },
 sat_s6ATj_entry() //  [R1]
         { []
         }
     {offset
       c6Cjb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cjc; else goto c6Cjd;
       c6Cjc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cjd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATj_info" {
     sat_s6ATj_info:
         const sat_s6ATj_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+336;
 },
 sat_s6ATi_entry() //  [R1]
         { []
         }
     {offset
       c6Cji: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cjj; else goto c6Cjk;
       c6Cjj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cjk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATi_info" {
     sat_s6ATi_info:
         const sat_s6ATi_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+320;
 },
 sat_s6ATh_entry() //  [R1]
         { []
         }
     {offset
       c6Cjp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cjq; else goto c6Cjr;
       c6Cjq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cjr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATh_info" {
     sat_s6ATh_info:
         const sat_s6ATh_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+344;
 },
 sat_s6ATg_entry() //  [R1]
         { []
         }
     {offset
       c6Cjw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cjx; else goto c6Cjy;
       c6Cjx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cjy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadSum_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATg_info" {
     sat_s6ATg_info:
         const sat_s6ATg_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+328;
 },
 Data.Semigroup.Internal.$fReadSum_entry() //  [R2]
         { []
         }
     {offset
       c6CjA: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6CjE; else goto c6CjD;
       c6CjE: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CjD: // global
           I64[Hp - 128] = sat_s6ATj_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6ATi_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6ATh_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6ATg_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadSum_info" {
     Data.Semigroup.Internal.$fReadSum_info:
         const Data.Semigroup.Internal.$fReadSum_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6Bb6_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.117514213 UTC

[section ""data" . Data.Semigroup.Internal.$fEqSum_closure" {
     Data.Semigroup.Internal.$fEqSum_closure:
         const Data.Semigroup.Internal.$fEqSum_info;
 },
 sat_s6ATm_entry() //  [R1]
         { []
         }
     {offset
       c6Ckl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Ckm; else goto c6Ckn;
       c6Ckm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Ckn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATm_info" {
     sat_s6ATm_info:
         const sat_s6ATm_entry;
         const 1;
         const 16;
 },
 sat_s6ATl_entry() //  [R1]
         { []
         }
     {offset
       c6Cks: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Ckt; else goto c6Cku;
       c6Ckt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cku: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATl_info" {
     sat_s6ATl_info:
         const sat_s6ATl_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqSum_entry() //  [R2]
         { []
         }
     {offset
       c6Ckw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6CkA; else goto c6Ckz;
       c6CkA: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Ckz: // global
           I64[Hp - 64] = sat_s6ATm_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6ATl_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqSum_info" {
     Data.Semigroup.Internal.$fEqSum_info:
         const Data.Semigroup.Internal.$fEqSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.125077747 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdSum_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdSum_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdSum_$cp1Ord_info;
 },
 sat_s6ATo_entry() //  [R1]
         { []
         }
     {offset
       c6Cl3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cl4; else goto c6Cl5;
       c6Cl4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cl5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATo_info" {
     sat_s6ATo_info:
         const sat_s6ATo_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdSum_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6Cl6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Cla; else goto c6Cl9;
       c6Cla: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdSum_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cl9: // global
           I64[Hp - 16] = sat_s6ATo_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqSum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdSum_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdSum_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdSum_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.13393181 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdSum_closure" {
     Data.Semigroup.Internal.$fOrdSum_closure:
         const Data.Semigroup.Internal.$fOrdSum_info;
 },
 sat_s6ATx_entry() //  [R1]
         { []
         }
     {offset
       c6Clt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Clu; else goto c6Clv;
       c6Clu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Clv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATx_info" {
     sat_s6ATx_info:
         const sat_s6ATx_entry;
         const 1;
         const 16;
 },
 sat_s6ATw_entry() //  [R1]
         { []
         }
     {offset
       c6ClA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ClB; else goto c6ClC;
       c6ClB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ClC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATw_info" {
     sat_s6ATw_info:
         const sat_s6ATw_entry;
         const 1;
         const 16;
 },
 sat_s6ATv_entry() //  [R1]
         { []
         }
     {offset
       c6ClH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ClI; else goto c6ClJ;
       c6ClI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ClJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATv_info" {
     sat_s6ATv_info:
         const sat_s6ATv_entry;
         const 1;
         const 16;
 },
 sat_s6ATu_entry() //  [R1]
         { []
         }
     {offset
       c6ClO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ClP; else goto c6ClQ;
       c6ClP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ClQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATu_info" {
     sat_s6ATu_info:
         const sat_s6ATu_entry;
         const 1;
         const 16;
 },
 sat_s6ATt_entry() //  [R1]
         { []
         }
     {offset
       c6ClV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ClW; else goto c6ClX;
       c6ClW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ClX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATt_info" {
     sat_s6ATt_info:
         const sat_s6ATt_entry;
         const 1;
         const 16;
 },
 sat_s6ATs_entry() //  [R1]
         { []
         }
     {offset
       c6Cm2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cm3; else goto c6Cm4;
       c6Cm3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cm4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATs_info" {
     sat_s6ATs_info:
         const sat_s6ATs_entry;
         const 1;
         const 16;
 },
 sat_s6ATr_entry() //  [R1]
         { []
         }
     {offset
       c6Cm9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cma; else goto c6Cmb;
       c6Cma: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cmb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATr_info" {
     sat_s6ATr_info:
         const sat_s6ATr_entry;
         const 1;
         const 16;
 },
 sat_s6ATq_entry() //  [R1]
         { []
         }
     {offset
       c6Cmg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cmh; else goto c6Cmi;
       c6Cmh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cmi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdSum_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATq_info" {
     sat_s6ATq_info:
         const sat_s6ATq_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdSum_entry() //  [R2]
         { []
         }
     {offset
       c6Cmk: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6Cmo; else goto c6Cmn;
       c6Cmo: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdSum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cmn: // global
           I64[Hp - 256] = sat_s6ATx_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6ATw_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6ATv_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6ATu_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6ATt_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6ATs_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6ATr_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6ATq_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdSum_info" {
     Data.Semigroup.Internal.$fOrdSum_info:
         const Data.Semigroup.Internal.$fOrdSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.150844683 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAny1_closure" {
     Data.Semigroup.Internal.$fGenericAny1_closure:
         const Data.Semigroup.Internal.$fGenericAny1_info;
 },
 Data.Semigroup.Internal.$fGenericAny1_entry() //  [R2]
         { []
         }
     {offset
       c6Cnt: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAny1_info" {
     Data.Semigroup.Internal.$fGenericAny1_info:
         const Data.Semigroup.Internal.$fGenericAny1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.154694821 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAny2_closure" {
     Data.Semigroup.Internal.$fGenericAny2_closure:
         const Data.Semigroup.Internal.$fGenericAny2_info;
 },
 Data.Semigroup.Internal.$fGenericAny2_entry() //  [R2]
         { []
         }
     {offset
       c6CnE: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAny2_info" {
     Data.Semigroup.Internal.$fGenericAny2_info:
         const Data.Semigroup.Internal.$fGenericAny2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.157914786 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAny_closure" {
     Data.Semigroup.Internal.$fGenericAny_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericAny2_closure+1;
         const Data.Semigroup.Internal.$fGenericAny1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.15956998 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedAny_closure" {
     Data.Semigroup.Internal.$fBoundedAny_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.161319229 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAny4_bytes" {
     Data.Semigroup.Internal.$fShowAny4_bytes:
         I8[] [65,110,121,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.164153737 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny3_closure" {
     Data.Semigroup.Internal.$fShowAny3_closure:
         const Data.Semigroup.Internal.$fShowAny3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAny3_entry() //  [R1]
         { []
         }
     {offset
       c6CnW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CnX; else goto c6CnY;
       c6CnX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CnY: // global
           (_c6CnT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CnT::I64 == 0) goto c6CnV; else goto c6CnU;
       c6CnV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CnU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CnT::I64;
           R2 = Data.Semigroup.Internal.$fShowAny4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny3_info" {
     Data.Semigroup.Internal.$fShowAny3_info:
         const Data.Semigroup.Internal.$fShowAny3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.168089501 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAny2_bytes" {
     Data.Semigroup.Internal.$fShowAny2_bytes:
         I8[] [103,101,116,65,110,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.175596108 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec2_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec2_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec2_info;
         const 0;
 },
 sat_s6ATF_entry() //  [R1]
         { []
         }
     {offset
       c6Cow: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATF_info" {
     sat_s6ATF_info:
         const sat_s6ATF_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6ATG_entry() //  [R1]
         { []
         }
     {offset
       c6CoF: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATG_info" {
     sat_s6ATG_info:
         const sat_s6ATG_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6ATH_entry() //  [R1]
         { []
         }
     {offset
       c6CoM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6CoN; else goto c6CoO;
       c6CoN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CoO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6Con_info;
           _s6ATC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6ATC::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6CoV; else goto c6Coo;
       u6CoV: // global
           call _c6Con(R1) args: 0, res: 0, upd: 0;
       c6Coo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATH_info" {
     sat_s6ATH_info:
         const sat_s6ATH_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 _c6Con() //  [R1]
         { []
         }
     {offset
       c6Con: // global
           _s6ATC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6CoJ; else goto c6CoK;
       c6CoJ: // global
           Hp = Hp + 24;
           _s6ATE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CoU; else goto c6CoQ;
       c6CoQ: // global
           I64[Hp - 16] = sat_s6ATF_info;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6CoK: // global
           Hp = Hp + 24;
           _s6ATE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CoU; else goto c6CoT;
       c6CoU: // global
           HpAlloc = 24;
           R1 = _s6ATE::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6CoT: // global
           I64[Hp - 16] = sat_s6ATG_info;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Con_info" {
     block_c6Con_info:
         const _c6Con;
         const 1;
         const 30064771102;
         const S6Bb6_srt+360;
 },
 sat_s6ATI_entry() //  [R1]
         { []
         }
     {offset
       c6CoW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Cp0; else goto c6CoZ;
       c6Cp0: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CoZ: // global
           _s6ATB::P64 = P64[R1 + 16];
           _s6ATC::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6ATH_info;
           P64[Hp - 8] = _s6ATB::P64;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATI_info" {
     sat_s6ATI_info:
         const sat_s6ATI_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 sat_s6ATL_entry() //  [R1]
         { []
         }
     {offset
       c6Cpo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Cps; else goto c6Cpr;
       c6Cps: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cpr: // global
           _s6ATC::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATL_info" {
     sat_s6ATL_info:
         const sat_s6ATL_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6ATN_entry() //  [R1]
         { []
         }
     {offset
       c6CpA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CpE; else goto c6CpD;
       c6CpE: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CpD: // global
           _s6ATC::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATN_info" {
     sat_s6ATN_info:
         const sat_s6ATN_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6ATO_entry() //  [R1]
         { []
         }
     {offset
       c6CpJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6CpK; else goto c6CpL;
       c6CpK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CpL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6Cpe_info;
           _s6ATC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6ATC::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6CpS; else goto c6Cpf;
       u6CpS: // global
           call _c6Cpe(R1) args: 0, res: 0, upd: 0;
       c6Cpf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATO_info" {
     sat_s6ATO_info:
         const sat_s6ATO_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 _c6Cpe() //  [R1]
         { []
         }
     {offset
       c6Cpe: // global
           _s6ATC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6CpG; else goto c6CpH;
       c6CpG: // global
           Hp = Hp + 24;
           _s6ATJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CpR; else goto c6CpN;
       c6CpN: // global
           I64[Hp - 16] = sat_s6ATL_info;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6CpH: // global
           Hp = Hp + 24;
           _s6ATJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CpR; else goto c6CpQ;
       c6CpR: // global
           HpAlloc = 24;
           R1 = _s6ATJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6CpQ: // global
           I64[Hp - 16] = sat_s6ATN_info;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Cpe_info" {
     block_c6Cpe_info:
         const _c6Cpe;
         const 1;
         const 30064771102;
         const S6Bb6_srt+360;
 },
 sat_s6ATP_entry() //  [R1]
         { []
         }
     {offset
       c6CpT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CpX; else goto c6CpW;
       c6CpX: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CpW: // global
           _s6ATB::P64 = P64[R1 + 16];
           _s6ATC::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6ATO_info;
           P64[Hp - 8] = _s6ATB::P64;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATP_info" {
     sat_s6ATP_info:
         const sat_s6ATP_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 sat_s6ATQ_entry() //  [R1]
         { []
         }
     {offset
       c6CpY: // global
           _s6ATQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CpZ; else goto c6Cq0;
       c6Cq0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Cq2; else goto c6Cq1;
       c6Cq2: // global
           HpAlloc = 32;
           goto c6CpZ;
       c6CpZ: // global
           R1 = _s6ATQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cq1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6ATQ::P64;
           _s6ATB::P64 = P64[_s6ATQ::P64 + 16];
           _s6ATC::P64 = P64[_s6ATQ::P64 + 24];
           I64[Hp - 24] = sat_s6ATP_info;
           P64[Hp - 8] = _s6ATB::P64;
           P64[Hp] = _s6ATC::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATQ_info" {
     sat_s6ATQ_info:
         const sat_s6ATQ_entry;
         const 2;
         const 64424509458;
         const S6Bb6_srt+360;
 },
 Data.Semigroup.Internal.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Cq6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Cqa; else goto c6Cq9;
       c6Cqa: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Cq9: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c6Cq4; else goto c6Cq5;
       c6Cq4: // global
           I64[Hp - 48] = sat_s6ATI_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c6Cof::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c6Cof::P64;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c6Cq5: // global
           I64[Hp - 48] = sat_s6ATQ_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec2_info" {
     Data.Semigroup.Internal.$w$cshowsPrec2_info:
         const Data.Semigroup.Internal.$w$cshowsPrec2_entry;
         const 0;
         const 133143986190;
         const 12884901907;
         const S6Bb6_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.199974603 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAny_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6Crp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Crq; else goto c6Crr;
       c6Crq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Crr: // global
           I64[Sp - 24] = block_c6Crm_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Crv; else goto c6Crn;
       u6Crv: // global
           call _c6Crm(R1) args: 0, res: 0, upd: 0;
       c6Crn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowAny_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Bb6_srt+392;
 },
 _c6Crm() //  [R1]
         { []
         }
     {offset
       c6Crm: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec2_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Crm_info" {
     block_c6Crm_info:
         const _c6Crm;
         const 2;
         const 4294967326;
         const S6Bb6_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.207139733 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll6_closure" {
     Data.Semigroup.Internal.$fShowAll6_closure:
         const Data.Semigroup.Internal.$fShowAll6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll6_entry() //  [R1]
         { []
         }
     {offset
       c6CrM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CrN; else goto c6CrO;
       c6CrN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CrO: // global
           (_c6CrJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CrJ::I64 == 0) goto c6CrL; else goto c6CrK;
       c6CrL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CrK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CrJ::I64;
           R3 = Data.Semigroup.Internal.$fReadAll4_closure;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll6_info" {
     Data.Semigroup.Internal.$fShowAll6_info:
         const Data.Semigroup.Internal.$fShowAll6_entry;
         const 0;
         const 21474836501;
         const S6Bb6_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.211548317 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll5_closure" {
     Data.Semigroup.Internal.$fShowAll5_closure:
         const Data.Semigroup.Internal.$fShowAll5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll5_entry() //  [R1]
         { []
         }
     {offset
       c6Cs3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cs4; else goto c6Cs5;
       c6Cs4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cs5: // global
           (_c6Cs0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Cs0::I64 == 0) goto c6Cs2; else goto c6Cs1;
       c6Cs2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Cs1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Cs0::I64;
           R3 = Data.Semigroup.Internal.$fReadAll4_closure;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll5_info" {
     Data.Semigroup.Internal.$fShowAll5_info:
         const Data.Semigroup.Internal.$fShowAll5_entry;
         const 0;
         const 12884901909;
         const S6Bb6_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.217446727 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_$cshow_closure" {
     Data.Semigroup.Internal.$fShowAny_$cshow_closure:
         const Data.Semigroup.Internal.$fShowAny_$cshow_info;
         const 0;
 },
 sat_s6ATY_entry() //  [R1]
         { []
         }
     {offset
       c6Csx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Csy; else goto c6Csz;
       c6Csy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Csz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6Csq_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6CsG; else goto c6Csr;
       u6CsG: // global
           call _c6Csq(R1) args: 0, res: 0, upd: 0;
       c6Csr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6ATY_info" {
     sat_s6ATY_info:
         const sat_s6ATY_entry;
         const 1;
         const 12884901904;
         const S6Bb6_srt+408;
 },
 _c6Csq() //  [R1]
         { []
         }
     {offset
       c6Csq: // global
           if (R1 & 7 == 1) goto c6Csu; else goto c6Csv;
       c6Csu: // global
           R1 = Data.Semigroup.Internal.$fShowAll6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6Csv: // global
           R1 = Data.Semigroup.Internal.$fShowAll5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Csq_info" {
     block_c6Csq_info:
         const _c6Csq;
         const 0;
         const 12884901918;
         const S6Bb6_srt+408;
 },
 sat_s6ATZ_entry() //  [R1]
         { []
         }
     {offset
       c6CsH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CsL; else goto c6CsK;
       c6CsL: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CsK: // global
           _s6ATW::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s6ATY_info;
           P64[Hp] = _s6ATW::P64;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6ATZ_info" {
     sat_s6ATZ_info:
         const sat_s6ATZ_entry;
         const 1;
         const 12884901904;
         const S6Bb6_srt+408;
 },
 Data.Semigroup.Internal.$fShowAny_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c6CsM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CsQ; else goto c6CsP;
       c6CsQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAny_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CsP: // global
           I64[Hp - 16] = sat_s6ATZ_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny_$cshow_info" {
     Data.Semigroup.Internal.$fShowAny_$cshow_info:
         const Data.Semigroup.Internal.$fShowAny_$cshow_entry;
         const 0;
         const 244813135886;
         const 4294967301;
         const S6Bb6_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.229297221 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny1_closure" {
     Data.Semigroup.Internal.$fShowAny1_closure:
         const Data.Semigroup.Internal.$fShowAny1_info;
         const 0;
 },
 sat_s6AU3_entry() //  [R1]
         { []
         }
     {offset
       c6Ctz: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AU3_info" {
     sat_s6AU3_info:
         const sat_s6AU3_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AU4_entry() //  [R1]
         { []
         }
     {offset
       c6CtI: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AU4_info" {
     sat_s6AU4_info:
         const sat_s6AU4_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AU5_entry() //  [R1]
         { []
         }
     {offset
       c6CtP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6CtQ; else goto c6CtR;
       c6CtQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CtR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6Ctq_info;
           _s6AU1::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6AU1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6CtY; else goto c6Ctr;
       u6CtY: // global
           call _c6Ctq(R1) args: 0, res: 0, upd: 0;
       c6Ctr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AU5_info" {
     sat_s6AU5_info:
         const sat_s6AU5_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 _c6Ctq() //  [R1]
         { []
         }
     {offset
       c6Ctq: // global
           _s6AU1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6CtM; else goto c6CtN;
       c6CtM: // global
           Hp = Hp + 24;
           _s6AU2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CtX; else goto c6CtT;
       c6CtT: // global
           I64[Hp - 16] = sat_s6AU3_info;
           P64[Hp] = _s6AU1::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6CtN: // global
           Hp = Hp + 24;
           _s6AU2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CtX; else goto c6CtW;
       c6CtX: // global
           HpAlloc = 24;
           R1 = _s6AU2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6CtW: // global
           I64[Hp - 16] = sat_s6AU4_info;
           P64[Hp] = _s6AU1::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Ctq_info" {
     block_c6Ctq_info:
         const _c6Ctq;
         const 1;
         const 30064771102;
         const S6Bb6_srt+360;
 },
 sat_s6AU6_entry() //  [R1]
         { []
         }
     {offset
       c6CtZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Cu3; else goto c6Cu2;
       c6Cu3: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cu2: // global
           _s6AU0::P64 = P64[R1 + 16];
           _s6AU1::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6AU5_info;
           P64[Hp - 8] = _s6AU0::P64;
           P64[Hp] = _s6AU1::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AU6_info" {
     sat_s6AU6_info:
         const sat_s6AU6_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 Data.Semigroup.Internal.$fShowAny1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Cu4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Cu8; else goto c6Cu7;
       c6Cu8: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAny1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Cu7: // global
           I64[Hp - 24] = sat_s6AU6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAny3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny1_info" {
     Data.Semigroup.Internal.$fShowAny1_info:
         const Data.Semigroup.Internal.$fShowAny1_entry;
         const 0;
         const 2263447765006;
         const 8589934607;
         const S6Bb6_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.242533409 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowAny_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowAny_$cshowList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAny_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CuG: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fShowAny1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAny_$cshowList_info" {
     Data.Semigroup.Internal.$fShowAny_$cshowList_info:
         const Data.Semigroup.Internal.$fShowAny_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Bb6_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.24598501 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAny_closure" {
     Data.Semigroup.Internal.$fShowAny_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure+3;
         const Data.Semigroup.Internal.$fShowAny_$cshow_closure+1;
         const Data.Semigroup.Internal.$fShowAny_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.248590122 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAny6_bytes" {
     Data.Semigroup.Internal.$fReadAny6_bytes:
         I8[] [65,110,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.251353519 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny5_closure" {
     Data.Semigroup.Internal.$fReadAny5_closure:
         const Data.Semigroup.Internal.$fReadAny5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny5_entry() //  [R1]
         { []
         }
     {offset
       c6CuV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CuW; else goto c6CuX;
       c6CuW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CuX: // global
           (_c6CuS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CuS::I64 == 0) goto c6CuU; else goto c6CuT;
       c6CuU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CuT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CuS::I64;
           R2 = Data.Semigroup.Internal.$fReadAny6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny5_info" {
     Data.Semigroup.Internal.$fReadAny5_info:
         const Data.Semigroup.Internal.$fReadAny5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.255315418 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_lexeme_closure" {
     Data.Semigroup.Internal.$fReadAny_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadAny5_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.25705897 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAny4_bytes" {
     Data.Semigroup.Internal.$fReadAny4_bytes:
         I8[] [103,101,116,65,110,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.259540416 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny3_closure" {
     Data.Semigroup.Internal.$fReadAny3_closure:
         const Data.Semigroup.Internal.$fReadAny3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny3_entry() //  [R1]
         { []
         }
     {offset
       c6Cve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cvf; else goto c6Cvg;
       c6Cvf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cvg: // global
           (_c6Cvb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Cvb::I64 == 0) goto c6Cvd; else goto c6Cvc;
       c6Cvd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Cvc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Cvb::I64;
           R2 = Data.Semigroup.Internal.$fReadAny4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny3_info" {
     Data.Semigroup.Internal.$fReadAny3_info:
         const Data.Semigroup.Internal.$fReadAny3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.263774162 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll7_closure" {
     Data.Semigroup.Internal.$fReadAll7_closure:
         const Data.Semigroup.Internal.$fReadAll7_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll7_entry() //  [R3]
         { []
         }
     {offset
       c6Cvt: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Read.$fReadBool2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll7_info" {
     Data.Semigroup.Internal.$fReadAll7_info:
         const Data.Semigroup.Internal.$fReadAll7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Bb6_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.271554497 UTC

[section ""data" . Data.Semigroup.Internal.$w$creadPrec1_closure" {
     Data.Semigroup.Internal.$w$creadPrec1_closure:
         const Data.Semigroup.Internal.$w$creadPrec1_info;
         const 0;
 },
 sat_s6AUi_entry() //  [R1]
         { []
         }
     {offset
       c6Cw3: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUi_info" {
     sat_s6AUi_info:
         const sat_s6AUi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6AUl_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Cw9: // global
           _s6AUg::P64 = R2;
           _s6AUl::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6Cwa; else goto c6Cwb;
       c6Cwb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Cwd; else goto c6Cwc;
       c6Cwd: // global
           HpAlloc = 24;
           goto c6Cwa;
       c6Cwa: // global
           R2 = _s6AUg::P64;
           R1 = _s6AUl::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cwc: // global
           _s6AUc::P64 = P64[_s6AUl::P64 + 7];
           I64[Hp - 16] = sat_s6AUi_info;
           P64[Hp - 8] = _s6AUc::P64;
           P64[Hp] = _s6AUg::P64;
           I64[Sp - 8] = block_c6Cw6_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUl_info" {
     sat_s6AUl_info:
         const sat_s6AUl_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Bb6_srt+456;
 },
 _c6Cw6() //  [R1]
         { []
         }
     {offset
       c6Cw6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Cwg; else goto c6Cwf;
       c6Cwg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Cwf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Cw6_info" {
     block_c6Cw6_info:
         const _c6Cw6;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6CwL_srtd" {
     u6CwL_srtd:
         const S6Bb6_srt+128;
         const 45;
         const 32985348833281;
 },
 sat_s6AUm_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Cwh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Cwl; else goto c6Cwk;
       c6Cwl: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cwk: // global
           _s6AUc::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s6AUl_info;
           P64[Hp] = _s6AUc::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = Data.Semigroup.Internal.$fReadAll7_closure+2;
           R2 = Data.Semigroup.Internal.$fReadAny3_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUm_info" {
     sat_s6AUm_info:
         const sat_s6AUm_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6CwL_srtd;
 },
 section ""relreadonly" . u6CwM_srtd" {
     u6CwM_srtd:
         const S6Bb6_srt+128;
         const 45;
         const 32985348833285;
 },
 sat_s6AUp_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Cwp: // global
           _s6AUe::P64 = R2;
           _s6AUp::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6Cwq; else goto c6Cwr;
       c6Cwr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Cwt; else goto c6Cws;
       c6Cwt: // global
           HpAlloc = 16;
           goto c6Cwq;
       c6Cwq: // global
           R2 = _s6AUe::P64;
           R1 = _s6AUp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cws: // global
           _s6AUc::P64 = P64[_s6AUp::P64 + 7];
           I64[Hp - 8] = sat_s6AUm_info;
           P64[Hp] = _s6AUc::P64;
           I64[Sp - 8] = block_c6Cwm_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUp_info" {
     sat_s6AUp_info:
         const sat_s6AUp_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6CwM_srtd;
 },
 _c6Cwm() //  [R1]
         { []
         }
     {offset
       c6Cwm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Cww; else goto c6Cwv;
       c6Cww: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Cwv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Cwm_info" {
     block_c6Cwm_info:
         const _c6Cwm;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6CwN_srtd" {
     u6CwN_srtd:
         const S6Bb6_srt+128;
         const 47;
         const 138538465099781;
 },
 Data.Semigroup.Internal.$w$creadPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CwA: // global
           _s6AUc::P64 = R3;
           _s6AUb::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c6CwB; else goto c6CwC;
       c6CwC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CwE; else goto c6CwD;
       c6CwE: // global
           HpAlloc = 16;
           goto c6CwB;
       c6CwB: // global
           R3 = _s6AUc::P64;
           R2 = _s6AUb::I64;
           R1 = Data.Semigroup.Internal.$w$creadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CwD: // global
           if (%MO_S_Gt_W64(_s6AUb::I64, 11)) goto c6Cwy; else goto c6Cwz;
       c6Cwy: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Cwz: // global
           I64[Hp - 8] = sat_s6AUp_info;
           P64[Hp] = _s6AUc::P64;
           I64[Sp - 8] = block_c6CwF_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAny_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$creadPrec1_info" {
     Data.Semigroup.Internal.$w$creadPrec1_info:
         const Data.Semigroup.Internal.$w$creadPrec1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const u6CwN_srtd;
 },
 _c6CwF() //  [R1]
         { []
         }
     {offset
       c6CwF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CwK; else goto c6CwJ;
       c6CwK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CwJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CwF_info" {
     block_c6CwF_info:
         const _c6CwF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.292502167 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny2_closure" {
     Data.Semigroup.Internal.$fReadAny2_closure:
         const Data.Semigroup.Internal.$fReadAny2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CxF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CxG; else goto c6CxH;
       c6CxG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAny2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CxH: // global
           I64[Sp - 16] = block_c6CxC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6CxL; else goto c6CxD;
       u6CxL: // global
           call _c6CxC(R1) args: 0, res: 0, upd: 0;
       c6CxD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny2_info" {
     Data.Semigroup.Internal.$fReadAny2_info:
         const Data.Semigroup.Internal.$fReadAny2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Bb6_srt+488;
 },
 _c6CxC() //  [R1]
         { []
         }
     {offset
       c6CxC: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$creadPrec1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CxC_info" {
     block_c6CxC_info:
         const _c6CxC;
         const 1;
         const 4294967326;
         const S6Bb6_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.298132581 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny1_closure" {
     Data.Semigroup.Internal.$fReadAny1_closure:
         const Data.Semigroup.Internal.$fReadAny1_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Cy0: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAny2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny1_info" {
     Data.Semigroup.Internal.$fReadAny1_info:
         const Data.Semigroup.Internal.$fReadAny1_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S6Bb6_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.302924517 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_info;
         const 0;
 },
 sat_s6AUx_entry() //  [R1]
         { []
         }
     {offset
       c6Cyf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Cyg; else goto c6Cyh;
       c6Cyg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Cyh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAny2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AUx_info" {
     sat_s6AUx_info:
         const sat_s6AUx_entry;
         const 1;
         const 554050781200;
         const S6Bb6_srt+448;
 },
 Data.Semigroup.Internal.$fReadAny_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6Cyi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Cym; else goto c6Cyl;
       c6Cym: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Cyl: // global
           I64[Hp - 16] = sat_s6AUx_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadAny_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S6Bb6_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.309981385 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c6CyF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CyG; else goto c6CyH;
       c6CyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CyH: // global
           (_c6CyC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CyC::I64 == 0) goto c6CyE; else goto c6CyD;
       c6CyE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CyD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CyC::I64;
           R2 = Data.Semigroup.Internal.$fReadAny1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadAny_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S6Bb6_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.314959496 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny7_closure" {
     Data.Semigroup.Internal.$fReadAny7_closure:
         const Data.Semigroup.Internal.$fReadAny7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny7_entry() //  [R1]
         { []
         }
     {offset
       c6CyW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CyX; else goto c6CyY;
       c6CyX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CyY: // global
           (_c6CyT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CyT::I64 == 0) goto c6CyV; else goto c6CyU;
       c6CyV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CyU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CyT::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny7_info" {
     Data.Semigroup.Internal.$fReadAny7_info:
         const Data.Semigroup.Internal.$fReadAny7_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.319162646 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_$creadList_closure" {
     Data.Semigroup.Internal.$fReadAny_$creadList_closure:
         const Data.Semigroup.Internal.$fReadAny_$creadList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAny_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6Czc: // global
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAny7_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAny_$creadList_info" {
     Data.Semigroup.Internal.$fReadAny_$creadList_info:
         const Data.Semigroup.Internal.$fReadAny_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Bb6_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.322518438 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAny_closure" {
     Data.Semigroup.Internal.$fReadAny_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure+1;
         const Data.Semigroup.Internal.$fReadAny_$creadList_closure+1;
         const Data.Semigroup.Internal.$fReadAny1_closure+2;
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.324505131 UTC

[section ""data" . Data.Semigroup.Internal.$fEqAny_closure" {
     Data.Semigroup.Internal.$fEqAny_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.$fEqBool_$c==_closure+2;
         const GHC.Classes.$fEqBool_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.327419633 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAny_closure" {
     Data.Semigroup.Internal.$fOrdAny_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Semigroup.Internal.$fEqAny_closure+1;
         const GHC.Classes.$fOrdBool_$ccompare_closure+2;
         const GHC.Classes.$fOrdBool_$c<_closure+2;
         const GHC.Classes.$fOrdBool_$c<=_closure+2;
         const GHC.Classes.$fOrdBool_$c>_closure+2;
         const GHC.Classes.$fOrdBool_$c>=_closure+2;
         const GHC.Classes.$fOrdBool_$cmax_closure+2;
         const GHC.Classes.$fOrdBool_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.329803912 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAll1_closure" {
     Data.Semigroup.Internal.$fGenericAll1_closure:
         const Data.Semigroup.Internal.$fGenericAll1_info;
 },
 Data.Semigroup.Internal.$fGenericAll1_entry() //  [R2]
         { []
         }
     {offset
       c6Czq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAll1_info" {
     Data.Semigroup.Internal.$fGenericAll1_info:
         const Data.Semigroup.Internal.$fGenericAll1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.333419163 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAll2_closure" {
     Data.Semigroup.Internal.$fGenericAll2_closure:
         const Data.Semigroup.Internal.$fGenericAll2_info;
 },
 Data.Semigroup.Internal.$fGenericAll2_entry() //  [R2]
         { []
         }
     {offset
       c6CzB: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericAll2_info" {
     Data.Semigroup.Internal.$fGenericAll2_info:
         const Data.Semigroup.Internal.$fGenericAll2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.336733171 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericAll_closure" {
     Data.Semigroup.Internal.$fGenericAll_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericAll2_closure+1;
         const Data.Semigroup.Internal.$fGenericAll1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.338602582 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedAll_closure" {
     Data.Semigroup.Internal.$fBoundedAll_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.34049467 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAll4_bytes" {
     Data.Semigroup.Internal.$fShowAll4_bytes:
         I8[] [65,108,108,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.34299526 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll3_closure" {
     Data.Semigroup.Internal.$fShowAll3_closure:
         const Data.Semigroup.Internal.$fShowAll3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll3_entry() //  [R1]
         { []
         }
     {offset
       c6CzT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CzU; else goto c6CzV;
       c6CzU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CzV: // global
           (_c6CzQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CzQ::I64 == 0) goto c6CzS; else goto c6CzR;
       c6CzS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CzR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CzQ::I64;
           R2 = Data.Semigroup.Internal.$fShowAll4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll3_info" {
     Data.Semigroup.Internal.$fShowAll3_info:
         const Data.Semigroup.Internal.$fShowAll3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.347248686 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowAll2_bytes" {
     Data.Semigroup.Internal.$fShowAll2_bytes:
         I8[] [103,101,116,65,108,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.355179441 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec_info;
         const 0;
 },
 sat_s6AUF_entry() //  [R1]
         { []
         }
     {offset
       c6CAt: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUF_info" {
     sat_s6AUF_info:
         const sat_s6AUF_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AUG_entry() //  [R1]
         { []
         }
     {offset
       c6CAC: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUG_info" {
     sat_s6AUG_info:
         const sat_s6AUG_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AUH_entry() //  [R1]
         { []
         }
     {offset
       c6CAJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6CAK; else goto c6CAL;
       c6CAK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CAL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6CAk_info;
           _s6AUC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6AUC::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6CAS; else goto c6CAl;
       u6CAS: // global
           call _c6CAk(R1) args: 0, res: 0, upd: 0;
       c6CAl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AUH_info" {
     sat_s6AUH_info:
         const sat_s6AUH_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 _c6CAk() //  [R1]
         { []
         }
     {offset
       c6CAk: // global
           _s6AUC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6CAG; else goto c6CAH;
       c6CAG: // global
           Hp = Hp + 24;
           _s6AUE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CAR; else goto c6CAN;
       c6CAN: // global
           I64[Hp - 16] = sat_s6AUF_info;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6CAH: // global
           Hp = Hp + 24;
           _s6AUE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CAR; else goto c6CAQ;
       c6CAR: // global
           HpAlloc = 24;
           R1 = _s6AUE::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6CAQ: // global
           I64[Hp - 16] = sat_s6AUG_info;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6CAk_info" {
     block_c6CAk_info:
         const _c6CAk;
         const 1;
         const 30064771102;
         const S6Bb6_srt+360;
 },
 sat_s6AUI_entry() //  [R1]
         { []
         }
     {offset
       c6CAT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CAX; else goto c6CAW;
       c6CAX: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CAW: // global
           _s6AUB::P64 = P64[R1 + 16];
           _s6AUC::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6AUH_info;
           P64[Hp - 8] = _s6AUB::P64;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUI_info" {
     sat_s6AUI_info:
         const sat_s6AUI_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 sat_s6AUL_entry() //  [R1]
         { []
         }
     {offset
       c6CBl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CBp; else goto c6CBo;
       c6CBp: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CBo: // global
           _s6AUC::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUL_info" {
     sat_s6AUL_info:
         const sat_s6AUL_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AUN_entry() //  [R1]
         { []
         }
     {offset
       c6CBx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CBB; else goto c6CBA;
       c6CBB: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CBA: // global
           _s6AUC::P64 = P64[R1 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUN_info" {
     sat_s6AUN_info:
         const sat_s6AUN_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AUO_entry() //  [R1]
         { []
         }
     {offset
       c6CBG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6CBH; else goto c6CBI;
       c6CBH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CBI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6CBb_info;
           _s6AUC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6AUC::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6CBP; else goto c6CBc;
       u6CBP: // global
           call _c6CBb(R1) args: 0, res: 0, upd: 0;
       c6CBc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AUO_info" {
     sat_s6AUO_info:
         const sat_s6AUO_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 _c6CBb() //  [R1]
         { []
         }
     {offset
       c6CBb: // global
           _s6AUC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6CBD; else goto c6CBE;
       c6CBD: // global
           Hp = Hp + 24;
           _s6AUJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CBO; else goto c6CBK;
       c6CBK: // global
           I64[Hp - 16] = sat_s6AUL_info;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6CBE: // global
           Hp = Hp + 24;
           _s6AUJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CBO; else goto c6CBN;
       c6CBO: // global
           HpAlloc = 24;
           R1 = _s6AUJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6CBN: // global
           I64[Hp - 16] = sat_s6AUN_info;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6CBb_info" {
     block_c6CBb_info:
         const _c6CBb;
         const 1;
         const 30064771102;
         const S6Bb6_srt+360;
 },
 sat_s6AUP_entry() //  [R1]
         { []
         }
     {offset
       c6CBQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CBU; else goto c6CBT;
       c6CBU: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CBT: // global
           _s6AUB::P64 = P64[R1 + 16];
           _s6AUC::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6AUO_info;
           P64[Hp - 8] = _s6AUB::P64;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUP_info" {
     sat_s6AUP_info:
         const sat_s6AUP_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 sat_s6AUQ_entry() //  [R1]
         { []
         }
     {offset
       c6CBV: // global
           _s6AUQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CBW; else goto c6CBX;
       c6CBX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CBZ; else goto c6CBY;
       c6CBZ: // global
           HpAlloc = 32;
           goto c6CBW;
       c6CBW: // global
           R1 = _s6AUQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CBY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AUQ::P64;
           _s6AUB::P64 = P64[_s6AUQ::P64 + 16];
           _s6AUC::P64 = P64[_s6AUQ::P64 + 24];
           I64[Hp - 24] = sat_s6AUP_info;
           P64[Hp - 8] = _s6AUB::P64;
           P64[Hp] = _s6AUC::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AUQ_info" {
     sat_s6AUQ_info:
         const sat_s6AUQ_entry;
         const 2;
         const 72057624102699026;
         const S6Bb6_srt+360;
 },
 Data.Semigroup.Internal.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6CC3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6CC7; else goto c6CC6;
       c6CC7: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CC6: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c6CC1; else goto c6CC2;
       c6CC1: // global
           I64[Hp - 48] = sat_s6AUI_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c6CAc::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c6CAc::P64;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c6CC2: // global
           I64[Hp - 48] = sat_s6AUQ_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec_info" {
     Data.Semigroup.Internal.$w$cshowsPrec_info:
         const Data.Semigroup.Internal.$w$cshowsPrec_entry;
         const 0;
         const 216172812178554894;
         const 12884901907;
         const S6Bb6_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.38197176 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6CDm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6CDn; else goto c6CDo;
       c6CDn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CDo: // global
           I64[Sp - 24] = block_c6CDj_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6CDs; else goto c6CDk;
       u6CDs: // global
           call _c6CDj(R1) args: 0, res: 0, upd: 0;
       c6CDk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowAll_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Bb6_srt+560;
 },
 _c6CDj() //  [R1]
         { []
         }
     {offset
       c6CDj: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CDj_info" {
     block_c6CDj_info:
         const _c6CDj;
         const 2;
         const 4294967326;
         const S6Bb6_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.38916153 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_$cshow_closure" {
     Data.Semigroup.Internal.$fShowAll_$cshow_closure:
         const Data.Semigroup.Internal.$fShowAll_$cshow_info;
         const 0;
 },
 sat_s6AUY_entry() //  [R1]
         { []
         }
     {offset
       c6CDW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6CDX; else goto c6CDY;
       c6CDX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CDY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6CDP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6CE5; else goto c6CDQ;
       u6CE5: // global
           call _c6CDP(R1) args: 0, res: 0, upd: 0;
       c6CDQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AUY_info" {
     sat_s6AUY_info:
         const sat_s6AUY_entry;
         const 1;
         const 12884901904;
         const S6Bb6_srt+408;
 },
 _c6CDP() //  [R1]
         { []
         }
     {offset
       c6CDP: // global
           if (R1 & 7 == 1) goto c6CDT; else goto c6CDU;
       c6CDT: // global
           R1 = Data.Semigroup.Internal.$fShowAll6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6CDU: // global
           R1 = Data.Semigroup.Internal.$fShowAll5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6CDP_info" {
     block_c6CDP_info:
         const _c6CDP;
         const 0;
         const 12884901918;
         const S6Bb6_srt+408;
 },
 sat_s6AUZ_entry() //  [R1]
         { []
         }
     {offset
       c6CE6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CEa; else goto c6CE9;
       c6CEa: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CE9: // global
           _s6AUW::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s6AUY_info;
           P64[Hp] = _s6AUW::P64;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AUZ_info" {
     sat_s6AUZ_info:
         const sat_s6AUZ_entry;
         const 1;
         const 12884901904;
         const S6Bb6_srt+408;
 },
 Data.Semigroup.Internal.$fShowAll_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c6CEb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CEf; else goto c6CEe;
       c6CEf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAll_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CEe: // global
           I64[Hp - 16] = sat_s6AUZ_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll_$cshow_info" {
     Data.Semigroup.Internal.$fShowAll_$cshow_info:
         const Data.Semigroup.Internal.$fShowAll_$cshow_entry;
         const 0;
         const 10133112046485518;
         const 4294967301;
         const S6Bb6_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.400676941 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll1_closure" {
     Data.Semigroup.Internal.$fShowAll1_closure:
         const Data.Semigroup.Internal.$fShowAll1_info;
         const 0;
 },
 sat_s6AV3_entry() //  [R1]
         { []
         }
     {offset
       c6CEY: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AV3_info" {
     sat_s6AV3_info:
         const sat_s6AV3_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AV4_entry() //  [R1]
         { []
         }
     {offset
       c6CF7: // global
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AV4_info" {
     sat_s6AV4_info:
         const sat_s6AV4_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+360;
 },
 sat_s6AV5_entry() //  [R1]
         { []
         }
     {offset
       c6CFe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6CFf; else goto c6CFg;
       c6CFf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CFg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6CEP_info;
           _s6AV1::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s6AV1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6CFn; else goto c6CEQ;
       u6CFn: // global
           call _c6CEP(R1) args: 0, res: 0, upd: 0;
       c6CEQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AV5_info" {
     sat_s6AV5_info:
         const sat_s6AV5_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 _c6CEP() //  [R1]
         { []
         }
     {offset
       c6CEP: // global
           _s6AV1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6CFb; else goto c6CFc;
       c6CFb: // global
           Hp = Hp + 24;
           _s6AV2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CFm; else goto c6CFi;
       c6CFi: // global
           I64[Hp - 16] = sat_s6AV3_info;
           P64[Hp] = _s6AV1::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c6CFc: // global
           Hp = Hp + 24;
           _s6AV2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6CFm; else goto c6CFl;
       c6CFm: // global
           HpAlloc = 24;
           R1 = _s6AV2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6CFl: // global
           I64[Hp - 16] = sat_s6AV4_info;
           P64[Hp] = _s6AV1::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6CEP_info" {
     block_c6CEP_info:
         const _c6CEP;
         const 1;
         const 30064771102;
         const S6Bb6_srt+360;
 },
 sat_s6AV6_entry() //  [R1]
         { []
         }
     {offset
       c6CFo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CFs; else goto c6CFr;
       c6CFs: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CFr: // global
           _s6AV0::P64 = P64[R1 + 16];
           _s6AV1::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s6AV5_info;
           P64[Hp - 8] = _s6AV0::P64;
           P64[Hp] = _s6AV1::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AV6_info" {
     sat_s6AV6_info:
         const sat_s6AV6_entry;
         const 2;
         const 30064771090;
         const S6Bb6_srt+360;
 },
 Data.Semigroup.Internal.$fShowAll1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CFt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CFx; else goto c6CFw;
       c6CFx: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowAll1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CFw: // global
           I64[Hp - 24] = sat_s6AV6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowAll3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll1_info" {
     Data.Semigroup.Internal.$fShowAll1_info:
         const Data.Semigroup.Internal.$fShowAll1_entry;
         const 0;
         const 1224979128709545998;
         const 8589934607;
         const S6Bb6_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.415618102 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowAll_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowAll_$cshowList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fShowAll_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CG5: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fShowAll1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowAll_$cshowList_info" {
     Data.Semigroup.Internal.$fShowAll_$cshowList_info:
         const Data.Semigroup.Internal.$fShowAll_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Bb6_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.41916995 UTC

[section ""data" . Data.Semigroup.Internal.$fShowAll_closure" {
     Data.Semigroup.Internal.$fShowAll_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure+3;
         const Data.Semigroup.Internal.$fShowAll_$cshow_closure+1;
         const Data.Semigroup.Internal.$fShowAll_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.421279734 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll13_bytes" {
     Data.Semigroup.Internal.$fReadAll13_bytes:
         I8[] [65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.424157916 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll12_closure" {
     Data.Semigroup.Internal.$fReadAll12_closure:
         const Data.Semigroup.Internal.$fReadAll12_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll12_entry() //  [R1]
         { []
         }
     {offset
       c6CGk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CGl; else goto c6CGm;
       c6CGl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CGm: // global
           (_c6CGh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CGh::I64 == 0) goto c6CGj; else goto c6CGi;
       c6CGj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CGi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CGh::I64;
           R2 = Data.Semigroup.Internal.$fReadAll13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll12_info" {
     Data.Semigroup.Internal.$fReadAll12_info:
         const Data.Semigroup.Internal.$fReadAll12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.428730634 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_lexeme1_closure" {
     Data.Semigroup.Internal.$fReadAll_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadAll12_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.430519768 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadAll9_bytes" {
     Data.Semigroup.Internal.$fReadAll9_bytes:
         I8[] [103,101,116,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.432843942 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll8_closure" {
     Data.Semigroup.Internal.$fReadAll8_closure:
         const Data.Semigroup.Internal.$fReadAll8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll8_entry() //  [R1]
         { []
         }
     {offset
       c6CGD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CGE; else goto c6CGF;
       c6CGE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CGF: // global
           (_c6CGA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CGA::I64 == 0) goto c6CGC; else goto c6CGB;
       c6CGC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CGB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CGA::I64;
           R2 = Data.Semigroup.Internal.$fReadAll9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll8_info" {
     Data.Semigroup.Internal.$fReadAll8_info:
         const Data.Semigroup.Internal.$fReadAll8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.440663384 UTC

[section ""data" . Data.Semigroup.Internal.$w$creadPrec_closure" {
     Data.Semigroup.Internal.$w$creadPrec_closure:
         const Data.Semigroup.Internal.$w$creadPrec_info;
         const 0;
 },
 sat_s6AVg_entry() //  [R1]
         { []
         }
     {offset
       c6CHg: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AVg_info" {
     sat_s6AVg_info:
         const sat_s6AVg_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6AVj_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CHm: // global
           _s6AVe::P64 = R2;
           _s6AVj::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6CHn; else goto c6CHo;
       c6CHo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CHq; else goto c6CHp;
       c6CHq: // global
           HpAlloc = 24;
           goto c6CHn;
       c6CHn: // global
           R2 = _s6AVe::P64;
           R1 = _s6AVj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CHp: // global
           _s6AVa::P64 = P64[_s6AVj::P64 + 7];
           I64[Hp - 16] = sat_s6AVg_info;
           P64[Hp - 8] = _s6AVa::P64;
           P64[Hp] = _s6AVe::P64;
           I64[Sp - 8] = block_c6CHj_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AVj_info" {
     sat_s6AVj_info:
         const sat_s6AVj_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Bb6_srt+456;
 },
 _c6CHj() //  [R1]
         { []
         }
     {offset
       c6CHj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CHt; else goto c6CHs;
       c6CHt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CHs: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CHj_info" {
     block_c6CHj_info:
         const _c6CHj;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6CHY_srtd" {
     u6CHY_srtd:
         const S6Bb6_srt+128;
         const 59;
         const 288245769314500609;
 },
 sat_s6AVk_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CHu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CHy; else goto c6CHx;
       c6CHy: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CHx: // global
           _s6AVa::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s6AVj_info;
           P64[Hp] = _s6AVa::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = Data.Semigroup.Internal.$fReadAll7_closure+2;
           R2 = Data.Semigroup.Internal.$fReadAll8_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AVk_info" {
     sat_s6AVk_info:
         const sat_s6AVk_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6CHY_srtd;
 },
 section ""relreadonly" . u6CHZ_srtd" {
     u6CHZ_srtd:
         const S6Bb6_srt+128;
         const 59;
         const 288245769314500613;
 },
 sat_s6AVn_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CHC: // global
           _s6AVc::P64 = R2;
           _s6AVn::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6CHD; else goto c6CHE;
       c6CHE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CHG; else goto c6CHF;
       c6CHG: // global
           HpAlloc = 16;
           goto c6CHD;
       c6CHD: // global
           R2 = _s6AVc::P64;
           R1 = _s6AVn::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CHF: // global
           _s6AVa::P64 = P64[_s6AVn::P64 + 7];
           I64[Hp - 8] = sat_s6AVk_info;
           P64[Hp] = _s6AVa::P64;
           I64[Sp - 8] = block_c6CHz_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AVn_info" {
     sat_s6AVn_info:
         const sat_s6AVn_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u6CHZ_srtd;
 },
 _c6CHz() //  [R1]
         { []
         }
     {offset
       c6CHz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CHJ; else goto c6CHI;
       c6CHJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CHI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CHz_info" {
     block_c6CHz_info:
         const _c6CHz;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6CI0_srtd" {
     u6CI0_srtd:
         const S6Bb6_srt+128;
         const 61;
         const 2017628026224771077;
 },
 Data.Semigroup.Internal.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CHN: // global
           _s6AVa::P64 = R3;
           _s6AV9::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c6CHO; else goto c6CHP;
       c6CHP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CHR; else goto c6CHQ;
       c6CHR: // global
           HpAlloc = 16;
           goto c6CHO;
       c6CHO: // global
           R3 = _s6AVa::P64;
           R2 = _s6AV9::I64;
           R1 = Data.Semigroup.Internal.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CHQ: // global
           if (%MO_S_Gt_W64(_s6AV9::I64, 11)) goto c6CHL; else goto c6CHM;
       c6CHL: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6CHM: // global
           I64[Hp - 8] = sat_s6AVn_info;
           P64[Hp] = _s6AVa::P64;
           I64[Sp - 8] = block_c6CHS_info;
           R3 = Hp - 7;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$creadPrec_info" {
     Data.Semigroup.Internal.$w$creadPrec_info:
         const Data.Semigroup.Internal.$w$creadPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const u6CI0_srtd;
 },
 _c6CHS() //  [R1]
         { []
         }
     {offset
       c6CHS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CHX; else goto c6CHW;
       c6CHX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CHW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CHS_info" {
     block_c6CHS_info:
         const _c6CHS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.460946855 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll2_closure" {
     Data.Semigroup.Internal.$fReadAll2_closure:
         const Data.Semigroup.Internal.$fReadAll2_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CIS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CIT; else goto c6CIU;
       c6CIT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAll2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CIU: // global
           I64[Sp - 16] = block_c6CIP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6CIY; else goto c6CIQ;
       u6CIY: // global
           call _c6CIP(R1) args: 0, res: 0, upd: 0;
       c6CIQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll2_info" {
     Data.Semigroup.Internal.$fReadAll2_info:
         const Data.Semigroup.Internal.$fReadAll2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Bb6_srt+600;
 },
 _c6CIP() //  [R1]
         { []
         }
     {offset
       c6CIP: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$creadPrec_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CIP_info" {
     block_c6CIP_info:
         const _c6CIP;
         const 1;
         const 4294967326;
         const S6Bb6_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.46670124 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll1_closure" {
     Data.Semigroup.Internal.$fReadAll1_closure:
         const Data.Semigroup.Internal.$fReadAll1_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CJd: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAll2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll1_info" {
     Data.Semigroup.Internal.$fReadAll1_info:
         const Data.Semigroup.Internal.$fReadAll1_entry;
         const 0;
         const 9007203549708302;
         const 8589934607;
         const S6Bb6_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.470851952 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_info;
         const 0;
 },
 sat_s6AVv_entry() //  [R1]
         { []
         }
     {offset
       c6CJs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CJt; else goto c6CJu;
       c6CJt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CJu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVv_info" {
     sat_s6AVv_info:
         const sat_s6AVv_entry;
         const 1;
         const 9007203549708304;
         const S6Bb6_srt+448;
 },
 Data.Semigroup.Internal.$fReadAll_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6CJv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CJz; else goto c6CJy;
       c6CJz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CJy: // global
           I64[Hp - 16] = sat_s6AVv_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadAll_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S6Bb6_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.476866717 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c6CJS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CJT; else goto c6CJU;
       c6CJT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CJU: // global
           (_c6CJP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CJP::I64 == 0) goto c6CJR; else goto c6CJQ;
       c6CJR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CJQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CJP::I64;
           R2 = Data.Semigroup.Internal.$fReadAll1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadAll_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_entry;
         const 0;
         const 35188667056149;
         const S6Bb6_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.481633799 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll14_closure" {
     Data.Semigroup.Internal.$fReadAll14_closure:
         const Data.Semigroup.Internal.$fReadAll14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll14_entry() //  [R1]
         { []
         }
     {offset
       c6CK9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CKa; else goto c6CKb;
       c6CKa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CKb: // global
           (_c6CK6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CK6::I64 == 0) goto c6CK8; else goto c6CK7;
       c6CK8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CK7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CK6::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll14_info" {
     Data.Semigroup.Internal.$fReadAll14_info:
         const Data.Semigroup.Internal.$fReadAll14_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.485810342 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_$creadList_closure" {
     Data.Semigroup.Internal.$fReadAll_$creadList_closure:
         const Data.Semigroup.Internal.$fReadAll_$creadList_info;
         const 0;
 },
 Data.Semigroup.Internal.$fReadAll_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6CKp: // global
           R3 = R2;
           R2 = Data.Semigroup.Internal.$fReadAll14_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadAll_$creadList_info" {
     Data.Semigroup.Internal.$fReadAll_$creadList_info:
         const Data.Semigroup.Internal.$fReadAll_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Bb6_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.489960765 UTC

[section ""data" . Data.Semigroup.Internal.$fReadAll_closure" {
     Data.Semigroup.Internal.$fReadAll_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure+1;
         const Data.Semigroup.Internal.$fReadAll_$creadList_closure+1;
         const Data.Semigroup.Internal.$fReadAll1_closure+2;
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.491810058 UTC

[section ""data" . Data.Semigroup.Internal.$fEqAll_closure" {
     Data.Semigroup.Internal.$fEqAll_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.$fEqBool_$c==_closure+2;
         const GHC.Classes.$fEqBool_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.493720774 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdAll_closure" {
     Data.Semigroup.Internal.$fOrdAll_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Semigroup.Internal.$fEqAll_closure+1;
         const GHC.Classes.$fOrdBool_$ccompare_closure+2;
         const GHC.Classes.$fOrdBool_$c<_closure+2;
         const GHC.Classes.$fOrdBool_$c<=_closure+2;
         const GHC.Classes.$fOrdBool_$c>_closure+2;
         const GHC.Classes.$fOrdBool_$c>=_closure+2;
         const GHC.Classes.$fOrdBool_$cmax_closure+2;
         const GHC.Classes.$fOrdBool_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.495956999 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericEndo1_closure" {
     Data.Semigroup.Internal.$fGenericEndo1_closure:
         const Data.Semigroup.Internal.$fGenericEndo1_info;
 },
 Data.Semigroup.Internal.$fGenericEndo1_entry() //  [R2]
         { []
         }
     {offset
       c6CKD: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericEndo1_info" {
     Data.Semigroup.Internal.$fGenericEndo1_info:
         const Data.Semigroup.Internal.$fGenericEndo1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.499871621 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericEndo2_closure" {
     Data.Semigroup.Internal.$fGenericEndo2_closure:
         const Data.Semigroup.Internal.$fGenericEndo2_info;
 },
 Data.Semigroup.Internal.$fGenericEndo2_entry() //  [R2]
         { []
         }
     {offset
       c6CKO: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericEndo2_info" {
     Data.Semigroup.Internal.$fGenericEndo2_info:
         const Data.Semigroup.Internal.$fGenericEndo2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.503077543 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericEndo_closure" {
     Data.Semigroup.Internal.$fGenericEndo_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericEndo2_closure+1;
         const Data.Semigroup.Internal.$fGenericEndo1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.5052243 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Dual1_closure" {
     Data.Semigroup.Internal.$fGeneric1Dual1_closure:
         const Data.Semigroup.Internal.$fGeneric1Dual1_info;
 },
 Data.Semigroup.Internal.$fGeneric1Dual1_entry() //  [R2]
         { []
         }
     {offset
       c6CL0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Dual1_info" {
     Data.Semigroup.Internal.$fGeneric1Dual1_info:
         const Data.Semigroup.Internal.$fGeneric1Dual1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.508771306 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Dual2_closure" {
     Data.Semigroup.Internal.$fGeneric1Dual2_closure:
         const Data.Semigroup.Internal.$fGeneric1Dual2_info;
 },
 Data.Semigroup.Internal.$fGeneric1Dual2_entry() //  [R2]
         { []
         }
     {offset
       c6CLb: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGeneric1Dual2_info" {
     Data.Semigroup.Internal.$fGeneric1Dual2_info:
         const Data.Semigroup.Internal.$fGeneric1Dual2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.512422461 UTC

[section ""data" . Data.Semigroup.Internal.$fGeneric1Dual_closure" {
     Data.Semigroup.Internal.$fGeneric1Dual_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.Internal.$fGeneric1Dual2_closure+1;
         const Data.Semigroup.Internal.$fGeneric1Dual1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.514857721 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericDual1_closure" {
     Data.Semigroup.Internal.$fGenericDual1_closure:
         const Data.Semigroup.Internal.$fGenericDual1_info;
 },
 Data.Semigroup.Internal.$fGenericDual1_entry() //  [R2]
         { []
         }
     {offset
       c6CLn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericDual1_info" {
     Data.Semigroup.Internal.$fGenericDual1_info:
         const Data.Semigroup.Internal.$fGenericDual1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.519737087 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericDual2_closure" {
     Data.Semigroup.Internal.$fGenericDual2_closure:
         const Data.Semigroup.Internal.$fGenericDual2_info;
 },
 Data.Semigroup.Internal.$fGenericDual2_entry() //  [R2]
         { []
         }
     {offset
       c6CLy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fGenericDual2_info" {
     Data.Semigroup.Internal.$fGenericDual2_info:
         const Data.Semigroup.Internal.$fGenericDual2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.523229906 UTC

[section ""data" . Data.Semigroup.Internal.$fGenericDual_closure" {
     Data.Semigroup.Internal.$fGenericDual_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.Internal.$fGenericDual2_closure+1;
         const Data.Semigroup.Internal.$fGenericDual1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.526482703 UTC

[section ""data" . Data.Semigroup.Internal.$fBoundedDual_closure" {
     Data.Semigroup.Internal.$fBoundedDual_closure:
         const Data.Semigroup.Internal.$fBoundedDual_info;
 },
 sat_s6AVE_entry() //  [R1]
         { []
         }
     {offset
       c6CLO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CLP; else goto c6CLQ;
       c6CLP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CLQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVE_info" {
     sat_s6AVE_info:
         const sat_s6AVE_entry;
         const 1;
         const 16;
 },
 sat_s6AVD_entry() //  [R1]
         { []
         }
     {offset
       c6CLV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CLW; else goto c6CLX;
       c6CLW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CLX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVD_info" {
     sat_s6AVD_info:
         const sat_s6AVD_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fBoundedDual_entry() //  [R2]
         { []
         }
     {offset
       c6CLZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6CM3; else goto c6CM2;
       c6CM3: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fBoundedDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CM2: // global
           I64[Hp - 64] = sat_s6AVE_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6AVD_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fBoundedDual_info" {
     Data.Semigroup.Internal.$fBoundedDual_info:
         const Data.Semigroup.Internal.$fBoundedDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.533657306 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowDual2_bytes" {
     Data.Semigroup.Internal.$fShowDual2_bytes:
         I8[] [68,117,97,108,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.535432444 UTC

[section ""cstring" . Data.Semigroup.Internal.$fShowDual1_bytes" {
     Data.Semigroup.Internal.$fShowDual1_bytes:
         I8[] [103,101,116,68,117,97,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.543210898 UTC

[section ""data" . Data.Semigroup.Internal.$w$cshowsPrec3_closure" {
     Data.Semigroup.Internal.$w$cshowsPrec3_closure:
         const Data.Semigroup.Internal.$w$cshowsPrec3_info;
 },
 f_s6AVI_entry() //  [R1]
         { []
         }
     {offset
       c6CMy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6CMz; else goto c6CMA;
       c6CMz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CMA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6AVI_info" {
     f_s6AVI_info:
         const f_s6AVI_entry;
         const 2;
         const 18;
 },
 sat_s6AVL_entry() //  [R1]
         { []
         }
     {offset
       c6CMV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CMW; else goto c6CMX;
       c6CMW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CMX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVL_info" {
     sat_s6AVL_info:
         const sat_s6AVL_entry;
         const 1;
         const 16;
 },
 sat_s6AVM_entry() //  [R1]
         { []
         }
     {offset
       c6CMY: // global
           _s6AVM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CMZ; else goto c6CN0;
       c6CN0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CN2; else goto c6CN1;
       c6CN2: // global
           HpAlloc = 24;
           goto c6CMZ;
       c6CMZ: // global
           R1 = _s6AVM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CN1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AVM::P64;
           _s6AVI::P64 = P64[_s6AVM::P64 + 16];
           _s6AVK::P64 = P64[_s6AVM::P64 + 24];
           I64[Hp - 16] = sat_s6AVL_info;
           P64[Hp] = _s6AVK::P64;
           R2 = Hp - 16;
           R1 = _s6AVI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVM_info" {
     sat_s6AVM_info:
         const sat_s6AVM_entry;
         const 2;
         const 18;
 },
 sat_s6AVN_entry() //  [R1]
         { []
         }
     {offset
       c6CN3: // global
           _s6AVN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CN4; else goto c6CN5;
       c6CN5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CN7; else goto c6CN6;
       c6CN7: // global
           HpAlloc = 32;
           goto c6CN4;
       c6CN4: // global
           R1 = _s6AVN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CN6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AVN::P64;
           _s6AVI::P64 = P64[_s6AVN::P64 + 16];
           _s6AVK::P64 = P64[_s6AVN::P64 + 24];
           I64[Hp - 24] = sat_s6AVM_info;
           P64[Hp - 8] = _s6AVI::P64;
           P64[Hp] = _s6AVK::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVN_info" {
     sat_s6AVN_info:
         const sat_s6AVN_entry;
         const 2;
         const 18;
 },
 sat_s6AVO_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CN8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CNc; else goto c6CNb;
       c6CNc: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CNb: // global
           _s6AVI::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6AVN_info;
           P64[Hp - 8] = _s6AVI::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AVO_info" {
     sat_s6AVO_info:
         const sat_s6AVO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6AVR_entry() //  [R1]
         { []
         }
     {offset
       c6CNA: // global
           _s6AVR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CNB; else goto c6CNC;
       c6CNC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CNE; else goto c6CND;
       c6CNE: // global
           HpAlloc = 24;
           goto c6CNB;
       c6CNB: // global
           R1 = _s6AVR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CND: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AVR::P64;
           _s6AVP::P64 = P64[_s6AVR::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6AVP::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.Internal.$fReadAll5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVR_info" {
     sat_s6AVR_info:
         const sat_s6AVR_entry;
         const 1;
         const 16;
 },
 sat_s6AVS_entry() //  [R1]
         { []
         }
     {offset
       c6CNF: // global
           _s6AVS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CNG; else goto c6CNH;
       c6CNH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CNJ; else goto c6CNI;
       c6CNJ: // global
           HpAlloc = 24;
           goto c6CNG;
       c6CNG: // global
           R1 = _s6AVS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CNI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AVS::P64;
           _s6AVI::P64 = P64[_s6AVS::P64 + 16];
           _s6AVP::P64 = P64[_s6AVS::P64 + 24];
           I64[Hp - 16] = sat_s6AVR_info;
           P64[Hp] = _s6AVP::P64;
           R2 = Hp - 16;
           R1 = _s6AVI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVS_info" {
     sat_s6AVS_info:
         const sat_s6AVS_entry;
         const 2;
         const 18;
 },
 sat_s6AVT_entry() //  [R1]
         { []
         }
     {offset
       c6CNK: // global
           _s6AVT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CNL; else goto c6CNM;
       c6CNM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CNO; else goto c6CNN;
       c6CNO: // global
           HpAlloc = 32;
           goto c6CNL;
       c6CNL: // global
           R1 = _s6AVT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CNN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AVT::P64;
           _s6AVI::P64 = P64[_s6AVT::P64 + 16];
           _s6AVP::P64 = P64[_s6AVT::P64 + 24];
           I64[Hp - 24] = sat_s6AVS_info;
           P64[Hp - 8] = _s6AVI::P64;
           P64[Hp] = _s6AVP::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVT_info" {
     sat_s6AVT_info:
         const sat_s6AVT_entry;
         const 2;
         const 18;
 },
 sat_s6AVU_entry() //  [R1]
         { []
         }
     {offset
       c6CNP: // global
           _s6AVU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CNQ; else goto c6CNR;
       c6CNR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CNT; else goto c6CNS;
       c6CNT: // global
           HpAlloc = 32;
           goto c6CNQ;
       c6CNQ: // global
           R1 = _s6AVU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CNS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AVU::P64;
           _s6AVI::P64 = P64[_s6AVU::P64 + 16];
           _s6AVP::P64 = P64[_s6AVU::P64 + 24];
           I64[Hp - 24] = sat_s6AVT_info;
           P64[Hp - 8] = _s6AVI::P64;
           P64[Hp] = _s6AVP::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AVU_info" {
     sat_s6AVU_info:
         const sat_s6AVU_entry;
         const 2;
         const 18;
 },
 sat_s6AVV_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CNV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6CNZ; else goto c6CNY;
       c6CNZ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CNY: // global
           _s6AVI::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6AVU_info;
           P64[Hp - 32] = _s6AVI::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AVV_info" {
     sat_s6AVV_info:
         const sat_s6AVV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$w$cshowsPrec3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6CO3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6CO7; else goto c6CO6;
       c6CO7: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CO6: // global
           I64[Hp - 40] = f_s6AVI_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6CMu::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6CO1; else goto c6CO2;
       c6CO1: // global
           I64[Hp - 8] = sat_s6AVO_info;
           P64[Hp] = _c6CMu::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6CO2: // global
           I64[Hp - 8] = sat_s6AVV_info;
           P64[Hp] = _c6CMu::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$cshowsPrec3_info" {
     Data.Semigroup.Internal.$w$cshowsPrec3_info:
         const Data.Semigroup.Internal.$w$cshowsPrec3_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.568633952 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_$cshowsPrec_closure" {
     Data.Semigroup.Internal.$fShowDual_$cshowsPrec_closure:
         const Data.Semigroup.Internal.$fShowDual_$cshowsPrec_info;
 },
 Data.Semigroup.Internal.$fShowDual_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       c6CPo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6CPp; else goto c6CPq;
       c6CPp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CPq: // global
           I64[Sp - 24] = block_c6CPl_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6CPu; else goto c6CPm;
       u6CPu: // global
           call _c6CPl(R1) args: 0, res: 0, upd: 0;
       c6CPm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_$cshowsPrec_info" {
     Data.Semigroup.Internal.$fShowDual_$cshowsPrec_info:
         const Data.Semigroup.Internal.$fShowDual_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6CPl() //  [R1]
         { []
         }
     {offset
       c6CPl: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.Internal.$w$cshowsPrec3_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CPl_info" {
     block_c6CPl_info:
         const _c6CPl;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.575574414 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_$cshow_closure" {
     Data.Semigroup.Internal.$fShowDual_$cshow_closure:
         const Data.Semigroup.Internal.$fShowDual_$cshow_info;
         const 0;
 },
 sat_s6AW3_entry() //  [R1]
         { []
         }
     {offset
       c6CPR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6CPS; else goto c6CPT;
       c6CPS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CPT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fShowAlt1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.Internal.$fReadAll4_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AW3_info" {
     sat_s6AW3_info:
         const sat_s6AW3_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+656;
 },
 sat_s6AW4_entry() //  [R1]
         { []
         }
     {offset
       c6CPU: // global
           _s6AW4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6CPV; else goto c6CPW;
       c6CPW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CPY; else goto c6CPX;
       c6CPY: // global
           HpAlloc = 32;
           goto c6CPV;
       c6CPV: // global
           R1 = _s6AW4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CPX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AW4::P64;
           _s6AW1::P64 = P64[_s6AW4::P64 + 16];
           _s6AW2::P64 = P64[_s6AW4::P64 + 24];
           I64[Hp - 24] = sat_s6AW3_info;
           P64[Hp - 8] = _s6AW1::P64;
           P64[Hp] = _s6AW2::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AW4_info" {
     sat_s6AW4_info:
         const sat_s6AW4_entry;
         const 2;
         const 4294967314;
         const S6Bb6_srt+656;
 },
 Data.Semigroup.Internal.$fShowDual_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6CPZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CQ3; else goto c6CQ2;
       c6CQ3: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CQ2: // global
           I64[Hp - 24] = sat_s6AW4_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.Internal.$fShowDual2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_$cshow_info" {
     Data.Semigroup.Internal.$fShowDual_$cshow_info:
         const Data.Semigroup.Internal.$fShowDual_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Bb6_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.58461314 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_$cshowList_closure" {
     Data.Semigroup.Internal.$fShowDual_$cshowList_closure:
         const Data.Semigroup.Internal.$fShowDual_$cshowList_info;
 },
 sat_s6AW9_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CQx: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$w$cshowsPrec3_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AW9_info" {
     sat_s6AW9_info:
         const sat_s6AW9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fShowDual_$cshowList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c6CQA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CQE; else goto c6CQD;
       c6CQE: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CQD: // global
           I64[Hp - 8] = sat_s6AW9_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_$cshowList_info" {
     Data.Semigroup.Internal.$fShowDual_$cshowList_info:
         const Data.Semigroup.Internal.$fShowDual_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.591242481 UTC

[section ""data" . Data.Semigroup.Internal.$fShowDual_closure" {
     Data.Semigroup.Internal.$fShowDual_closure:
         const Data.Semigroup.Internal.$fShowDual_info;
         const 0;
 },
 sat_s6AWd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6CQW: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowDual_$cshowList_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWd_info" {
     sat_s6AWd_info:
         const sat_s6AWd_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6AWc_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CR4: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fShowDual_$cshow_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWc_info" {
     sat_s6AWc_info:
         const sat_s6AWc_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Bb6_srt+664;
 },
 sat_s6AWb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6CRc: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.Internal.$fShowDual_$cshowsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWb_info" {
     sat_s6AWb_info:
         const sat_s6AWb_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.Internal.$fShowDual_entry() //  [R2]
         { []
         }
     {offset
       c6CRg: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6CRk; else goto c6CRj;
       c6CRk: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fShowDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CRj: // global
           I64[Hp - 72] = sat_s6AWd_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AWc_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6AWb_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fShowDual_info" {
     Data.Semigroup.Internal.$fShowDual_info:
         const Data.Semigroup.Internal.$fShowDual_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.600085133 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadDual5_bytes" {
     Data.Semigroup.Internal.$fReadDual5_bytes:
         I8[] [68,117,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.603549358 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual4_closure" {
     Data.Semigroup.Internal.$fReadDual4_closure:
         const Data.Semigroup.Internal.$fReadDual4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadDual4_entry() //  [R1]
         { []
         }
     {offset
       c6CRN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CRO; else goto c6CRP;
       c6CRO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CRP: // global
           (_c6CRK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CRK::I64 == 0) goto c6CRM; else goto c6CRL;
       c6CRM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CRL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CRK::I64;
           R2 = Data.Semigroup.Internal.$fReadDual5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual4_info" {
     Data.Semigroup.Internal.$fReadDual4_info:
         const Data.Semigroup.Internal.$fReadDual4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.60770377 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_lexeme_closure" {
     Data.Semigroup.Internal.$fReadDual_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.Internal.$fReadDual4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.609563706 UTC

[section ""cstring" . Data.Semigroup.Internal.$fReadDual3_bytes" {
     Data.Semigroup.Internal.$fReadDual3_bytes:
         I8[] [103,101,116,68,117,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.611951997 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual2_closure" {
     Data.Semigroup.Internal.$fReadDual2_closure:
         const Data.Semigroup.Internal.$fReadDual2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.$fReadDual2_entry() //  [R1]
         { []
         }
     {offset
       c6CS6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CS7; else goto c6CS8;
       c6CS7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CS8: // global
           (_c6CS3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6CS3::I64 == 0) goto c6CS5; else goto c6CS4;
       c6CS5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6CS4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6CS3::I64;
           R2 = Data.Semigroup.Internal.$fReadDual3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual2_info" {
     Data.Semigroup.Internal.$fReadDual2_info:
         const Data.Semigroup.Internal.$fReadDual2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.621606949 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual1_closure" {
     Data.Semigroup.Internal.$fReadDual1_closure:
         const Data.Semigroup.Internal.$fReadDual1_info;
         const 0;
 },
 lvl12_s6AWf_entry() //  [R1]
         { []
         }
     {offset
       c6CSp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6CSq; else goto c6CSr;
       c6CSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CSr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6AWf_info" {
     lvl12_s6AWf_info:
         const lvl12_s6AWf_entry;
         const 1;
         const 16;
 },
 ds_s6AWg_entry() //  [R1]
         { []
         }
     {offset
       c6CSx: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6AWg_info" {
     ds_s6AWg_info:
         const ds_s6AWg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6AWr_entry() //  [R1]
         { []
         }
     {offset
       c6CT8: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWr_info" {
     sat_s6AWr_info:
         const sat_s6AWr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6AWu_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CTe: // global
           _s6AWp::P64 = R2;
           _s6AWu::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6CTf; else goto c6CTg;
       c6CTg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CTi; else goto c6CTh;
       c6CTi: // global
           HpAlloc = 24;
           goto c6CTf;
       c6CTf: // global
           R2 = _s6AWp::P64;
           R1 = _s6AWu::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CTh: // global
           _s6AWj::P64 = P64[_s6AWu::P64 + 7];
           I64[Hp - 16] = sat_s6AWr_info;
           P64[Hp - 8] = _s6AWj::P64;
           P64[Hp] = _s6AWp::P64;
           I64[Sp - 8] = block_c6CTb_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWu_info" {
     sat_s6AWu_info:
         const sat_s6AWu_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Bb6_srt+456;
 },
 _c6CTb() //  [R1]
         { []
         }
     {offset
       c6CTb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CTl; else goto c6CTk;
       c6CTl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CTk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CTb_info" {
     block_c6CTb_info:
         const _c6CTb;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6CTX_srtd" {
     u6CTX_srtd:
         const S6Bb6_srt+128;
         const 70;
         const 6597069766657;
         const 32;
 },
 sat_s6AWv_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CTm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CTq; else goto c6CTp;
       c6CTq: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CTp: // global
           _s6AWg::P64 = P64[R1 + 7];
           _s6AWj::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6AWu_info;
           P64[Hp] = _s6AWj::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.Internal.$fReadAll6_closure+1;
           R3 = _s6AWg::P64;
           R2 = Data.Semigroup.Internal.$fReadDual2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWv_info" {
     sat_s6AWv_info:
         const sat_s6AWv_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u6CTX_srtd;
 },
 section ""relreadonly" . u6CTY_srtd" {
     u6CTY_srtd:
         const S6Bb6_srt+128;
         const 70;
         const 6597069766661;
         const 32;
 },
 sat_s6AWy_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CTu: // global
           _s6AWn::P64 = R2;
           _s6AWy::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6CTv; else goto c6CTw;
       c6CTw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CTy; else goto c6CTx;
       c6CTy: // global
           HpAlloc = 24;
           goto c6CTv;
       c6CTv: // global
           R2 = _s6AWn::P64;
           R1 = _s6AWy::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CTx: // global
           _s6AWg::P64 = P64[_s6AWy::P64 + 7];
           _s6AWj::P64 = P64[_s6AWy::P64 + 15];
           I64[Hp - 16] = sat_s6AWv_info;
           P64[Hp - 8] = _s6AWg::P64;
           P64[Hp] = _s6AWj::P64;
           I64[Sp - 8] = block_c6CTr_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadAll_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWy_info" {
     sat_s6AWy_info:
         const sat_s6AWy_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u6CTY_srtd;
 },
 _c6CTr() //  [R1]
         { []
         }
     {offset
       c6CTr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CTB; else goto c6CTA;
       c6CTB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CTA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CTr_info" {
     block_c6CTr_info:
         const _c6CTr;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6CTZ_srtd" {
     u6CTZ_srtd:
         const S6Bb6_srt+128;
         const 71;
         const 6597069766661;
         const 96;
 },
 sat_s6AWB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6CTC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6CTD; else goto c6CTE;
       c6CTD: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6CTE: // global
           I64[Sp - 24] = block_c6CSF_info;
           _s6AWg::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6AWg::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6CTR; else goto c6CSG;
       u6CTR: // global
           call _c6CSF(R1) args: 0, res: 0, upd: 0;
       c6CSG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWB_info" {
     sat_s6AWB_info:
         const sat_s6AWB_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const u6CTZ_srtd;
 },
 section ""relreadonly" . u6CU0_srtd" {
     u6CU0_srtd:
         const S6Bb6_srt+128;
         const 71;
         const 6597069766661;
         const 96;
 },
 _c6CSF() //  [R1]
         { []
         }
     {offset
       c6CSF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CTH; else goto c6CTG;
       c6CTH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CTG: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6CTJ; else goto c6CTN;
       c6CTJ: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6CTN: // global
           I64[Hp - 16] = sat_s6AWy_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6CTK_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.Internal.$fReadDual_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CSF_info" {
     block_c6CSF_info:
         const _c6CSF;
         const 2;
         const 18446744069414584350;
         const u6CU0_srtd;
 },
 _c6CTK() //  [R1]
         { []
         }
     {offset
       c6CTK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6CTQ; else goto c6CTP;
       c6CTQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6CTP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6CTK_info" {
     block_c6CTK_info:
         const _c6CTK;
         const 0;
         const 30;
 },
 section ""relreadonly" . u6CU1_srtd" {
     u6CU1_srtd:
         const S6Bb6_srt+128;
         const 72;
         const 7696581394437;
         const 224;
 },
 Data.Semigroup.Internal.$fReadDual1_entry() //  [R2]
         { []
         }
     {offset
       c6CTS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6CTW; else goto c6CTV;
       c6CTW: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CTV: // global
           I64[Hp - 48] = lvl12_s6AWf_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_s6AWg_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s6AWB_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual1_info" {
     Data.Semigroup.Internal.$fReadDual1_info:
         const Data.Semigroup.Internal.$fReadDual1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u6CU1_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.651540751 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure" {
     Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure:
         const Data.Semigroup.Internal.$fReadDual_$creadsPrec_info;
         const 0;
 },
 ds_s6AWD_entry() //  [R1]
         { []
         }
     {offset
       c6CVm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CVn; else goto c6CVo;
       c6CVn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CVo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6AWD_info" {
     ds_s6AWD_info:
         const ds_s6AWD_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+696;
 },
 sat_s6AWF_entry() //  [R1]
         { []
         }
     {offset
       c6CVy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CVz; else goto c6CVA;
       c6CVz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CVA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWF_info" {
     sat_s6AWF_info:
         const sat_s6AWF_entry;
         const 2;
         const 18;
 },
 sat_s6AWG_entry() //  [R1, R2]
         { []
         }
     {offset
       c6CVB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6CVF; else goto c6CVE;
       c6CVF: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CVE: // global
           _s6AWD::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6AWF_info;
           P64[Hp - 8] = _s6AWD::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWG_info" {
     sat_s6AWG_info:
         const sat_s6AWG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fReadDual_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c6CVG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6CVK; else goto c6CVJ;
       c6CVK: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CVJ: // global
           I64[Hp - 32] = ds_s6AWD_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6AWG_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_$creadsPrec_info" {
     Data.Semigroup.Internal.$fReadDual_$creadsPrec_info:
         const Data.Semigroup.Internal.$fReadDual_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.661986948 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure" {
     Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure:
         const Data.Semigroup.Internal.$fReadDual_$creadListPrec_info;
         const 0;
 },
 sat_s6AWI_entry() //  [R1]
         { []
         }
     {offset
       c6CWh: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWI_info" {
     sat_s6AWI_info:
         const sat_s6AWI_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+696;
 },
 Data.Semigroup.Internal.$fReadDual_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6CWk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CWo; else goto c6CWn;
       c6CWo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CWn: // global
           I64[Hp - 16] = sat_s6AWI_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_$creadListPrec_info" {
     Data.Semigroup.Internal.$fReadDual_$creadListPrec_info:
         const Data.Semigroup.Internal.$fReadDual_$creadListPrec_entry;
         const 0;
         const 45036000568672270;
         const 4294967301;
         const S6Bb6_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.668252657 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_$creadList_closure" {
     Data.Semigroup.Internal.$fReadDual_$creadList_closure:
         const Data.Semigroup.Internal.$fReadDual_$creadList_info;
         const 0;
 },
 sat_s6AWK_entry() //  [R1]
         { []
         }
     {offset
       c6CWJ: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AWK_info" {
     sat_s6AWK_info:
         const sat_s6AWK_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+696;
 },
 sat_s6AWL_entry() //  [R1]
         { []
         }
     {offset
       c6CWM: // global
           _s6AWL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6CWN; else goto c6CWO;
       c6CWO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CWQ; else goto c6CWP;
       c6CWQ: // global
           HpAlloc = 24;
           goto c6CWN;
       c6CWN: // global
           R1 = _s6AWL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CWP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6AWL::P64;
           _s6AWJ::P64 = P64[_s6AWL::P64 + 16];
           I64[Hp - 16] = sat_s6AWK_info;
           P64[Hp] = _s6AWJ::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWL_info" {
     sat_s6AWL_info:
         const sat_s6AWL_entry;
         const 1;
         const 9007203549708304;
         const S6Bb6_srt+528;
 },
 Data.Semigroup.Internal.$fReadDual_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6CWR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CWV; else goto c6CWU;
       c6CWV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CWU: // global
           I64[Hp - 16] = sat_s6AWL_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_$creadList_info" {
     Data.Semigroup.Internal.$fReadDual_$creadList_info:
         const Data.Semigroup.Internal.$fReadDual_$creadList_entry;
         const 0;
         const 81064797587636238;
         const 4294967301;
         const S6Bb6_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.677679074 UTC

[section ""data" . Data.Semigroup.Internal.$fReadDual_closure" {
     Data.Semigroup.Internal.$fReadDual_closure:
         const Data.Semigroup.Internal.$fReadDual_info;
         const 0;
 },
 sat_s6AWQ_entry() //  [R1]
         { []
         }
     {offset
       c6CXn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CXo; else goto c6CXp;
       c6CXo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CXp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWQ_info" {
     sat_s6AWQ_info:
         const sat_s6AWQ_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+712;
 },
 sat_s6AWP_entry() //  [R1]
         { []
         }
     {offset
       c6CXu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CXv; else goto c6CXw;
       c6CXv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CXw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWP_info" {
     sat_s6AWP_info:
         const sat_s6AWP_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+696;
 },
 sat_s6AWO_entry() //  [R1]
         { []
         }
     {offset
       c6CXB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CXC; else goto c6CXD;
       c6CXC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CXD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWO_info" {
     sat_s6AWO_info:
         const sat_s6AWO_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+720;
 },
 sat_s6AWN_entry() //  [R1]
         { []
         }
     {offset
       c6CXI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CXJ; else goto c6CXK;
       c6CXJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CXK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fReadDual_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWN_info" {
     sat_s6AWN_info:
         const sat_s6AWN_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+704;
 },
 Data.Semigroup.Internal.$fReadDual_entry() //  [R2]
         { []
         }
     {offset
       c6CXM: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6CXQ; else goto c6CXP;
       c6CXQ: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fReadDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CXP: // global
           I64[Hp - 128] = sat_s6AWQ_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6AWP_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AWO_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AWN_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fReadDual_info" {
     Data.Semigroup.Internal.$fReadDual_info:
         const Data.Semigroup.Internal.$fReadDual_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6Bb6_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.690805338 UTC

[section ""data" . Data.Semigroup.Internal.$fEqDual_closure" {
     Data.Semigroup.Internal.$fEqDual_closure:
         const Data.Semigroup.Internal.$fEqDual_info;
 },
 sat_s6AWT_entry() //  [R1]
         { []
         }
     {offset
       c6CYx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CYy; else goto c6CYz;
       c6CYy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CYz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWT_info" {
     sat_s6AWT_info:
         const sat_s6AWT_entry;
         const 1;
         const 16;
 },
 sat_s6AWS_entry() //  [R1]
         { []
         }
     {offset
       c6CYE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CYF; else goto c6CYG;
       c6CYF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CYG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWS_info" {
     sat_s6AWS_info:
         const sat_s6AWS_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fEqDual_entry() //  [R2]
         { []
         }
     {offset
       c6CYI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6CYM; else goto c6CYL;
       c6CYM: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fEqDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CYL: // global
           I64[Hp - 64] = sat_s6AWT_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6AWS_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fEqDual_info" {
     Data.Semigroup.Internal.$fEqDual_info:
         const Data.Semigroup.Internal.$fEqDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.698796105 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdDual_$cp1Ord_closure" {
     Data.Semigroup.Internal.$fOrdDual_$cp1Ord_closure:
         const Data.Semigroup.Internal.$fOrdDual_$cp1Ord_info;
 },
 sat_s6AWV_entry() //  [R1]
         { []
         }
     {offset
       c6CZf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CZg; else goto c6CZh;
       c6CZg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CZh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWV_info" {
     sat_s6AWV_info:
         const sat_s6AWV_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdDual_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6CZi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6CZm; else goto c6CZl;
       c6CZm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdDual_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6CZl: // global
           I64[Hp - 16] = sat_s6AWV_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fEqDual_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdDual_$cp1Ord_info" {
     Data.Semigroup.Internal.$fOrdDual_$cp1Ord_info:
         const Data.Semigroup.Internal.$fOrdDual_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.707552535 UTC

[section ""data" . Data.Semigroup.Internal.$fOrdDual_closure" {
     Data.Semigroup.Internal.$fOrdDual_closure:
         const Data.Semigroup.Internal.$fOrdDual_info;
 },
 sat_s6AX4_entry() //  [R1]
         { []
         }
     {offset
       c6CZF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CZG; else goto c6CZH;
       c6CZG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CZH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AX4_info" {
     sat_s6AX4_info:
         const sat_s6AX4_entry;
         const 1;
         const 16;
 },
 sat_s6AX3_entry() //  [R1]
         { []
         }
     {offset
       c6CZM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CZN; else goto c6CZO;
       c6CZN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CZO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AX3_info" {
     sat_s6AX3_info:
         const sat_s6AX3_entry;
         const 1;
         const 16;
 },
 sat_s6AX2_entry() //  [R1]
         { []
         }
     {offset
       c6CZT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6CZU; else goto c6CZV;
       c6CZU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6CZV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AX2_info" {
     sat_s6AX2_info:
         const sat_s6AX2_entry;
         const 1;
         const 16;
 },
 sat_s6AX1_entry() //  [R1]
         { []
         }
     {offset
       c6D00: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6D01; else goto c6D02;
       c6D01: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D02: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AX1_info" {
     sat_s6AX1_info:
         const sat_s6AX1_entry;
         const 1;
         const 16;
 },
 sat_s6AX0_entry() //  [R1]
         { []
         }
     {offset
       c6D07: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6D08; else goto c6D09;
       c6D08: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D09: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AX0_info" {
     sat_s6AX0_info:
         const sat_s6AX0_entry;
         const 1;
         const 16;
 },
 sat_s6AWZ_entry() //  [R1]
         { []
         }
     {offset
       c6D0e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6D0f; else goto c6D0g;
       c6D0f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D0g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWZ_info" {
     sat_s6AWZ_info:
         const sat_s6AWZ_entry;
         const 1;
         const 16;
 },
 sat_s6AWY_entry() //  [R1]
         { []
         }
     {offset
       c6D0l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6D0m; else goto c6D0n;
       c6D0m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D0n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWY_info" {
     sat_s6AWY_info:
         const sat_s6AWY_entry;
         const 1;
         const 16;
 },
 sat_s6AWX_entry() //  [R1]
         { []
         }
     {offset
       c6D0s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6D0t; else goto c6D0u;
       c6D0t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D0u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fOrdDual_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AWX_info" {
     sat_s6AWX_info:
         const sat_s6AWX_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fOrdDual_entry() //  [R2]
         { []
         }
     {offset
       c6D0w: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c6D0A; else goto c6D0z;
       c6D0A: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fOrdDual_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6D0z: // global
           I64[Hp - 256] = sat_s6AX4_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s6AX3_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6AX2_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6AX1_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6AX0_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6AWZ_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s6AWY_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6AWX_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fOrdDual_info" {
     Data.Semigroup.Internal.$fOrdDual_info:
         const Data.Semigroup.Internal.$fOrdDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.725820267 UTC

[section ""data" . Data.Semigroup.Internal.getDual_closure" {
     Data.Semigroup.Internal.getDual_closure:
         const Data.Semigroup.Internal.getDual_info;
 },
 Data.Semigroup.Internal.getDual_entry() //  [R2]
         { []
         }
     {offset
       c6D1F: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getDual_info" {
     Data.Semigroup.Internal.getDual_info:
         const Data.Semigroup.Internal.getDual_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.730293281 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadDual_$c>>=_closure" {
     Data.Semigroup.Internal.$fMonadDual_$c>>=_closure:
         const Data.Semigroup.Internal.$fMonadDual_$c>>=_info;
 },
 Data.Semigroup.Internal.$fMonadDual_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c6D1Q: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadDual_$c>>=_info" {
     Data.Semigroup.Internal.$fMonadDual_$c>>=_info:
         const Data.Semigroup.Internal.$fMonadDual_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.733960428 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadDual_$c>>_closure" {
     Data.Semigroup.Internal.$fMonadDual_$c>>_closure:
         const Data.Semigroup.Internal.$fMonadDual_$c>>_info;
 },
 Data.Semigroup.Internal.$fMonadDual_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6D21: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.$fApplicativeDual_$c*>_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadDual_$c>>_info" {
     Data.Semigroup.Internal.$fMonadDual_$c>>_info:
         const Data.Semigroup.Internal.$fMonadDual_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.737835693 UTC

[section ""data" . lvl_r6v16_closure" {
     lvl_r6v16_closure:
         const lvl_r6v16_info;
         const 0;
 },
 lvl_r6v16_entry() //  [R2]
         { []
         }
     {offset
       c6D2c: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r6v16_info" {
     lvl_r6v16_info:
         const lvl_r6v16_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.741164611 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadDual_closure" {
     Data.Semigroup.Internal.$fMonadDual_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.Internal.$fApplicativeDual_closure+1;
         const Data.Semigroup.Internal.$fMonadDual_$c>>=_closure+2;
         const Data.Semigroup.Internal.$fMonadDual_$c>>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const lvl_r6v16_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.743400409 UTC

[section ""data" . Data.Semigroup.Internal.appEndo1_closure" {
     Data.Semigroup.Internal.appEndo1_closure:
         const Data.Semigroup.Internal.appEndo1_info;
 },
 Data.Semigroup.Internal.appEndo1_entry() //  [R2]
         { []
         }
     {offset
       c6D2o: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.appEndo1_info" {
     Data.Semigroup.Internal.appEndo1_info:
         const Data.Semigroup.Internal.appEndo1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.746979798 UTC

[section ""data" . Data.Semigroup.Internal.appEndo_closure" {
     Data.Semigroup.Internal.appEndo_closure:
         const Data.Semigroup.Internal.appEndo_info;
 },
 Data.Semigroup.Internal.appEndo_entry() //  [R2]
         { []
         }
     {offset
       c6D2z: // global
           R2 = R2;
           call Data.Semigroup.Internal.appEndo1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.appEndo_info" {
     Data.Semigroup.Internal.appEndo_info:
         const Data.Semigroup.Internal.appEndo_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.750547167 UTC

[section ""data" . Data.Semigroup.Internal.getAll1_closure" {
     Data.Semigroup.Internal.getAll1_closure:
         const Data.Semigroup.Internal.getAll1_info;
 },
 Data.Semigroup.Internal.getAll1_entry() //  [R2]
         { []
         }
     {offset
       c6D2K: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAll1_info" {
     Data.Semigroup.Internal.getAll1_info:
         const Data.Semigroup.Internal.getAll1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.754466921 UTC

[section ""data" . Data.Semigroup.Internal.getAll_closure" {
     Data.Semigroup.Internal.getAll_closure:
         const Data.Semigroup.Internal.getAll_info;
 },
 Data.Semigroup.Internal.getAll_entry() //  [R2]
         { []
         }
     {offset
       c6D2X: // global
           R2 = R2;
           call Data.Semigroup.Internal.getAll1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAll_info" {
     Data.Semigroup.Internal.getAll_info:
         const Data.Semigroup.Internal.getAll_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.758078026 UTC

[section ""data" . Data.Semigroup.Internal.getAny1_closure" {
     Data.Semigroup.Internal.getAny1_closure:
         const Data.Semigroup.Internal.getAny1_info;
 },
 Data.Semigroup.Internal.getAny1_entry() //  [R2]
         { []
         }
     {offset
       c6D38: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAny1_info" {
     Data.Semigroup.Internal.getAny1_info:
         const Data.Semigroup.Internal.getAny1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.762521107 UTC

[section ""data" . Data.Semigroup.Internal.getAny_closure" {
     Data.Semigroup.Internal.getAny_closure:
         const Data.Semigroup.Internal.getAny_info;
 },
 Data.Semigroup.Internal.getAny_entry() //  [R2]
         { []
         }
     {offset
       c6D3l: // global
           R2 = R2;
           call Data.Semigroup.Internal.getAny1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAny_info" {
     Data.Semigroup.Internal.getAny_info:
         const Data.Semigroup.Internal.getAny_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.766299173 UTC

[section ""data" . Data.Semigroup.Internal.getSum_closure" {
     Data.Semigroup.Internal.getSum_closure:
         const Data.Semigroup.Internal.getSum_info;
 },
 Data.Semigroup.Internal.getSum_entry() //  [R2]
         { []
         }
     {offset
       c6D3w: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getSum_info" {
     Data.Semigroup.Internal.getSum_info:
         const Data.Semigroup.Internal.getSum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.769850922 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadSum_$c>>=_closure" {
     Data.Semigroup.Internal.$fMonadSum_$c>>=_closure:
         const Data.Semigroup.Internal.$fMonadSum_$c>>=_info;
 },
 Data.Semigroup.Internal.$fMonadSum_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c6D3H: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadSum_$c>>=_info" {
     Data.Semigroup.Internal.$fMonadSum_$c>>=_info:
         const Data.Semigroup.Internal.$fMonadSum_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.773480977 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadSum_$c>>_closure" {
     Data.Semigroup.Internal.$fMonadSum_$c>>_closure:
         const Data.Semigroup.Internal.$fMonadSum_$c>>_info;
 },
 Data.Semigroup.Internal.$fMonadSum_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6D3S: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.$fApplicativeSum_$c*>_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadSum_$c>>_info" {
     Data.Semigroup.Internal.$fMonadSum_$c>>_info:
         const Data.Semigroup.Internal.$fMonadSum_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.777060189 UTC

[section ""data" . lvl1_r6v17_closure" {
     lvl1_r6v17_closure:
         const lvl1_r6v17_info;
         const 0;
 },
 lvl1_r6v17_entry() //  [R2]
         { []
         }
     {offset
       c6D43: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_r6v17_info" {
     lvl1_r6v17_info:
         const lvl1_r6v17_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.78046559 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadSum_closure" {
     Data.Semigroup.Internal.$fMonadSum_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.Internal.$fApplicativeSum_closure+1;
         const Data.Semigroup.Internal.$fMonadSum_$c>>=_closure+2;
         const Data.Semigroup.Internal.$fMonadSum_$c>>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const lvl1_r6v17_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.782896693 UTC

[section ""data" . Data.Semigroup.Internal.getProduct_closure" {
     Data.Semigroup.Internal.getProduct_closure:
         const Data.Semigroup.Internal.getProduct_info;
 },
 Data.Semigroup.Internal.getProduct_entry() //  [R2]
         { []
         }
     {offset
       c6D4f: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getProduct_info" {
     Data.Semigroup.Internal.getProduct_info:
         const Data.Semigroup.Internal.getProduct_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.786471557 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadProduct_$c>>=_closure" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>=_closure:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>=_info;
 },
 Data.Semigroup.Internal.$fMonadProduct_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c6D4q: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadProduct_$c>>=_info" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>=_info:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.79011727 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadProduct_$c>>_closure" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>_closure:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>_info;
 },
 Data.Semigroup.Internal.$fMonadProduct_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6D4B: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.$fApplicativeProduct_$c*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonadProduct_$c>>_info" {
     Data.Semigroup.Internal.$fMonadProduct_$c>>_info:
         const Data.Semigroup.Internal.$fMonadProduct_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.794561684 UTC

[section ""data" . lvl2_r6v18_closure" {
     lvl2_r6v18_closure:
         const lvl2_r6v18_info;
         const 0;
 },
 lvl2_r6v18_entry() //  [R2]
         { []
         }
     {offset
       c6D4M: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_r6v18_info" {
     lvl2_r6v18_info:
         const lvl2_r6v18_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.79837614 UTC

[section ""data" . Data.Semigroup.Internal.$fMonadProduct_closure" {
     Data.Semigroup.Internal.$fMonadProduct_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.Internal.$fApplicativeProduct_closure+1;
         const Data.Semigroup.Internal.$fMonadProduct_$c>>=_closure+2;
         const Data.Semigroup.Internal.$fMonadProduct_$c>>_closure+2;
         const Data.Semigroup.Internal.$fApplicativeDual4_closure+1;
         const lvl2_r6v18_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.800587225 UTC

[section ""data" . Data.Semigroup.Internal.getAlt_closure" {
     Data.Semigroup.Internal.getAlt_closure:
         const Data.Semigroup.Internal.getAlt_info;
 },
 Data.Semigroup.Internal.getAlt_entry() //  [R2]
         { []
         }
     {offset
       c6D4Y: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fGeneric1Alt2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.getAlt_info" {
     Data.Semigroup.Internal.getAlt_info:
         const Data.Semigroup.Internal.getAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.803706818 UTC

[section ""cstring" . lvl3_r6v19_bytes" {
     lvl3_r6v19_bytes:
         I8[] [115,116,105,109,101,115,73,100,101,109,112,111,116,101,110,116,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.80632718 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotent1_closure" {
     Data.Semigroup.Internal.stimesIdempotent1_closure:
         const Data.Semigroup.Internal.stimesIdempotent1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesIdempotent1_entry() //  [R1]
         { []
         }
     {offset
       c6D5e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6D5f; else goto c6D5g;
       c6D5f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D5g: // global
           (_c6D59::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6D59::I64 == 0) goto c6D5b; else goto c6D5a;
       c6D5b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6D5a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6D59::I64;
           I64[Sp - 24] = block_c6D5c_info;
           R2 = lvl3_r6v19_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotent1_info" {
     Data.Semigroup.Internal.stimesIdempotent1_info:
         const Data.Semigroup.Internal.stimesIdempotent1_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+736;
 },
 _c6D5c() //  [R1]
         { []
         }
     {offset
       c6D5c: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6D5c_info" {
     block_c6D5c_info:
         const _c6D5c;
         const 0;
         const 4294967326;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.813839295 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotent_closure" {
     Data.Semigroup.Internal.stimesIdempotent_closure:
         const Data.Semigroup.Internal.stimesIdempotent_info;
         const 0;
 },
 sat_s6AXo_entry() //  [R1]
         { []
         }
     {offset
       c6D5K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6D5L; else goto c6D5M;
       c6D5L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D5M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6D5I_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AXo_info" {
     sat_s6AXo_info:
         const sat_s6AXo_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+744;
 },
 _c6D5I() //  [R1]
         { []
         }
     {offset
       c6D5I: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6D5I_info" {
     block_c6D5I_info:
         const _c6D5I;
         const 0;
         const 4294967326;
         const S6Bb6_srt+744;
 },
 Data.Semigroup.Internal.stimesIdempotent_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6D5Q: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6D5S; else goto c6D5T;
       c6D5S: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesIdempotent_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6D5T: // global
           I64[Sp - 24] = block_c6D5A_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotent_info" {
     Data.Semigroup.Internal.stimesIdempotent_info:
         const Data.Semigroup.Internal.stimesIdempotent_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6Bb6_srt+744;
 },
 _c6D5A() //  [R1]
         { []
         }
     {offset
       c6D5A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6D5W; else goto c6D5V;
       c6D5W: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6D5V: // global
           I64[Hp - 16] = sat_s6AXo_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6D5R_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D5A_info" {
     block_c6D5A_info:
         const _c6D5A;
         const 2;
         const 21474836510;
         const S6Bb6_srt+744;
 },
 _c6D5R() //  [R1]
         { []
         }
     {offset
       c6D5R: // global
           _s6AXj::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c6D60_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s6AXj::P64;
           Sp = Sp - 8;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D5R_info" {
     block_c6D5R_info:
         const _c6D5R;
         const 3;
         const 4294967326;
         const S6Bb6_srt+760;
 },
 _c6D60() //  [R1]
         { []
         }
     {offset
       c6D60: // global
           if (R1 & 7 == 1) goto c6D67; else goto c6D6b;
       c6D67: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6D6b: // global
           R1 = Data.Semigroup.Internal.stimesIdempotent1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D60_info" {
     block_c6D60_info:
         const _c6D60;
         const 1;
         const 4294967326;
         const S6Bb6_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.826230083 UTC

[section ""cstring" . lvl4_r6v1a_bytes" {
     lvl4_r6v1a_bytes:
         I8[] [115,116,105,109,101,115,73,100,101,109,112,111,116,101,110,116,77,111,110,111,105,100,58,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.829954285 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotentMonoid1_closure" {
     Data.Semigroup.Internal.stimesIdempotentMonoid1_closure:
         const Data.Semigroup.Internal.stimesIdempotentMonoid1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesIdempotentMonoid1_entry() //  [R1]
         { []
         }
     {offset
       c6D6T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6D6U; else goto c6D6V;
       c6D6U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D6V: // global
           (_c6D6O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6D6O::I64 == 0) goto c6D6Q; else goto c6D6P;
       c6D6Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6D6P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6D6O::I64;
           I64[Sp - 24] = block_c6D6R_info;
           R2 = lvl4_r6v1a_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotentMonoid1_info" {
     Data.Semigroup.Internal.stimesIdempotentMonoid1_info:
         const Data.Semigroup.Internal.stimesIdempotentMonoid1_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+736;
 },
 _c6D6R() //  [R1]
         { []
         }
     {offset
       c6D6R: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6D6R_info" {
     block_c6D6R_info:
         const _c6D6R;
         const 0;
         const 4294967326;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.837801439 UTC

[section ""data" . Data.Semigroup.Internal.stimesIdempotentMonoid_closure" {
     Data.Semigroup.Internal.stimesIdempotentMonoid_closure:
         const Data.Semigroup.Internal.stimesIdempotentMonoid_info;
         const 0;
 },
 sat_s6AXy_entry() //  [R1]
         { []
         }
     {offset
       c6D7p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6D7q; else goto c6D7r;
       c6D7q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6D7r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6D7n_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AXy_info" {
     sat_s6AXy_info:
         const sat_s6AXy_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+744;
 },
 _c6D7n() //  [R1]
         { []
         }
     {offset
       c6D7n: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6D7n_info" {
     block_c6D7n_info:
         const _c6D7n;
         const 0;
         const 4294967326;
         const S6Bb6_srt+744;
 },
 Data.Semigroup.Internal.stimesIdempotentMonoid_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       c6D7v: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c6D7x; else goto c6D7y;
       c6D7x: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesIdempotentMonoid_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6D7y: // global
           I64[Sp - 32] = block_c6D7f_info;
           R2 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesIdempotentMonoid_info" {
     Data.Semigroup.Internal.stimesIdempotentMonoid_info:
         const Data.Semigroup.Internal.stimesIdempotentMonoid_entry;
         const 0;
         const 107374182414;
         const 17179869208;
         const S6Bb6_srt+744;
 },
 _c6D7f() //  [R1]
         { []
         }
     {offset
       c6D7f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6D7B; else goto c6D7A;
       c6D7B: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6D7A: // global
           I64[Hp - 16] = sat_s6AXy_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6D7w_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D7f_info" {
     block_c6D7f_info:
         const _c6D7f;
         const 3;
         const 73014444062;
         const S6Bb6_srt+744;
 },
 _c6D7w() //  [R1]
         { []
         }
     {offset
       c6D7w: // global
           _c6D7j::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c6D7F_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp] = _c6D7j::P64;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D7w_info" {
     block_c6D7w_info:
         const _c6D7w;
         const 4;
         const 4294967326;
         const S6Bb6_srt+776;
 },
 _c6D7F() //  [R1]
         { []
         }
     {offset
       c6D7F: // global
           _c6D7V::P64 = R1 & 7;
           if (_c6D7V::P64 < 3) goto u6D7W; else goto c6D7U;
       u6D7W: // global
           if (_c6D7V::P64 < 2) goto c6D7M; else goto c6D7Q;
       c6D7M: // global
           R1 = Data.Semigroup.Internal.stimesIdempotentMonoid1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6D7Q: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6D7U: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D7F_info" {
     block_c6D7F_info:
         const _c6D7F;
         const 131;
         const 4294967326;
         const S6Bb6_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.852257735 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAny_go_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_go_closure:
         const Data.Semigroup.Internal.$fSemigroupAny_go_info;
 },
 Data.Semigroup.Internal.$fSemigroupAny_go_entry() //  [R2, R3]
         { []
         }
     {offset
       c6D8F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6D8G; else goto u6D91;
       c6D8G: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAny_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u6D91: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c6D8v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAny_go_info" {
     Data.Semigroup.Internal.$fSemigroupAny_go_info:
         const Data.Semigroup.Internal.$fSemigroupAny_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6D8v() //  []
         { []
         }
     {offset
       c6D8v: // global
           I64[Sp - 8] = block_c6D8y_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6D93; else goto c6D8z;
       u6D93: // global
           call _c6D8y(R1) args: 0, res: 0, upd: 0;
       c6D8z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6D8y() //  [R1]
         { []
         }
     {offset
       c6D8y: // global
           _s6AXA::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6D8C; else goto c6D8D;
       c6D8C: // global
           R1 = _s6AXA::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6D8D: // global
           I64[Sp] = block_c6D8N_info;
           _s6AXD::P64 = P64[R1 + 6];
           _s6AXE::P64 = P64[R1 + 14];
           R1 = _s6AXA::P64;
           P64[Sp + 8] = _s6AXE::P64;
           P64[Sp + 16] = _s6AXD::P64;
           if (R1 & 7 != 0) goto u6D94; else goto c6D8P;
       u6D94: // global
           call _c6D8N(R1) args: 0, res: 0, upd: 0;
       c6D8P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D8y_info" {
     block_c6D8y_info:
         const _c6D8y;
         const 130;
         const 30;
 },
 _c6D8N() //  [R1]
         { []
         }
     {offset
       c6D8N: // global
           if (R1 & 7 == 1) goto c6D8V; else goto c6D8Z;
       c6D8V: // global
           _s6AXB::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6AXB::P64;
           Sp = Sp + 8;
           call _c6D8v() args: 0, res: 0, upd: 0;
       c6D8Z: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D8N_info" {
     block_c6D8N_info:
         const _c6D8N;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.861206607 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupAny_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupAny_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6D9E: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6D9F; else goto c6D9G;
       c6D9F: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6D9G: // global
           I64[Sp - 8] = block_c6D9B_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6D9K; else goto c6D9C;
       u6D9K: // global
           call _c6D9B(R1) args: 0, res: 0, upd: 0;
       c6D9C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAny_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupAny_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupAny_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6D9B() //  [R1]
         { []
         }
     {offset
       c6D9B: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.Internal.$fSemigroupAny_go_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D9B_info" {
     block_c6D9B_info:
         const _c6D9B;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.867921833 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidAny_go_closure" {
     Data.Semigroup.Internal.$fMonoidAny_go_closure:
         const Data.Semigroup.Internal.$fMonoidAny_go_info;
 },
 Data.Semigroup.Internal.$fMonoidAny_go_entry() //  [R2]
         { []
         }
     {offset
       c6Da6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Da7; else goto u6Das;
       c6Da7: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAny_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u6Das: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c6D9W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAny_go_info" {
     Data.Semigroup.Internal.$fMonoidAny_go_info:
         const Data.Semigroup.Internal.$fMonoidAny_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6D9W() //  []
         { []
         }
     {offset
       c6D9W: // global
           _s6AXK::P64 = P64[Sp];
           I64[Sp] = block_c6D9Z_info;
           R1 = _s6AXK::P64;
           if (R1 & 7 != 0) goto u6Dau; else goto c6Da0;
       u6Dau: // global
           call _c6D9Z(R1) args: 0, res: 0, upd: 0;
       c6Da0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6D9Z() //  [R1]
         { []
         }
     {offset
       c6D9Z: // global
           if (R1 & 7 == 1) goto c6Da3; else goto c6Da4;
       c6Da3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Da4: // global
           I64[Sp - 8] = block_c6Dae_info;
           _s6AXN::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s6AXN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Dav; else goto c6Dag;
       u6Dav: // global
           call _c6Dae(R1) args: 0, res: 0, upd: 0;
       c6Dag: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6D9Z_info" {
     block_c6D9Z_info:
         const _c6D9Z;
         const 0;
         const 30;
 },
 _c6Dae() //  [R1]
         { []
         }
     {offset
       c6Dae: // global
           if (R1 & 7 == 1) goto c6Dam; else goto c6Daq;
       c6Dam: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6D9W() args: 0, res: 0, upd: 0;
       c6Daq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dae_info" {
     block_c6Dae_info:
         const _c6Dae;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.877293622 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAny_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_closure:
         const GHC.Base.C:Semigroup_con_info;
         const GHC.Classes.||_closure+2;
         const Data.Semigroup.Internal.$fSemigroupAny_$csconcat_closure+1;
         const Data.Semigroup.Internal.$fSemigroupAny_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidAny_closure" {
     Data.Semigroup.Internal.$fMonoidAny_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Semigroup.Internal.$fSemigroupAny_closure+1;
         const GHC.Types.False_closure+1;
         const GHC.Classes.||_closure+2;
         const Data.Semigroup.Internal.$fMonoidAny_go_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupAny_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupAny_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupAny_$cstimes_info;
         const 0;
 },
 Data.Semigroup.Internal.$fSemigroupAny_$cstimes_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       c6Db2: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Semigroup.Internal.$fMonoidAny_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAny_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupAny_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupAny_$cstimes_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S6Bb6_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.883926308 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAll_go_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_go_closure:
         const Data.Semigroup.Internal.$fSemigroupAll_go_info;
 },
 Data.Semigroup.Internal.$fSemigroupAll_go_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Dbm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Dbn; else goto u6DbI;
       c6Dbn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAll_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u6DbI: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c6Dbc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAll_go_info" {
     Data.Semigroup.Internal.$fSemigroupAll_go_info:
         const Data.Semigroup.Internal.$fSemigroupAll_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Dbc() //  []
         { []
         }
     {offset
       c6Dbc: // global
           I64[Sp - 8] = block_c6Dbf_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6DbK; else goto c6Dbg;
       u6DbK: // global
           call _c6Dbf(R1) args: 0, res: 0, upd: 0;
       c6Dbg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Dbf() //  [R1]
         { []
         }
     {offset
       c6Dbf: // global
           _s6AXQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Dbj; else goto c6Dbk;
       c6Dbj: // global
           R1 = _s6AXQ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6Dbk: // global
           I64[Sp] = block_c6Dbu_info;
           _s6AXT::P64 = P64[R1 + 6];
           _s6AXU::P64 = P64[R1 + 14];
           R1 = _s6AXQ::P64;
           P64[Sp + 8] = _s6AXU::P64;
           P64[Sp + 16] = _s6AXT::P64;
           if (R1 & 7 != 0) goto u6DbL; else goto c6Dbw;
       u6DbL: // global
           call _c6Dbu(R1) args: 0, res: 0, upd: 0;
       c6Dbw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dbf_info" {
     block_c6Dbf_info:
         const _c6Dbf;
         const 130;
         const 30;
 },
 _c6Dbu() //  [R1]
         { []
         }
     {offset
       c6Dbu: // global
           if (R1 & 7 == 1) goto c6DbC; else goto c6DbG;
       c6DbC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6DbG: // global
           _s6AXR::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6AXR::P64;
           Sp = Sp + 8;
           call _c6Dbc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Dbu_info" {
     block_c6Dbu_info:
         const _c6Dbu;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.892485523 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupAll_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupAll_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6Dcl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Dcm; else goto c6Dcn;
       c6Dcm: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Dcn: // global
           I64[Sp - 8] = block_c6Dci_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Dcr; else goto c6Dcj;
       u6Dcr: // global
           call _c6Dci(R1) args: 0, res: 0, upd: 0;
       c6Dcj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAll_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupAll_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupAll_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Dci() //  [R1]
         { []
         }
     {offset
       c6Dci: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.Internal.$fSemigroupAll_go_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dci_info" {
     block_c6Dci_info:
         const _c6Dci;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.898848505 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidAll_go_closure" {
     Data.Semigroup.Internal.$fMonoidAll_go_closure:
         const Data.Semigroup.Internal.$fMonoidAll_go_info;
 },
 Data.Semigroup.Internal.$fMonoidAll_go_entry() //  [R2]
         { []
         }
     {offset
       c6DcN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6DcO; else goto u6Dd9;
       c6DcO: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAll_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u6Dd9: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c6DcD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAll_go_info" {
     Data.Semigroup.Internal.$fMonoidAll_go_info:
         const Data.Semigroup.Internal.$fMonoidAll_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6DcD() //  []
         { []
         }
     {offset
       c6DcD: // global
           _s6AY0::P64 = P64[Sp];
           I64[Sp] = block_c6DcG_info;
           R1 = _s6AY0::P64;
           if (R1 & 7 != 0) goto u6Ddb; else goto c6DcH;
       u6Ddb: // global
           call _c6DcG(R1) args: 0, res: 0, upd: 0;
       c6DcH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6DcG() //  [R1]
         { []
         }
     {offset
       c6DcG: // global
           if (R1 & 7 == 1) goto c6DcK; else goto c6DcL;
       c6DcK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6DcL: // global
           I64[Sp - 8] = block_c6DcV_info;
           _s6AY3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s6AY3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Ddc; else goto c6DcX;
       u6Ddc: // global
           call _c6DcV(R1) args: 0, res: 0, upd: 0;
       c6DcX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DcG_info" {
     block_c6DcG_info:
         const _c6DcG;
         const 0;
         const 30;
 },
 _c6DcV() //  [R1]
         { []
         }
     {offset
       c6DcV: // global
           if (R1 & 7 == 1) goto c6Dd3; else goto c6Dd7;
       c6Dd3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Dd7: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6DcD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6DcV_info" {
     block_c6DcV_info:
         const _c6DcV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.907791044 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAll_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_closure:
         const GHC.Base.C:Semigroup_con_info;
         const GHC.Classes.&&_closure+2;
         const Data.Semigroup.Internal.$fSemigroupAll_$csconcat_closure+1;
         const Data.Semigroup.Internal.$fSemigroupAll_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidAll_closure" {
     Data.Semigroup.Internal.$fMonoidAll_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Semigroup.Internal.$fSemigroupAll_closure+1;
         const GHC.Types.True_closure+2;
         const GHC.Classes.&&_closure+2;
         const Data.Semigroup.Internal.$fMonoidAll_go_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupAll_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupAll_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupAll_$cstimes_info;
         const 0;
 },
 Data.Semigroup.Internal.$fSemigroupAll_$cstimes_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       c6DdJ: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Semigroup.Internal.$fMonoidAll_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAll_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupAll_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupAll_$cstimes_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S6Bb6_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.9128091 UTC

[section ""cstring" . lvl5_r6v1b_bytes" {
     lvl5_r6v1b_bytes:
         I8[] [115,116,105,109,101,115,77,111,110,111,105,100,58,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.915376549 UTC

[section ""data" . lvl6_r6v1c_closure" {
     lvl6_r6v1c_closure:
         const lvl6_r6v1c_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r6v1c_entry() //  [R1]
         { []
         }
     {offset
       c6De1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6De2; else goto c6De3;
       c6De2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6De3: // global
           (_c6DdW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6DdW::I64 == 0) goto c6DdY; else goto c6DdX;
       c6DdY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6DdX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6DdW::I64;
           I64[Sp - 24] = block_c6DdZ_info;
           R2 = lvl5_r6v1b_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r6v1c_info" {
     lvl6_r6v1c_info:
         const lvl6_r6v1c_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+736;
 },
 _c6DdZ() //  [R1]
         { []
         }
     {offset
       c6DdZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6DdZ_info" {
     block_c6DdZ_info:
         const _c6DdZ;
         const 0;
         const 4294967326;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.920313699 UTC

[section ""data" . sat_s6AY7_closure" {
     sat_s6AY7_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.922431711 UTC

[section ""data" . sat_s6AY8_closure" {
     sat_s6AY8_closure:
         const :_con_info;
         const sat_s6AY7_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.92478457 UTC

[section ""data" . lvl7_r6v1d_closure" {
     lvl7_r6v1d_closure:
         const lvl7_r6v1d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r6v1d_entry() //  [R1]
         { []
         }
     {offset
       c6Der: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Des; else goto c6Det;
       c6Des: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Det: // global
           (_c6Deo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Deo::I64 == 0) goto c6Deq; else goto c6Dep;
       c6Deq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Dep: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Deo::I64;
           R3 = sat_s6AY8_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r6v1d_info" {
     lvl7_r6v1d_info:
         const lvl7_r6v1d_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.939388091 UTC

[section ""data" . Data.Semigroup.Internal.stimesMonoid_closure" {
     Data.Semigroup.Internal.stimesMonoid_closure:
         const Data.Semigroup.Internal.stimesMonoid_info;
         const 0;
 },
 sat_s6AYg_entry() //  [R1]
         { []
         }
     {offset
       c6Dg4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Dg5; else goto c6Dg6;
       c6Dg5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6Dg2_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYg_info" {
     sat_s6AYg_info:
         const sat_s6AYg_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+744;
 },
 _c6Dg2() //  [R1]
         { []
         }
     {offset
       c6Dg2: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Dg2_info" {
     block_c6Dg2_info:
         const _c6Dg2;
         const 0;
         const 4294967326;
         const S6Bb6_srt+744;
 },
 $dNum_s6AYi_entry() //  [R1]
         { []
         }
     {offset
       c6Dgc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dgd; else goto c6Dge;
       c6Dgd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dge: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s6AYi_info" {
     $dNum_s6AYi_info:
         const $dNum_s6AYi_entry;
         const 1;
         const 16;
 },
 lvl12_s6AYj_entry() //  [R1]
         { []
         }
     {offset
       c6Dgh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Dgi; else goto c6Dgj;
       c6Dgi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dgj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl7_r6v1d_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6AYj_info" {
     lvl12_s6AYj_info:
         const lvl12_s6AYj_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+808;
 },
 lvl13_s6AYp_entry() //  [R1]
         { []
         }
     {offset
       c6Dgm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Dgn; else goto c6Dgo;
       c6Dgn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dgo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_s6AYp_info" {
     lvl13_s6AYp_info:
         const lvl13_s6AYp_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+816;
 },
 sat_s6AYG_entry() //  [R1]
         { []
         }
     {offset
       c6Dgr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dgs; else goto c6Dgt;
       c6Dgs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dgt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYG_info" {
     sat_s6AYG_info:
         const sat_s6AYG_entry;
         const 3;
         const 15;
 },
 sat_s6AYF_entry() //  [R1]
         { []
         }
     {offset
       c6Dgw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dgx; else goto c6Dgy;
       c6Dgx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dgy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6AYl::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6AYl::P64;
           P64[Sp - 24] = _s6AYl::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYF_info" {
     sat_s6AYF_info:
         const sat_s6AYF_entry;
         const 2;
         const 18;
 },
 sat_s6AYC_entry() //  [R1]
         { []
         }
     {offset
       c6DgB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DgC; else goto c6DgD;
       c6DgC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DgD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYC_info" {
     sat_s6AYC_info:
         const sat_s6AYC_entry;
         const 3;
         const 15;
 },
 sat_s6AYB_entry() //  [R1]
         { []
         }
     {offset
       c6DgG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DgH; else goto c6DgI;
       c6DgH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DgI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYB_info" {
     sat_s6AYB_info:
         const sat_s6AYB_entry;
         const 3;
         const 15;
 },
 sat_s6AYA_entry() //  [R1]
         { []
         }
     {offset
       c6DgM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DgN; else goto c6DgO;
       c6DgN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DgO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6AYv::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6AYv::P64;
           P64[Sp - 24] = _s6AYv::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYA_info" {
     sat_s6AYA_info:
         const sat_s6AYA_entry;
         const 2;
         const 18;
 },
 sat_s6AYE_entry() //  [R1]
         { []
         }
     {offset
       c6DgR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DgS; else goto c6DgT;
       c6DgS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DgT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYE_info" {
     sat_s6AYE_info:
         const sat_s6AYE_entry;
         const 3;
         const 15;
 },
 sat_s6AYD_entry() //  [R1]
         { []
         }
     {offset
       c6DgX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DgY; else goto c6DgZ;
       c6DgY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DgZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6AYv::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6AYv::P64;
           P64[Sp - 24] = _s6AYv::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYD_info" {
     sat_s6AYD_info:
         const sat_s6AYD_entry;
         const 2;
         const 18;
 },
 sat_s6AYM_entry() //  [R1]
         { []
         }
     {offset
       c6Dh2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dh3; else goto c6Dh4;
       c6Dh3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dh4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYM_info" {
     sat_s6AYM_info:
         const sat_s6AYM_entry;
         const 3;
         const 15;
 },
 sat_s6AYL_entry() //  [R1]
         { []
         }
     {offset
       c6Dh8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dh9; else goto c6Dha;
       c6Dh9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dha: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6AYI::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6AYI::P64;
           P64[Sp - 24] = _s6AYI::P64;
           Sp = Sp - 40;
           call GHC.Base.mappend_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AYL_info" {
     sat_s6AYL_info:
         const sat_s6AYL_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.Internal.stimesMonoid_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Dhb: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c6Dhc; else goto c6Dhd;
       c6Dhc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesMonoid_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Dhd: // global
           I64[Sp - 40] = block_c6DeH_info;
           _s6AY9::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s6AY9::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesMonoid_info" {
     Data.Semigroup.Internal.stimesMonoid_info:
         const Data.Semigroup.Internal.stimesMonoid_entry;
         const 0;
         const 34089155428366;
         const 17179869208;
         const S6Bb6_srt+744;
 },
 _c6DeH() //  [R1]
         { []
         }
     {offset
       c6DeH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Dhg; else goto c6Dhf;
       c6Dhg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dhf: // global
           I64[Hp - 16] = sat_s6AYg_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c6DeN_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DeH_info" {
     block_c6DeH_info:
         const _c6DeH;
         const 4;
         const 25293062406174;
         const S6Bb6_srt+744;
 },
 _c6DeN() //  [R1]
         { []
         }
     {offset
       c6DeN: // global
           I64[Sp] = block_c6DeR_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DeN_info" {
     block_c6DeN_info:
         const _c6DeN;
         const 6;
         const 98784247838;
         const S6Bb6_srt+808;
 },
 _c6DeR() //  [R1]
         { []
         }
     {offset
       c6DeR: // global
           _c6Dib::P64 = R1 & 7;
           if (_c6Dib::P64 < 3) goto u6Dig; else goto c6Dhp;
       u6Dig: // global
           if (_c6Dib::P64 < 2) goto c6Dhl; else goto c6Dho;
       c6Dhl: // global
           R1 = lvl6_r6v1c_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Dho: // global
           R2 = P64[Sp + 32];
           Sp = Sp + 56;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6Dhp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Dhs; else goto c6Dhr;
       c6Dhs: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dhr: // global
           I64[Hp - 40] = $dNum_s6AYi_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = lvl12_s6AYj_info;
           _c6DeX::P64 = Hp - 40;
           P64[Hp] = _c6DeX::P64;
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 16] = P64[Sp + 48];
           P64[Sp + 40] = Hp - 16;
           P64[Sp + 48] = _c6DeX::P64;
           call _c6DfQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6DeR_info" {
     block_c6DeR_info:
         const _c6DeR;
         const 134;
         const 98784247838;
         const S6Bb6_srt+808;
 },
 _c6DfQ() //  []
         { []
         }
     {offset
       c6DfQ: // global
           I64[Sp - 8] = block_c6DfS_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6DfS() //  [R1]
         { []
         }
     {offset
       c6DfS: // global
           _s6AYI::P64 = P64[Sp + 24];
           _s6AYJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Di6; else goto c6Di7;
       c6Di6: // global
           I64[Sp + 8] = block_c6Df6_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = _s6AYJ::P64;
           P64[Sp + 24] = _s6AYI::P64;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c6Di7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Dia; else goto c6Di9;
       c6Dia: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Di9: // global
           I64[Hp - 64] = sat_s6AYM_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = _s6AYJ::P64;
           I64[Hp - 24] = sat_s6AYL_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6AYI::P64;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 8] = Hp - 64;
           Sp = Sp + 8;
           call _c6DfQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6DfS_info" {
     block_c6DfS_info:
         const _c6DfS;
         const 7;
         const 12884901918;
         const S6Bb6_srt+816;
 },
 _c6Df6() //  [R1]
         { []
         }
     {offset
       c6Df6: // global
           I64[Sp] = block_c6Dfa_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Df6_info" {
     block_c6Df6_info:
         const _c6Df6;
         const 6;
         const 12884901918;
         const S6Bb6_srt+816;
 },
 _c6Dfa() //  [R1]
         { []
         }
     {offset
       c6Dfa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Dhx; else goto c6Dhw;
       c6Dhx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dhw: // global
           I64[Hp - 16] = lvl13_s6AYp_info;
           P64[Hp] = P64[Sp + 48];
           I64[Sp - 8] = block_c6Dfg_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 8];
           _c6Dfe::P64 = Hp - 16;
           P64[Sp - 16] = _c6Dfe::P64;
           P64[Sp] = R1;
           P64[Sp + 48] = _c6Dfe::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dfa_info" {
     block_c6Dfa_info:
         const _c6Dfa;
         const 6;
         const 12884901918;
         const S6Bb6_srt+816;
 },
 _c6Dfg() //  [R1]
         { []
         }
     {offset
       c6Dfg: // global
           _s6AYl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Dhz; else goto c6Di1;
       c6Dhz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6DhC; else goto c6DhB;
       c6DhC: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DhB: // global
           I64[Hp - 64] = sat_s6AYG_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = sat_s6AYF_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6AYl::P64;
           P64[Sp] = _s6AYl::P64;
           P64[Sp + 16] = Hp - 64;
           P64[Sp + 24] = Hp - 24;
           call _c6Dft() args: 0, res: 0, upd: 0;
       c6Di1: // global
           R1 = _s6AYl::P64;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dfg_info" {
     block_c6Dfg_info:
         const _c6Dfg;
         const 7;
         const 4294967326;
         const S6Bb6_srt+824;
 },
 _c6Dft() //  []
         { []
         }
     {offset
       c6Dft: // global
           I64[Sp - 8] = block_c6Dfv_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6Dfv() //  [R1]
         { []
         }
     {offset
       c6Dfv: // global
           _s6AYw::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6DhK; else goto c6DhU;
       c6DhK: // global
           I64[Sp] = block_c6Dfz_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6AYw::P64;
           P64[Sp - 8] = P64[Sp + 64];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c6DhU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6DhX; else goto c6DhW;
       c6DhX: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DhW: // global
           I64[Hp - 64] = sat_s6AYE_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = _s6AYw::P64;
           I64[Hp - 24] = sat_s6AYD_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6Dft() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Dfv_info" {
     block_c6Dfv_info:
         const _c6Dfv;
         const 8;
         const 4294967326;
         const S6Bb6_srt+824;
 },
 _c6Dfz() //  [R1]
         { []
         }
     {offset
       c6Dfz: // global
           _s6AYa::P64 = P64[Sp + 48];
           _s6AYv::P64 = P64[Sp + 32];
           _s6AYx::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6DhM; else goto c6DhT;
       c6DhM: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c6DhP; else goto c6DhO;
       c6DhP: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DhO: // global
           I64[Hp - 104] = sat_s6AYC_info;
           P64[Hp - 88] = _s6AYa::P64;
           P64[Hp - 80] = _s6AYv::P64;
           P64[Hp - 72] = _s6AYx::P64;
           I64[Hp - 64] = sat_s6AYB_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_s6AYA_info;
           P64[Hp - 8] = _s6AYa::P64;
           P64[Hp] = _s6AYv::P64;
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = Hp - 104;
           Sp = Sp + 8;
           call _c6Dft() args: 0, res: 0, upd: 0;
       c6DhT: // global
           R2 = _s6AYa::P64;
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = _s6AYv::P64;
           P64[Sp + 64] = _s6AYx::P64;
           Sp = Sp + 48;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dfz_info" {
     block_c6Dfz_info:
         const _c6Dfz;
         const 8;
         const 4294967326;
         const S6Bb6_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.98689836 UTC

[section ""data" . Data.Semigroup.Internal.$w$csconcat_closure" {
     Data.Semigroup.Internal.$w$csconcat_closure:
         const Data.Semigroup.Internal.$w$csconcat_info;
 },
 go_s6AYQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6DlU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6DlV; else goto c6DlW;
       c6DlV: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6DlW: // global
           I64[Sp - 32] = block_c6DlN_info;
           _s6AYQ::P64 = R1;
           _s6AYN::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s6AYN::P64;
           P64[Sp - 16] = _s6AYQ::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Dm6; else goto c6DlO;
       u6Dm6: // global
           call _c6DlN(R1) args: 0, res: 0, upd: 0;
       c6DlO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6AYQ_info" {
     go_s6AYQ_info:
         const go_s6AYQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6DlN() //  [R1]
         { []
         }
     {offset
       c6DlN: // global
           _s6AYR::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6DlR; else goto c6DlS;
       c6DlR: // global
           R1 = _s6AYR::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6DlS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Dm4; else goto c6Dm3;
       c6Dm4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dm3: // global
           _s6AYU::P64 = P64[R1 + 6];
           _s6AYV::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6AYU::P64;
           P64[Hp] = _s6AYV::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6AYR::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.<|>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DlN_info" {
     block_c6DlN_info:
         const _c6DlN;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Dm7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Dmb; else goto c6Dma;
       c6Dmb: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Dma: // global
           I64[Hp - 8] = go_s6AYQ_info;
           P64[Hp] = R2;
           _s6AYO::P64 = R3;
           R3 = R4;
           R2 = _s6AYO::P64;
           R1 = Hp - 6;
           call go_s6AYQ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$w$csconcat_info" {
     Data.Semigroup.Internal.$w$csconcat_info:
         const Data.Semigroup.Internal.$w$csconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:55.995606799 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c6DmD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6DmE; else goto c6DmF;
       c6DmE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6DmF: // global
           I64[Sp - 16] = block_c6DmA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6DmJ; else goto c6DmB;
       u6DmJ: // global
           call _c6DmA(R1) args: 0, res: 0, upd: 0;
       c6DmB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6DmA() //  [R1]
         { []
         }
     {offset
       c6DmA: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$w$csconcat_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DmA_info" {
     block_c6DmA_info:
         const _c6DmA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.002812657 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_closure" {
     Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_closure:
         const Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_info;
 },
 z_s6AZ4_entry() //  [R1]
         { []
         }
     {offset
       c6Dn2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dn3; else goto c6Dn4;
       c6Dn3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dn4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6AZ4_info" {
     z_s6AZ4_info:
         const z_s6AZ4_entry;
         const 1;
         const 16;
 },
 go_s6AZ5_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Dnh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Dni; else goto c6Dnj;
       c6Dni: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Dnj: // global
           I64[Sp - 32] = block_c6Dna_info;
           _s6AZ5::P64 = R1;
           _s6AZ2::P64 = P64[R1 + 7];
           _s6AZ4::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6AZ2::P64;
           P64[Sp - 16] = _s6AZ4::P64;
           P64[Sp - 8] = _s6AZ5::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Dnt; else goto c6Dnb;
       u6Dnt: // global
           call _c6Dna(R1) args: 0, res: 0, upd: 0;
       c6Dnb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6AZ5_info" {
     go_s6AZ5_info:
         const go_s6AZ5_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6Dna() //  [R1]
         { []
         }
     {offset
       c6Dna: // global
           if (R1 & 7 == 1) goto c6Dne; else goto c6Dnf;
       c6Dne: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Dnf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Dnr; else goto c6Dnq;
       c6Dnr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dnq: // global
           _s6AZ8::P64 = P64[R1 + 6];
           _s6AZ9::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6AZ9::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6AZ8::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.<|>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dna_info" {
     block_c6Dna_info:
         const _c6Dna;
         const 3;
         const 30;
 },
 Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Dnu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Dny; else goto c6Dnx;
       c6Dny: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Dnx: // global
           I64[Hp - 40] = z_s6AZ4_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6AZ5_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_s6AZ5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_info" {
     Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_info:
         const Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.015692269 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupAlt_closure" {
     Data.Semigroup.Internal.$fSemigroupAlt_closure:
         const Data.Semigroup.Internal.$fSemigroupAlt_info;
         const 0;
 },
 sat_s6AZe_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Do9: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_entry(R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AZe_info" {
     sat_s6AZe_info:
         const sat_s6AZe_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Bb6_srt+848;
 },
 sat_s6AZd_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Doh: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fSemigroupAlt_$csconcat_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AZd_info" {
     sat_s6AZd_info:
         const sat_s6AZd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6AZc_entry() //  [R1]
         { []
         }
     {offset
       c6Doo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dop; else goto c6Doq;
       c6Dop: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Doq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AZc_info" {
     sat_s6AZc_info:
         const sat_s6AZc_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.Internal.$fSemigroupAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Dos: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6Dow; else goto c6Dov;
       c6Dow: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Dov: // global
           I64[Hp - 80] = sat_s6AZe_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s6AZd_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6AZc_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 79;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAlt_info" {
     Data.Semigroup.Internal.$fSemigroupAlt_info:
         const Data.Semigroup.Internal.$fSemigroupAlt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+848;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidAlt_closure" {
     Data.Semigroup.Internal.$fMonoidAlt_closure:
         const Data.Semigroup.Internal.$fMonoidAlt_info;
         const 0;
 },
 sat_s6AZj_entry() //  [R1, R2]
         { []
         }
     {offset
       c6DoG: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.Internal.$fMonoidAlt_$cmconcat_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AZj_info" {
     sat_s6AZj_info:
         const sat_s6AZj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6AZi_entry() //  [R1]
         { []
         }
     {offset
       c6DoN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6DoO; else goto c6DoP;
       c6DoO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DoP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AZi_info" {
     sat_s6AZi_info:
         const sat_s6AZi_entry;
         const 1;
         const 16;
 },
 sat_s6AZh_entry() //  [R1]
         { []
         }
     {offset
       c6DoU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6DoV; else goto c6DoW;
       c6DoV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DoW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AZh_info" {
     sat_s6AZh_info:
         const sat_s6AZh_entry;
         const 1;
         const 16;
 },
 sat_s6AZg_entry() //  [R1]
         { []
         }
     {offset
       c6Dp1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dp2; else goto c6Dp3;
       c6Dp2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dp3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupAlt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AZg_info" {
     sat_s6AZg_info:
         const sat_s6AZg_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+856;
 },
 Data.Semigroup.Internal.$fMonoidAlt_entry() //  [R2]
         { []
         }
     {offset
       c6Dp5: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c6Dp9; else goto c6Dp8;
       c6Dp9: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Dp8: // global
           I64[Hp - 120] = sat_s6AZj_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6AZi_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s6AZh_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6AZg_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 119;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidAlt_info" {
     Data.Semigroup.Internal.$fMonoidAlt_info:
         const Data.Semigroup.Internal.$fMonoidAlt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Bb6_srt+856;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_info;
         const 0;
 },
 sat_s6AZm_entry() //  [R1]
         { []
         }
     {offset
       c6Dpi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dpj; else goto c6Dpk;
       c6Dpj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dpk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidAlt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AZm_info" {
     sat_s6AZm_info:
         const sat_s6AZm_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+864;
 },
 Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c6Dpl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Dpp; else goto c6Dpo;
       c6Dpp: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Dpo: // global
           I64[Hp - 16] = sat_s6AZm_info;
           P64[Hp] = R2;
           _s6AZl::P64 = R3;
           R3 = Hp - 16;
           R2 = _s6AZl::P64;
           R1 = Data.Semigroup.Internal.stimesMonoid_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_entry;
         const 0;
         const 90194313230;
         const 8589934607;
         const S6Bb6_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.039823378 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupEndo1_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo1_closure:
         const Data.Semigroup.Internal.$fSemigroupEndo1_info;
 },
 g_s6AZs_entry() //  [R1]
         { []
         }
     {offset
       c6DqH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6DqI; else goto c6DqJ;
       c6DqI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DqJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fSemigroupEndo1_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6AZs_info" {
     g_s6AZs_info:
         const g_s6AZs_entry;
         const 2;
         const 18;
 },
 sat_s6AZv_entry() //  [R1, R2]
         { []
         }
     {offset
       c6DqQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6DqU; else goto c6DqT;
       c6DqU: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6DqT: // global
           _s6AZn::P64 = P64[R1 + 7];
           _s6AZs::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6AZs::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s6AZn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6AZv_info" {
     sat_s6AZv_info:
         const sat_s6AZv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Semigroup.Internal.$fSemigroupEndo1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6DqZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dr0; else goto c6Dr1;
       c6Dr0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupEndo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Dr1: // global
           I64[Sp - 16] = block_c6Dqx_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Dr7; else goto c6Dqy;
       u6Dr7: // global
           call _c6Dqx(R1) args: 0, res: 0, upd: 0;
       c6Dqy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupEndo1_info" {
     Data.Semigroup.Internal.$fSemigroupEndo1_info:
         const Data.Semigroup.Internal.$fSemigroupEndo1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Dqx() //  [R1]
         { []
         }
     {offset
       c6Dqx: // global
           _s6AZn::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6DqW; else goto c6DqX;
       c6DqW: // global
           R1 = _s6AZn::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6DqX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Dr6; else goto c6Dr5;
       c6Dr6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dr5: // global
           _s6AZq::P64 = P64[R1 + 6];
           _s6AZr::P64 = P64[R1 + 14];
           I64[Hp - 48] = g_s6AZs_info;
           P64[Hp - 32] = _s6AZq::P64;
           P64[Hp - 24] = _s6AZr::P64;
           I64[Hp - 16] = sat_s6AZv_info;
           P64[Hp - 8] = _s6AZn::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dqx_info" {
     block_c6Dqx_info:
         const _c6Dqx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.049654253 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure:
         const Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_info;
 },
 Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6DrE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6DrF; else goto c6DrG;
       c6DrF: // global
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6DrG: // global
           I64[Sp - 8] = block_c6DrB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6DrK; else goto c6DrC;
       u6DrK: // global
           call _c6DrB(R1) args: 0, res: 0, upd: 0;
       c6DrC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_info" {
     Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_info:
         const Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6DrB() //  [R1]
         { []
         }
     {offset
       c6DrB: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.Internal.$fSemigroupEndo1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DrB_info" {
     block_c6DrB_info:
         const _c6DrB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.056275995 UTC

[section ""data" . Data.Semigroup.Internal.$fMonoidEndo1_closure" {
     Data.Semigroup.Internal.$fMonoidEndo1_closure:
         const Data.Semigroup.Internal.$fMonoidEndo1_info;
 },
 sat_s6AZF_entry() //  [R1]
         { []
         }
     {offset
       c6Ds9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dsa; else goto c6Dsb;
       c6Dsa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dsb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidEndo1_entry(R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AZF_info" {
     sat_s6AZF_info:
         const sat_s6AZF_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.Internal.$fMonoidEndo1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Dsg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Dsh; else goto c6Dsi;
       c6Dsh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.$fMonoidEndo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Dsi: // global
           I64[Sp - 16] = block_c6DrZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Dso; else goto c6Ds0;
       u6Dso: // global
           call _c6DrZ(R1) args: 0, res: 0, upd: 0;
       c6Ds0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fMonoidEndo1_info" {
     Data.Semigroup.Internal.$fMonoidEndo1_info:
         const Data.Semigroup.Internal.$fMonoidEndo1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6DrZ() //  [R1]
         { []
         }
     {offset
       c6DrZ: // global
           _s6AZB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Dsd; else goto c6Dse;
       c6Dsd: // global
           R1 = _s6AZB::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Dse: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Dsn; else goto c6Dsm;
       c6Dsn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dsm: // global
           _s6AZD::P64 = P64[R1 + 6];
           _s6AZE::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s6AZF_info;
           P64[Hp - 8] = _s6AZB::P64;
           P64[Hp] = _s6AZE::P64;
           R2 = Hp - 24;
           R1 = _s6AZD::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DrZ_info" {
     block_c6DrZ_info:
         const _c6DrZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.064360614 UTC

[section ""data" . Data.Semigroup.Internal.$fSemigroupEndo_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo_closure:
         const GHC.Base.C:Semigroup_con_info;
         const GHC.Base.._closure+3;
         const Data.Semigroup.Internal.$fSemigroupEndo_$csconcat_closure+1;
         const Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fMonoidEndo_closure" {
     Data.Semigroup.Internal.$fMonoidEndo_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Semigroup.Internal.$fSemigroupEndo_closure+1;
         const GHC.Base.id_closure+1;
         const GHC.Base.._closure+3;
         const Data.Semigroup.Internal.$fMonoidEndo1_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_closure" {
     Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_closure:
         const Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_info;
         const 0;
 },
 Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c6DsL: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Semigroup.Internal.$fMonoidEndo_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesMonoid_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_info" {
     Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_info:
         const Data.Semigroup.Internal.$fSemigroupEndo_$cstimes_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S6Bb6_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.069090393 UTC

[section ""cstring" . lvl8_r6v1e_bytes" {
     lvl8_r6v1e_bytes:
         I8[] [115,116,105,109,101,115,58,32,112,111,115,105,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114,32,101,120,112,101,99,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.073005048 UTC

[section ""data" . lvl9_r6v1f_closure" {
     lvl9_r6v1f_closure:
         const lvl9_r6v1f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r6v1f_entry() //  [R1]
         { []
         }
     {offset
       c6Dt3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Dt4; else goto c6Dt5;
       c6Dt4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dt5: // global
           (_c6DsY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6DsY::I64 == 0) goto c6Dt0; else goto c6DsZ;
       c6Dt0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6DsZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6DsY::I64;
           I64[Sp - 24] = block_c6Dt1_info;
           R2 = lvl8_r6v1e_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r6v1f_info" {
     lvl9_r6v1f_info:
         const lvl9_r6v1f_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+736;
 },
 _c6Dt1() //  [R1]
         { []
         }
     {offset
       c6Dt1: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Dt1_info" {
     block_c6Dt1_info:
         const _c6Dt1;
         const 0;
         const 4294967326;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.089880697 UTC

[section ""data" . Data.Semigroup.Internal.stimesDefault_closure" {
     Data.Semigroup.Internal.stimesDefault_closure:
         const Data.Semigroup.Internal.stimesDefault_info;
         const 0;
 },
 sat_s6AZP_entry() //  [R1]
         { []
         }
     {offset
       c6DuK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6DuL; else goto c6DuM;
       c6DuL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DuM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6DuI_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6AZP_info" {
     sat_s6AZP_info:
         const sat_s6AZP_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+744;
 },
 _c6DuI() //  [R1]
         { []
         }
     {offset
       c6DuI: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6DuI_info" {
     block_c6DuI_info:
         const _c6DuI;
         const 0;
         const 4294967326;
         const S6Bb6_srt+744;
 },
 $dNum_s6AZR_entry() //  [R1]
         { []
         }
     {offset
       c6DuS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6DuT; else goto c6DuU;
       c6DuT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DuU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s6AZR_info" {
     $dNum_s6AZR_info:
         const $dNum_s6AZR_entry;
         const 1;
         const 16;
 },
 lvl12_s6AZS_entry() //  [R1]
         { []
         }
     {offset
       c6DuX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6DuY; else goto c6DuZ;
       c6DuY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DuZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl7_r6v1d_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6AZS_info" {
     lvl12_s6AZS_info:
         const lvl12_s6AZS_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+808;
 },
 lvl13_s6AZY_entry() //  [R1]
         { []
         }
     {offset
       c6Dv2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Dv3; else goto c6Dv4;
       c6Dv3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dv4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_s6AZY_info" {
     lvl13_s6AZY_info:
         const lvl13_s6AZY_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+816;
 },
 sat_s6B0f_entry() //  [R1]
         { []
         }
     {offset
       c6Dv7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dv8; else goto c6Dv9;
       c6Dv8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dv9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0f_info" {
     sat_s6B0f_info:
         const sat_s6B0f_entry;
         const 3;
         const 15;
 },
 sat_s6B0e_entry() //  [R1]
         { []
         }
     {offset
       c6Dvc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dvd; else goto c6Dve;
       c6Dvd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dve: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6AZU::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6AZU::P64;
           P64[Sp - 24] = _s6AZU::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0e_info" {
     sat_s6B0e_info:
         const sat_s6B0e_entry;
         const 2;
         const 18;
 },
 sat_s6B0b_entry() //  [R1]
         { []
         }
     {offset
       c6Dvh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dvi; else goto c6Dvj;
       c6Dvi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dvj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0b_info" {
     sat_s6B0b_info:
         const sat_s6B0b_entry;
         const 3;
         const 15;
 },
 sat_s6B0a_entry() //  [R1]
         { []
         }
     {offset
       c6Dvm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dvn; else goto c6Dvo;
       c6Dvn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dvo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0a_info" {
     sat_s6B0a_info:
         const sat_s6B0a_entry;
         const 3;
         const 15;
 },
 sat_s6B09_entry() //  [R1]
         { []
         }
     {offset
       c6Dvs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dvt; else goto c6Dvu;
       c6Dvt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dvu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6B04::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6B04::P64;
           P64[Sp - 24] = _s6B04::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B09_info" {
     sat_s6B09_info:
         const sat_s6B09_entry;
         const 2;
         const 18;
 },
 sat_s6B0d_entry() //  [R1]
         { []
         }
     {offset
       c6Dvx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Dvy; else goto c6Dvz;
       c6Dvy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Dvz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0d_info" {
     sat_s6B0d_info:
         const sat_s6B0d_entry;
         const 3;
         const 15;
 },
 sat_s6B0c_entry() //  [R1]
         { []
         }
     {offset
       c6DvD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DvE; else goto c6DvF;
       c6DvE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DvF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6B04::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6B04::P64;
           P64[Sp - 24] = _s6B04::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0c_info" {
     sat_s6B0c_info:
         const sat_s6B0c_entry;
         const 2;
         const 18;
 },
 sat_s6B0l_entry() //  [R1]
         { []
         }
     {offset
       c6DvI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DvJ; else goto c6DvK;
       c6DvJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DvK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0l_info" {
     sat_s6B0l_info:
         const sat_s6B0l_entry;
         const 3;
         const 15;
 },
 sat_s6B0k_entry() //  [R1]
         { []
         }
     {offset
       c6DvO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DvP; else goto c6DvQ;
       c6DvP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DvQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s6B0h::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s6B0h::P64;
           P64[Sp - 24] = _s6B0h::P64;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0k_info" {
     sat_s6B0k_info:
         const sat_s6B0k_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.Internal.stimesDefault_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6DvR: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c6DvS; else goto c6DvT;
       c6DvS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6DvT: // global
           I64[Sp - 40] = block_c6Dtp_info;
           _s6AZI::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s6AZI::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesDefault_info" {
     Data.Semigroup.Internal.stimesDefault_info:
         const Data.Semigroup.Internal.stimesDefault_entry;
         const 0;
         const 1696550736625678;
         const 17179869208;
         const S6Bb6_srt+744;
 },
 _c6Dtp() //  [R1]
         { []
         }
     {offset
       c6Dtp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6DvW; else goto c6DvV;
       c6DvW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DvV: // global
           I64[Hp - 16] = sat_s6AZP_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c6Dtv_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dtp_info" {
     block_c6Dtp_info:
         const _c6Dtp;
         const 4;
         const 1133600783204382;
         const S6Bb6_srt+744;
 },
 _c6Dtv() //  [R1]
         { []
         }
     {offset
       c6Dtv: // global
           I64[Sp] = block_c6Dtz_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dtv_info" {
     block_c6Dtv_info:
         const _c6Dtv;
         const 6;
         const 4428111282206;
         const S6Bb6_srt+808;
 },
 _c6Dtz() //  [R1]
         { []
         }
     {offset
       c6Dtz: // global
           if (R1 & 7 == 1) goto c6DvZ; else goto c6DwO;
       c6DvZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Dw2; else goto c6Dw1;
       c6Dw2: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dw1: // global
           I64[Hp - 40] = $dNum_s6AZR_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = lvl12_s6AZS_info;
           _c6DtD::P64 = Hp - 40;
           P64[Hp] = _c6DtD::P64;
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 16] = P64[Sp + 48];
           P64[Sp + 40] = Hp - 16;
           P64[Sp + 48] = _c6DtD::P64;
           call _c6Duw() args: 0, res: 0, upd: 0;
       c6DwO: // global
           R1 = lvl9_r6v1f_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Dtz_info" {
     block_c6Dtz_info:
         const _c6Dtz;
         const 134;
         const 4428111282206;
         const S6Bb6_srt+808;
 },
 _c6Duw() //  []
         { []
         }
     {offset
       c6Duw: // global
           I64[Sp - 8] = block_c6Duy_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6Duy() //  [R1]
         { []
         }
     {offset
       c6Duy: // global
           _s6B0h::P64 = P64[Sp + 24];
           _s6B0i::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6DwG; else goto c6DwH;
       c6DwG: // global
           I64[Sp + 8] = block_c6DtM_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = _s6B0i::P64;
           P64[Sp + 24] = _s6B0h::P64;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c6DwH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6DwK; else goto c6DwJ;
       c6DwK: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DwJ: // global
           I64[Hp - 64] = sat_s6B0l_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = _s6B0i::P64;
           I64[Hp - 24] = sat_s6B0k_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6B0h::P64;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 8] = Hp - 64;
           Sp = Sp + 8;
           call _c6Duw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Duy_info" {
     block_c6Duy_info:
         const _c6Duy;
         const 7;
         const 12884901918;
         const S6Bb6_srt+816;
 },
 _c6DtM() //  [R1]
         { []
         }
     {offset
       c6DtM: // global
           I64[Sp] = block_c6DtQ_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DtM_info" {
     block_c6DtM_info:
         const _c6DtM;
         const 6;
         const 12884901918;
         const S6Bb6_srt+816;
 },
 _c6DtQ() //  [R1]
         { []
         }
     {offset
       c6DtQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Dw7; else goto c6Dw6;
       c6Dw7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dw6: // global
           I64[Hp - 16] = lvl13_s6AZY_info;
           P64[Hp] = P64[Sp + 48];
           I64[Sp - 8] = block_c6DtW_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 8];
           _c6DtU::P64 = Hp - 16;
           P64[Sp - 16] = _c6DtU::P64;
           P64[Sp] = R1;
           P64[Sp + 48] = _c6DtU::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DtQ_info" {
     block_c6DtQ_info:
         const _c6DtQ;
         const 6;
         const 12884901918;
         const S6Bb6_srt+816;
 },
 _c6DtW() //  [R1]
         { []
         }
     {offset
       c6DtW: // global
           _s6AZU::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Dw9; else goto c6DwB;
       c6Dw9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Dwc; else goto c6Dwb;
       c6Dwc: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dwb: // global
           I64[Hp - 64] = sat_s6B0f_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = sat_s6B0e_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s6AZU::P64;
           P64[Sp] = _s6AZU::P64;
           P64[Sp + 16] = Hp - 64;
           P64[Sp + 24] = Hp - 24;
           call _c6Du9() args: 0, res: 0, upd: 0;
       c6DwB: // global
           R1 = _s6AZU::P64;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DtW_info" {
     block_c6DtW_info:
         const _c6DtW;
         const 7;
         const 4294967326;
         const S6Bb6_srt+824;
 },
 _c6Du9() //  []
         { []
         }
     {offset
       c6Du9: // global
           I64[Sp - 8] = block_c6Dub_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c6Dub() //  [R1]
         { []
         }
     {offset
       c6Dub: // global
           _s6B05::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Dwk; else goto c6Dwu;
       c6Dwk: // global
           I64[Sp] = block_c6Duf_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6B05::P64;
           P64[Sp - 8] = P64[Sp + 64];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c6Dwu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Dwx; else goto c6Dww;
       c6Dwx: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dww: // global
           I64[Hp - 64] = sat_s6B0d_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = _s6B05::P64;
           I64[Hp - 24] = sat_s6B0c_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6Du9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Dub_info" {
     block_c6Dub_info:
         const _c6Dub;
         const 8;
         const 4294967326;
         const S6Bb6_srt+824;
 },
 _c6Duf() //  [R1]
         { []
         }
     {offset
       c6Duf: // global
           _s6AZJ::P64 = P64[Sp + 48];
           _s6B04::P64 = P64[Sp + 32];
           _s6B06::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Dwm; else goto c6Dwt;
       c6Dwm: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c6Dwp; else goto c6Dwo;
       c6Dwp: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Dwo: // global
           I64[Hp - 104] = sat_s6B0b_info;
           P64[Hp - 88] = _s6AZJ::P64;
           P64[Hp - 80] = _s6B04::P64;
           P64[Hp - 72] = _s6B06::P64;
           I64[Hp - 64] = sat_s6B0a_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_s6B09_info;
           P64[Hp - 8] = _s6AZJ::P64;
           P64[Hp] = _s6B04::P64;
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = Hp - 104;
           Sp = Sp + 8;
           call _c6Du9() args: 0, res: 0, upd: 0;
       c6Dwt: // global
           R2 = _s6AZJ::P64;
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = _s6B04::P64;
           P64[Sp + 64] = _s6B06::P64;
           Sp = Sp + 48;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Duf_info" {
     block_c6Duf_info:
         const _c6Duf;
         const 8;
         const 4294967326;
         const S6Bb6_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.136087298 UTC

[section ""cstring" . lvl10_r6v1g_bytes" {
     lvl10_r6v1g_bytes:
         I8[] [115,116,105,109,101,115,58,32,77,97,121,98,101,44,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.138976281 UTC

[section ""data" . Data.Semigroup.Internal.stimesMaybe1_closure" {
     Data.Semigroup.Internal.stimesMaybe1_closure:
         const Data.Semigroup.Internal.stimesMaybe1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesMaybe1_entry() //  [R1]
         { []
         }
     {offset
       c6DAr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6DAs; else goto c6DAt;
       c6DAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DAt: // global
           (_c6DAm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6DAm::I64 == 0) goto c6DAo; else goto c6DAn;
       c6DAo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6DAn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6DAm::I64;
           I64[Sp - 24] = block_c6DAp_info;
           R2 = lvl10_r6v1g_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesMaybe1_info" {
     Data.Semigroup.Internal.stimesMaybe1_info:
         const Data.Semigroup.Internal.stimesMaybe1_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+736;
 },
 _c6DAp() //  [R1]
         { []
         }
     {offset
       c6DAp: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6DAp_info" {
     block_c6DAp_info:
         const _c6DAp;
         const 0;
         const 4294967326;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.147935849 UTC

[section ""data" . Data.Semigroup.Internal.stimesMaybe_closure" {
     Data.Semigroup.Internal.stimesMaybe_closure:
         const Data.Semigroup.Internal.stimesMaybe_info;
         const 0;
 },
 sat_s6B0w_entry() //  [R1]
         { []
         }
     {offset
       c6DB3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6DB4; else goto c6DB5;
       c6DB4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DB5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c6DB1_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0w_info" {
     sat_s6B0w_info:
         const sat_s6B0w_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+744;
 },
 _c6DB1() //  [R1]
         { []
         }
     {offset
       c6DB1: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6DB1_info" {
     block_c6DB1_info:
         const _c6DB1;
         const 0;
         const 4294967326;
         const S6Bb6_srt+744;
 },
 sat_s6B0y_entry() //  [R1]
         { []
         }
     {offset
       c6DBn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6DBo; else goto c6DBp;
       c6DBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DBp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.stimes_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0y_info" {
     sat_s6B0y_info:
         const sat_s6B0y_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.Internal.stimesMaybe_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6DBu: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c6DBv; else goto c6DBw;
       c6DBv: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesMaybe_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6DBw: // global
           I64[Sp - 32] = block_c6DAN_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6DBW; else goto c6DAO;
       u6DBW: // global
           call _c6DAN(R1) args: 0, res: 0, upd: 0;
       c6DAO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesMaybe_info" {
     Data.Semigroup.Internal.stimesMaybe_info:
         const Data.Semigroup.Internal.stimesMaybe_entry;
         const 0;
         const 6755403736023054;
         const 17179869208;
         const S6Bb6_srt+744;
 },
 _c6DAN() //  [R1]
         { []
         }
     {offset
       c6DAN: // global
           if (R1 & 7 == 1) goto u6DBS; else goto c6DBs;
       u6DBS: // global
           Sp = Sp + 32;
           call _c6DBK() args: 0, res: 0, upd: 0;
       c6DBs: // global
           I64[Sp - 8] = block_c6DAT_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DAN_info" {
     block_c6DAN_info:
         const _c6DAN;
         const 3;
         const 4503603922337822;
         const S6Bb6_srt+744;
 },
 _c6DAT() //  [R1]
         { []
         }
     {offset
       c6DAT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6DBC; else goto c6DBB;
       c6DBC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DBB: // global
           I64[Hp - 16] = sat_s6B0w_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6DB9_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DAT_info" {
     block_c6DAT_info:
         const _c6DAT;
         const 4;
         const 4503603922337822;
         const S6Bb6_srt+744;
 },
 _c6DB9() //  [R1]
         { []
         }
     {offset
       c6DB9: // global
           _c6DAX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c6DBd_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = _c6DAX::P64;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DB9_info" {
     block_c6DB9_info:
         const _c6DB9;
         const 5;
         const 4294967326;
         const S6Bb6_srt+904;
 },
 _c6DBd() //  [R1]
         { []
         }
     {offset
       c6DBd: // global
           _c6DBQ::P64 = R1 & 7;
           if (_c6DBQ::P64 < 3) goto u6DBR; else goto c6DBM;
       u6DBR: // global
           if (_c6DBQ::P64 < 2) goto c6DBH; else goto u6DBT;
       c6DBH: // global
           R1 = Data.Semigroup.Internal.stimesMaybe1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u6DBT: // global
           Sp = Sp + 40;
           call _c6DBK() args: 0, res: 0, upd: 0;
       c6DBM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6DBP; else goto c6DBO;
       c6DBP: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DBO: // global
           I64[Hp - 56] = sat_s6B0y_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DBd_info" {
     block_c6DBd_info:
         const _c6DBd;
         const 4;
         const 4294967326;
         const S6Bb6_srt+904;
 },
 _c6DBK() //  []
         { []
         }
     {offset
       c6DBK: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.16637279 UTC

[section ""cstring" . lvl11_r6v1h_bytes" {
     lvl11_r6v1h_bytes:
         I8[] [115,116,105,109,101,115,58,32,91,93,44,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.169225935 UTC

[section ""data" . Data.Semigroup.Internal.stimesList1_closure" {
     Data.Semigroup.Internal.stimesList1_closure:
         const Data.Semigroup.Internal.stimesList1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.Internal.stimesList1_entry() //  [R1]
         { []
         }
     {offset
       c6DD7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6DD8; else goto c6DD9;
       c6DD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DD9: // global
           (_c6DD2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6DD2::I64 == 0) goto c6DD4; else goto c6DD3;
       c6DD4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6DD3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6DD2::I64;
           I64[Sp - 24] = block_c6DD5_info;
           R2 = lvl11_r6v1h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesList1_info" {
     Data.Semigroup.Internal.stimesList1_info:
         const Data.Semigroup.Internal.stimesList1_entry;
         const 0;
         const 4294967317;
         const S6Bb6_srt+736;
 },
 _c6DD5() //  [R1]
         { []
         }
     {offset
       c6DD5: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6DD5_info" {
     block_c6DD5_info:
         const _c6DD5;
         const 0;
         const 4294967326;
         const S6Bb6_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.180624544 UTC

[section ""data" . Data.Semigroup.Internal.stimesList_closure" {
     Data.Semigroup.Internal.stimesList_closure:
         const Data.Semigroup.Internal.stimesList_info;
         const 0;
 },
 $dNum_s6B0E_entry() //  [R1]
         { []
         }
     {offset
       c6DDB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6DDC; else goto c6DDD;
       c6DDC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DDD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s6B0E_info" {
     $dNum_s6B0E_info:
         const $dNum_s6B0E_entry;
         const 1;
         const 16;
 },
 sat_s6B0G_entry() //  [R1]
         { []
         }
     {offset
       c6DDM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6DDN; else goto c6DDO;
       c6DDN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DDO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0G_info" {
     sat_s6B0G_info:
         const sat_s6B0G_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+744;
 },
 lvl12_s6B0I_entry() //  [R1]
         { []
         }
     {offset
       c6DDX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6DDY; else goto c6DDZ;
       c6DDY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DDZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_s6B0I_info" {
     lvl12_s6B0I_info:
         const lvl12_s6B0I_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+816;
 },
 lvl13_s6B0J_entry() //  [R1]
         { []
         }
     {offset
       c6DE4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6DE5; else goto c6DE6;
       c6DE5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DE6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_s6B0J_info" {
     lvl13_s6B0J_info:
         const lvl13_s6B0J_entry;
         const 1;
         const 4294967312;
         const S6Bb6_srt+744;
 },
 sat_s6B0O_entry() //  [R1]
         { []
         }
     {offset
       c6DEs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6DEt; else goto c6DEu;
       c6DEt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DEu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6B0O_info" {
     sat_s6B0O_info:
         const sat_s6B0O_entry;
         const 3;
         const 15;
 },
 sat_s6B0P_entry() //  [R1]
         { []
         }
     {offset
       c6DEv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6DEz; else goto c6DEy;
       c6DEz: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6DEy: // global
           _s6B0E::P64 = P64[R1 + 16];
           _s6B0I::P64 = P64[R1 + 24];
           _s6B0L::P64 = P64[R1 + 32];
           _s6B0M::P64 = P64[R1 + 40];
           I64[Hp - 32] = sat_s6B0O_info;
           P64[Hp - 16] = _s6B0E::P64;
           P64[Hp - 8] = _s6B0I::P64;
           P64[Hp] = _s6B0M::P64;
           R2 = Hp - 32;
           R1 = _s6B0L::P64;
           call rep_s6B0L_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6B0P_info" {
     sat_s6B0P_info:
         const sat_s6B0P_entry;
         const 4;
         const 15;
 },
 rep_s6B0L_entry() //  [R1, R2]
         { []
         }
     {offset
       c6DEE: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c6DEF; else goto c6DEG;
       c6DEF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6DEG: // global
           I64[Sp - 48] = block_c6DEg_info;
           _s6B0M::P64 = R2;
           R2 = P64[R1 + 39];
           I64[Sp - 72] = stg_ap_pp_info;
           P64[Sp - 64] = _s6B0M::P64;
           P64[Sp - 56] = P64[R1 + 31];
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s6B0M::P64;
           Sp = Sp - 72;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . rep_s6B0L_info" {
     rep_s6B0L_info:
         const rep_s6B0L_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c6DEg() //  [R1]
         { []
         }
     {offset
       c6DEg: // global
           if (R1 & 7 == 1) goto c6DEB; else goto c6DEC;
       c6DEB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6DEJ; else goto c6DEI;
       c6DEJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DEI: // global
           I64[Hp - 40] = sat_s6B0P_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R3 = Hp - 40;
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c6DEC: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DEg_info" {
     block_c6DEg_info:
         const _c6DEg;
         const 5;
         const 30;
 },
 Data.Semigroup.Internal.stimesList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6DEN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c6DEO; else goto c6DEP;
       c6DEO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Internal.stimesList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6DEP: // global
           I64[Sp - 24] = block_c6DDt_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Internal.stimesList_info" {
     Data.Semigroup.Internal.stimesList_info:
         const Data.Semigroup.Internal.stimesList_entry;
         const 0;
         const 27023801082445838;
         const 12884901911;
         const S6Bb6_srt+744;
 },
 _c6DDt() //  [R1]
         { []
         }
     {offset
       c6DDt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6DES; else goto c6DER;
       c6DES: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DER: // global
           I64[Hp - 16] = $dNum_s6B0E_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c6DDE_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DDt_info" {
     block_c6DDt_info:
         const _c6DDt;
         const 2;
         const 18016601827704862;
         const S6Bb6_srt+744;
 },
 _c6DDE() //  [R1]
         { []
         }
     {offset
       c6DDE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6DEV; else goto c6DEU;
       c6DEV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DEU: // global
           I64[Hp - 16] = sat_s6B0G_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c6DDP_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DDE_info" {
     block_c6DDE_info:
         const _c6DDE;
         const 3;
         const 18016601827704862;
         const S6Bb6_srt+744;
 },
 _c6DDP() //  [R1]
         { []
         }
     {offset
       c6DDP: // global
           if (R1 & 7 == 1) goto c6DEX; else goto c6DF7;
       c6DEX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6DF0; else goto c6DEZ;
       c6DF0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DEZ: // global
           I64[Hp - 40] = lvl12_s6B0I_info;
           _c6DDx::P64 = P64[Sp + 16];
           P64[Hp - 24] = _c6DDx::P64;
           I64[Hp - 16] = lvl13_s6B0J_info;
           P64[Hp] = _c6DDx::P64;
           I64[Sp - 8] = block_c6DE7_info;
           R2 = P64[Sp + 8];
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = Hp - 40;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c6DF7: // global
           R1 = Data.Semigroup.Internal.stimesList1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DDP_info" {
     block_c6DDP_info:
         const _c6DDP;
         const 4;
         const 18016601827704862;
         const S6Bb6_srt+744;
 },
 _c6DE7() //  [R1]
         { []
         }
     {offset
       c6DE7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6DF3; else goto c6DF2;
       c6DF3: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6DF2: // global
           I64[Hp - 40] = rep_s6B0L_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call rep_s6B0L_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6DE7_info" {
     block_c6DE7_info:
         const _c6DE7;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.207633448 UTC

[section ""cstring" . Data.Semigroup.Internal.$trModule4_bytes" {
     Data.Semigroup.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.209723651 UTC

[section ""data" . Data.Semigroup.Internal.$trModule3_closure" {
     Data.Semigroup.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.211512808 UTC

[section ""cstring" . Data.Semigroup.Internal.$trModule2_bytes" {
     Data.Semigroup.Internal.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,101,109,105,103,114,111,117,112,46,73,110,116,101,114,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.213301599 UTC

[section ""data" . Data.Semigroup.Internal.$trModule1_closure" {
     Data.Semigroup.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.21522858 UTC

[section ""data" . Data.Semigroup.Internal.$trModule_closure" {
     Data.Semigroup.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Semigroup.Internal.$trModule3_closure+1;
         const Data.Semigroup.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.217129233 UTC

[section ""data" . $krep_r6v1i_closure" {
     $krep_r6v1i_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.219047705 UTC

[section ""data" . $krep1_r6v1j_closure" {
     $krep1_r6v1j_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.220901833 UTC

[section ""data" . $krep2_r6v1k_closure" {
     $krep2_r6v1k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep1_r6v1j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.222819545 UTC

[section ""data" . $krep3_r6v1l_closure" {
     $krep3_r6v1l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.224650619 UTC

[section ""data" . Data.Semigroup.Internal.$tcAlt1_closure" {
     Data.Semigroup.Internal.$tcAlt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r6v1l_closure+4;
         const $krep3_r6v1l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.226463443 UTC

[section ""data" . $krep4_r6v1m_closure" {
     $krep4_r6v1m_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.228249008 UTC

[section ""data" . $krep5_r6v1n_closure" {
     $krep5_r6v1n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.230137578 UTC

[section ""data" . $krep6_r6v1o_closure" {
     $krep6_r6v1o_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep4_r6v1m_closure+2;
         const $krep5_r6v1n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.231980844 UTC

[section ""data" . Data.Semigroup.Internal.$tcDual1_closure" {
     Data.Semigroup.Internal.$tcDual1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadDual5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.234739049 UTC

[section ""data" . Data.Semigroup.Internal.$tcDual_closure" {
     Data.Semigroup.Internal.$tcDual_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcDual1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 14711416616195557841;
         const 10971851269997195248;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.236665715 UTC

[section ""data" . $krep7_r6v1p_closure" {
     $krep7_r6v1p_closure:
         const :_con_info;
         const $krep1_r6v1j_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.238926656 UTC

[section ""data" . $krep8_r6v1q_closure" {
     $krep8_r6v1q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcDual_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.240685573 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Dual1_closure" {
     Data.Semigroup.Internal.$tc'Dual1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep8_r6v1q_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.242411576 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Dual3_bytes" {
     Data.Semigroup.Internal.$tc'Dual3_bytes:
         I8[] [39,68,117,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.244125596 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Dual2_closure" {
     Data.Semigroup.Internal.$tc'Dual2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Dual3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.246005698 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Dual_closure" {
     Data.Semigroup.Internal.$tc'Dual_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Dual2_closure+1;
         const Data.Semigroup.Internal.$tc'Dual1_closure+4;
         const 15885009659242865261;
         const 15931193389986079612;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.247857367 UTC

[section ""cstring" . Data.Semigroup.Internal.$tcEndo2_bytes" {
     Data.Semigroup.Internal.$tcEndo2_bytes:
         I8[] [69,110,100,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.249583144 UTC

[section ""data" . Data.Semigroup.Internal.$tcEndo1_closure" {
     Data.Semigroup.Internal.$tcEndo1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tcEndo2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.251296633 UTC

[section ""data" . Data.Semigroup.Internal.$tcEndo_closure" {
     Data.Semigroup.Internal.$tcEndo_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcEndo1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 16820921632006328603;
         const 4981834339379479823;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.253144942 UTC

[section ""data" . $krep9_r6v1r_closure" {
     $krep9_r6v1r_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcEndo_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.254970734 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Endo1_closure" {
     Data.Semigroup.Internal.$tc'Endo1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r6v1k_closure+4;
         const $krep9_r6v1r_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.256799374 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Endo3_bytes" {
     Data.Semigroup.Internal.$tc'Endo3_bytes:
         I8[] [39,69,110,100,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.259011101 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Endo2_closure" {
     Data.Semigroup.Internal.$tc'Endo2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Endo3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.261694918 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Endo_closure" {
     Data.Semigroup.Internal.$tc'Endo_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Endo2_closure+1;
         const Data.Semigroup.Internal.$tc'Endo1_closure+4;
         const 156297185665537802;
         const 8988325904501215692;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.263501724 UTC

[section ""data" . Data.Semigroup.Internal.$tcAll1_closure" {
     Data.Semigroup.Internal.$tcAll1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadAll13_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.265328354 UTC

[section ""data" . Data.Semigroup.Internal.$tcAll_closure" {
     Data.Semigroup.Internal.$tcAll_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcAll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 14149274874874504208;
         const 8164254778609961234;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.26726457 UTC

[section ""data" . $krep10_r6v1s_closure" {
     $krep10_r6v1s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcAll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.26908987 UTC

[section ""data" . Data.Semigroup.Internal.$tc'All1_closure" {
     Data.Semigroup.Internal.$tc'All1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r6v1i_closure+1;
         const $krep10_r6v1s_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.270951411 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'All3_bytes" {
     Data.Semigroup.Internal.$tc'All3_bytes:
         I8[] [39,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.272768018 UTC

[section ""data" . Data.Semigroup.Internal.$tc'All2_closure" {
     Data.Semigroup.Internal.$tc'All2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'All3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.274652237 UTC

[section ""data" . Data.Semigroup.Internal.$tc'All_closure" {
     Data.Semigroup.Internal.$tc'All_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'All2_closure+1;
         const Data.Semigroup.Internal.$tc'All1_closure+4;
         const 1168494541548489787;
         const 10689931498683547374;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.276591379 UTC

[section ""data" . Data.Semigroup.Internal.$tcAny1_closure" {
     Data.Semigroup.Internal.$tcAny1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadAny6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.278499117 UTC

[section ""data" . Data.Semigroup.Internal.$tcAny_closure" {
     Data.Semigroup.Internal.$tcAny_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcAny1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11600287624241135668;
         const 17600231731807245316;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.280408213 UTC

[section ""data" . $krep11_r6v1t_closure" {
     $krep11_r6v1t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcAny_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.282321344 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Any1_closure" {
     Data.Semigroup.Internal.$tc'Any1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r6v1i_closure+1;
         const $krep11_r6v1t_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.284116176 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Any3_bytes" {
     Data.Semigroup.Internal.$tc'Any3_bytes:
         I8[] [39,65,110,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.285893883 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Any2_closure" {
     Data.Semigroup.Internal.$tc'Any2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Any3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.28842236 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Any_closure" {
     Data.Semigroup.Internal.$tc'Any_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Any2_closure+1;
         const Data.Semigroup.Internal.$tc'Any1_closure+4;
         const 16164188984560189013;
         const 110490866064676064;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.290457363 UTC

[section ""data" . Data.Semigroup.Internal.$tcSum1_closure" {
     Data.Semigroup.Internal.$tcSum1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadSum5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.292383917 UTC

[section ""data" . Data.Semigroup.Internal.$tcSum_closure" {
     Data.Semigroup.Internal.$tcSum_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcSum1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7521450980204740829;
         const 14029043805042477297;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.29437334 UTC

[section ""data" . $krep12_r6v1u_closure" {
     $krep12_r6v1u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcSum_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.296198941 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Sum1_closure" {
     Data.Semigroup.Internal.$tc'Sum1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep12_r6v1u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.298070126 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Sum3_bytes" {
     Data.Semigroup.Internal.$tc'Sum3_bytes:
         I8[] [39,83,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.299781077 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Sum2_closure" {
     Data.Semigroup.Internal.$tc'Sum2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Sum3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.302257873 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Sum_closure" {
     Data.Semigroup.Internal.$tc'Sum_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Sum2_closure+1;
         const Data.Semigroup.Internal.$tc'Sum1_closure+4;
         const 7144872330799658717;
         const 13465414667749873698;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.304198385 UTC

[section ""data" . Data.Semigroup.Internal.$tcProduct1_closure" {
     Data.Semigroup.Internal.$tcProduct1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadProduct5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.306091605 UTC

[section ""data" . Data.Semigroup.Internal.$tcProduct_closure" {
     Data.Semigroup.Internal.$tcProduct_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcProduct1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12271745360620305859;
         const 5747185732973757022;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.307968981 UTC

[section ""data" . $krep13_r6v1v_closure" {
     $krep13_r6v1v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcProduct_closure+1;
         const $krep7_r6v1p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.310381894 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Product1_closure" {
     Data.Semigroup.Internal.$tc'Product1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep13_r6v1v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.312147982 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Product3_bytes" {
     Data.Semigroup.Internal.$tc'Product3_bytes:
         I8[] [39,80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.313982858 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Product2_closure" {
     Data.Semigroup.Internal.$tc'Product2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Product3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.316541065 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Product_closure" {
     Data.Semigroup.Internal.$tc'Product_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Product2_closure+1;
         const Data.Semigroup.Internal.$tc'Product1_closure+4;
         const 3191278115598904989;
         const 12638872580785847167;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.318649255 UTC

[section ""data" . Data.Semigroup.Internal.$tcAlt2_closure" {
     Data.Semigroup.Internal.$tcAlt2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$fReadAlt5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.320521179 UTC

[section ""data" . Data.Semigroup.Internal.$tcAlt_closure" {
     Data.Semigroup.Internal.$tcAlt_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tcAlt2_closure+1;
         const Data.Semigroup.Internal.$tcAlt1_closure+4;
         const 7601313288863504805;
         const 2369500163797891218;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.322514723 UTC

[section ""data" . $krep14_r6v1w_closure" {
     $krep14_r6v1w_closure:
         const :_con_info;
         const $krep5_r6v1n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.324325799 UTC

[section ""data" . $krep15_r6v1x_closure" {
     $krep15_r6v1x_closure:
         const :_con_info;
         const $krep4_r6v1m_closure+2;
         const $krep14_r6v1w_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.326979166 UTC

[section ""data" . $krep16_r6v1y_closure" {
     $krep16_r6v1y_closure:
         const :_con_info;
         const $krep1_r6v1j_closure+2;
         const $krep15_r6v1x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.328770215 UTC

[section ""data" . $krep17_r6v1z_closure" {
     $krep17_r6v1z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.Internal.$tcAlt_closure+1;
         const $krep16_r6v1y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.330581828 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Alt1_closure" {
     Data.Semigroup.Internal.$tc'Alt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r6v1o_closure+3;
         const $krep17_r6v1z_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.332432575 UTC

[section ""cstring" . Data.Semigroup.Internal.$tc'Alt3_bytes" {
     Data.Semigroup.Internal.$tc'Alt3_bytes:
         I8[] [39,65,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.334199534 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Alt2_closure" {
     Data.Semigroup.Internal.$tc'Alt2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.Internal.$tc'Alt3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.336052878 UTC

[section ""data" . Data.Semigroup.Internal.$tc'Alt_closure" {
     Data.Semigroup.Internal.$tc'Alt_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.Internal.$trModule_closure+1;
         const Data.Semigroup.Internal.$tc'Alt2_closure+1;
         const Data.Semigroup.Internal.$tc'Alt1_closure+4;
         const 1436877498177162483;
         const 16937142347825669760;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:56.339183106 UTC

[section ""relreadonly" . S6Bb6_srt" {
     S6Bb6_srt:
         const Data.Semigroup.Internal.$fMonoidSum1_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Semigroup.Internal.$fMonoidSum_$cmconcat_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const GHC.Real.^_closure;
         const Data.Semigroup.Internal.$fSemigroupProduct_closure;
         const sat_s6ANw_closure;
         const Data.Semigroup.Internal.$fMonoidProduct1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_$cmconcat_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const Data.Semigroup.Internal.$fShowAlt_$cshow_closure;
         const Data.Semigroup.Internal.$fShowAlt_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.Internal.$fReadAll3_closure;
         const GHC.Read.readField_closure;
         const Data.Semigroup.Internal.$fReadAlt2_closure;
         const Data.Semigroup.Internal.$fReadAll_lexeme_closure;
         const Data.Semigroup.Internal.$fReadAlt_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Semigroup.Internal.$fReadAlt1_closure;
         const Data.Semigroup.Internal.$fReadAlt_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Semigroup.Internal.$fReadAlt_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadAlt_$creadList_closure;
         const Data.Semigroup.Internal.$fReadAlt_closure;
         const Data.Semigroup.Internal.$fShowProduct_$cshow_closure;
         const Data.Semigroup.Internal.$fShowProduct_closure;
         const Data.Semigroup.Internal.$fReadProduct2_closure;
         const Data.Semigroup.Internal.$fReadProduct_lexeme_closure;
         const Data.Semigroup.Internal.$fReadProduct1_closure;
         const Data.Semigroup.Internal.$fReadProduct_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadProduct_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadProduct_$creadList_closure;
         const Data.Semigroup.Internal.$fReadProduct_closure;
         const Data.Semigroup.Internal.$fShowSum_$cshow_closure;
         const Data.Semigroup.Internal.$fShowSum_closure;
         const Data.Semigroup.Internal.$fReadSum2_closure;
         const Data.Semigroup.Internal.$fReadSum_lexeme_closure;
         const Data.Semigroup.Internal.$fReadSum1_closure;
         const Data.Semigroup.Internal.$fReadSum_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadSum_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadSum_$creadList_closure;
         const Data.Semigroup.Internal.$fReadSum_closure;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const GHC.Show.$fShowBool2_closure;
         const GHC.Show.$fShowBool4_closure;
         const Data.Semigroup.Internal.$fShowAny3_closure;
         const Data.Semigroup.Internal.$w$cshowsPrec2_closure;
         const Data.Semigroup.Internal.$fShowAny_$cshowsPrec_closure;
         const Data.Semigroup.Internal.$fShowAll5_closure;
         const Data.Semigroup.Internal.$fShowAll6_closure;
         const Data.Semigroup.Internal.$fShowAny_$cshow_closure;
         const Data.Semigroup.Internal.$fShowAny1_closure;
         const GHC.Read.$fReadBool2_closure;
         const GHC.Read.list3_closure;
         const Data.Semigroup.Internal.$fReadAll3_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.Internal.$fReadAll7_closure;
         const Data.Semigroup.Internal.$fReadAny3_closure;
         const Data.Semigroup.Internal.$w$creadPrec1_closure;
         const Data.Semigroup.Internal.$fReadAny_lexeme_closure;
         const Data.Semigroup.Internal.$fReadAny2_closure;
         const Data.Semigroup.Internal.$fReadAny_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadAny1_closure;
         const GHC.Read.list_closure;
         const Data.Semigroup.Internal.$fReadAny_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadAny7_closure;
         const Data.Semigroup.Internal.$fShowAll3_closure;
         const Data.Semigroup.Internal.$w$cshowsPrec_closure;
         const Data.Semigroup.Internal.$fShowAll_$cshowsPrec_closure;
         const Data.Semigroup.Internal.$fShowAll_$cshow_closure;
         const Data.Semigroup.Internal.$fShowAll1_closure;
         const Data.Semigroup.Internal.$fReadAll8_closure;
         const Data.Semigroup.Internal.$w$creadPrec_closure;
         const Data.Semigroup.Internal.$fReadAll_lexeme1_closure;
         const Data.Semigroup.Internal.$fReadAll2_closure;
         const Data.Semigroup.Internal.$fReadAll_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadAll1_closure;
         const Data.Semigroup.Internal.$fReadAll_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadAll14_closure;
         const Data.Semigroup.Internal.$fReadAll4_closure;
         const Data.Semigroup.Internal.$fShowDual_$cshow_closure;
         const Data.Semigroup.Internal.$fShowDual_closure;
         const Data.Semigroup.Internal.$fReadDual2_closure;
         const Data.Semigroup.Internal.$fReadDual_lexeme_closure;
         const Data.Semigroup.Internal.$fReadDual1_closure;
         const Data.Semigroup.Internal.$fReadDual_$creadsPrec_closure;
         const Data.Semigroup.Internal.$fReadDual_$creadListPrec_closure;
         const Data.Semigroup.Internal.$fReadDual_$creadList_closure;
         const Data.Semigroup.Internal.$fReadDual_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Semigroup.Internal.$fMonoidSum1_closure;
         const Data.Semigroup.Internal.stimesIdempotent_closure;
         const Data.Semigroup.Internal.stimesIdempotent1_closure;
         const Data.Semigroup.Internal.stimesIdempotentMonoid_closure;
         const Data.Semigroup.Internal.stimesIdempotentMonoid1_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const sat_s6AY8_closure;
         const lvl7_r6v1d_closure;
         const Data.Semigroup.Internal.$fMonoidProduct1_closure;
         const GHC.Real.even_closure;
         const Data.Semigroup.Internal.stimesMonoid_closure;
         const lvl6_r6v1c_closure;
         const Data.Semigroup.Internal.$fSemigroupAlt_$cstimes_closure;
         const Data.Semigroup.Internal.$fSemigroupAlt_closure;
         const Data.Semigroup.Internal.$fMonoidAlt_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const lvl9_r6v1f_closure;
         const Data.Semigroup.Internal.stimesMaybe_closure;
         const Data.Semigroup.Internal.stimesMaybe1_closure;
         const Data.Semigroup.Internal.stimesList_closure;
         const Data.Semigroup.Internal.stimesList1_closure;
 }]

