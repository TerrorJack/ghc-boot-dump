
==================== Output Cmm ====================
2018-03-16 16:02:40.19846571 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:40.199297431 UTC

[section ""data" . Data.Typeable.typeOf_closure" {
     Data.Typeable.typeOf_closure:
         const Data.Typeable.typeOf_info;
 },
 Data.Typeable.typeOf_entry() //  [R2]
         { info_tbl: [(c7ngN,
                       label: Data.Typeable.typeOf_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ngN: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.200109705 UTC

[section ""data" . Data.Typeable.typeRep_closure" {
     Data.Typeable.typeRep_closure:
         const Data.Typeable.typeRep_info;
 },
 Data.Typeable.typeRep_entry() //  [R2, R3]
         { info_tbl: [(c7ngU,
                       label: Data.Typeable.typeRep_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ngU: // global
           R3 = R3;
           R2 = R2;
           call Data.Typeable.Internal.someTypeRep_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.201217792 UTC

[section ""data" . Data.Typeable.cast_closure" {
     Data.Typeable.cast_closure:
         const Data.Typeable.cast_info;
         const 0;
 },
 Data.Typeable.cast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nh7,
                       label: Data.Typeable.cast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nh7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nh8; else goto c7nh9;
       c7nh8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.cast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nh9: // global
           I64[Sp - 16] = block_c7nh1_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nh1() //  [R1]
         { info_tbl: [(c7nh1,
                       label: block_c7nh1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nh1: // global
           if (R1 & 7 == 1) goto c7nh4; else goto c7nh5;
       c7nh4: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nh5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nhi; else goto c7nhh;
       c7nhi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nhh: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.202460522 UTC

[section ""data" . Data.Typeable.eqT1_closure" {
     Data.Typeable.eqT1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.203300822 UTC

[section ""data" . Data.Typeable.eqT_closure" {
     Data.Typeable.eqT_closure:
         const Data.Typeable.eqT_info;
         const 0;
 },
 Data.Typeable.eqT_entry() //  [R2, R3]
         { info_tbl: [(c7nhu,
                       label: Data.Typeable.eqT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nhu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nhv; else goto c7nhw;
       c7nhv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.eqT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nhw: // global
           I64[Sp - 8] = block_c7nho_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nho() //  [R1]
         { info_tbl: [(c7nho,
                       label: block_c7nho_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nho: // global
           if (R1 & 7 == 1) goto c7nhr; else goto c7nhs;
       c7nhr: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nhs: // global
           R1 = Data.Typeable.eqT1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.204640571 UTC

[section ""data" . Data.Typeable.gcast_closure" {
     Data.Typeable.gcast_closure:
         const Data.Typeable.gcast_info;
         const 0;
 },
 Data.Typeable.gcast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nhN,
                       label: Data.Typeable.gcast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nhN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nhO; else goto c7nhP;
       c7nhO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nhP: // global
           I64[Sp - 16] = block_c7nhH_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nhH() //  [R1]
         { info_tbl: [(c7nhH,
                       label: block_c7nhH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nhH: // global
           if (R1 & 7 == 1) goto c7nhK; else goto c7nhL;
       c7nhK: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nhL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nhY; else goto c7nhX;
       c7nhY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nhX: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.206113019 UTC

[section ""data" . Data.Typeable.gcast1_closure" {
     Data.Typeable.gcast1_closure:
         const Data.Typeable.gcast1_info;
         const 0;
 },
 Data.Typeable.gcast1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7ni9,
                       label: Data.Typeable.gcast1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ni9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nia; else goto c7nib;
       c7nia: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nib: // global
           I64[Sp - 16] = block_c7ni3_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ni3() //  [R1]
         { info_tbl: [(c7ni3,
                       label: block_c7ni3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ni3: // global
           if (R1 & 7 == 1) goto c7ni6; else goto c7ni7;
       c7ni6: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ni7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nik; else goto c7nij;
       c7nik: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nij: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.207641454 UTC

[section ""data" . Data.Typeable.gcast2_closure" {
     Data.Typeable.gcast2_closure:
         const Data.Typeable.gcast2_info;
         const 0;
 },
 Data.Typeable.gcast2_entry() //  [R2, R3, R4]
         { info_tbl: [(c7niv,
                       label: Data.Typeable.gcast2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7niv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7niw; else goto c7nix;
       c7niw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nix: // global
           I64[Sp - 16] = block_c7nip_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nip() //  [R1]
         { info_tbl: [(c7nip,
                       label: block_c7nip_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nip: // global
           if (R1 & 7 == 1) goto c7nis; else goto c7nit;
       c7nis: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nit: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7niG; else goto c7niF;
       c7niG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7niF: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.209399844 UTC

[section ""data" . Data.Typeable.mkFunTy1_closure" {
     Data.Typeable.mkFunTy1_closure:
         const Data.Typeable.mkFunTy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy1_entry() //  [R1]
         { info_tbl: [(c7niX,
                       label: Data.Typeable.mkFunTy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7niX: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c7niY; else goto c7niZ;
       c7niY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7niZ: // global
           (_c7niK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7niK::I64 == 0) goto c7niM; else goto c7niL;
       c7niM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7niL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7niK::I64;
           I64[Sp - 24] = block_c7niN_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7niN() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7niN,
                       label: block_c7niN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7niN: // global
           I64[Sp - 40] = block_c7niR_info;
           R6 = 0;
           _s7nbn::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s7nbm::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s7nbl::P64 = R3;
           R3 = 5595830777317938557;
           _s7nbk::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s7nbk::I64;
           P64[Sp - 24] = _s7nbl::P64;
           P64[Sp - 16] = _s7nbm::P64;
           P64[Sp - 8] = _s7nbn::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7niR() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7niR,
                       label: block_c7niR_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7niR: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7niS() args: 0, res: 0, upd: 0;
     }
 },
 _c7niS() //  []
         { info_tbl: [(c7niS,
                       label: block_c7niS_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7niS: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7nj3; else goto c7nj2;
       c7nj3: // global
           HpAlloc = 96;
           I64[Sp] = block_c7niS_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7nj2: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.219251831 UTC

[section ""data" . Data.Typeable.funResultTy_closure" {
     Data.Typeable.funResultTy_closure:
         const Data.Typeable.funResultTy_info;
         const 0;
 },
 Data.Typeable.funResultTy_entry() //  [R2, R3]
         { info_tbl: [(c7njd,
                       label: Data.Typeable.funResultTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7njd: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7njh; else goto c7nji;
       c7njh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.funResultTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nji: // global
           I64[Sp - 16] = block_c7nja_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nsE; else goto c7njb;
       u7nsE: // global
           call _c7nja(R1) args: 0, res: 0, upd: 0;
       c7njb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nja() //  [R1]
         { info_tbl: [(c7nja,
                       label: block_c7nja_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nja: // global
           I64[Sp] = block_c7njg_info;
           _s7nbz::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7nbz::P64;
           if (R1 & 7 != 0) goto u7nsD; else goto c7njk;
       u7nsD: // global
           call _c7njg(R1) args: 0, res: 0, upd: 0;
       c7njk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7njg() //  [R1]
         { info_tbl: [(c7njg,
                       label: block_c7njg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7njg: // global
           I64[Sp - 8] = block_c7njq_info;
           _s7nbB::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7nbB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nsF; else goto c7nlO;
       u7nsF: // global
           call _c7njq(R1) args: 0, res: 0, upd: 0;
       c7nlO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7njq() //  [R1]
         { info_tbl: [(c7njq,
                       label: block_c7njq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7njq: // global
           _c7nqU::P64 = R1 & 7;
           if (_c7nqU::P64 < 3) goto u7nrA; else goto u7nrB;
       u7nrA: // global
           if (_c7nqU::P64 < 2) goto c7nlV; else goto c7nor;
       c7nlV: // global
           I64[Sp] = block_c7nlS_info;
           R1 = Data.Typeable.mkFunTy1_closure;
           if (R1 & 7 != 0) goto u7nsG; else goto c7nlW;
       u7nsG: // global
           call _c7nlS(R1) args: 0, res: 0, upd: 0;
       c7nlW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nor: // global
           I64[Sp - 8] = block_c7nn1_info;
           _s7nd4::P64 = P64[R1 + 22];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7nd4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nsH; else goto c7nos;
       u7nsH: // global
           call _c7nn1(R1) args: 0, res: 0, upd: 0;
       c7nos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7nrB: // global
           if (_c7nqU::P64 < 4) goto c7nqh; else goto c7nqH;
       c7nqh: // global
           I64[Sp - 8] = block_c7noR_info;
           _s7ndU::P64 = P64[R1 + 21];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7ndU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nsI; else goto c7nqi;
       u7nsI: // global
           call _c7noR(R1) args: 0, res: 0, upd: 0;
       c7nqi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nqH: // global
           I64[Sp] = block_c7nqF_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = Data.Typeable.mkFunTy1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nlS() //  [R1]
         { info_tbl: [(c7nlS,
                       label: block_c7nlS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nlS: // global
           _c7nrp::P64 = R1 & 7;
           if (_c7nrp::P64 < 3) goto u7nrG; else goto c7nmD;
       u7nrG: // global
           if (_c7nrp::P64 < 2) goto c7nm3; else goto c7nmf;
       c7nm3: // global
           I64[Sp] = block_c7nm0_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nsZ; else goto c7nm4;
       u7nsZ: // global
           call _c7nm0(R1) args: 0, res: 0, upd: 0;
       c7nm4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nmf: // global
           I64[Sp - 16] = block_c7nmd_info;
           _s7ncE::I64 = I64[R1 + 30];
           _s7ncF::I64 = I64[R1 + 38];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7ncF::I64;
           I64[Sp] = _s7ncE::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nt0; else goto c7nmg;
       u7nt0: // global
           call _c7nmd(R1) args: 0, res: 0, upd: 0;
       c7nmg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nmD: // global
           I64[Sp - 16] = block_c7nmB_info;
           _s7ncP::I64 = I64[R1 + 29];
           _s7ncQ::I64 = I64[R1 + 37];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7ncQ::I64;
           I64[Sp] = _s7ncP::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nt1; else goto c7nmE;
       u7nt1: // global
           call _c7nmB(R1) args: 0, res: 0, upd: 0;
       c7nmE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nm0() //  [R1]
         { info_tbl: [(c7nm0,
                       label: block_c7nm0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nm0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nma; else goto c7nm9;
       c7nma: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nm9: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7nbC() args: 0, res: 0, upd: 0;
     }
 },
 _c7nmd() //  [R1]
         { info_tbl: [(c7nmd,
                       label: block_c7nmd_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nmd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nmm; else goto c7nml;
       c7nmm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nml: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nmy; else goto u7nrO;
       c7nmy: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nmx; else goto u7nrP;
       c7nmx: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nrP: // global
           Sp = Sp + 40;
           goto u7nt4;
       u7nrO: // global
           Sp = Sp + 40;
           goto u7nt4;
       u7nt4: // global
           call _c7nqe() args: 0, res: 0, upd: 0;
     }
 },
 _c7nmB() //  [R1]
         { info_tbl: [(c7nmB,
                       label: block_c7nmB_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nmB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nmK; else goto c7nmJ;
       c7nmK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nmJ: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nmW; else goto u7nrR;
       c7nmW: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nmV; else goto u7nrS;
       c7nmV: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nrS: // global
           Sp = Sp + 40;
           goto u7nt7;
       u7nrR: // global
           Sp = Sp + 40;
           goto u7nt7;
       u7nt7: // global
           call _c7nqe() args: 0, res: 0, upd: 0;
     }
 },
 _c7nn1() //  [R1]
         { info_tbl: [(c7nn1,
                       label: block_c7nn1_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nn1: // global
           _c7nrb::P64 = R1 & 7;
           if (_c7nrb::P64 < 3) goto u7nrH; else goto c7noM;
       u7nrH: // global
           if (_c7nrb::P64 < 2) goto c7noz; else goto c7noI;
       c7noz: // global
           I64[Sp] = block_c7now_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nt9; else goto c7noA;
       u7nt9: // global
           call _c7now(R1) args: 0, res: 0, upd: 0;
       c7noA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7noI: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7ntb;
       c7noM: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7ntb;
       u7ntb: // global
           call _s7nd5() args: 0, res: 0, upd: 0;
     }
 },
 _c7now() //  [R1]
         { info_tbl: [(c7now,
                       label: block_c7now_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7now: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7nd5() args: 0, res: 0, upd: 0;
     }
 },
 _s7nd5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nd5: // global
           I64[Sp - 8] = block_c7nn6_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ntL; else goto c7nn8;
       u7ntL: // global
           call _c7nn6(R1) args: 0, res: 0, upd: 0;
       c7nn8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nn6() //  [R1]
         { info_tbl: [(c7nn6,
                       label: block_c7nn6_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nn6: // global
           _s7nd6::I64 = I64[Sp + 16];
           _s7nd7::I64 = I64[Sp + 8];
           _c7nrc::P64 = R1 & 7;
           if (_c7nrc::P64 < 3) goto u7nrI; else goto u7nrJ;
       u7nrI: // global
           if (_c7nrc::P64 < 2) goto c7nnf; else goto c7nnz;
       c7nnf: // global
           I64[Sp] = block_c7nnc_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7ntc; else goto c7nng;
       u7ntc: // global
           call _c7nnc(R1) args: 0, res: 0, upd: 0;
       c7nng: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nnz: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7noe; else goto c7nnD;
       c7nnD: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 30]) goto c7nnQ; else goto u7ns0;
       c7nnQ: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 38]) goto c7nnP; else goto u7ns1;
       c7nnP: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ntl;
       u7ns1: // global
           Sp = Sp + 48;
           goto u7ntk;
       u7ns0: // global
           Sp = Sp + 48;
           goto u7ntk;
       u7nrJ: // global
           if (_c7nrc::P64 < 4) goto c7nnR; else goto c7no9;
       c7nnR: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7noe; else goto c7nnV;
       c7nnV: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 29]) goto c7no8; else goto u7ns3;
       c7no8: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 37]) goto c7no7; else goto u7ns4;
       c7no7: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ntl;
       u7ns4: // global
           Sp = Sp + 48;
           goto u7ntk;
       u7ns3: // global
           Sp = Sp + 48;
           goto u7ntk;
       c7no9: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7noe; else goto c7nod;
       c7noe: // global
           HpAlloc = 16;
           R1 = _s7nd8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nod: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 20]) goto c7noq; else goto u7ns6;
       c7noq: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 28]) goto c7nop; else goto u7ns7;
       c7nop: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ntl;
       u7ntl: // global
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7ns7: // global
           Sp = Sp + 48;
           goto u7ntk;
       u7ns6: // global
           Sp = Sp + 48;
           goto u7ntk;
       u7ntk: // global
           call _c7nqe() args: 0, res: 0, upd: 0;
     }
 },
 _c7nnc() //  [R1]
         { info_tbl: [(c7nnc,
                       label: block_c7nnc_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nnc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nnm; else goto c7nnl;
       c7nnm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nnl: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nny; else goto u7nrX;
       c7nny: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nnx; else goto u7nrY;
       c7nnx: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nrY: // global
           Sp = Sp + 48;
           goto u7ntn;
       u7nrX: // global
           Sp = Sp + 48;
           goto u7ntn;
       u7ntn: // global
           call _c7nqe() args: 0, res: 0, upd: 0;
     }
 },
 _c7noR() //  [R1]
         { info_tbl: [(c7noR,
                       label: block_c7noR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7noR: // global
           _c7nqX::P64 = R1 & 7;
           if (_c7nqX::P64 < 3) goto u7nrK; else goto c7nqC;
       u7nrK: // global
           if (_c7nqX::P64 < 2) goto c7nqp; else goto c7nqy;
       c7nqp: // global
           I64[Sp] = block_c7nqm_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7ntq; else goto c7nqq;
       u7ntq: // global
           call _c7nqm(R1) args: 0, res: 0, upd: 0;
       c7nqq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nqy: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7nts;
       c7nqC: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7nts;
       u7nts: // global
           call _s7ndV() args: 0, res: 0, upd: 0;
     }
 },
 _c7nqm() //  [R1]
         { info_tbl: [(c7nqm,
                       label: block_c7nqm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nqm: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7ndV() args: 0, res: 0, upd: 0;
     }
 },
 _s7ndV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7ndV: // global
           I64[Sp - 8] = block_c7noW_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ntM; else goto c7noY;
       u7ntM: // global
           call _c7noW(R1) args: 0, res: 0, upd: 0;
       c7noY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7noW() //  [R1]
         { info_tbl: [(c7noW,
                       label: block_c7noW_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7noW: // global
           _s7ndW::I64 = I64[Sp + 16];
           _s7ndX::I64 = I64[Sp + 8];
           _c7nqY::P64 = R1 & 7;
           if (_c7nqY::P64 < 3) goto u7nrL; else goto u7nrM;
       u7nrL: // global
           if (_c7nqY::P64 < 2) goto c7np5; else goto c7npp;
       c7np5: // global
           I64[Sp] = block_c7np2_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7ntt; else goto c7np6;
       u7ntt: // global
           call _c7np2(R1) args: 0, res: 0, upd: 0;
       c7np6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7npp: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nq4; else goto c7npt;
       c7npt: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 30]) goto c7npG; else goto u7nsf;
       c7npG: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 38]) goto c7npF; else goto u7nsg;
       c7npF: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ntC;
       u7nsg: // global
           Sp = Sp + 48;
           goto u7ntB;
       u7nsf: // global
           Sp = Sp + 48;
           goto u7ntB;
       u7nrM: // global
           if (_c7nqY::P64 < 4) goto c7npH; else goto c7npZ;
       c7npH: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nq4; else goto c7npL;
       c7npL: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 29]) goto c7npY; else goto u7nsi;
       c7npY: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 37]) goto c7npX; else goto u7nsj;
       c7npX: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ntC;
       u7nsj: // global
           Sp = Sp + 48;
           goto u7ntB;
       u7nsi: // global
           Sp = Sp + 48;
           goto u7ntB;
       c7npZ: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nq4; else goto c7nq3;
       c7nq4: // global
           HpAlloc = 16;
           R1 = _s7ndY::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nq3: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 20]) goto c7nqg; else goto u7nsl;
       c7nqg: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 28]) goto c7nqf; else goto u7nsm;
       c7nqf: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ntC;
       u7ntC: // global
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nsm: // global
           Sp = Sp + 48;
           goto u7ntB;
       u7nsl: // global
           Sp = Sp + 48;
           goto u7ntB;
       u7ntB: // global
           call _c7nqe() args: 0, res: 0, upd: 0;
     }
 },
 _c7np2() //  [R1]
         { info_tbl: [(c7np2,
                       label: block_c7np2_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7np2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7npc; else goto c7npb;
       c7npc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7npb: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7npo; else goto u7nsc;
       c7npo: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7npn; else goto u7nsd;
       c7npn: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nsd: // global
           Sp = Sp + 48;
           goto u7ntE;
       u7nsc: // global
           Sp = Sp + 48;
           goto u7ntE;
       u7ntE: // global
           call _c7nqe() args: 0, res: 0, upd: 0;
     }
 },
 _c7nqe() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nqe: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7nqF() //  [R1]
         { info_tbl: [(c7nqF,
                       label: block_c7nqF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nqF: // global
           if (R1 & 7 == 1) goto u7nso; else goto c7nqO;
       u7nso: // global
           Sp = Sp + 24;
           call _c7nqN() args: 0, res: 0, upd: 0;
       c7nqO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nqT; else goto c7nqS;
       c7nqT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nqS: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7nbC() args: 0, res: 0, upd: 0;
     }
 },
 _s7nbC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nbC: // global
           I64[Sp - 8] = block_c7njv_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ntJ; else goto c7njx;
       u7ntJ: // global
           call _c7njv(R1) args: 0, res: 0, upd: 0;
       c7njx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7njv() //  [R1]
         { info_tbl: [(c7njv,
                       label: block_c7njv_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7njv: // global
           if (R1 & 7 == 4) goto c7nlo; else goto u7nsq;
       c7nlo: // global
           I64[Sp] = block_c7njI_info;
           _s7nbI::P64 = P64[R1 + 12];
           R1 = P64[R1 + 4];
           P64[Sp + 16] = _s7nbI::P64;
           if (R1 & 7 != 0) goto u7nsJ; else goto c7nlp;
       u7nsJ: // global
           call _c7njI(R1) args: 0, res: 0, upd: 0;
       c7nlp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7nsq: // global
           Sp = Sp + 24;
           call _c7nqN() args: 0, res: 0, upd: 0;
     }
 },
 _c7njI() //  [R1]
         { info_tbl: [(c7njI,
                       label: block_c7njI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7njI: // global
           _c7nry::P64 = R1 & 7;
           if (_c7nry::P64 < 3) goto u7nrC; else goto u7nrD;
       u7nrC: // global
           if (_c7nry::P64 < 2) goto c7nlw; else goto c7nlF;
       c7nlw: // global
           I64[Sp] = block_c7nlt_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nsL; else goto c7nlx;
       u7nsL: // global
           call _c7nlt(R1) args: 0, res: 0, upd: 0;
       c7nlx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nlF: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7nsO;
       u7nrD: // global
           if (_c7nry::P64 < 4) goto c7nlJ; else goto c7nlN;
       c7nlJ: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7nsO;
       c7nlN: // global
           I64[Sp] = I64[R1 + 20];
           I64[Sp - 8] = I64[R1 + 28];
           Sp = Sp - 8;
           goto u7nsO;
       u7nsO: // global
           call _s7nbJ() args: 0, res: 0, upd: 0;
     }
 },
 _c7nlt() //  [R1]
         { info_tbl: [(c7nlt,
                       label: block_c7nlt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nlt: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7nbJ() args: 0, res: 0, upd: 0;
     }
 },
 _s7nbJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nbJ: // global
           I64[Sp - 8] = block_c7njN_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ntK; else goto c7njP;
       u7ntK: // global
           call _c7njN(R1) args: 0, res: 0, upd: 0;
       c7njP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7njN() //  [R1]
         { info_tbl: [(c7njN,
                       label: block_c7njN_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7njN: // global
           _s7nbI::P64 = P64[Sp + 32];
           _s7nbK::I64 = I64[Sp + 16];
           _s7nbL::I64 = I64[Sp + 8];
           _c7nrz::P64 = R1 & 7;
           if (_c7nrz::P64 < 3) goto u7nrE; else goto u7nrF;
       u7nrE: // global
           if (_c7nrz::P64 < 2) goto c7njW; else goto c7nkk;
       c7njW: // global
           I64[Sp] = block_c7njT_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nsP; else goto c7njX;
       u7nsP: // global
           call _c7njT(R1) args: 0, res: 0, upd: 0;
       c7njX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nkk: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nl7; else goto c7nko;
       c7nko: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 30]) goto c7nkF; else goto u7nsx;
       c7nkF: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 38]) goto c7nkE; else goto u7nsy;
       c7nkE: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nsy: // global
           Sp = Sp + 40;
           goto u7nsV;
       u7nsx: // global
           Sp = Sp + 40;
           goto u7nsV;
       u7nrF: // global
           if (_c7nrz::P64 < 4) goto c7nkG; else goto c7nl2;
       c7nkG: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nl7; else goto c7nkK;
       c7nkK: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 29]) goto c7nl1; else goto u7nsz;
       c7nl1: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 37]) goto c7nl0; else goto u7nsA;
       c7nl0: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nsA: // global
           Sp = Sp + 40;
           goto u7nsV;
       u7nsz: // global
           Sp = Sp + 40;
           goto u7nsV;
       c7nl2: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nl7; else goto c7nl6;
       c7nl7: // global
           HpAlloc = 32;
           R1 = _s7nbM::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nl6: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 20]) goto c7nln; else goto u7nsB;
       c7nln: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 28]) goto c7nlm; else goto u7nsC;
       c7nlm: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nsC: // global
           Sp = Sp + 40;
           goto u7nsV;
       u7nsB: // global
           Sp = Sp + 40;
           goto u7nsV;
       u7nsV: // global
           call _c7nlh() args: 0, res: 0, upd: 0;
     }
 },
 _c7njT() //  [R1]
         { info_tbl: [(c7njT,
                       label: block_c7njT_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7njT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7nk3; else goto c7nk2;
       c7nk3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nk2: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nkj; else goto u7nsv;
       c7nkj: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nki; else goto u7nsw;
       c7nki: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nsw: // global
           Sp = Sp + 40;
           goto u7nsX;
       u7nsv: // global
           Sp = Sp + 40;
           goto u7nsX;
       u7nsX: // global
           call _c7nlh() args: 0, res: 0, upd: 0;
     }
 },
 _c7nlh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nlh: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7nqN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nqN: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.230004635 UTC

[section ""cstring" . Data.Typeable.mkFunTy16_bytes" {
     Data.Typeable.mkFunTy16_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.230921463 UTC

[section ""data" . Data.Typeable.mkFunTy15_closure" {
     Data.Typeable.mkFunTy15_closure:
         const Data.Typeable.mkFunTy15_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy15_entry() //  [R1]
         { info_tbl: [(c7ntT,
                       label: Data.Typeable.mkFunTy15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ntT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ntU; else goto c7ntV;
       c7ntU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ntV: // global
           (_c7ntQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ntQ::I64 == 0) goto c7ntS; else goto c7ntR;
       c7ntS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ntR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ntQ::I64;
           R2 = Data.Typeable.mkFunTy16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.231924097 UTC

[section ""cstring" . Data.Typeable.$trModule4_bytes" {
     Data.Typeable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.232643907 UTC

[section ""data" . Data.Typeable.mkFunTy14_closure" {
     Data.Typeable.mkFunTy14_closure:
         const Data.Typeable.mkFunTy14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy14_entry() //  [R1]
         { info_tbl: [(c7nu2,
                       label: Data.Typeable.mkFunTy14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nu2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nu3; else goto c7nu4;
       c7nu3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nu4: // global
           (_c7ntZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ntZ::I64 == 0) goto c7nu1; else goto c7nu0;
       c7nu1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nu0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ntZ::I64;
           R2 = Data.Typeable.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.233621338 UTC

[section ""cstring" . Data.Typeable.$trModule2_bytes" {
     Data.Typeable.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.234404708 UTC

[section ""data" . Data.Typeable.mkFunTy13_closure" {
     Data.Typeable.mkFunTy13_closure:
         const Data.Typeable.mkFunTy13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy13_entry() //  [R1]
         { info_tbl: [(c7nub,
                       label: Data.Typeable.mkFunTy13_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nub: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nuc; else goto c7nud;
       c7nuc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nud: // global
           (_c7nu8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7nu8::I64 == 0) goto c7nua; else goto c7nu9;
       c7nua: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nu9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7nu8::I64;
           R2 = Data.Typeable.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.235333964 UTC

[section ""cstring" . Data.Typeable.mkFunTy12_bytes" {
     Data.Typeable.mkFunTy12_bytes:
         I8[] [46,47,68,97,116,97,47,84,121,112,101,97,98,108,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.236054592 UTC

[section ""data" . Data.Typeable.mkFunTy11_closure" {
     Data.Typeable.mkFunTy11_closure:
         const Data.Typeable.mkFunTy11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy11_entry() //  [R1]
         { info_tbl: [(c7nuk,
                       label: Data.Typeable.mkFunTy11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nuk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nul; else goto c7num;
       c7nul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7num: // global
           (_c7nuh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7nuh::I64 == 0) goto c7nuj; else goto c7nui;
       c7nuj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nui: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7nuh::I64;
           R2 = Data.Typeable.mkFunTy12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.236977053 UTC

[section ""data" . Data.Typeable.mkFunTy10_closure" {
     Data.Typeable.mkFunTy10_closure:
         const GHC.Types.I#_con_info;
         const 171;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.237644699 UTC

[section ""data" . Data.Typeable.mkFunTy9_closure" {
     Data.Typeable.mkFunTy9_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.238247762 UTC

[section ""data" . Data.Typeable.mkFunTy8_closure" {
     Data.Typeable.mkFunTy8_closure:
         const GHC.Types.I#_con_info;
         const 172;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.240590489 UTC

[section ""data" . Data.Typeable.mkFunTy7_closure" {
     Data.Typeable.mkFunTy7_closure:
         const GHC.Types.I#_con_info;
         const 55;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.241163858 UTC

[section ""data" . Data.Typeable.mkFunTy6_closure" {
     Data.Typeable.mkFunTy6_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const Data.Typeable.mkFunTy14_closure;
         const Data.Typeable.mkFunTy13_closure;
         const Data.Typeable.mkFunTy11_closure;
         const Data.Typeable.mkFunTy10_closure+1;
         const Data.Typeable.mkFunTy9_closure+1;
         const Data.Typeable.mkFunTy8_closure+1;
         const Data.Typeable.mkFunTy7_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.241856563 UTC

[section ""data" . Data.Typeable.mkFunTy5_closure" {
     Data.Typeable.mkFunTy5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const Data.Typeable.mkFunTy15_closure;
         const Data.Typeable.mkFunTy6_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.242399565 UTC

[section ""cstring" . Data.Typeable.mkFunTy4_bytes" {
     Data.Typeable.mkFunTy4_bytes:
         I8[] [109,107,70,117,110,84,121,58,32,65,116,116,101,109,112,116,101,100,32,116,111,32,99,111,110,115,116,114,117,99,116,32,102,117,110,99,116,105,111,110,32,116,121,112,101,32,102,114,111,109,32,110,111,110,45,108,105,102,116,101,100,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.242912433 UTC

[section ""cstring" . Data.Typeable.mkFunTy3_bytes" {
     Data.Typeable.mkFunTy3_bytes:
         I8[] [116,121,112,101,58,32,97,114,103,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.243423632 UTC

[section ""cstring" . Data.Typeable.mkFunTy2_bytes" {
     Data.Typeable.mkFunTy2_bytes:
         I8[] [44,32,114,101,115,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.247571937 UTC

[section ""data" . Data.Typeable.mkFunTy_closure" {
     Data.Typeable.mkFunTy_closure:
         const Data.Typeable.mkFunTy_info;
         const 0;
 },
 sat_s7neV_entry() //  [R1]
         { info_tbl: [(c7nuW,
                       label: sat_s7neV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nuW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7nuX; else goto c7nuY;
       c7nuX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nuY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s7neW_entry() //  [R1]
         { info_tbl: [(c7nuZ,
                       label: sat_s7neW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nuZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7nv3; else goto c7nv2;
       c7nv3: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nv2: // global
           _s7neR::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7neV_info;
           P64[Hp] = _s7neR::P64;
           R3 = Hp - 16;
           R2 = Data.Typeable.mkFunTy2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7neX_entry() //  [R1]
         { info_tbl: [(c7nv6,
                       label: sat_s7neX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nv6: // global
           _s7neX::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c7nv7; else goto c7nv8;
       c7nv8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7nva; else goto c7nv9;
       c7nva: // global
           HpAlloc = 24;
           goto c7nv7;
       c7nv7: // global
           R1 = _s7neX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nv9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7neX::P64;
           _s7neP::P64 = P64[_s7neX::P64 + 16];
           _s7neR::P64 = P64[_s7neX::P64 + 24];
           I64[Hp - 16] = sat_s7neW_info;
           P64[Hp] = _s7neR::P64;
           I64[Sp - 32] = block_c7nv4_info;
           R3 = _s7neP::P64;
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = GHC.Types.[]_closure+1;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7nv4() //  [R1]
         { info_tbl: [(c7nv4,
                       label: block_c7nv4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nv4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7neY_entry() //  [R1]
         { info_tbl: [(c7nve,
                       label: sat_s7neY_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nve: // global
           _s7neY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7nvf; else goto c7nvg;
       c7nvg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7nvi; else goto c7nvh;
       c7nvi: // global
           HpAlloc = 32;
           goto c7nvf;
       c7nvf: // global
           R1 = _s7neY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nvh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7neY::P64;
           _s7neP::P64 = P64[_s7neY::P64 + 16];
           _s7neR::P64 = P64[_s7neY::P64 + 24];
           I64[Hp - 24] = sat_s7neX_info;
           P64[Hp - 8] = _s7neP::P64;
           P64[Hp] = _s7neR::P64;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7nfx_entry() //  [R1]
         { info_tbl: [(c7nvG,
                       label: sat_s7nfx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nvG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7nvH; else goto c7nvI;
       c7nvH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nvI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7nvx_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7nw6; else goto c7nvy;
       u7nw6: // global
           call _c7nvx(R1) args: 0, res: 0, upd: 0;
       c7nvy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7nvx() //  [R1]
         { info_tbl: [(c7nvx,
                       label: block_c7nvx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nvx: // global
           _c7nvF::P64 = R1 & 7;
           if (_c7nvF::P64 < 3) goto u7nw4; else goto u7nw5;
       u7nw4: // global
           if (_c7nvF::P64 < 2) goto c7nvB; else goto c7nvC;
       c7nvB: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7nvC: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nw3; else goto c7nvQ;
       c7nvQ: // global
           _s7nfj::I64 = I64[_s7nfi::P64 + 30];
           _s7nfk::I64 = I64[_s7nfi::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfj::I64;
           I64[Hp] = _s7nfk::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7nw5: // global
           if (_c7nvF::P64 < 4) goto c7nvD; else goto c7nvE;
       c7nvD: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nw3; else goto c7nvW;
       c7nvW: // global
           _s7nfo::I64 = I64[_s7nfi::P64 + 29];
           _s7nfp::I64 = I64[_s7nfi::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfo::I64;
           I64[Hp] = _s7nfp::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7nvE: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nw3; else goto c7nw2;
       c7nw3: // global
           HpAlloc = 24;
           R1 = _s7nfi::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7nw2: // global
           _s7nft::I64 = I64[_s7nfi::P64 + 20];
           _s7nfu::I64 = I64[_s7nfi::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nft::I64;
           I64[Hp] = _s7nfu::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7nfh_entry() //  [R1]
         { info_tbl: [(c7nwl,
                       label: sat_s7nfh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nwl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7nwm; else goto c7nwn;
       c7nwm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nwn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7nwc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7nwL; else goto c7nwd;
       u7nwL: // global
           call _c7nwc(R1) args: 0, res: 0, upd: 0;
       c7nwd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7nwc() //  [R1]
         { info_tbl: [(c7nwc,
                       label: block_c7nwc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nwc: // global
           _c7nwk::P64 = R1 & 7;
           if (_c7nwk::P64 < 3) goto u7nwJ; else goto u7nwK;
       u7nwJ: // global
           if (_c7nwk::P64 < 2) goto c7nwg; else goto c7nwh;
       c7nwg: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7nwh: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nwI; else goto c7nwv;
       c7nwv: // global
           _s7nf3::I64 = I64[_s7nf2::P64 + 30];
           _s7nf4::I64 = I64[_s7nf2::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nf3::I64;
           I64[Hp] = _s7nf4::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7nwK: // global
           if (_c7nwk::P64 < 4) goto c7nwi; else goto c7nwj;
       c7nwi: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nwI; else goto c7nwB;
       c7nwB: // global
           _s7nf8::I64 = I64[_s7nf2::P64 + 29];
           _s7nf9::I64 = I64[_s7nf2::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nf8::I64;
           I64[Hp] = _s7nf9::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7nwj: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nwI; else goto c7nwH;
       c7nwI: // global
           HpAlloc = 24;
           R1 = _s7nf2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7nwH: // global
           _s7nfd::I64 = I64[_s7nf2::P64 + 20];
           _s7nfe::I64 = I64[_s7nf2::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfd::I64;
           I64[Hp] = _s7nfe::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Typeable.mkFunTy_entry() //  [R2, R3]
         { info_tbl: [(c7nwM,
                       label: Data.Typeable.mkFunTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nwM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7nwN; else goto c7nwO;
       c7nwN: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.mkFunTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nwO: // global
           I64[Sp - 16] = block_c7nur_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nzB; else goto c7nus;
       u7nzB: // global
           call _c7nur(R1) args: 0, res: 0, upd: 0;
       c7nus: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nur() //  [R1]
         { info_tbl: [(c7nur,
                       label: block_c7nur_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nur: // global
           I64[Sp] = block_c7nuw_info;
           _s7neP::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7neP::P64;
           if (R1 & 7 != 0) goto u7nzz; else goto c7nux;
       u7nzz: // global
           call _c7nuw(R1) args: 0, res: 0, upd: 0;
       c7nux: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nuw() //  [R1]
         { info_tbl: [(c7nuw,
                       label: block_c7nuw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nuw: // global
           I64[Sp - 8] = block_c7nwQ_info;
           _s7neR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7neR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nzA; else goto c7nyg;
       u7nzA: // global
           call _c7nwQ(R1) args: 0, res: 0, upd: 0;
       c7nyg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nwQ() //  [R1]
         { info_tbl: [(c7nwQ,
                       label: block_c7nwQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nwQ: // global
           _c7nzh::P64 = R1 & 7;
           if (_c7nzh::P64 < 3) goto u7nzr; else goto u7nzs;
       u7nzr: // global
           if (_c7nzh::P64 < 2) goto c7nyn; else goto c7nyC;
       c7nyn: // global
           I64[Sp] = block_c7nyk_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7nyC: // global
           I64[Sp] = block_c7nyA_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7nzs: // global
           if (_c7nzh::P64 < 4) goto c7nyR; else goto c7nz6;
       c7nyR: // global
           I64[Sp] = block_c7nyP_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7nz6: // global
           I64[Sp] = block_c7nz4_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nyk() //  [R1]
         { info_tbl: [(c7nyk,
                       label: block_c7nyk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nyk: // global
           if (R1 & 7 == 1) goto u7nzK; else goto u7nzv;
       u7nzK: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzv: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7nyA() //  [R1]
         { info_tbl: [(c7nyA,
                       label: block_c7nyA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nyA: // global
           if (R1 & 7 == 1) goto u7nzM; else goto u7nzw;
       u7nzM: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzw: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7nyP() //  [R1]
         { info_tbl: [(c7nyP,
                       label: block_c7nyP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nyP: // global
           if (R1 & 7 == 1) goto u7nzO; else goto u7nzx;
       u7nzO: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzx: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7nz4() //  [R1]
         { info_tbl: [(c7nz4,
                       label: block_c7nz4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nz4: // global
           if (R1 & 7 == 1) goto u7nzQ; else goto u7nzy;
       u7nzQ: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzy: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _s7nf0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nf0: // global
           I64[Sp - 8] = block_c7nx0_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nzS; else goto c7nxf;
       u7nzS: // global
           call _c7nx0(R1) args: 0, res: 0, upd: 0;
       c7nxf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nx0() //  [R1]
         { info_tbl: [(c7nx0,
                       label: block_c7nx0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nx0: // global
           _c7nzm::P64 = R1 & 7;
           if (_c7nzm::P64 < 3) goto u7nzt; else goto u7nzu;
       u7nzt: // global
           if (_c7nzm::P64 < 2) goto c7nxm; else goto c7nxB;
       c7nxm: // global
           I64[Sp] = block_c7nxj_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7nxB: // global
           I64[Sp] = block_c7nxz_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7nzu: // global
           if (_c7nzm::P64 < 4) goto c7nxQ; else goto c7ny5;
       c7nxQ: // global
           I64[Sp] = block_c7nxO_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7ny5: // global
           I64[Sp] = block_c7ny3_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nxj() //  [R1]
         { info_tbl: [(c7nxj,
                       label: block_c7nxj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nxj: // global
           if (R1 & 7 == 1) goto u7nzC; else goto u7nzD;
       u7nzC: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzD: // global
           call _c7nvr() args: 0, res: 0, upd: 0;
     }
 },
 _c7nxz() //  [R1]
         { info_tbl: [(c7nxz,
                       label: block_c7nxz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nxz: // global
           if (R1 & 7 == 1) goto u7nzE; else goto u7nzF;
       u7nzE: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzF: // global
           call _c7nvr() args: 0, res: 0, upd: 0;
     }
 },
 _c7nxO() //  [R1]
         { info_tbl: [(c7nxO,
                       label: block_c7nxO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nxO: // global
           if (R1 & 7 == 1) goto u7nzG; else goto u7nzH;
       u7nzG: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzH: // global
           call _c7nvr() args: 0, res: 0, upd: 0;
     }
 },
 _c7ny3() //  [R1]
         { info_tbl: [(c7ny3,
                       label: block_c7ny3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ny3: // global
           if (R1 & 7 == 1) goto u7nzI; else goto u7nzJ;
       u7nzI: // global
           call _c7nuE() args: 0, res: 0, upd: 0;
       u7nzJ: // global
           call _c7nvr() args: 0, res: 0, upd: 0;
     }
 },
 _c7nuE() //  []
         { info_tbl: [(c7nuE,
                       label: block_c7nuE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nuE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7nwV; else goto c7nwU;
       c7nwV: // global
           HpAlloc = 32;
           I64[Sp] = block_c7nuE_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7nwU: // global
           I64[Hp - 24] = sat_s7neY_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c7nwS_info;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nwS() //  [R1]
         { info_tbl: [(c7nwS,
                       label: block_c7nwS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nwS: // global
           R3 = R1;
           R2 = Data.Typeable.mkFunTy5_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7nvr() //  []
         { info_tbl: [(c7nvr,
                       label: block_c7nvr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nvr: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7nxb; else goto c7nxa;
       c7nxb: // global
           HpAlloc = 96;
           I64[Sp] = block_c7nvr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7nxa: // global
           I64[Hp - 88] = sat_s7nfx_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           I64[Hp - 40] = sat_s7nfh_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           I64[Sp] = block_c7nx3_info;
           R2 = Hp - 14;
           R1 = GHC.Fingerprint.fingerprintFingerprints_closure;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nx3() //  [R1]
         { info_tbl: [(c7nx3,
                       label: block_c7nx3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nx3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7nxe; else goto c7nxd;
       c7nxe: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nxd: // global
           _s7nfB::I64 = I64[R1 + 7];
           _s7nfC::I64 = I64[R1 + 15];
           I64[Hp - 48] = Data.Typeable.Internal.TrFun_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s7nfB::I64;
           I64[Hp - 16] = _s7nfC::I64;
           I64[Hp - 8] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp] = Hp - 44;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.256087995 UTC

[section ""data" . Data.Typeable.splitTyConApp_closure" {
     Data.Typeable.splitTyConApp_closure:
         const Data.Typeable.splitTyConApp_info;
         const 0;
 },
 Data.Typeable.splitTyConApp_entry() //  [R2]
         { info_tbl: [(c7nA0,
                       label: Data.Typeable.splitTyConApp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nA0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nA6; else goto c7nA7;
       c7nA6: // global
           R2 = R2;
           R1 = Data.Typeable.splitTyConApp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7nA7: // global
           I64[Sp - 8] = block_c7nzX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nAc; else goto c7nzY;
       u7nAc: // global
           call _c7nzX(R1) args: 0, res: 0, upd: 0;
       c7nzY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nzX() //  [R1]
         { info_tbl: [(c7nzX,
                       label: block_c7nzX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nzX: // global
           I64[Sp] = block_c7nA3_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nA3() //  [R1, R2]
         { info_tbl: [(c7nA3,
                       label: block_c7nA3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nA3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7nAb; else goto c7nAa;
       c7nAb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7nAa: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.257647749 UTC

[section ""data" . Data.Typeable.typeRepArgs_closure" {
     Data.Typeable.typeRepArgs_closure:
         const Data.Typeable.typeRepArgs_info;
         const 0;
 },
 Data.Typeable.typeRepArgs_entry() //  [R2]
         { info_tbl: [(c7nAk,
                       label: Data.Typeable.typeRepArgs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nAk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nAo; else goto c7nAp;
       c7nAo: // global
           R2 = R2;
           R1 = Data.Typeable.typeRepArgs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7nAp: // global
           I64[Sp - 8] = block_c7nAh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nAt; else goto c7nAi;
       u7nAt: // global
           call _c7nAh(R1) args: 0, res: 0, upd: 0;
       c7nAi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nAh() //  [R1]
         { info_tbl: [(c7nAh,
                       label: block_c7nAh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nAh: // global
           I64[Sp] = block_c7nAn_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nAn() //  [R2]
         { info_tbl: [(c7nAn,
                       label: block_c7nAn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nAn: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.258908626 UTC

[section ""data" . Data.Typeable.typeRepTyCon_closure" {
     Data.Typeable.typeRepTyCon_closure:
         const Data.Typeable.typeRepTyCon_info;
         const 0;
 },
 Data.Typeable.typeRepTyCon_entry() //  [R2]
         { info_tbl: [(c7nAy,
                       label: Data.Typeable.typeRepTyCon_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nAy: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepTyCon_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.259737963 UTC

[section ""data" . Data.Typeable.typeRepFingerprint_closure" {
     Data.Typeable.typeRepFingerprint_closure:
         const Data.Typeable.typeRepFingerprint_info;
         const 0;
 },
 Data.Typeable.typeRepFingerprint_entry() //  [R2]
         { info_tbl: [(c7nAF,
                       label: Data.Typeable.typeRepFingerprint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nAF: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepFingerprint_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.260524785 UTC

[section ""data" . Data.Typeable.rnfTypeRep_closure" {
     Data.Typeable.rnfTypeRep_closure:
         const Data.Typeable.rnfTypeRep_info;
 },
 Data.Typeable.rnfTypeRep_entry() //  [R2]
         { info_tbl: [(c7nAM,
                       label: Data.Typeable.rnfTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nAM: // global
           R2 = R2;
           call Data.Typeable.Internal.rnfSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.261312463 UTC

[section ""data" . Data.Typeable.typeOf1_closure" {
     Data.Typeable.typeOf1_closure:
         const Data.Typeable.typeOf1_info;
 },
 Data.Typeable.typeOf1_entry() //  [R2]
         { info_tbl: [(c7nAT,
                       label: Data.Typeable.typeOf1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nAT: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.262116888 UTC

[section ""data" . Data.Typeable.typeOf2_closure" {
     Data.Typeable.typeOf2_closure:
         const Data.Typeable.typeOf2_info;
 },
 Data.Typeable.typeOf2_entry() //  [R2]
         { info_tbl: [(c7nB0,
                       label: Data.Typeable.typeOf2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nB0: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.262903981 UTC

[section ""data" . Data.Typeable.typeOf3_closure" {
     Data.Typeable.typeOf3_closure:
         const Data.Typeable.typeOf3_info;
 },
 Data.Typeable.typeOf3_entry() //  [R2]
         { info_tbl: [(c7nB7,
                       label: Data.Typeable.typeOf3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nB7: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.263694731 UTC

[section ""data" . Data.Typeable.typeOf4_closure" {
     Data.Typeable.typeOf4_closure:
         const Data.Typeable.typeOf4_info;
 },
 Data.Typeable.typeOf4_entry() //  [R2]
         { info_tbl: [(c7nBe,
                       label: Data.Typeable.typeOf4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nBe: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.26452484 UTC

[section ""data" . Data.Typeable.typeOf5_closure" {
     Data.Typeable.typeOf5_closure:
         const Data.Typeable.typeOf5_info;
 },
 Data.Typeable.typeOf5_entry() //  [R2]
         { info_tbl: [(c7nBl,
                       label: Data.Typeable.typeOf5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nBl: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.26563569 UTC

[section ""data" . Data.Typeable.typeOf6_closure" {
     Data.Typeable.typeOf6_closure:
         const Data.Typeable.typeOf6_info;
 },
 Data.Typeable.typeOf6_entry() //  [R2]
         { info_tbl: [(c7nBs,
                       label: Data.Typeable.typeOf6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nBs: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.266409692 UTC

[section ""data" . Data.Typeable.typeOf7_closure" {
     Data.Typeable.typeOf7_closure:
         const Data.Typeable.typeOf7_info;
 },
 Data.Typeable.typeOf7_entry() //  [R2]
         { info_tbl: [(c7nBz,
                       label: Data.Typeable.typeOf7_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nBz: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.267070979 UTC

[section ""data" . Data.Typeable.$trModule3_closure" {
     Data.Typeable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.267634586 UTC

[section ""data" . Data.Typeable.$trModule1_closure" {
     Data.Typeable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.268217979 UTC

[section ""data" . Data.Typeable.$trModule_closure" {
     Data.Typeable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Typeable.$trModule3_closure+1;
         const Data.Typeable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.269041649 UTC

[section ""data" . Data.Typeable.showsTypeRep_closure" {
     Data.Typeable.showsTypeRep_closure:
         const Data.Typeable.showsTypeRep_info;
         const 0;
 },
 Data.Typeable.showsTypeRep_entry() //  [R2]
         { info_tbl: [(c7nBJ,
                       label: Data.Typeable.showsTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nBJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nBK; else goto c7nBL;
       c7nBK: // global
           R2 = R2;
           R1 = Data.Typeable.showsTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7nBL: // global
           I64[Sp - 8] = block_c7nBG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nBP; else goto c7nBH;
       u7nBP: // global
           call _c7nBG(R1) args: 0, res: 0, upd: 0;
       c7nBH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nBG() //  [R1]
         { info_tbl: [(c7nBG,
                       label: block_c7nBG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nBG: // global
           R3 = P64[R1 + 7];
           R2 = GHC.Show.$fShow(,)1_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.270092054 UTC

[section ""relreadonly" . S7nhj_srt" {
     S7nhj_srt:
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Typeable.cast_closure;
         const Data.Typeable.eqT_closure;
         const Data.Typeable.gcast_closure;
         const Data.Typeable.gcast1_closure;
         const Data.Typeable.gcast2_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Typeable.funResultTy_closure;
         const Data.Typeable.mkFunTy1_closure;
         const Data.Typeable.Internal.showTypeable_closure;
         const GHC.Err.error_closure;
         const GHC.Fingerprint.fingerprintFingerprints_closure;
         const Data.Typeable.mkFunTy_closure;
         const Data.Typeable.mkFunTy5_closure;
         const Data.Typeable.Internal.$wgo_closure;
         const Data.Typeable.splitTyConApp_closure;
         const Data.Typeable.typeRepArgs_closure;
         const Data.Typeable.Internal.someTypeRepTyCon_closure;
         const Data.Typeable.Internal.someTypeRepFingerprint_closure;
         const Data.Typeable.showsTypeRep_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.270745668 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:40.27140267 UTC

[section ""data" . Data.Typeable.typeOf_closure" {
     Data.Typeable.typeOf_closure:
         const Data.Typeable.typeOf_info;
 },
 Data.Typeable.typeOf_entry() //  [R2]
         { info_tbl: [(c7nBU,
                       label: Data.Typeable.typeOf_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nBU: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.272214146 UTC

[section ""data" . Data.Typeable.typeRep_closure" {
     Data.Typeable.typeRep_closure:
         const Data.Typeable.typeRep_info;
 },
 Data.Typeable.typeRep_entry() //  [R2, R3]
         { info_tbl: [(c7nC1,
                       label: Data.Typeable.typeRep_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nC1: // global
           R3 = R3;
           R2 = R2;
           call Data.Typeable.Internal.someTypeRep_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.273366462 UTC

[section ""data" . Data.Typeable.cast_closure" {
     Data.Typeable.cast_closure:
         const Data.Typeable.cast_info;
         const 0;
 },
 Data.Typeable.cast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nCe,
                       label: Data.Typeable.cast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nCe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nCf; else goto c7nCg;
       c7nCf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.cast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nCg: // global
           I64[Sp - 16] = block_c7nC8_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nC8() //  [R1]
         { info_tbl: [(c7nC8,
                       label: block_c7nC8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nC8: // global
           if (R1 & 7 == 1) goto c7nCb; else goto c7nCc;
       c7nCb: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nCc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nCp; else goto c7nCo;
       c7nCp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nCo: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.274505453 UTC

[section ""data" . Data.Typeable.eqT1_closure" {
     Data.Typeable.eqT1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.275312534 UTC

[section ""data" . Data.Typeable.eqT_closure" {
     Data.Typeable.eqT_closure:
         const Data.Typeable.eqT_info;
         const 0;
 },
 Data.Typeable.eqT_entry() //  [R2, R3]
         { info_tbl: [(c7nCA,
                       label: Data.Typeable.eqT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nCA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nCB; else goto c7nCC;
       c7nCB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.eqT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nCC: // global
           I64[Sp - 8] = block_c7nCu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nCu() //  [R1]
         { info_tbl: [(c7nCu,
                       label: block_c7nCu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nCu: // global
           if (R1 & 7 == 1) goto c7nCx; else goto c7nCy;
       c7nCx: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nCy: // global
           R1 = Data.Typeable.eqT1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.276671378 UTC

[section ""data" . Data.Typeable.gcast_closure" {
     Data.Typeable.gcast_closure:
         const Data.Typeable.gcast_info;
         const 0;
 },
 Data.Typeable.gcast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nCT,
                       label: Data.Typeable.gcast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nCT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nCU; else goto c7nCV;
       c7nCU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nCV: // global
           I64[Sp - 16] = block_c7nCN_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nCN() //  [R1]
         { info_tbl: [(c7nCN,
                       label: block_c7nCN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nCN: // global
           if (R1 & 7 == 1) goto c7nCQ; else goto c7nCR;
       c7nCQ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nCR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nD4; else goto c7nD3;
       c7nD4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nD3: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.278778354 UTC

[section ""data" . Data.Typeable.gcast1_closure" {
     Data.Typeable.gcast1_closure:
         const Data.Typeable.gcast1_info;
         const 0;
 },
 Data.Typeable.gcast1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nDf,
                       label: Data.Typeable.gcast1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nDf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nDg; else goto c7nDh;
       c7nDg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nDh: // global
           I64[Sp - 16] = block_c7nD9_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nD9() //  [R1]
         { info_tbl: [(c7nD9,
                       label: block_c7nD9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nD9: // global
           if (R1 & 7 == 1) goto c7nDc; else goto c7nDd;
       c7nDc: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nDd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nDq; else goto c7nDp;
       c7nDq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nDp: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.280402828 UTC

[section ""data" . Data.Typeable.gcast2_closure" {
     Data.Typeable.gcast2_closure:
         const Data.Typeable.gcast2_info;
         const 0;
 },
 Data.Typeable.gcast2_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nDB,
                       label: Data.Typeable.gcast2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nDB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nDC; else goto c7nDD;
       c7nDC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nDD: // global
           I64[Sp - 16] = block_c7nDv_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nDv() //  [R1]
         { info_tbl: [(c7nDv,
                       label: block_c7nDv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nDv: // global
           if (R1 & 7 == 1) goto c7nDy; else goto c7nDz;
       c7nDy: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nDz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nDM; else goto c7nDL;
       c7nDM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nDL: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.282356224 UTC

[section ""data" . Data.Typeable.mkFunTy1_closure" {
     Data.Typeable.mkFunTy1_closure:
         const Data.Typeable.mkFunTy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy1_entry() //  [R1]
         { info_tbl: [(c7nE3,
                       label: Data.Typeable.mkFunTy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nE3: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c7nE4; else goto c7nE5;
       c7nE4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nE5: // global
           (_c7nDQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7nDQ::I64 == 0) goto c7nDS; else goto c7nDR;
       c7nDS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nDR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7nDQ::I64;
           I64[Sp - 24] = block_c7nDT_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7nDT() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7nDT,
                       label: block_c7nDT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nDT: // global
           I64[Sp - 40] = block_c7nDX_info;
           R6 = 0;
           _s7nbn::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s7nbm::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s7nbl::P64 = R3;
           R3 = 5595830777317938557;
           _s7nbk::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s7nbk::I64;
           P64[Sp - 24] = _s7nbl::P64;
           P64[Sp - 16] = _s7nbm::P64;
           P64[Sp - 8] = _s7nbn::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7nDX() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7nDX,
                       label: block_c7nDX_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nDX: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7nDY() args: 0, res: 0, upd: 0;
     }
 },
 _c7nDY() //  []
         { info_tbl: [(c7nDY,
                       label: block_c7nDY_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nDY: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7nE9; else goto c7nE8;
       c7nE9: // global
           HpAlloc = 96;
           I64[Sp] = block_c7nDY_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7nE8: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.292749668 UTC

[section ""data" . Data.Typeable.funResultTy_closure" {
     Data.Typeable.funResultTy_closure:
         const Data.Typeable.funResultTy_info;
         const 0;
 },
 Data.Typeable.funResultTy_entry() //  [R2, R3]
         { info_tbl: [(c7nEj,
                       label: Data.Typeable.funResultTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nEj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7nEn; else goto c7nEo;
       c7nEn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.funResultTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nEo: // global
           I64[Sp - 16] = block_c7nEg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nNK; else goto c7nEh;
       u7nNK: // global
           call _c7nEg(R1) args: 0, res: 0, upd: 0;
       c7nEh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nEg() //  [R1]
         { info_tbl: [(c7nEg,
                       label: block_c7nEg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nEg: // global
           I64[Sp] = block_c7nEm_info;
           _s7nbz::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7nbz::P64;
           if (R1 & 7 != 0) goto u7nNJ; else goto c7nEq;
       u7nNJ: // global
           call _c7nEm(R1) args: 0, res: 0, upd: 0;
       c7nEq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nEm() //  [R1]
         { info_tbl: [(c7nEm,
                       label: block_c7nEm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nEm: // global
           I64[Sp - 8] = block_c7nEw_info;
           _s7nbB::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7nbB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nNL; else goto c7nGU;
       u7nNL: // global
           call _c7nEw(R1) args: 0, res: 0, upd: 0;
       c7nGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nEw() //  [R1]
         { info_tbl: [(c7nEw,
                       label: block_c7nEw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nEw: // global
           _c7nM0::P64 = R1 & 7;
           if (_c7nM0::P64 < 3) goto u7nMG; else goto u7nMH;
       u7nMG: // global
           if (_c7nM0::P64 < 2) goto c7nH1; else goto c7nJx;
       c7nH1: // global
           I64[Sp] = block_c7nGY_info;
           R1 = Data.Typeable.mkFunTy1_closure;
           if (R1 & 7 != 0) goto u7nNM; else goto c7nH2;
       u7nNM: // global
           call _c7nGY(R1) args: 0, res: 0, upd: 0;
       c7nH2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nJx: // global
           I64[Sp - 8] = block_c7nI7_info;
           _s7nd4::P64 = P64[R1 + 22];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7nd4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nNN; else goto c7nJy;
       u7nNN: // global
           call _c7nI7(R1) args: 0, res: 0, upd: 0;
       c7nJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7nMH: // global
           if (_c7nM0::P64 < 4) goto c7nLn; else goto c7nLN;
       c7nLn: // global
           I64[Sp - 8] = block_c7nJX_info;
           _s7ndU::P64 = P64[R1 + 21];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7ndU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nNO; else goto c7nLo;
       u7nNO: // global
           call _c7nJX(R1) args: 0, res: 0, upd: 0;
       c7nLo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nLN: // global
           I64[Sp] = block_c7nLL_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = Data.Typeable.mkFunTy1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nGY() //  [R1]
         { info_tbl: [(c7nGY,
                       label: block_c7nGY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nGY: // global
           _c7nMv::P64 = R1 & 7;
           if (_c7nMv::P64 < 3) goto u7nMM; else goto c7nHJ;
       u7nMM: // global
           if (_c7nMv::P64 < 2) goto c7nH9; else goto c7nHl;
       c7nH9: // global
           I64[Sp] = block_c7nH6_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nO5; else goto c7nHa;
       u7nO5: // global
           call _c7nH6(R1) args: 0, res: 0, upd: 0;
       c7nHa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nHl: // global
           I64[Sp - 16] = block_c7nHj_info;
           _s7ncE::I64 = I64[R1 + 30];
           _s7ncF::I64 = I64[R1 + 38];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7ncF::I64;
           I64[Sp] = _s7ncE::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nO6; else goto c7nHm;
       u7nO6: // global
           call _c7nHj(R1) args: 0, res: 0, upd: 0;
       c7nHm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nHJ: // global
           I64[Sp - 16] = block_c7nHH_info;
           _s7ncP::I64 = I64[R1 + 29];
           _s7ncQ::I64 = I64[R1 + 37];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7ncQ::I64;
           I64[Sp] = _s7ncP::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nO7; else goto c7nHK;
       u7nO7: // global
           call _c7nHH(R1) args: 0, res: 0, upd: 0;
       c7nHK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nH6() //  [R1]
         { info_tbl: [(c7nH6,
                       label: block_c7nH6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nH6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nHg; else goto c7nHf;
       c7nHg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nHf: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7nbC() args: 0, res: 0, upd: 0;
     }
 },
 _c7nHj() //  [R1]
         { info_tbl: [(c7nHj,
                       label: block_c7nHj_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nHj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nHs; else goto c7nHr;
       c7nHs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nHr: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nHE; else goto u7nMU;
       c7nHE: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nHD; else goto u7nMV;
       c7nHD: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nMV: // global
           Sp = Sp + 40;
           goto u7nOa;
       u7nMU: // global
           Sp = Sp + 40;
           goto u7nOa;
       u7nOa: // global
           call _c7nLk() args: 0, res: 0, upd: 0;
     }
 },
 _c7nHH() //  [R1]
         { info_tbl: [(c7nHH,
                       label: block_c7nHH_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nHH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nHQ; else goto c7nHP;
       c7nHQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nHP: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nI2; else goto u7nMX;
       c7nI2: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nI1; else goto u7nMY;
       c7nI1: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nMY: // global
           Sp = Sp + 40;
           goto u7nOd;
       u7nMX: // global
           Sp = Sp + 40;
           goto u7nOd;
       u7nOd: // global
           call _c7nLk() args: 0, res: 0, upd: 0;
     }
 },
 _c7nI7() //  [R1]
         { info_tbl: [(c7nI7,
                       label: block_c7nI7_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nI7: // global
           _c7nMh::P64 = R1 & 7;
           if (_c7nMh::P64 < 3) goto u7nMN; else goto c7nJS;
       u7nMN: // global
           if (_c7nMh::P64 < 2) goto c7nJF; else goto c7nJO;
       c7nJF: // global
           I64[Sp] = block_c7nJC_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nOf; else goto c7nJG;
       u7nOf: // global
           call _c7nJC(R1) args: 0, res: 0, upd: 0;
       c7nJG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nJO: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7nOh;
       c7nJS: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7nOh;
       u7nOh: // global
           call _s7nd5() args: 0, res: 0, upd: 0;
     }
 },
 _c7nJC() //  [R1]
         { info_tbl: [(c7nJC,
                       label: block_c7nJC_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nJC: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7nd5() args: 0, res: 0, upd: 0;
     }
 },
 _s7nd5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nd5: // global
           I64[Sp - 8] = block_c7nIc_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nOR; else goto c7nIe;
       u7nOR: // global
           call _c7nIc(R1) args: 0, res: 0, upd: 0;
       c7nIe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nIc() //  [R1]
         { info_tbl: [(c7nIc,
                       label: block_c7nIc_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nIc: // global
           _s7nd6::I64 = I64[Sp + 16];
           _s7nd7::I64 = I64[Sp + 8];
           _c7nMi::P64 = R1 & 7;
           if (_c7nMi::P64 < 3) goto u7nMO; else goto u7nMP;
       u7nMO: // global
           if (_c7nMi::P64 < 2) goto c7nIl; else goto c7nIF;
       c7nIl: // global
           I64[Sp] = block_c7nIi_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nOi; else goto c7nIm;
       u7nOi: // global
           call _c7nIi(R1) args: 0, res: 0, upd: 0;
       c7nIm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nIF: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nJk; else goto c7nIJ;
       c7nIJ: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 30]) goto c7nIW; else goto u7nN6;
       c7nIW: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 38]) goto c7nIV; else goto u7nN7;
       c7nIV: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7nOr;
       u7nN7: // global
           Sp = Sp + 48;
           goto u7nOq;
       u7nN6: // global
           Sp = Sp + 48;
           goto u7nOq;
       u7nMP: // global
           if (_c7nMi::P64 < 4) goto c7nIX; else goto c7nJf;
       c7nIX: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nJk; else goto c7nJ1;
       c7nJ1: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 29]) goto c7nJe; else goto u7nN9;
       c7nJe: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 37]) goto c7nJd; else goto u7nNa;
       c7nJd: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7nOr;
       u7nNa: // global
           Sp = Sp + 48;
           goto u7nOq;
       u7nN9: // global
           Sp = Sp + 48;
           goto u7nOq;
       c7nJf: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nJk; else goto c7nJj;
       c7nJk: // global
           HpAlloc = 16;
           R1 = _s7nd8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nJj: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 20]) goto c7nJw; else goto u7nNc;
       c7nJw: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 28]) goto c7nJv; else goto u7nNd;
       c7nJv: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7nOr;
       u7nOr: // global
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nNd: // global
           Sp = Sp + 48;
           goto u7nOq;
       u7nNc: // global
           Sp = Sp + 48;
           goto u7nOq;
       u7nOq: // global
           call _c7nLk() args: 0, res: 0, upd: 0;
     }
 },
 _c7nIi() //  [R1]
         { info_tbl: [(c7nIi,
                       label: block_c7nIi_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nIi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nIs; else goto c7nIr;
       c7nIs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nIr: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nIE; else goto u7nN3;
       c7nIE: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nID; else goto u7nN4;
       c7nID: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nN4: // global
           Sp = Sp + 48;
           goto u7nOt;
       u7nN3: // global
           Sp = Sp + 48;
           goto u7nOt;
       u7nOt: // global
           call _c7nLk() args: 0, res: 0, upd: 0;
     }
 },
 _c7nJX() //  [R1]
         { info_tbl: [(c7nJX,
                       label: block_c7nJX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nJX: // global
           _c7nM3::P64 = R1 & 7;
           if (_c7nM3::P64 < 3) goto u7nMQ; else goto c7nLI;
       u7nMQ: // global
           if (_c7nM3::P64 < 2) goto c7nLv; else goto c7nLE;
       c7nLv: // global
           I64[Sp] = block_c7nLs_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nOw; else goto c7nLw;
       u7nOw: // global
           call _c7nLs(R1) args: 0, res: 0, upd: 0;
       c7nLw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nLE: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7nOy;
       c7nLI: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7nOy;
       u7nOy: // global
           call _s7ndV() args: 0, res: 0, upd: 0;
     }
 },
 _c7nLs() //  [R1]
         { info_tbl: [(c7nLs,
                       label: block_c7nLs_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nLs: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7ndV() args: 0, res: 0, upd: 0;
     }
 },
 _s7ndV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7ndV: // global
           I64[Sp - 8] = block_c7nK2_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nOS; else goto c7nK4;
       u7nOS: // global
           call _c7nK2(R1) args: 0, res: 0, upd: 0;
       c7nK4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nK2() //  [R1]
         { info_tbl: [(c7nK2,
                       label: block_c7nK2_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nK2: // global
           _s7ndW::I64 = I64[Sp + 16];
           _s7ndX::I64 = I64[Sp + 8];
           _c7nM4::P64 = R1 & 7;
           if (_c7nM4::P64 < 3) goto u7nMR; else goto u7nMS;
       u7nMR: // global
           if (_c7nM4::P64 < 2) goto c7nKb; else goto c7nKv;
       c7nKb: // global
           I64[Sp] = block_c7nK8_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nOz; else goto c7nKc;
       u7nOz: // global
           call _c7nK8(R1) args: 0, res: 0, upd: 0;
       c7nKc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nKv: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nLa; else goto c7nKz;
       c7nKz: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 30]) goto c7nKM; else goto u7nNl;
       c7nKM: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 38]) goto c7nKL; else goto u7nNm;
       c7nKL: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7nOI;
       u7nNm: // global
           Sp = Sp + 48;
           goto u7nOH;
       u7nNl: // global
           Sp = Sp + 48;
           goto u7nOH;
       u7nMS: // global
           if (_c7nM4::P64 < 4) goto c7nKN; else goto c7nL5;
       c7nKN: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nLa; else goto c7nKR;
       c7nKR: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 29]) goto c7nL4; else goto u7nNo;
       c7nL4: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 37]) goto c7nL3; else goto u7nNp;
       c7nL3: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7nOI;
       u7nNp: // global
           Sp = Sp + 48;
           goto u7nOH;
       u7nNo: // global
           Sp = Sp + 48;
           goto u7nOH;
       c7nL5: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nLa; else goto c7nL9;
       c7nLa: // global
           HpAlloc = 16;
           R1 = _s7ndY::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nL9: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 20]) goto c7nLm; else goto u7nNr;
       c7nLm: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 28]) goto c7nLl; else goto u7nNs;
       c7nLl: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7nOI;
       u7nOI: // global
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nNs: // global
           Sp = Sp + 48;
           goto u7nOH;
       u7nNr: // global
           Sp = Sp + 48;
           goto u7nOH;
       u7nOH: // global
           call _c7nLk() args: 0, res: 0, upd: 0;
     }
 },
 _c7nK8() //  [R1]
         { info_tbl: [(c7nK8,
                       label: block_c7nK8_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nK8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nKi; else goto c7nKh;
       c7nKi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nKh: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nKu; else goto u7nNi;
       c7nKu: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nKt; else goto u7nNj;
       c7nKt: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7nNj: // global
           Sp = Sp + 48;
           goto u7nOK;
       u7nNi: // global
           Sp = Sp + 48;
           goto u7nOK;
       u7nOK: // global
           call _c7nLk() args: 0, res: 0, upd: 0;
     }
 },
 _c7nLk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nLk: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7nLL() //  [R1]
         { info_tbl: [(c7nLL,
                       label: block_c7nLL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nLL: // global
           if (R1 & 7 == 1) goto u7nNu; else goto c7nLU;
       u7nNu: // global
           Sp = Sp + 24;
           call _c7nLT() args: 0, res: 0, upd: 0;
       c7nLU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nLZ; else goto c7nLY;
       c7nLZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nLY: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7nbC() args: 0, res: 0, upd: 0;
     }
 },
 _s7nbC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nbC: // global
           I64[Sp - 8] = block_c7nEB_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nOP; else goto c7nED;
       u7nOP: // global
           call _c7nEB(R1) args: 0, res: 0, upd: 0;
       c7nED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nEB() //  [R1]
         { info_tbl: [(c7nEB,
                       label: block_c7nEB_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nEB: // global
           if (R1 & 7 == 4) goto c7nGu; else goto u7nNw;
       c7nGu: // global
           I64[Sp] = block_c7nEO_info;
           _s7nbI::P64 = P64[R1 + 12];
           R1 = P64[R1 + 4];
           P64[Sp + 16] = _s7nbI::P64;
           if (R1 & 7 != 0) goto u7nNP; else goto c7nGv;
       u7nNP: // global
           call _c7nEO(R1) args: 0, res: 0, upd: 0;
       c7nGv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7nNw: // global
           Sp = Sp + 24;
           call _c7nLT() args: 0, res: 0, upd: 0;
     }
 },
 _c7nEO() //  [R1]
         { info_tbl: [(c7nEO,
                       label: block_c7nEO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nEO: // global
           _c7nME::P64 = R1 & 7;
           if (_c7nME::P64 < 3) goto u7nMI; else goto u7nMJ;
       u7nMI: // global
           if (_c7nME::P64 < 2) goto c7nGC; else goto c7nGL;
       c7nGC: // global
           I64[Sp] = block_c7nGz_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nNR; else goto c7nGD;
       u7nNR: // global
           call _c7nGz(R1) args: 0, res: 0, upd: 0;
       c7nGD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nGL: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7nNU;
       u7nMJ: // global
           if (_c7nME::P64 < 4) goto c7nGP; else goto c7nGT;
       c7nGP: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7nNU;
       c7nGT: // global
           I64[Sp] = I64[R1 + 20];
           I64[Sp - 8] = I64[R1 + 28];
           Sp = Sp - 8;
           goto u7nNU;
       u7nNU: // global
           call _s7nbJ() args: 0, res: 0, upd: 0;
     }
 },
 _c7nGz() //  [R1]
         { info_tbl: [(c7nGz,
                       label: block_c7nGz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nGz: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7nbJ() args: 0, res: 0, upd: 0;
     }
 },
 _s7nbJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nbJ: // global
           I64[Sp - 8] = block_c7nET_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nOQ; else goto c7nEV;
       u7nOQ: // global
           call _c7nET(R1) args: 0, res: 0, upd: 0;
       c7nEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nET() //  [R1]
         { info_tbl: [(c7nET,
                       label: block_c7nET_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nET: // global
           _s7nbI::P64 = P64[Sp + 32];
           _s7nbK::I64 = I64[Sp + 16];
           _s7nbL::I64 = I64[Sp + 8];
           _c7nMF::P64 = R1 & 7;
           if (_c7nMF::P64 < 3) goto u7nMK; else goto u7nML;
       u7nMK: // global
           if (_c7nMF::P64 < 2) goto c7nF2; else goto c7nFq;
       c7nF2: // global
           I64[Sp] = block_c7nEZ_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7nNV; else goto c7nF3;
       u7nNV: // global
           call _c7nEZ(R1) args: 0, res: 0, upd: 0;
       c7nF3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7nFq: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nGd; else goto c7nFu;
       c7nFu: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 30]) goto c7nFL; else goto u7nND;
       c7nFL: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 38]) goto c7nFK; else goto u7nNE;
       c7nFK: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nNE: // global
           Sp = Sp + 40;
           goto u7nO1;
       u7nND: // global
           Sp = Sp + 40;
           goto u7nO1;
       u7nML: // global
           if (_c7nMF::P64 < 4) goto c7nFM; else goto c7nG8;
       c7nFM: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nGd; else goto c7nFQ;
       c7nFQ: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 29]) goto c7nG7; else goto u7nNF;
       c7nG7: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 37]) goto c7nG6; else goto u7nNG;
       c7nG6: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nNG: // global
           Sp = Sp + 40;
           goto u7nO1;
       u7nNF: // global
           Sp = Sp + 40;
           goto u7nO1;
       c7nG8: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nGd; else goto c7nGc;
       c7nGd: // global
           HpAlloc = 32;
           R1 = _s7nbM::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nGc: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 20]) goto c7nGt; else goto u7nNH;
       c7nGt: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 28]) goto c7nGs; else goto u7nNI;
       c7nGs: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nNI: // global
           Sp = Sp + 40;
           goto u7nO1;
       u7nNH: // global
           Sp = Sp + 40;
           goto u7nO1;
       u7nO1: // global
           call _c7nGn() args: 0, res: 0, upd: 0;
     }
 },
 _c7nEZ() //  [R1]
         { info_tbl: [(c7nEZ,
                       label: block_c7nEZ_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nEZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7nF9; else goto c7nF8;
       c7nF9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nF8: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7nFp; else goto u7nNB;
       c7nFp: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7nFo; else goto u7nNC;
       c7nFo: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7nNC: // global
           Sp = Sp + 40;
           goto u7nO3;
       u7nNB: // global
           Sp = Sp + 40;
           goto u7nO3;
       u7nO3: // global
           call _c7nGn() args: 0, res: 0, upd: 0;
     }
 },
 _c7nGn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nGn: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7nLT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nLT: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.304210399 UTC

[section ""cstring" . Data.Typeable.mkFunTy16_bytes" {
     Data.Typeable.mkFunTy16_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.305297716 UTC

[section ""data" . Data.Typeable.mkFunTy15_closure" {
     Data.Typeable.mkFunTy15_closure:
         const Data.Typeable.mkFunTy15_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy15_entry() //  [R1]
         { info_tbl: [(c7nOZ,
                       label: Data.Typeable.mkFunTy15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nOZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nP0; else goto c7nP1;
       c7nP0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nP1: // global
           (_c7nOW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7nOW::I64 == 0) goto c7nOY; else goto c7nOX;
       c7nOY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nOX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7nOW::I64;
           R2 = Data.Typeable.mkFunTy16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.306321845 UTC

[section ""cstring" . Data.Typeable.$trModule4_bytes" {
     Data.Typeable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.307141234 UTC

[section ""data" . Data.Typeable.mkFunTy14_closure" {
     Data.Typeable.mkFunTy14_closure:
         const Data.Typeable.mkFunTy14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy14_entry() //  [R1]
         { info_tbl: [(c7nP8,
                       label: Data.Typeable.mkFunTy14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nP8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nP9; else goto c7nPa;
       c7nP9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nPa: // global
           (_c7nP5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7nP5::I64 == 0) goto c7nP7; else goto c7nP6;
       c7nP7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nP6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7nP5::I64;
           R2 = Data.Typeable.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.308093637 UTC

[section ""cstring" . Data.Typeable.$trModule2_bytes" {
     Data.Typeable.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.308865853 UTC

[section ""data" . Data.Typeable.mkFunTy13_closure" {
     Data.Typeable.mkFunTy13_closure:
         const Data.Typeable.mkFunTy13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy13_entry() //  [R1]
         { info_tbl: [(c7nPh,
                       label: Data.Typeable.mkFunTy13_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nPh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nPi; else goto c7nPj;
       c7nPi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nPj: // global
           (_c7nPe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7nPe::I64 == 0) goto c7nPg; else goto c7nPf;
       c7nPg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nPf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7nPe::I64;
           R2 = Data.Typeable.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.309877895 UTC

[section ""cstring" . Data.Typeable.mkFunTy12_bytes" {
     Data.Typeable.mkFunTy12_bytes:
         I8[] [46,47,68,97,116,97,47,84,121,112,101,97,98,108,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.313520019 UTC

[section ""data" . Data.Typeable.mkFunTy11_closure" {
     Data.Typeable.mkFunTy11_closure:
         const Data.Typeable.mkFunTy11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy11_entry() //  [R1]
         { info_tbl: [(c7nPq,
                       label: Data.Typeable.mkFunTy11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nPq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nPr; else goto c7nPs;
       c7nPr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nPs: // global
           (_c7nPn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7nPn::I64 == 0) goto c7nPp; else goto c7nPo;
       c7nPp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7nPo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7nPn::I64;
           R2 = Data.Typeable.mkFunTy12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.314513104 UTC

[section ""data" . Data.Typeable.mkFunTy10_closure" {
     Data.Typeable.mkFunTy10_closure:
         const GHC.Types.I#_con_info;
         const 171;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.315236 UTC

[section ""data" . Data.Typeable.mkFunTy9_closure" {
     Data.Typeable.mkFunTy9_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.315928442 UTC

[section ""data" . Data.Typeable.mkFunTy8_closure" {
     Data.Typeable.mkFunTy8_closure:
         const GHC.Types.I#_con_info;
         const 172;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.316502242 UTC

[section ""data" . Data.Typeable.mkFunTy7_closure" {
     Data.Typeable.mkFunTy7_closure:
         const GHC.Types.I#_con_info;
         const 55;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.317072778 UTC

[section ""data" . Data.Typeable.mkFunTy6_closure" {
     Data.Typeable.mkFunTy6_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const Data.Typeable.mkFunTy14_closure;
         const Data.Typeable.mkFunTy13_closure;
         const Data.Typeable.mkFunTy11_closure;
         const Data.Typeable.mkFunTy10_closure+1;
         const Data.Typeable.mkFunTy9_closure+1;
         const Data.Typeable.mkFunTy8_closure+1;
         const Data.Typeable.mkFunTy7_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.317698045 UTC

[section ""data" . Data.Typeable.mkFunTy5_closure" {
     Data.Typeable.mkFunTy5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const Data.Typeable.mkFunTy15_closure;
         const Data.Typeable.mkFunTy6_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.318277616 UTC

[section ""cstring" . Data.Typeable.mkFunTy4_bytes" {
     Data.Typeable.mkFunTy4_bytes:
         I8[] [109,107,70,117,110,84,121,58,32,65,116,116,101,109,112,116,101,100,32,116,111,32,99,111,110,115,116,114,117,99,116,32,102,117,110,99,116,105,111,110,32,116,121,112,101,32,102,114,111,109,32,110,111,110,45,108,105,102,116,101,100,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.318854691 UTC

[section ""cstring" . Data.Typeable.mkFunTy3_bytes" {
     Data.Typeable.mkFunTy3_bytes:
         I8[] [116,121,112,101,58,32,97,114,103,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.319395376 UTC

[section ""cstring" . Data.Typeable.mkFunTy2_bytes" {
     Data.Typeable.mkFunTy2_bytes:
         I8[] [44,32,114,101,115,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.323673209 UTC

[section ""data" . Data.Typeable.mkFunTy_closure" {
     Data.Typeable.mkFunTy_closure:
         const Data.Typeable.mkFunTy_info;
         const 0;
 },
 sat_s7neV_entry() //  [R1]
         { info_tbl: [(c7nQ2,
                       label: sat_s7neV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQ2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7nQ3; else goto c7nQ4;
       c7nQ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nQ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s7neW_entry() //  [R1]
         { info_tbl: [(c7nQ5,
                       label: sat_s7neW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7nQ9; else goto c7nQ8;
       c7nQ9: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nQ8: // global
           _s7neR::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7neV_info;
           P64[Hp] = _s7neR::P64;
           R3 = Hp - 16;
           R2 = Data.Typeable.mkFunTy2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7neX_entry() //  [R1]
         { info_tbl: [(c7nQc,
                       label: sat_s7neX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQc: // global
           _s7neX::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c7nQd; else goto c7nQe;
       c7nQe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7nQg; else goto c7nQf;
       c7nQg: // global
           HpAlloc = 24;
           goto c7nQd;
       c7nQd: // global
           R1 = _s7neX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nQf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7neX::P64;
           _s7neP::P64 = P64[_s7neX::P64 + 16];
           _s7neR::P64 = P64[_s7neX::P64 + 24];
           I64[Hp - 16] = sat_s7neW_info;
           P64[Hp] = _s7neR::P64;
           I64[Sp - 32] = block_c7nQa_info;
           R3 = _s7neP::P64;
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = GHC.Types.[]_closure+1;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7nQa() //  [R1]
         { info_tbl: [(c7nQa,
                       label: block_c7nQa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQa: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7neY_entry() //  [R1]
         { info_tbl: [(c7nQk,
                       label: sat_s7neY_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQk: // global
           _s7neY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7nQl; else goto c7nQm;
       c7nQm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7nQo; else goto c7nQn;
       c7nQo: // global
           HpAlloc = 32;
           goto c7nQl;
       c7nQl: // global
           R1 = _s7neY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nQn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7neY::P64;
           _s7neP::P64 = P64[_s7neY::P64 + 16];
           _s7neR::P64 = P64[_s7neY::P64 + 24];
           I64[Hp - 24] = sat_s7neX_info;
           P64[Hp - 8] = _s7neP::P64;
           P64[Hp] = _s7neR::P64;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7nfx_entry() //  [R1]
         { info_tbl: [(c7nQM,
                       label: sat_s7nfx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7nQN; else goto c7nQO;
       c7nQN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nQO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7nQD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7nRc; else goto c7nQE;
       u7nRc: // global
           call _c7nQD(R1) args: 0, res: 0, upd: 0;
       c7nQE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7nQD() //  [R1]
         { info_tbl: [(c7nQD,
                       label: block_c7nQD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQD: // global
           _c7nQL::P64 = R1 & 7;
           if (_c7nQL::P64 < 3) goto u7nRa; else goto u7nRb;
       u7nRa: // global
           if (_c7nQL::P64 < 2) goto c7nQH; else goto c7nQI;
       c7nQH: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7nQI: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nR9; else goto c7nQW;
       c7nQW: // global
           _s7nfj::I64 = I64[_s7nfi::P64 + 30];
           _s7nfk::I64 = I64[_s7nfi::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfj::I64;
           I64[Hp] = _s7nfk::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7nRb: // global
           if (_c7nQL::P64 < 4) goto c7nQJ; else goto c7nQK;
       c7nQJ: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nR9; else goto c7nR2;
       c7nR2: // global
           _s7nfo::I64 = I64[_s7nfi::P64 + 29];
           _s7nfp::I64 = I64[_s7nfi::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfo::I64;
           I64[Hp] = _s7nfp::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7nQK: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nR9; else goto c7nR8;
       c7nR9: // global
           HpAlloc = 24;
           R1 = _s7nfi::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7nR8: // global
           _s7nft::I64 = I64[_s7nfi::P64 + 20];
           _s7nfu::I64 = I64[_s7nfi::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nft::I64;
           I64[Hp] = _s7nfu::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7nfh_entry() //  [R1]
         { info_tbl: [(c7nRr,
                       label: sat_s7nfh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nRr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7nRs; else goto c7nRt;
       c7nRs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7nRt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7nRi_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7nRR; else goto c7nRj;
       u7nRR: // global
           call _c7nRi(R1) args: 0, res: 0, upd: 0;
       c7nRj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7nRi() //  [R1]
         { info_tbl: [(c7nRi,
                       label: block_c7nRi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nRi: // global
           _c7nRq::P64 = R1 & 7;
           if (_c7nRq::P64 < 3) goto u7nRP; else goto u7nRQ;
       u7nRP: // global
           if (_c7nRq::P64 < 2) goto c7nRm; else goto c7nRn;
       c7nRm: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7nRn: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nRO; else goto c7nRB;
       c7nRB: // global
           _s7nf3::I64 = I64[_s7nf2::P64 + 30];
           _s7nf4::I64 = I64[_s7nf2::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nf3::I64;
           I64[Hp] = _s7nf4::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7nRQ: // global
           if (_c7nRq::P64 < 4) goto c7nRo; else goto c7nRp;
       c7nRo: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nRO; else goto c7nRH;
       c7nRH: // global
           _s7nf8::I64 = I64[_s7nf2::P64 + 29];
           _s7nf9::I64 = I64[_s7nf2::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nf8::I64;
           I64[Hp] = _s7nf9::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7nRp: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7nRO; else goto c7nRN;
       c7nRO: // global
           HpAlloc = 24;
           R1 = _s7nf2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7nRN: // global
           _s7nfd::I64 = I64[_s7nf2::P64 + 20];
           _s7nfe::I64 = I64[_s7nf2::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfd::I64;
           I64[Hp] = _s7nfe::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Typeable.mkFunTy_entry() //  [R2, R3]
         { info_tbl: [(c7nRS,
                       label: Data.Typeable.mkFunTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nRS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7nRT; else goto c7nRU;
       c7nRT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.mkFunTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nRU: // global
           I64[Sp - 16] = block_c7nPx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7nUH; else goto c7nPy;
       u7nUH: // global
           call _c7nPx(R1) args: 0, res: 0, upd: 0;
       c7nPy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nPx() //  [R1]
         { info_tbl: [(c7nPx,
                       label: block_c7nPx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nPx: // global
           I64[Sp] = block_c7nPC_info;
           _s7neP::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7neP::P64;
           if (R1 & 7 != 0) goto u7nUF; else goto c7nPD;
       u7nUF: // global
           call _c7nPC(R1) args: 0, res: 0, upd: 0;
       c7nPD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nPC() //  [R1]
         { info_tbl: [(c7nPC,
                       label: block_c7nPC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nPC: // global
           I64[Sp - 8] = block_c7nRW_info;
           _s7neR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7neR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nUG; else goto c7nTm;
       u7nUG: // global
           call _c7nRW(R1) args: 0, res: 0, upd: 0;
       c7nTm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nRW() //  [R1]
         { info_tbl: [(c7nRW,
                       label: block_c7nRW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nRW: // global
           _c7nUn::P64 = R1 & 7;
           if (_c7nUn::P64 < 3) goto u7nUx; else goto u7nUy;
       u7nUx: // global
           if (_c7nUn::P64 < 2) goto c7nTt; else goto c7nTI;
       c7nTt: // global
           I64[Sp] = block_c7nTq_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7nTI: // global
           I64[Sp] = block_c7nTG_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7nUy: // global
           if (_c7nUn::P64 < 4) goto c7nTX; else goto c7nUc;
       c7nTX: // global
           I64[Sp] = block_c7nTV_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7nUc: // global
           I64[Sp] = block_c7nUa_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nTq() //  [R1]
         { info_tbl: [(c7nTq,
                       label: block_c7nTq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nTq: // global
           if (R1 & 7 == 1) goto u7nUQ; else goto u7nUB;
       u7nUQ: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUB: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7nTG() //  [R1]
         { info_tbl: [(c7nTG,
                       label: block_c7nTG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nTG: // global
           if (R1 & 7 == 1) goto u7nUS; else goto u7nUC;
       u7nUS: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUC: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7nTV() //  [R1]
         { info_tbl: [(c7nTV,
                       label: block_c7nTV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nTV: // global
           if (R1 & 7 == 1) goto u7nUU; else goto u7nUD;
       u7nUU: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUD: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7nUa() //  [R1]
         { info_tbl: [(c7nUa,
                       label: block_c7nUa_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nUa: // global
           if (R1 & 7 == 1) goto u7nUW; else goto u7nUE;
       u7nUW: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUE: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _s7nf0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nf0: // global
           I64[Sp - 8] = block_c7nS6_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nUY; else goto c7nSl;
       u7nUY: // global
           call _c7nS6(R1) args: 0, res: 0, upd: 0;
       c7nSl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nS6() //  [R1]
         { info_tbl: [(c7nS6,
                       label: block_c7nS6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nS6: // global
           _c7nUs::P64 = R1 & 7;
           if (_c7nUs::P64 < 3) goto u7nUz; else goto u7nUA;
       u7nUz: // global
           if (_c7nUs::P64 < 2) goto c7nSs; else goto c7nSH;
       c7nSs: // global
           I64[Sp] = block_c7nSp_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7nSH: // global
           I64[Sp] = block_c7nSF_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7nUA: // global
           if (_c7nUs::P64 < 4) goto c7nSW; else goto c7nTb;
       c7nSW: // global
           I64[Sp] = block_c7nSU_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7nTb: // global
           I64[Sp] = block_c7nT9_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nSp() //  [R1]
         { info_tbl: [(c7nSp,
                       label: block_c7nSp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nSp: // global
           if (R1 & 7 == 1) goto u7nUI; else goto u7nUJ;
       u7nUI: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUJ: // global
           call _c7nQx() args: 0, res: 0, upd: 0;
     }
 },
 _c7nSF() //  [R1]
         { info_tbl: [(c7nSF,
                       label: block_c7nSF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nSF: // global
           if (R1 & 7 == 1) goto u7nUK; else goto u7nUL;
       u7nUK: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUL: // global
           call _c7nQx() args: 0, res: 0, upd: 0;
     }
 },
 _c7nSU() //  [R1]
         { info_tbl: [(c7nSU,
                       label: block_c7nSU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nSU: // global
           if (R1 & 7 == 1) goto u7nUM; else goto u7nUN;
       u7nUM: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUN: // global
           call _c7nQx() args: 0, res: 0, upd: 0;
     }
 },
 _c7nT9() //  [R1]
         { info_tbl: [(c7nT9,
                       label: block_c7nT9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nT9: // global
           if (R1 & 7 == 1) goto u7nUO; else goto u7nUP;
       u7nUO: // global
           call _c7nPK() args: 0, res: 0, upd: 0;
       u7nUP: // global
           call _c7nQx() args: 0, res: 0, upd: 0;
     }
 },
 _c7nPK() //  []
         { info_tbl: [(c7nPK,
                       label: block_c7nPK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nPK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7nS1; else goto c7nS0;
       c7nS1: // global
           HpAlloc = 32;
           I64[Sp] = block_c7nPK_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7nS0: // global
           I64[Hp - 24] = sat_s7neY_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c7nRY_info;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nRY() //  [R1]
         { info_tbl: [(c7nRY,
                       label: block_c7nRY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nRY: // global
           R3 = R1;
           R2 = Data.Typeable.mkFunTy5_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7nQx() //  []
         { info_tbl: [(c7nQx,
                       label: block_c7nQx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nQx: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7nSh; else goto c7nSg;
       c7nSh: // global
           HpAlloc = 96;
           I64[Sp] = block_c7nQx_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7nSg: // global
           I64[Hp - 88] = sat_s7nfx_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           I64[Hp - 40] = sat_s7nfh_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           I64[Sp] = block_c7nS9_info;
           R2 = Hp - 14;
           R1 = GHC.Fingerprint.fingerprintFingerprints_closure;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nS9() //  [R1]
         { info_tbl: [(c7nS9,
                       label: block_c7nS9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nS9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7nSk; else goto c7nSj;
       c7nSk: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nSj: // global
           _s7nfB::I64 = I64[R1 + 7];
           _s7nfC::I64 = I64[R1 + 15];
           I64[Hp - 48] = Data.Typeable.Internal.TrFun_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s7nfB::I64;
           I64[Hp - 16] = _s7nfC::I64;
           I64[Hp - 8] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp] = Hp - 44;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.332091726 UTC

[section ""data" . Data.Typeable.splitTyConApp_closure" {
     Data.Typeable.splitTyConApp_closure:
         const Data.Typeable.splitTyConApp_info;
         const 0;
 },
 Data.Typeable.splitTyConApp_entry() //  [R2]
         { info_tbl: [(c7nV6,
                       label: Data.Typeable.splitTyConApp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nV6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nVc; else goto c7nVd;
       c7nVc: // global
           R2 = R2;
           R1 = Data.Typeable.splitTyConApp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7nVd: // global
           I64[Sp - 8] = block_c7nV3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nVi; else goto c7nV4;
       u7nVi: // global
           call _c7nV3(R1) args: 0, res: 0, upd: 0;
       c7nV4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nV3() //  [R1]
         { info_tbl: [(c7nV3,
                       label: block_c7nV3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nV3: // global
           I64[Sp] = block_c7nV9_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nV9() //  [R1, R2]
         { info_tbl: [(c7nV9,
                       label: block_c7nV9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nV9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7nVh; else goto c7nVg;
       c7nVh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7nVg: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.333714329 UTC

[section ""data" . Data.Typeable.typeRepArgs_closure" {
     Data.Typeable.typeRepArgs_closure:
         const Data.Typeable.typeRepArgs_info;
         const 0;
 },
 Data.Typeable.typeRepArgs_entry() //  [R2]
         { info_tbl: [(c7nVq,
                       label: Data.Typeable.typeRepArgs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nVq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nVu; else goto c7nVv;
       c7nVu: // global
           R2 = R2;
           R1 = Data.Typeable.typeRepArgs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7nVv: // global
           I64[Sp - 8] = block_c7nVn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nVz; else goto c7nVo;
       u7nVz: // global
           call _c7nVn(R1) args: 0, res: 0, upd: 0;
       c7nVo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nVn() //  [R1]
         { info_tbl: [(c7nVn,
                       label: block_c7nVn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nVn: // global
           I64[Sp] = block_c7nVt_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nVt() //  [R2]
         { info_tbl: [(c7nVt,
                       label: block_c7nVt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nVt: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.334903341 UTC

[section ""data" . Data.Typeable.typeRepTyCon_closure" {
     Data.Typeable.typeRepTyCon_closure:
         const Data.Typeable.typeRepTyCon_info;
         const 0;
 },
 Data.Typeable.typeRepTyCon_entry() //  [R2]
         { info_tbl: [(c7nVE,
                       label: Data.Typeable.typeRepTyCon_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nVE: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepTyCon_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.335689916 UTC

[section ""data" . Data.Typeable.typeRepFingerprint_closure" {
     Data.Typeable.typeRepFingerprint_closure:
         const Data.Typeable.typeRepFingerprint_info;
         const 0;
 },
 Data.Typeable.typeRepFingerprint_entry() //  [R2]
         { info_tbl: [(c7nVL,
                       label: Data.Typeable.typeRepFingerprint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nVL: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepFingerprint_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.336480885 UTC

[section ""data" . Data.Typeable.rnfTypeRep_closure" {
     Data.Typeable.rnfTypeRep_closure:
         const Data.Typeable.rnfTypeRep_info;
 },
 Data.Typeable.rnfTypeRep_entry() //  [R2]
         { info_tbl: [(c7nVS,
                       label: Data.Typeable.rnfTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nVS: // global
           R2 = R2;
           call Data.Typeable.Internal.rnfSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.337293598 UTC

[section ""data" . Data.Typeable.typeOf1_closure" {
     Data.Typeable.typeOf1_closure:
         const Data.Typeable.typeOf1_info;
 },
 Data.Typeable.typeOf1_entry() //  [R2]
         { info_tbl: [(c7nVZ,
                       label: Data.Typeable.typeOf1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nVZ: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.33808899 UTC

[section ""data" . Data.Typeable.typeOf2_closure" {
     Data.Typeable.typeOf2_closure:
         const Data.Typeable.typeOf2_info;
 },
 Data.Typeable.typeOf2_entry() //  [R2]
         { info_tbl: [(c7nW6,
                       label: Data.Typeable.typeOf2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nW6: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.33888793 UTC

[section ""data" . Data.Typeable.typeOf3_closure" {
     Data.Typeable.typeOf3_closure:
         const Data.Typeable.typeOf3_info;
 },
 Data.Typeable.typeOf3_entry() //  [R2]
         { info_tbl: [(c7nWd,
                       label: Data.Typeable.typeOf3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nWd: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.339651517 UTC

[section ""data" . Data.Typeable.typeOf4_closure" {
     Data.Typeable.typeOf4_closure:
         const Data.Typeable.typeOf4_info;
 },
 Data.Typeable.typeOf4_entry() //  [R2]
         { info_tbl: [(c7nWk,
                       label: Data.Typeable.typeOf4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nWk: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.340456971 UTC

[section ""data" . Data.Typeable.typeOf5_closure" {
     Data.Typeable.typeOf5_closure:
         const Data.Typeable.typeOf5_info;
 },
 Data.Typeable.typeOf5_entry() //  [R2]
         { info_tbl: [(c7nWr,
                       label: Data.Typeable.typeOf5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nWr: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.341275809 UTC

[section ""data" . Data.Typeable.typeOf6_closure" {
     Data.Typeable.typeOf6_closure:
         const Data.Typeable.typeOf6_info;
 },
 Data.Typeable.typeOf6_entry() //  [R2]
         { info_tbl: [(c7nWy,
                       label: Data.Typeable.typeOf6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nWy: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.342097511 UTC

[section ""data" . Data.Typeable.typeOf7_closure" {
     Data.Typeable.typeOf7_closure:
         const Data.Typeable.typeOf7_info;
 },
 Data.Typeable.typeOf7_entry() //  [R2]
         { info_tbl: [(c7nWF,
                       label: Data.Typeable.typeOf7_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nWF: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.342751057 UTC

[section ""data" . Data.Typeable.$trModule3_closure" {
     Data.Typeable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.343370465 UTC

[section ""data" . Data.Typeable.$trModule1_closure" {
     Data.Typeable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.343930375 UTC

[section ""data" . Data.Typeable.$trModule_closure" {
     Data.Typeable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Typeable.$trModule3_closure+1;
         const Data.Typeable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.344722134 UTC

[section ""data" . Data.Typeable.showsTypeRep_closure" {
     Data.Typeable.showsTypeRep_closure:
         const Data.Typeable.showsTypeRep_info;
         const 0;
 },
 Data.Typeable.showsTypeRep_entry() //  [R2]
         { info_tbl: [(c7nWP,
                       label: Data.Typeable.showsTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nWP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nWQ; else goto c7nWR;
       c7nWQ: // global
           R2 = R2;
           R1 = Data.Typeable.showsTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7nWR: // global
           I64[Sp - 8] = block_c7nWM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7nWV; else goto c7nWN;
       u7nWV: // global
           call _c7nWM(R1) args: 0, res: 0, upd: 0;
       c7nWN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7nWM() //  [R1]
         { info_tbl: [(c7nWM,
                       label: block_c7nWM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nWM: // global
           R3 = P64[R1 + 7];
           R2 = GHC.Show.$fShow(,)1_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.345862542 UTC

[section ""relreadonly" . S7nhj_srt" {
     S7nhj_srt:
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Typeable.cast_closure;
         const Data.Typeable.eqT_closure;
         const Data.Typeable.gcast_closure;
         const Data.Typeable.gcast1_closure;
         const Data.Typeable.gcast2_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Typeable.funResultTy_closure;
         const Data.Typeable.mkFunTy1_closure;
         const Data.Typeable.Internal.showTypeable_closure;
         const GHC.Err.error_closure;
         const GHC.Fingerprint.fingerprintFingerprints_closure;
         const Data.Typeable.mkFunTy_closure;
         const Data.Typeable.mkFunTy5_closure;
         const Data.Typeable.Internal.$wgo_closure;
         const Data.Typeable.splitTyConApp_closure;
         const Data.Typeable.typeRepArgs_closure;
         const Data.Typeable.Internal.someTypeRepTyCon_closure;
         const Data.Typeable.Internal.someTypeRepFingerprint_closure;
         const Data.Typeable.showsTypeRep_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.346773243 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:40.348093297 UTC

[section ""data" . Data.Typeable.typeOf_closure" {
     Data.Typeable.typeOf_closure:
         const Data.Typeable.typeOf_info;
 },
 Data.Typeable.typeOf_entry() //  [R2]
         { info_tbl: [(c7nX0,
                       label: Data.Typeable.typeOf_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nX0: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.351632354 UTC

[section ""data" . Data.Typeable.typeRep_closure" {
     Data.Typeable.typeRep_closure:
         const Data.Typeable.typeRep_info;
 },
 Data.Typeable.typeRep_entry() //  [R2, R3]
         { info_tbl: [(c7nXb,
                       label: Data.Typeable.typeRep_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nXb: // global
           R3 = R3;
           R2 = R2;
           call Data.Typeable.Internal.someTypeRep_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.355307202 UTC

[section ""data" . Data.Typeable.cast_closure" {
     Data.Typeable.cast_closure:
         const Data.Typeable.cast_info;
         const 0;
 },
 Data.Typeable.cast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nXs,
                       label: Data.Typeable.cast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nXs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nXt; else goto c7nXu;
       c7nXt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.cast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nXu: // global
           I64[Sp - 16] = block_c7nXm_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nXm() //  [R1]
         { info_tbl: [(c7nXm,
                       label: block_c7nXm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nXm: // global
           if (R1 & 7 == 1) goto c7nXp; else goto c7nXq;
       c7nXp: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nXq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nXD; else goto c7nXC;
       c7nXD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nXC: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.362760422 UTC

[section ""data" . Data.Typeable.eqT1_closure" {
     Data.Typeable.eqT1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.3647478 UTC

[section ""data" . Data.Typeable.eqT_closure" {
     Data.Typeable.eqT_closure:
         const Data.Typeable.eqT_info;
         const 0;
 },
 Data.Typeable.eqT_entry() //  [R2, R3]
         { info_tbl: [(c7nY2,
                       label: Data.Typeable.eqT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nY2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7nY3; else goto c7nY4;
       c7nY3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.eqT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nY4: // global
           I64[Sp - 8] = block_c7nXW_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nXW() //  [R1]
         { info_tbl: [(c7nXW,
                       label: block_c7nXW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nXW: // global
           if (R1 & 7 == 1) goto c7nXZ; else goto c7nY0;
       c7nXZ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nY0: // global
           R1 = Data.Typeable.eqT1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.3709671 UTC

[section ""data" . Data.Typeable.gcast_closure" {
     Data.Typeable.gcast_closure:
         const Data.Typeable.gcast_info;
         const 0;
 },
 Data.Typeable.gcast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nYx,
                       label: Data.Typeable.gcast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nYx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nYy; else goto c7nYz;
       c7nYy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nYz: // global
           I64[Sp - 16] = block_c7nYr_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nYr() //  [R1]
         { info_tbl: [(c7nYr,
                       label: block_c7nYr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nYr: // global
           if (R1 & 7 == 1) goto c7nYu; else goto c7nYv;
       c7nYu: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nYv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nYI; else goto c7nYH;
       c7nYI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nYH: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.377165375 UTC

[section ""data" . Data.Typeable.gcast1_closure" {
     Data.Typeable.gcast1_closure:
         const Data.Typeable.gcast1_info;
         const 0;
 },
 Data.Typeable.gcast1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nZ6,
                       label: Data.Typeable.gcast1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nZ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nZ7; else goto c7nZ8;
       c7nZ7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nZ8: // global
           I64[Sp - 16] = block_c7nZ0_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nZ0() //  [R1]
         { info_tbl: [(c7nZ0,
                       label: block_c7nZ0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nZ0: // global
           if (R1 & 7 == 1) goto c7nZ3; else goto c7nZ4;
       c7nZ3: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nZ4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nZh; else goto c7nZg;
       c7nZh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nZg: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.38388804 UTC

[section ""data" . Data.Typeable.gcast2_closure" {
     Data.Typeable.gcast2_closure:
         const Data.Typeable.gcast2_info;
         const 0;
 },
 Data.Typeable.gcast2_entry() //  [R2, R3, R4]
         { info_tbl: [(c7nZF,
                       label: Data.Typeable.gcast2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nZF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7nZG; else goto c7nZH;
       c7nZG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7nZH: // global
           I64[Sp - 16] = block_c7nZz_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7nZz() //  [R1]
         { info_tbl: [(c7nZz,
                       label: block_c7nZz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7nZz: // global
           if (R1 & 7 == 1) goto c7nZC; else goto c7nZD;
       c7nZC: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7nZD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7nZQ; else goto c7nZP;
       c7nZQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7nZP: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.390383328 UTC

[section ""data" . Data.Typeable.mkFunTy1_closure" {
     Data.Typeable.mkFunTy1_closure:
         const Data.Typeable.mkFunTy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy1_entry() //  [R1]
         { info_tbl: [(c7o0k,
                       label: Data.Typeable.mkFunTy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o0k: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c7o0l; else goto c7o0m;
       c7o0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7o0m: // global
           (_c7o07::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7o07::I64 == 0) goto c7o09; else goto c7o08;
       c7o09: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7o08: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7o07::I64;
           I64[Sp - 24] = block_c7o0a_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7o0a() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7o0a,
                       label: block_c7o0a_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o0a: // global
           I64[Sp - 40] = block_c7o0e_info;
           R6 = 0;
           _s7nbn::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s7nbm::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s7nbl::P64 = R3;
           R3 = 5595830777317938557;
           _s7nbk::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s7nbk::I64;
           P64[Sp - 24] = _s7nbl::P64;
           P64[Sp - 16] = _s7nbm::P64;
           P64[Sp - 8] = _s7nbn::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7o0e() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7o0e,
                       label: block_c7o0e_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o0e: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7o0f() args: 0, res: 0, upd: 0;
     }
 },
 _c7o0f() //  []
         { info_tbl: [(c7o0f,
                       label: block_c7o0f_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o0f: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7o0q; else goto c7o0p;
       c7o0q: // global
           HpAlloc = 96;
           I64[Sp] = block_c7o0f_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7o0p: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.409831724 UTC

[section ""data" . Data.Typeable.funResultTy_closure" {
     Data.Typeable.funResultTy_closure:
         const Data.Typeable.funResultTy_info;
         const 0;
 },
 Data.Typeable.funResultTy_entry() //  [R2, R3]
         { info_tbl: [(c7o10,
                       label: Data.Typeable.funResultTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o10: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7o14; else goto c7o15;
       c7o14: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.funResultTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7o15: // global
           I64[Sp - 16] = block_c7o0X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7oar; else goto c7o0Y;
       u7oar: // global
           call _c7o0X(R1) args: 0, res: 0, upd: 0;
       c7o0Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o0X() //  [R1]
         { info_tbl: [(c7o0X,
                       label: block_c7o0X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o0X: // global
           I64[Sp] = block_c7o13_info;
           _s7nbz::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7nbz::P64;
           if (R1 & 7 != 0) goto u7oaq; else goto c7o17;
       u7oaq: // global
           call _c7o13(R1) args: 0, res: 0, upd: 0;
       c7o17: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o13() //  [R1]
         { info_tbl: [(c7o13,
                       label: block_c7o13_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o13: // global
           I64[Sp - 8] = block_c7o1d_info;
           _s7nbB::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7nbB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oas; else goto c7o3B;
       u7oas: // global
           call _c7o1d(R1) args: 0, res: 0, upd: 0;
       c7o3B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o1d() //  [R1]
         { info_tbl: [(c7o1d,
                       label: block_c7o1d_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o1d: // global
           _c7o8H::P64 = R1 & 7;
           if (_c7o8H::P64 < 3) goto u7o9n; else goto u7o9o;
       u7o9n: // global
           if (_c7o8H::P64 < 2) goto c7o3I; else goto c7o6e;
       c7o3I: // global
           I64[Sp] = block_c7o3F_info;
           R1 = Data.Typeable.mkFunTy1_closure;
           if (R1 & 7 != 0) goto u7oat; else goto c7o3J;
       u7oat: // global
           call _c7o3F(R1) args: 0, res: 0, upd: 0;
       c7o3J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o6e: // global
           I64[Sp - 8] = block_c7o4O_info;
           _s7nd4::P64 = P64[R1 + 22];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7nd4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oau; else goto c7o6f;
       u7oau: // global
           call _c7o4O(R1) args: 0, res: 0, upd: 0;
       c7o6f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7o9o: // global
           if (_c7o8H::P64 < 4) goto c7o84; else goto c7o8u;
       c7o84: // global
           I64[Sp - 8] = block_c7o6E_info;
           _s7ndU::P64 = P64[R1 + 21];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7ndU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oav; else goto c7o85;
       u7oav: // global
           call _c7o6E(R1) args: 0, res: 0, upd: 0;
       c7o85: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o8u: // global
           I64[Sp] = block_c7o8s_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = Data.Typeable.mkFunTy1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7o3F() //  [R1]
         { info_tbl: [(c7o3F,
                       label: block_c7o3F_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o3F: // global
           _c7o9c::P64 = R1 & 7;
           if (_c7o9c::P64 < 3) goto u7o9t; else goto c7o4q;
       u7o9t: // global
           if (_c7o9c::P64 < 2) goto c7o3Q; else goto c7o42;
       c7o3Q: // global
           I64[Sp] = block_c7o3N_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oaM; else goto c7o3R;
       u7oaM: // global
           call _c7o3N(R1) args: 0, res: 0, upd: 0;
       c7o3R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o42: // global
           I64[Sp - 16] = block_c7o40_info;
           _s7ncE::I64 = I64[R1 + 30];
           _s7ncF::I64 = I64[R1 + 38];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7ncF::I64;
           I64[Sp] = _s7ncE::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7oaN; else goto c7o43;
       u7oaN: // global
           call _c7o40(R1) args: 0, res: 0, upd: 0;
       c7o43: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o4q: // global
           I64[Sp - 16] = block_c7o4o_info;
           _s7ncP::I64 = I64[R1 + 29];
           _s7ncQ::I64 = I64[R1 + 37];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7ncQ::I64;
           I64[Sp] = _s7ncP::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7oaO; else goto c7o4r;
       u7oaO: // global
           call _c7o4o(R1) args: 0, res: 0, upd: 0;
       c7o4r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o3N() //  [R1]
         { info_tbl: [(c7o3N,
                       label: block_c7o3N_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o3N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7o3X; else goto c7o3W;
       c7o3X: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o3W: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7nbC() args: 0, res: 0, upd: 0;
     }
 },
 _c7o40() //  [R1]
         { info_tbl: [(c7o40,
                       label: block_c7o40_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o40: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7o49; else goto c7o48;
       c7o49: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o48: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7o4l; else goto u7o9B;
       c7o4l: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7o4k; else goto u7o9C;
       c7o4k: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7o9C: // global
           Sp = Sp + 40;
           goto u7oaR;
       u7o9B: // global
           Sp = Sp + 40;
           goto u7oaR;
       u7oaR: // global
           call _c7o81() args: 0, res: 0, upd: 0;
     }
 },
 _c7o4o() //  [R1]
         { info_tbl: [(c7o4o,
                       label: block_c7o4o_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o4o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7o4x; else goto c7o4w;
       c7o4x: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o4w: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7o4J; else goto u7o9E;
       c7o4J: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7o4I; else goto u7o9F;
       c7o4I: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7o9F: // global
           Sp = Sp + 40;
           goto u7oaU;
       u7o9E: // global
           Sp = Sp + 40;
           goto u7oaU;
       u7oaU: // global
           call _c7o81() args: 0, res: 0, upd: 0;
     }
 },
 _c7o4O() //  [R1]
         { info_tbl: [(c7o4O,
                       label: block_c7o4O_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o4O: // global
           _c7o8Y::P64 = R1 & 7;
           if (_c7o8Y::P64 < 3) goto u7o9u; else goto c7o6z;
       u7o9u: // global
           if (_c7o8Y::P64 < 2) goto c7o6m; else goto c7o6v;
       c7o6m: // global
           I64[Sp] = block_c7o6j_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oaW; else goto c7o6n;
       u7oaW: // global
           call _c7o6j(R1) args: 0, res: 0, upd: 0;
       c7o6n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o6v: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7oaY;
       c7o6z: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7oaY;
       u7oaY: // global
           call _s7nd5() args: 0, res: 0, upd: 0;
     }
 },
 _c7o6j() //  [R1]
         { info_tbl: [(c7o6j,
                       label: block_c7o6j_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o6j: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7nd5() args: 0, res: 0, upd: 0;
     }
 },
 _s7nd5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nd5: // global
           I64[Sp - 8] = block_c7o4T_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oby; else goto c7o4V;
       u7oby: // global
           call _c7o4T(R1) args: 0, res: 0, upd: 0;
       c7o4V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o4T() //  [R1]
         { info_tbl: [(c7o4T,
                       label: block_c7o4T_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o4T: // global
           _s7nd6::I64 = I64[Sp + 16];
           _s7nd7::I64 = I64[Sp + 8];
           _c7o8Z::P64 = R1 & 7;
           if (_c7o8Z::P64 < 3) goto u7o9v; else goto u7o9w;
       u7o9v: // global
           if (_c7o8Z::P64 < 2) goto c7o52; else goto c7o5m;
       c7o52: // global
           I64[Sp] = block_c7o4Z_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oaZ; else goto c7o53;
       u7oaZ: // global
           call _c7o4Z(R1) args: 0, res: 0, upd: 0;
       c7o53: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o5m: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o61; else goto c7o5q;
       c7o5q: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 30]) goto c7o5D; else goto u7o9N;
       c7o5D: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 38]) goto c7o5C; else goto u7o9O;
       c7o5C: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ob8;
       u7o9O: // global
           Sp = Sp + 48;
           goto u7ob7;
       u7o9N: // global
           Sp = Sp + 48;
           goto u7ob7;
       u7o9w: // global
           if (_c7o8Z::P64 < 4) goto c7o5E; else goto c7o5W;
       c7o5E: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o61; else goto c7o5I;
       c7o5I: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 29]) goto c7o5V; else goto u7o9Q;
       c7o5V: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 37]) goto c7o5U; else goto u7o9R;
       c7o5U: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ob8;
       u7o9R: // global
           Sp = Sp + 48;
           goto u7ob7;
       u7o9Q: // global
           Sp = Sp + 48;
           goto u7ob7;
       c7o5W: // global
           Hp = Hp + 16;
           _s7nd8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o61; else goto c7o60;
       c7o61: // global
           HpAlloc = 16;
           R1 = _s7nd8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o60: // global
           if (_s7nd6::I64 == I64[_s7nd8::P64 + 20]) goto c7o6d; else goto u7o9T;
       c7o6d: // global
           if (_s7nd7::I64 == I64[_s7nd8::P64 + 28]) goto c7o6c; else goto u7o9U;
       c7o6c: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7ob8;
       u7ob8: // global
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7o9U: // global
           Sp = Sp + 48;
           goto u7ob7;
       u7o9T: // global
           Sp = Sp + 48;
           goto u7ob7;
       u7ob7: // global
           call _c7o81() args: 0, res: 0, upd: 0;
     }
 },
 _c7o4Z() //  [R1]
         { info_tbl: [(c7o4Z,
                       label: block_c7o4Z_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o4Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7o59; else goto c7o58;
       c7o59: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o58: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7o5l; else goto u7o9K;
       c7o5l: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7o5k; else goto u7o9L;
       c7o5k: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7o9L: // global
           Sp = Sp + 48;
           goto u7oba;
       u7o9K: // global
           Sp = Sp + 48;
           goto u7oba;
       u7oba: // global
           call _c7o81() args: 0, res: 0, upd: 0;
     }
 },
 _c7o6E() //  [R1]
         { info_tbl: [(c7o6E,
                       label: block_c7o6E_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o6E: // global
           _c7o8K::P64 = R1 & 7;
           if (_c7o8K::P64 < 3) goto u7o9x; else goto c7o8p;
       u7o9x: // global
           if (_c7o8K::P64 < 2) goto c7o8c; else goto c7o8l;
       c7o8c: // global
           I64[Sp] = block_c7o89_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7obd; else goto c7o8d;
       u7obd: // global
           call _c7o89(R1) args: 0, res: 0, upd: 0;
       c7o8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o8l: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7obf;
       c7o8p: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7obf;
       u7obf: // global
           call _s7ndV() args: 0, res: 0, upd: 0;
     }
 },
 _c7o89() //  [R1]
         { info_tbl: [(c7o89,
                       label: block_c7o89_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o89: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7ndV() args: 0, res: 0, upd: 0;
     }
 },
 _s7ndV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7ndV: // global
           I64[Sp - 8] = block_c7o6J_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7obz; else goto c7o6L;
       u7obz: // global
           call _c7o6J(R1) args: 0, res: 0, upd: 0;
       c7o6L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o6J() //  [R1]
         { info_tbl: [(c7o6J,
                       label: block_c7o6J_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o6J: // global
           _s7ndW::I64 = I64[Sp + 16];
           _s7ndX::I64 = I64[Sp + 8];
           _c7o8L::P64 = R1 & 7;
           if (_c7o8L::P64 < 3) goto u7o9y; else goto u7o9z;
       u7o9y: // global
           if (_c7o8L::P64 < 2) goto c7o6S; else goto c7o7c;
       c7o6S: // global
           I64[Sp] = block_c7o6P_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7obg; else goto c7o6T;
       u7obg: // global
           call _c7o6P(R1) args: 0, res: 0, upd: 0;
       c7o6T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o7c: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o7R; else goto c7o7g;
       c7o7g: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 30]) goto c7o7t; else goto u7oa2;
       c7o7t: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 38]) goto c7o7s; else goto u7oa3;
       c7o7s: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7obp;
       u7oa3: // global
           Sp = Sp + 48;
           goto u7obo;
       u7oa2: // global
           Sp = Sp + 48;
           goto u7obo;
       u7o9z: // global
           if (_c7o8L::P64 < 4) goto c7o7u; else goto c7o7M;
       c7o7u: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o7R; else goto c7o7y;
       c7o7y: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 29]) goto c7o7L; else goto u7oa5;
       c7o7L: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 37]) goto c7o7K; else goto u7oa6;
       c7o7K: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7obp;
       u7oa6: // global
           Sp = Sp + 48;
           goto u7obo;
       u7oa5: // global
           Sp = Sp + 48;
           goto u7obo;
       c7o7M: // global
           Hp = Hp + 16;
           _s7ndY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o7R; else goto c7o7Q;
       c7o7R: // global
           HpAlloc = 16;
           R1 = _s7ndY::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o7Q: // global
           if (_s7ndW::I64 == I64[_s7ndY::P64 + 20]) goto c7o83; else goto u7oa8;
       c7o83: // global
           if (_s7ndX::I64 == I64[_s7ndY::P64 + 28]) goto c7o82; else goto u7oa9;
       c7o82: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7obp;
       u7obp: // global
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7oa9: // global
           Sp = Sp + 48;
           goto u7obo;
       u7oa8: // global
           Sp = Sp + 48;
           goto u7obo;
       u7obo: // global
           call _c7o81() args: 0, res: 0, upd: 0;
     }
 },
 _c7o6P() //  [R1]
         { info_tbl: [(c7o6P,
                       label: block_c7o6P_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o6P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7o6Z; else goto c7o6Y;
       c7o6Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o6Y: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7o7b; else goto u7o9Z;
       c7o7b: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7o7a; else goto u7oa0;
       c7o7a: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7nbC() args: 0, res: 0, upd: 0;
       u7oa0: // global
           Sp = Sp + 48;
           goto u7obr;
       u7o9Z: // global
           Sp = Sp + 48;
           goto u7obr;
       u7obr: // global
           call _c7o81() args: 0, res: 0, upd: 0;
     }
 },
 _c7o81() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o81: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7o8s() //  [R1]
         { info_tbl: [(c7o8s,
                       label: block_c7o8s_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o8s: // global
           if (R1 & 7 == 1) goto u7oab; else goto c7o8B;
       u7oab: // global
           Sp = Sp + 24;
           call _c7o8A() args: 0, res: 0, upd: 0;
       c7o8B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7o8G; else goto c7o8F;
       c7o8G: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o8F: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7nbC() args: 0, res: 0, upd: 0;
     }
 },
 _s7nbC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nbC: // global
           I64[Sp - 8] = block_c7o1i_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7obw; else goto c7o1k;
       u7obw: // global
           call _c7o1i(R1) args: 0, res: 0, upd: 0;
       c7o1k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o1i() //  [R1]
         { info_tbl: [(c7o1i,
                       label: block_c7o1i_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o1i: // global
           if (R1 & 7 == 4) goto c7o3b; else goto u7oad;
       c7o3b: // global
           I64[Sp] = block_c7o1v_info;
           _s7nbI::P64 = P64[R1 + 12];
           R1 = P64[R1 + 4];
           P64[Sp + 16] = _s7nbI::P64;
           if (R1 & 7 != 0) goto u7oaw; else goto c7o3c;
       u7oaw: // global
           call _c7o1v(R1) args: 0, res: 0, upd: 0;
       c7o3c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7oad: // global
           Sp = Sp + 24;
           call _c7o8A() args: 0, res: 0, upd: 0;
     }
 },
 _c7o1v() //  [R1]
         { info_tbl: [(c7o1v,
                       label: block_c7o1v_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o1v: // global
           _c7o9l::P64 = R1 & 7;
           if (_c7o9l::P64 < 3) goto u7o9p; else goto u7o9q;
       u7o9p: // global
           if (_c7o9l::P64 < 2) goto c7o3j; else goto c7o3s;
       c7o3j: // global
           I64[Sp] = block_c7o3g_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oay; else goto c7o3k;
       u7oay: // global
           call _c7o3g(R1) args: 0, res: 0, upd: 0;
       c7o3k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o3s: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7oaB;
       u7o9q: // global
           if (_c7o9l::P64 < 4) goto c7o3w; else goto c7o3A;
       c7o3w: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7oaB;
       c7o3A: // global
           I64[Sp] = I64[R1 + 20];
           I64[Sp - 8] = I64[R1 + 28];
           Sp = Sp - 8;
           goto u7oaB;
       u7oaB: // global
           call _s7nbJ() args: 0, res: 0, upd: 0;
     }
 },
 _c7o3g() //  [R1]
         { info_tbl: [(c7o3g,
                       label: block_c7o3g_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o3g: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7nbJ() args: 0, res: 0, upd: 0;
     }
 },
 _s7nbJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nbJ: // global
           I64[Sp - 8] = block_c7o1A_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7obx; else goto c7o1C;
       u7obx: // global
           call _c7o1A(R1) args: 0, res: 0, upd: 0;
       c7o1C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7o1A() //  [R1]
         { info_tbl: [(c7o1A,
                       label: block_c7o1A_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o1A: // global
           _s7nbI::P64 = P64[Sp + 32];
           _s7nbK::I64 = I64[Sp + 16];
           _s7nbL::I64 = I64[Sp + 8];
           _c7o9m::P64 = R1 & 7;
           if (_c7o9m::P64 < 3) goto u7o9r; else goto u7o9s;
       u7o9r: // global
           if (_c7o9m::P64 < 2) goto c7o1J; else goto c7o27;
       c7o1J: // global
           I64[Sp] = block_c7o1G_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oaC; else goto c7o1K;
       u7oaC: // global
           call _c7o1G(R1) args: 0, res: 0, upd: 0;
       c7o1K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7o27: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o2U; else goto c7o2b;
       c7o2b: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 30]) goto c7o2s; else goto u7oak;
       c7o2s: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 38]) goto c7o2r; else goto u7oal;
       c7o2r: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oal: // global
           Sp = Sp + 40;
           goto u7oaI;
       u7oak: // global
           Sp = Sp + 40;
           goto u7oaI;
       u7o9s: // global
           if (_c7o9m::P64 < 4) goto c7o2t; else goto c7o2P;
       c7o2t: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o2U; else goto c7o2x;
       c7o2x: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 29]) goto c7o2O; else goto u7oam;
       c7o2O: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 37]) goto c7o2N; else goto u7oan;
       c7o2N: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oan: // global
           Sp = Sp + 40;
           goto u7oaI;
       u7oam: // global
           Sp = Sp + 40;
           goto u7oaI;
       c7o2P: // global
           Hp = Hp + 32;
           _s7nbM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7o2U; else goto c7o2T;
       c7o2U: // global
           HpAlloc = 32;
           R1 = _s7nbM::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o2T: // global
           if (_s7nbK::I64 == I64[_s7nbM::P64 + 20]) goto c7o3a; else goto u7oao;
       c7o3a: // global
           if (_s7nbL::I64 == I64[_s7nbM::P64 + 28]) goto c7o39; else goto u7oap;
       c7o39: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7nbI::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oap: // global
           Sp = Sp + 40;
           goto u7oaI;
       u7oao: // global
           Sp = Sp + 40;
           goto u7oaI;
       u7oaI: // global
           call _c7o34() args: 0, res: 0, upd: 0;
     }
 },
 _c7o1G() //  [R1]
         { info_tbl: [(c7o1G,
                       label: block_c7o1G_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o1G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7o1Q; else goto c7o1P;
       c7o1Q: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7o1P: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7o26; else goto u7oai;
       c7o26: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7o25; else goto u7oaj;
       c7o25: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oaj: // global
           Sp = Sp + 40;
           goto u7oaK;
       u7oai: // global
           Sp = Sp + 40;
           goto u7oaK;
       u7oaK: // global
           call _c7o34() args: 0, res: 0, upd: 0;
     }
 },
 _c7o34() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o34: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7o8A() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7o8A: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.470291023 UTC

[section ""cstring" . Data.Typeable.mkFunTy16_bytes" {
     Data.Typeable.mkFunTy16_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.472251155 UTC

[section ""data" . Data.Typeable.mkFunTy15_closure" {
     Data.Typeable.mkFunTy15_closure:
         const Data.Typeable.mkFunTy15_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy15_entry() //  [R1]
         { info_tbl: [(c7oed,
                       label: Data.Typeable.mkFunTy15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oed: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oee; else goto c7oef;
       c7oee: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oef: // global
           (_c7oea::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oea::I64 == 0) goto c7oec; else goto c7oeb;
       c7oec: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7oeb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oea::I64;
           R2 = Data.Typeable.mkFunTy16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.47608048 UTC

[section ""cstring" . Data.Typeable.$trModule4_bytes" {
     Data.Typeable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.4779839 UTC

[section ""data" . Data.Typeable.mkFunTy14_closure" {
     Data.Typeable.mkFunTy14_closure:
         const Data.Typeable.mkFunTy14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy14_entry() //  [R1]
         { info_tbl: [(c7oeu,
                       label: Data.Typeable.mkFunTy14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oeu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oev; else goto c7oew;
       c7oev: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oew: // global
           (_c7oer::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oer::I64 == 0) goto c7oet; else goto c7oes;
       c7oet: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7oes: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oer::I64;
           R2 = Data.Typeable.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.481857419 UTC

[section ""cstring" . Data.Typeable.$trModule2_bytes" {
     Data.Typeable.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.48369658 UTC

[section ""data" . Data.Typeable.mkFunTy13_closure" {
     Data.Typeable.mkFunTy13_closure:
         const Data.Typeable.mkFunTy13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy13_entry() //  [R1]
         { info_tbl: [(c7oeL,
                       label: Data.Typeable.mkFunTy13_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oeL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oeM; else goto c7oeN;
       c7oeM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oeN: // global
           (_c7oeI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oeI::I64 == 0) goto c7oeK; else goto c7oeJ;
       c7oeK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7oeJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oeI::I64;
           R2 = Data.Typeable.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.487560833 UTC

[section ""cstring" . Data.Typeable.mkFunTy12_bytes" {
     Data.Typeable.mkFunTy12_bytes:
         I8[] [46,47,68,97,116,97,47,84,121,112,101,97,98,108,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.490549316 UTC

[section ""data" . Data.Typeable.mkFunTy11_closure" {
     Data.Typeable.mkFunTy11_closure:
         const Data.Typeable.mkFunTy11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy11_entry() //  [R1]
         { info_tbl: [(c7of2,
                       label: Data.Typeable.mkFunTy11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7of2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7of3; else goto c7of4;
       c7of3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7of4: // global
           (_c7oeZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oeZ::I64 == 0) goto c7of1; else goto c7of0;
       c7of1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7of0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oeZ::I64;
           R2 = Data.Typeable.mkFunTy12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.494490585 UTC

[section ""data" . Data.Typeable.mkFunTy10_closure" {
     Data.Typeable.mkFunTy10_closure:
         const GHC.Types.I#_con_info;
         const 171;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.496127498 UTC

[section ""data" . Data.Typeable.mkFunTy9_closure" {
     Data.Typeable.mkFunTy9_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.49777516 UTC

[section ""data" . Data.Typeable.mkFunTy8_closure" {
     Data.Typeable.mkFunTy8_closure:
         const GHC.Types.I#_con_info;
         const 172;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.499352175 UTC

[section ""data" . Data.Typeable.mkFunTy7_closure" {
     Data.Typeable.mkFunTy7_closure:
         const GHC.Types.I#_con_info;
         const 55;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.500908711 UTC

[section ""data" . Data.Typeable.mkFunTy6_closure" {
     Data.Typeable.mkFunTy6_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const Data.Typeable.mkFunTy14_closure;
         const Data.Typeable.mkFunTy13_closure;
         const Data.Typeable.mkFunTy11_closure;
         const Data.Typeable.mkFunTy10_closure+1;
         const Data.Typeable.mkFunTy9_closure+1;
         const Data.Typeable.mkFunTy8_closure+1;
         const Data.Typeable.mkFunTy7_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.503181276 UTC

[section ""data" . Data.Typeable.mkFunTy5_closure" {
     Data.Typeable.mkFunTy5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const Data.Typeable.mkFunTy15_closure;
         const Data.Typeable.mkFunTy6_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.504896233 UTC

[section ""cstring" . Data.Typeable.mkFunTy4_bytes" {
     Data.Typeable.mkFunTy4_bytes:
         I8[] [109,107,70,117,110,84,121,58,32,65,116,116,101,109,112,116,101,100,32,116,111,32,99,111,110,115,116,114,117,99,116,32,102,117,110,99,116,105,111,110,32,116,121,112,101,32,102,114,111,109,32,110,111,110,45,108,105,102,116,101,100,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.506592346 UTC

[section ""cstring" . Data.Typeable.mkFunTy3_bytes" {
     Data.Typeable.mkFunTy3_bytes:
         I8[] [116,121,112,101,58,32,97,114,103,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.508192492 UTC

[section ""cstring" . Data.Typeable.mkFunTy2_bytes" {
     Data.Typeable.mkFunTy2_bytes:
         I8[] [44,32,114,101,115,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.513544898 UTC

[section ""data" . Data.Typeable.mkFunTy_closure" {
     Data.Typeable.mkFunTy_closure:
         const Data.Typeable.mkFunTy_info;
         const 0;
 },
 sat_s7neV_entry() //  [R1]
         { info_tbl: [(c7ofU,
                       label: sat_s7neV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ofU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ofV; else goto c7ofW;
       c7ofV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ofW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s7neW_entry() //  [R1]
         { info_tbl: [(c7ofX,
                       label: sat_s7neW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ofX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7og1; else goto c7og0;
       c7og1: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7og0: // global
           _s7neR::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7neV_info;
           P64[Hp] = _s7neR::P64;
           R3 = Hp - 16;
           R2 = Data.Typeable.mkFunTy2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7neX_entry() //  [R1]
         { info_tbl: [(c7og4,
                       label: sat_s7neX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7og4: // global
           _s7neX::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c7og5; else goto c7og6;
       c7og6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7og8; else goto c7og7;
       c7og8: // global
           HpAlloc = 24;
           goto c7og5;
       c7og5: // global
           R1 = _s7neX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7og7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7neX::P64;
           _s7neP::P64 = P64[_s7neX::P64 + 16];
           _s7neR::P64 = P64[_s7neX::P64 + 24];
           I64[Hp - 16] = sat_s7neW_info;
           P64[Hp] = _s7neR::P64;
           I64[Sp - 32] = block_c7og2_info;
           R3 = _s7neP::P64;
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = GHC.Types.[]_closure+1;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7og2() //  [R1]
         { info_tbl: [(c7og2,
                       label: block_c7og2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7og2: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7neY_entry() //  [R1]
         { info_tbl: [(c7ogc,
                       label: sat_s7neY_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ogc: // global
           _s7neY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7ogd; else goto c7oge;
       c7oge: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ogg; else goto c7ogf;
       c7ogg: // global
           HpAlloc = 32;
           goto c7ogd;
       c7ogd: // global
           R1 = _s7neY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ogf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7neY::P64;
           _s7neP::P64 = P64[_s7neY::P64 + 16];
           _s7neR::P64 = P64[_s7neY::P64 + 24];
           I64[Hp - 24] = sat_s7neX_info;
           P64[Hp - 8] = _s7neP::P64;
           P64[Hp] = _s7neR::P64;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7nfx_entry() //  [R1]
         { info_tbl: [(c7ogE,
                       label: sat_s7nfx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ogE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ogF; else goto c7ogG;
       c7ogF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ogG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7ogv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7oh4; else goto c7ogw;
       u7oh4: // global
           call _c7ogv(R1) args: 0, res: 0, upd: 0;
       c7ogw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7ogv() //  [R1]
         { info_tbl: [(c7ogv,
                       label: block_c7ogv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ogv: // global
           _c7ogD::P64 = R1 & 7;
           if (_c7ogD::P64 < 3) goto u7oh2; else goto u7oh3;
       u7oh2: // global
           if (_c7ogD::P64 < 2) goto c7ogz; else goto c7ogA;
       c7ogz: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7ogA: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oh1; else goto c7ogO;
       c7ogO: // global
           _s7nfj::I64 = I64[_s7nfi::P64 + 30];
           _s7nfk::I64 = I64[_s7nfi::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfj::I64;
           I64[Hp] = _s7nfk::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7oh3: // global
           if (_c7ogD::P64 < 4) goto c7ogB; else goto c7ogC;
       c7ogB: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oh1; else goto c7ogU;
       c7ogU: // global
           _s7nfo::I64 = I64[_s7nfi::P64 + 29];
           _s7nfp::I64 = I64[_s7nfi::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfo::I64;
           I64[Hp] = _s7nfp::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7ogC: // global
           Hp = Hp + 24;
           _s7nfi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oh1; else goto c7oh0;
       c7oh1: // global
           HpAlloc = 24;
           R1 = _s7nfi::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7oh0: // global
           _s7nft::I64 = I64[_s7nfi::P64 + 20];
           _s7nfu::I64 = I64[_s7nfi::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nft::I64;
           I64[Hp] = _s7nfu::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7nfh_entry() //  [R1]
         { info_tbl: [(c7ohj,
                       label: sat_s7nfh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ohj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ohk; else goto c7ohl;
       c7ohk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ohl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7oha_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ohJ; else goto c7ohb;
       u7ohJ: // global
           call _c7oha(R1) args: 0, res: 0, upd: 0;
       c7ohb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7oha() //  [R1]
         { info_tbl: [(c7oha,
                       label: block_c7oha_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oha: // global
           _c7ohi::P64 = R1 & 7;
           if (_c7ohi::P64 < 3) goto u7ohH; else goto u7ohI;
       u7ohH: // global
           if (_c7ohi::P64 < 2) goto c7ohe; else goto c7ohf;
       c7ohe: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7ohf: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7ohG; else goto c7oht;
       c7oht: // global
           _s7nf3::I64 = I64[_s7nf2::P64 + 30];
           _s7nf4::I64 = I64[_s7nf2::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nf3::I64;
           I64[Hp] = _s7nf4::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7ohI: // global
           if (_c7ohi::P64 < 4) goto c7ohg; else goto c7ohh;
       c7ohg: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7ohG; else goto c7ohz;
       c7ohz: // global
           _s7nf8::I64 = I64[_s7nf2::P64 + 29];
           _s7nf9::I64 = I64[_s7nf2::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nf8::I64;
           I64[Hp] = _s7nf9::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7ohh: // global
           Hp = Hp + 24;
           _s7nf2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7ohG; else goto c7ohF;
       c7ohG: // global
           HpAlloc = 24;
           R1 = _s7nf2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7ohF: // global
           _s7nfd::I64 = I64[_s7nf2::P64 + 20];
           _s7nfe::I64 = I64[_s7nf2::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7nfd::I64;
           I64[Hp] = _s7nfe::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Typeable.mkFunTy_entry() //  [R2, R3]
         { info_tbl: [(c7ohK,
                       label: Data.Typeable.mkFunTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ohK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ohL; else goto c7ohM;
       c7ohL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.mkFunTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ohM: // global
           I64[Sp - 16] = block_c7ofp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7okz; else goto c7ofq;
       u7okz: // global
           call _c7ofp(R1) args: 0, res: 0, upd: 0;
       c7ofq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ofp() //  [R1]
         { info_tbl: [(c7ofp,
                       label: block_c7ofp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ofp: // global
           I64[Sp] = block_c7ofu_info;
           _s7neP::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7neP::P64;
           if (R1 & 7 != 0) goto u7okx; else goto c7ofv;
       u7okx: // global
           call _c7ofu(R1) args: 0, res: 0, upd: 0;
       c7ofv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ofu() //  [R1]
         { info_tbl: [(c7ofu,
                       label: block_c7ofu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ofu: // global
           I64[Sp - 8] = block_c7ohO_info;
           _s7neR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7neR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oky; else goto c7oje;
       u7oky: // global
           call _c7ohO(R1) args: 0, res: 0, upd: 0;
       c7oje: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ohO() //  [R1]
         { info_tbl: [(c7ohO,
                       label: block_c7ohO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ohO: // global
           _c7okf::P64 = R1 & 7;
           if (_c7okf::P64 < 3) goto u7okp; else goto u7okq;
       u7okp: // global
           if (_c7okf::P64 < 2) goto c7ojl; else goto c7ojA;
       c7ojl: // global
           I64[Sp] = block_c7oji_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7ojA: // global
           I64[Sp] = block_c7ojy_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7okq: // global
           if (_c7okf::P64 < 4) goto c7ojP; else goto c7ok4;
       c7ojP: // global
           I64[Sp] = block_c7ojN_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7ok4: // global
           I64[Sp] = block_c7ok2_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oji() //  [R1]
         { info_tbl: [(c7oji,
                       label: block_c7oji_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oji: // global
           if (R1 & 7 == 1) goto u7okI; else goto u7okt;
       u7okI: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7okt: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7ojy() //  [R1]
         { info_tbl: [(c7ojy,
                       label: block_c7ojy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ojy: // global
           if (R1 & 7 == 1) goto u7okK; else goto u7oku;
       u7okK: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7oku: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7ojN() //  [R1]
         { info_tbl: [(c7ojN,
                       label: block_c7ojN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ojN: // global
           if (R1 & 7 == 1) goto u7okM; else goto u7okv;
       u7okM: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7okv: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _c7ok2() //  [R1]
         { info_tbl: [(c7ok2,
                       label: block_c7ok2_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ok2: // global
           if (R1 & 7 == 1) goto u7okO; else goto u7okw;
       u7okO: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7okw: // global
           Sp = Sp + 8;
           call _s7nf0() args: 0, res: 0, upd: 0;
     }
 },
 _s7nf0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7nf0: // global
           I64[Sp - 8] = block_c7ohY_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7okQ; else goto c7oid;
       u7okQ: // global
           call _c7ohY(R1) args: 0, res: 0, upd: 0;
       c7oid: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ohY() //  [R1]
         { info_tbl: [(c7ohY,
                       label: block_c7ohY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ohY: // global
           _c7okk::P64 = R1 & 7;
           if (_c7okk::P64 < 3) goto u7okr; else goto u7oks;
       u7okr: // global
           if (_c7okk::P64 < 2) goto c7oik; else goto c7oiz;
       c7oik: // global
           I64[Sp] = block_c7oih_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7oiz: // global
           I64[Sp] = block_c7oix_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7oks: // global
           if (_c7okk::P64 < 4) goto c7oiO; else goto c7oj3;
       c7oiO: // global
           I64[Sp] = block_c7oiM_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7oj3: // global
           I64[Sp] = block_c7oj1_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oih() //  [R1]
         { info_tbl: [(c7oih,
                       label: block_c7oih_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oih: // global
           if (R1 & 7 == 1) goto u7okA; else goto u7okB;
       u7okA: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7okB: // global
           call _c7ogp() args: 0, res: 0, upd: 0;
     }
 },
 _c7oix() //  [R1]
         { info_tbl: [(c7oix,
                       label: block_c7oix_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oix: // global
           if (R1 & 7 == 1) goto u7okC; else goto u7okD;
       u7okC: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7okD: // global
           call _c7ogp() args: 0, res: 0, upd: 0;
     }
 },
 _c7oiM() //  [R1]
         { info_tbl: [(c7oiM,
                       label: block_c7oiM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oiM: // global
           if (R1 & 7 == 1) goto u7okE; else goto u7okF;
       u7okE: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7okF: // global
           call _c7ogp() args: 0, res: 0, upd: 0;
     }
 },
 _c7oj1() //  [R1]
         { info_tbl: [(c7oj1,
                       label: block_c7oj1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oj1: // global
           if (R1 & 7 == 1) goto u7okG; else goto u7okH;
       u7okG: // global
           call _c7ofC() args: 0, res: 0, upd: 0;
       u7okH: // global
           call _c7ogp() args: 0, res: 0, upd: 0;
     }
 },
 _c7ofC() //  []
         { info_tbl: [(c7ofC,
                       label: block_c7ofC_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ofC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ohT; else goto c7ohS;
       c7ohT: // global
           HpAlloc = 32;
           I64[Sp] = block_c7ofC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7ohS: // global
           I64[Hp - 24] = sat_s7neY_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c7ohQ_info;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ohQ() //  [R1]
         { info_tbl: [(c7ohQ,
                       label: block_c7ohQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ohQ: // global
           R3 = R1;
           R2 = Data.Typeable.mkFunTy5_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7ogp() //  []
         { info_tbl: [(c7ogp,
                       label: block_c7ogp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ogp: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7oi9; else goto c7oi8;
       c7oi9: // global
           HpAlloc = 96;
           I64[Sp] = block_c7ogp_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7oi8: // global
           I64[Hp - 88] = sat_s7nfx_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           I64[Hp - 40] = sat_s7nfh_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           I64[Sp] = block_c7oi1_info;
           R2 = Hp - 14;
           R1 = GHC.Fingerprint.fingerprintFingerprints_closure;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oi1() //  [R1]
         { info_tbl: [(c7oi1,
                       label: block_c7oi1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oi1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7oic; else goto c7oib;
       c7oic: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oib: // global
           _s7nfB::I64 = I64[R1 + 7];
           _s7nfC::I64 = I64[R1 + 15];
           I64[Hp - 48] = Data.Typeable.Internal.TrFun_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s7nfB::I64;
           I64[Hp - 16] = _s7nfC::I64;
           I64[Hp - 8] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp] = Hp - 44;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.569134481 UTC

[section ""data" . Data.Typeable.splitTyConApp_closure" {
     Data.Typeable.splitTyConApp_closure:
         const Data.Typeable.splitTyConApp_info;
         const 0;
 },
 Data.Typeable.splitTyConApp_entry() //  [R2]
         { info_tbl: [(c7on7,
                       label: Data.Typeable.splitTyConApp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7on7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7ond; else goto c7one;
       c7ond: // global
           R2 = R2;
           R1 = Data.Typeable.splitTyConApp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7one: // global
           I64[Sp - 8] = block_c7on4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7onj; else goto c7on5;
       u7onj: // global
           call _c7on4(R1) args: 0, res: 0, upd: 0;
       c7on5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7on4() //  [R1]
         { info_tbl: [(c7on4,
                       label: block_c7on4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7on4: // global
           I64[Sp] = block_c7ona_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ona() //  [R1, R2]
         { info_tbl: [(c7ona,
                       label: block_c7ona_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ona: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7oni; else goto c7onh;
       c7oni: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7onh: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.576719067 UTC

[section ""data" . Data.Typeable.typeRepArgs_closure" {
     Data.Typeable.typeRepArgs_closure:
         const Data.Typeable.typeRepArgs_info;
         const 0;
 },
 Data.Typeable.typeRepArgs_entry() //  [R2]
         { info_tbl: [(c7onE,
                       label: Data.Typeable.typeRepArgs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7onE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7onI; else goto c7onJ;
       c7onI: // global
           R2 = R2;
           R1 = Data.Typeable.typeRepArgs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7onJ: // global
           I64[Sp - 8] = block_c7onB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7onN; else goto c7onC;
       u7onN: // global
           call _c7onB(R1) args: 0, res: 0, upd: 0;
       c7onC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7onB() //  [R1]
         { info_tbl: [(c7onB,
                       label: block_c7onB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7onB: // global
           I64[Sp] = block_c7onH_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7onH() //  [R2]
         { info_tbl: [(c7onH,
                       label: block_c7onH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7onH: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.584620672 UTC

[section ""data" . Data.Typeable.typeRepTyCon_closure" {
     Data.Typeable.typeRepTyCon_closure:
         const Data.Typeable.typeRepTyCon_info;
         const 0;
 },
 Data.Typeable.typeRepTyCon_entry() //  [R2]
         { info_tbl: [(c7oo6,
                       label: Data.Typeable.typeRepTyCon_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oo6: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepTyCon_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.587882314 UTC

[section ""data" . Data.Typeable.typeRepFingerprint_closure" {
     Data.Typeable.typeRepFingerprint_closure:
         const Data.Typeable.typeRepFingerprint_info;
         const 0;
 },
 Data.Typeable.typeRepFingerprint_entry() //  [R2]
         { info_tbl: [(c7ooh,
                       label: Data.Typeable.typeRepFingerprint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ooh: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepFingerprint_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.591435307 UTC

[section ""data" . Data.Typeable.rnfTypeRep_closure" {
     Data.Typeable.rnfTypeRep_closure:
         const Data.Typeable.rnfTypeRep_info;
 },
 Data.Typeable.rnfTypeRep_entry() //  [R2]
         { info_tbl: [(c7oos,
                       label: Data.Typeable.rnfTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oos: // global
           R2 = R2;
           call Data.Typeable.Internal.rnfSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.594659993 UTC

[section ""data" . Data.Typeable.typeOf1_closure" {
     Data.Typeable.typeOf1_closure:
         const Data.Typeable.typeOf1_info;
 },
 Data.Typeable.typeOf1_entry() //  [R2]
         { info_tbl: [(c7ooD,
                       label: Data.Typeable.typeOf1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ooD: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.5978641 UTC

[section ""data" . Data.Typeable.typeOf2_closure" {
     Data.Typeable.typeOf2_closure:
         const Data.Typeable.typeOf2_info;
 },
 Data.Typeable.typeOf2_entry() //  [R2]
         { info_tbl: [(c7ooO,
                       label: Data.Typeable.typeOf2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ooO: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.60177556 UTC

[section ""data" . Data.Typeable.typeOf3_closure" {
     Data.Typeable.typeOf3_closure:
         const Data.Typeable.typeOf3_info;
 },
 Data.Typeable.typeOf3_entry() //  [R2]
         { info_tbl: [(c7ooZ,
                       label: Data.Typeable.typeOf3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ooZ: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.605047165 UTC

[section ""data" . Data.Typeable.typeOf4_closure" {
     Data.Typeable.typeOf4_closure:
         const Data.Typeable.typeOf4_info;
 },
 Data.Typeable.typeOf4_entry() //  [R2]
         { info_tbl: [(c7opa,
                       label: Data.Typeable.typeOf4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7opa: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.60826816 UTC

[section ""data" . Data.Typeable.typeOf5_closure" {
     Data.Typeable.typeOf5_closure:
         const Data.Typeable.typeOf5_info;
 },
 Data.Typeable.typeOf5_entry() //  [R2]
         { info_tbl: [(c7opl,
                       label: Data.Typeable.typeOf5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7opl: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.611622572 UTC

[section ""data" . Data.Typeable.typeOf6_closure" {
     Data.Typeable.typeOf6_closure:
         const Data.Typeable.typeOf6_info;
 },
 Data.Typeable.typeOf6_entry() //  [R2]
         { info_tbl: [(c7opw,
                       label: Data.Typeable.typeOf6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7opw: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.614960337 UTC

[section ""data" . Data.Typeable.typeOf7_closure" {
     Data.Typeable.typeOf7_closure:
         const Data.Typeable.typeOf7_info;
 },
 Data.Typeable.typeOf7_entry() //  [R2]
         { info_tbl: [(c7opH,
                       label: Data.Typeable.typeOf7_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7opH: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.61812628 UTC

[section ""data" . Data.Typeable.$trModule3_closure" {
     Data.Typeable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.619828952 UTC

[section ""data" . Data.Typeable.$trModule1_closure" {
     Data.Typeable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.621563159 UTC

[section ""data" . Data.Typeable.$trModule_closure" {
     Data.Typeable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Typeable.$trModule3_closure+1;
         const Data.Typeable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.623706523 UTC

[section ""data" . Data.Typeable.showsTypeRep_closure" {
     Data.Typeable.showsTypeRep_closure:
         const Data.Typeable.showsTypeRep_info;
         const 0;
 },
 Data.Typeable.showsTypeRep_entry() //  [R2]
         { info_tbl: [(c7opY,
                       label: Data.Typeable.showsTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7opY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7opZ; else goto c7oq0;
       c7opZ: // global
           R2 = R2;
           R1 = Data.Typeable.showsTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7oq0: // global
           I64[Sp - 8] = block_c7opV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oq4; else goto c7opW;
       u7oq4: // global
           call _c7opV(R1) args: 0, res: 0, upd: 0;
       c7opW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7opV() //  [R1]
         { info_tbl: [(c7opV,
                       label: block_c7opV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7opV: // global
           R3 = P64[R1 + 7];
           R2 = GHC.Show.$fShow(,)1_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:40.630192606 UTC

[section ""relreadonly" . S7nhj_srt" {
     S7nhj_srt:
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Typeable.cast_closure;
         const Data.Typeable.eqT_closure;
         const Data.Typeable.gcast_closure;
         const Data.Typeable.gcast1_closure;
         const Data.Typeable.gcast2_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Typeable.funResultTy_closure;
         const Data.Typeable.mkFunTy1_closure;
         const Data.Typeable.Internal.showTypeable_closure;
         const GHC.Err.error_closure;
         const GHC.Fingerprint.fingerprintFingerprints_closure;
         const Data.Typeable.mkFunTy_closure;
         const Data.Typeable.mkFunTy5_closure;
         const Data.Typeable.Internal.$wgo_closure;
         const Data.Typeable.splitTyConApp_closure;
         const Data.Typeable.typeRepArgs_closure;
         const Data.Typeable.Internal.someTypeRepTyCon_closure;
         const Data.Typeable.Internal.someTypeRepFingerprint_closure;
         const Data.Typeable.showsTypeRep_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.441520828 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:41.443178147 UTC

[section ""data" . Data.Typeable.typeOf_closure" {
     Data.Typeable.typeOf_closure:
         const Data.Typeable.typeOf_info;
 },
 Data.Typeable.typeOf_entry() //  [R2]
         { info_tbl: [(c7ow5,
                       label: Data.Typeable.typeOf_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ow5: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.451316824 UTC

[section ""data" . Data.Typeable.typeRep_closure" {
     Data.Typeable.typeRep_closure:
         const Data.Typeable.typeRep_info;
 },
 Data.Typeable.typeRep_entry() //  [R2, R3]
         { info_tbl: [(c7owg,
                       label: Data.Typeable.typeRep_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7owg: // global
           R3 = R3;
           R2 = R2;
           call Data.Typeable.Internal.someTypeRep_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.455176653 UTC

[section ""data" . Data.Typeable.cast_closure" {
     Data.Typeable.cast_closure:
         const Data.Typeable.cast_info;
         const 0;
 },
 Data.Typeable.cast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7owx,
                       label: Data.Typeable.cast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7owx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7owy; else goto c7owz;
       c7owy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.cast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7owz: // global
           I64[Sp - 16] = block_c7owr_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7owr() //  [R1]
         { info_tbl: [(c7owr,
                       label: block_c7owr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7owr: // global
           if (R1 & 7 == 1) goto c7owu; else goto c7owv;
       c7owu: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7owv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7owI; else goto c7owH;
       c7owI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7owH: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.461084903 UTC

[section ""data" . Data.Typeable.eqT1_closure" {
     Data.Typeable.eqT1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.463252527 UTC

[section ""data" . Data.Typeable.eqT_closure" {
     Data.Typeable.eqT_closure:
         const Data.Typeable.eqT_info;
         const 0;
 },
 Data.Typeable.eqT_entry() //  [R2, R3]
         { info_tbl: [(c7oxb,
                       label: Data.Typeable.eqT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oxb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7oxc; else goto c7oxd;
       c7oxc: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.eqT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7oxd: // global
           I64[Sp - 8] = block_c7ox5_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ox5() //  [R1]
         { info_tbl: [(c7ox5,
                       label: block_c7ox5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ox5: // global
           if (R1 & 7 == 1) goto c7ox8; else goto c7ox9;
       c7ox8: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ox9: // global
           R1 = Data.Typeable.eqT1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.469146155 UTC

[section ""data" . Data.Typeable.gcast_closure" {
     Data.Typeable.gcast_closure:
         const Data.Typeable.gcast_info;
         const 0;
 },
 Data.Typeable.gcast_entry() //  [R2, R3, R4]
         { info_tbl: [(c7oxI,
                       label: Data.Typeable.gcast_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oxI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oxJ; else goto c7oxK;
       c7oxJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7oxK: // global
           I64[Sp - 16] = block_c7oxC_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oxC() //  [R1]
         { info_tbl: [(c7oxC,
                       label: block_c7oxC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oxC: // global
           if (R1 & 7 == 1) goto c7oxF; else goto c7oxG;
       c7oxF: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7oxG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oxT; else goto c7oxS;
       c7oxT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oxS: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.475230539 UTC

[section ""data" . Data.Typeable.gcast1_closure" {
     Data.Typeable.gcast1_closure:
         const Data.Typeable.gcast1_info;
         const 0;
 },
 Data.Typeable.gcast1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7oyk,
                       label: Data.Typeable.gcast1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oyk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oyl; else goto c7oym;
       c7oyl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7oym: // global
           I64[Sp - 16] = block_c7oye_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oye() //  [R1]
         { info_tbl: [(c7oye,
                       label: block_c7oye_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oye: // global
           if (R1 & 7 == 1) goto c7oyh; else goto c7oyi;
       c7oyh: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7oyi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oyv; else goto c7oyu;
       c7oyv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oyu: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.481568739 UTC

[section ""data" . Data.Typeable.gcast2_closure" {
     Data.Typeable.gcast2_closure:
         const Data.Typeable.gcast2_info;
         const 0;
 },
 Data.Typeable.gcast2_entry() //  [R2, R3, R4]
         { info_tbl: [(c7oyW,
                       label: Data.Typeable.gcast2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oyW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oyX; else goto c7oyY;
       c7oyX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.gcast2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7oyY: // global
           I64[Sp - 16] = block_c7oyQ_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oyQ() //  [R1]
         { info_tbl: [(c7oyQ,
                       label: block_c7oyQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oyQ: // global
           if (R1 & 7 == 1) goto c7oyT; else goto c7oyU;
       c7oyT: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7oyU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oz7; else goto c7oz6;
       c7oz7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oz6: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.488926899 UTC

[section ""data" . Data.Typeable.mkFunTy1_closure" {
     Data.Typeable.mkFunTy1_closure:
         const Data.Typeable.mkFunTy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy1_entry() //  [R1]
         { info_tbl: [(c7ozE,
                       label: Data.Typeable.mkFunTy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ozE: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c7ozF; else goto c7ozG;
       c7ozF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ozG: // global
           (_c7ozr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ozr::I64 == 0) goto c7ozt; else goto c7ozs;
       c7ozt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ozs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ozr::I64;
           I64[Sp - 24] = block_c7ozu_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7ozu() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7ozu,
                       label: block_c7ozu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ozu: // global
           I64[Sp - 40] = block_c7ozy_info;
           R6 = 0;
           _s7oqF::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s7oqE::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s7oqD::P64 = R3;
           R3 = 5595830777317938557;
           _s7oqC::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s7oqC::I64;
           P64[Sp - 24] = _s7oqD::P64;
           P64[Sp - 16] = _s7oqE::P64;
           P64[Sp - 8] = _s7oqF::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7ozy() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7ozy,
                       label: block_c7ozy_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ozy: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7ozz() args: 0, res: 0, upd: 0;
     }
 },
 _c7ozz() //  []
         { info_tbl: [(c7ozz,
                       label: block_c7ozz_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ozz: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7ozK; else goto c7ozJ;
       c7ozK: // global
           HpAlloc = 96;
           I64[Sp] = block_c7ozz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7ozJ: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.508456421 UTC

[section ""data" . Data.Typeable.funResultTy_closure" {
     Data.Typeable.funResultTy_closure:
         const Data.Typeable.funResultTy_info;
         const 0;
 },
 Data.Typeable.funResultTy_entry() //  [R2, R3]
         { info_tbl: [(c7oAw,
                       label: Data.Typeable.funResultTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oAw: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7oAA; else goto c7oAB;
       c7oAA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.funResultTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7oAB: // global
           I64[Sp - 16] = block_c7oAt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7oJX; else goto c7oAu;
       u7oJX: // global
           call _c7oAt(R1) args: 0, res: 0, upd: 0;
       c7oAu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oAt() //  [R1]
         { info_tbl: [(c7oAt,
                       label: block_c7oAt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oAt: // global
           I64[Sp] = block_c7oAz_info;
           _s7oqR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7oqR::P64;
           if (R1 & 7 != 0) goto u7oJW; else goto c7oAD;
       u7oJW: // global
           call _c7oAz(R1) args: 0, res: 0, upd: 0;
       c7oAD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oAz() //  [R1]
         { info_tbl: [(c7oAz,
                       label: block_c7oAz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oAz: // global
           I64[Sp - 8] = block_c7oAJ_info;
           _s7oqT::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7oqT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oJY; else goto c7oD7;
       u7oJY: // global
           call _c7oAJ(R1) args: 0, res: 0, upd: 0;
       c7oD7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oAJ() //  [R1]
         { info_tbl: [(c7oAJ,
                       label: block_c7oAJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oAJ: // global
           _c7oId::P64 = R1 & 7;
           if (_c7oId::P64 < 3) goto u7oIT; else goto u7oIU;
       u7oIT: // global
           if (_c7oId::P64 < 2) goto c7oDe; else goto c7oFK;
       c7oDe: // global
           I64[Sp] = block_c7oDb_info;
           R1 = Data.Typeable.mkFunTy1_closure;
           if (R1 & 7 != 0) goto u7oJZ; else goto c7oDf;
       u7oJZ: // global
           call _c7oDb(R1) args: 0, res: 0, upd: 0;
       c7oDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oFK: // global
           I64[Sp - 8] = block_c7oEk_info;
           _s7osm::P64 = P64[R1 + 22];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7osm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oK0; else goto c7oFL;
       u7oK0: // global
           call _c7oEk(R1) args: 0, res: 0, upd: 0;
       c7oFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7oIU: // global
           if (_c7oId::P64 < 4) goto c7oHA; else goto c7oI0;
       c7oHA: // global
           I64[Sp - 8] = block_c7oGa_info;
           _s7otc::P64 = P64[R1 + 21];
           R1 = Data.Typeable.mkFunTy1_closure;
           P64[Sp] = _s7otc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oK1; else goto c7oHB;
       u7oK1: // global
           call _c7oGa(R1) args: 0, res: 0, upd: 0;
       c7oHB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oI0: // global
           I64[Sp] = block_c7oHY_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = Data.Typeable.mkFunTy1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oDb() //  [R1]
         { info_tbl: [(c7oDb,
                       label: block_c7oDb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oDb: // global
           _c7oII::P64 = R1 & 7;
           if (_c7oII::P64 < 3) goto u7oIZ; else goto c7oDW;
       u7oIZ: // global
           if (_c7oII::P64 < 2) goto c7oDm; else goto c7oDy;
       c7oDm: // global
           I64[Sp] = block_c7oDj_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oKi; else goto c7oDn;
       u7oKi: // global
           call _c7oDj(R1) args: 0, res: 0, upd: 0;
       c7oDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oDy: // global
           I64[Sp - 16] = block_c7oDw_info;
           _s7orW::I64 = I64[R1 + 30];
           _s7orX::I64 = I64[R1 + 38];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7orX::I64;
           I64[Sp] = _s7orW::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7oKj; else goto c7oDz;
       u7oKj: // global
           call _c7oDw(R1) args: 0, res: 0, upd: 0;
       c7oDz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oDW: // global
           I64[Sp - 16] = block_c7oDU_info;
           _s7os7::I64 = I64[R1 + 29];
           _s7os8::I64 = I64[R1 + 37];
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           I64[Sp - 8] = _s7os8::I64;
           I64[Sp] = _s7os7::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7oKk; else goto c7oDX;
       u7oKk: // global
           call _c7oDU(R1) args: 0, res: 0, upd: 0;
       c7oDX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oDj() //  [R1]
         { info_tbl: [(c7oDj,
                       label: block_c7oDj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oDj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oDt; else goto c7oDs;
       c7oDt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oDs: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7oqU() args: 0, res: 0, upd: 0;
     }
 },
 _c7oDw() //  [R1]
         { info_tbl: [(c7oDw,
                       label: block_c7oDw_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oDw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oDF; else goto c7oDE;
       c7oDF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oDE: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7oDR; else goto u7oJ7;
       c7oDR: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7oDQ; else goto u7oJ8;
       c7oDQ: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7oqU() args: 0, res: 0, upd: 0;
       u7oJ8: // global
           Sp = Sp + 40;
           goto u7oKn;
       u7oJ7: // global
           Sp = Sp + 40;
           goto u7oKn;
       u7oKn: // global
           call _c7oHx() args: 0, res: 0, upd: 0;
     }
 },
 _c7oDU() //  [R1]
         { info_tbl: [(c7oDU,
                       label: block_c7oDU_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oDU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oE3; else goto c7oE2;
       c7oE3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oE2: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7oEf; else goto u7oJa;
       c7oEf: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7oEe; else goto u7oJb;
       c7oEe: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 24;
           call _s7oqU() args: 0, res: 0, upd: 0;
       u7oJb: // global
           Sp = Sp + 40;
           goto u7oKq;
       u7oJa: // global
           Sp = Sp + 40;
           goto u7oKq;
       u7oKq: // global
           call _c7oHx() args: 0, res: 0, upd: 0;
     }
 },
 _c7oEk() //  [R1]
         { info_tbl: [(c7oEk,
                       label: block_c7oEk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oEk: // global
           _c7oIu::P64 = R1 & 7;
           if (_c7oIu::P64 < 3) goto u7oJ0; else goto c7oG5;
       u7oJ0: // global
           if (_c7oIu::P64 < 2) goto c7oFS; else goto c7oG1;
       c7oFS: // global
           I64[Sp] = block_c7oFP_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oKs; else goto c7oFT;
       u7oKs: // global
           call _c7oFP(R1) args: 0, res: 0, upd: 0;
       c7oFT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oG1: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7oKu;
       c7oG5: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7oKu;
       u7oKu: // global
           call _s7osn() args: 0, res: 0, upd: 0;
     }
 },
 _c7oFP() //  [R1]
         { info_tbl: [(c7oFP,
                       label: block_c7oFP_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oFP: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7osn() args: 0, res: 0, upd: 0;
     }
 },
 _s7osn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7osn: // global
           I64[Sp - 8] = block_c7oEp_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oL4; else goto c7oEr;
       u7oL4: // global
           call _c7oEp(R1) args: 0, res: 0, upd: 0;
       c7oEr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oEp() //  [R1]
         { info_tbl: [(c7oEp,
                       label: block_c7oEp_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oEp: // global
           _s7oso::I64 = I64[Sp + 16];
           _s7osp::I64 = I64[Sp + 8];
           _c7oIv::P64 = R1 & 7;
           if (_c7oIv::P64 < 3) goto u7oJ1; else goto u7oJ2;
       u7oJ1: // global
           if (_c7oIv::P64 < 2) goto c7oEy; else goto c7oES;
       c7oEy: // global
           I64[Sp] = block_c7oEv_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oKv; else goto c7oEz;
       u7oKv: // global
           call _c7oEv(R1) args: 0, res: 0, upd: 0;
       c7oEz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oES: // global
           Hp = Hp + 16;
           _s7osq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oFx; else goto c7oEW;
       c7oEW: // global
           if (_s7oso::I64 == I64[_s7osq::P64 + 30]) goto c7oF9; else goto u7oJj;
       c7oF9: // global
           if (_s7osp::I64 == I64[_s7osq::P64 + 38]) goto c7oF8; else goto u7oJk;
       c7oF8: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7oKE;
       u7oJk: // global
           Sp = Sp + 48;
           goto u7oKD;
       u7oJj: // global
           Sp = Sp + 48;
           goto u7oKD;
       u7oJ2: // global
           if (_c7oIv::P64 < 4) goto c7oFa; else goto c7oFs;
       c7oFa: // global
           Hp = Hp + 16;
           _s7osq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oFx; else goto c7oFe;
       c7oFe: // global
           if (_s7oso::I64 == I64[_s7osq::P64 + 29]) goto c7oFr; else goto u7oJm;
       c7oFr: // global
           if (_s7osp::I64 == I64[_s7osq::P64 + 37]) goto c7oFq; else goto u7oJn;
       c7oFq: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7oKE;
       u7oJn: // global
           Sp = Sp + 48;
           goto u7oKD;
       u7oJm: // global
           Sp = Sp + 48;
           goto u7oKD;
       c7oFs: // global
           Hp = Hp + 16;
           _s7osq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oFx; else goto c7oFw;
       c7oFx: // global
           HpAlloc = 16;
           R1 = _s7osq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oFw: // global
           if (_s7oso::I64 == I64[_s7osq::P64 + 20]) goto c7oFJ; else goto u7oJp;
       c7oFJ: // global
           if (_s7osp::I64 == I64[_s7osq::P64 + 28]) goto c7oFI; else goto u7oJq;
       c7oFI: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7oKE;
       u7oKE: // global
           call _s7oqU() args: 0, res: 0, upd: 0;
       u7oJq: // global
           Sp = Sp + 48;
           goto u7oKD;
       u7oJp: // global
           Sp = Sp + 48;
           goto u7oKD;
       u7oKD: // global
           call _c7oHx() args: 0, res: 0, upd: 0;
     }
 },
 _c7oEv() //  [R1]
         { info_tbl: [(c7oEv,
                       label: block_c7oEv_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oEv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oEF; else goto c7oEE;
       c7oEF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oEE: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7oER; else goto u7oJg;
       c7oER: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7oEQ; else goto u7oJh;
       c7oEQ: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7oqU() args: 0, res: 0, upd: 0;
       u7oJh: // global
           Sp = Sp + 48;
           goto u7oKG;
       u7oJg: // global
           Sp = Sp + 48;
           goto u7oKG;
       u7oKG: // global
           call _c7oHx() args: 0, res: 0, upd: 0;
     }
 },
 _c7oGa() //  [R1]
         { info_tbl: [(c7oGa,
                       label: block_c7oGa_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oGa: // global
           _c7oIg::P64 = R1 & 7;
           if (_c7oIg::P64 < 3) goto u7oJ3; else goto c7oHV;
       u7oJ3: // global
           if (_c7oIg::P64 < 2) goto c7oHI; else goto c7oHR;
       c7oHI: // global
           I64[Sp] = block_c7oHF_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oKJ; else goto c7oHJ;
       u7oKJ: // global
           call _c7oHF(R1) args: 0, res: 0, upd: 0;
       c7oHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oHR: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7oKL;
       c7oHV: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7oKL;
       u7oKL: // global
           call _s7otd() args: 0, res: 0, upd: 0;
     }
 },
 _c7oHF() //  [R1]
         { info_tbl: [(c7oHF,
                       label: block_c7oHF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oHF: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7otd() args: 0, res: 0, upd: 0;
     }
 },
 _s7otd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7otd: // global
           I64[Sp - 8] = block_c7oGf_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oL5; else goto c7oGh;
       u7oL5: // global
           call _c7oGf(R1) args: 0, res: 0, upd: 0;
       c7oGh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oGf() //  [R1]
         { info_tbl: [(c7oGf,
                       label: block_c7oGf_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oGf: // global
           _s7ote::I64 = I64[Sp + 16];
           _s7otf::I64 = I64[Sp + 8];
           _c7oIh::P64 = R1 & 7;
           if (_c7oIh::P64 < 3) goto u7oJ4; else goto u7oJ5;
       u7oJ4: // global
           if (_c7oIh::P64 < 2) goto c7oGo; else goto c7oGI;
       c7oGo: // global
           I64[Sp] = block_c7oGl_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oKM; else goto c7oGp;
       u7oKM: // global
           call _c7oGl(R1) args: 0, res: 0, upd: 0;
       c7oGp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oGI: // global
           Hp = Hp + 16;
           _s7otg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oHn; else goto c7oGM;
       c7oGM: // global
           if (_s7ote::I64 == I64[_s7otg::P64 + 30]) goto c7oGZ; else goto u7oJy;
       c7oGZ: // global
           if (_s7otf::I64 == I64[_s7otg::P64 + 38]) goto c7oGY; else goto u7oJz;
       c7oGY: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7oKV;
       u7oJz: // global
           Sp = Sp + 48;
           goto u7oKU;
       u7oJy: // global
           Sp = Sp + 48;
           goto u7oKU;
       u7oJ5: // global
           if (_c7oIh::P64 < 4) goto c7oH0; else goto c7oHi;
       c7oH0: // global
           Hp = Hp + 16;
           _s7otg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oHn; else goto c7oH4;
       c7oH4: // global
           if (_s7ote::I64 == I64[_s7otg::P64 + 29]) goto c7oHh; else goto u7oJB;
       c7oHh: // global
           if (_s7otf::I64 == I64[_s7otg::P64 + 37]) goto c7oHg; else goto u7oJC;
       c7oHg: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7oKV;
       u7oJC: // global
           Sp = Sp + 48;
           goto u7oKU;
       u7oJB: // global
           Sp = Sp + 48;
           goto u7oKU;
       c7oHi: // global
           Hp = Hp + 16;
           _s7otg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oHn; else goto c7oHm;
       c7oHn: // global
           HpAlloc = 16;
           R1 = _s7otg::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oHm: // global
           if (_s7ote::I64 == I64[_s7otg::P64 + 20]) goto c7oHz; else goto u7oJE;
       c7oHz: // global
           if (_s7otf::I64 == I64[_s7otg::P64 + 28]) goto c7oHy; else goto u7oJF;
       c7oHy: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           goto u7oKV;
       u7oKV: // global
           call _s7oqU() args: 0, res: 0, upd: 0;
       u7oJF: // global
           Sp = Sp + 48;
           goto u7oKU;
       u7oJE: // global
           Sp = Sp + 48;
           goto u7oKU;
       u7oKU: // global
           call _c7oHx() args: 0, res: 0, upd: 0;
     }
 },
 _c7oGl() //  [R1]
         { info_tbl: [(c7oGl,
                       label: block_c7oGl_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oGl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oGv; else goto c7oGu;
       c7oGv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oGu: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7oGH; else goto u7oJv;
       c7oGH: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7oGG; else goto u7oJw;
       c7oGG: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 32;
           call _s7oqU() args: 0, res: 0, upd: 0;
       u7oJw: // global
           Sp = Sp + 48;
           goto u7oKX;
       u7oJv: // global
           Sp = Sp + 48;
           goto u7oKX;
       u7oKX: // global
           call _c7oHx() args: 0, res: 0, upd: 0;
     }
 },
 _c7oHx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oHx: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7oHY() //  [R1]
         { info_tbl: [(c7oHY,
                       label: block_c7oHY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oHY: // global
           if (R1 & 7 == 1) goto u7oJH; else goto c7oI7;
       u7oJH: // global
           Sp = Sp + 24;
           call _c7oI6() args: 0, res: 0, upd: 0;
       c7oI7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7oIc; else goto c7oIb;
       c7oIc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oIb: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           Sp = Sp + 8;
           call _s7oqU() args: 0, res: 0, upd: 0;
     }
 },
 _s7oqU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7oqU: // global
           I64[Sp - 8] = block_c7oAO_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oL2; else goto c7oAQ;
       u7oL2: // global
           call _c7oAO(R1) args: 0, res: 0, upd: 0;
       c7oAQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oAO() //  [R1]
         { info_tbl: [(c7oAO,
                       label: block_c7oAO_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oAO: // global
           if (R1 & 7 == 4) goto c7oCH; else goto u7oJJ;
       c7oCH: // global
           I64[Sp] = block_c7oB1_info;
           _s7or0::P64 = P64[R1 + 12];
           R1 = P64[R1 + 4];
           P64[Sp + 16] = _s7or0::P64;
           if (R1 & 7 != 0) goto u7oK2; else goto c7oCI;
       u7oK2: // global
           call _c7oB1(R1) args: 0, res: 0, upd: 0;
       c7oCI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7oJJ: // global
           Sp = Sp + 24;
           call _c7oI6() args: 0, res: 0, upd: 0;
     }
 },
 _c7oB1() //  [R1]
         { info_tbl: [(c7oB1,
                       label: block_c7oB1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oB1: // global
           _c7oIR::P64 = R1 & 7;
           if (_c7oIR::P64 < 3) goto u7oIV; else goto u7oIW;
       u7oIV: // global
           if (_c7oIR::P64 < 2) goto c7oCP; else goto c7oCY;
       c7oCP: // global
           I64[Sp] = block_c7oCM_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oK4; else goto c7oCQ;
       u7oK4: // global
           call _c7oCM(R1) args: 0, res: 0, upd: 0;
       c7oCQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oCY: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u7oK7;
       u7oIW: // global
           if (_c7oIR::P64 < 4) goto c7oD2; else goto c7oD6;
       c7oD2: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u7oK7;
       c7oD6: // global
           I64[Sp] = I64[R1 + 20];
           I64[Sp - 8] = I64[R1 + 28];
           Sp = Sp - 8;
           goto u7oK7;
       u7oK7: // global
           call _s7or1() args: 0, res: 0, upd: 0;
     }
 },
 _c7oCM() //  [R1]
         { info_tbl: [(c7oCM,
                       label: block_c7oCM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oCM: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s7or1() args: 0, res: 0, upd: 0;
     }
 },
 _s7or1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7or1: // global
           I64[Sp - 8] = block_c7oB6_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oL3; else goto c7oB8;
       u7oL3: // global
           call _c7oB6(R1) args: 0, res: 0, upd: 0;
       c7oB8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oB6() //  [R1]
         { info_tbl: [(c7oB6,
                       label: block_c7oB6_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oB6: // global
           _s7or0::P64 = P64[Sp + 32];
           _s7or2::I64 = I64[Sp + 16];
           _s7or3::I64 = I64[Sp + 8];
           _c7oIS::P64 = R1 & 7;
           if (_c7oIS::P64 < 3) goto u7oIX; else goto u7oIY;
       u7oIX: // global
           if (_c7oIS::P64 < 2) goto c7oBf; else goto c7oBD;
       c7oBf: // global
           I64[Sp] = block_c7oBc_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u7oK8; else goto c7oBg;
       u7oK8: // global
           call _c7oBc(R1) args: 0, res: 0, upd: 0;
       c7oBg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7oBD: // global
           Hp = Hp + 32;
           _s7or4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oCq; else goto c7oBH;
       c7oBH: // global
           if (_s7or2::I64 == I64[_s7or4::P64 + 30]) goto c7oBY; else goto u7oJQ;
       c7oBY: // global
           if (_s7or3::I64 == I64[_s7or4::P64 + 38]) goto c7oBX; else goto u7oJR;
       c7oBX: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7or0::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oJR: // global
           Sp = Sp + 40;
           goto u7oKe;
       u7oJQ: // global
           Sp = Sp + 40;
           goto u7oKe;
       u7oIY: // global
           if (_c7oIS::P64 < 4) goto c7oBZ; else goto c7oCl;
       c7oBZ: // global
           Hp = Hp + 32;
           _s7or4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oCq; else goto c7oC3;
       c7oC3: // global
           if (_s7or2::I64 == I64[_s7or4::P64 + 29]) goto c7oCk; else goto u7oJS;
       c7oCk: // global
           if (_s7or3::I64 == I64[_s7or4::P64 + 37]) goto c7oCj; else goto u7oJT;
       c7oCj: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7or0::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oJT: // global
           Sp = Sp + 40;
           goto u7oKe;
       u7oJS: // global
           Sp = Sp + 40;
           goto u7oKe;
       c7oCl: // global
           Hp = Hp + 32;
           _s7or4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oCq; else goto c7oCp;
       c7oCq: // global
           HpAlloc = 32;
           R1 = _s7or4::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oCp: // global
           if (_s7or2::I64 == I64[_s7or4::P64 + 20]) goto c7oCG; else goto u7oJU;
       c7oCG: // global
           if (_s7or3::I64 == I64[_s7or4::P64 + 28]) goto c7oCF; else goto u7oJV;
       c7oCF: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = _s7or0::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oJV: // global
           Sp = Sp + 40;
           goto u7oKe;
       u7oJU: // global
           Sp = Sp + 40;
           goto u7oKe;
       u7oKe: // global
           call _c7oCA() args: 0, res: 0, upd: 0;
     }
 },
 _c7oBc() //  [R1]
         { info_tbl: [(c7oBc,
                       label: block_c7oBc_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oBc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7oBm; else goto c7oBl;
       c7oBm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oBl: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c7oBC; else goto u7oJO;
       c7oBC: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7oBB; else goto u7oJP;
       c7oBB: // global
           I64[Hp - 24] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7oJP: // global
           Sp = Sp + 40;
           goto u7oKg;
       u7oJO: // global
           Sp = Sp + 40;
           goto u7oKg;
       u7oKg: // global
           call _c7oCA() args: 0, res: 0, upd: 0;
     }
 },
 _c7oCA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oCA: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7oI6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oI6: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.5759122 UTC

[section ""cstring" . Data.Typeable.mkFunTy16_bytes" {
     Data.Typeable.mkFunTy16_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.578029222 UTC

[section ""data" . Data.Typeable.mkFunTy15_closure" {
     Data.Typeable.mkFunTy15_closure:
         const Data.Typeable.mkFunTy15_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy15_entry() //  [R1]
         { info_tbl: [(c7oOr,
                       label: Data.Typeable.mkFunTy15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oOr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oOs; else goto c7oOt;
       c7oOs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oOt: // global
           (_c7oOo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oOo::I64 == 0) goto c7oOq; else goto c7oOp;
       c7oOq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7oOp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oOo::I64;
           R2 = Data.Typeable.mkFunTy16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.581981196 UTC

[section ""cstring" . Data.Typeable.$trModule4_bytes" {
     Data.Typeable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.583821468 UTC

[section ""data" . Data.Typeable.mkFunTy14_closure" {
     Data.Typeable.mkFunTy14_closure:
         const Data.Typeable.mkFunTy14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy14_entry() //  [R1]
         { info_tbl: [(c7oOJ,
                       label: Data.Typeable.mkFunTy14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oOJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oOK; else goto c7oOL;
       c7oOK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oOL: // global
           (_c7oOG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oOG::I64 == 0) goto c7oOI; else goto c7oOH;
       c7oOI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7oOH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oOG::I64;
           R2 = Data.Typeable.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.588280078 UTC

[section ""cstring" . Data.Typeable.$trModule2_bytes" {
     Data.Typeable.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.59020615 UTC

[section ""data" . Data.Typeable.mkFunTy13_closure" {
     Data.Typeable.mkFunTy13_closure:
         const Data.Typeable.mkFunTy13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy13_entry() //  [R1]
         { info_tbl: [(c7oP1,
                       label: Data.Typeable.mkFunTy13_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oP1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oP2; else goto c7oP3;
       c7oP2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oP3: // global
           (_c7oOY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oOY::I64 == 0) goto c7oP0; else goto c7oOZ;
       c7oP0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7oOZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oOY::I64;
           R2 = Data.Typeable.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.594084924 UTC

[section ""cstring" . Data.Typeable.mkFunTy12_bytes" {
     Data.Typeable.mkFunTy12_bytes:
         I8[] [46,47,68,97,116,97,47,84,121,112,101,97,98,108,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.595926598 UTC

[section ""data" . Data.Typeable.mkFunTy11_closure" {
     Data.Typeable.mkFunTy11_closure:
         const Data.Typeable.mkFunTy11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Typeable.mkFunTy11_entry() //  [R1]
         { info_tbl: [(c7oPj,
                       label: Data.Typeable.mkFunTy11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oPj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7oPk; else goto c7oPl;
       c7oPk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oPl: // global
           (_c7oPg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7oPg::I64 == 0) goto c7oPi; else goto c7oPh;
       c7oPi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7oPh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7oPg::I64;
           R2 = Data.Typeable.mkFunTy12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.599922705 UTC

[section ""data" . Data.Typeable.mkFunTy10_closure" {
     Data.Typeable.mkFunTy10_closure:
         const GHC.Types.I#_con_info;
         const 171;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.601642049 UTC

[section ""data" . Data.Typeable.mkFunTy9_closure" {
     Data.Typeable.mkFunTy9_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.603417888 UTC

[section ""data" . Data.Typeable.mkFunTy8_closure" {
     Data.Typeable.mkFunTy8_closure:
         const GHC.Types.I#_con_info;
         const 172;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.605075978 UTC

[section ""data" . Data.Typeable.mkFunTy7_closure" {
     Data.Typeable.mkFunTy7_closure:
         const GHC.Types.I#_con_info;
         const 55;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.607392125 UTC

[section ""data" . Data.Typeable.mkFunTy6_closure" {
     Data.Typeable.mkFunTy6_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const Data.Typeable.mkFunTy14_closure;
         const Data.Typeable.mkFunTy13_closure;
         const Data.Typeable.mkFunTy11_closure;
         const Data.Typeable.mkFunTy10_closure+1;
         const Data.Typeable.mkFunTy9_closure+1;
         const Data.Typeable.mkFunTy8_closure+1;
         const Data.Typeable.mkFunTy7_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.610021995 UTC

[section ""data" . Data.Typeable.mkFunTy5_closure" {
     Data.Typeable.mkFunTy5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const Data.Typeable.mkFunTy15_closure;
         const Data.Typeable.mkFunTy6_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.611759804 UTC

[section ""cstring" . Data.Typeable.mkFunTy4_bytes" {
     Data.Typeable.mkFunTy4_bytes:
         I8[] [109,107,70,117,110,84,121,58,32,65,116,116,101,109,112,116,101,100,32,116,111,32,99,111,110,115,116,114,117,99,116,32,102,117,110,99,116,105,111,110,32,116,121,112,101,32,102,114,111,109,32,110,111,110,45,108,105,102,116,101,100,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.613443403 UTC

[section ""cstring" . Data.Typeable.mkFunTy3_bytes" {
     Data.Typeable.mkFunTy3_bytes:
         I8[] [116,121,112,101,58,32,97,114,103,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.615091765 UTC

[section ""cstring" . Data.Typeable.mkFunTy2_bytes" {
     Data.Typeable.mkFunTy2_bytes:
         I8[] [44,32,114,101,115,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.62048199 UTC

[section ""data" . Data.Typeable.mkFunTy_closure" {
     Data.Typeable.mkFunTy_closure:
         const Data.Typeable.mkFunTy_info;
         const 0;
 },
 sat_s7oud_entry() //  [R1]
         { info_tbl: [(c7oQc,
                       label: sat_s7oud_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7oQd; else goto c7oQe;
       c7oQd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oQe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s7oue_entry() //  [R1]
         { info_tbl: [(c7oQf,
                       label: sat_s7oue_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7oQj; else goto c7oQi;
       c7oQj: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oQi: // global
           _s7ou9::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7oud_info;
           P64[Hp] = _s7ou9::P64;
           R3 = Hp - 16;
           R2 = Data.Typeable.mkFunTy2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7ouf_entry() //  [R1]
         { info_tbl: [(c7oQm,
                       label: sat_s7ouf_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQm: // global
           _s7ouf::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c7oQn; else goto c7oQo;
       c7oQo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7oQq; else goto c7oQp;
       c7oQq: // global
           HpAlloc = 24;
           goto c7oQn;
       c7oQn: // global
           R1 = _s7ouf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7ouf::P64;
           _s7ou7::P64 = P64[_s7ouf::P64 + 16];
           _s7ou9::P64 = P64[_s7ouf::P64 + 24];
           I64[Hp - 16] = sat_s7oue_info;
           P64[Hp] = _s7ou9::P64;
           I64[Sp - 32] = block_c7oQk_info;
           R3 = _s7ou7::P64;
           R2 = Data.Typeable.Internal.$fShowSomeTypeRep2_closure;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = GHC.Types.[]_closure+1;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7oQk() //  [R1]
         { info_tbl: [(c7oQk,
                       label: block_c7oQk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQk: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7oug_entry() //  [R1]
         { info_tbl: [(c7oQu,
                       label: sat_s7oug_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQu: // global
           _s7oug::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7oQv; else goto c7oQw;
       c7oQw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7oQy; else goto c7oQx;
       c7oQy: // global
           HpAlloc = 32;
           goto c7oQv;
       c7oQv: // global
           R1 = _s7oug::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oQx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7oug::P64;
           _s7ou7::P64 = P64[_s7oug::P64 + 16];
           _s7ou9::P64 = P64[_s7oug::P64 + 24];
           I64[Hp - 24] = sat_s7ouf_info;
           P64[Hp - 8] = _s7ou7::P64;
           P64[Hp] = _s7ou9::P64;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7ouP_entry() //  [R1]
         { info_tbl: [(c7oQW,
                       label: sat_s7ouP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7oQX; else goto c7oQY;
       c7oQX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oQY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7oQN_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7oRm; else goto c7oQO;
       u7oRm: // global
           call _c7oQN(R1) args: 0, res: 0, upd: 0;
       c7oQO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7oQN() //  [R1]
         { info_tbl: [(c7oQN,
                       label: block_c7oQN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQN: // global
           _c7oQV::P64 = R1 & 7;
           if (_c7oQV::P64 < 3) goto u7oRk; else goto u7oRl;
       u7oRk: // global
           if (_c7oQV::P64 < 2) goto c7oQR; else goto c7oQS;
       c7oQR: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7oQS: // global
           Hp = Hp + 24;
           _s7ouA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oRj; else goto c7oR6;
       c7oR6: // global
           _s7ouB::I64 = I64[_s7ouA::P64 + 30];
           _s7ouC::I64 = I64[_s7ouA::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7ouB::I64;
           I64[Hp] = _s7ouC::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7oRl: // global
           if (_c7oQV::P64 < 4) goto c7oQT; else goto c7oQU;
       c7oQT: // global
           Hp = Hp + 24;
           _s7ouA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oRj; else goto c7oRc;
       c7oRc: // global
           _s7ouG::I64 = I64[_s7ouA::P64 + 29];
           _s7ouH::I64 = I64[_s7ouA::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7ouG::I64;
           I64[Hp] = _s7ouH::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7oQU: // global
           Hp = Hp + 24;
           _s7ouA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oRj; else goto c7oRi;
       c7oRj: // global
           HpAlloc = 24;
           R1 = _s7ouA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7oRi: // global
           _s7ouL::I64 = I64[_s7ouA::P64 + 20];
           _s7ouM::I64 = I64[_s7ouA::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7ouL::I64;
           I64[Hp] = _s7ouM::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7ouz_entry() //  [R1]
         { info_tbl: [(c7oRB,
                       label: sat_s7ouz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oRB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7oRC; else goto c7oRD;
       c7oRC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7oRD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7oRs_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7oS1; else goto c7oRt;
       u7oS1: // global
           call _c7oRs(R1) args: 0, res: 0, upd: 0;
       c7oRt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7oRs() //  [R1]
         { info_tbl: [(c7oRs,
                       label: block_c7oRs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oRs: // global
           _c7oRA::P64 = R1 & 7;
           if (_c7oRA::P64 < 3) goto u7oRZ; else goto u7oS0;
       u7oRZ: // global
           if (_c7oRA::P64 < 2) goto c7oRw; else goto c7oRx;
       c7oRw: // global
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7oRx: // global
           Hp = Hp + 24;
           _s7ouk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oRY; else goto c7oRL;
       c7oRL: // global
           _s7oul::I64 = I64[_s7ouk::P64 + 30];
           _s7oum::I64 = I64[_s7ouk::P64 + 38];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7oul::I64;
           I64[Hp] = _s7oum::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u7oS0: // global
           if (_c7oRA::P64 < 4) goto c7oRy; else goto c7oRz;
       c7oRy: // global
           Hp = Hp + 24;
           _s7ouk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oRY; else goto c7oRR;
       c7oRR: // global
           _s7ouq::I64 = I64[_s7ouk::P64 + 29];
           _s7our::I64 = I64[_s7ouk::P64 + 37];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7ouq::I64;
           I64[Hp] = _s7our::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7oRz: // global
           Hp = Hp + 24;
           _s7ouk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7oRY; else goto c7oRX;
       c7oRY: // global
           HpAlloc = 24;
           R1 = _s7ouk::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7oRX: // global
           _s7ouv::I64 = I64[_s7ouk::P64 + 20];
           _s7ouw::I64 = I64[_s7ouk::P64 + 28];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _s7ouv::I64;
           I64[Hp] = _s7ouw::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Typeable.mkFunTy_entry() //  [R2, R3]
         { info_tbl: [(c7oS2,
                       label: Data.Typeable.mkFunTy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oS2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7oS3; else goto c7oS4;
       c7oS3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Typeable.mkFunTy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7oS4: // global
           I64[Sp - 16] = block_c7oPH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7oUR; else goto c7oPI;
       u7oUR: // global
           call _c7oPH(R1) args: 0, res: 0, upd: 0;
       c7oPI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oPH() //  [R1]
         { info_tbl: [(c7oPH,
                       label: block_c7oPH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oPH: // global
           I64[Sp] = block_c7oPM_info;
           _s7ou7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7ou7::P64;
           if (R1 & 7 != 0) goto u7oUP; else goto c7oPN;
       u7oUP: // global
           call _c7oPM(R1) args: 0, res: 0, upd: 0;
       c7oPN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oPM() //  [R1]
         { info_tbl: [(c7oPM,
                       label: block_c7oPM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oPM: // global
           I64[Sp - 8] = block_c7oS6_info;
           _s7ou9::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7ou9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oUQ; else goto c7oTw;
       u7oUQ: // global
           call _c7oS6(R1) args: 0, res: 0, upd: 0;
       c7oTw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oS6() //  [R1]
         { info_tbl: [(c7oS6,
                       label: block_c7oS6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oS6: // global
           _c7oUx::P64 = R1 & 7;
           if (_c7oUx::P64 < 3) goto u7oUH; else goto u7oUI;
       u7oUH: // global
           if (_c7oUx::P64 < 2) goto c7oTD; else goto c7oTS;
       c7oTD: // global
           I64[Sp] = block_c7oTA_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7oTS: // global
           I64[Sp] = block_c7oTQ_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7oUI: // global
           if (_c7oUx::P64 < 4) goto c7oU7; else goto c7oUm;
       c7oU7: // global
           I64[Sp] = block_c7oU5_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7oUm: // global
           I64[Sp] = block_c7oUk_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oTA() //  [R1]
         { info_tbl: [(c7oTA,
                       label: block_c7oTA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oTA: // global
           if (R1 & 7 == 1) goto u7oV0; else goto u7oUL;
       u7oV0: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUL: // global
           Sp = Sp + 8;
           call _s7oui() args: 0, res: 0, upd: 0;
     }
 },
 _c7oTQ() //  [R1]
         { info_tbl: [(c7oTQ,
                       label: block_c7oTQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oTQ: // global
           if (R1 & 7 == 1) goto u7oV2; else goto u7oUM;
       u7oV2: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUM: // global
           Sp = Sp + 8;
           call _s7oui() args: 0, res: 0, upd: 0;
     }
 },
 _c7oU5() //  [R1]
         { info_tbl: [(c7oU5,
                       label: block_c7oU5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oU5: // global
           if (R1 & 7 == 1) goto u7oV4; else goto u7oUN;
       u7oV4: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUN: // global
           Sp = Sp + 8;
           call _s7oui() args: 0, res: 0, upd: 0;
     }
 },
 _c7oUk() //  [R1]
         { info_tbl: [(c7oUk,
                       label: block_c7oUk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oUk: // global
           if (R1 & 7 == 1) goto u7oV6; else goto u7oUO;
       u7oV6: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUO: // global
           Sp = Sp + 8;
           call _s7oui() args: 0, res: 0, upd: 0;
     }
 },
 _s7oui() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7oui: // global
           I64[Sp - 8] = block_c7oSg_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oV8; else goto c7oSv;
       u7oV8: // global
           call _c7oSg(R1) args: 0, res: 0, upd: 0;
       c7oSv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oSg() //  [R1]
         { info_tbl: [(c7oSg,
                       label: block_c7oSg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oSg: // global
           _c7oUC::P64 = R1 & 7;
           if (_c7oUC::P64 < 3) goto u7oUJ; else goto u7oUK;
       u7oUJ: // global
           if (_c7oUC::P64 < 2) goto c7oSC; else goto c7oSR;
       c7oSC: // global
           I64[Sp] = block_c7oSz_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$WTrType_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7oSR: // global
           I64[Sp] = block_c7oSP_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 22];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       u7oUK: // global
           if (_c7oUC::P64 < 4) goto c7oT6; else goto c7oTl;
       c7oT6: // global
           I64[Sp] = block_c7oT4_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = P64[R1 + 21];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       c7oTl: // global
           I64[Sp] = block_c7oTj_info;
           R3 = Data.Typeable.mkFunTy1_closure;
           R2 = Data.Typeable.Internal.$mApp1_closure;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oSz() //  [R1]
         { info_tbl: [(c7oSz,
                       label: block_c7oSz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oSz: // global
           if (R1 & 7 == 1) goto u7oUS; else goto u7oUT;
       u7oUS: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUT: // global
           call _c7oQH() args: 0, res: 0, upd: 0;
     }
 },
 _c7oSP() //  [R1]
         { info_tbl: [(c7oSP,
                       label: block_c7oSP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oSP: // global
           if (R1 & 7 == 1) goto u7oUU; else goto u7oUV;
       u7oUU: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUV: // global
           call _c7oQH() args: 0, res: 0, upd: 0;
     }
 },
 _c7oT4() //  [R1]
         { info_tbl: [(c7oT4,
                       label: block_c7oT4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oT4: // global
           if (R1 & 7 == 1) goto u7oUW; else goto u7oUX;
       u7oUW: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUX: // global
           call _c7oQH() args: 0, res: 0, upd: 0;
     }
 },
 _c7oTj() //  [R1]
         { info_tbl: [(c7oTj,
                       label: block_c7oTj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oTj: // global
           if (R1 & 7 == 1) goto u7oUY; else goto u7oUZ;
       u7oUY: // global
           call _c7oPU() args: 0, res: 0, upd: 0;
       u7oUZ: // global
           call _c7oQH() args: 0, res: 0, upd: 0;
     }
 },
 _c7oPU() //  []
         { info_tbl: [(c7oPU,
                       label: block_c7oPU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oPU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7oSb; else goto c7oSa;
       c7oSb: // global
           HpAlloc = 32;
           I64[Sp] = block_c7oPU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7oSa: // global
           I64[Hp - 24] = sat_s7oug_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c7oS8_info;
           R3 = Hp - 24;
           R2 = Data.Typeable.mkFunTy4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oS8() //  [R1]
         { info_tbl: [(c7oS8,
                       label: block_c7oS8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oS8: // global
           R3 = R1;
           R2 = Data.Typeable.mkFunTy5_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7oQH() //  []
         { info_tbl: [(c7oQH,
                       label: block_c7oQH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oQH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7oSr; else goto c7oSq;
       c7oSr: // global
           HpAlloc = 96;
           I64[Sp] = block_c7oQH_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7oSq: // global
           I64[Hp - 88] = sat_s7ouP_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           I64[Hp - 40] = sat_s7ouz_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           I64[Sp] = block_c7oSj_info;
           R2 = Hp - 14;
           R1 = GHC.Fingerprint.fingerprintFingerprints_closure;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oSj() //  [R1]
         { info_tbl: [(c7oSj,
                       label: block_c7oSj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oSj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7oSu; else goto c7oSt;
       c7oSu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7oSt: // global
           _s7ouT::I64 = I64[R1 + 7];
           _s7ouU::I64 = I64[R1 + 15];
           I64[Hp - 48] = Data.Typeable.Internal.TrFun_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s7ouT::I64;
           I64[Hp - 16] = _s7ouU::I64;
           I64[Hp - 8] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp] = Hp - 44;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.677066103 UTC

[section ""data" . Data.Typeable.splitTyConApp_closure" {
     Data.Typeable.splitTyConApp_closure:
         const Data.Typeable.splitTyConApp_info;
         const 0;
 },
 Data.Typeable.splitTyConApp_entry() //  [R2]
         { info_tbl: [(c7oYb,
                       label: Data.Typeable.splitTyConApp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oYb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7oYh; else goto c7oYi;
       c7oYh: // global
           R2 = R2;
           R1 = Data.Typeable.splitTyConApp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7oYi: // global
           I64[Sp - 8] = block_c7oY8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oYn; else goto c7oY9;
       u7oYn: // global
           call _c7oY8(R1) args: 0, res: 0, upd: 0;
       c7oY9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oY8() //  [R1]
         { info_tbl: [(c7oY8,
                       label: block_c7oY8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oY8: // global
           I64[Sp] = block_c7oYe_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oYe() //  [R1, R2]
         { info_tbl: [(c7oYe,
                       label: block_c7oYe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oYe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7oYm; else goto c7oYl;
       c7oYm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7oYl: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.685326762 UTC

[section ""data" . Data.Typeable.typeRepArgs_closure" {
     Data.Typeable.typeRepArgs_closure:
         const Data.Typeable.typeRepArgs_info;
         const 0;
 },
 Data.Typeable.typeRepArgs_entry() //  [R2]
         { info_tbl: [(c7oYM,
                       label: Data.Typeable.typeRepArgs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oYM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7oYQ; else goto c7oYR;
       c7oYQ: // global
           R2 = R2;
           R1 = Data.Typeable.typeRepArgs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7oYR: // global
           I64[Sp - 8] = block_c7oYJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7oYV; else goto c7oYK;
       u7oYV: // global
           call _c7oYJ(R1) args: 0, res: 0, upd: 0;
       c7oYK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7oYJ() //  [R1]
         { info_tbl: [(c7oYJ,
                       label: block_c7oYJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oYJ: // global
           I64[Sp] = block_c7oYP_info;
           R3 = P64[R1 + 7];
           R2 = GHC.Types.[]_closure+1;
           call Data.Typeable.Internal.$wgo_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7oYP() //  [R2]
         { info_tbl: [(c7oYP,
                       label: block_c7oYP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oYP: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.692961006 UTC

[section ""data" . Data.Typeable.typeRepTyCon_closure" {
     Data.Typeable.typeRepTyCon_closure:
         const Data.Typeable.typeRepTyCon_info;
         const 0;
 },
 Data.Typeable.typeRepTyCon_entry() //  [R2]
         { info_tbl: [(c7oZh,
                       label: Data.Typeable.typeRepTyCon_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oZh: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepTyCon_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.696768288 UTC

[section ""data" . Data.Typeable.typeRepFingerprint_closure" {
     Data.Typeable.typeRepFingerprint_closure:
         const Data.Typeable.typeRepFingerprint_info;
         const 0;
 },
 Data.Typeable.typeRepFingerprint_entry() //  [R2]
         { info_tbl: [(c7oZs,
                       label: Data.Typeable.typeRepFingerprint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oZs: // global
           R2 = R2;
           call Data.Typeable.Internal.someTypeRepFingerprint_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.700039795 UTC

[section ""data" . Data.Typeable.rnfTypeRep_closure" {
     Data.Typeable.rnfTypeRep_closure:
         const Data.Typeable.rnfTypeRep_info;
 },
 Data.Typeable.rnfTypeRep_entry() //  [R2]
         { info_tbl: [(c7oZD,
                       label: Data.Typeable.rnfTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oZD: // global
           R2 = R2;
           call Data.Typeable.Internal.rnfSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.703334741 UTC

[section ""data" . Data.Typeable.typeOf1_closure" {
     Data.Typeable.typeOf1_closure:
         const Data.Typeable.typeOf1_info;
 },
 Data.Typeable.typeOf1_entry() //  [R2]
         { info_tbl: [(c7oZO,
                       label: Data.Typeable.typeOf1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oZO: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.706773337 UTC

[section ""data" . Data.Typeable.typeOf2_closure" {
     Data.Typeable.typeOf2_closure:
         const Data.Typeable.typeOf2_info;
 },
 Data.Typeable.typeOf2_entry() //  [R2]
         { info_tbl: [(c7oZZ,
                       label: Data.Typeable.typeOf2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7oZZ: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.710108329 UTC

[section ""data" . Data.Typeable.typeOf3_closure" {
     Data.Typeable.typeOf3_closure:
         const Data.Typeable.typeOf3_info;
 },
 Data.Typeable.typeOf3_entry() //  [R2]
         { info_tbl: [(c7p0a,
                       label: Data.Typeable.typeOf3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7p0a: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.7138048 UTC

[section ""data" . Data.Typeable.typeOf4_closure" {
     Data.Typeable.typeOf4_closure:
         const Data.Typeable.typeOf4_info;
 },
 Data.Typeable.typeOf4_entry() //  [R2]
         { info_tbl: [(c7p0l,
                       label: Data.Typeable.typeOf4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7p0l: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.716993727 UTC

[section ""data" . Data.Typeable.typeOf5_closure" {
     Data.Typeable.typeOf5_closure:
         const Data.Typeable.typeOf5_info;
 },
 Data.Typeable.typeOf5_entry() //  [R2]
         { info_tbl: [(c7p0w,
                       label: Data.Typeable.typeOf5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7p0w: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.720888663 UTC

[section ""data" . Data.Typeable.typeOf6_closure" {
     Data.Typeable.typeOf6_closure:
         const Data.Typeable.typeOf6_info;
 },
 Data.Typeable.typeOf6_entry() //  [R2]
         { info_tbl: [(c7p0H,
                       label: Data.Typeable.typeOf6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7p0H: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.724266708 UTC

[section ""data" . Data.Typeable.typeOf7_closure" {
     Data.Typeable.typeOf7_closure:
         const Data.Typeable.typeOf7_info;
 },
 Data.Typeable.typeOf7_entry() //  [R2]
         { info_tbl: [(c7p0S,
                       label: Data.Typeable.typeOf7_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7p0S: // global
           R2 = R2;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.727447226 UTC

[section ""data" . Data.Typeable.$trModule3_closure" {
     Data.Typeable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.729083926 UTC

[section ""data" . Data.Typeable.$trModule1_closure" {
     Data.Typeable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Typeable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.731415016 UTC

[section ""data" . Data.Typeable.$trModule_closure" {
     Data.Typeable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Typeable.$trModule3_closure+1;
         const Data.Typeable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.733472121 UTC

[section ""data" . Data.Typeable.showsTypeRep_closure" {
     Data.Typeable.showsTypeRep_closure:
         const Data.Typeable.showsTypeRep_info;
         const 0;
 },
 Data.Typeable.showsTypeRep_entry() //  [R2]
         { info_tbl: [(c7p19,
                       label: Data.Typeable.showsTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7p19: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7p1a; else goto c7p1b;
       c7p1a: // global
           R2 = R2;
           R1 = Data.Typeable.showsTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7p1b: // global
           I64[Sp - 8] = block_c7p16_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7p1f; else goto c7p17;
       u7p1f: // global
           call _c7p16(R1) args: 0, res: 0, upd: 0;
       c7p17: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7p16() //  [R1]
         { info_tbl: [(c7p16,
                       label: block_c7p16_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7p16: // global
           R3 = P64[R1 + 7];
           R2 = GHC.Show.$fShow(,)1_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:41.738782645 UTC

[section ""relreadonly" . S7owJ_srt" {
     S7owJ_srt:
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Typeable.cast_closure;
         const Data.Typeable.eqT_closure;
         const Data.Typeable.gcast_closure;
         const Data.Typeable.gcast1_closure;
         const Data.Typeable.gcast2_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Typeable.funResultTy_closure;
         const Data.Typeable.mkFunTy1_closure;
         const Data.Typeable.Internal.showTypeable_closure;
         const GHC.Err.error_closure;
         const GHC.Fingerprint.fingerprintFingerprints_closure;
         const Data.Typeable.mkFunTy_closure;
         const Data.Typeable.mkFunTy5_closure;
         const Data.Typeable.Internal.$wgo_closure;
         const Data.Typeable.splitTyConApp_closure;
         const Data.Typeable.typeRepArgs_closure;
         const Data.Typeable.Internal.someTypeRepTyCon_closure;
         const Data.Typeable.Internal.someTypeRepFingerprint_closure;
         const Data.Typeable.showsTypeRep_closure;
 }]

