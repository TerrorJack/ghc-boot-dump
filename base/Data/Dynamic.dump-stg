
==================== Pre unarise: ====================
2018-03-16 16:04:43.083015059 UTC

Data.Dynamic.$fExceptionDynamic3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Dynamic.$fExceptionDynamic4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<<"#;

Data.Dynamic.$fExceptionDynamic2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">>"#;

Data.Dynamic.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9BhA]
        case w_s9BhA of {
          Data.Dynamic.Dynamic t_s9BhC [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9BhE [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9BhC] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9BhC; } in
              let {
                sat_s9BhI [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9BhE] \r [x_s9BhF]
                        let {
                          sat_s9BhH [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9BhE x_s9BhF] \u []
                                  let {
                                    sat_s9BhG [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9BhF] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9BhF;
                                  } in  f_s9BhE sat_s9BhG;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9BhH;
              } in  sat_s9BhI;
        };

Data.Dynamic.$fShowDynamic_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9BhJ w1_s9BhK] Data.Dynamic.$w$cshowsPrec w1_s9BhK;

Data.Dynamic.toDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Dynamic.Dynamic
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];

Data.Dynamic.fromDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> a -> a
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9BhL ds_s9BhM def_s9BhN]
        case ds_s9BhM of {
          Data.Dynamic.Dynamic t_s9BhP [Occ=Once] v_s9BhQ [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9BhP $dTypeable_s9BhL
              of
              { GHC.Types.False -> def_s9BhN;
                GHC.Types.True -> v_s9BhQ;
              };
        };

Data.Dynamic.fromDynamic
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> GHC.Base.Maybe a
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9BhS ds_s9BhT]
        case ds_s9BhT of {
          Data.Dynamic.Dynamic t_s9BhV [Occ=Once] v_s9BhW [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9BhV $dTypeable_s9BhS
              of
              { GHC.Types.False -> GHC.Base.Nothing [];
                GHC.Types.True -> GHC.Base.Just [v_s9BhW];
              };
        };

lvl_r9Bhp :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9BhZ [Occ=Once]
                   ww9_s9Bi0 [Occ=Once]
                   ww10_s9Bi1 [Occ=Once]
                   ww11_s9Bi2 [Occ=Once]
                   ww12_s9Bi3 [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s9Bi5 [Occ=Once]
                         ww3_s9Bi6 [Occ=Once]
                         ww4_s9Bi7 [Occ=Once]
                         ww5_s9Bi8 [Occ=Once]
                         ww6_s9Bi9 [Occ=Once] ->
                    let {
                      sat_s9Bib [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s9Bi5
                                                                ww3_s9Bi6
                                                                ww4_s9Bi7
                                                                ww5_s9Bi8
                                                                ww6_s9Bi9]; } in
                    let {
                      sat_s9Bia [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s9BhZ
                                                                ww9_s9Bi0
                                                                ww10_s9Bi1
                                                                ww11_s9Bi2
                                                                ww12_s9Bi3];
                    } in  Data.Typeable.Internal.mkTrApp sat_s9Bia sat_s9Bib;
              };
        };

Data.Dynamic.dynApply
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Bic ds1_s9Bid]
        case ds_s9Bic of {
          Data.Dynamic.Dynamic ds2_s9Bif [Occ=Once!] f_s9Big [Occ=Once*] ->
              case ds2_s9Bif of {
                __DEFAULT -> GHC.Base.Nothing [];
                Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                             co1_i9B0z
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds3_s9Bik [Occ=Once]
                                             ds4_s9Bil [Occ=Once!] ->
                    case ds1_s9Bid of {
                      Data.Dynamic.Dynamic ta'_s9Bin [Occ=Once] x_s9Bio [Occ=Once*] ->
                          case Data.Typeable.Internal.sameTypeRep ds3_s9Bik ta'_s9Bin of {
                            GHC.Types.False -> GHC.Base.Nothing [];
                            GHC.Types.True ->
                                case ds4_s9Bil of wild4_s9Biq {
                                  Data.Typeable.Internal.TrType _ [Occ=Dead] _ [Occ=Dead] ->
                                      let-no-escape {
                                        $j_s9Bir [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9Big x_s9Bio wild4_s9Biq] \r [dt2_s9Bis
                                                                                       dt3_s9Bit]
                                                case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                  GHC.Fingerprint.Type.Fingerprint dt4_s9Biv [Occ=Once]
                                                                                   dt5_s9Biw [Occ=Once] ->
                                                      case eqWord# [dt2_s9Bis dt4_s9Biv] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt3_s9Bit dt5_s9Biw] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Biz [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9BiA [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Biz];
                                                                  } in  GHC.Base.Just [sat_s9BiA];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                        _ [Occ=Dead, Dmd=<L,A>] ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt2_s9BiD [Occ=Once]
                                                                                 dt3_s9BiE [Occ=Once] ->
                                                    $j_s9Bir dt2_s9BiD dt3_s9BiE;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt2_s9BiF [Occ=Once]
                                                                         dt3_s9BiG [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9Bir dt2_s9BiF dt3_s9BiG;
                                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                       dt2_s9BiK [Occ=Once]
                                                                       dt3_s9BiL [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9Bir dt2_s9BiK dt3_s9BiL;
                                        };
                                  Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds7_s9BiT [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9BiU [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9Big
                                                      x_s9Bio
                                                      wild4_s9Biq
                                                      ds7_s9BiT] \r [dt4_s9BiV dt5_s9BiW]
                                                case ds7_s9BiT of {
                                                  Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                   Dmd=<L,A>]
                                                                                _ [Occ=Dead,
                                                                                   Dmd=<L,A>] ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9BiZ [Occ=Once]
                                                                                         dt7_s9Bj0 [Occ=Once] ->
                                                            case eqWord# [dt4_s9BiV dt6_s9BiZ] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9BiW dt7_s9Bj0]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9Bj3 [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9Big
                                                                               x_s9Bio] \u []
                                                                                  f_s9Big
                                                                                      x_s9Bio; } in
                                                                        let {
                                                                          sat_s9Bj4 [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                          sat_s9Bj3];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9Bj4];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9Bj5 [Occ=Once]
                                                                                 dt7_s9Bj6 [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BiV dt6_s9Bj5] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BiW dt7_s9Bj6] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Bjc [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9Bjd [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Bjc];
                                                                  } in  GHC.Base.Just [sat_s9Bjd];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                  Dmd=<L,A>]
                                                                               dt6_s9Bje [Occ=Once]
                                                                               dt7_s9Bjf [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BiV dt6_s9Bje] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BiW dt7_s9Bjf] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Bjl [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9Bjm [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Bjl];
                                                                  } in  GHC.Base.Just [sat_s9Bjm];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                        _ [Occ=Dead, Dmd=<L,A>] ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9Bjp [Occ=Once]
                                                                                 dt5_s9Bjq [Occ=Once] ->
                                                    $j_s9BiU dt4_s9Bjp dt5_s9Bjq;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9Bjr [Occ=Once]
                                                                         dt5_s9Bjs [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9BiU dt4_s9Bjr dt5_s9Bjs;
                                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                       dt4_s9Bjw [Occ=Once]
                                                                       dt5_s9Bjx [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9BiU dt4_s9Bjw dt5_s9Bjx;
                                        };
                                  Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               ds7_s9BjF [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9BjG [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9Big
                                                      x_s9Bio
                                                      wild4_s9Biq
                                                      ds7_s9BjF] \r [dt4_s9BjH dt5_s9BjI]
                                                case ds7_s9BjF of {
                                                  Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                   Dmd=<L,A>]
                                                                                _ [Occ=Dead,
                                                                                   Dmd=<L,A>] ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9BjL [Occ=Once]
                                                                                         dt7_s9BjM [Occ=Once] ->
                                                            case eqWord# [dt4_s9BjH dt6_s9BjL] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9BjI dt7_s9BjM]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9BjP [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9Big
                                                                               x_s9Bio] \u []
                                                                                  f_s9Big
                                                                                      x_s9Bio; } in
                                                                        let {
                                                                          sat_s9BjQ [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                          sat_s9BjP];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9BjQ];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9BjR [Occ=Once]
                                                                                 dt7_s9BjS [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BjH dt6_s9BjR] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BjI dt7_s9BjS] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9BjY [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9BjZ [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9BjY];
                                                                  } in  GHC.Base.Just [sat_s9BjZ];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                  Dmd=<L,A>]
                                                                               dt6_s9Bk0 [Occ=Once]
                                                                               dt7_s9Bk1 [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BjH dt6_s9Bk0] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BjI dt7_s9Bk1] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Bk7 [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9Bk8 [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Bk7];
                                                                  } in  GHC.Base.Just [sat_s9Bk8];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                        _ [Occ=Dead, Dmd=<L,A>] ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9Bkb [Occ=Once]
                                                                                 dt5_s9Bkc [Occ=Once] ->
                                                    $j_s9BjG dt4_s9Bkb dt5_s9Bkc;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9Bkd [Occ=Once]
                                                                         dt5_s9Bke [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9BjG dt4_s9Bkd dt5_s9Bke;
                                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                       dt4_s9Bki [Occ=Once]
                                                                       dt5_s9Bkj [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9BjG dt4_s9Bki dt5_s9Bkj;
                                        };
                                  Data.Typeable.Internal.TrFun co2_i9AX1
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              lvl_r9Bhp Data.Typeable.Internal.$mApp1
                                      of
                                      { GHC.Types.False -> GHC.Base.Nothing [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s9Bks [Occ=Once]
                                                :: (b_i9B0x |> Sym (TYPE
                                                                      (Sym (Nth:0
                                                                                (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                        r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                              [LclId] =
                                                  [f_s9Big x_s9Bio] \u [] f_s9Big x_s9Bio; } in
                                            let {
                                              sat_s9Bkt [Occ=Once] :: Data.Dynamic.Dynamic
                                              [LclId] =
                                                  CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                              sat_s9Bks];
                                            } in  GHC.Base.Just [sat_s9Bkt];
                                      };
                                };
                          };
                    };
              };
        };

Data.Dynamic.dynTypeRep
  :: Data.Dynamic.Dynamic -> Data.Typeable.Internal.SomeTypeRep
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Bku]
        case ds_s9Bku of {
          Data.Dynamic.Dynamic tr_s9Bkw [Occ=Once] _ [Occ=Dead] ->
              Data.Typeable.Internal.$WSomeTypeRep tr_s9Bkw;
        };

Data.Dynamic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Dynamic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule4];

Data.Dynamic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Dynamic"#;

Data.Dynamic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule2];

Data.Dynamic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Dynamic.$trModule3
                                     Data.Dynamic.$trModule1];

$krep_r9Bhq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r9Bhr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9Bhq GHC.Types.[]];

$krep2_r9Bhs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep1_r9Bhr];

$krep3_r9Bht :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeRep
                                              $krep2_r9Bhs];

Data.Dynamic.$fExceptionDynamic7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Dynamic"#;

Data.Dynamic.$fExceptionDynamic6 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$fExceptionDynamic7];

Data.Dynamic.$tcDynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12333845116585145369##
                                    13454739855111402131##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$fExceptionDynamic6
                                    0#
                                    GHC.Types.krep$*];

$krep4_r9Bhu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Dynamic.$tcDynamic
                                              GHC.Types.[]];

$krep5_r9Bhv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r9Bhq $krep4_r9Bhu];

Data.Dynamic.$tc'Dynamic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r9Bht $krep5_r9Bhv];

Data.Dynamic.$tc'Dynamic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Dynamic"#;

Data.Dynamic.$tc'Dynamic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$tc'Dynamic3];

Data.Dynamic.$tc'Dynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11394777848779697579##
                                    644307381671950132##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$tc'Dynamic2
                                    1#
                                    Data.Dynamic.$tc'Dynamic1];

Data.Dynamic.$fExceptionDynamic5
  :: Data.Typeable.Internal.TypeRep Data.Dynamic.Dynamic
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                12333845116585145369##
                13454739855111402131##
                Data.Dynamic.$trModule
                Data.Dynamic.$fExceptionDynamic6
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9Bkz [Occ=Once]
                   ww9_s9BkA [Occ=Once]
                   ww10_s9BkB [Occ=Once]
                   ww11_s9BkC [Occ=Once]
                   ww12_s9BkD [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9Bkz
                                              ww9_s9BkA
                                              ww10_s9BkB
                                              ww11_s9BkC
                                              ww12_s9BkD];
        };

Data.Dynamic.$fExceptionDynamic1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Data.Dynamic.$fExceptionDynamic2;

Data.Dynamic.$fExceptionDynamic_$cshow
  :: Data.Dynamic.Dynamic -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9BkE]
        case x_s9BkE of {
          Data.Dynamic.Dynamic t_s9BkG [Occ=Once] _ [Occ=Dead] ->
              let {
                sat_s9BkI [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [t_s9BkG] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3
                            t_s9BkG
                            Data.Dynamic.$fExceptionDynamic1;
              } in 
                GHC.CString.unpackAppendCString#
                    Data.Dynamic.$fExceptionDynamic4 sat_s9BkI;
        };

Data.Dynamic.$fShowDynamic1
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9BkJ]
        case ds_s9BkJ of {
          Data.Dynamic.Dynamic t_s9BkL [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9BkN [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9BkL] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9BkL; } in
              let {
                sat_s9BkR [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9BkN] \r [x_s9BkO]
                        let {
                          sat_s9BkQ [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9BkN x_s9BkO] \u []
                                  let {
                                    sat_s9BkP [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9BkO] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9BkO;
                                  } in  f_s9BkN sat_s9BkP;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9BkQ;
              } in  sat_s9BkR;
        };

Data.Dynamic.$fShowDynamic_$cshowList
  :: [Data.Dynamic.Dynamic] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9BkS s_s9BkT]
        GHC.Show.showList__ Data.Dynamic.$fShowDynamic1 ls_s9BkS s_s9BkT;

Data.Dynamic.$fShowDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Dynamic.$fShowDynamic_$cshowsPrec
                                    Data.Dynamic.$fExceptionDynamic_$cshow
                                    Data.Dynamic.$fShowDynamic_$cshowList];

Data.Dynamic.$fExceptionDynamic_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9BkU]
        case ds_s9BkU of {
          GHC.Exception.SomeException $dException1_s9BkW [Occ=Once]
                                      e2_s9BkX [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_s9BkW of sat_s9BkY {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_s9BkY Data.Dynamic.$fExceptionDynamic5
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_s9BkX];
                    };
              };
        };

Data.Dynamic.$fExceptionDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [Data.Dynamic.$fExceptionDynamic5
                                              Data.Dynamic.$fShowDynamic
                                              Data.Dynamic.$fExceptionDynamic_$ctoException
                                              Data.Dynamic.$fExceptionDynamic_$cfromException
                                              Data.Dynamic.$fExceptionDynamic_$cshow];
Data.Dynamic.$fExceptionDynamic_$ctoException [Occ=LoopBreaker]
  :: Data.Dynamic.Dynamic -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [Data.Dynamic.$fExceptionDynamic
                                     eta_B1];

lvl1_r9Bhw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Type error in dynamic application.\n"#;

lvl2_r9Bhx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Can't apply function "#;

lvl3_r9Bhy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " to argument "#;

Data.Dynamic.dynApp1
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<B,1*U><B,1*U>x, Unf=OtherCon []] =
    [] \r [x_s9Bl0 f_s9Bl1]
        let {
          sat_s9Ble [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9Bl0 f_s9Bl1] \u []
                  let {
                    sat_s9Bld [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9Bl0 f_s9Bl1] \u []
                            case f_s9Bl1 of {
                              Data.Dynamic.Dynamic t_s9Bl3 [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    sat_s9Blc [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [x_s9Bl0 t_s9Bl3] \u []
                                            let {
                                              sat_s9Blb [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [x_s9Bl0] \s []
                                                      let {
                                                        sat_s9Bla [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [x_s9Bl0] \u []
                                                                case x_s9Bl0 of {
                                                                  Data.Dynamic.Dynamic t1_s9Bl7 [Occ=Once]
                                                                                       _ [Occ=Dead] ->
                                                                      let {
                                                                        sat_s9Bl9 [Occ=Once]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [t1_s9Bl7] \u []
                                                                                Data.Typeable.Internal.showTypeable
                                                                                    Data.Dynamic.$fExceptionDynamic3
                                                                                    t1_s9Bl7
                                                                                    Data.Dynamic.$fExceptionDynamic1;
                                                                      } in 
                                                                        GHC.CString.unpackAppendCString#
                                                                            Data.Dynamic.$fExceptionDynamic4
                                                                            sat_s9Bl9;
                                                                };
                                                      } in 
                                                        GHC.CString.unpackAppendCString#
                                                            lvl3_r9Bhy sat_s9Bla;
                                            } in 
                                              case
                                                  Data.Typeable.Internal.showTypeable
                                                      Data.Dynamic.$fExceptionDynamic3
                                                      t_s9Bl3
                                                      Data.Dynamic.$fExceptionDynamic1
                                              of
                                              sat_s9Bl5
                                              { __DEFAULT -> GHC.Base.++ sat_s9Bl5 sat_s9Blb;
                                              };
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        Data.Dynamic.$fExceptionDynamic4 sat_s9Blc;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_r9Bhx sat_s9Bld;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl1_r9Bhw sat_s9Ble
          of
          sat_s9Blf
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9Blf;
          };

Data.Dynamic.dynApp
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [f_s9Blg x_s9Blh]
        case Data.Dynamic.dynApply f_s9Blg x_s9Blh of {
          GHC.Base.Nothing -> Data.Dynamic.dynApp1 x_s9Blh f_s9Blg;
          GHC.Base.Just r_s9Blj [Occ=Once] -> r_s9Blj;
        };

Data.Dynamic.Dynamic
  :: forall a.
     Data.Typeable.Internal.TypeRep a -> a -> Data.Dynamic.Dynamic
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:04:43.096849619 UTC

Data.Dynamic.$fExceptionDynamic3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Dynamic.$fExceptionDynamic4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<<"#;

Data.Dynamic.$fExceptionDynamic2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">>"#;

Data.Dynamic.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9BhA]
        case w_s9BhA of {
          Data.Dynamic.Dynamic t_s9BhC [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9BhE [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9BhC] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9BhC; } in
              let {
                sat_s9BhI [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9BhE] \r [x_s9BhF]
                        let {
                          sat_s9BhH [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9BhE x_s9BhF] \u []
                                  let {
                                    sat_s9BhG [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9BhF] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9BhF;
                                  } in  f_s9BhE sat_s9BhG;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9BhH;
              } in  sat_s9BhI;
        };

Data.Dynamic.$fShowDynamic_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9BhJ w1_s9BhK] Data.Dynamic.$w$cshowsPrec w1_s9BhK;

Data.Dynamic.toDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Dynamic.Dynamic
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];

Data.Dynamic.fromDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> a -> a
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9BhL ds_s9BhM def_s9BhN]
        case ds_s9BhM of {
          Data.Dynamic.Dynamic t_s9BhP [Occ=Once] v_s9BhQ [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9BhP $dTypeable_s9BhL
              of
              { GHC.Types.False -> def_s9BhN;
                GHC.Types.True -> v_s9BhQ;
              };
        };

Data.Dynamic.fromDynamic
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> GHC.Base.Maybe a
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9BhS ds_s9BhT]
        case ds_s9BhT of {
          Data.Dynamic.Dynamic t_s9BhV [Occ=Once] v_s9BhW [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9BhV $dTypeable_s9BhS
              of
              { GHC.Types.False -> GHC.Base.Nothing [];
                GHC.Types.True -> GHC.Base.Just [v_s9BhW];
              };
        };

lvl_r9Bhp :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9BhZ [Occ=Once]
                   ww9_s9Bi0 [Occ=Once]
                   ww10_s9Bi1 [Occ=Once]
                   ww11_s9Bi2 [Occ=Once]
                   ww12_s9Bi3 [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s9Bi5 [Occ=Once]
                         ww3_s9Bi6 [Occ=Once]
                         ww4_s9Bi7 [Occ=Once]
                         ww5_s9Bi8 [Occ=Once]
                         ww6_s9Bi9 [Occ=Once] ->
                    let {
                      sat_s9Bib [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s9Bi5
                                                                ww3_s9Bi6
                                                                ww4_s9Bi7
                                                                ww5_s9Bi8
                                                                ww6_s9Bi9]; } in
                    let {
                      sat_s9Bia [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s9BhZ
                                                                ww9_s9Bi0
                                                                ww10_s9Bi1
                                                                ww11_s9Bi2
                                                                ww12_s9Bi3];
                    } in  Data.Typeable.Internal.mkTrApp sat_s9Bia sat_s9Bib;
              };
        };

Data.Dynamic.dynApply
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Bic ds1_s9Bid]
        case ds_s9Bic of {
          Data.Dynamic.Dynamic ds2_s9Bif [Occ=Once!] f_s9Big [Occ=Once*] ->
              case ds2_s9Bif of {
                __DEFAULT -> GHC.Base.Nothing [];
                Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds3_s9Bik [Occ=Once]
                                             ds4_s9Bil [Occ=Once!] ->
                    case ds1_s9Bid of {
                      Data.Dynamic.Dynamic ta'_s9Bin [Occ=Once] x_s9Bio [Occ=Once*] ->
                          case Data.Typeable.Internal.sameTypeRep ds3_s9Bik ta'_s9Bin of {
                            GHC.Types.False -> GHC.Base.Nothing [];
                            GHC.Types.True ->
                                case ds4_s9Bil of wild4_s9Biq {
                                  Data.Typeable.Internal.TrType ->
                                      let-no-escape {
                                        $j_s9Bir [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9Big x_s9Bio wild4_s9Biq] \r [dt2_s9Bis
                                                                                       dt3_s9Bit]
                                                case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                  GHC.Fingerprint.Type.Fingerprint dt4_s9Biv [Occ=Once]
                                                                                   dt5_s9Biw [Occ=Once] ->
                                                      case eqWord# [dt2_s9Bis dt4_s9Biv] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt3_s9Bit dt5_s9Biw] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Biz [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9BiA [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Biz];
                                                                  } in  GHC.Base.Just [sat_s9BiA];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt2_s9BiD [Occ=Once]
                                                                                 dt3_s9BiE [Occ=Once] ->
                                                    $j_s9Bir dt2_s9BiD dt3_s9BiE;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt2_s9BiF [Occ=Once]
                                                                         dt3_s9BiG [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9Bir dt2_s9BiF dt3_s9BiG;
                                          Data.Typeable.Internal.TrApp dt2_s9BiK [Occ=Once]
                                                                       dt3_s9BiL [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9Bir dt2_s9BiK dt3_s9BiL;
                                        };
                                  Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds7_s9BiT [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9BiU [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9Big
                                                      x_s9Bio
                                                      wild4_s9Biq
                                                      ds7_s9BiT] \r [dt4_s9BiV dt5_s9BiW]
                                                case ds7_s9BiT of {
                                                  Data.Typeable.Internal.TrType ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9BiZ [Occ=Once]
                                                                                         dt7_s9Bj0 [Occ=Once] ->
                                                            case eqWord# [dt4_s9BiV dt6_s9BiZ] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9BiW dt7_s9Bj0]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9Bj3 [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9Big
                                                                               x_s9Bio] \u []
                                                                                  f_s9Big
                                                                                      x_s9Bio; } in
                                                                        let {
                                                                          sat_s9Bj4 [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                          sat_s9Bj3];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9Bj4];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9Bj5 [Occ=Once]
                                                                                 dt7_s9Bj6 [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BiV dt6_s9Bj5] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BiW dt7_s9Bj6] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Bjc [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9Bjd [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Bjc];
                                                                  } in  GHC.Base.Just [sat_s9Bjd];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp dt6_s9Bje [Occ=Once]
                                                                               dt7_s9Bjf [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BiV dt6_s9Bje] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BiW dt7_s9Bjf] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Bjl [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9Bjm [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Bjl];
                                                                  } in  GHC.Base.Just [sat_s9Bjm];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9Bjp [Occ=Once]
                                                                                 dt5_s9Bjq [Occ=Once] ->
                                                    $j_s9BiU dt4_s9Bjp dt5_s9Bjq;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9Bjr [Occ=Once]
                                                                         dt5_s9Bjs [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9BiU dt4_s9Bjr dt5_s9Bjs;
                                          Data.Typeable.Internal.TrApp dt4_s9Bjw [Occ=Once]
                                                                       dt5_s9Bjx [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9BiU dt4_s9Bjw dt5_s9Bjx;
                                        };
                                  Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               ds7_s9BjF [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9BjG [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9Big
                                                      x_s9Bio
                                                      wild4_s9Biq
                                                      ds7_s9BjF] \r [dt4_s9BjH dt5_s9BjI]
                                                case ds7_s9BjF of {
                                                  Data.Typeable.Internal.TrType ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9BjL [Occ=Once]
                                                                                         dt7_s9BjM [Occ=Once] ->
                                                            case eqWord# [dt4_s9BjH dt6_s9BjL] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9BjI dt7_s9BjM]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9BjP [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9Big
                                                                               x_s9Bio] \u []
                                                                                  f_s9Big
                                                                                      x_s9Bio; } in
                                                                        let {
                                                                          sat_s9BjQ [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                          sat_s9BjP];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9BjQ];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9BjR [Occ=Once]
                                                                                 dt7_s9BjS [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BjH dt6_s9BjR] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BjI dt7_s9BjS] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9BjY [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9BjZ [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9BjY];
                                                                  } in  GHC.Base.Just [sat_s9BjZ];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp dt6_s9Bk0 [Occ=Once]
                                                                               dt7_s9Bk1 [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9BjH dt6_s9Bk0] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9BjI dt7_s9Bk1] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Bk7 [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9Big x_s9Bio] \u []
                                                                            f_s9Big x_s9Bio; } in
                                                                  let {
                                                                    sat_s9Bk8 [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                                                    sat_s9Bk7];
                                                                  } in  GHC.Base.Just [sat_s9Bk8];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9Bkb [Occ=Once]
                                                                                 dt5_s9Bkc [Occ=Once] ->
                                                    $j_s9BjG dt4_s9Bkb dt5_s9Bkc;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9Bkd [Occ=Once]
                                                                         dt5_s9Bke [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9BjG dt4_s9Bkd dt5_s9Bke;
                                          Data.Typeable.Internal.TrApp dt4_s9Bki [Occ=Once]
                                                                       dt5_s9Bkj [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9BjG dt4_s9Bki dt5_s9Bkj;
                                        };
                                  Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              lvl_r9Bhp Data.Typeable.Internal.$mApp1
                                      of
                                      { GHC.Types.False -> GHC.Base.Nothing [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s9Bks [Occ=Once]
                                                :: (b_i9B0x |> Sym (TYPE
                                                                      (Sym (Nth:0
                                                                                (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                        r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                              [LclId] =
                                                  [f_s9Big x_s9Bio] \u [] f_s9Big x_s9Bio; } in
                                            let {
                                              sat_s9Bkt [Occ=Once] :: Data.Dynamic.Dynamic
                                              [LclId] =
                                                  CCCS Data.Dynamic.Dynamic! [wild4_s9Biq
                                                                              sat_s9Bks];
                                            } in  GHC.Base.Just [sat_s9Bkt];
                                      };
                                };
                          };
                    };
              };
        };

Data.Dynamic.dynTypeRep
  :: Data.Dynamic.Dynamic -> Data.Typeable.Internal.SomeTypeRep
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Bku]
        case ds_s9Bku of {
          Data.Dynamic.Dynamic tr_s9Bkw [Occ=Once] _ [Occ=Dead] ->
              Data.Typeable.Internal.$WSomeTypeRep tr_s9Bkw;
        };

Data.Dynamic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Dynamic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule4];

Data.Dynamic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Dynamic"#;

Data.Dynamic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule2];

Data.Dynamic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Dynamic.$trModule3
                                     Data.Dynamic.$trModule1];

$krep_r9Bhq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r9Bhr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9Bhq GHC.Types.[]];

$krep2_r9Bhs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep1_r9Bhr];

$krep3_r9Bht :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeRep
                                              $krep2_r9Bhs];

Data.Dynamic.$fExceptionDynamic7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Dynamic"#;

Data.Dynamic.$fExceptionDynamic6 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$fExceptionDynamic7];

Data.Dynamic.$tcDynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12333845116585145369##
                                    13454739855111402131##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$fExceptionDynamic6
                                    0#
                                    GHC.Types.krep$*];

$krep4_r9Bhu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Dynamic.$tcDynamic
                                              GHC.Types.[]];

$krep5_r9Bhv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r9Bhq $krep4_r9Bhu];

Data.Dynamic.$tc'Dynamic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r9Bht $krep5_r9Bhv];

Data.Dynamic.$tc'Dynamic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Dynamic"#;

Data.Dynamic.$tc'Dynamic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$tc'Dynamic3];

Data.Dynamic.$tc'Dynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11394777848779697579##
                                    644307381671950132##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$tc'Dynamic2
                                    1#
                                    Data.Dynamic.$tc'Dynamic1];

Data.Dynamic.$fExceptionDynamic5
  :: Data.Typeable.Internal.TypeRep Data.Dynamic.Dynamic
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                12333845116585145369##
                13454739855111402131##
                Data.Dynamic.$trModule
                Data.Dynamic.$fExceptionDynamic6
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9Bkz [Occ=Once]
                   ww9_s9BkA [Occ=Once]
                   ww10_s9BkB [Occ=Once]
                   ww11_s9BkC [Occ=Once]
                   ww12_s9BkD [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9Bkz
                                              ww9_s9BkA
                                              ww10_s9BkB
                                              ww11_s9BkC
                                              ww12_s9BkD];
        };

Data.Dynamic.$fExceptionDynamic1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Data.Dynamic.$fExceptionDynamic2;

Data.Dynamic.$fExceptionDynamic_$cshow
  :: Data.Dynamic.Dynamic -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9BkE]
        case x_s9BkE of {
          Data.Dynamic.Dynamic t_s9BkG [Occ=Once] _ [Occ=Dead] ->
              let {
                sat_s9BkI [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [t_s9BkG] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3
                            t_s9BkG
                            Data.Dynamic.$fExceptionDynamic1;
              } in 
                GHC.CString.unpackAppendCString#
                    Data.Dynamic.$fExceptionDynamic4 sat_s9BkI;
        };

Data.Dynamic.$fShowDynamic1
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9BkJ]
        case ds_s9BkJ of {
          Data.Dynamic.Dynamic t_s9BkL [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9BkN [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9BkL] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9BkL; } in
              let {
                sat_s9BkR [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9BkN] \r [x_s9BkO]
                        let {
                          sat_s9BkQ [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9BkN x_s9BkO] \u []
                                  let {
                                    sat_s9BkP [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9BkO] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9BkO;
                                  } in  f_s9BkN sat_s9BkP;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9BkQ;
              } in  sat_s9BkR;
        };

Data.Dynamic.$fShowDynamic_$cshowList
  :: [Data.Dynamic.Dynamic] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9BkS s_s9BkT]
        GHC.Show.showList__ Data.Dynamic.$fShowDynamic1 ls_s9BkS s_s9BkT;

Data.Dynamic.$fShowDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Dynamic.$fShowDynamic_$cshowsPrec
                                    Data.Dynamic.$fExceptionDynamic_$cshow
                                    Data.Dynamic.$fShowDynamic_$cshowList];

Data.Dynamic.$fExceptionDynamic_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9BkU]
        case ds_s9BkU of {
          GHC.Exception.SomeException $dException1_s9BkW [Occ=Once]
                                      e2_s9BkX [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_s9BkW of sat_s9BkY {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_s9BkY Data.Dynamic.$fExceptionDynamic5
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_s9BkX];
                    };
              };
        };

Data.Dynamic.$fExceptionDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [Data.Dynamic.$fExceptionDynamic5
                                              Data.Dynamic.$fShowDynamic
                                              Data.Dynamic.$fExceptionDynamic_$ctoException
                                              Data.Dynamic.$fExceptionDynamic_$cfromException
                                              Data.Dynamic.$fExceptionDynamic_$cshow];
Data.Dynamic.$fExceptionDynamic_$ctoException [Occ=LoopBreaker]
  :: Data.Dynamic.Dynamic -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [Data.Dynamic.$fExceptionDynamic
                                     eta_B1];

lvl1_r9Bhw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Type error in dynamic application.\n"#;

lvl2_r9Bhx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Can't apply function "#;

lvl3_r9Bhy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " to argument "#;

Data.Dynamic.dynApp1
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<B,1*U><B,1*U>x, Unf=OtherCon []] =
    [] \r [x_s9Bl0 f_s9Bl1]
        let {
          sat_s9Ble [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9Bl0 f_s9Bl1] \u []
                  let {
                    sat_s9Bld [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9Bl0 f_s9Bl1] \u []
                            case f_s9Bl1 of {
                              Data.Dynamic.Dynamic t_s9Bl3 [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    sat_s9Blc [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [x_s9Bl0 t_s9Bl3] \u []
                                            let {
                                              sat_s9Blb [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [x_s9Bl0] \s []
                                                      let {
                                                        sat_s9Bla [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [x_s9Bl0] \u []
                                                                case x_s9Bl0 of {
                                                                  Data.Dynamic.Dynamic t1_s9Bl7 [Occ=Once]
                                                                                       _ [Occ=Dead] ->
                                                                      let {
                                                                        sat_s9Bl9 [Occ=Once]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [t1_s9Bl7] \u []
                                                                                Data.Typeable.Internal.showTypeable
                                                                                    Data.Dynamic.$fExceptionDynamic3
                                                                                    t1_s9Bl7
                                                                                    Data.Dynamic.$fExceptionDynamic1;
                                                                      } in 
                                                                        GHC.CString.unpackAppendCString#
                                                                            Data.Dynamic.$fExceptionDynamic4
                                                                            sat_s9Bl9;
                                                                };
                                                      } in 
                                                        GHC.CString.unpackAppendCString#
                                                            lvl3_r9Bhy sat_s9Bla;
                                            } in 
                                              case
                                                  Data.Typeable.Internal.showTypeable
                                                      Data.Dynamic.$fExceptionDynamic3
                                                      t_s9Bl3
                                                      Data.Dynamic.$fExceptionDynamic1
                                              of
                                              sat_s9Bl5
                                              { __DEFAULT -> GHC.Base.++ sat_s9Bl5 sat_s9Blb;
                                              };
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        Data.Dynamic.$fExceptionDynamic4 sat_s9Blc;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_r9Bhx sat_s9Bld;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl1_r9Bhw sat_s9Ble
          of
          sat_s9Blf
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9Blf;
          };

Data.Dynamic.dynApp
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [f_s9Blg x_s9Blh]
        case Data.Dynamic.dynApply f_s9Blg x_s9Blh of {
          GHC.Base.Nothing -> Data.Dynamic.dynApp1 x_s9Blh f_s9Blg;
          GHC.Base.Just r_s9Blj [Occ=Once] -> r_s9Blj;
        };

Data.Dynamic.Dynamic
  :: forall a.
     Data.Typeable.Internal.TypeRep a -> a -> Data.Dynamic.Dynamic
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:04:44.103408603 UTC

Data.Dynamic.$fExceptionDynamic3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Dynamic.$fExceptionDynamic4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<<"#;

Data.Dynamic.$fExceptionDynamic2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">>"#;

Data.Dynamic.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9C7T]
        case w_s9C7T of {
          Data.Dynamic.Dynamic t_s9C7V [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9C7X [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9C7V] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9C7V; } in
              let {
                sat_s9C81 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9C7X] \r [x_s9C7Y]
                        let {
                          sat_s9C80 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9C7X x_s9C7Y] \u []
                                  let {
                                    sat_s9C7Z [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9C7Y] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9C7Y;
                                  } in  f_s9C7X sat_s9C7Z;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9C80;
              } in  sat_s9C81;
        };

Data.Dynamic.$fShowDynamic_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9C82 w1_s9C83] Data.Dynamic.$w$cshowsPrec w1_s9C83;

Data.Dynamic.toDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Dynamic.Dynamic
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];

Data.Dynamic.fromDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> a -> a
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9C84 ds_s9C85 def_s9C86]
        case ds_s9C85 of {
          Data.Dynamic.Dynamic t_s9C88 [Occ=Once] v_s9C89 [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9C88 $dTypeable_s9C84
              of
              { GHC.Types.False -> def_s9C86;
                GHC.Types.True -> v_s9C89;
              };
        };

Data.Dynamic.fromDynamic
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> GHC.Base.Maybe a
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9C8b ds_s9C8c]
        case ds_s9C8c of {
          Data.Dynamic.Dynamic t_s9C8e [Occ=Once] v_s9C8f [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9C8e $dTypeable_s9C8b
              of
              { GHC.Types.False -> GHC.Base.Nothing [];
                GHC.Types.True -> GHC.Base.Just [v_s9C8f];
              };
        };

lvl_r9Bhp :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9C8i [Occ=Once]
                   ww9_s9C8j [Occ=Once]
                   ww10_s9C8k [Occ=Once]
                   ww11_s9C8l [Occ=Once]
                   ww12_s9C8m [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s9C8o [Occ=Once]
                         ww3_s9C8p [Occ=Once]
                         ww4_s9C8q [Occ=Once]
                         ww5_s9C8r [Occ=Once]
                         ww6_s9C8s [Occ=Once] ->
                    let {
                      sat_s9C8u [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s9C8o
                                                                ww3_s9C8p
                                                                ww4_s9C8q
                                                                ww5_s9C8r
                                                                ww6_s9C8s]; } in
                    let {
                      sat_s9C8t [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s9C8i
                                                                ww9_s9C8j
                                                                ww10_s9C8k
                                                                ww11_s9C8l
                                                                ww12_s9C8m];
                    } in  Data.Typeable.Internal.mkTrApp sat_s9C8t sat_s9C8u;
              };
        };

Data.Dynamic.dynApply
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9C8v ds1_s9C8w]
        case ds_s9C8v of {
          Data.Dynamic.Dynamic ds2_s9C8y [Occ=Once!] f_s9C8z [Occ=Once*] ->
              case ds2_s9C8y of {
                __DEFAULT -> GHC.Base.Nothing [];
                Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                             co1_i9B0z
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds3_s9C8D [Occ=Once]
                                             ds4_s9C8E [Occ=Once!] ->
                    case ds1_s9C8w of {
                      Data.Dynamic.Dynamic ta'_s9C8G [Occ=Once] x_s9C8H [Occ=Once*] ->
                          case Data.Typeable.Internal.sameTypeRep ds3_s9C8D ta'_s9C8G of {
                            GHC.Types.False -> GHC.Base.Nothing [];
                            GHC.Types.True ->
                                case ds4_s9C8E of wild4_s9C8J {
                                  Data.Typeable.Internal.TrType _ [Occ=Dead] _ [Occ=Dead] ->
                                      let-no-escape {
                                        $j_s9C8K [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9C8z x_s9C8H wild4_s9C8J] \r [dt2_s9C8L
                                                                                       dt3_s9C8M]
                                                case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                  GHC.Fingerprint.Type.Fingerprint dt4_s9C8O [Occ=Once]
                                                                                   dt5_s9C8P [Occ=Once] ->
                                                      case eqWord# [dt2_s9C8L dt4_s9C8O] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt3_s9C8M dt5_s9C8P] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9C8S [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9C8T [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9C8S];
                                                                  } in  GHC.Base.Just [sat_s9C8T];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                        _ [Occ=Dead, Dmd=<L,A>] ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt2_s9C8W [Occ=Once]
                                                                                 dt3_s9C8X [Occ=Once] ->
                                                    $j_s9C8K dt2_s9C8W dt3_s9C8X;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt2_s9C8Y [Occ=Once]
                                                                         dt3_s9C8Z [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9C8K dt2_s9C8Y dt3_s9C8Z;
                                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                       dt2_s9C93 [Occ=Once]
                                                                       dt3_s9C94 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9C8K dt2_s9C93 dt3_s9C94;
                                        };
                                  Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds7_s9C9c [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9C9d [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9C8z
                                                      x_s9C8H
                                                      wild4_s9C8J
                                                      ds7_s9C9c] \r [dt4_s9C9e dt5_s9C9f]
                                                case ds7_s9C9c of {
                                                  Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                   Dmd=<L,A>]
                                                                                _ [Occ=Dead,
                                                                                   Dmd=<L,A>] ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9C9i [Occ=Once]
                                                                                         dt7_s9C9j [Occ=Once] ->
                                                            case eqWord# [dt4_s9C9e dt6_s9C9i] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9C9f dt7_s9C9j]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9C9m [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9C8z
                                                                               x_s9C8H] \u []
                                                                                  f_s9C8z
                                                                                      x_s9C8H; } in
                                                                        let {
                                                                          sat_s9C9n [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                          sat_s9C9m];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9C9n];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9C9o [Occ=Once]
                                                                                 dt7_s9C9p [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9C9e dt6_s9C9o] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9C9f dt7_s9C9p] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9C9v [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9C9w [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9C9v];
                                                                  } in  GHC.Base.Just [sat_s9C9w];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                  Dmd=<L,A>]
                                                                               dt6_s9C9x [Occ=Once]
                                                                               dt7_s9C9y [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9C9e dt6_s9C9x] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9C9f dt7_s9C9y] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9C9E [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9C9F [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9C9E];
                                                                  } in  GHC.Base.Just [sat_s9C9F];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                        _ [Occ=Dead, Dmd=<L,A>] ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9C9I [Occ=Once]
                                                                                 dt5_s9C9J [Occ=Once] ->
                                                    $j_s9C9d dt4_s9C9I dt5_s9C9J;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9C9K [Occ=Once]
                                                                         dt5_s9C9L [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9C9d dt4_s9C9K dt5_s9C9L;
                                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                       dt4_s9C9P [Occ=Once]
                                                                       dt5_s9C9Q [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9C9d dt4_s9C9P dt5_s9C9Q;
                                        };
                                  Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               ds7_s9C9Y [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9C9Z [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9C8z
                                                      x_s9C8H
                                                      wild4_s9C8J
                                                      ds7_s9C9Y] \r [dt4_s9Ca0 dt5_s9Ca1]
                                                case ds7_s9C9Y of {
                                                  Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                   Dmd=<L,A>]
                                                                                _ [Occ=Dead,
                                                                                   Dmd=<L,A>] ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9Ca4 [Occ=Once]
                                                                                         dt7_s9Ca5 [Occ=Once] ->
                                                            case eqWord# [dt4_s9Ca0 dt6_s9Ca4] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9Ca1 dt7_s9Ca5]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9Ca8 [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9C8z
                                                                               x_s9C8H] \u []
                                                                                  f_s9C8z
                                                                                      x_s9C8H; } in
                                                                        let {
                                                                          sat_s9Ca9 [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                          sat_s9Ca8];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9Ca9];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9Caa [Occ=Once]
                                                                                 dt7_s9Cab [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9Ca0 dt6_s9Caa] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9Ca1 dt7_s9Cab] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Cah [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9Cai [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9Cah];
                                                                  } in  GHC.Base.Just [sat_s9Cai];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                  Dmd=<L,A>]
                                                                               dt6_s9Caj [Occ=Once]
                                                                               dt7_s9Cak [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9Ca0 dt6_s9Caj] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9Ca1 dt7_s9Cak] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Caq [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9Car [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9Caq];
                                                                  } in  GHC.Base.Just [sat_s9Car];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                        _ [Occ=Dead, Dmd=<L,A>] ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9Cau [Occ=Once]
                                                                                 dt5_s9Cav [Occ=Once] ->
                                                    $j_s9C9Z dt4_s9Cau dt5_s9Cav;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9Caw [Occ=Once]
                                                                         dt5_s9Cax [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9C9Z dt4_s9Caw dt5_s9Cax;
                                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                       dt4_s9CaB [Occ=Once]
                                                                       dt5_s9CaC [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9C9Z dt4_s9CaB dt5_s9CaC;
                                        };
                                  Data.Typeable.Internal.TrFun co2_i9AX1
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              lvl_r9Bhp Data.Typeable.Internal.$mApp1
                                      of
                                      { GHC.Types.False -> GHC.Base.Nothing [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s9CaL [Occ=Once]
                                                :: (b_i9B0x |> Sym (TYPE
                                                                      (Sym (Nth:0
                                                                                (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                        r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                              [LclId] =
                                                  [f_s9C8z x_s9C8H] \u [] f_s9C8z x_s9C8H; } in
                                            let {
                                              sat_s9CaM [Occ=Once] :: Data.Dynamic.Dynamic
                                              [LclId] =
                                                  CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                              sat_s9CaL];
                                            } in  GHC.Base.Just [sat_s9CaM];
                                      };
                                };
                          };
                    };
              };
        };

Data.Dynamic.dynTypeRep
  :: Data.Dynamic.Dynamic -> Data.Typeable.Internal.SomeTypeRep
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9CaN]
        case ds_s9CaN of {
          Data.Dynamic.Dynamic tr_s9CaP [Occ=Once] _ [Occ=Dead] ->
              Data.Typeable.Internal.$WSomeTypeRep tr_s9CaP;
        };

Data.Dynamic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Dynamic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule4];

Data.Dynamic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Dynamic"#;

Data.Dynamic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule2];

Data.Dynamic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Dynamic.$trModule3
                                     Data.Dynamic.$trModule1];

$krep_r9Bhq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r9Bhr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9Bhq GHC.Types.[]];

$krep2_r9Bhs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep1_r9Bhr];

$krep3_r9Bht :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeRep
                                              $krep2_r9Bhs];

Data.Dynamic.$fExceptionDynamic7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Dynamic"#;

Data.Dynamic.$fExceptionDynamic6 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$fExceptionDynamic7];

Data.Dynamic.$tcDynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12333845116585145369##
                                    13454739855111402131##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$fExceptionDynamic6
                                    0#
                                    GHC.Types.krep$*];

$krep4_r9Bhu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Dynamic.$tcDynamic
                                              GHC.Types.[]];

$krep5_r9Bhv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r9Bhq $krep4_r9Bhu];

Data.Dynamic.$tc'Dynamic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r9Bht $krep5_r9Bhv];

Data.Dynamic.$tc'Dynamic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Dynamic"#;

Data.Dynamic.$tc'Dynamic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$tc'Dynamic3];

Data.Dynamic.$tc'Dynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11394777848779697579##
                                    644307381671950132##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$tc'Dynamic2
                                    1#
                                    Data.Dynamic.$tc'Dynamic1];

Data.Dynamic.$fExceptionDynamic5
  :: Data.Typeable.Internal.TypeRep Data.Dynamic.Dynamic
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                12333845116585145369##
                13454739855111402131##
                Data.Dynamic.$trModule
                Data.Dynamic.$fExceptionDynamic6
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9CaS [Occ=Once]
                   ww9_s9CaT [Occ=Once]
                   ww10_s9CaU [Occ=Once]
                   ww11_s9CaV [Occ=Once]
                   ww12_s9CaW [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9CaS
                                              ww9_s9CaT
                                              ww10_s9CaU
                                              ww11_s9CaV
                                              ww12_s9CaW];
        };

Data.Dynamic.$fExceptionDynamic1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Data.Dynamic.$fExceptionDynamic2;

Data.Dynamic.$fExceptionDynamic_$cshow
  :: Data.Dynamic.Dynamic -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9CaX]
        case x_s9CaX of {
          Data.Dynamic.Dynamic t_s9CaZ [Occ=Once] _ [Occ=Dead] ->
              let {
                sat_s9Cb1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [t_s9CaZ] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3
                            t_s9CaZ
                            Data.Dynamic.$fExceptionDynamic1;
              } in 
                GHC.CString.unpackAppendCString#
                    Data.Dynamic.$fExceptionDynamic4 sat_s9Cb1;
        };

Data.Dynamic.$fShowDynamic1
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Cb2]
        case ds_s9Cb2 of {
          Data.Dynamic.Dynamic t_s9Cb4 [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9Cb6 [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9Cb4] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9Cb4; } in
              let {
                sat_s9Cba [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9Cb6] \r [x_s9Cb7]
                        let {
                          sat_s9Cb9 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9Cb6 x_s9Cb7] \u []
                                  let {
                                    sat_s9Cb8 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9Cb7] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9Cb7;
                                  } in  f_s9Cb6 sat_s9Cb8;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9Cb9;
              } in  sat_s9Cba;
        };

Data.Dynamic.$fShowDynamic_$cshowList
  :: [Data.Dynamic.Dynamic] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9Cbb s_s9Cbc]
        GHC.Show.showList__ Data.Dynamic.$fShowDynamic1 ls_s9Cbb s_s9Cbc;

Data.Dynamic.$fShowDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Dynamic.$fShowDynamic_$cshowsPrec
                                    Data.Dynamic.$fExceptionDynamic_$cshow
                                    Data.Dynamic.$fShowDynamic_$cshowList];

Data.Dynamic.$fExceptionDynamic_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Cbd]
        case ds_s9Cbd of {
          GHC.Exception.SomeException $dException1_s9Cbf [Occ=Once]
                                      e2_s9Cbg [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_s9Cbf of sat_s9Cbh {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_s9Cbh Data.Dynamic.$fExceptionDynamic5
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_s9Cbg];
                    };
              };
        };

Data.Dynamic.$fExceptionDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [Data.Dynamic.$fExceptionDynamic5
                                              Data.Dynamic.$fShowDynamic
                                              Data.Dynamic.$fExceptionDynamic_$ctoException
                                              Data.Dynamic.$fExceptionDynamic_$cfromException
                                              Data.Dynamic.$fExceptionDynamic_$cshow];
Data.Dynamic.$fExceptionDynamic_$ctoException [Occ=LoopBreaker]
  :: Data.Dynamic.Dynamic -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [Data.Dynamic.$fExceptionDynamic
                                     eta_B1];

lvl1_r9Bhw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Type error in dynamic application.\n"#;

lvl2_r9Bhx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Can't apply function "#;

lvl3_r9Bhy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " to argument "#;

Data.Dynamic.dynApp1
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<B,1*U><B,1*U>x, Unf=OtherCon []] =
    [] \r [x_s9Cbj f_s9Cbk]
        let {
          sat_s9Cbx [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9Cbj f_s9Cbk] \u []
                  let {
                    sat_s9Cbw [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9Cbj f_s9Cbk] \u []
                            case f_s9Cbk of {
                              Data.Dynamic.Dynamic t_s9Cbm [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    sat_s9Cbv [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [x_s9Cbj t_s9Cbm] \u []
                                            let {
                                              sat_s9Cbu [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [x_s9Cbj] \s []
                                                      let {
                                                        sat_s9Cbt [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [x_s9Cbj] \u []
                                                                case x_s9Cbj of {
                                                                  Data.Dynamic.Dynamic t1_s9Cbq [Occ=Once]
                                                                                       _ [Occ=Dead] ->
                                                                      let {
                                                                        sat_s9Cbs [Occ=Once]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [t1_s9Cbq] \u []
                                                                                Data.Typeable.Internal.showTypeable
                                                                                    Data.Dynamic.$fExceptionDynamic3
                                                                                    t1_s9Cbq
                                                                                    Data.Dynamic.$fExceptionDynamic1;
                                                                      } in 
                                                                        GHC.CString.unpackAppendCString#
                                                                            Data.Dynamic.$fExceptionDynamic4
                                                                            sat_s9Cbs;
                                                                };
                                                      } in 
                                                        GHC.CString.unpackAppendCString#
                                                            lvl3_r9Bhy sat_s9Cbt;
                                            } in 
                                              case
                                                  Data.Typeable.Internal.showTypeable
                                                      Data.Dynamic.$fExceptionDynamic3
                                                      t_s9Cbm
                                                      Data.Dynamic.$fExceptionDynamic1
                                              of
                                              sat_s9Cbo
                                              { __DEFAULT -> GHC.Base.++ sat_s9Cbo sat_s9Cbu;
                                              };
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        Data.Dynamic.$fExceptionDynamic4 sat_s9Cbv;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_r9Bhx sat_s9Cbw;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl1_r9Bhw sat_s9Cbx
          of
          sat_s9Cby
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9Cby;
          };

Data.Dynamic.dynApp
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [f_s9Cbz x_s9CbA]
        case Data.Dynamic.dynApply f_s9Cbz x_s9CbA of {
          GHC.Base.Nothing -> Data.Dynamic.dynApp1 x_s9CbA f_s9Cbz;
          GHC.Base.Just r_s9CbC [Occ=Once] -> r_s9CbC;
        };

Data.Dynamic.Dynamic
  :: forall a.
     Data.Typeable.Internal.TypeRep a -> a -> Data.Dynamic.Dynamic
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:04:44.118903494 UTC

Data.Dynamic.$fExceptionDynamic3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Dynamic.$fExceptionDynamic4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<<"#;

Data.Dynamic.$fExceptionDynamic2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">>"#;

Data.Dynamic.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9C7T]
        case w_s9C7T of {
          Data.Dynamic.Dynamic t_s9C7V [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9C7X [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9C7V] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9C7V; } in
              let {
                sat_s9C81 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9C7X] \r [x_s9C7Y]
                        let {
                          sat_s9C80 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9C7X x_s9C7Y] \u []
                                  let {
                                    sat_s9C7Z [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9C7Y] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9C7Y;
                                  } in  f_s9C7X sat_s9C7Z;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9C80;
              } in  sat_s9C81;
        };

Data.Dynamic.$fShowDynamic_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><S,1*U>, Unf=OtherCon []] =
    [] \r [w_s9C82 w1_s9C83] Data.Dynamic.$w$cshowsPrec w1_s9C83;

Data.Dynamic.toDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Dynamic.Dynamic
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];

Data.Dynamic.fromDyn
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> a -> a
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9C84 ds_s9C85 def_s9C86]
        case ds_s9C85 of {
          Data.Dynamic.Dynamic t_s9C88 [Occ=Once] v_s9C89 [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9C88 $dTypeable_s9C84
              of
              { GHC.Types.False -> def_s9C86;
                GHC.Types.True -> v_s9C89;
              };
        };

Data.Dynamic.fromDynamic
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     Data.Dynamic.Dynamic -> GHC.Base.Maybe a
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s9C8b ds_s9C8c]
        case ds_s9C8c of {
          Data.Dynamic.Dynamic t_s9C8e [Occ=Once] v_s9C8f [Occ=Once] ->
              case
                  Data.Typeable.Internal.sameTypeRep t_s9C8e $dTypeable_s9C8b
              of
              { GHC.Types.False -> GHC.Base.Nothing [];
                GHC.Types.True -> GHC.Base.Just [v_s9C8f];
              };
        };

lvl_r9Bhp :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9C8i [Occ=Once]
                   ww9_s9C8j [Occ=Once]
                   ww10_s9C8k [Occ=Once]
                   ww11_s9C8l [Occ=Once]
                   ww12_s9C8m [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s9C8o [Occ=Once]
                         ww3_s9C8p [Occ=Once]
                         ww4_s9C8q [Occ=Once]
                         ww5_s9C8r [Occ=Once]
                         ww6_s9C8s [Occ=Once] ->
                    let {
                      sat_s9C8u [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s9C8o
                                                                ww3_s9C8p
                                                                ww4_s9C8q
                                                                ww5_s9C8r
                                                                ww6_s9C8s]; } in
                    let {
                      sat_s9C8t [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s9C8i
                                                                ww9_s9C8j
                                                                ww10_s9C8k
                                                                ww11_s9C8l
                                                                ww12_s9C8m];
                    } in  Data.Typeable.Internal.mkTrApp sat_s9C8t sat_s9C8u;
              };
        };

Data.Dynamic.dynApply
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9C8v ds1_s9C8w]
        case ds_s9C8v of {
          Data.Dynamic.Dynamic ds2_s9C8y [Occ=Once!] f_s9C8z [Occ=Once*] ->
              case ds2_s9C8y of {
                __DEFAULT -> GHC.Base.Nothing [];
                Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds3_s9C8D [Occ=Once]
                                             ds4_s9C8E [Occ=Once!] ->
                    case ds1_s9C8w of {
                      Data.Dynamic.Dynamic ta'_s9C8G [Occ=Once] x_s9C8H [Occ=Once*] ->
                          case Data.Typeable.Internal.sameTypeRep ds3_s9C8D ta'_s9C8G of {
                            GHC.Types.False -> GHC.Base.Nothing [];
                            GHC.Types.True ->
                                case ds4_s9C8E of wild4_s9C8J {
                                  Data.Typeable.Internal.TrType ->
                                      let-no-escape {
                                        $j_s9C8K [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9C8z x_s9C8H wild4_s9C8J] \r [dt2_s9C8L
                                                                                       dt3_s9C8M]
                                                case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                  GHC.Fingerprint.Type.Fingerprint dt4_s9C8O [Occ=Once]
                                                                                   dt5_s9C8P [Occ=Once] ->
                                                      case eqWord# [dt2_s9C8L dt4_s9C8O] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt3_s9C8M dt5_s9C8P] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9C8S [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9C8T [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9C8S];
                                                                  } in  GHC.Base.Just [sat_s9C8T];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt2_s9C8W [Occ=Once]
                                                                                 dt3_s9C8X [Occ=Once] ->
                                                    $j_s9C8K dt2_s9C8W dt3_s9C8X;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt2_s9C8Y [Occ=Once]
                                                                         dt3_s9C8Z [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9C8K dt2_s9C8Y dt3_s9C8Z;
                                          Data.Typeable.Internal.TrApp dt2_s9C93 [Occ=Once]
                                                                       dt3_s9C94 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9C8K dt2_s9C93 dt3_s9C94;
                                        };
                                  Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds7_s9C9c [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9C9d [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9C8z
                                                      x_s9C8H
                                                      wild4_s9C8J
                                                      ds7_s9C9c] \r [dt4_s9C9e dt5_s9C9f]
                                                case ds7_s9C9c of {
                                                  Data.Typeable.Internal.TrType ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9C9i [Occ=Once]
                                                                                         dt7_s9C9j [Occ=Once] ->
                                                            case eqWord# [dt4_s9C9e dt6_s9C9i] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9C9f dt7_s9C9j]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9C9m [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9C8z
                                                                               x_s9C8H] \u []
                                                                                  f_s9C8z
                                                                                      x_s9C8H; } in
                                                                        let {
                                                                          sat_s9C9n [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                          sat_s9C9m];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9C9n];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9C9o [Occ=Once]
                                                                                 dt7_s9C9p [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9C9e dt6_s9C9o] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9C9f dt7_s9C9p] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9C9v [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9C9w [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9C9v];
                                                                  } in  GHC.Base.Just [sat_s9C9w];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp dt6_s9C9x [Occ=Once]
                                                                               dt7_s9C9y [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9C9e dt6_s9C9x] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9C9f dt7_s9C9y] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9C9E [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9C9F [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9C9E];
                                                                  } in  GHC.Base.Just [sat_s9C9F];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9C9I [Occ=Once]
                                                                                 dt5_s9C9J [Occ=Once] ->
                                                    $j_s9C9d dt4_s9C9I dt5_s9C9J;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9C9K [Occ=Once]
                                                                         dt5_s9C9L [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9C9d dt4_s9C9K dt5_s9C9L;
                                          Data.Typeable.Internal.TrApp dt4_s9C9P [Occ=Once]
                                                                       dt5_s9C9Q [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9C9d dt4_s9C9P dt5_s9C9Q;
                                        };
                                  Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               ds7_s9C9Y [Occ=Once!] ->
                                      let-no-escape {
                                        $j_s9C9Z [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                          :: GHC.Prim.Word#
                                             -> GHC.Prim.Word#
                                             -> GHC.Base.Maybe Data.Dynamic.Dynamic
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<S,U><L,U>,
                                         Unf=OtherCon []] =
                                            sat-only [f_s9C8z
                                                      x_s9C8H
                                                      wild4_s9C8J
                                                      ds7_s9C9Y] \r [dt4_s9Ca0 dt5_s9Ca1]
                                                case ds7_s9C9Y of {
                                                  Data.Typeable.Internal.TrType ->
                                                      case
                                                          Data.Typeable.Internal.fpTYPELiftedRep
                                                      of
                                                      { GHC.Fingerprint.Type.Fingerprint dt6_s9Ca4 [Occ=Once]
                                                                                         dt7_s9Ca5 [Occ=Once] ->
                                                            case eqWord# [dt4_s9Ca0 dt6_s9Ca4] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  case
                                                                      eqWord# [dt5_s9Ca1 dt7_s9Ca5]
                                                                  of
                                                                  { __DEFAULT ->
                                                                        GHC.Base.Nothing [];
                                                                    1# ->
                                                                        let {
                                                                          sat_s9Ca8 [Occ=Once]
                                                                            :: (b_i9B0x |> Sym (TYPE
                                                                                                  (Sym (Nth:0
                                                                                                            (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                                    r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                          [LclId] =
                                                                              [f_s9C8z
                                                                               x_s9C8H] \u []
                                                                                  f_s9C8z
                                                                                      x_s9C8H; } in
                                                                        let {
                                                                          sat_s9Ca9 [Occ=Once]
                                                                            :: Data.Dynamic.Dynamic
                                                                          [LclId] =
                                                                              CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                          sat_s9Ca8];
                                                                        } in 
                                                                          GHC.Base.Just [sat_s9Ca9];
                                                                  };
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrTyCon dt6_s9Caa [Occ=Once]
                                                                                 dt7_s9Cab [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9Ca0 dt6_s9Caa] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9Ca1 dt7_s9Cab] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Cah [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9Cai [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9Cah];
                                                                  } in  GHC.Base.Just [sat_s9Cai];
                                                            };
                                                      };
                                                  Data.Typeable.Internal.TrApp dt6_s9Caj [Occ=Once]
                                                                               dt7_s9Cak [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                      case eqWord# [dt4_s9Ca0 dt6_s9Caj] of {
                                                        __DEFAULT -> GHC.Base.Nothing [];
                                                        1# ->
                                                            case eqWord# [dt5_s9Ca1 dt7_s9Cak] of {
                                                              __DEFAULT -> GHC.Base.Nothing [];
                                                              1# ->
                                                                  let {
                                                                    sat_s9Caq [Occ=Once]
                                                                      :: (b_i9B0x |> Sym (TYPE
                                                                                            (Sym (Nth:0
                                                                                                      (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                                              r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                                                    [LclId] =
                                                                        [f_s9C8z x_s9C8H] \u []
                                                                            f_s9C8z x_s9C8H; } in
                                                                  let {
                                                                    sat_s9Car [Occ=Once]
                                                                      :: Data.Dynamic.Dynamic
                                                                    [LclId] =
                                                                        CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                                                    sat_s9Caq];
                                                                  } in  GHC.Base.Just [sat_s9Car];
                                                            };
                                                      };
                                                };
                                      } in 
                                        case lvl_r9Bhp of {
                                          Data.Typeable.Internal.TrType ->
                                              case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                GHC.Fingerprint.Type.Fingerprint dt4_s9Cau [Occ=Once]
                                                                                 dt5_s9Cav [Occ=Once] ->
                                                    $j_s9C9Z dt4_s9Cau dt5_s9Cav;
                                              };
                                          Data.Typeable.Internal.TrTyCon dt4_s9Caw [Occ=Once]
                                                                         dt5_s9Cax [Occ=Once]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                              $j_s9C9Z dt4_s9Caw dt5_s9Cax;
                                          Data.Typeable.Internal.TrApp dt4_s9CaB [Occ=Once]
                                                                       dt5_s9CaC [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              $j_s9C9Z dt4_s9CaB dt5_s9CaC;
                                        };
                                  Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              lvl_r9Bhp Data.Typeable.Internal.$mApp1
                                      of
                                      { GHC.Types.False -> GHC.Base.Nothing [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s9CaL [Occ=Once]
                                                :: (b_i9B0x |> Sym (TYPE
                                                                      (Sym (Nth:0
                                                                                (Sym (UnsafeCo nominal GHC.Types.Any (TYPE
                                                                                                                        r2_i9B0v)) ; UnsafeCo nominal GHC.Types.Any *))))_N)
                                              [LclId] =
                                                  [f_s9C8z x_s9C8H] \u [] f_s9C8z x_s9C8H; } in
                                            let {
                                              sat_s9CaM [Occ=Once] :: Data.Dynamic.Dynamic
                                              [LclId] =
                                                  CCCS Data.Dynamic.Dynamic! [wild4_s9C8J
                                                                              sat_s9CaL];
                                            } in  GHC.Base.Just [sat_s9CaM];
                                      };
                                };
                          };
                    };
              };
        };

Data.Dynamic.dynTypeRep
  :: Data.Dynamic.Dynamic -> Data.Typeable.Internal.SomeTypeRep
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9CaN]
        case ds_s9CaN of {
          Data.Dynamic.Dynamic tr_s9CaP [Occ=Once] _ [Occ=Dead] ->
              Data.Typeable.Internal.$WSomeTypeRep tr_s9CaP;
        };

Data.Dynamic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Dynamic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule4];

Data.Dynamic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Dynamic"#;

Data.Dynamic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$trModule2];

Data.Dynamic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Dynamic.$trModule3
                                     Data.Dynamic.$trModule1];

$krep_r9Bhq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r9Bhr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9Bhq GHC.Types.[]];

$krep2_r9Bhs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep1_r9Bhr];

$krep3_r9Bht :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeRep
                                              $krep2_r9Bhs];

Data.Dynamic.$fExceptionDynamic7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Dynamic"#;

Data.Dynamic.$fExceptionDynamic6 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$fExceptionDynamic7];

Data.Dynamic.$tcDynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12333845116585145369##
                                    13454739855111402131##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$fExceptionDynamic6
                                    0#
                                    GHC.Types.krep$*];

$krep4_r9Bhu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Dynamic.$tcDynamic
                                              GHC.Types.[]];

$krep5_r9Bhv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r9Bhq $krep4_r9Bhu];

Data.Dynamic.$tc'Dynamic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r9Bht $krep5_r9Bhv];

Data.Dynamic.$tc'Dynamic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Dynamic"#;

Data.Dynamic.$tc'Dynamic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Dynamic.$tc'Dynamic3];

Data.Dynamic.$tc'Dynamic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11394777848779697579##
                                    644307381671950132##
                                    Data.Dynamic.$trModule
                                    Data.Dynamic.$tc'Dynamic2
                                    1#
                                    Data.Dynamic.$tc'Dynamic1];

Data.Dynamic.$fExceptionDynamic5
  :: Data.Typeable.Internal.TypeRep Data.Dynamic.Dynamic
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                12333845116585145369##
                13454739855111402131##
                Data.Dynamic.$trModule
                Data.Dynamic.$fExceptionDynamic6
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9CaS [Occ=Once]
                   ww9_s9CaT [Occ=Once]
                   ww10_s9CaU [Occ=Once]
                   ww11_s9CaV [Occ=Once]
                   ww12_s9CaW [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9CaS
                                              ww9_s9CaT
                                              ww10_s9CaU
                                              ww11_s9CaV
                                              ww12_s9CaW];
        };

Data.Dynamic.$fExceptionDynamic1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Data.Dynamic.$fExceptionDynamic2;

Data.Dynamic.$fExceptionDynamic_$cshow
  :: Data.Dynamic.Dynamic -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9CaX]
        case x_s9CaX of {
          Data.Dynamic.Dynamic t_s9CaZ [Occ=Once] _ [Occ=Dead] ->
              let {
                sat_s9Cb1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [t_s9CaZ] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3
                            t_s9CaZ
                            Data.Dynamic.$fExceptionDynamic1;
              } in 
                GHC.CString.unpackAppendCString#
                    Data.Dynamic.$fExceptionDynamic4 sat_s9Cb1;
        };

Data.Dynamic.$fShowDynamic1
  :: Data.Dynamic.Dynamic -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Cb2]
        case ds_s9Cb2 of {
          Data.Dynamic.Dynamic t_s9Cb4 [Occ=Once] _ [Occ=Dead] ->
              let {
                f_s9Cb6 [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [t_s9Cb4] \u []
                        Data.Typeable.Internal.showTypeable
                            Data.Dynamic.$fExceptionDynamic3 t_s9Cb4; } in
              let {
                sat_s9Cba [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [f_s9Cb6] \r [x_s9Cb7]
                        let {
                          sat_s9Cb9 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s9Cb6 x_s9Cb7] \u []
                                  let {
                                    sat_s9Cb8 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [x_s9Cb7] \u []
                                            GHC.CString.unpackAppendCString#
                                                Data.Dynamic.$fExceptionDynamic2 x_s9Cb7;
                                  } in  f_s9Cb6 sat_s9Cb8;
                        } in 
                          GHC.CString.unpackAppendCString#
                              Data.Dynamic.$fExceptionDynamic4 sat_s9Cb9;
              } in  sat_s9Cba;
        };

Data.Dynamic.$fShowDynamic_$cshowList
  :: [Data.Dynamic.Dynamic] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9Cbb s_s9Cbc]
        GHC.Show.showList__ Data.Dynamic.$fShowDynamic1 ls_s9Cbb s_s9Cbc;

Data.Dynamic.$fShowDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Dynamic.$fShowDynamic_$cshowsPrec
                                    Data.Dynamic.$fExceptionDynamic_$cshow
                                    Data.Dynamic.$fShowDynamic_$cshowList];

Data.Dynamic.$fExceptionDynamic_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe Data.Dynamic.Dynamic
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Cbd]
        case ds_s9Cbd of {
          GHC.Exception.SomeException $dException1_s9Cbf [Occ=Once]
                                      e2_s9Cbg [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_s9Cbf of sat_s9Cbh {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_s9Cbh Data.Dynamic.$fExceptionDynamic5
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_s9Cbg];
                    };
              };
        };

Data.Dynamic.$fExceptionDynamic [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception Data.Dynamic.Dynamic
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [Data.Dynamic.$fExceptionDynamic5
                                              Data.Dynamic.$fShowDynamic
                                              Data.Dynamic.$fExceptionDynamic_$ctoException
                                              Data.Dynamic.$fExceptionDynamic_$cfromException
                                              Data.Dynamic.$fExceptionDynamic_$cshow];
Data.Dynamic.$fExceptionDynamic_$ctoException [Occ=LoopBreaker]
  :: Data.Dynamic.Dynamic -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [Data.Dynamic.$fExceptionDynamic
                                     eta_B1];

lvl1_r9Bhw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Type error in dynamic application.\n"#;

lvl2_r9Bhx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Can't apply function "#;

lvl3_r9Bhy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " to argument "#;

Data.Dynamic.dynApp1
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<B,1*U><B,1*U>x, Unf=OtherCon []] =
    [] \r [x_s9Cbj f_s9Cbk]
        let {
          sat_s9Cbx [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9Cbj f_s9Cbk] \u []
                  let {
                    sat_s9Cbw [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9Cbj f_s9Cbk] \u []
                            case f_s9Cbk of {
                              Data.Dynamic.Dynamic t_s9Cbm [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    sat_s9Cbv [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [x_s9Cbj t_s9Cbm] \u []
                                            let {
                                              sat_s9Cbu [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [x_s9Cbj] \s []
                                                      let {
                                                        sat_s9Cbt [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [x_s9Cbj] \u []
                                                                case x_s9Cbj of {
                                                                  Data.Dynamic.Dynamic t1_s9Cbq [Occ=Once]
                                                                                       _ [Occ=Dead] ->
                                                                      let {
                                                                        sat_s9Cbs [Occ=Once]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [t1_s9Cbq] \u []
                                                                                Data.Typeable.Internal.showTypeable
                                                                                    Data.Dynamic.$fExceptionDynamic3
                                                                                    t1_s9Cbq
                                                                                    Data.Dynamic.$fExceptionDynamic1;
                                                                      } in 
                                                                        GHC.CString.unpackAppendCString#
                                                                            Data.Dynamic.$fExceptionDynamic4
                                                                            sat_s9Cbs;
                                                                };
                                                      } in 
                                                        GHC.CString.unpackAppendCString#
                                                            lvl3_r9Bhy sat_s9Cbt;
                                            } in 
                                              case
                                                  Data.Typeable.Internal.showTypeable
                                                      Data.Dynamic.$fExceptionDynamic3
                                                      t_s9Cbm
                                                      Data.Dynamic.$fExceptionDynamic1
                                              of
                                              sat_s9Cbo
                                              { __DEFAULT -> GHC.Base.++ sat_s9Cbo sat_s9Cbu;
                                              };
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        Data.Dynamic.$fExceptionDynamic4 sat_s9Cbv;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_r9Bhx sat_s9Cbw;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl1_r9Bhw sat_s9Cbx
          of
          sat_s9Cby
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9Cby;
          };

Data.Dynamic.dynApp
  :: Data.Dynamic.Dynamic
     -> Data.Dynamic.Dynamic -> Data.Dynamic.Dynamic
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [f_s9Cbz x_s9CbA]
        case Data.Dynamic.dynApply f_s9Cbz x_s9CbA of {
          GHC.Base.Nothing -> Data.Dynamic.dynApp1 x_s9CbA f_s9Cbz;
          GHC.Base.Just r_s9CbC [Occ=Once] -> r_s9CbC;
        };

Data.Dynamic.Dynamic
  :: forall a.
     Data.Typeable.Internal.TypeRep a -> a -> Data.Dynamic.Dynamic
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Dynamic.Dynamic [eta_B2 eta_B1];

