
==================== Raw Cmm ====================
2018-03-16 16:07:30.255899692 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:30.25704252 UTC

[section ""data" . Data.Unique.$fEqUnique_closure" {
     Data.Unique.$fEqUnique_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Integer.Type.eqInteger_closure+2;
         const GHC.Integer.Type.neqInteger_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.258984394 UTC

[section ""data" . Data.Unique.$fOrdUnique_closure" {
     Data.Unique.$fOrdUnique_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Unique.$fEqUnique_closure+1;
         const GHC.Integer.Type.compareInteger_closure+2;
         const GHC.Integer.Type.ltInteger_closure+2;
         const GHC.Integer.Type.leInteger_closure+2;
         const GHC.Integer.Type.gtInteger_closure+2;
         const GHC.Integer.Type.geInteger_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmax_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.261365194 UTC

[section ""data" . lvl_rcBip_closure" {
     lvl_rcBip_closure:
         const lvl_rcBip_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_rcBip_entry() //  [R1]
         { []
         }
     {offset
       ccBmr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBms; else goto ccBmt;
       ccBms: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccBmt: // global
           (_ccBmo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccBmo::I64 == 0) goto ccBmq; else goto ccBmp;
       ccBmq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccBmp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccBmo::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_rcBip_info" {
     lvl_rcBip_info:
         const lvl_rcBip_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.266112499 UTC

[section ""data" . lvl1_rcBiq_closure" {
     lvl1_rcBiq_closure:
         const lvl1_rcBiq_info;
         const 0;
 },
 lvl1_rcBiq_entry() //  []
         { []
         }
     {offset
       ccBmK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccBmL; else goto ccBmM;
       ccBmL: // global
           R1 = lvl1_rcBiq_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccBmM: // global
           I64[Sp - 8] = block_ccBmF_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rcBiq_info" {
     lvl1_rcBiq_info:
         const lvl1_rcBiq_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const ScBjf_srt;
 },
 _ccBmF() //  []
         { []
         }
     {offset
       ccBmF: // global
           I64[Sp] = block_ccBmH_info;
           R1 = lvl_rcBip_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBmF_info" {
     block_ccBmF_info:
         const _ccBmF;
         const 0;
         const 4294967326;
         const ScBjf_srt;
 },
 _ccBmH() //  [R1]
         { []
         }
     {offset
       ccBmH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccBmQ; else goto ccBmP;
       ccBmQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccBmP: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBmH_info" {
     block_ccBmH_info:
         const _ccBmH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.272907017 UTC

[section ""data" . Data.Unique.uniqSource_closure" {
     Data.Unique.uniqSource_closure:
         const Data.Unique.uniqSource_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Unique.uniqSource_entry() //  [R1]
         { []
         }
     {offset
       ccBnb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccBnc; else goto ccBnd;
       ccBnc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccBnd: // global
           (_ccBn6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccBn6::I64 == 0) goto ccBn8; else goto ccBn7;
       ccBn8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccBn7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccBn6::I64;
           I64[Sp - 24] = block_ccBn9_info;
           Sp = Sp - 24;
           call lvl1_rcBiq_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Unique.uniqSource_info" {
     Data.Unique.uniqSource_info:
         const Data.Unique.uniqSource_entry;
         const 0;
         const 4294967317;
         const ScBjf_srt+8;
 },
 _ccBn9() //  [R1]
         { []
         }
     {offset
       ccBn9: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccBn9_info" {
     block_ccBn9_info:
         const _ccBn9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.279338001 UTC

[section ""data" . Data.Unique.hashUnique_closure" {
     Data.Unique.hashUnique_closure:
         const Data.Unique.hashUnique_info;
 },
 Data.Unique.hashUnique_entry() //  [R2]
         { []
         }
     {offset
       ccBnx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccBnB; else goto ccBnC;
       ccBnB: // global
           R2 = R2;
           R1 = Data.Unique.hashUnique_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccBnC: // global
           I64[Sp - 8] = block_ccBnv_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.hashInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.hashUnique_info" {
     Data.Unique.hashUnique_info:
         const Data.Unique.hashUnique_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccBnv() //  [R1]
         { []
         }
     {offset
       ccBnv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccBnF; else goto ccBnE;
       ccBnF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccBnE: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBnv_info" {
     block_ccBnv_info:
         const _ccBnv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.284634734 UTC

[section ""cstring" . Data.Unique.$trModule4_bytes" {
     Data.Unique.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.286212886 UTC

[section ""data" . Data.Unique.$trModule3_closure" {
     Data.Unique.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.287831764 UTC

[section ""cstring" . Data.Unique.$trModule2_bytes" {
     Data.Unique.$trModule2_bytes:
         I8[] [68,97,116,97,46,85,110,105,113,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.289497999 UTC

[section ""data" . Data.Unique.$trModule1_closure" {
     Data.Unique.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.291213684 UTC

[section ""data" . Data.Unique.$trModule_closure" {
     Data.Unique.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Unique.$trModule3_closure+1;
         const Data.Unique.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.292953105 UTC

[section ""data" . $krep_rcBir_closure" {
     $krep_rcBir_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.295101921 UTC

[section ""cstring" . Data.Unique.$tcUnique2_bytes" {
     Data.Unique.$tcUnique2_bytes:
         I8[] [85,110,105,113,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.296751384 UTC

[section ""data" . Data.Unique.$tcUnique1_closure" {
     Data.Unique.$tcUnique1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$tcUnique2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.298509808 UTC

[section ""data" . Data.Unique.$tcUnique_closure" {
     Data.Unique.$tcUnique_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Unique.$trModule_closure+1;
         const Data.Unique.$tcUnique1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9376197555697821408;
         const 12289580968443169787;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.300279847 UTC

[section ""data" . $krep1_rcBis_closure" {
     $krep1_rcBis_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Unique.$tcUnique_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.302009439 UTC

[section ""data" . Data.Unique.$tc'Unique1_closure" {
     Data.Unique.$tc'Unique1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcBir_closure+1;
         const $krep1_rcBis_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.304298059 UTC

[section ""cstring" . Data.Unique.$tc'Unique3_bytes" {
     Data.Unique.$tc'Unique3_bytes:
         I8[] [39,85,110,105,113,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.305999221 UTC

[section ""data" . Data.Unique.$tc'Unique2_closure" {
     Data.Unique.$tc'Unique2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$tc'Unique3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.307742163 UTC

[section ""data" . Data.Unique.$tc'Unique_closure" {
     Data.Unique.$tc'Unique_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Unique.$trModule_closure+1;
         const Data.Unique.$tc'Unique2_closure+1;
         const Data.Unique.$tc'Unique1_closure+4;
         const 6673795421757133892;
         const 3923002115329816747;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.309484144 UTC

[section ""data" . sat_scBiF_closure" {
     sat_scBiF_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.311140659 UTC

[section ""data" . sat_scBiG_closure" {
     sat_scBiG_closure:
         const :_con_info;
         const sat_scBiF_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.313937661 UTC

[section ""data" . Data.Unique.newUnique3_closure" {
     Data.Unique.newUnique3_closure:
         const Data.Unique.newUnique3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Unique.newUnique3_entry() //  [R1]
         { []
         }
     {offset
       ccBob: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBoc; else goto ccBod;
       ccBoc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccBod: // global
           (_ccBo8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccBo8::I64 == 0) goto ccBoa; else goto ccBo9;
       ccBoa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccBo9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccBo8::I64;
           R3 = sat_scBiG_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique3_info" {
     Data.Unique.newUnique3_info:
         const Data.Unique.newUnique3_entry;
         const 0;
         const 4294967317;
         const ScBjf_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.318346209 UTC

[section ""data" . Data.Unique.newUnique2_closure" {
     Data.Unique.newUnique2_closure:
         const Data.Unique.newUnique2_info;
         const 0;
 },
 Data.Unique.newUnique2_entry() //  [R2]
         { []
         }
     {offset
       ccBor: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccBov; else goto ccBow;
       ccBov: // global
           R2 = R2;
           R1 = Data.Unique.newUnique2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccBow: // global
           I64[Sp - 8] = block_ccBop_info;
           R3 = Data.Unique.newUnique3_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique2_info" {
     Data.Unique.newUnique2_info:
         const Data.Unique.newUnique2_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const ScBjf_srt+24;
 },
 _ccBop() //  [R1]
         { []
         }
     {offset
       ccBop: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccBoz; else goto ccBoy;
       ccBoz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccBoy: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBop_info" {
     block_ccBop_info:
         const _ccBop;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.324098961 UTC

[section ""data" . Data.Unique.newUnique1_closure" {
     Data.Unique.newUnique1_closure:
         const Data.Unique.newUnique1_info;
         const 0;
 },
 Data.Unique.newUnique1_entry() //  []
         { []
         }
     {offset
       ccBoQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBoW; else goto ccBoX;
       ccBoW: // global
           R1 = Data.Unique.newUnique1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccBoX: // global
           I64[Sp - 8] = block_ccBoN_info;
           R1 = Data.Unique.uniqSource_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucBp5; else goto ccBoO;
       ucBp5: // global
           call _ccBoN(R1) args: 0, res: 0, upd: 0;
       ccBoO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique1_info" {
     Data.Unique.newUnique1_info:
         const Data.Unique.newUnique1_entry;
         const 0;
         const 55834574862;
         const 4294967299;
         const ScBjf_srt+32;
 },
 _ccBoN() //  [R1]
         { []
         }
     {offset
       ccBoN: // global
           I64[Sp] = block_ccBoT_info;
           R2 = Data.Unique.newUnique2_closure+1;
           R1 = P64[R1 + 7];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBoN_info" {
     block_ccBoN_info:
         const _ccBoN;
         const 0;
         const 4294967326;
         const ScBjf_srt+32;
 },
 _ccBoT() //  [R1]
         { []
         }
     {offset
       ccBoT: // global
           I64[Sp - 8] = block_ccBoV_info;
           _scBiO::P64 = R1;
           R1 = R1;
           P64[Sp] = _scBiO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucBp6; else goto ccBp0;
       ucBp6: // global
           call _ccBoV() args: 0, res: 0, upd: 0;
       ccBp0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBoT_info" {
     block_ccBoT_info:
         const _ccBoT;
         const 0;
         const 30;
 },
 _ccBoV() //  []
         { []
         }
     {offset
       ccBoV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBoV_info" {
     block_ccBoV_info:
         const _ccBoV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.331917825 UTC

[section ""data" . Data.Unique.newUnique_closure" {
     Data.Unique.newUnique_closure:
         const Data.Unique.newUnique_info;
         const 0;
 },
 Data.Unique.newUnique_entry() //  []
         { []
         }
     {offset
       ccBps: // global
           call Data.Unique.newUnique1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique_info" {
     Data.Unique.newUnique_info:
         const Data.Unique.newUnique_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScBjf_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.335413458 UTC

[section ""relreadonly" . ScBjf_srt" {
     ScBjf_srt:
         const lvl_rcBip_closure;
         const lvl1_rcBiq_closure;
         const sat_scBiG_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const Data.Unique.newUnique2_closure;
         const Data.Unique.newUnique3_closure;
         const Data.Unique.uniqSource_closure;
         const Data.Unique.newUnique1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.429765058 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:30.430927671 UTC

[section ""data" . Data.Unique.$fEqUnique_closure" {
     Data.Unique.$fEqUnique_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Integer.Type.eqInteger_closure+2;
         const GHC.Integer.Type.neqInteger_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.432723595 UTC

[section ""data" . Data.Unique.$fOrdUnique_closure" {
     Data.Unique.$fOrdUnique_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Unique.$fEqUnique_closure+1;
         const GHC.Integer.Type.compareInteger_closure+2;
         const GHC.Integer.Type.ltInteger_closure+2;
         const GHC.Integer.Type.leInteger_closure+2;
         const GHC.Integer.Type.gtInteger_closure+2;
         const GHC.Integer.Type.geInteger_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmax_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.435251896 UTC

[section ""data" . lvl_rcBip_closure" {
     lvl_rcBip_closure:
         const lvl_rcBip_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_rcBip_entry() //  [R1]
         { []
         }
     {offset
       ccBq4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBq5; else goto ccBq6;
       ccBq5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccBq6: // global
           (_ccBq1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccBq1::I64 == 0) goto ccBq3; else goto ccBq2;
       ccBq3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccBq2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccBq1::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_rcBip_info" {
     lvl_rcBip_info:
         const lvl_rcBip_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.439778637 UTC

[section ""data" . lvl1_rcBiq_closure" {
     lvl1_rcBiq_closure:
         const lvl1_rcBiq_info;
         const 0;
 },
 lvl1_rcBiq_entry() //  []
         { []
         }
     {offset
       ccBqq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccBqr; else goto ccBqs;
       ccBqr: // global
           R1 = lvl1_rcBiq_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccBqs: // global
           I64[Sp - 8] = block_ccBql_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rcBiq_info" {
     lvl1_rcBiq_info:
         const lvl1_rcBiq_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const ScBqx_srt;
 },
 _ccBql() //  []
         { []
         }
     {offset
       ccBql: // global
           I64[Sp] = block_ccBqn_info;
           R1 = lvl_rcBip_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBql_info" {
     block_ccBql_info:
         const _ccBql;
         const 0;
         const 4294967326;
         const ScBqx_srt;
 },
 _ccBqn() //  [R1]
         { []
         }
     {offset
       ccBqn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccBqw; else goto ccBqv;
       ccBqw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccBqv: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBqn_info" {
     block_ccBqn_info:
         const _ccBqn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.446798313 UTC

[section ""data" . Data.Unique.uniqSource_closure" {
     Data.Unique.uniqSource_closure:
         const Data.Unique.uniqSource_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Unique.uniqSource_entry() //  [R1]
         { []
         }
     {offset
       ccBqV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccBqW; else goto ccBqX;
       ccBqW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccBqX: // global
           (_ccBqQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccBqQ::I64 == 0) goto ccBqS; else goto ccBqR;
       ccBqS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccBqR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccBqQ::I64;
           I64[Sp - 24] = block_ccBqT_info;
           Sp = Sp - 24;
           call lvl1_rcBiq_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Unique.uniqSource_info" {
     Data.Unique.uniqSource_info:
         const Data.Unique.uniqSource_entry;
         const 0;
         const 4294967317;
         const ScBqx_srt+8;
 },
 _ccBqT() //  [R1]
         { []
         }
     {offset
       ccBqT: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccBqT_info" {
     block_ccBqT_info:
         const _ccBqT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.452913181 UTC

[section ""data" . Data.Unique.hashUnique_closure" {
     Data.Unique.hashUnique_closure:
         const Data.Unique.hashUnique_info;
 },
 Data.Unique.hashUnique_entry() //  [R2]
         { []
         }
     {offset
       ccBrj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccBrn; else goto ccBro;
       ccBrn: // global
           R2 = R2;
           R1 = Data.Unique.hashUnique_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccBro: // global
           I64[Sp - 8] = block_ccBrh_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.hashInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.hashUnique_info" {
     Data.Unique.hashUnique_info:
         const Data.Unique.hashUnique_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccBrh() //  [R1]
         { []
         }
     {offset
       ccBrh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccBrr; else goto ccBrq;
       ccBrr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccBrq: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBrh_info" {
     block_ccBrh_info:
         const _ccBrh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.458617818 UTC

[section ""cstring" . Data.Unique.$trModule4_bytes" {
     Data.Unique.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.460359793 UTC

[section ""data" . Data.Unique.$trModule3_closure" {
     Data.Unique.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.462006055 UTC

[section ""cstring" . Data.Unique.$trModule2_bytes" {
     Data.Unique.$trModule2_bytes:
         I8[] [68,97,116,97,46,85,110,105,113,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.463605371 UTC

[section ""data" . Data.Unique.$trModule1_closure" {
     Data.Unique.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.465639611 UTC

[section ""data" . Data.Unique.$trModule_closure" {
     Data.Unique.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Unique.$trModule3_closure+1;
         const Data.Unique.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.46740471 UTC

[section ""data" . $krep_rcBir_closure" {
     $krep_rcBir_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.469143126 UTC

[section ""cstring" . Data.Unique.$tcUnique2_bytes" {
     Data.Unique.$tcUnique2_bytes:
         I8[] [85,110,105,113,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.470886671 UTC

[section ""data" . Data.Unique.$tcUnique1_closure" {
     Data.Unique.$tcUnique1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$tcUnique2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.472708481 UTC

[section ""data" . Data.Unique.$tcUnique_closure" {
     Data.Unique.$tcUnique_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Unique.$trModule_closure+1;
         const Data.Unique.$tcUnique1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9376197555697821408;
         const 12289580968443169787;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.474558895 UTC

[section ""data" . $krep1_rcBis_closure" {
     $krep1_rcBis_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Unique.$tcUnique_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.476273175 UTC

[section ""data" . Data.Unique.$tc'Unique1_closure" {
     Data.Unique.$tc'Unique1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcBir_closure+1;
         const $krep1_rcBis_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.47792227 UTC

[section ""cstring" . Data.Unique.$tc'Unique3_bytes" {
     Data.Unique.$tc'Unique3_bytes:
         I8[] [39,85,110,105,113,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.479650184 UTC

[section ""data" . Data.Unique.$tc'Unique2_closure" {
     Data.Unique.$tc'Unique2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Unique.$tc'Unique3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.481311984 UTC

[section ""data" . Data.Unique.$tc'Unique_closure" {
     Data.Unique.$tc'Unique_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Unique.$trModule_closure+1;
         const Data.Unique.$tc'Unique2_closure+1;
         const Data.Unique.$tc'Unique1_closure+4;
         const 6673795421757133892;
         const 3923002115329816747;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.483604373 UTC

[section ""data" . sat_scBpL_closure" {
     sat_scBpL_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.485901556 UTC

[section ""data" . sat_scBpM_closure" {
     sat_scBpM_closure:
         const :_con_info;
         const sat_scBpL_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.488269506 UTC

[section ""data" . Data.Unique.newUnique3_closure" {
     Data.Unique.newUnique3_closure:
         const Data.Unique.newUnique3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Unique.newUnique3_entry() //  [R1]
         { []
         }
     {offset
       ccBrZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBs0; else goto ccBs1;
       ccBs0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccBs1: // global
           (_ccBrW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccBrW::I64 == 0) goto ccBrY; else goto ccBrX;
       ccBrY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccBrX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccBrW::I64;
           R3 = sat_scBpM_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique3_info" {
     Data.Unique.newUnique3_info:
         const Data.Unique.newUnique3_entry;
         const 0;
         const 4294967317;
         const ScBqx_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.492760109 UTC

[section ""data" . Data.Unique.newUnique2_closure" {
     Data.Unique.newUnique2_closure:
         const Data.Unique.newUnique2_info;
         const 0;
 },
 Data.Unique.newUnique2_entry() //  [R2]
         { []
         }
     {offset
       ccBsh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccBsl; else goto ccBsm;
       ccBsl: // global
           R2 = R2;
           R1 = Data.Unique.newUnique2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccBsm: // global
           I64[Sp - 8] = block_ccBsf_info;
           R3 = Data.Unique.newUnique3_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique2_info" {
     Data.Unique.newUnique2_info:
         const Data.Unique.newUnique2_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const ScBqx_srt+24;
 },
 _ccBsf() //  [R1]
         { []
         }
     {offset
       ccBsf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccBsp; else goto ccBso;
       ccBsp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccBso: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBsf_info" {
     block_ccBsf_info:
         const _ccBsf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.499197609 UTC

[section ""data" . Data.Unique.newUnique1_closure" {
     Data.Unique.newUnique1_closure:
         const Data.Unique.newUnique1_info;
         const 0;
 },
 Data.Unique.newUnique1_entry() //  []
         { []
         }
     {offset
       ccBsI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBsO; else goto ccBsP;
       ccBsO: // global
           R1 = Data.Unique.newUnique1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccBsP: // global
           I64[Sp - 8] = block_ccBsF_info;
           R1 = Data.Unique.uniqSource_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucBsX; else goto ccBsG;
       ucBsX: // global
           call _ccBsF(R1) args: 0, res: 0, upd: 0;
       ccBsG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique1_info" {
     Data.Unique.newUnique1_info:
         const Data.Unique.newUnique1_entry;
         const 0;
         const 55834574862;
         const 4294967299;
         const ScBqx_srt+32;
 },
 _ccBsF() //  [R1]
         { []
         }
     {offset
       ccBsF: // global
           I64[Sp] = block_ccBsL_info;
           R2 = Data.Unique.newUnique2_closure+1;
           R1 = P64[R1 + 7];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBsF_info" {
     block_ccBsF_info:
         const _ccBsF;
         const 0;
         const 4294967326;
         const ScBqx_srt+32;
 },
 _ccBsL() //  [R1]
         { []
         }
     {offset
       ccBsL: // global
           I64[Sp - 8] = block_ccBsN_info;
           _scBpU::P64 = R1;
           R1 = R1;
           P64[Sp] = _scBpU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucBsY; else goto ccBsS;
       ucBsY: // global
           call _ccBsN() args: 0, res: 0, upd: 0;
       ccBsS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBsL_info" {
     block_ccBsL_info:
         const _ccBsL;
         const 0;
         const 30;
 },
 _ccBsN() //  []
         { []
         }
     {offset
       ccBsN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccBsN_info" {
     block_ccBsN_info:
         const _ccBsN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.507018192 UTC

[section ""data" . Data.Unique.newUnique_closure" {
     Data.Unique.newUnique_closure:
         const Data.Unique.newUnique_info;
         const 0;
 },
 Data.Unique.newUnique_entry() //  []
         { []
         }
     {offset
       ccBtn: // global
           call Data.Unique.newUnique1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Unique.newUnique_info" {
     Data.Unique.newUnique_info:
         const Data.Unique.newUnique_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScBqx_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:30.509999342 UTC

[section ""relreadonly" . ScBqx_srt" {
     ScBqx_srt:
         const lvl_rcBip_closure;
         const lvl1_rcBiq_closure;
         const sat_scBpM_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const Data.Unique.newUnique2_closure;
         const Data.Unique.newUnique3_closure;
         const Data.Unique.uniqSource_closure;
         const Data.Unique.newUnique1_closure;
 }]

