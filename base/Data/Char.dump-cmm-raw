
==================== Raw Cmm ====================
2018-03-16 16:00:17.32199417 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:00:17.324430968 UTC

[section ""data" . Data.Char.$wisLetter_closure" {
     Data.Char.$wisLetter_closure:
         const Data.Char.$wisLetter_info;
         const 0;
 },
 Data.Char.$wisLetter_entry() //  [R2]
         { []
         }
     {offset
       c5i13: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i14; else goto c5i15;
       c5i14: // global
           R2 = R2;
           R1 = Data.Char.$wisLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i15: // global
           I64[Sp - 8] = block_c5i0T_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.$wisLetter_info" {
     Data.Char.$wisLetter_info:
         const Data.Char.$wisLetter_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S5hSA_srt;
 },
 _c5i0T() //  [R1]
         { []
         }
     {offset
       c5i0T: // global
           _c5i12::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i12::I64 < 4) goto u5i1o; else goto u5i1q;
       u5i1o: // global
           if (_c5i12::I64 >= 3) goto c5i11; else goto u5i1p;
       u5i1p: // global
           if (_c5i12::I64 != 1) goto c5i11; else goto c5i11;
       u5i1q: // global
           if (_c5i12::I64 < 5) goto c5i11; else goto c5i0W;
       c5i11: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i0W: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i0T_info" {
     block_c5i0T_info:
         const _c5i0T;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.330713887 UTC

[section ""data" . Data.Char.isLetter_closure" {
     Data.Char.isLetter_closure:
         const Data.Char.isLetter_info;
         const 0;
 },
 Data.Char.isLetter_entry() //  [R2]
         { []
         }
     {offset
       c5i1J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i1K; else goto c5i1L;
       c5i1K: // global
           R2 = R2;
           R1 = Data.Char.isLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i1L: // global
           I64[Sp - 8] = block_c5i1G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i1P; else goto c5i1H;
       u5i1P: // global
           call _c5i1G(R1) args: 0, res: 0, upd: 0;
       c5i1H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isLetter_info" {
     Data.Char.isLetter_info:
         const Data.Char.isLetter_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S5hSA_srt+8;
 },
 _c5i1G() //  [R1]
         { []
         }
     {offset
       c5i1G: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Data.Char.$wisLetter_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i1G_info" {
     block_c5i1G_info:
         const _c5i1G;
         const 0;
         const 4294967326;
         const S5hSA_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.336883167 UTC

[section ""data" . Data.Char.isMark_closure" {
     Data.Char.isMark_closure:
         const Data.Char.isMark_info;
         const 0;
 },
 Data.Char.isMark_entry() //  [R2]
         { []
         }
     {offset
       c5i26: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i27; else goto c5i28;
       c5i27: // global
           R2 = R2;
           R1 = Data.Char.isMark_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i28: // global
           I64[Sp - 8] = block_c5i23_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i2y; else goto c5i24;
       u5i2y: // global
           call _c5i23(R1) args: 0, res: 0, upd: 0;
       c5i24: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isMark_info" {
     Data.Char.isMark_info:
         const Data.Char.isMark_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S5hSA_srt;
 },
 _c5i23() //  [R1]
         { []
         }
     {offset
       c5i23: // global
           I64[Sp] = block_c5i2b_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i23_info" {
     block_c5i23_info:
         const _c5i23;
         const 0;
         const 4294967326;
         const S5hSA_srt;
 },
 _c5i2b() //  [R1]
         { []
         }
     {offset
       c5i2b: // global
           _c5i2v::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i2v::I64 >= 8) goto c5i2i; else goto u5i2w;
       u5i2w: // global
           if (_c5i2v::I64 < 5) goto c5i2i; else goto u5i2x;
       c5i2i: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i2x: // global
           if (_c5i2v::I64 != 6) goto c5i2u; else goto c5i2u;
       c5i2u: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i2b_info" {
     block_c5i2b_info:
         const _c5i2b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.345108289 UTC

[section ""data" . Data.Char.isNumber_closure" {
     Data.Char.isNumber_closure:
         const Data.Char.isNumber_info;
         const 0;
 },
 Data.Char.isNumber_entry() //  [R2]
         { []
         }
     {offset
       c5i2V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i2W; else goto c5i2X;
       c5i2W: // global
           R2 = R2;
           R1 = Data.Char.isNumber_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i2X: // global
           I64[Sp - 8] = block_c5i2S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i3n; else goto c5i2T;
       u5i3n: // global
           call _c5i2S(R1) args: 0, res: 0, upd: 0;
       c5i2T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isNumber_info" {
     Data.Char.isNumber_info:
         const Data.Char.isNumber_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S5hSA_srt;
 },
 _c5i2S() //  [R1]
         { []
         }
     {offset
       c5i2S: // global
           I64[Sp] = block_c5i30_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i2S_info" {
     block_c5i2S_info:
         const _c5i2S;
         const 0;
         const 4294967326;
         const S5hSA_srt;
 },
 _c5i30() //  [R1]
         { []
         }
     {offset
       c5i30: // global
           _c5i3k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i3k::I64 >= 11) goto c5i37; else goto u5i3l;
       u5i3l: // global
           if (_c5i3k::I64 < 8) goto c5i37; else goto u5i3m;
       c5i37: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i3m: // global
           if (_c5i3k::I64 != 9) goto c5i3j; else goto c5i3j;
       c5i3j: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i30_info" {
     block_c5i30_info:
         const _c5i30;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.3533262 UTC

[section ""data" . Data.Char.isSeparator_closure" {
     Data.Char.isSeparator_closure:
         const Data.Char.isSeparator_info;
         const 0;
 },
 Data.Char.isSeparator_entry() //  [R2]
         { []
         }
     {offset
       c5i3K: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i3L; else goto c5i3M;
       c5i3L: // global
           R2 = R2;
           R1 = Data.Char.isSeparator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i3M: // global
           I64[Sp - 8] = block_c5i3H_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i4c; else goto c5i3I;
       u5i4c: // global
           call _c5i3H(R1) args: 0, res: 0, upd: 0;
       c5i3I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isSeparator_info" {
     Data.Char.isSeparator_info:
         const Data.Char.isSeparator_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const S5hSA_srt;
 },
 _c5i3H() //  [R1]
         { []
         }
     {offset
       c5i3H: // global
           I64[Sp] = block_c5i3P_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i3H_info" {
     block_c5i3H_info:
         const _c5i3H;
         const 0;
         const 4294967326;
         const S5hSA_srt;
 },
 _c5i3P() //  [R1]
         { []
         }
     {offset
       c5i3P: // global
           _c5i49::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i49::I64 >= 25) goto c5i3W; else goto u5i4a;
       u5i4a: // global
           if (_c5i49::I64 < 22) goto c5i3W; else goto u5i4b;
       c5i3W: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i4b: // global
           if (_c5i49::I64 != 23) goto c5i48; else goto c5i48;
       c5i48: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i3P_info" {
     block_c5i3P_info:
         const _c5i3P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.36162021 UTC

[section ""cstring" . Data.Char.$trModule4_bytes" {
     Data.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.363333613 UTC

[section ""data" . Data.Char.$trModule3_closure" {
     Data.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.364889663 UTC

[section ""cstring" . Data.Char.$trModule2_bytes" {
     Data.Char.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.366955704 UTC

[section ""data" . Data.Char.$trModule1_closure" {
     Data.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.368651078 UTC

[section ""data" . Data.Char.$trModule_closure" {
     Data.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Char.$trModule3_closure+1;
         const Data.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.370498315 UTC

[section ""data" . lvl_r5hRh_closure" {
     lvl_r5hRh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.372147525 UTC

[section ""cstring" . lvl1_r5hRi_bytes" {
     lvl1_r5hRi_bytes:
         I8[] [67,104,97,114,46,100,105,103,105,116,84,111,73,110,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.375903405 UTC

[section ""data" . Data.Char.$wlvl_closure" {
     Data.Char.$wlvl_closure:
         const Data.Char.$wlvl_info;
         const 0;
 },
 sat_s5hRD_entry() //  [R1]
         { []
         }
     {offset
       c5i4N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5i4O; else goto c5i4P;
       c5i4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5i4P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r5hRh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s5hRD_info" {
     sat_s5hRD_info:
         const sat_s5hRD_entry;
         const 4294967296;
         const 4294967313;
         const S5hSA_srt+48;
 },
 sat_s5hRE_entry() //  [R1]
         { []
         }
     {offset
       c5i4T: // global
           _s5hRE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5i4U; else goto c5i4V;
       c5i4V: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5i4X; else goto c5i4W;
       c5i4X: // global
           HpAlloc = 48;
           goto c5i4U;
       c5i4U: // global
           R1 = _s5hRE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5i4W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5hRE::P64;
           _s5hRC::I64 = I64[_s5hRE::P64 + 16];
           if (_s5hRC::I64 != 39) goto c5i4R; else goto c5i4S;
       c5i4R: // global
           I64[Hp - 40] = sat_s5hRD_info;
           I64[Hp - 24] = _s5hRC::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5i4S: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s5hRE_info" {
     sat_s5hRE_info:
         const sat_s5hRE_entry;
         const 4294967296;
         const 12884901905;
         const S5hSA_srt+48;
 },
 Data.Char.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c5i51: // global
           _s5hRB::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5i52; else goto c5i53;
       c5i53: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5i55; else goto c5i54;
       c5i55: // global
           HpAlloc = 24;
           goto c5i52;
       c5i52: // global
           R2 = _s5hRB::I64;
           R1 = Data.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i54: // global
           I64[Hp - 16] = sat_s5hRE_info;
           I64[Hp] = _s5hRB::I64;
           I64[Sp - 8] = block_c5i4Z_info;
           R3 = Hp - 16;
           R2 = lvl1_r5hRi_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.$wlvl_info" {
     Data.Char.$wlvl_info:
         const Data.Char.$wlvl_entry;
         const 0;
         const 64424509454;
         const 4294967300;
         const S5hSA_srt+48;
 },
 _c5i4Z() //  [R1]
         { []
         }
     {offset
       c5i4Z: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i4Z_info" {
     block_c5i4Z_info:
         const _c5i4Z;
         const 0;
         const 4294967326;
         const S5hSA_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.385802817 UTC

[section ""data" . Data.Char.$wdigitToInt_closure" {
     Data.Char.$wdigitToInt_closure:
         const Data.Char.$wdigitToInt_info;
         const 0;
 },
 Data.Char.$wdigitToInt_entry() //  [R2]
         { []
         }
     {offset
       c5i5y: // global
           _s5hRH::I64 = R2 - 48;
           if (_s5hRH::I64 > 9) goto c5i6k; else goto c5i6l;
       c5i6k: // global
           _s5hRL::I64 = R2 - 97;
           if (_s5hRL::I64 > 5) goto c5i6f; else goto c5i6i;
       c5i6f: // global
           _s5hRP::I64 = R2 - 65;
           if (_s5hRP::I64 > 5) goto c5i69; else goto c5i6d;
       c5i69: // global
           R2 = R2;
           call Data.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c5i6d: // global
           R1 = _s5hRP::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i6i: // global
           R1 = _s5hRL::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i6l: // global
           R1 = _s5hRH::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.$wdigitToInt_info" {
     Data.Char.$wdigitToInt_info:
         const Data.Char.$wdigitToInt_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S5hSA_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.390672016 UTC

[section ""data" . Data.Char.digitToInt_closure" {
     Data.Char.digitToInt_closure:
         const Data.Char.digitToInt_info;
         const 0;
 },
 Data.Char.digitToInt_entry() //  [R2]
         { []
         }
     {offset
       c5i6A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i6I; else goto c5i6J;
       c5i6I: // global
           R2 = R2;
           R1 = Data.Char.digitToInt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i6J: // global
           I64[Sp - 8] = block_c5i6x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i6O; else goto c5i6y;
       u5i6O: // global
           call _c5i6x(R1) args: 0, res: 0, upd: 0;
       c5i6y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.digitToInt_info" {
     Data.Char.digitToInt_info:
         const Data.Char.digitToInt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S5hSA_srt+80;
 },
 _c5i6x() //  [R1]
         { []
         }
     {offset
       c5i6x: // global
           I64[Sp] = block_c5i6D_info;
           R2 = I64[R1 + 7];
           call Data.Char.$wdigitToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i6x_info" {
     block_c5i6x_info:
         const _c5i6x;
         const 0;
         const 4294967326;
         const S5hSA_srt+88;
 },
 _c5i6D() //  [R1]
         { []
         }
     {offset
       c5i6D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5i6N; else goto c5i6M;
       c5i6N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5i6M: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i6D_info" {
     block_c5i6D_info:
         const _c5i6D;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.397830426 UTC

[section ""relreadonly" . S5hSA_srt" {
     S5hSA_srt:
         const GHC.Unicode.$wgeneralCategory_closure;
         const Data.Char.$wisLetter_closure;
         const Data.Char.isLetter_closure;
         const Data.Char.isMark_closure;
         const Data.Char.isNumber_closure;
         const Data.Char.isSeparator_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Char.$wlvl_closure;
         const Data.Char.digitToInt_closure;
         const Data.Char.$wdigitToInt_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.52345648 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:00:17.527256003 UTC

[section ""data" . Data.Char.$wisLetter_closure" {
     Data.Char.$wisLetter_closure:
         const Data.Char.$wisLetter_info;
         const 0;
 },
 Data.Char.$wisLetter_entry() //  [R2]
         { []
         }
     {offset
       c5i7V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i7W; else goto c5i7X;
       c5i7W: // global
           R2 = R2;
           R1 = Data.Char.$wisLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i7X: // global
           I64[Sp - 8] = block_c5i7L_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.$wisLetter_info" {
     Data.Char.$wisLetter_info:
         const Data.Char.$wisLetter_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S5i8j_srt;
 },
 _c5i7L() //  [R1]
         { []
         }
     {offset
       c5i7L: // global
           _c5i7U::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i7U::I64 < 4) goto u5i8g; else goto u5i8i;
       u5i8g: // global
           if (_c5i7U::I64 >= 3) goto c5i7T; else goto u5i8h;
       u5i8h: // global
           if (_c5i7U::I64 != 1) goto c5i7T; else goto c5i7T;
       u5i8i: // global
           if (_c5i7U::I64 < 5) goto c5i7T; else goto c5i7O;
       c5i7T: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i7O: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i7L_info" {
     block_c5i7L_info:
         const _c5i7L;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.536171026 UTC

[section ""data" . Data.Char.isLetter_closure" {
     Data.Char.isLetter_closure:
         const Data.Char.isLetter_info;
         const 0;
 },
 Data.Char.isLetter_entry() //  [R2]
         { []
         }
     {offset
       c5i8F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i8G; else goto c5i8H;
       c5i8G: // global
           R2 = R2;
           R1 = Data.Char.isLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i8H: // global
           I64[Sp - 8] = block_c5i8C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i8L; else goto c5i8D;
       u5i8L: // global
           call _c5i8C(R1) args: 0, res: 0, upd: 0;
       c5i8D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isLetter_info" {
     Data.Char.isLetter_info:
         const Data.Char.isLetter_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S5i8j_srt+8;
 },
 _c5i8C() //  [R1]
         { []
         }
     {offset
       c5i8C: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Data.Char.$wisLetter_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i8C_info" {
     block_c5i8C_info:
         const _c5i8C;
         const 0;
         const 4294967326;
         const S5i8j_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.545586337 UTC

[section ""data" . Data.Char.isMark_closure" {
     Data.Char.isMark_closure:
         const Data.Char.isMark_info;
         const 0;
 },
 Data.Char.isMark_entry() //  [R2]
         { []
         }
     {offset
       c5i93: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i94; else goto c5i95;
       c5i94: // global
           R2 = R2;
           R1 = Data.Char.isMark_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i95: // global
           I64[Sp - 8] = block_c5i90_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i9v; else goto c5i91;
       u5i9v: // global
           call _c5i90(R1) args: 0, res: 0, upd: 0;
       c5i91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isMark_info" {
     Data.Char.isMark_info:
         const Data.Char.isMark_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S5i8j_srt;
 },
 _c5i90() //  [R1]
         { []
         }
     {offset
       c5i90: // global
           I64[Sp] = block_c5i98_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i90_info" {
     block_c5i90_info:
         const _c5i90;
         const 0;
         const 4294967326;
         const S5i8j_srt;
 },
 _c5i98() //  [R1]
         { []
         }
     {offset
       c5i98: // global
           _c5i9s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i9s::I64 >= 8) goto c5i9f; else goto u5i9t;
       u5i9t: // global
           if (_c5i9s::I64 < 5) goto c5i9f; else goto u5i9u;
       c5i9f: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i9u: // global
           if (_c5i9s::I64 != 6) goto c5i9r; else goto c5i9r;
       c5i9r: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i98_info" {
     block_c5i98_info:
         const _c5i98;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.558401459 UTC

[section ""data" . Data.Char.isNumber_closure" {
     Data.Char.isNumber_closure:
         const Data.Char.isNumber_info;
         const 0;
 },
 Data.Char.isNumber_entry() //  [R2]
         { []
         }
     {offset
       c5i9W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i9X; else goto c5i9Y;
       c5i9X: // global
           R2 = R2;
           R1 = Data.Char.isNumber_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i9Y: // global
           I64[Sp - 8] = block_c5i9T_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5iao; else goto c5i9U;
       u5iao: // global
           call _c5i9T(R1) args: 0, res: 0, upd: 0;
       c5i9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isNumber_info" {
     Data.Char.isNumber_info:
         const Data.Char.isNumber_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S5i8j_srt;
 },
 _c5i9T() //  [R1]
         { []
         }
     {offset
       c5i9T: // global
           I64[Sp] = block_c5ia1_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5i9T_info" {
     block_c5i9T_info:
         const _c5i9T;
         const 0;
         const 4294967326;
         const S5i8j_srt;
 },
 _c5ia1() //  [R1]
         { []
         }
     {offset
       c5ia1: // global
           _c5ial::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5ial::I64 >= 11) goto c5ia8; else goto u5iam;
       u5iam: // global
           if (_c5ial::I64 < 8) goto c5ia8; else goto u5ian;
       c5ia8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5ian: // global
           if (_c5ial::I64 != 9) goto c5iak; else goto c5iak;
       c5iak: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5ia1_info" {
     block_c5ia1_info:
         const _c5ia1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.570671318 UTC

[section ""data" . Data.Char.isSeparator_closure" {
     Data.Char.isSeparator_closure:
         const Data.Char.isSeparator_info;
         const 0;
 },
 Data.Char.isSeparator_entry() //  [R2]
         { []
         }
     {offset
       c5iaP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5iaQ; else goto c5iaR;
       c5iaQ: // global
           R2 = R2;
           R1 = Data.Char.isSeparator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5iaR: // global
           I64[Sp - 8] = block_c5iaM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ibh; else goto c5iaN;
       u5ibh: // global
           call _c5iaM(R1) args: 0, res: 0, upd: 0;
       c5iaN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.isSeparator_info" {
     Data.Char.isSeparator_info:
         const Data.Char.isSeparator_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const S5i8j_srt;
 },
 _c5iaM() //  [R1]
         { []
         }
     {offset
       c5iaM: // global
           I64[Sp] = block_c5iaU_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5iaM_info" {
     block_c5iaM_info:
         const _c5iaM;
         const 0;
         const 4294967326;
         const S5i8j_srt;
 },
 _c5iaU() //  [R1]
         { []
         }
     {offset
       c5iaU: // global
           _c5ibe::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5ibe::I64 >= 25) goto c5ib1; else goto u5ibf;
       u5ibf: // global
           if (_c5ibe::I64 < 22) goto c5ib1; else goto u5ibg;
       c5ib1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5ibg: // global
           if (_c5ibe::I64 != 23) goto c5ibd; else goto c5ibd;
       c5ibd: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5iaU_info" {
     block_c5iaU_info:
         const _c5iaU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.580949692 UTC

[section ""cstring" . Data.Char.$trModule4_bytes" {
     Data.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.584555409 UTC

[section ""data" . Data.Char.$trModule3_closure" {
     Data.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.587600981 UTC

[section ""cstring" . Data.Char.$trModule2_bytes" {
     Data.Char.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.590136916 UTC

[section ""data" . Data.Char.$trModule1_closure" {
     Data.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.592498566 UTC

[section ""data" . Data.Char.$trModule_closure" {
     Data.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Char.$trModule3_closure+1;
         const Data.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.595198879 UTC

[section ""data" . lvl_r5hRh_closure" {
     lvl_r5hRh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.597677115 UTC

[section ""cstring" . lvl1_r5hRi_bytes" {
     lvl1_r5hRi_bytes:
         I8[] [67,104,97,114,46,100,105,103,105,116,84,111,73,110,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.601445559 UTC

[section ""data" . Data.Char.$wlvl_closure" {
     Data.Char.$wlvl_closure:
         const Data.Char.$wlvl_info;
         const 0;
 },
 sat_s5i7m_entry() //  [R1]
         { []
         }
     {offset
       c5ibW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ibX; else goto c5ibY;
       c5ibX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ibY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r5hRh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s5i7m_info" {
     sat_s5i7m_info:
         const sat_s5i7m_entry;
         const 4294967296;
         const 4294967313;
         const S5i8j_srt+48;
 },
 sat_s5i7n_entry() //  [R1]
         { []
         }
     {offset
       c5ic2: // global
           _s5i7n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5ic3; else goto c5ic4;
       c5ic4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5ic6; else goto c5ic5;
       c5ic6: // global
           HpAlloc = 48;
           goto c5ic3;
       c5ic3: // global
           R1 = _s5i7n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ic5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5i7n::P64;
           _s5i7l::I64 = I64[_s5i7n::P64 + 16];
           if (_s5i7l::I64 != 39) goto c5ic0; else goto c5ic1;
       c5ic0: // global
           I64[Hp - 40] = sat_s5i7m_info;
           I64[Hp - 24] = _s5i7l::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5ic1: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s5i7n_info" {
     sat_s5i7n_info:
         const sat_s5i7n_entry;
         const 4294967296;
         const 12884901905;
         const S5i8j_srt+48;
 },
 Data.Char.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c5ica: // global
           _s5i7k::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5icb; else goto c5icc;
       c5icc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ice; else goto c5icd;
       c5ice: // global
           HpAlloc = 24;
           goto c5icb;
       c5icb: // global
           R2 = _s5i7k::I64;
           R1 = Data.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5icd: // global
           I64[Hp - 16] = sat_s5i7n_info;
           I64[Hp] = _s5i7k::I64;
           I64[Sp - 8] = block_c5ic8_info;
           R3 = Hp - 16;
           R2 = lvl1_r5hRi_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.$wlvl_info" {
     Data.Char.$wlvl_info:
         const Data.Char.$wlvl_entry;
         const 0;
         const 64424509454;
         const 4294967300;
         const S5i8j_srt+48;
 },
 _c5ic8() //  [R1]
         { []
         }
     {offset
       c5ic8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5ic8_info" {
     block_c5ic8_info:
         const _c5ic8;
         const 0;
         const 4294967326;
         const S5i8j_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.613933808 UTC

[section ""data" . Data.Char.$wdigitToInt_closure" {
     Data.Char.$wdigitToInt_closure:
         const Data.Char.$wdigitToInt_info;
         const 0;
 },
 Data.Char.$wdigitToInt_entry() //  [R2]
         { []
         }
     {offset
       c5icO: // global
           _s5i7q::I64 = R2 - 48;
           if (_s5i7q::I64 > 9) goto c5idA; else goto c5idB;
       c5idA: // global
           _s5i7u::I64 = R2 - 97;
           if (_s5i7u::I64 > 5) goto c5idv; else goto c5idy;
       c5idv: // global
           _s5i7y::I64 = R2 - 65;
           if (_s5i7y::I64 > 5) goto c5idp; else goto c5idt;
       c5idp: // global
           R2 = R2;
           call Data.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c5idt: // global
           R1 = _s5i7y::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5idy: // global
           R1 = _s5i7u::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5idB: // global
           R1 = _s5i7q::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.$wdigitToInt_info" {
     Data.Char.$wdigitToInt_info:
         const Data.Char.$wdigitToInt_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S5i8j_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.620704065 UTC

[section ""data" . Data.Char.digitToInt_closure" {
     Data.Char.digitToInt_closure:
         const Data.Char.digitToInt_info;
         const 0;
 },
 Data.Char.digitToInt_entry() //  [R2]
         { []
         }
     {offset
       c5idQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5idY; else goto c5idZ;
       c5idY: // global
           R2 = R2;
           R1 = Data.Char.digitToInt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5idZ: // global
           I64[Sp - 8] = block_c5idN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ie4; else goto c5idO;
       u5ie4: // global
           call _c5idN(R1) args: 0, res: 0, upd: 0;
       c5idO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Char.digitToInt_info" {
     Data.Char.digitToInt_info:
         const Data.Char.digitToInt_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S5i8j_srt+80;
 },
 _c5idN() //  [R1]
         { []
         }
     {offset
       c5idN: // global
           I64[Sp] = block_c5idT_info;
           R2 = I64[R1 + 7];
           call Data.Char.$wdigitToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c5idN_info" {
     block_c5idN_info:
         const _c5idN;
         const 0;
         const 4294967326;
         const S5i8j_srt+88;
 },
 _c5idT() //  [R1]
         { []
         }
     {offset
       c5idT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5ie3; else goto c5ie2;
       c5ie3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5ie2: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c5idT_info" {
     block_c5idT_info:
         const _c5idT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:17.630705079 UTC

[section ""relreadonly" . S5i8j_srt" {
     S5i8j_srt:
         const GHC.Unicode.$wgeneralCategory_closure;
         const Data.Char.$wisLetter_closure;
         const Data.Char.isLetter_closure;
         const Data.Char.isMark_closure;
         const Data.Char.isNumber_closure;
         const Data.Char.isSeparator_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Char.$wlvl_closure;
         const Data.Char.digitToInt_closure;
         const Data.Char.$wdigitToInt_closure;
 }]

