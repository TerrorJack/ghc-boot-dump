
==================== Output Cmm ====================
2018-03-16 16:00:17.270240969 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:17.271804142 UTC

[section ""data" . Data.Char.$wisLetter_closure" {
     Data.Char.$wisLetter_closure:
         const Data.Char.$wisLetter_info;
         const 0;
 },
 Data.Char.$wisLetter_entry() //  [R2]
         { info_tbl: [(c5hSc,
                       label: Data.Char.$wisLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hSc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hSd; else goto c5hSe;
       c5hSd: // global
           R2 = R2;
           R1 = Data.Char.$wisLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hSe: // global
           I64[Sp - 8] = block_c5hS2_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hS2() //  [R1]
         { info_tbl: [(c5hS2,
                       label: block_c5hS2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hS2: // global
           _c5hSb::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hSb::I64 < 4) goto u5hSx; else goto u5hSz;
       u5hSx: // global
           if (_c5hSb::I64 >= 3) goto c5hSa; else goto u5hSy;
       u5hSy: // global
           if (_c5hSb::I64 != 1) goto c5hSa; else goto c5hSa;
       u5hSz: // global
           if (_c5hSb::I64 < 5) goto c5hSa; else goto c5hS5;
       c5hSa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hS5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.273899387 UTC

[section ""data" . Data.Char.isLetter_closure" {
     Data.Char.isLetter_closure:
         const Data.Char.isLetter_info;
         const 0;
 },
 Data.Char.isLetter_entry() //  [R2]
         { info_tbl: [(c5hSI,
                       label: Data.Char.isLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hSI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hSJ; else goto c5hSK;
       c5hSJ: // global
           R2 = R2;
           R1 = Data.Char.isLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hSK: // global
           I64[Sp - 8] = block_c5hSF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hSO; else goto c5hSG;
       u5hSO: // global
           call _c5hSF(R1) args: 0, res: 0, upd: 0;
       c5hSG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hSF() //  [R1]
         { info_tbl: [(c5hSF,
                       label: block_c5hSF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hSF: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Data.Char.$wisLetter_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.275641912 UTC

[section ""data" . Data.Char.isMark_closure" {
     Data.Char.isMark_closure:
         const Data.Char.isMark_info;
         const 0;
 },
 Data.Char.isMark_entry() //  [R2]
         { info_tbl: [(c5hSW,
                       label: Data.Char.isMark_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hSW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hSX; else goto c5hSY;
       c5hSX: // global
           R2 = R2;
           R1 = Data.Char.isMark_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hSY: // global
           I64[Sp - 8] = block_c5hST_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hTo; else goto c5hSU;
       u5hTo: // global
           call _c5hST(R1) args: 0, res: 0, upd: 0;
       c5hSU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hST() //  [R1]
         { info_tbl: [(c5hST,
                       label: block_c5hST_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hST: // global
           I64[Sp] = block_c5hT1_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hT1() //  [R1]
         { info_tbl: [(c5hT1,
                       label: block_c5hT1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hT1: // global
           _c5hTl::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hTl::I64 >= 8) goto c5hT8; else goto u5hTm;
       u5hTm: // global
           if (_c5hTl::I64 < 5) goto c5hT8; else goto u5hTn;
       c5hT8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5hTn: // global
           if (_c5hTl::I64 != 6) goto c5hTk; else goto c5hTk;
       c5hTk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.277776936 UTC

[section ""data" . Data.Char.isNumber_closure" {
     Data.Char.isNumber_closure:
         const Data.Char.isNumber_info;
         const 0;
 },
 Data.Char.isNumber_entry() //  [R2]
         { info_tbl: [(c5hTw,
                       label: Data.Char.isNumber_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hTw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hTx; else goto c5hTy;
       c5hTx: // global
           R2 = R2;
           R1 = Data.Char.isNumber_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hTy: // global
           I64[Sp - 8] = block_c5hTt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hTY; else goto c5hTu;
       u5hTY: // global
           call _c5hTt(R1) args: 0, res: 0, upd: 0;
       c5hTu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hTt() //  [R1]
         { info_tbl: [(c5hTt,
                       label: block_c5hTt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hTt: // global
           I64[Sp] = block_c5hTB_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hTB() //  [R1]
         { info_tbl: [(c5hTB,
                       label: block_c5hTB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hTB: // global
           _c5hTV::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hTV::I64 >= 11) goto c5hTI; else goto u5hTW;
       u5hTW: // global
           if (_c5hTV::I64 < 8) goto c5hTI; else goto u5hTX;
       c5hTI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5hTX: // global
           if (_c5hTV::I64 != 9) goto c5hTU; else goto c5hTU;
       c5hTU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.279913028 UTC

[section ""data" . Data.Char.isSeparator_closure" {
     Data.Char.isSeparator_closure:
         const Data.Char.isSeparator_info;
         const 0;
 },
 Data.Char.isSeparator_entry() //  [R2]
         { info_tbl: [(c5hU6,
                       label: Data.Char.isSeparator_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hU6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hU7; else goto c5hU8;
       c5hU7: // global
           R2 = R2;
           R1 = Data.Char.isSeparator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hU8: // global
           I64[Sp - 8] = block_c5hU3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hUy; else goto c5hU4;
       u5hUy: // global
           call _c5hU3(R1) args: 0, res: 0, upd: 0;
       c5hU4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hU3() //  [R1]
         { info_tbl: [(c5hU3,
                       label: block_c5hU3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hU3: // global
           I64[Sp] = block_c5hUb_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hUb() //  [R1]
         { info_tbl: [(c5hUb,
                       label: block_c5hUb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hUb: // global
           _c5hUv::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hUv::I64 >= 25) goto c5hUi; else goto u5hUw;
       u5hUw: // global
           if (_c5hUv::I64 < 22) goto c5hUi; else goto u5hUx;
       c5hUi: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5hUx: // global
           if (_c5hUv::I64 != 23) goto c5hUu; else goto c5hUu;
       c5hUu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.281763365 UTC

[section ""cstring" . Data.Char.$trModule4_bytes" {
     Data.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.28252153 UTC

[section ""data" . Data.Char.$trModule3_closure" {
     Data.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.283262517 UTC

[section ""cstring" . Data.Char.$trModule2_bytes" {
     Data.Char.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.284042045 UTC

[section ""data" . Data.Char.$trModule1_closure" {
     Data.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.284770275 UTC

[section ""data" . Data.Char.$trModule_closure" {
     Data.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Char.$trModule3_closure+1;
         const Data.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.285575559 UTC

[section ""data" . lvl_r5hRh_closure" {
     lvl_r5hRh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.286336176 UTC

[section ""cstring" . lvl1_r5hRi_bytes" {
     lvl1_r5hRi_bytes:
         I8[] [67,104,97,114,46,100,105,103,105,116,84,111,73,110,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.287881652 UTC

[section ""data" . Data.Char.$wlvl_closure" {
     Data.Char.$wlvl_closure:
         const Data.Char.$wlvl_info;
         const 0;
 },
 sat_s5hRD_entry() //  [R1]
         { info_tbl: [(c5hUN,
                       label: sat_s5hRD_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hUN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hUO; else goto c5hUP;
       c5hUO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hUP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r5hRh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5hRE_entry() //  [R1]
         { info_tbl: [(c5hUT,
                       label: sat_s5hRE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hUT: // global
           _s5hRE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5hUU; else goto c5hUV;
       c5hUV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hUX; else goto c5hUW;
       c5hUX: // global
           HpAlloc = 48;
           goto c5hUU;
       c5hUU: // global
           R1 = _s5hRE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hUW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5hRE::P64;
           _s5hRC::I64 = I64[_s5hRE::P64 + 16];
           if (_s5hRC::I64 != 39) goto c5hUR; else goto c5hUS;
       c5hUR: // global
           I64[Hp - 40] = sat_s5hRD_info;
           I64[Hp - 24] = _s5hRC::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5hUS: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Char.$wlvl_entry() //  [R2]
         { info_tbl: [(c5hV1,
                       label: Data.Char.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hV1: // global
           _s5hRB::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5hV2; else goto c5hV3;
       c5hV3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5hV5; else goto c5hV4;
       c5hV5: // global
           HpAlloc = 24;
           goto c5hV2;
       c5hV2: // global
           R2 = _s5hRB::I64;
           R1 = Data.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hV4: // global
           I64[Hp - 16] = sat_s5hRE_info;
           I64[Hp] = _s5hRB::I64;
           I64[Sp - 8] = block_c5hUZ_info;
           R3 = Hp - 16;
           R2 = lvl1_r5hRi_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hUZ() //  [R1]
         { info_tbl: [(c5hUZ,
                       label: block_c5hUZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hUZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.290685294 UTC

[section ""data" . Data.Char.$wdigitToInt_closure" {
     Data.Char.$wdigitToInt_closure:
         const Data.Char.$wdigitToInt_info;
         const 0;
 },
 Data.Char.$wdigitToInt_entry() //  [R2]
         { info_tbl: [(c5hVf,
                       label: Data.Char.$wdigitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hVf: // global
           _s5hRH::I64 = R2 - 48;
           if (_s5hRH::I64 > 9) goto c5hW1; else goto c5hW2;
       c5hW1: // global
           _s5hRL::I64 = R2 - 97;
           if (_s5hRL::I64 > 5) goto c5hVW; else goto c5hVZ;
       c5hVW: // global
           _s5hRP::I64 = R2 - 65;
           if (_s5hRP::I64 > 5) goto c5hVQ; else goto c5hVU;
       c5hVQ: // global
           R2 = R2;
           call Data.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c5hVU: // global
           R1 = _s5hRP::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hVZ: // global
           R1 = _s5hRL::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hW2: // global
           R1 = _s5hRH::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.292291243 UTC

[section ""data" . Data.Char.digitToInt_closure" {
     Data.Char.digitToInt_closure:
         const Data.Char.digitToInt_info;
         const 0;
 },
 Data.Char.digitToInt_entry() //  [R2]
         { info_tbl: [(c5hWa,
                       label: Data.Char.digitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hWa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hWi; else goto c5hWj;
       c5hWi: // global
           R2 = R2;
           R1 = Data.Char.digitToInt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hWj: // global
           I64[Sp - 8] = block_c5hW7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hWo; else goto c5hW8;
       u5hWo: // global
           call _c5hW7(R1) args: 0, res: 0, upd: 0;
       c5hW8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hW7() //  [R1]
         { info_tbl: [(c5hW7,
                       label: block_c5hW7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hW7: // global
           I64[Sp] = block_c5hWd_info;
           R2 = I64[R1 + 7];
           call Data.Char.$wdigitToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hWd() //  [R1]
         { info_tbl: [(c5hWd,
                       label: block_c5hWd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hWd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hWn; else goto c5hWm;
       c5hWn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5hWm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.294022103 UTC

[section ""relreadonly" . S5hSA_srt" {
     S5hSA_srt:
         const GHC.Unicode.$wgeneralCategory_closure;
         const Data.Char.$wisLetter_closure;
         const Data.Char.isLetter_closure;
         const Data.Char.isMark_closure;
         const Data.Char.isNumber_closure;
         const Data.Char.isSeparator_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Char.$wlvl_closure;
         const Data.Char.digitToInt_closure;
         const Data.Char.$wdigitToInt_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.29486926 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:17.295998299 UTC

[section ""data" . Data.Char.$wisLetter_closure" {
     Data.Char.$wisLetter_closure:
         const Data.Char.$wisLetter_info;
         const 0;
 },
 Data.Char.$wisLetter_entry() //  [R2]
         { info_tbl: [(c5hWD,
                       label: Data.Char.$wisLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hWD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hWE; else goto c5hWF;
       c5hWE: // global
           R2 = R2;
           R1 = Data.Char.$wisLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hWF: // global
           I64[Sp - 8] = block_c5hWt_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hWt() //  [R1]
         { info_tbl: [(c5hWt,
                       label: block_c5hWt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hWt: // global
           _c5hWC::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hWC::I64 < 4) goto u5hWY; else goto u5hX0;
       u5hWY: // global
           if (_c5hWC::I64 >= 3) goto c5hWB; else goto u5hWZ;
       u5hWZ: // global
           if (_c5hWC::I64 != 1) goto c5hWB; else goto c5hWB;
       u5hX0: // global
           if (_c5hWC::I64 < 5) goto c5hWB; else goto c5hWw;
       c5hWB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hWw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.29785127 UTC

[section ""data" . Data.Char.isLetter_closure" {
     Data.Char.isLetter_closure:
         const Data.Char.isLetter_info;
         const 0;
 },
 Data.Char.isLetter_entry() //  [R2]
         { info_tbl: [(c5hX8,
                       label: Data.Char.isLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hX8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hX9; else goto c5hXa;
       c5hX9: // global
           R2 = R2;
           R1 = Data.Char.isLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hXa: // global
           I64[Sp - 8] = block_c5hX5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hXe; else goto c5hX6;
       u5hXe: // global
           call _c5hX5(R1) args: 0, res: 0, upd: 0;
       c5hX6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hX5() //  [R1]
         { info_tbl: [(c5hX5,
                       label: block_c5hX5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hX5: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Data.Char.$wisLetter_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.29977723 UTC

[section ""data" . Data.Char.isMark_closure" {
     Data.Char.isMark_closure:
         const Data.Char.isMark_info;
         const 0;
 },
 Data.Char.isMark_entry() //  [R2]
         { info_tbl: [(c5hXm,
                       label: Data.Char.isMark_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hXm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hXn; else goto c5hXo;
       c5hXn: // global
           R2 = R2;
           R1 = Data.Char.isMark_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hXo: // global
           I64[Sp - 8] = block_c5hXj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hXO; else goto c5hXk;
       u5hXO: // global
           call _c5hXj(R1) args: 0, res: 0, upd: 0;
       c5hXk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hXj() //  [R1]
         { info_tbl: [(c5hXj,
                       label: block_c5hXj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hXj: // global
           I64[Sp] = block_c5hXr_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hXr() //  [R1]
         { info_tbl: [(c5hXr,
                       label: block_c5hXr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hXr: // global
           _c5hXL::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hXL::I64 >= 8) goto c5hXy; else goto u5hXM;
       u5hXM: // global
           if (_c5hXL::I64 < 5) goto c5hXy; else goto u5hXN;
       c5hXy: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5hXN: // global
           if (_c5hXL::I64 != 6) goto c5hXK; else goto c5hXK;
       c5hXK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.301954579 UTC

[section ""data" . Data.Char.isNumber_closure" {
     Data.Char.isNumber_closure:
         const Data.Char.isNumber_info;
         const 0;
 },
 Data.Char.isNumber_entry() //  [R2]
         { info_tbl: [(c5hXW,
                       label: Data.Char.isNumber_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hXW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hXX; else goto c5hXY;
       c5hXX: // global
           R2 = R2;
           R1 = Data.Char.isNumber_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hXY: // global
           I64[Sp - 8] = block_c5hXT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hYo; else goto c5hXU;
       u5hYo: // global
           call _c5hXT(R1) args: 0, res: 0, upd: 0;
       c5hXU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hXT() //  [R1]
         { info_tbl: [(c5hXT,
                       label: block_c5hXT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hXT: // global
           I64[Sp] = block_c5hY1_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hY1() //  [R1]
         { info_tbl: [(c5hY1,
                       label: block_c5hY1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hY1: // global
           _c5hYl::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hYl::I64 >= 11) goto c5hY8; else goto u5hYm;
       u5hYm: // global
           if (_c5hYl::I64 < 8) goto c5hY8; else goto u5hYn;
       c5hY8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5hYn: // global
           if (_c5hYl::I64 != 9) goto c5hYk; else goto c5hYk;
       c5hYk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.304178251 UTC

[section ""data" . Data.Char.isSeparator_closure" {
     Data.Char.isSeparator_closure:
         const Data.Char.isSeparator_info;
         const 0;
 },
 Data.Char.isSeparator_entry() //  [R2]
         { info_tbl: [(c5hYw,
                       label: Data.Char.isSeparator_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hYw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hYx; else goto c5hYy;
       c5hYx: // global
           R2 = R2;
           R1 = Data.Char.isSeparator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hYy: // global
           I64[Sp - 8] = block_c5hYt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hYY; else goto c5hYu;
       u5hYY: // global
           call _c5hYt(R1) args: 0, res: 0, upd: 0;
       c5hYu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hYt() //  [R1]
         { info_tbl: [(c5hYt,
                       label: block_c5hYt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hYt: // global
           I64[Sp] = block_c5hYB_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hYB() //  [R1]
         { info_tbl: [(c5hYB,
                       label: block_c5hYB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hYB: // global
           _c5hYV::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5hYV::I64 >= 25) goto c5hYI; else goto u5hYW;
       u5hYW: // global
           if (_c5hYV::I64 < 22) goto c5hYI; else goto u5hYX;
       c5hYI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5hYX: // global
           if (_c5hYV::I64 != 23) goto c5hYU; else goto c5hYU;
       c5hYU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.305985189 UTC

[section ""cstring" . Data.Char.$trModule4_bytes" {
     Data.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.306739989 UTC

[section ""data" . Data.Char.$trModule3_closure" {
     Data.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.307470429 UTC

[section ""cstring" . Data.Char.$trModule2_bytes" {
     Data.Char.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.308195249 UTC

[section ""data" . Data.Char.$trModule1_closure" {
     Data.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.308980695 UTC

[section ""data" . Data.Char.$trModule_closure" {
     Data.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Char.$trModule3_closure+1;
         const Data.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.30989863 UTC

[section ""data" . lvl_r5hRh_closure" {
     lvl_r5hRh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.310715815 UTC

[section ""cstring" . lvl1_r5hRi_bytes" {
     lvl1_r5hRi_bytes:
         I8[] [67,104,97,114,46,100,105,103,105,116,84,111,73,110,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.312259558 UTC

[section ""data" . Data.Char.$wlvl_closure" {
     Data.Char.$wlvl_closure:
         const Data.Char.$wlvl_info;
         const 0;
 },
 sat_s5hRD_entry() //  [R1]
         { info_tbl: [(c5hZd,
                       label: sat_s5hRD_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hZd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hZe; else goto c5hZf;
       c5hZe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hZf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r5hRh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5hRE_entry() //  [R1]
         { info_tbl: [(c5hZj,
                       label: sat_s5hRE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hZj: // global
           _s5hRE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5hZk; else goto c5hZl;
       c5hZl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hZn; else goto c5hZm;
       c5hZn: // global
           HpAlloc = 48;
           goto c5hZk;
       c5hZk: // global
           R1 = _s5hRE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5hRE::P64;
           _s5hRC::I64 = I64[_s5hRE::P64 + 16];
           if (_s5hRC::I64 != 39) goto c5hZh; else goto c5hZi;
       c5hZh: // global
           I64[Hp - 40] = sat_s5hRD_info;
           I64[Hp - 24] = _s5hRC::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5hZi: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Char.$wlvl_entry() //  [R2]
         { info_tbl: [(c5hZr,
                       label: Data.Char.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hZr: // global
           _s5hRB::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5hZs; else goto c5hZt;
       c5hZt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5hZv; else goto c5hZu;
       c5hZv: // global
           HpAlloc = 24;
           goto c5hZs;
       c5hZs: // global
           R2 = _s5hRB::I64;
           R1 = Data.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hZu: // global
           I64[Hp - 16] = sat_s5hRE_info;
           I64[Hp] = _s5hRB::I64;
           I64[Sp - 8] = block_c5hZp_info;
           R3 = Hp - 16;
           R2 = lvl1_r5hRi_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hZp() //  [R1]
         { info_tbl: [(c5hZp,
                       label: block_c5hZp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hZp: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.315740258 UTC

[section ""data" . Data.Char.$wdigitToInt_closure" {
     Data.Char.$wdigitToInt_closure:
         const Data.Char.$wdigitToInt_info;
         const 0;
 },
 Data.Char.$wdigitToInt_entry() //  [R2]
         { info_tbl: [(c5hZF,
                       label: Data.Char.$wdigitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hZF: // global
           _s5hRH::I64 = R2 - 48;
           if (_s5hRH::I64 > 9) goto c5i0r; else goto c5i0s;
       c5i0r: // global
           _s5hRL::I64 = R2 - 97;
           if (_s5hRL::I64 > 5) goto c5i0m; else goto c5i0p;
       c5i0m: // global
           _s5hRP::I64 = R2 - 65;
           if (_s5hRP::I64 > 5) goto c5i0g; else goto c5i0k;
       c5i0g: // global
           R2 = R2;
           call Data.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c5i0k: // global
           R1 = _s5hRP::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i0p: // global
           R1 = _s5hRL::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i0s: // global
           R1 = _s5hRH::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.318548899 UTC

[section ""data" . Data.Char.digitToInt_closure" {
     Data.Char.digitToInt_closure:
         const Data.Char.digitToInt_info;
         const 0;
 },
 Data.Char.digitToInt_entry() //  [R2]
         { info_tbl: [(c5i0A,
                       label: Data.Char.digitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i0A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i0I; else goto c5i0J;
       c5i0I: // global
           R2 = R2;
           R1 = Data.Char.digitToInt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i0J: // global
           I64[Sp - 8] = block_c5i0x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i0O; else goto c5i0y;
       u5i0O: // global
           call _c5i0x(R1) args: 0, res: 0, upd: 0;
       c5i0y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i0x() //  [R1]
         { info_tbl: [(c5i0x,
                       label: block_c5i0x_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i0x: // global
           I64[Sp] = block_c5i0D_info;
           R2 = I64[R1 + 7];
           call Data.Char.$wdigitToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i0D() //  [R1]
         { info_tbl: [(c5i0D,
                       label: block_c5i0D_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i0D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5i0N; else goto c5i0M;
       c5i0N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5i0M: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.32019968 UTC

[section ""relreadonly" . S5hSA_srt" {
     S5hSA_srt:
         const GHC.Unicode.$wgeneralCategory_closure;
         const Data.Char.$wisLetter_closure;
         const Data.Char.isLetter_closure;
         const Data.Char.isMark_closure;
         const Data.Char.isNumber_closure;
         const Data.Char.isSeparator_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Char.$wlvl_closure;
         const Data.Char.digitToInt_closure;
         const Data.Char.$wdigitToInt_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.321181859 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:17.323265403 UTC

[section ""data" . Data.Char.$wisLetter_closure" {
     Data.Char.$wisLetter_closure:
         const Data.Char.$wisLetter_info;
         const 0;
 },
 Data.Char.$wisLetter_entry() //  [R2]
         { info_tbl: [(c5i13,
                       label: Data.Char.$wisLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i13: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i14; else goto c5i15;
       c5i14: // global
           R2 = R2;
           R1 = Data.Char.$wisLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i15: // global
           I64[Sp - 8] = block_c5i0T_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i0T() //  [R1]
         { info_tbl: [(c5i0T,
                       label: block_c5i0T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i0T: // global
           _c5i12::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i12::I64 < 4) goto u5i1o; else goto u5i1q;
       u5i1o: // global
           if (_c5i12::I64 >= 3) goto c5i11; else goto u5i1p;
       u5i1p: // global
           if (_c5i12::I64 != 1) goto c5i11; else goto c5i11;
       u5i1q: // global
           if (_c5i12::I64 < 5) goto c5i11; else goto c5i0W;
       c5i11: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i0W: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.32945397 UTC

[section ""data" . Data.Char.isLetter_closure" {
     Data.Char.isLetter_closure:
         const Data.Char.isLetter_info;
         const 0;
 },
 Data.Char.isLetter_entry() //  [R2]
         { info_tbl: [(c5i1J,
                       label: Data.Char.isLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i1J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i1K; else goto c5i1L;
       c5i1K: // global
           R2 = R2;
           R1 = Data.Char.isLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i1L: // global
           I64[Sp - 8] = block_c5i1G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i1P; else goto c5i1H;
       u5i1P: // global
           call _c5i1G(R1) args: 0, res: 0, upd: 0;
       c5i1H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i1G() //  [R1]
         { info_tbl: [(c5i1G,
                       label: block_c5i1G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i1G: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Data.Char.$wisLetter_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.335636645 UTC

[section ""data" . Data.Char.isMark_closure" {
     Data.Char.isMark_closure:
         const Data.Char.isMark_info;
         const 0;
 },
 Data.Char.isMark_entry() //  [R2]
         { info_tbl: [(c5i26,
                       label: Data.Char.isMark_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i26: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i27; else goto c5i28;
       c5i27: // global
           R2 = R2;
           R1 = Data.Char.isMark_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i28: // global
           I64[Sp - 8] = block_c5i23_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i2y; else goto c5i24;
       u5i2y: // global
           call _c5i23(R1) args: 0, res: 0, upd: 0;
       c5i24: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i23() //  [R1]
         { info_tbl: [(c5i23,
                       label: block_c5i23_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i23: // global
           I64[Sp] = block_c5i2b_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i2b() //  [R1]
         { info_tbl: [(c5i2b,
                       label: block_c5i2b_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i2b: // global
           _c5i2v::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i2v::I64 >= 8) goto c5i2i; else goto u5i2w;
       u5i2w: // global
           if (_c5i2v::I64 < 5) goto c5i2i; else goto u5i2x;
       c5i2i: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i2x: // global
           if (_c5i2v::I64 != 6) goto c5i2u; else goto c5i2u;
       c5i2u: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.343804612 UTC

[section ""data" . Data.Char.isNumber_closure" {
     Data.Char.isNumber_closure:
         const Data.Char.isNumber_info;
         const 0;
 },
 Data.Char.isNumber_entry() //  [R2]
         { info_tbl: [(c5i2V,
                       label: Data.Char.isNumber_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i2V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i2W; else goto c5i2X;
       c5i2W: // global
           R2 = R2;
           R1 = Data.Char.isNumber_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i2X: // global
           I64[Sp - 8] = block_c5i2S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i3n; else goto c5i2T;
       u5i3n: // global
           call _c5i2S(R1) args: 0, res: 0, upd: 0;
       c5i2T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i2S() //  [R1]
         { info_tbl: [(c5i2S,
                       label: block_c5i2S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i2S: // global
           I64[Sp] = block_c5i30_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i30() //  [R1]
         { info_tbl: [(c5i30,
                       label: block_c5i30_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i30: // global
           _c5i3k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i3k::I64 >= 11) goto c5i37; else goto u5i3l;
       u5i3l: // global
           if (_c5i3k::I64 < 8) goto c5i37; else goto u5i3m;
       c5i37: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i3m: // global
           if (_c5i3k::I64 != 9) goto c5i3j; else goto c5i3j;
       c5i3j: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.351954738 UTC

[section ""data" . Data.Char.isSeparator_closure" {
     Data.Char.isSeparator_closure:
         const Data.Char.isSeparator_info;
         const 0;
 },
 Data.Char.isSeparator_entry() //  [R2]
         { info_tbl: [(c5i3K,
                       label: Data.Char.isSeparator_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i3K: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i3L; else goto c5i3M;
       c5i3L: // global
           R2 = R2;
           R1 = Data.Char.isSeparator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i3M: // global
           I64[Sp - 8] = block_c5i3H_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i4c; else goto c5i3I;
       u5i4c: // global
           call _c5i3H(R1) args: 0, res: 0, upd: 0;
       c5i3I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i3H() //  [R1]
         { info_tbl: [(c5i3H,
                       label: block_c5i3H_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i3H: // global
           I64[Sp] = block_c5i3P_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i3P() //  [R1]
         { info_tbl: [(c5i3P,
                       label: block_c5i3P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i3P: // global
           _c5i49::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i49::I64 >= 25) goto c5i3W; else goto u5i4a;
       u5i4a: // global
           if (_c5i49::I64 < 22) goto c5i3W; else goto u5i4b;
       c5i3W: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i4b: // global
           if (_c5i49::I64 != 23) goto c5i48; else goto c5i48;
       c5i48: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.36097268 UTC

[section ""cstring" . Data.Char.$trModule4_bytes" {
     Data.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.362811145 UTC

[section ""data" . Data.Char.$trModule3_closure" {
     Data.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.364380336 UTC

[section ""cstring" . Data.Char.$trModule2_bytes" {
     Data.Char.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.366412486 UTC

[section ""data" . Data.Char.$trModule1_closure" {
     Data.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.368068129 UTC

[section ""data" . Data.Char.$trModule_closure" {
     Data.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Char.$trModule3_closure+1;
         const Data.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.369905527 UTC

[section ""data" . lvl_r5hRh_closure" {
     lvl_r5hRh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.371634288 UTC

[section ""cstring" . lvl1_r5hRi_bytes" {
     lvl1_r5hRi_bytes:
         I8[] [67,104,97,114,46,100,105,103,105,116,84,111,73,110,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.374071209 UTC

[section ""data" . Data.Char.$wlvl_closure" {
     Data.Char.$wlvl_closure:
         const Data.Char.$wlvl_info;
         const 0;
 },
 sat_s5hRD_entry() //  [R1]
         { info_tbl: [(c5i4N,
                       label: sat_s5hRD_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i4N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5i4O; else goto c5i4P;
       c5i4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5i4P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r5hRh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5hRE_entry() //  [R1]
         { info_tbl: [(c5i4T,
                       label: sat_s5hRE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i4T: // global
           _s5hRE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5i4U; else goto c5i4V;
       c5i4V: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5i4X; else goto c5i4W;
       c5i4X: // global
           HpAlloc = 48;
           goto c5i4U;
       c5i4U: // global
           R1 = _s5hRE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5i4W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5hRE::P64;
           _s5hRC::I64 = I64[_s5hRE::P64 + 16];
           if (_s5hRC::I64 != 39) goto c5i4R; else goto c5i4S;
       c5i4R: // global
           I64[Hp - 40] = sat_s5hRD_info;
           I64[Hp - 24] = _s5hRC::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5i4S: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Char.$wlvl_entry() //  [R2]
         { info_tbl: [(c5i51,
                       label: Data.Char.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i51: // global
           _s5hRB::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5i52; else goto c5i53;
       c5i53: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5i55; else goto c5i54;
       c5i55: // global
           HpAlloc = 24;
           goto c5i52;
       c5i52: // global
           R2 = _s5hRB::I64;
           R1 = Data.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i54: // global
           I64[Hp - 16] = sat_s5hRE_info;
           I64[Hp] = _s5hRB::I64;
           I64[Sp - 8] = block_c5i4Z_info;
           R3 = Hp - 16;
           R2 = lvl1_r5hRi_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i4Z() //  [R1]
         { info_tbl: [(c5i4Z,
                       label: block_c5i4Z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i4Z: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.38461057 UTC

[section ""data" . Data.Char.$wdigitToInt_closure" {
     Data.Char.$wdigitToInt_closure:
         const Data.Char.$wdigitToInt_info;
         const 0;
 },
 Data.Char.$wdigitToInt_entry() //  [R2]
         { info_tbl: [(c5i5y,
                       label: Data.Char.$wdigitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i5y: // global
           _s5hRH::I64 = R2 - 48;
           if (_s5hRH::I64 > 9) goto c5i6k; else goto c5i6l;
       c5i6k: // global
           _s5hRL::I64 = R2 - 97;
           if (_s5hRL::I64 > 5) goto c5i6f; else goto c5i6i;
       c5i6f: // global
           _s5hRP::I64 = R2 - 65;
           if (_s5hRP::I64 > 5) goto c5i69; else goto c5i6d;
       c5i69: // global
           R2 = R2;
           call Data.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c5i6d: // global
           R1 = _s5hRP::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i6i: // global
           R1 = _s5hRL::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i6l: // global
           R1 = _s5hRH::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.389400494 UTC

[section ""data" . Data.Char.digitToInt_closure" {
     Data.Char.digitToInt_closure:
         const Data.Char.digitToInt_info;
         const 0;
 },
 Data.Char.digitToInt_entry() //  [R2]
         { info_tbl: [(c5i6A,
                       label: Data.Char.digitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i6A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i6I; else goto c5i6J;
       c5i6I: // global
           R2 = R2;
           R1 = Data.Char.digitToInt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i6J: // global
           I64[Sp - 8] = block_c5i6x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i6O; else goto c5i6y;
       u5i6O: // global
           call _c5i6x(R1) args: 0, res: 0, upd: 0;
       c5i6y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i6x() //  [R1]
         { info_tbl: [(c5i6x,
                       label: block_c5i6x_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i6x: // global
           I64[Sp] = block_c5i6D_info;
           R2 = I64[R1 + 7];
           call Data.Char.$wdigitToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i6D() //  [R1]
         { info_tbl: [(c5i6D,
                       label: block_c5i6D_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i6D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5i6N; else goto c5i6M;
       c5i6N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5i6M: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.397117446 UTC

[section ""relreadonly" . S5hSA_srt" {
     S5hSA_srt:
         const GHC.Unicode.$wgeneralCategory_closure;
         const Data.Char.$wisLetter_closure;
         const Data.Char.isLetter_closure;
         const Data.Char.isMark_closure;
         const Data.Char.isNumber_closure;
         const Data.Char.isSeparator_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Char.$wlvl_closure;
         const Data.Char.digitToInt_closure;
         const Data.Char.$wdigitToInt_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.522740355 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:17.524713105 UTC

[section ""data" . Data.Char.$wisLetter_closure" {
     Data.Char.$wisLetter_closure:
         const Data.Char.$wisLetter_info;
         const 0;
 },
 Data.Char.$wisLetter_entry() //  [R2]
         { info_tbl: [(c5i7V,
                       label: Data.Char.$wisLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i7V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i7W; else goto c5i7X;
       c5i7W: // global
           R2 = R2;
           R1 = Data.Char.$wisLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i7X: // global
           I64[Sp - 8] = block_c5i7L_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i7L() //  [R1]
         { info_tbl: [(c5i7L,
                       label: block_c5i7L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i7L: // global
           _c5i7U::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i7U::I64 < 4) goto u5i8g; else goto u5i8i;
       u5i8g: // global
           if (_c5i7U::I64 >= 3) goto c5i7T; else goto u5i8h;
       u5i8h: // global
           if (_c5i7U::I64 != 1) goto c5i7T; else goto c5i7T;
       u5i8i: // global
           if (_c5i7U::I64 < 5) goto c5i7T; else goto c5i7O;
       c5i7T: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5i7O: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.534579955 UTC

[section ""data" . Data.Char.isLetter_closure" {
     Data.Char.isLetter_closure:
         const Data.Char.isLetter_info;
         const 0;
 },
 Data.Char.isLetter_entry() //  [R2]
         { info_tbl: [(c5i8F,
                       label: Data.Char.isLetter_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i8F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i8G; else goto c5i8H;
       c5i8G: // global
           R2 = R2;
           R1 = Data.Char.isLetter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i8H: // global
           I64[Sp - 8] = block_c5i8C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i8L; else goto c5i8D;
       u5i8L: // global
           call _c5i8C(R1) args: 0, res: 0, upd: 0;
       c5i8D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i8C() //  [R1]
         { info_tbl: [(c5i8C,
                       label: block_c5i8C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i8C: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Data.Char.$wisLetter_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.543349342 UTC

[section ""data" . Data.Char.isMark_closure" {
     Data.Char.isMark_closure:
         const Data.Char.isMark_info;
         const 0;
 },
 Data.Char.isMark_entry() //  [R2]
         { info_tbl: [(c5i93,
                       label: Data.Char.isMark_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i93: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i94; else goto c5i95;
       c5i94: // global
           R2 = R2;
           R1 = Data.Char.isMark_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i95: // global
           I64[Sp - 8] = block_c5i90_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5i9v; else goto c5i91;
       u5i9v: // global
           call _c5i90(R1) args: 0, res: 0, upd: 0;
       c5i91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i90() //  [R1]
         { info_tbl: [(c5i90,
                       label: block_c5i90_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i90: // global
           I64[Sp] = block_c5i98_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5i98() //  [R1]
         { info_tbl: [(c5i98,
                       label: block_c5i98_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i98: // global
           _c5i9s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5i9s::I64 >= 8) goto c5i9f; else goto u5i9t;
       u5i9t: // global
           if (_c5i9s::I64 < 5) goto c5i9f; else goto u5i9u;
       c5i9f: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5i9u: // global
           if (_c5i9s::I64 != 6) goto c5i9r; else goto c5i9r;
       c5i9r: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.555727147 UTC

[section ""data" . Data.Char.isNumber_closure" {
     Data.Char.isNumber_closure:
         const Data.Char.isNumber_info;
         const 0;
 },
 Data.Char.isNumber_entry() //  [R2]
         { info_tbl: [(c5i9W,
                       label: Data.Char.isNumber_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i9W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5i9X; else goto c5i9Y;
       c5i9X: // global
           R2 = R2;
           R1 = Data.Char.isNumber_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5i9Y: // global
           I64[Sp - 8] = block_c5i9T_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5iao; else goto c5i9U;
       u5iao: // global
           call _c5i9T(R1) args: 0, res: 0, upd: 0;
       c5i9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5i9T() //  [R1]
         { info_tbl: [(c5i9T,
                       label: block_c5i9T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5i9T: // global
           I64[Sp] = block_c5ia1_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ia1() //  [R1]
         { info_tbl: [(c5ia1,
                       label: block_c5ia1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ia1: // global
           _c5ial::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5ial::I64 >= 11) goto c5ia8; else goto u5iam;
       u5iam: // global
           if (_c5ial::I64 < 8) goto c5ia8; else goto u5ian;
       c5ia8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5ian: // global
           if (_c5ial::I64 != 9) goto c5iak; else goto c5iak;
       c5iak: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.568533999 UTC

[section ""data" . Data.Char.isSeparator_closure" {
     Data.Char.isSeparator_closure:
         const Data.Char.isSeparator_info;
         const 0;
 },
 Data.Char.isSeparator_entry() //  [R2]
         { info_tbl: [(c5iaP,
                       label: Data.Char.isSeparator_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5iaP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5iaQ; else goto c5iaR;
       c5iaQ: // global
           R2 = R2;
           R1 = Data.Char.isSeparator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5iaR: // global
           I64[Sp - 8] = block_c5iaM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ibh; else goto c5iaN;
       u5ibh: // global
           call _c5iaM(R1) args: 0, res: 0, upd: 0;
       c5iaN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5iaM() //  [R1]
         { info_tbl: [(c5iaM,
                       label: block_c5iaM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5iaM: // global
           I64[Sp] = block_c5iaU_info;
           R2 = I64[R1 + 7];
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5iaU() //  [R1]
         { info_tbl: [(c5iaU,
                       label: block_c5iaU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5iaU: // global
           _c5ibe::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c5ibe::I64 >= 25) goto c5ib1; else goto u5ibf;
       u5ibf: // global
           if (_c5ibe::I64 < 22) goto c5ib1; else goto u5ibg;
       c5ib1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u5ibg: // global
           if (_c5ibe::I64 != 23) goto c5ibd; else goto c5ibd;
       c5ibd: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.580026654 UTC

[section ""cstring" . Data.Char.$trModule4_bytes" {
     Data.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.583755178 UTC

[section ""data" . Data.Char.$trModule3_closure" {
     Data.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.586795885 UTC

[section ""cstring" . Data.Char.$trModule2_bytes" {
     Data.Char.$trModule2_bytes:
         I8[] [68,97,116,97,46,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.589223176 UTC

[section ""data" . Data.Char.$trModule1_closure" {
     Data.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Char.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.591613884 UTC

[section ""data" . Data.Char.$trModule_closure" {
     Data.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Char.$trModule3_closure+1;
         const Data.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.594294211 UTC

[section ""data" . lvl_r5hRh_closure" {
     lvl_r5hRh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.596862959 UTC

[section ""cstring" . lvl1_r5hRi_bytes" {
     lvl1_r5hRi_bytes:
         I8[] [67,104,97,114,46,100,105,103,105,116,84,111,73,110,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.599596285 UTC

[section ""data" . Data.Char.$wlvl_closure" {
     Data.Char.$wlvl_closure:
         const Data.Char.$wlvl_info;
         const 0;
 },
 sat_s5i7m_entry() //  [R1]
         { info_tbl: [(c5ibW,
                       label: sat_s5i7m_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ibW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ibX; else goto c5ibY;
       c5ibX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ibY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r5hRh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5i7n_entry() //  [R1]
         { info_tbl: [(c5ic2,
                       label: sat_s5i7n_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ic2: // global
           _s5i7n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5ic3; else goto c5ic4;
       c5ic4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5ic6; else goto c5ic5;
       c5ic6: // global
           HpAlloc = 48;
           goto c5ic3;
       c5ic3: // global
           R1 = _s5i7n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ic5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5i7n::P64;
           _s5i7l::I64 = I64[_s5i7n::P64 + 16];
           if (_s5i7l::I64 != 39) goto c5ic0; else goto c5ic1;
       c5ic0: // global
           I64[Hp - 40] = sat_s5i7m_info;
           I64[Hp - 24] = _s5i7l::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5ic1: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Char.$wlvl_entry() //  [R2]
         { info_tbl: [(c5ica,
                       label: Data.Char.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ica: // global
           _s5i7k::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5icb; else goto c5icc;
       c5icc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ice; else goto c5icd;
       c5ice: // global
           HpAlloc = 24;
           goto c5icb;
       c5icb: // global
           R2 = _s5i7k::I64;
           R1 = Data.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5icd: // global
           I64[Hp - 16] = sat_s5i7n_info;
           I64[Hp] = _s5i7k::I64;
           I64[Sp - 8] = block_c5ic8_info;
           R3 = Hp - 16;
           R2 = lvl1_r5hRi_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ic8() //  [R1]
         { info_tbl: [(c5ic8,
                       label: block_c5ic8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ic8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.611923007 UTC

[section ""data" . Data.Char.$wdigitToInt_closure" {
     Data.Char.$wdigitToInt_closure:
         const Data.Char.$wdigitToInt_info;
         const 0;
 },
 Data.Char.$wdigitToInt_entry() //  [R2]
         { info_tbl: [(c5icO,
                       label: Data.Char.$wdigitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5icO: // global
           _s5i7q::I64 = R2 - 48;
           if (_s5i7q::I64 > 9) goto c5idA; else goto c5idB;
       c5idA: // global
           _s5i7u::I64 = R2 - 97;
           if (_s5i7u::I64 > 5) goto c5idv; else goto c5idy;
       c5idv: // global
           _s5i7y::I64 = R2 - 65;
           if (_s5i7y::I64 > 5) goto c5idp; else goto c5idt;
       c5idp: // global
           R2 = R2;
           call Data.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c5idt: // global
           R1 = _s5i7y::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5idy: // global
           R1 = _s5i7u::I64 + 10;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5idB: // global
           R1 = _s5i7q::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.618889135 UTC

[section ""data" . Data.Char.digitToInt_closure" {
     Data.Char.digitToInt_closure:
         const Data.Char.digitToInt_info;
         const 0;
 },
 Data.Char.digitToInt_entry() //  [R2]
         { info_tbl: [(c5idQ,
                       label: Data.Char.digitToInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5idQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5idY; else goto c5idZ;
       c5idY: // global
           R2 = R2;
           R1 = Data.Char.digitToInt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5idZ: // global
           I64[Sp - 8] = block_c5idN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ie4; else goto c5idO;
       u5ie4: // global
           call _c5idN(R1) args: 0, res: 0, upd: 0;
       c5idO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5idN() //  [R1]
         { info_tbl: [(c5idN,
                       label: block_c5idN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5idN: // global
           I64[Sp] = block_c5idT_info;
           R2 = I64[R1 + 7];
           call Data.Char.$wdigitToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5idT() //  [R1]
         { info_tbl: [(c5idT,
                       label: block_c5idT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5idT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5ie3; else goto c5ie2;
       c5ie3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5ie2: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.629790265 UTC

[section ""relreadonly" . S5i8j_srt" {
     S5i8j_srt:
         const GHC.Unicode.$wgeneralCategory_closure;
         const Data.Char.$wisLetter_closure;
         const Data.Char.isLetter_closure;
         const Data.Char.isMark_closure;
         const Data.Char.isNumber_closure;
         const Data.Char.isSeparator_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Char.$wlvl_closure;
         const Data.Char.digitToInt_closure;
         const Data.Char.$wdigitToInt_closure;
 }]

