
==================== Raw Cmm ====================
2018-03-16 16:06:50.421299267 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:50.423105794 UTC

[section ""data" . Data.Traversable.$p1Traversable_closure" {
     Data.Traversable.$p1Traversable_closure:
         const Data.Traversable.$p1Traversable_info;
 },
 Data.Traversable.$p1Traversable_entry() //  [R2]
         { []
         }
     {offset
       cbYOs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbYOt; else goto cbYOu;
       cbYOt: // global
           R2 = R2;
           R1 = Data.Traversable.$p1Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYOu: // global
           I64[Sp - 8] = block_cbYOp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubYOy; else goto cbYOq;
       ubYOy: // global
           call _cbYOp(R1) args: 0, res: 0, upd: 0;
       cbYOq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$p1Traversable_info" {
     Data.Traversable.$p1Traversable_info:
         const Data.Traversable.$p1Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbYOp() //  [R1]
         { []
         }
     {offset
       cbYOp: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYOp_info" {
     block_cbYOp_info:
         const _cbYOp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.428562627 UTC

[section ""data" . Data.Traversable.$p2Traversable_closure" {
     Data.Traversable.$p2Traversable_closure:
         const Data.Traversable.$p2Traversable_info;
 },
 Data.Traversable.$p2Traversable_entry() //  [R2]
         { []
         }
     {offset
       cbYOR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbYOS; else goto cbYOT;
       cbYOS: // global
           R2 = R2;
           R1 = Data.Traversable.$p2Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYOT: // global
           I64[Sp - 8] = block_cbYOO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubYOX; else goto cbYOP;
       ubYOX: // global
           call _cbYOO(R1) args: 0, res: 0, upd: 0;
       cbYOP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$p2Traversable_info" {
     Data.Traversable.$p2Traversable_info:
         const Data.Traversable.$p2Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbYOO() //  [R1]
         { []
         }
     {offset
       cbYOO: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYOO_info" {
     block_cbYOO_info:
         const _cbYOO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.434020235 UTC

[section ""data" . Data.Traversable.traverse_closure" {
     Data.Traversable.traverse_closure:
         const Data.Traversable.traverse_info;
 },
 Data.Traversable.traverse_entry() //  [R2]
         { []
         }
     {offset
       cbYPg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbYPh; else goto cbYPi;
       cbYPh: // global
           R2 = R2;
           R1 = Data.Traversable.traverse_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYPi: // global
           I64[Sp - 8] = block_cbYPd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubYPm; else goto cbYPe;
       ubYPm: // global
           call _cbYPd(R1) args: 0, res: 0, upd: 0;
       cbYPe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.traverse_info" {
     Data.Traversable.traverse_info:
         const Data.Traversable.traverse_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbYPd() //  [R1]
         { []
         }
     {offset
       cbYPd: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYPd_info" {
     block_cbYPd_info:
         const _cbYPd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.439167452 UTC

[section ""data" . Data.Traversable.sequenceA_closure" {
     Data.Traversable.sequenceA_closure:
         const Data.Traversable.sequenceA_info;
 },
 Data.Traversable.sequenceA_entry() //  [R2]
         { []
         }
     {offset
       cbYPD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbYPE; else goto cbYPF;
       cbYPE: // global
           R2 = R2;
           R1 = Data.Traversable.sequenceA_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYPF: // global
           I64[Sp - 8] = block_cbYPA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubYPJ; else goto cbYPB;
       ubYPJ: // global
           call _cbYPA(R1) args: 0, res: 0, upd: 0;
       cbYPB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.sequenceA_info" {
     Data.Traversable.sequenceA_info:
         const Data.Traversable.sequenceA_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbYPA() //  [R1]
         { []
         }
     {offset
       cbYPA: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYPA_info" {
     block_cbYPA_info:
         const _cbYPA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.445368602 UTC

[section ""data" . Data.Traversable.mapM_closure" {
     Data.Traversable.mapM_closure:
         const Data.Traversable.mapM_info;
 },
 Data.Traversable.mapM_entry() //  [R2]
         { []
         }
     {offset
       cbYQ0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbYQ1; else goto cbYQ2;
       cbYQ1: // global
           R2 = R2;
           R1 = Data.Traversable.mapM_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYQ2: // global
           I64[Sp - 8] = block_cbYPX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubYQ6; else goto cbYPY;
       ubYQ6: // global
           call _cbYPX(R1) args: 0, res: 0, upd: 0;
       cbYPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.mapM_info" {
     Data.Traversable.mapM_info:
         const Data.Traversable.mapM_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbYPX() //  [R1]
         { []
         }
     {offset
       cbYPX: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYPX_info" {
     block_cbYPX_info:
         const _cbYPX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.450880653 UTC

[section ""data" . Data.Traversable.sequence_closure" {
     Data.Traversable.sequence_closure:
         const Data.Traversable.sequence_info;
 },
 Data.Traversable.sequence_entry() //  [R2]
         { []
         }
     {offset
       cbYQn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbYQo; else goto cbYQp;
       cbYQo: // global
           R2 = R2;
           R1 = Data.Traversable.sequence_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYQp: // global
           I64[Sp - 8] = block_cbYQk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubYQt; else goto cbYQl;
       ubYQt: // global
           call _cbYQk(R1) args: 0, res: 0, upd: 0;
       cbYQl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.sequence_info" {
     Data.Traversable.sequence_info:
         const Data.Traversable.sequence_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbYQk() //  [R1]
         { []
         }
     {offset
       cbYQk: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYQk_info" {
     block_cbYQk_info:
         const _cbYQk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.456689073 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$ctraverse_closure" {
     Data.Traversable.$fTraversableFirst_$ctraverse_closure:
         const Data.Traversable.$fTraversableFirst_$ctraverse_info;
 },
 Data.Traversable.$fTraversableFirst_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbYQO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbYQP; else goto cbYQQ;
       cbYQP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableFirst_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYQQ: // global
           I64[Sp - 24] = block_cbYQH_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubYR5; else goto cbYQI;
       ubYR5: // global
           call _cbYQH(R1) args: 0, res: 0, upd: 0;
       cbYQI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$ctraverse_info" {
     Data.Traversable.$fTraversableFirst_$ctraverse_info:
         const Data.Traversable.$fTraversableFirst_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYQH() //  [R1]
         { []
         }
     {offset
       cbYQH: // global
           _sbWUL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbYQL; else goto cbYQM;
       cbYQL: // global
           R2 = _sbWUL::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cbYQM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbYR0; else goto cbYQZ;
       cbYR0: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbYQZ: // global
           _sbWUP::P64 = P64[R1 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sbWUP::P64;
           I64[Sp + 8] = block_cbYQX_info;
           R2 = _sbWUL::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYQH_info" {
     block_cbYQH_info:
         const _cbYQH;
         const 2;
         const 30;
 },
 _cbYQX() //  [R1]
         { []
         }
     {offset
       cbYQX: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYQX_info" {
     block_cbYQX_info:
         const _cbYQX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.465280254 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$ctraverse_closure" {
     Data.Traversable.$fTraversable[]_$ctraverse_closure:
         const Data.Traversable.$fTraversable[]_$ctraverse_info;
 },
 z_sbWUU_entry() //  [R1]
         { []
         }
     {offset
       cbYRu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbYRv; else goto cbYRw;
       cbYRv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbYRw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbWUU_info" {
     z_sbWUU_info:
         const z_sbWUU_entry;
         const 1;
         const 16;
 },
 go_sbWUV_entry() //  [R1, R2]
         { []
         }
     {offset
       cbYRJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbYRK; else goto cbYRL;
       cbYRK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYRL: // global
           I64[Sp - 40] = block_cbYRC_info;
           _sbWUV::P64 = R1;
           _sbWUS::P64 = P64[R1 + 7];
           _sbWUT::P64 = P64[R1 + 15];
           _sbWUU::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sbWUS::P64;
           P64[Sp - 24] = _sbWUT::P64;
           P64[Sp - 16] = _sbWUU::P64;
           P64[Sp - 8] = _sbWUV::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubYRW; else goto cbYRD;
       ubYRW: // global
           call _cbYRC(R1) args: 0, res: 0, upd: 0;
       cbYRD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sbWUV_info" {
     go_sbWUV_info:
         const go_sbWUV_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cbYRC() //  [R1]
         { []
         }
     {offset
       cbYRC: // global
           if (R1 & 7 == 1) goto cbYRG; else goto cbYRH;
       cbYRG: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbYRH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbYRT; else goto cbYRS;
       cbYRT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbYRS: // global
           _sbWUY::P64 = P64[R1 + 6];
           _sbWUZ::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sbWUZ::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sbWUY::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYRC_info" {
     block_cbYRC_info:
         const _cbYRC;
         const 4;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$ctraverse_entry() //  [R2, R3]
         { []
         }
     {offset
       cbYRX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbYS1; else goto cbYS0;
       cbYS1: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$ctraverse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYS0: // global
           I64[Hp - 48] = z_sbWUU_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = go_sbWUV_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$ctraverse_info" {
     Data.Traversable.$fTraversable[]_$ctraverse_info:
         const Data.Traversable.$fTraversable[]_$ctraverse_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.475454636 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$ctraverse_closure" {
     Data.Traversable.$fTraversableEither_$ctraverse_closure:
         const Data.Traversable.$fTraversableEither_$ctraverse_info;
 },
 Data.Traversable.$fTraversableEither_$ctraverse_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cbYSB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbYSC; else goto cbYSD;
       cbYSC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYSD: // global
           I64[Sp - 24] = block_cbYSu_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubYSS; else goto cbYSv;
       ubYSS: // global
           call _cbYSu(R1) args: 0, res: 0, upd: 0;
       cbYSv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$ctraverse_info" {
     Data.Traversable.$fTraversableEither_$ctraverse_info:
         const Data.Traversable.$fTraversableEither_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYSu() //  [R1]
         { []
         }
     {offset
       cbYSu: // global
           _sbWV2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbYSy; else goto cbYSz;
       cbYSy: // global
           R2 = _sbWV2::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cbYSz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbYSN; else goto cbYSM;
       cbYSN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbYSM: // global
           _sbWV8::P64 = P64[R1 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sbWV8::P64;
           I64[Sp + 8] = block_cbYSK_info;
           R2 = _sbWV2::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYSu_info" {
     block_cbYSu_info:
         const _cbYSu;
         const 2;
         const 30;
 },
 _cbYSK() //  [R1]
         { []
         }
     {offset
       cbYSK: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYSK_info" {
     block_cbYSK_info:
         const _cbYSK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.484927789 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$ctraverse_closure" {
     Data.Traversable.$fTraversable(,)_$ctraverse_closure:
         const Data.Traversable.$fTraversable(,)_$ctraverse_info;
 },
 sat_sbWVi_entry() //  [R1, R2]
         { []
         }
     {offset
       cbYTp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbYTt; else goto cbYTs;
       cbYTt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYTs: // global
           _sbWVf::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbWVf::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbWVi_info" {
     sat_sbWVi_info:
         const sat_sbWVi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cbYTu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbYTw; else goto cbYTx;
       cbYTw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYTx: // global
           I64[Sp - 24] = block_cbYTd_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubYTF; else goto cbYTe;
       ubYTF: // global
           call _cbYTd(R1) args: 0, res: 0, upd: 0;
       cbYTe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$ctraverse_info" {
     Data.Traversable.$fTraversable(,)_$ctraverse_info:
         const Data.Traversable.$fTraversable(,)_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYTd() //  [R1]
         { []
         }
     {offset
       cbYTd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbYTA; else goto cbYTz;
       cbYTA: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbYTz: // global
           _sbWVf::P64 = P64[R1 + 7];
           _sbWVg::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sbWVg::P64;
           I64[Hp - 8] = sat_sbWVi_info;
           P64[Hp] = _sbWVf::P64;
           I64[Sp] = block_cbYTv_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYTd_info" {
     block_cbYTd_info:
         const _cbYTd;
         const 2;
         const 30;
 },
 _cbYTv() //  [R1]
         { []
         }
     {offset
       cbYTv: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYTv_info" {
     block_cbYTv_info:
         const _cbYTv;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.493916781 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$csequence_closure" {
     Data.Traversable.$fTraversableProxy_$csequence_closure:
         const Data.Traversable.$fTraversableProxy_$csequence_info;
 },
 Data.Traversable.$fTraversableProxy_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbYU5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYU6; else goto cbYU7;
       cbYU6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYU7: // global
           I64[Sp - 8] = block_cbYU3_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$csequence_info" {
     Data.Traversable.$fTraversableProxy_$csequence_info:
         const Data.Traversable.$fTraversableProxy_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbYU3() //  [R1]
         { []
         }
     {offset
       cbYU3: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYU3_info" {
     block_cbYU3_info:
         const _cbYU3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.499069049 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$cmapM_closure" {
     Data.Traversable.$fTraversableProxy_$cmapM_closure:
         const Data.Traversable.$fTraversableProxy_$cmapM_info;
 },
 Data.Traversable.$fTraversableProxy_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbYUp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYUq; else goto cbYUr;
       cbYUq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYUr: // global
           I64[Sp - 8] = block_cbYUn_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$cmapM_info" {
     Data.Traversable.$fTraversableProxy_$cmapM_info:
         const Data.Traversable.$fTraversableProxy_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYUn() //  [R1]
         { []
         }
     {offset
       cbYUn: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYUn_info" {
     block_cbYUn_info:
         const _cbYUn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.503970807 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$csequenceA_closure" {
     Data.Traversable.$fTraversableProxy_$csequenceA_closure:
         const Data.Traversable.$fTraversableProxy_$csequenceA_info;
 },
 Data.Traversable.$fTraversableProxy_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbYUH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYUI; else goto cbYUJ;
       cbYUI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYUJ: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$csequenceA_info" {
     Data.Traversable.$fTraversableProxy_$csequenceA_info:
         const Data.Traversable.$fTraversableProxy_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.507963402 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$ctraverse_closure" {
     Data.Traversable.$fTraversableProxy_$ctraverse_closure:
         const Data.Traversable.$fTraversableProxy_$ctraverse_info;
 },
 Data.Traversable.$fTraversableProxy_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbYUT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYUU; else goto cbYUV;
       cbYUU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYUV: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$ctraverse_info" {
     Data.Traversable.$fTraversableProxy_$ctraverse_info:
         const Data.Traversable.$fTraversableProxy_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.511300793 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_closure" {
     Data.Traversable.$fTraversableProxy_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Proxy.$fFunctorProxy_closure;
         const Data.Foldable.$fFoldableProxy_closure;
         const Data.Traversable.$fTraversableProxy_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableProxy_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableProxy_$cmapM_closure+3;
         const Data.Traversable.$fTraversableProxy_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.513632391 UTC

[section ""data" . Data.Traversable.$fTraversableConst_$ctraverse_closure" {
     Data.Traversable.$fTraversableConst_$ctraverse_closure:
         const Data.Traversable.$fTraversableConst_$ctraverse_info;
 },
 Data.Traversable.$fTraversableConst_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbYV6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYV7; else goto cbYV8;
       cbYV7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableConst_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYV8: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableConst_$ctraverse_info" {
     Data.Traversable.$fTraversableConst_$ctraverse_info:
         const Data.Traversable.$fTraversableConst_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.518235296 UTC

[section ""data" . Data.Traversable.$fTraversableDual1_closure" {
     Data.Traversable.$fTraversableDual1_closure:
         const Data.Traversable.$fTraversableDual1_info;
 },
 Data.Traversable.$fTraversableDual1_entry() //  [R2]
         { []
         }
     {offset
       cbYVi: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual1_info" {
     Data.Traversable.$fTraversableDual1_info:
         const Data.Traversable.$fTraversableDual1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.521942986 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$ctraverse_closure" {
     Data.Traversable.$fTraversableDual_$ctraverse_closure:
         const Data.Traversable.$fTraversableDual_$ctraverse_info;
 },
 Data.Traversable.$fTraversableDual_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbYVw: // global
           _sbWVC::P64 = R4;
           _sbWVB::P64 = R3;
           _sbWVA::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbYVx; else goto cbYVy;
       cbYVy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbYVA; else goto cbYVz;
       cbYVA: // global
           HpAlloc = 32;
           goto cbYVx;
       cbYVx: // global
           R4 = _sbWVC::P64;
           R3 = _sbWVB::P64;
           R2 = _sbWVA::P64;
           R1 = Data.Traversable.$fTraversableDual_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYVz: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbWVB::P64;
           P64[Hp] = _sbWVC::P64;
           I64[Sp - 16] = block_cbYVu_info;
           R2 = _sbWVA::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$ctraverse_info" {
     Data.Traversable.$fTraversableDual_$ctraverse_info:
         const Data.Traversable.$fTraversableDual_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYVu() //  [R1]
         { []
         }
     {offset
       cbYVu: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYVu_info" {
     block_cbYVu_info:
         const _cbYVu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.527644842 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$ctraverse_closure" {
     Data.Traversable.$fTraversableSum_$ctraverse_closure:
         const Data.Traversable.$fTraversableSum_$ctraverse_info;
 },
 Data.Traversable.$fTraversableSum_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cbYVU: // global
           _sbWVH::P64 = R4;
           _sbWVG::P64 = R3;
           _sbWVF::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbYVV; else goto cbYVW;
       cbYVW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbYVY; else goto cbYVX;
       cbYVY: // global
           HpAlloc = 32;
           goto cbYVV;
       cbYVV: // global
           R4 = _sbWVH::P64;
           R3 = _sbWVG::P64;
           R2 = _sbWVF::P64;
           R1 = Data.Traversable.$fTraversableSum_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYVX: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbWVG::P64;
           P64[Hp] = _sbWVH::P64;
           I64[Sp - 16] = block_cbYVS_info;
           R2 = _sbWVF::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$ctraverse_info" {
     Data.Traversable.$fTraversableSum_$ctraverse_info:
         const Data.Traversable.$fTraversableSum_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYVS() //  [R1]
         { []
         }
     {offset
       cbYVS: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYVS_info" {
     block_cbYVS_info:
         const _cbYVS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.533505294 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$ctraverse_closure" {
     Data.Traversable.$fTraversableProduct_$ctraverse_closure:
         const Data.Traversable.$fTraversableProduct_$ctraverse_info;
 },
 Data.Traversable.$fTraversableProduct_$ctraverse_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbYWi: // global
           _sbWVM::P64 = R4;
           _sbWVL::P64 = R3;
           _sbWVK::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbYWj; else goto cbYWk;
       cbYWk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbYWm; else goto cbYWl;
       cbYWm: // global
           HpAlloc = 32;
           goto cbYWj;
       cbYWj: // global
           R4 = _sbWVM::P64;
           R3 = _sbWVL::P64;
           R2 = _sbWVK::P64;
           R1 = Data.Traversable.$fTraversableProduct_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYWl: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbWVL::P64;
           P64[Hp] = _sbWVM::P64;
           I64[Sp - 16] = block_cbYWg_info;
           R2 = _sbWVK::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$ctraverse_info" {
     Data.Traversable.$fTraversableProduct_$ctraverse_info:
         const Data.Traversable.$fTraversableProduct_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYWg() //  [R1]
         { []
         }
     {offset
       cbYWg: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYWg_info" {
     block_cbYWg_info:
         const _cbYWg;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.539042179 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$csequence_closure" {
     Data.Traversable.$fTraversableU1_$csequence_closure:
         const Data.Traversable.$fTraversableU1_$csequence_info;
 },
 Data.Traversable.$fTraversableU1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbYWF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYWG; else goto cbYWH;
       cbYWG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYWH: // global
           I64[Sp - 8] = block_cbYWD_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$csequence_info" {
     Data.Traversable.$fTraversableU1_$csequence_info:
         const Data.Traversable.$fTraversableU1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbYWD() //  [R1]
         { []
         }
     {offset
       cbYWD: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Generics.U1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYWD_info" {
     block_cbYWD_info:
         const _cbYWD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.544418183 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$cmapM_closure" {
     Data.Traversable.$fTraversableU1_$cmapM_closure:
         const Data.Traversable.$fTraversableU1_$cmapM_info;
 },
 Data.Traversable.$fTraversableU1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbYWZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYX0; else goto cbYX1;
       cbYX0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYX1: // global
           I64[Sp - 8] = block_cbYWX_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$cmapM_info" {
     Data.Traversable.$fTraversableU1_$cmapM_info:
         const Data.Traversable.$fTraversableU1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYWX() //  [R1]
         { []
         }
     {offset
       cbYWX: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Generics.U1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYWX_info" {
     block_cbYWX_info:
         const _cbYWX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.549485122 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$csequenceA_closure" {
     Data.Traversable.$fTraversableU1_$csequenceA_closure:
         const Data.Traversable.$fTraversableU1_$csequenceA_info;
 },
 Data.Traversable.$fTraversableU1_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbYXh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYXi; else goto cbYXj;
       cbYXi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYXj: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Generics.U1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$csequenceA_info" {
     Data.Traversable.$fTraversableU1_$csequenceA_info:
         const Data.Traversable.$fTraversableU1_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.554420809 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$ctraverse_closure" {
     Data.Traversable.$fTraversableU1_$ctraverse_closure:
         const Data.Traversable.$fTraversableU1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableU1_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cbYXt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYXu; else goto cbYXv;
       cbYXu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYXv: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Generics.U1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$ctraverse_info" {
     Data.Traversable.$fTraversableU1_$ctraverse_info:
         const Data.Traversable.$fTraversableU1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.557737542 UTC

[section ""data" . Data.Traversable.$fTraversableU1_closure" {
     Data.Traversable.$fTraversableU1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorU1_closure;
         const Data.Foldable.$fFoldableU1_closure;
         const Data.Traversable.$fTraversableU1_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableU1_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableU1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableU1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.560357364 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$ctraverse_closure" {
     Data.Traversable.$fTraversableIdentity_$ctraverse_closure:
         const Data.Traversable.$fTraversableIdentity_$ctraverse_info;
 },
 Data.Traversable.$fTraversableIdentity_$ctraverse_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cbYXJ: // global
           _sbWW3::P64 = R4;
           _sbWW2::P64 = R3;
           _sbWW1::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbYXK; else goto cbYXL;
       cbYXL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbYXN; else goto cbYXM;
       cbYXN: // global
           HpAlloc = 32;
           goto cbYXK;
       cbYXK: // global
           R4 = _sbWW3::P64;
           R3 = _sbWW2::P64;
           R2 = _sbWW1::P64;
           R1 = Data.Traversable.$fTraversableIdentity_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYXM: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbWW2::P64;
           P64[Hp] = _sbWW3::P64;
           I64[Sp - 16] = block_cbYXH_info;
           R2 = _sbWW1::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$ctraverse_info" {
     Data.Traversable.$fTraversableIdentity_$ctraverse_info:
         const Data.Traversable.$fTraversableIdentity_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYXH() //  [R1]
         { []
         }
     {offset
       cbYXH: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYXH_info" {
     block_cbYXH_info:
         const _cbYXH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.566197343 UTC

[section ""data" . Data.Traversable.$fTraversableV1_$ctraverse_closure" {
     Data.Traversable.$fTraversableV1_$ctraverse_closure:
         const Data.Traversable.$fTraversableV1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableV1_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cbYY4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYY5; else goto cbYY6;
       cbYY5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableV1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYY6: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableV1_$ctraverse_info" {
     Data.Traversable.$fTraversableV1_$ctraverse_info:
         const Data.Traversable.$fTraversableV1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.570352081 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$ctraverse_closure" {
     Data.Traversable.$fTraversablePar1_$ctraverse_closure:
         const Data.Traversable.$fTraversablePar1_$ctraverse_info;
 },
 Data.Traversable.$fTraversablePar1_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbYYj: // global
           _sbWWb::P64 = R4;
           _sbWWa::P64 = R3;
           _sbWW9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbYYk; else goto cbYYl;
       cbYYl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbYYn; else goto cbYYm;
       cbYYn: // global
           HpAlloc = 32;
           goto cbYYk;
       cbYYk: // global
           R4 = _sbWWb::P64;
           R3 = _sbWWa::P64;
           R2 = _sbWW9::P64;
           R1 = Data.Traversable.$fTraversablePar1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYYm: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbWWa::P64;
           P64[Hp] = _sbWWb::P64;
           I64[Sp - 16] = block_cbYYh_info;
           R2 = _sbWW9::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$ctraverse_info" {
     Data.Traversable.$fTraversablePar1_$ctraverse_info:
         const Data.Traversable.$fTraversablePar1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbYYh() //  [R1]
         { []
         }
     {offset
       cbYYh: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYYh_info" {
     block_cbYYh_info:
         const _cbYYh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.5756295 UTC

[section ""data" . Data.Traversable.$fTraversableM2_closure" {
     Data.Traversable.$fTraversableM2_closure:
         const Data.Traversable.$fTraversableM2_info;
 },
 Data.Traversable.$fTraversableM2_entry() //  [R2]
         { []
         }
     {offset
       cbYYE: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM2_info" {
     Data.Traversable.$fTraversableM2_info:
         const Data.Traversable.$fTraversableM2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.580127236 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$ctraverse_closure" {
     Data.Traversable.$fTraversableRec1_$ctraverse_closure:
         const Data.Traversable.$fTraversableRec1_$ctraverse_info;
 },
 sat_sbWWk_entry() //  [R1]
         { []
         }
     {offset
       cbYYT: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbYYU; else goto cbYYV;
       cbYYU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbYYV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWk_info" {
     sat_sbWWk_info:
         const sat_sbWWk_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$ctraverse_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cbYYY: // global
           _sbWWi::P64 = R5;
           _sbWWh::P64 = R4;
           _sbWWg::P64 = R3;
           _sbWWf::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbYYZ; else goto cbYZ0;
       cbYZ0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbYZ2; else goto cbYZ1;
       cbYZ2: // global
           HpAlloc = 48;
           goto cbYYZ;
       cbYYZ: // global
           R5 = _sbWWi::P64;
           R4 = _sbWWh::P64;
           R3 = _sbWWg::P64;
           R2 = _sbWWf::P64;
           R1 = Data.Traversable.$fTraversableRec1_$ctraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbYZ1: // global
           I64[Hp - 40] = sat_sbWWk_info;
           P64[Hp - 24] = _sbWWf::P64;
           P64[Hp - 16] = _sbWWg::P64;
           P64[Hp - 8] = _sbWWh::P64;
           P64[Hp] = _sbWWi::P64;
           I64[Sp - 16] = block_cbYYW_info;
           R2 = _sbWWg::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$ctraverse_info" {
     Data.Traversable.$fTraversableRec1_$ctraverse_info:
         const Data.Traversable.$fTraversableRec1_$ctraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbYYW() //  [R1]
         { []
         }
     {offset
       cbYYW: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbYYW_info" {
     block_cbYYW_info:
         const _cbYYW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.58833596 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$cp2Traversable_closure" {
     Data.Traversable.$fTraversableRec1_$cp2Traversable_closure:
         const Data.Traversable.$fTraversableRec1_$cp2Traversable_info;
         const 0;
 },
 sat_sbWWm_entry() //  [R1]
         { []
         }
     {offset
       cbYZu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYZv; else goto cbYZw;
       cbYZv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbYZw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWm_info" {
     sat_sbWWm_info:
         const sat_sbWWm_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableRec1_$cp2Traversable_entry() //  [R2]
         { []
         }
     {offset
       cbYZx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbYZB; else goto cbYZA;
       cbYZB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$cp2Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYZA: // global
           I64[Hp - 16] = sat_sbWWm_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldableRec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$cp2Traversable_info" {
     Data.Traversable.$fTraversableRec1_$cp2Traversable_info:
         const Data.Traversable.$fTraversableRec1_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbXeW_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.594362934 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$cp1Traversable_closure" {
     Data.Traversable.$fTraversableRec1_$cp1Traversable_closure:
         const Data.Traversable.$fTraversableRec1_$cp1Traversable_info;
 },
 sat_sbWWo_entry() //  [R1]
         { []
         }
     {offset
       cbYZS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbYZT; else goto cbYZU;
       cbYZT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbYZU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWo_info" {
     sat_sbWWo_info:
         const sat_sbWWo_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableRec1_$cp1Traversable_entry() //  [R2]
         { []
         }
     {offset
       cbYZV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbYZZ; else goto cbYZY;
       cbYZZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$cp1Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbYZY: // global
           I64[Hp - 16] = sat_sbWWo_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctorRec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$cp1Traversable_info" {
     Data.Traversable.$fTraversableRec1_$cp1Traversable_info:
         const Data.Traversable.$fTraversableRec1_$cp1Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.599707103 UTC

[section ""data" . Data.Traversable.$fTraversableK1_$ctraverse_closure" {
     Data.Traversable.$fTraversableK1_$ctraverse_closure:
         const Data.Traversable.$fTraversableK1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableK1_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cbZ0c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ0d; else goto cbZ0e;
       cbZ0d: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableK1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ0e: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableK1_$ctraverse_info" {
     Data.Traversable.$fTraversableK1_$ctraverse_info:
         const Data.Traversable.$fTraversableK1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.604594537 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$ctraverse_closure" {
     Data.Traversable.$fTraversableM1_$ctraverse_closure:
         const Data.Traversable.$fTraversableM1_$ctraverse_info;
 },
 sat_sbWWx_entry() //  [R1]
         { []
         }
     {offset
       cbZ0s: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZ0t; else goto cbZ0u;
       cbZ0t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ0u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWx_info" {
     sat_sbWWx_info:
         const sat_sbWWx_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$ctraverse_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cbZ0x: // global
           _sbWWv::P64 = R5;
           _sbWWu::P64 = R4;
           _sbWWt::P64 = R3;
           _sbWWs::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZ0y; else goto cbZ0z;
       cbZ0z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZ0B; else goto cbZ0A;
       cbZ0B: // global
           HpAlloc = 48;
           goto cbZ0y;
       cbZ0y: // global
           R5 = _sbWWv::P64;
           R4 = _sbWWu::P64;
           R3 = _sbWWt::P64;
           R2 = _sbWWs::P64;
           R1 = Data.Traversable.$fTraversableM1_$ctraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ0A: // global
           I64[Hp - 40] = sat_sbWWx_info;
           P64[Hp - 24] = _sbWWs::P64;
           P64[Hp - 16] = _sbWWt::P64;
           P64[Hp - 8] = _sbWWu::P64;
           P64[Hp] = _sbWWv::P64;
           I64[Sp - 16] = block_cbZ0v_info;
           R2 = _sbWWt::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$ctraverse_info" {
     Data.Traversable.$fTraversableM1_$ctraverse_info:
         const Data.Traversable.$fTraversableM1_$ctraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbZ0v() //  [R1]
         { []
         }
     {offset
       cbZ0v: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ0v_info" {
     block_cbZ0v_info:
         const _cbZ0v;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.612321268 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$cp2Traversable_closure" {
     Data.Traversable.$fTraversableM1_$cp2Traversable_closure:
         const Data.Traversable.$fTraversableM1_$cp2Traversable_info;
         const 0;
 },
 sat_sbWWz_entry() //  [R1]
         { []
         }
     {offset
       cbZ13: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ14; else goto cbZ15;
       cbZ14: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ15: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWz_info" {
     sat_sbWWz_info:
         const sat_sbWWz_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableM1_$cp2Traversable_entry() //  [R2]
         { []
         }
     {offset
       cbZ16: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZ1a; else goto cbZ19;
       cbZ1a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$cp2Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZ19: // global
           I64[Hp - 16] = sat_sbWWz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldableM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$cp2Traversable_info" {
     Data.Traversable.$fTraversableM1_$cp2Traversable_info:
         const Data.Traversable.$fTraversableM1_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbXeW_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.618362234 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$cp1Traversable_closure" {
     Data.Traversable.$fTraversableM1_$cp1Traversable_closure:
         const Data.Traversable.$fTraversableM1_$cp1Traversable_info;
 },
 sat_sbWWB_entry() //  [R1]
         { []
         }
     {offset
       cbZ1r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ1s; else goto cbZ1t;
       cbZ1s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ1t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWB_info" {
     sat_sbWWB_info:
         const sat_sbWWB_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableM1_$cp1Traversable_entry() //  [R2]
         { []
         }
     {offset
       cbZ1u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZ1y; else goto cbZ1x;
       cbZ1y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$cp1Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZ1x: // global
           I64[Hp - 16] = sat_sbWWB_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctorM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$cp1Traversable_info" {
     Data.Traversable.$fTraversableM1_$cp1Traversable_info:
         const Data.Traversable.$fTraversableM1_$cp1Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.626461756 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$ctraverse_closure" {
     Data.Traversable.$fTraversable:+:_$ctraverse_closure:
         const Data.Traversable.$fTraversable:+:_$ctraverse_info;
 },
 sat_sbWWK_entry() //  [R1]
         { []
         }
     {offset
       cbZ1U: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZ1V; else goto cbZ1W;
       cbZ1V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ1W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWK_info" {
     sat_sbWWK_info:
         const sat_sbWWK_entry;
         const 4;
         const 15;
 },
 sat_sbWWN_entry() //  [R1]
         { []
         }
     {offset
       cbZ23: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZ24; else goto cbZ25;
       cbZ24: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ25: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWN_info" {
     sat_sbWWN_info:
         const sat_sbWWN_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversable:+:_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cbZ2a: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZ2b; else goto cbZ2c;
       cbZ2b: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ2c: // global
           I64[Sp - 40] = block_cbZ1L_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZ2t; else goto cbZ1M;
       ubZ2t: // global
           call _cbZ1L(R1) args: 0, res: 0, upd: 0;
       cbZ1M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$ctraverse_info" {
     Data.Traversable.$fTraversable:+:_$ctraverse_info:
         const Data.Traversable.$fTraversable:+:_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cbZ1L() //  [R1]
         { []
         }
     {offset
       cbZ1L: // global
           _sbWWE::P64 = P64[Sp + 24];
           _sbWWF::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cbZ27; else goto cbZ28;
       cbZ27: // global
           Hp = Hp + 48;
           _sbWWH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbZ2o; else goto cbZ2f;
       cbZ2f: // global
           _sbWWI::P64 = P64[_sbWWH::P64 + 7];
           I64[Hp - 40] = sat_sbWWK_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sbWWE::P64;
           P64[Hp - 8] = _sbWWF::P64;
           P64[Hp] = _sbWWI::P64;
           I64[Sp + 24] = block_cbZ2d_info;
           R2 = _sbWWE::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
       cbZ28: // global
           Hp = Hp + 48;
           _sbWWH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbZ2o; else goto cbZ2n;
       cbZ2o: // global
           HpAlloc = 48;
           R1 = _sbWWH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZ2n: // global
           _sbWWL::P64 = P64[_sbWWH::P64 + 6];
           I64[Hp - 40] = sat_sbWWN_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sbWWE::P64;
           P64[Hp - 8] = _sbWWF::P64;
           P64[Hp] = _sbWWL::P64;
           I64[Sp + 24] = block_cbZ2l_info;
           R2 = _sbWWE::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ1L_info" {
     block_cbZ1L_info:
         const _cbZ1L;
         const 4;
         const 30;
 },
 _cbZ2d() //  [R1]
         { []
         }
     {offset
       cbZ2d: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Generics.L1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ2d_info" {
     block_cbZ2d_info:
         const _cbZ2d;
         const 1;
         const 30;
 },
 _cbZ2l() //  [R1]
         { []
         }
     {offset
       cbZ2l: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Generics.R1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ2l_info" {
     block_cbZ2l_info:
         const _cbZ2l;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.639700097 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$cp2Traversable_closure" {
     Data.Traversable.$fTraversable:+:_$cp2Traversable_closure:
         const Data.Traversable.$fTraversable:+:_$cp2Traversable_info;
         const 0;
 },
 sat_sbWWR_entry() //  [R1]
         { []
         }
     {offset
       cbZ3b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ3c; else goto cbZ3d;
       cbZ3c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ3d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWR_info" {
     sat_sbWWR_info:
         const sat_sbWWR_entry;
         const 1;
         const 16;
 },
 sat_sbWWQ_entry() //  [R1]
         { []
         }
     {offset
       cbZ3i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ3j; else goto cbZ3k;
       cbZ3j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ3k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWQ_info" {
     sat_sbWWQ_info:
         const sat_sbWWQ_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:+:_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZ3l: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZ3p; else goto cbZ3o;
       cbZ3p: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ3o: // global
           I64[Hp - 40] = sat_sbWWR_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbWWQ_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldable:+:_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$cp2Traversable_info" {
     Data.Traversable.$fTraversable:+:_$cp2Traversable_info:
         const Data.Traversable.$fTraversable:+:_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbXeW_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.647463215 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$cp1Traversable_closure" {
     Data.Traversable.$fTraversable:+:_$cp1Traversable_closure:
         const Data.Traversable.$fTraversable:+:_$cp1Traversable_info;
 },
 sat_sbWWV_entry() //  [R1]
         { []
         }
     {offset
       cbZ3K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ3L; else goto cbZ3M;
       cbZ3L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ3M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWV_info" {
     sat_sbWWV_info:
         const sat_sbWWV_entry;
         const 1;
         const 16;
 },
 sat_sbWWU_entry() //  [R1]
         { []
         }
     {offset
       cbZ3R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ3S; else goto cbZ3T;
       cbZ3S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ3T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWWU_info" {
     sat_sbWWU_info:
         const sat_sbWWU_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:+:_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZ3U: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZ3Y; else goto cbZ3X;
       cbZ3Y: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ3X: // global
           I64[Hp - 40] = sat_sbWWV_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbWWU_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctor:+:_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$cp1Traversable_info" {
     Data.Traversable.$fTraversable:+:_$cp1Traversable_info:
         const Data.Traversable.$fTraversable:+:_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.659678893 UTC

[section ""data" . Data.Traversable.$w$ctraverse_closure" {
     Data.Traversable.$w$ctraverse_closure:
         const Data.Traversable.$w$ctraverse_info;
 },
 sat_sbWX3_entry() //  [R1]
         { []
         }
     {offset
       cbZ4j: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZ4k; else goto cbZ4l;
       cbZ4k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ4l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWX3_info" {
     sat_sbWX3_info:
         const sat_sbWX3_entry;
         const 4;
         const 15;
 },
 sat_sbWX2_entry() //  [R1]
         { []
         }
     {offset
       cbZ4q: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZ4r; else goto cbZ4s;
       cbZ4r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ4s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWX2_info" {
     sat_sbWX2_info:
         const sat_sbWX2_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$w$ctraverse_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbZ4t: // global
           _sbWX0::P64 = R6;
           _sbWWZ::P64 = R5;
           _sbWWY::P64 = R4;
           _sbWWX::P64 = R3;
           _sbWWW::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZ4u; else goto cbZ4v;
       cbZ4v: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbZ4x; else goto cbZ4w;
       cbZ4x: // global
           HpAlloc = 96;
           goto cbZ4u;
       cbZ4u: // global
           R6 = _sbWX0::P64;
           R5 = _sbWWZ::P64;
           R4 = _sbWWY::P64;
           R3 = _sbWWX::P64;
           R2 = _sbWWW::P64;
           R1 = Data.Traversable.$w$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbZ4w: // global
           I64[Hp - 88] = sat_sbWX3_info;
           P64[Hp - 72] = _sbWWX::P64;
           P64[Hp - 64] = _sbWWY::P64;
           P64[Hp - 56] = _sbWWZ::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_sbWX2_info;
           P64[Hp - 24] = _sbWWW::P64;
           P64[Hp - 16] = _sbWWY::P64;
           P64[Hp - 8] = _sbWWZ::P64;
           P64[Hp] = _sbWX0::P64;
           R2 = _sbWWY::P64;
           I64[Sp - 24] = stg_ap_ppp_info;
           P64[Sp - 16] = GHC.Generics.:*:_closure+2;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$w$ctraverse_info" {
     Data.Traversable.$w$ctraverse_info:
         const Data.Traversable.$w$ctraverse_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.669851948 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$ctraverse_closure" {
     Data.Traversable.$fTraversable:*:_$ctraverse_closure:
         const Data.Traversable.$fTraversable:*:_$ctraverse_info;
 },
 Data.Traversable.$fTraversable:*:_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cbZ51: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZ52; else goto cbZ53;
       cbZ52: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ53: // global
           I64[Sp - 40] = block_cbZ4Y_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZ57; else goto cbZ4Z;
       ubZ57: // global
           call _cbZ4Y(R1) args: 0, res: 0, upd: 0;
       cbZ4Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$ctraverse_info" {
     Data.Traversable.$fTraversable:*:_$ctraverse_info:
         const Data.Traversable.$fTraversable:*:_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cbZ4Y() //  [R1]
         { []
         }
     {offset
       cbZ4Y: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ4Y_info" {
     block_cbZ4Y_info:
         const _cbZ4Y;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.676503454 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$cp2Traversable_closure" {
     Data.Traversable.$fTraversable:*:_$cp2Traversable_closure:
         const Data.Traversable.$fTraversable:*:_$cp2Traversable_info;
         const 0;
 },
 sat_sbWXf_entry() //  [R1]
         { []
         }
     {offset
       cbZ5q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ5r; else goto cbZ5s;
       cbZ5r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ5s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXf_info" {
     sat_sbWXf_info:
         const sat_sbWXf_entry;
         const 1;
         const 16;
 },
 sat_sbWXe_entry() //  [R1]
         { []
         }
     {offset
       cbZ5x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ5y; else goto cbZ5z;
       cbZ5y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ5z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXe_info" {
     sat_sbWXe_info:
         const sat_sbWXe_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:*:_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZ5A: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZ5E; else goto cbZ5D;
       cbZ5E: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ5D: // global
           I64[Hp - 40] = sat_sbWXf_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbWXe_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldable:*:_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$cp2Traversable_info" {
     Data.Traversable.$fTraversable:*:_$cp2Traversable_info:
         const Data.Traversable.$fTraversable:*:_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbXeW_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.684932155 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$cp1Traversable_closure" {
     Data.Traversable.$fTraversable:*:_$cp1Traversable_closure:
         const Data.Traversable.$fTraversable:*:_$cp1Traversable_info;
 },
 sat_sbWXj_entry() //  [R1]
         { []
         }
     {offset
       cbZ5Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ60; else goto cbZ61;
       cbZ60: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ61: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXj_info" {
     sat_sbWXj_info:
         const sat_sbWXj_entry;
         const 1;
         const 16;
 },
 sat_sbWXi_entry() //  [R1]
         { []
         }
     {offset
       cbZ66: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ67; else goto cbZ68;
       cbZ67: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ68: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXi_info" {
     sat_sbWXi_info:
         const sat_sbWXi_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:*:_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZ69: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZ6d; else goto cbZ6c;
       cbZ6d: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ6c: // global
           I64[Hp - 40] = sat_sbWXj_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbWXi_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctor:*:_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$cp1Traversable_info" {
     Data.Traversable.$fTraversable:*:_$cp1Traversable_info:
         const Data.Traversable.$fTraversable:*:_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.6925468 UTC

[section ""data" . Data.Traversable.$fTraversable:.:1_closure" {
     Data.Traversable.$fTraversable:.:1_closure:
         const Data.Traversable.$fTraversable:.:1_info;
 },
 Data.Traversable.$fTraversable:.:1_entry() //  [R2]
         { []
         }
     {offset
       cbZ6u: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:1_info" {
     Data.Traversable.$fTraversable:.:1_info:
         const Data.Traversable.$fTraversable:.:1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.698124194 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$ctraverse_closure" {
     Data.Traversable.$fTraversable:.:_$ctraverse_closure:
         const Data.Traversable.$fTraversable:.:_$ctraverse_info;
 },
 sat_sbWXr_entry() //  [R1]
         { []
         }
     {offset
       cbZ6N: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZ6O; else goto cbZ6P;
       cbZ6O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ6P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXr_info" {
     sat_sbWXr_info:
         const sat_sbWXr_entry;
         const 3;
         const 15;
 },
 sat_sbWXs_entry() //  [R1]
         { []
         }
     {offset
       cbZ6Q: // global
           _sbWXs::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cbZ6R; else goto cbZ6S;
       cbZ6S: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbZ6U; else goto cbZ6T;
       cbZ6U: // global
           HpAlloc = 40;
           goto cbZ6R;
       cbZ6R: // global
           R1 = _sbWXs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ6T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbWXs::P64;
           _sbWXl::P64 = P64[_sbWXs::P64 + 16];
           _sbWXm::P64 = P64[_sbWXs::P64 + 24];
           _sbWXn::P64 = P64[_sbWXs::P64 + 32];
           _sbWXo::P64 = P64[_sbWXs::P64 + 40];
           _sbWXp::P64 = P64[_sbWXs::P64 + 48];
           I64[Hp - 32] = sat_sbWXr_info;
           P64[Hp - 16] = _sbWXm::P64;
           P64[Hp - 8] = _sbWXn::P64;
           P64[Hp] = _sbWXo::P64;
           R2 = _sbWXl::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = _sbWXn::P64;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sbWXp::P64;
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXs_info" {
     sat_sbWXs_info:
         const sat_sbWXs_entry;
         const 5;
         const 15;
 },
 Data.Traversable.$fTraversable:.:_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cbZ6X: // global
           _sbWXp::P64 = R6;
           _sbWXo::P64 = R5;
           _sbWXn::P64 = R4;
           _sbWXm::P64 = R3;
           _sbWXl::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZ6Y; else goto cbZ6Z;
       cbZ6Z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbZ71; else goto cbZ70;
       cbZ71: // global
           HpAlloc = 56;
           goto cbZ6Y;
       cbZ6Y: // global
           R6 = _sbWXp::P64;
           R5 = _sbWXo::P64;
           R4 = _sbWXn::P64;
           R3 = _sbWXm::P64;
           R2 = _sbWXl::P64;
           R1 = Data.Traversable.$fTraversable:.:_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ70: // global
           I64[Hp - 48] = sat_sbWXs_info;
           P64[Hp - 32] = _sbWXl::P64;
           P64[Hp - 24] = _sbWXm::P64;
           P64[Hp - 16] = _sbWXn::P64;
           P64[Hp - 8] = _sbWXo::P64;
           P64[Hp] = _sbWXp::P64;
           I64[Sp - 16] = block_cbZ6V_info;
           R2 = _sbWXn::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$ctraverse_info" {
     Data.Traversable.$fTraversable:.:_$ctraverse_info:
         const Data.Traversable.$fTraversable:.:_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cbZ6V() //  [R1]
         { []
         }
     {offset
       cbZ6V: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversable:.:1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ6V_info" {
     block_cbZ6V_info:
         const _cbZ6V;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.708162313 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$cp2Traversable_closure" {
     Data.Traversable.$fTraversable:.:_$cp2Traversable_closure:
         const Data.Traversable.$fTraversable:.:_$cp2Traversable_info;
         const 0;
 },
 sat_sbWXw_entry() //  [R1]
         { []
         }
     {offset
       cbZ7x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ7y; else goto cbZ7z;
       cbZ7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ7z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXw_info" {
     sat_sbWXw_info:
         const sat_sbWXw_entry;
         const 1;
         const 16;
 },
 sat_sbWXv_entry() //  [R1]
         { []
         }
     {offset
       cbZ7E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ7F; else goto cbZ7G;
       cbZ7F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ7G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXv_info" {
     sat_sbWXv_info:
         const sat_sbWXv_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:.:_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZ7H: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZ7L; else goto cbZ7K;
       cbZ7L: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ7K: // global
           I64[Hp - 40] = sat_sbWXw_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbWXv_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldable:.:_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$cp2Traversable_info" {
     Data.Traversable.$fTraversable:.:_$cp2Traversable_info:
         const Data.Traversable.$fTraversable:.:_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbXeW_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.715952009 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$cp1Traversable_closure" {
     Data.Traversable.$fTraversable:.:_$cp1Traversable_closure:
         const Data.Traversable.$fTraversable:.:_$cp1Traversable_info;
 },
 sat_sbWXA_entry() //  [R1]
         { []
         }
     {offset
       cbZ86: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ87; else goto cbZ88;
       cbZ87: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ88: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXA_info" {
     sat_sbWXA_info:
         const sat_sbWXA_entry;
         const 1;
         const 16;
 },
 sat_sbWXz_entry() //  [R1]
         { []
         }
     {offset
       cbZ8d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ8e; else goto cbZ8f;
       cbZ8e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZ8f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWXz_info" {
     sat_sbWXz_info:
         const sat_sbWXz_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:.:_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZ8g: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZ8k; else goto cbZ8j;
       cbZ8k: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ8j: // global
           I64[Hp - 40] = sat_sbWXA_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbWXz_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctor:.:_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$cp1Traversable_info" {
     Data.Traversable.$fTraversable:.:_$cp1Traversable_info:
         const Data.Traversable.$fTraversable:.:_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.722978248 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec4_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec4_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec4_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbZ8D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ8E; else goto cbZ8F;
       cbZ8E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ8F: // global
           I64[Sp - 16] = block_cbZ8B_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$ctraverse_info" {
     Data.Traversable.$fTraversableURec4_$ctraverse_info:
         const Data.Traversable.$fTraversableURec4_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZ8B() //  [R1]
         { []
         }
     {offset
       cbZ8B: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ8B_info" {
     block_cbZ8B_info:
         const _cbZ8B;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.72815993 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec3_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec3_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec3_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbZ8X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ8Y; else goto cbZ8Z;
       cbZ8Y: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ8Z: // global
           I64[Sp - 16] = block_cbZ8V_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$ctraverse_info" {
     Data.Traversable.$fTraversableURec3_$ctraverse_info:
         const Data.Traversable.$fTraversableURec3_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZ8V() //  [R1]
         { []
         }
     {offset
       cbZ8V: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ8V_info" {
     block_cbZ8V_info:
         const _cbZ8V;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.733779522 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec2_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec2_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec2_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbZ9h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ9i; else goto cbZ9j;
       cbZ9i: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ9j: // global
           I64[Sp - 16] = block_cbZ9f_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$ctraverse_info" {
     Data.Traversable.$fTraversableURec2_$ctraverse_info:
         const Data.Traversable.$fTraversableURec2_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZ9f() //  [R1]
         { []
         }
     {offset
       cbZ9f: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ9f_info" {
     block_cbZ9f_info:
         const _cbZ9f;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.738930455 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec1_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec1_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbZ9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ9C; else goto cbZ9D;
       cbZ9C: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ9D: // global
           I64[Sp - 16] = block_cbZ9z_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$ctraverse_info" {
     Data.Traversable.$fTraversableURec1_$ctraverse_info:
         const Data.Traversable.$fTraversableURec1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZ9z() //  [R1]
         { []
         }
     {offset
       cbZ9z: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ9z_info" {
     block_cbZ9z_info:
         const _cbZ9z;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.744661114 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec0_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec0_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec0_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbZ9V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZ9W; else goto cbZ9X;
       cbZ9W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZ9X: // global
           I64[Sp - 16] = block_cbZ9T_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$ctraverse_info" {
     Data.Traversable.$fTraversableURec0_$ctraverse_info:
         const Data.Traversable.$fTraversableURec0_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZ9T() //  [R1]
         { []
         }
     {offset
       cbZ9T: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZ9T_info" {
     block_cbZ9T_info:
         const _cbZ9T;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.750204289 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbZaf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZag; else goto cbZah;
       cbZag: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZah: // global
           I64[Sp - 16] = block_cbZad_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$ctraverse_info" {
     Data.Traversable.$fTraversableURec_$ctraverse_info:
         const Data.Traversable.$fTraversableURec_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZad() //  [R1]
         { []
         }
     {offset
       cbZad: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZad_info" {
     block_cbZad_info:
         const _cbZad;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.755501521 UTC

[section ""data" . Data.Traversable.$dmsequence_closure" {
     Data.Traversable.$dmsequence_closure:
         const Data.Traversable.$dmsequence_info;
 },
 sat_sbWYd_entry() //  [R1]
         { []
         }
     {offset
       cbZaB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZaC; else goto cbZaD;
       cbZaC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZaD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWYd_info" {
     sat_sbWYd_info:
         const sat_sbWYd_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$dmsequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZaE: // global
           _sbWYc::P64 = R3;
           _sbWYb::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbZaF; else goto cbZaG;
       cbZaG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZaI; else goto cbZaH;
       cbZaI: // global
           HpAlloc = 24;
           goto cbZaF;
       cbZaF: // global
           R3 = _sbWYc::P64;
           R2 = _sbWYb::P64;
           R1 = Data.Traversable.$dmsequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZaH: // global
           I64[Hp - 16] = sat_sbWYd_info;
           P64[Hp] = _sbWYc::P64;
           R2 = _sbWYb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Traversable.sequenceA_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmsequence_info" {
     Data.Traversable.$dmsequence_info:
         const Data.Traversable.$dmsequence_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.761133081 UTC

[section ""data" . Data.Traversable.$dmmapM_closure" {
     Data.Traversable.$dmmapM_closure:
         const Data.Traversable.$dmmapM_info;
 },
 sat_sbWYg_entry() //  [R1]
         { []
         }
     {offset
       cbZb1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZb2; else goto cbZb3;
       cbZb2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZb3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbWYg_info" {
     sat_sbWYg_info:
         const sat_sbWYg_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$dmmapM_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZb4: // global
           _sbWYf::P64 = R3;
           _sbWYe::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbZb5; else goto cbZb6;
       cbZb6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZb8; else goto cbZb7;
       cbZb8: // global
           HpAlloc = 24;
           goto cbZb5;
       cbZb5: // global
           R3 = _sbWYf::P64;
           R2 = _sbWYe::P64;
           R1 = Data.Traversable.$dmmapM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZb7: // global
           I64[Hp - 16] = sat_sbWYg_info;
           P64[Hp] = _sbWYf::P64;
           R2 = _sbWYe::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Traversable.traverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmmapM_info" {
     Data.Traversable.$dmmapM_info:
         const Data.Traversable.$dmmapM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.766802288 UTC

[section ""data" . Data.Traversable.$dmsequenceA_closure" {
     Data.Traversable.$dmsequenceA_closure:
         const Data.Traversable.$dmsequenceA_info;
 },
 Data.Traversable.$dmsequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZbn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZbo; else goto cbZbp;
       cbZbo: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$dmsequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZbp: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 24;
           call Data.Traversable.traverse_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmsequenceA_info" {
     Data.Traversable.$dmsequenceA_info:
         const Data.Traversable.$dmsequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.770572704 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZbB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZbC; else goto cbZbD;
       cbZbC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZbD: // global
           I64[Sp - 16] = block_cbZbz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$csequenceA_info" {
     Data.Traversable.$fTraversableURec_$csequenceA_info:
         const Data.Traversable.$fTraversableURec_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZbz() //  [R1]
         { []
         }
     {offset
       cbZbz: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZbz_info" {
     block_cbZbz_info:
         const _cbZbz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.776390293 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$cmapM_closure" {
     Data.Traversable.$fTraversableURec_$cmapM_closure:
         const Data.Traversable.$fTraversableURec_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZbV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZbZ; else goto cbZc0;
       cbZbZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZc0: // global
           I64[Sp - 16] = block_cbZbT_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$cmapM_info" {
     Data.Traversable.$fTraversableURec_$cmapM_info:
         const Data.Traversable.$fTraversableURec_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZbT() //  [R1]
         { []
         }
     {offset
       cbZbT: // global
           I64[Sp] = block_cbZbY_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZbT_info" {
     block_cbZbT_info:
         const _cbZbT;
         const 1;
         const 30;
 },
 _cbZbY() //  [R1]
         { []
         }
     {offset
       cbZbY: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZbY_info" {
     block_cbZbY_info:
         const _cbZbY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.783190498 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$csequence_closure" {
     Data.Traversable.$fTraversableURec_$csequence_closure:
         const Data.Traversable.$fTraversableURec_$csequence_info;
 },
 Data.Traversable.$fTraversableURec_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZcn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZcr; else goto cbZcs;
       cbZcr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZcs: // global
           I64[Sp - 16] = block_cbZcl_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$csequence_info" {
     Data.Traversable.$fTraversableURec_$csequence_info:
         const Data.Traversable.$fTraversableURec_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZcl() //  [R1]
         { []
         }
     {offset
       cbZcl: // global
           I64[Sp] = block_cbZcq_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZcl_info" {
     block_cbZcl_info:
         const _cbZcl;
         const 1;
         const 30;
 },
 _cbZcq() //  [R1]
         { []
         }
     {offset
       cbZcq: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZcq_info" {
     block_cbZcq_info:
         const _cbZcq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.788974609 UTC

[section ""data" . Data.Traversable.$fTraversableURec_closure" {
     Data.Traversable.$fTraversableURec_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec_closure;
         const Data.Foldable.$fFoldableURec_closure;
         const Data.Traversable.$fTraversableURec_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.791746528 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec0_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec0_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec0_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbZcQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZcR; else goto cbZcS;
       cbZcR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZcS: // global
           I64[Sp - 16] = block_cbZcO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$csequenceA_info" {
     Data.Traversable.$fTraversableURec0_$csequenceA_info:
         const Data.Traversable.$fTraversableURec0_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZcO() //  [R1]
         { []
         }
     {offset
       cbZcO: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZcO_info" {
     block_cbZcO_info:
         const _cbZcO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.797037642 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$cmapM_closure" {
     Data.Traversable.$fTraversableURec0_$cmapM_closure:
         const Data.Traversable.$fTraversableURec0_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec0_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZda: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZde; else goto cbZdf;
       cbZde: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZdf: // global
           I64[Sp - 16] = block_cbZd8_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$cmapM_info" {
     Data.Traversable.$fTraversableURec0_$cmapM_info:
         const Data.Traversable.$fTraversableURec0_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZd8() //  [R1]
         { []
         }
     {offset
       cbZd8: // global
           I64[Sp] = block_cbZdd_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZd8_info" {
     block_cbZd8_info:
         const _cbZd8;
         const 1;
         const 30;
 },
 _cbZdd() //  [R1]
         { []
         }
     {offset
       cbZdd: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZdd_info" {
     block_cbZdd_info:
         const _cbZdd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.803953321 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$csequence_closure" {
     Data.Traversable.$fTraversableURec0_$csequence_closure:
         const Data.Traversable.$fTraversableURec0_$csequence_info;
 },
 Data.Traversable.$fTraversableURec0_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZdC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZdG; else goto cbZdH;
       cbZdG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZdH: // global
           I64[Sp - 16] = block_cbZdA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$csequence_info" {
     Data.Traversable.$fTraversableURec0_$csequence_info:
         const Data.Traversable.$fTraversableURec0_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZdA() //  [R1]
         { []
         }
     {offset
       cbZdA: // global
           I64[Sp] = block_cbZdF_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZdA_info" {
     block_cbZdA_info:
         const _cbZdA;
         const 1;
         const 30;
 },
 _cbZdF() //  [R1]
         { []
         }
     {offset
       cbZdF: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZdF_info" {
     block_cbZdF_info:
         const _cbZdF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.810428507 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_closure" {
     Data.Traversable.$fTraversableURec0_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec0_closure;
         const Data.Foldable.$fFoldableURec0_closure;
         const Data.Traversable.$fTraversableURec0_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec0_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec0_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec0_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.812810299 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec1_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec1_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec1_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbZe5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZe6; else goto cbZe7;
       cbZe6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZe7: // global
           I64[Sp - 16] = block_cbZe3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$csequenceA_info" {
     Data.Traversable.$fTraversableURec1_$csequenceA_info:
         const Data.Traversable.$fTraversableURec1_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZe3() //  [R1]
         { []
         }
     {offset
       cbZe3: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZe3_info" {
     block_cbZe3_info:
         const _cbZe3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.818334805 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$cmapM_closure" {
     Data.Traversable.$fTraversableURec1_$cmapM_closure:
         const Data.Traversable.$fTraversableURec1_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZet; else goto cbZeu;
       cbZet: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZeu: // global
           I64[Sp - 16] = block_cbZen_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$cmapM_info" {
     Data.Traversable.$fTraversableURec1_$cmapM_info:
         const Data.Traversable.$fTraversableURec1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZen() //  [R1]
         { []
         }
     {offset
       cbZen: // global
           I64[Sp] = block_cbZes_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZen_info" {
     block_cbZen_info:
         const _cbZen;
         const 1;
         const 30;
 },
 _cbZes() //  [R1]
         { []
         }
     {offset
       cbZes: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZes_info" {
     block_cbZes_info:
         const _cbZes;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.824789013 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$csequence_closure" {
     Data.Traversable.$fTraversableURec1_$csequence_closure:
         const Data.Traversable.$fTraversableURec1_$csequence_info;
 },
 Data.Traversable.$fTraversableURec1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZeR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZeV; else goto cbZeW;
       cbZeV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZeW: // global
           I64[Sp - 16] = block_cbZeP_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$csequence_info" {
     Data.Traversable.$fTraversableURec1_$csequence_info:
         const Data.Traversable.$fTraversableURec1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZeP() //  [R1]
         { []
         }
     {offset
       cbZeP: // global
           I64[Sp] = block_cbZeU_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZeP_info" {
     block_cbZeP_info:
         const _cbZeP;
         const 1;
         const 30;
 },
 _cbZeU() //  [R1]
         { []
         }
     {offset
       cbZeU: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZeU_info" {
     block_cbZeU_info:
         const _cbZeU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.830725815 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_closure" {
     Data.Traversable.$fTraversableURec1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec1_closure;
         const Data.Foldable.$fFoldableURec1_closure;
         const Data.Traversable.$fTraversableURec1_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec1_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.833114785 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec2_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec2_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec2_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbZfk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZfl; else goto cbZfm;
       cbZfl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZfm: // global
           I64[Sp - 16] = block_cbZfi_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$csequenceA_info" {
     Data.Traversable.$fTraversableURec2_$csequenceA_info:
         const Data.Traversable.$fTraversableURec2_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZfi() //  [R1]
         { []
         }
     {offset
       cbZfi: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZfi_info" {
     block_cbZfi_info:
         const _cbZfi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.838774384 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$cmapM_closure" {
     Data.Traversable.$fTraversableURec2_$cmapM_closure:
         const Data.Traversable.$fTraversableURec2_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec2_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZfE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZfI; else goto cbZfJ;
       cbZfI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZfJ: // global
           I64[Sp - 16] = block_cbZfC_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$cmapM_info" {
     Data.Traversable.$fTraversableURec2_$cmapM_info:
         const Data.Traversable.$fTraversableURec2_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZfC() //  [R1]
         { []
         }
     {offset
       cbZfC: // global
           I64[Sp] = block_cbZfH_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZfC_info" {
     block_cbZfC_info:
         const _cbZfC;
         const 1;
         const 30;
 },
 _cbZfH() //  [R1]
         { []
         }
     {offset
       cbZfH: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZfH_info" {
     block_cbZfH_info:
         const _cbZfH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.845966161 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$csequence_closure" {
     Data.Traversable.$fTraversableURec2_$csequence_closure:
         const Data.Traversable.$fTraversableURec2_$csequence_info;
 },
 Data.Traversable.$fTraversableURec2_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZg6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZga; else goto cbZgb;
       cbZga: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZgb: // global
           I64[Sp - 16] = block_cbZg4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$csequence_info" {
     Data.Traversable.$fTraversableURec2_$csequence_info:
         const Data.Traversable.$fTraversableURec2_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZg4() //  [R1]
         { []
         }
     {offset
       cbZg4: // global
           I64[Sp] = block_cbZg9_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZg4_info" {
     block_cbZg4_info:
         const _cbZg4;
         const 1;
         const 30;
 },
 _cbZg9() //  [R1]
         { []
         }
     {offset
       cbZg9: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZg9_info" {
     block_cbZg9_info:
         const _cbZg9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.85219076 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_closure" {
     Data.Traversable.$fTraversableURec2_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec2_closure;
         const Data.Foldable.$fFoldableURec2_closure;
         const Data.Traversable.$fTraversableURec2_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec2_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec2_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec2_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.85459641 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec3_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec3_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec3_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbZgz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZgA; else goto cbZgB;
       cbZgA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZgB: // global
           I64[Sp - 16] = block_cbZgx_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$csequenceA_info" {
     Data.Traversable.$fTraversableURec3_$csequenceA_info:
         const Data.Traversable.$fTraversableURec3_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZgx() //  [R1]
         { []
         }
     {offset
       cbZgx: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZgx_info" {
     block_cbZgx_info:
         const _cbZgx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.859865164 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$cmapM_closure" {
     Data.Traversable.$fTraversableURec3_$cmapM_closure:
         const Data.Traversable.$fTraversableURec3_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec3_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZgT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZgX; else goto cbZgY;
       cbZgX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZgY: // global
           I64[Sp - 16] = block_cbZgR_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$cmapM_info" {
     Data.Traversable.$fTraversableURec3_$cmapM_info:
         const Data.Traversable.$fTraversableURec3_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZgR() //  [R1]
         { []
         }
     {offset
       cbZgR: // global
           I64[Sp] = block_cbZgW_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZgR_info" {
     block_cbZgR_info:
         const _cbZgR;
         const 1;
         const 30;
 },
 _cbZgW() //  [R1]
         { []
         }
     {offset
       cbZgW: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZgW_info" {
     block_cbZgW_info:
         const _cbZgW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.866875642 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$csequence_closure" {
     Data.Traversable.$fTraversableURec3_$csequence_closure:
         const Data.Traversable.$fTraversableURec3_$csequence_info;
 },
 Data.Traversable.$fTraversableURec3_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZhl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZhp; else goto cbZhq;
       cbZhp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZhq: // global
           I64[Sp - 16] = block_cbZhj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$csequence_info" {
     Data.Traversable.$fTraversableURec3_$csequence_info:
         const Data.Traversable.$fTraversableURec3_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZhj() //  [R1]
         { []
         }
     {offset
       cbZhj: // global
           I64[Sp] = block_cbZho_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZhj_info" {
     block_cbZhj_info:
         const _cbZhj;
         const 1;
         const 30;
 },
 _cbZho() //  [R1]
         { []
         }
     {offset
       cbZho: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZho_info" {
     block_cbZho_info:
         const _cbZho;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.873323347 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_closure" {
     Data.Traversable.$fTraversableURec3_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec3_closure;
         const Data.Foldable.$fFoldableURec3_closure;
         const Data.Traversable.$fTraversableURec3_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec3_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec3_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec3_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.875708407 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec4_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec4_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec4_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbZhO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZhP; else goto cbZhQ;
       cbZhP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZhQ: // global
           I64[Sp - 16] = block_cbZhM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$csequenceA_info" {
     Data.Traversable.$fTraversableURec4_$csequenceA_info:
         const Data.Traversable.$fTraversableURec4_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZhM() //  [R1]
         { []
         }
     {offset
       cbZhM: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZhM_info" {
     block_cbZhM_info:
         const _cbZhM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.880947434 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$cmapM_closure" {
     Data.Traversable.$fTraversableURec4_$cmapM_closure:
         const Data.Traversable.$fTraversableURec4_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec4_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZi8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZic; else goto cbZid;
       cbZic: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZid: // global
           I64[Sp - 16] = block_cbZi6_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$cmapM_info" {
     Data.Traversable.$fTraversableURec4_$cmapM_info:
         const Data.Traversable.$fTraversableURec4_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZi6() //  [R1]
         { []
         }
     {offset
       cbZi6: // global
           I64[Sp] = block_cbZib_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZi6_info" {
     block_cbZi6_info:
         const _cbZi6;
         const 1;
         const 30;
 },
 _cbZib() //  [R1]
         { []
         }
     {offset
       cbZib: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZib_info" {
     block_cbZib_info:
         const _cbZib;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.887743217 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$csequence_closure" {
     Data.Traversable.$fTraversableURec4_$csequence_closure:
         const Data.Traversable.$fTraversableURec4_$csequence_info;
 },
 Data.Traversable.$fTraversableURec4_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZiA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZiE; else goto cbZiF;
       cbZiE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZiF: // global
           I64[Sp - 16] = block_cbZiy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$csequence_info" {
     Data.Traversable.$fTraversableURec4_$csequence_info:
         const Data.Traversable.$fTraversableURec4_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZiy() //  [R1]
         { []
         }
     {offset
       cbZiy: // global
           I64[Sp] = block_cbZiD_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZiy_info" {
     block_cbZiy_info:
         const _cbZiy;
         const 1;
         const 30;
 },
 _cbZiD() //  [R1]
         { []
         }
     {offset
       cbZiD: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZiD_info" {
     block_cbZiD_info:
         const _cbZiD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.894115989 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_closure" {
     Data.Traversable.$fTraversableURec4_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec4_closure;
         const Data.Foldable.$fFoldableURec4_closure;
         const Data.Traversable.$fTraversableURec4_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec4_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec4_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec4_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.896227293 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$csequenceA_closure" {
     Data.Traversable.$fTraversable:.:_$csequenceA_closure:
         const Data.Traversable.$fTraversable:.:_$csequenceA_info;
 },
 Data.Traversable.$fTraversable:.:_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cbZj1: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$csequenceA_info" {
     Data.Traversable.$fTraversable:.:_$csequenceA_info:
         const Data.Traversable.$fTraversable:.:_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.900108875 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$cmapM_closure" {
     Data.Traversable.$fTraversable:.:_$cmapM_closure:
         const Data.Traversable.$fTraversable:.:_$cmapM_info;
 },
 Data.Traversable.$fTraversable:.:_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cbZje: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZjf; else goto cbZjg;
       cbZjf: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZjg: // global
           I64[Sp - 40] = block_cbZjc_info;
           _sbX06::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sbX06::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$cmapM_info" {
     Data.Traversable.$fTraversable:.:_$cmapM_info:
         const Data.Traversable.$fTraversable:.:_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cbZjc() //  [R1]
         { []
         }
     {offset
       cbZjc: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZjc_info" {
     block_cbZjc_info:
         const _cbZjc;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.906371964 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$csequence_closure" {
     Data.Traversable.$fTraversable:.:_$csequence_closure:
         const Data.Traversable.$fTraversable:.:_$csequence_info;
 },
 Data.Traversable.$fTraversable:.:_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cbZjy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZjz; else goto cbZjA;
       cbZjz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZjA: // global
           I64[Sp - 32] = block_cbZjw_info;
           _sbX0c::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sbX0c::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$csequence_info" {
     Data.Traversable.$fTraversable:.:_$csequence_info:
         const Data.Traversable.$fTraversable:.:_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbZjw() //  [R1]
         { []
         }
     {offset
       cbZjw: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZjw_info" {
     block_cbZjw_info:
         const _cbZjw;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.913647931 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_closure" {
     Data.Traversable.$fTraversable:.:_closure:
         const Data.Traversable.$fTraversable:.:_info;
         const 0;
 },
 sat_sbX0o_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZjV: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:.:_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0o_info" {
     sat_sbX0o_info:
         const sat_sbX0o_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sbX0n_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZk3: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:.:_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0n_info" {
     sat_sbX0n_info:
         const sat_sbX0n_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sbX0m_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZkb: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:.:_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0m_info" {
     sat_sbX0m_info:
         const sat_sbX0m_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sbX0l_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZkj: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0l_info" {
     sat_sbX0l_info:
         const sat_sbX0l_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sbX0k_entry() //  [R1]
         { []
         }
     {offset
       cbZkq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZkr; else goto cbZks;
       cbZkr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:.:_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX0k_info" {
     sat_sbX0k_info:
         const sat_sbX0k_entry;
         const 2;
         const 4294967314;
         const SbXeW_srt+72;
 },
 sat_sbX0j_entry() //  [R1]
         { []
         }
     {offset
       cbZkx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZky; else goto cbZkz;
       cbZky: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZkz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:.:_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX0j_info" {
     sat_sbX0j_info:
         const sat_sbX0j_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversable:.:_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZkB: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cbZkF; else goto cbZkE;
       cbZkF: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZkE: // global
           I64[Hp - 208] = sat_sbX0o_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sbX0n_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sbX0m_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sbX0l_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sbX0k_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sbX0j_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_info" {
     Data.Traversable.$fTraversable:.:_info:
         const Data.Traversable.$fTraversable:.:_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbXeW_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.927449218 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$csequenceA_closure" {
     Data.Traversable.$fTraversable:*:_$csequenceA_closure:
         const Data.Traversable.$fTraversable:*:_$csequenceA_info;
 },
 Data.Traversable.$fTraversable:*:_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cbZli: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZlj; else goto cbZlk;
       cbZlj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$csequenceA_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZlk: // global
           I64[Sp - 32] = block_cbZlf_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubZlo; else goto cbZlg;
       ubZlo: // global
           call _cbZlf(R1) args: 0, res: 0, upd: 0;
       cbZlg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$csequenceA_info" {
     Data.Traversable.$fTraversable:*:_$csequenceA_info:
         const Data.Traversable.$fTraversable:*:_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbZlf() //  [R1]
         { []
         }
     {offset
       cbZlf: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZlf_info" {
     block_cbZlf_info:
         const _cbZlf;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.933543694 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$cmapM_closure" {
     Data.Traversable.$fTraversable:*:_$cmapM_closure:
         const Data.Traversable.$fTraversable:*:_$cmapM_info;
 },
 Data.Traversable.$fTraversable:*:_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cbZlG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZlK; else goto cbZlL;
       cbZlK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZlL: // global
           I64[Sp - 40] = block_cbZlD_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZlR; else goto cbZlE;
       ubZlR: // global
           call _cbZlD(R1) args: 0, res: 0, upd: 0;
       cbZlE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$cmapM_info" {
     Data.Traversable.$fTraversable:*:_$cmapM_info:
         const Data.Traversable.$fTraversable:*:_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cbZlD() //  [R1]
         { []
         }
     {offset
       cbZlD: // global
           I64[Sp - 8] = block_cbZlJ_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZlD_info" {
     block_cbZlD_info:
         const _cbZlD;
         const 4;
         const 30;
 },
 _cbZlJ() //  [R1]
         { []
         }
     {offset
       cbZlJ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 40];
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZlJ_info" {
     block_cbZlJ_info:
         const _cbZlJ;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.941679799 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$csequence_closure" {
     Data.Traversable.$fTraversable:*:_$csequence_closure:
         const Data.Traversable.$fTraversable:*:_$csequence_info;
 },
 Data.Traversable.$fTraversable:*:_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cbZme: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZmi; else goto cbZmj;
       cbZmi: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZmj: // global
           I64[Sp - 32] = block_cbZmb_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubZmp; else goto cbZmc;
       ubZmp: // global
           call _cbZmb(R1) args: 0, res: 0, upd: 0;
       cbZmc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$csequence_info" {
     Data.Traversable.$fTraversable:*:_$csequence_info:
         const Data.Traversable.$fTraversable:*:_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbZmb() //  [R1]
         { []
         }
     {offset
       cbZmb: // global
           I64[Sp - 8] = block_cbZmh_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZmb_info" {
     block_cbZmb_info:
         const _cbZmb;
         const 3;
         const 30;
 },
 _cbZmh() //  [R1]
         { []
         }
     {offset
       cbZmh: // global
           R6 = P64[Sp + 32];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZmh_info" {
     block_cbZmh_info:
         const _cbZmh;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.950829584 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_closure" {
     Data.Traversable.$fTraversable:*:_closure:
         const Data.Traversable.$fTraversable:*:_info;
         const 0;
 },
 sat_sbX0U_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZmO: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:*:_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0U_info" {
     sat_sbX0U_info:
         const sat_sbX0U_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sbX0T_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZmW: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:*:_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0T_info" {
     sat_sbX0T_info:
         const sat_sbX0T_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sbX0S_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZn4: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:*:_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0S_info" {
     sat_sbX0S_info:
         const sat_sbX0S_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sbX0R_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZnc: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:*:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX0R_info" {
     sat_sbX0R_info:
         const sat_sbX0R_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sbX0Q_entry() //  [R1]
         { []
         }
     {offset
       cbZnj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZnk; else goto cbZnl;
       cbZnk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZnl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:*:_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX0Q_info" {
     sat_sbX0Q_info:
         const sat_sbX0Q_entry;
         const 2;
         const 4294967314;
         const SbXeW_srt+56;
 },
 sat_sbX0P_entry() //  [R1]
         { []
         }
     {offset
       cbZnq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZnr; else goto cbZns;
       cbZnr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZns: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:*:_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX0P_info" {
     sat_sbX0P_info:
         const sat_sbX0P_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversable:*:_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZnu: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cbZny; else goto cbZnx;
       cbZny: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZnx: // global
           I64[Hp - 208] = sat_sbX0U_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sbX0T_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sbX0S_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sbX0R_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sbX0Q_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sbX0P_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_info" {
     Data.Traversable.$fTraversable:*:_info:
         const Data.Traversable.$fTraversable:*:_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const SbXeW_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.967097525 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$csequenceA_closure" {
     Data.Traversable.$fTraversable:+:_$csequenceA_closure:
         const Data.Traversable.$fTraversable:+:_$csequenceA_info;
 },
 Data.Traversable.$fTraversable:+:_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cbZo8: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$csequenceA_info" {
     Data.Traversable.$fTraversable:+:_$csequenceA_info:
         const Data.Traversable.$fTraversable:+:_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.971990714 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$cmapM_closure" {
     Data.Traversable.$fTraversable:+:_$cmapM_closure:
         const Data.Traversable.$fTraversable:+:_$cmapM_info;
 },
 Data.Traversable.$fTraversable:+:_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cbZol: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZom; else goto cbZon;
       cbZom: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZon: // global
           I64[Sp - 40] = block_cbZoj_info;
           _sbX0Y::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sbX0Y::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$cmapM_info" {
     Data.Traversable.$fTraversable:+:_$cmapM_info:
         const Data.Traversable.$fTraversable:+:_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cbZoj() //  [R1]
         { []
         }
     {offset
       cbZoj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZoj_info" {
     block_cbZoj_info:
         const _cbZoj;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.97877593 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$csequence_closure" {
     Data.Traversable.$fTraversable:+:_$csequence_closure:
         const Data.Traversable.$fTraversable:+:_$csequence_info;
 },
 Data.Traversable.$fTraversable:+:_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cbZoF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZoG; else goto cbZoH;
       cbZoG: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZoH: // global
           I64[Sp - 32] = block_cbZoD_info;
           _sbX14::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sbX14::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$csequence_info" {
     Data.Traversable.$fTraversable:+:_$csequence_info:
         const Data.Traversable.$fTraversable:+:_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbZoD() //  [R1]
         { []
         }
     {offset
       cbZoD: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZoD_info" {
     block_cbZoD_info:
         const _cbZoD;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:50.988380757 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_closure" {
     Data.Traversable.$fTraversable:+:_closure:
         const Data.Traversable.$fTraversable:+:_info;
         const 0;
 },
 sat_sbX1g_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZp2: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:+:_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1g_info" {
     sat_sbX1g_info:
         const sat_sbX1g_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sbX1f_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZpa: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:+:_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1f_info" {
     sat_sbX1f_info:
         const sat_sbX1f_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sbX1e_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZpi: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:+:_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1e_info" {
     sat_sbX1e_info:
         const sat_sbX1e_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sbX1d_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZpq: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1d_info" {
     sat_sbX1d_info:
         const sat_sbX1d_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sbX1c_entry() //  [R1]
         { []
         }
     {offset
       cbZpx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZpy; else goto cbZpz;
       cbZpy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZpz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:+:_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1c_info" {
     sat_sbX1c_info:
         const sat_sbX1c_entry;
         const 2;
         const 4294967314;
         const SbXeW_srt+40;
 },
 sat_sbX1b_entry() //  [R1]
         { []
         }
     {offset
       cbZpE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZpF; else goto cbZpG;
       cbZpF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZpG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:+:_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1b_info" {
     sat_sbX1b_info:
         const sat_sbX1b_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversable:+:_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZpI: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cbZpM; else goto cbZpL;
       cbZpM: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZpL: // global
           I64[Hp - 208] = sat_sbX1g_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sbX1f_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sbX1e_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sbX1d_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sbX1c_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sbX1b_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_info" {
     Data.Traversable.$fTraversable:+:_info:
         const Data.Traversable.$fTraversable:+:_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const SbXeW_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.004422764 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$csequenceA_closure" {
     Data.Traversable.$fTraversableM1_$csequenceA_closure:
         const Data.Traversable.$fTraversableM1_$csequenceA_info;
 },
 sat_sbX1l_entry() //  [R1]
         { []
         }
     {offset
       cbZqq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZqr; else goto cbZqs;
       cbZqr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZqs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1l_info" {
     sat_sbX1l_info:
         const sat_sbX1l_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$csequenceA_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cbZqv: // global
           _sbX1j::P64 = R4;
           _sbX1i::P64 = R3;
           _sbX1h::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZqw; else goto cbZqx;
       cbZqx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbZqz; else goto cbZqy;
       cbZqz: // global
           HpAlloc = 40;
           goto cbZqw;
       cbZqw: // global
           R4 = _sbX1j::P64;
           R3 = _sbX1i::P64;
           R2 = _sbX1h::P64;
           R1 = Data.Traversable.$fTraversableM1_$csequenceA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZqy: // global
           I64[Hp - 32] = sat_sbX1l_info;
           P64[Hp - 16] = _sbX1h::P64;
           P64[Hp - 8] = _sbX1i::P64;
           P64[Hp] = _sbX1j::P64;
           I64[Sp - 16] = block_cbZqt_info;
           R2 = _sbX1i::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$csequenceA_info" {
     Data.Traversable.$fTraversableM1_$csequenceA_info:
         const Data.Traversable.$fTraversableM1_$csequenceA_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZqt() //  [R1]
         { []
         }
     {offset
       cbZqt: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZqt_info" {
     block_cbZqt_info:
         const _cbZqt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.012320885 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$cmapM_closure" {
     Data.Traversable.$fTraversableM1_$cmapM_closure:
         const Data.Traversable.$fTraversableM1_$cmapM_info;
 },
 sat_sbX1s_entry() //  [R1]
         { []
         }
     {offset
       cbZr4: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZr5; else goto cbZr6;
       cbZr5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZr6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1s_info" {
     sat_sbX1s_info:
         const sat_sbX1s_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$cmapM_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cbZr7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZr9; else goto cbZra;
       cbZr9: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$cmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZra: // global
           I64[Sp - 32] = block_cbZqW_info;
           _sbX1m::P64 = R2;
           R2 = R3;
           P64[Sp - 24] = _sbX1m::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$cmapM_info" {
     Data.Traversable.$fTraversableM1_$cmapM_info:
         const Data.Traversable.$fTraversableM1_$cmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbZqW() //  [R1]
         { []
         }
     {offset
       cbZqW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZrd; else goto cbZrc;
       cbZrd: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZrc: // global
           I64[Hp - 40] = sat_sbX1s_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp + 16] = block_cbZr8_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 40;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZqW_info" {
     block_cbZqW_info:
         const _cbZqW;
         const 3;
         const 30;
 },
 _cbZr8() //  [R1]
         { []
         }
     {offset
       cbZr8: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZr8_info" {
     block_cbZr8_info:
         const _cbZr8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.021693943 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$csequence_closure" {
     Data.Traversable.$fTraversableM1_$csequence_closure:
         const Data.Traversable.$fTraversableM1_$csequence_info;
 },
 sat_sbX1y_entry() //  [R1]
         { []
         }
     {offset
       cbZrQ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZrR; else goto cbZrS;
       cbZrR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZrS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1y_info" {
     sat_sbX1y_info:
         const sat_sbX1y_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$csequence_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cbZrT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZrV; else goto cbZrW;
       cbZrV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$csequence_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZrW: // global
           I64[Sp - 24] = block_cbZrI_info;
           _sbX1t::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _sbX1t::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$csequence_info" {
     Data.Traversable.$fTraversableM1_$csequence_info:
         const Data.Traversable.$fTraversableM1_$csequence_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZrI() //  [R1]
         { []
         }
     {offset
       cbZrI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbZrZ; else goto cbZrY;
       cbZrZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZrY: // global
           I64[Hp - 32] = sat_sbX1y_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cbZrU_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZrI_info" {
     block_cbZrI_info:
         const _cbZrI;
         const 2;
         const 30;
 },
 _cbZrU() //  [R1]
         { []
         }
     {offset
       cbZrU: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZrU_info" {
     block_cbZrU_info:
         const _cbZrU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.032870558 UTC

[section ""data" . Data.Traversable.$fTraversableM1_closure" {
     Data.Traversable.$fTraversableM1_closure:
         const Data.Traversable.$fTraversableM1_info;
         const 0;
 },
 sat_sbX1F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZsx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableM1_$csequence_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1F_info" {
     sat_sbX1F_info:
         const sat_sbX1F_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbX1E_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZsF: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableM1_$cmapM_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1E_info" {
     sat_sbX1E_info:
         const sat_sbX1E_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbX1D_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZsN: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableM1_$csequenceA_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1D_info" {
     sat_sbX1D_info:
         const sat_sbX1D_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbX1C_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZsV: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableM1_$ctraverse_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX1C_info" {
     sat_sbX1C_info:
         const sat_sbX1C_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbX1B_entry() //  [R1]
         { []
         }
     {offset
       cbZt2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZt3; else goto cbZt4;
       cbZt3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZt4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableM1_$cp2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1B_info" {
     sat_sbX1B_info:
         const sat_sbX1B_entry;
         const 1;
         const 4294967312;
         const SbXeW_srt+24;
 },
 sat_sbX1A_entry() //  [R1]
         { []
         }
     {offset
       cbZt9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZta; else goto cbZtb;
       cbZta: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZtb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableM1_$cp1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1A_info" {
     sat_sbX1A_info:
         const sat_sbX1A_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableM1_entry() //  [R2]
         { []
         }
     {offset
       cbZtd: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cbZth; else goto cbZtg;
       cbZth: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZtg: // global
           I64[Hp - 160] = sat_sbX1F_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sbX1E_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbX1D_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbX1C_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sbX1B_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbX1A_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 109;
           P64[Hp - 16] = Hp - 126;
           P64[Hp - 8] = Hp - 141;
           P64[Hp] = Hp - 158;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_info" {
     Data.Traversable.$fTraversableM1_info:
         const Data.Traversable.$fTraversableM1_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const SbXeW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.045738343 UTC

[section ""data" . Data.Traversable.$fTraversableK1_$cmapM_closure" {
     Data.Traversable.$fTraversableK1_$cmapM_closure:
         const Data.Traversable.$fTraversableK1_$cmapM_info;
 },
 Data.Traversable.$fTraversableK1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZtT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZtU; else goto cbZtV;
       cbZtU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableK1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZtV: // global
           I64[Sp - 16] = block_cbZtR_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableK1_$cmapM_info" {
     Data.Traversable.$fTraversableK1_$cmapM_info:
         const Data.Traversable.$fTraversableK1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZtR() //  [R1]
         { []
         }
     {offset
       cbZtR: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZtR_info" {
     block_cbZtR_info:
         const _cbZtR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.050813877 UTC

[section ""data" . Data.Traversable.$fTraversableK1_$csequence_closure" {
     Data.Traversable.$fTraversableK1_$csequence_closure:
         const Data.Traversable.$fTraversableK1_$csequence_info;
 },
 Data.Traversable.$fTraversableK1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZud: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZue; else goto cbZuf;
       cbZue: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableK1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZuf: // global
           I64[Sp - 16] = block_cbZub_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableK1_$csequence_info" {
     Data.Traversable.$fTraversableK1_$csequence_info:
         const Data.Traversable.$fTraversableK1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZub() //  [R1]
         { []
         }
     {offset
       cbZub: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZub_info" {
     block_cbZub_info:
         const _cbZub;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.055770022 UTC

[section ""data" . $fTraversableK2_rbWTS_closure" {
     $fTraversableK2_rbWTS_closure:
         const $fTraversableK2_rbWTS_info;
 },
 $fTraversableK2_rbWTS_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZuv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZuw; else goto cbZux;
       cbZuw: // global
           R3 = R3;
           R2 = R2;
           R1 = $fTraversableK2_rbWTS_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZux: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fTraversableK2_rbWTS_info" {
     $fTraversableK2_rbWTS_info:
         const $fTraversableK2_rbWTS_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.05965836 UTC

[section ""data" . Data.Traversable.$fTraversableK1_closure" {
     Data.Traversable.$fTraversableK1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorK1_closure;
         const Data.Foldable.$fFoldableK1_closure;
         const Data.Traversable.$fTraversableK1_$ctraverse_closure+3;
         const $fTraversableK2_rbWTS_closure+2;
         const Data.Traversable.$fTraversableK1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableK1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.062578047 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$csequenceA_closure" {
     Data.Traversable.$fTraversableRec1_$csequenceA_closure:
         const Data.Traversable.$fTraversableRec1_$csequenceA_info;
 },
 sat_sbX1T_entry() //  [R1]
         { []
         }
     {offset
       cbZuM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZuN; else goto cbZuO;
       cbZuN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZuO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX1T_info" {
     sat_sbX1T_info:
         const sat_sbX1T_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$csequenceA_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbZuR: // global
           _sbX1R::P64 = R4;
           _sbX1Q::P64 = R3;
           _sbX1P::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZuS; else goto cbZuT;
       cbZuT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbZuV; else goto cbZuU;
       cbZuV: // global
           HpAlloc = 40;
           goto cbZuS;
       cbZuS: // global
           R4 = _sbX1R::P64;
           R3 = _sbX1Q::P64;
           R2 = _sbX1P::P64;
           R1 = Data.Traversable.$fTraversableRec1_$csequenceA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZuU: // global
           I64[Hp - 32] = sat_sbX1T_info;
           P64[Hp - 16] = _sbX1P::P64;
           P64[Hp - 8] = _sbX1Q::P64;
           P64[Hp] = _sbX1R::P64;
           I64[Sp - 16] = block_cbZuP_info;
           R2 = _sbX1Q::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$csequenceA_info" {
     Data.Traversable.$fTraversableRec1_$csequenceA_info:
         const Data.Traversable.$fTraversableRec1_$csequenceA_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZuP() //  [R1]
         { []
         }
     {offset
       cbZuP: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZuP_info" {
     block_cbZuP_info:
         const _cbZuP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.070798575 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$cmapM_closure" {
     Data.Traversable.$fTraversableRec1_$cmapM_closure:
         const Data.Traversable.$fTraversableRec1_$cmapM_info;
 },
 sat_sbX20_entry() //  [R1]
         { []
         }
     {offset
       cbZvq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZvr; else goto cbZvs;
       cbZvr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZvs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX20_info" {
     sat_sbX20_info:
         const sat_sbX20_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$cmapM_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cbZvt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZvv; else goto cbZvw;
       cbZvv: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$cmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZvw: // global
           I64[Sp - 32] = block_cbZvi_info;
           _sbX1U::P64 = R2;
           R2 = R3;
           P64[Sp - 24] = _sbX1U::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$cmapM_info" {
     Data.Traversable.$fTraversableRec1_$cmapM_info:
         const Data.Traversable.$fTraversableRec1_$cmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbZvi() //  [R1]
         { []
         }
     {offset
       cbZvi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZvz; else goto cbZvy;
       cbZvz: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZvy: // global
           I64[Hp - 40] = sat_sbX20_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp + 16] = block_cbZvu_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 40;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZvi_info" {
     block_cbZvi_info:
         const _cbZvi;
         const 3;
         const 30;
 },
 _cbZvu() //  [R1]
         { []
         }
     {offset
       cbZvu: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZvu_info" {
     block_cbZvu_info:
         const _cbZvu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.080096087 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$csequence_closure" {
     Data.Traversable.$fTraversableRec1_$csequence_closure:
         const Data.Traversable.$fTraversableRec1_$csequence_info;
 },
 sat_sbX26_entry() //  [R1]
         { []
         }
     {offset
       cbZwc: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbZwd; else goto cbZwe;
       cbZwd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZwe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX26_info" {
     sat_sbX26_info:
         const sat_sbX26_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$csequence_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbZwf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZwh; else goto cbZwi;
       cbZwh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$csequence_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZwi: // global
           I64[Sp - 24] = block_cbZw4_info;
           _sbX21::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _sbX21::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$csequence_info" {
     Data.Traversable.$fTraversableRec1_$csequence_info:
         const Data.Traversable.$fTraversableRec1_$csequence_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZw4() //  [R1]
         { []
         }
     {offset
       cbZw4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbZwl; else goto cbZwk;
       cbZwl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZwk: // global
           I64[Hp - 32] = sat_sbX26_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cbZwg_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZw4_info" {
     block_cbZw4_info:
         const _cbZw4;
         const 2;
         const 30;
 },
 _cbZwg() //  [R1]
         { []
         }
     {offset
       cbZwg: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZwg_info" {
     block_cbZwg_info:
         const _cbZwg;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.090800155 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_closure" {
     Data.Traversable.$fTraversableRec1_closure:
         const Data.Traversable.$fTraversableRec1_info;
         const 0;
 },
 sat_sbX2d_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZwT: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableRec1_$csequence_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX2d_info" {
     sat_sbX2d_info:
         const sat_sbX2d_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbX2c_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZx1: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableRec1_$cmapM_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX2c_info" {
     sat_sbX2c_info:
         const sat_sbX2c_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbX2b_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZx9: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableRec1_$csequenceA_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX2b_info" {
     sat_sbX2b_info:
         const sat_sbX2b_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbX2a_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZxh: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableRec1_$ctraverse_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX2a_info" {
     sat_sbX2a_info:
         const sat_sbX2a_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbX29_entry() //  [R1]
         { []
         }
     {offset
       cbZxo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZxp; else goto cbZxq;
       cbZxp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZxq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableRec1_$cp2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX29_info" {
     sat_sbX29_info:
         const sat_sbX29_entry;
         const 1;
         const 4294967312;
         const SbXeW_srt+8;
 },
 sat_sbX28_entry() //  [R1]
         { []
         }
     {offset
       cbZxv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZxw; else goto cbZxx;
       cbZxw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZxx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableRec1_$cp1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX28_info" {
     sat_sbX28_info:
         const sat_sbX28_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableRec1_entry() //  [R2]
         { []
         }
     {offset
       cbZxz: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cbZxD; else goto cbZxC;
       cbZxD: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZxC: // global
           I64[Hp - 160] = sat_sbX2d_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sbX2c_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbX2b_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbX2a_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sbX29_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbX28_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 109;
           P64[Hp - 16] = Hp - 126;
           P64[Hp - 8] = Hp - 141;
           P64[Hp] = Hp - 158;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_info" {
     Data.Traversable.$fTraversableRec1_info:
         const Data.Traversable.$fTraversableRec1_entry;
         const 0;
         const 35188667056142;
         const 4294967301;
         const SbXeW_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.104588879 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$csequenceA_closure" {
     Data.Traversable.$fTraversablePar1_$csequenceA_closure:
         const Data.Traversable.$fTraversablePar1_$csequenceA_info;
 },
 Data.Traversable.$fTraversablePar1_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZyf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZyg; else goto cbZyh;
       cbZyg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversablePar1_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZyh: // global
           I64[Sp - 16] = block_cbZyd_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$csequenceA_info" {
     Data.Traversable.$fTraversablePar1_$csequenceA_info:
         const Data.Traversable.$fTraversablePar1_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZyd() //  [R1]
         { []
         }
     {offset
       cbZyd: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZyd_info" {
     block_cbZyd_info:
         const _cbZyd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.110275702 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$cmapM_closure" {
     Data.Traversable.$fTraversablePar1_$cmapM_closure:
         const Data.Traversable.$fTraversablePar1_$cmapM_info;
 },
 Data.Traversable.$fTraversablePar1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZyA: // global
           _sbX2j::P64 = R4;
           _sbX2i::P64 = R3;
           _sbX2h::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZyE; else goto cbZyF;
       cbZyF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZyH; else goto cbZyG;
       cbZyH: // global
           HpAlloc = 32;
           goto cbZyE;
       cbZyE: // global
           R4 = _sbX2j::P64;
           R3 = _sbX2i::P64;
           R2 = _sbX2h::P64;
           R1 = Data.Traversable.$fTraversablePar1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZyG: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbX2i::P64;
           P64[Hp] = _sbX2j::P64;
           I64[Sp - 16] = block_cbZyy_info;
           R2 = _sbX2h::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$cmapM_info" {
     Data.Traversable.$fTraversablePar1_$cmapM_info:
         const Data.Traversable.$fTraversablePar1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZyy() //  [R1]
         { []
         }
     {offset
       cbZyy: // global
           I64[Sp] = block_cbZyD_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZyy_info" {
     block_cbZyy_info:
         const _cbZyy;
         const 1;
         const 30;
 },
 _cbZyD() //  [R1]
         { []
         }
     {offset
       cbZyD: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZyD_info" {
     block_cbZyD_info:
         const _cbZyD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.117091653 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$csequence_closure" {
     Data.Traversable.$fTraversablePar1_$csequence_closure:
         const Data.Traversable.$fTraversablePar1_$csequence_info;
 },
 Data.Traversable.$fTraversablePar1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZz5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZz9; else goto cbZza;
       cbZz9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversablePar1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZza: // global
           I64[Sp - 16] = block_cbZz3_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$csequence_info" {
     Data.Traversable.$fTraversablePar1_$csequence_info:
         const Data.Traversable.$fTraversablePar1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZz3() //  [R1]
         { []
         }
     {offset
       cbZz3: // global
           I64[Sp] = block_cbZz8_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZz3_info" {
     block_cbZz3_info:
         const _cbZz3;
         const 1;
         const 30;
 },
 _cbZz8() //  [R1]
         { []
         }
     {offset
       cbZz8: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZz8_info" {
     block_cbZz8_info:
         const _cbZz8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.123372502 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_closure" {
     Data.Traversable.$fTraversablePar1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorPar1_closure;
         const Data.Foldable.$fFoldablePar1_closure;
         const Data.Traversable.$fTraversablePar1_$ctraverse_closure+3;
         const Data.Traversable.$fTraversablePar1_$csequenceA_closure+2;
         const Data.Traversable.$fTraversablePar1_$cmapM_closure+3;
         const Data.Traversable.$fTraversablePar1_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.125719751 UTC

[section ""data" . Data.Traversable.$fTraversableV1_$cmapM_closure" {
     Data.Traversable.$fTraversableV1_$cmapM_closure:
         const Data.Traversable.$fTraversableV1_$cmapM_info;
 },
 Data.Traversable.$fTraversableV1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZzy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZzz; else goto cbZzA;
       cbZzz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableV1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZzA: // global
           I64[Sp - 16] = block_cbZzw_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableV1_$cmapM_info" {
     Data.Traversable.$fTraversableV1_$cmapM_info:
         const Data.Traversable.$fTraversableV1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZzw() //  [R1]
         { []
         }
     {offset
       cbZzw: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZzw_info" {
     block_cbZzw_info:
         const _cbZzw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.13122634 UTC

[section ""data" . Data.Traversable.$fTraversableV1_$csequence_closure" {
     Data.Traversable.$fTraversableV1_$csequence_closure:
         const Data.Traversable.$fTraversableV1_$csequence_info;
 },
 Data.Traversable.$fTraversableV1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZzS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZzT; else goto cbZzU;
       cbZzT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableV1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZzU: // global
           I64[Sp - 16] = block_cbZzQ_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableV1_$csequence_info" {
     Data.Traversable.$fTraversableV1_$csequence_info:
         const Data.Traversable.$fTraversableV1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZzQ() //  [R1]
         { []
         }
     {offset
       cbZzQ: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZzQ_info" {
     block_cbZzQ_info:
         const _cbZzQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.136364303 UTC

[section ""data" . $fTraversableV2_rbWTT_closure" {
     $fTraversableV2_rbWTT_closure:
         const $fTraversableV2_rbWTT_info;
 },
 $fTraversableV2_rbWTT_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZAa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZAb; else goto cbZAc;
       cbZAb: // global
           R3 = R3;
           R2 = R2;
           R1 = $fTraversableV2_rbWTT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZAc: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fTraversableV2_rbWTT_info" {
     $fTraversableV2_rbWTT_info:
         const $fTraversableV2_rbWTT_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.139500754 UTC

[section ""data" . Data.Traversable.$fTraversableV1_closure" {
     Data.Traversable.$fTraversableV1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorV1_closure;
         const Data.Foldable.$fFoldableV1_closure;
         const Data.Traversable.$fTraversableV1_$ctraverse_closure+3;
         const $fTraversableV2_rbWTT_closure+2;
         const Data.Traversable.$fTraversableV1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableV1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.141782546 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$csequenceA_closure" {
     Data.Traversable.$fTraversableIdentity_$csequenceA_closure:
         const Data.Traversable.$fTraversableIdentity_$csequenceA_info;
 },
 Data.Traversable.$fTraversableIdentity_$csequenceA_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cbZAp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZAq; else goto cbZAr;
       cbZAq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableIdentity_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZAr: // global
           I64[Sp - 16] = block_cbZAn_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$csequenceA_info" {
     Data.Traversable.$fTraversableIdentity_$csequenceA_info:
         const Data.Traversable.$fTraversableIdentity_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZAn() //  [R1]
         { []
         }
     {offset
       cbZAn: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZAn_info" {
     block_cbZAn_info:
         const _cbZAn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.147473486 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$cmapM_closure" {
     Data.Traversable.$fTraversableIdentity_$cmapM_closure:
         const Data.Traversable.$fTraversableIdentity_$cmapM_info;
 },
 Data.Traversable.$fTraversableIdentity_$cmapM_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbZAK: // global
           _sbX2F::P64 = R4;
           _sbX2E::P64 = R3;
           _sbX2D::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZAO; else goto cbZAP;
       cbZAP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZAR; else goto cbZAQ;
       cbZAR: // global
           HpAlloc = 32;
           goto cbZAO;
       cbZAO: // global
           R4 = _sbX2F::P64;
           R3 = _sbX2E::P64;
           R2 = _sbX2D::P64;
           R1 = Data.Traversable.$fTraversableIdentity_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZAQ: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbX2E::P64;
           P64[Hp] = _sbX2F::P64;
           I64[Sp - 16] = block_cbZAI_info;
           R2 = _sbX2D::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$cmapM_info" {
     Data.Traversable.$fTraversableIdentity_$cmapM_info:
         const Data.Traversable.$fTraversableIdentity_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZAI() //  [R1]
         { []
         }
     {offset
       cbZAI: // global
           I64[Sp] = block_cbZAN_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZAI_info" {
     block_cbZAI_info:
         const _cbZAI;
         const 1;
         const 30;
 },
 _cbZAN() //  [R1]
         { []
         }
     {offset
       cbZAN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZAN_info" {
     block_cbZAN_info:
         const _cbZAN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.154298976 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$csequence_closure" {
     Data.Traversable.$fTraversableIdentity_$csequence_closure:
         const Data.Traversable.$fTraversableIdentity_$csequence_info;
 },
 Data.Traversable.$fTraversableIdentity_$csequence_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZBf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZBj; else goto cbZBk;
       cbZBj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableIdentity_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZBk: // global
           I64[Sp - 16] = block_cbZBd_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$csequence_info" {
     Data.Traversable.$fTraversableIdentity_$csequence_info:
         const Data.Traversable.$fTraversableIdentity_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZBd() //  [R1]
         { []
         }
     {offset
       cbZBd: // global
           I64[Sp] = block_cbZBi_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZBd_info" {
     block_cbZBd_info:
         const _cbZBd;
         const 1;
         const 30;
 },
 _cbZBi() //  [R1]
         { []
         }
     {offset
       cbZBi: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZBi_info" {
     block_cbZBi_info:
         const _cbZBi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.160480688 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_closure" {
     Data.Traversable.$fTraversableIdentity_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Functor.Identity.$fFunctorIdentity_closure;
         const Data.Functor.Identity.$fFoldableIdentity_closure;
         const Data.Traversable.$fTraversableIdentity_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableIdentity_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableIdentity_$cmapM_closure+3;
         const Data.Traversable.$fTraversableIdentity_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.163558771 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$csequenceA_closure" {
     Data.Traversable.$fTraversableProduct_$csequenceA_closure:
         const Data.Traversable.$fTraversableProduct_$csequenceA_info;
 },
 Data.Traversable.$fTraversableProduct_$csequenceA_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZBI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZBJ; else goto cbZBK;
       cbZBJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProduct_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZBK: // global
           I64[Sp - 16] = block_cbZBG_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$csequenceA_info" {
     Data.Traversable.$fTraversableProduct_$csequenceA_info:
         const Data.Traversable.$fTraversableProduct_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZBG() //  [R1]
         { []
         }
     {offset
       cbZBG: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZBG_info" {
     block_cbZBG_info:
         const _cbZBG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.169053879 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$cmapM_closure" {
     Data.Traversable.$fTraversableProduct_$cmapM_closure:
         const Data.Traversable.$fTraversableProduct_$cmapM_info;
 },
 Data.Traversable.$fTraversableProduct_$cmapM_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cbZC3: // global
           _sbX2S::P64 = R4;
           _sbX2R::P64 = R3;
           _sbX2Q::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZC7; else goto cbZC8;
       cbZC8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZCa; else goto cbZC9;
       cbZCa: // global
           HpAlloc = 32;
           goto cbZC7;
       cbZC7: // global
           R4 = _sbX2S::P64;
           R3 = _sbX2R::P64;
           R2 = _sbX2Q::P64;
           R1 = Data.Traversable.$fTraversableProduct_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZC9: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbX2R::P64;
           P64[Hp] = _sbX2S::P64;
           I64[Sp - 16] = block_cbZC1_info;
           R2 = _sbX2Q::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$cmapM_info" {
     Data.Traversable.$fTraversableProduct_$cmapM_info:
         const Data.Traversable.$fTraversableProduct_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZC1() //  [R1]
         { []
         }
     {offset
       cbZC1: // global
           I64[Sp] = block_cbZC6_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZC1_info" {
     block_cbZC1_info:
         const _cbZC1;
         const 1;
         const 30;
 },
 _cbZC6() //  [R1]
         { []
         }
     {offset
       cbZC6: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZC6_info" {
     block_cbZC6_info:
         const _cbZC6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.175994429 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$csequence_closure" {
     Data.Traversable.$fTraversableProduct_$csequence_closure:
         const Data.Traversable.$fTraversableProduct_$csequence_info;
 },
 Data.Traversable.$fTraversableProduct_$csequence_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cbZCy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZCC; else goto cbZCD;
       cbZCC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProduct_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZCD: // global
           I64[Sp - 16] = block_cbZCw_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$csequence_info" {
     Data.Traversable.$fTraversableProduct_$csequence_info:
         const Data.Traversable.$fTraversableProduct_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZCw() //  [R1]
         { []
         }
     {offset
       cbZCw: // global
           I64[Sp] = block_cbZCB_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZCw_info" {
     block_cbZCw_info:
         const _cbZCw;
         const 1;
         const 30;
 },
 _cbZCB() //  [R1]
         { []
         }
     {offset
       cbZCB: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZCB_info" {
     block_cbZCB_info:
         const _cbZCB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.182145717 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_closure" {
     Data.Traversable.$fTraversableProduct_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.Internal.$fFunctorProduct_closure;
         const Data.Foldable.$fFoldableProduct_closure;
         const Data.Traversable.$fTraversableProduct_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableProduct_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableProduct_$cmapM_closure+3;
         const Data.Traversable.$fTraversableProduct_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.184524236 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$csequenceA_closure" {
     Data.Traversable.$fTraversableSum_$csequenceA_closure:
         const Data.Traversable.$fTraversableSum_$csequenceA_info;
 },
 Data.Traversable.$fTraversableSum_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZD1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZD2; else goto cbZD3;
       cbZD2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableSum_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZD3: // global
           I64[Sp - 16] = block_cbZCZ_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$csequenceA_info" {
     Data.Traversable.$fTraversableSum_$csequenceA_info:
         const Data.Traversable.$fTraversableSum_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZCZ() //  [R1]
         { []
         }
     {offset
       cbZCZ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZCZ_info" {
     block_cbZCZ_info:
         const _cbZCZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.189986766 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$cmapM_closure" {
     Data.Traversable.$fTraversableSum_$cmapM_closure:
         const Data.Traversable.$fTraversableSum_$cmapM_info;
 },
 Data.Traversable.$fTraversableSum_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZDm: // global
           _sbX35::P64 = R4;
           _sbX34::P64 = R3;
           _sbX33::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZDq; else goto cbZDr;
       cbZDr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZDt; else goto cbZDs;
       cbZDt: // global
           HpAlloc = 32;
           goto cbZDq;
       cbZDq: // global
           R4 = _sbX35::P64;
           R3 = _sbX34::P64;
           R2 = _sbX33::P64;
           R1 = Data.Traversable.$fTraversableSum_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZDs: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbX34::P64;
           P64[Hp] = _sbX35::P64;
           I64[Sp - 16] = block_cbZDk_info;
           R2 = _sbX33::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$cmapM_info" {
     Data.Traversable.$fTraversableSum_$cmapM_info:
         const Data.Traversable.$fTraversableSum_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZDk() //  [R1]
         { []
         }
     {offset
       cbZDk: // global
           I64[Sp] = block_cbZDp_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZDk_info" {
     block_cbZDk_info:
         const _cbZDk;
         const 1;
         const 30;
 },
 _cbZDp() //  [R1]
         { []
         }
     {offset
       cbZDp: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZDp_info" {
     block_cbZDp_info:
         const _cbZDp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.197601775 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$csequence_closure" {
     Data.Traversable.$fTraversableSum_$csequence_closure:
         const Data.Traversable.$fTraversableSum_$csequence_info;
 },
 Data.Traversable.$fTraversableSum_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZDR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZDV; else goto cbZDW;
       cbZDV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableSum_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZDW: // global
           I64[Sp - 16] = block_cbZDP_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$csequence_info" {
     Data.Traversable.$fTraversableSum_$csequence_info:
         const Data.Traversable.$fTraversableSum_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZDP() //  [R1]
         { []
         }
     {offset
       cbZDP: // global
           I64[Sp] = block_cbZDU_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZDP_info" {
     block_cbZDP_info:
         const _cbZDP;
         const 1;
         const 30;
 },
 _cbZDU() //  [R1]
         { []
         }
     {offset
       cbZDU: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZDU_info" {
     block_cbZDU_info:
         const _cbZDU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.20337607 UTC

[section ""data" . Data.Traversable.$fTraversableSum_closure" {
     Data.Traversable.$fTraversableSum_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.Internal.$fFunctorSum_closure;
         const Data.Foldable.$fFoldableSum_closure;
         const Data.Traversable.$fTraversableSum_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableSum_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableSum_$cmapM_closure+3;
         const Data.Traversable.$fTraversableSum_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.205762152 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$csequenceA_closure" {
     Data.Traversable.$fTraversableDual_$csequenceA_closure:
         const Data.Traversable.$fTraversableDual_$csequenceA_info;
 },
 Data.Traversable.$fTraversableDual_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZEk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZEl; else goto cbZEm;
       cbZEl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableDual_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZEm: // global
           I64[Sp - 16] = block_cbZEi_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$csequenceA_info" {
     Data.Traversable.$fTraversableDual_$csequenceA_info:
         const Data.Traversable.$fTraversableDual_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZEi() //  [R1]
         { []
         }
     {offset
       cbZEi: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZEi_info" {
     block_cbZEi_info:
         const _cbZEi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.211456747 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$cmapM_closure" {
     Data.Traversable.$fTraversableDual_$cmapM_closure:
         const Data.Traversable.$fTraversableDual_$cmapM_info;
 },
 Data.Traversable.$fTraversableDual_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZEF: // global
           _sbX3i::P64 = R4;
           _sbX3h::P64 = R3;
           _sbX3g::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZEJ; else goto cbZEK;
       cbZEK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZEM; else goto cbZEL;
       cbZEM: // global
           HpAlloc = 32;
           goto cbZEJ;
       cbZEJ: // global
           R4 = _sbX3i::P64;
           R3 = _sbX3h::P64;
           R2 = _sbX3g::P64;
           R1 = Data.Traversable.$fTraversableDual_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZEL: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbX3h::P64;
           P64[Hp] = _sbX3i::P64;
           I64[Sp - 16] = block_cbZED_info;
           R2 = _sbX3g::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$cmapM_info" {
     Data.Traversable.$fTraversableDual_$cmapM_info:
         const Data.Traversable.$fTraversableDual_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZED() //  [R1]
         { []
         }
     {offset
       cbZED: // global
           I64[Sp] = block_cbZEI_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZED_info" {
     block_cbZED_info:
         const _cbZED;
         const 1;
         const 30;
 },
 _cbZEI() //  [R1]
         { []
         }
     {offset
       cbZEI: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZEI_info" {
     block_cbZEI_info:
         const _cbZEI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.218402377 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$csequence_closure" {
     Data.Traversable.$fTraversableDual_$csequence_closure:
         const Data.Traversable.$fTraversableDual_$csequence_info;
 },
 Data.Traversable.$fTraversableDual_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZFa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZFe; else goto cbZFf;
       cbZFe: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableDual_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZFf: // global
           I64[Sp - 16] = block_cbZF8_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$csequence_info" {
     Data.Traversable.$fTraversableDual_$csequence_info:
         const Data.Traversable.$fTraversableDual_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZF8() //  [R1]
         { []
         }
     {offset
       cbZF8: // global
           I64[Sp] = block_cbZFd_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZF8_info" {
     block_cbZF8_info:
         const _cbZF8;
         const 1;
         const 30;
 },
 _cbZFd() //  [R1]
         { []
         }
     {offset
       cbZFd: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZFd_info" {
     block_cbZFd_info:
         const _cbZFd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.224400354 UTC

[section ""data" . Data.Traversable.$fTraversableDual_closure" {
     Data.Traversable.$fTraversableDual_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.Internal.$fFunctorDual_closure;
         const Data.Foldable.$fFoldableDual_closure;
         const Data.Traversable.$fTraversableDual_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableDual_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableDual_$cmapM_closure+3;
         const Data.Traversable.$fTraversableDual_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.227409681 UTC

[section ""data" . Data.Traversable.$fTraversableConst_$cmapM_closure" {
     Data.Traversable.$fTraversableConst_$cmapM_closure:
         const Data.Traversable.$fTraversableConst_$cmapM_info;
 },
 Data.Traversable.$fTraversableConst_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZFE; else goto cbZFF;
       cbZFE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableConst_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZFF: // global
           I64[Sp - 16] = block_cbZFB_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableConst_$cmapM_info" {
     Data.Traversable.$fTraversableConst_$cmapM_info:
         const Data.Traversable.$fTraversableConst_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZFB() //  [R1]
         { []
         }
     {offset
       cbZFB: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZFB_info" {
     block_cbZFB_info:
         const _cbZFB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.232399709 UTC

[section ""data" . Data.Traversable.$fTraversableConst_$csequence_closure" {
     Data.Traversable.$fTraversableConst_$csequence_closure:
         const Data.Traversable.$fTraversableConst_$csequence_info;
 },
 Data.Traversable.$fTraversableConst_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZFX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZFY; else goto cbZFZ;
       cbZFY: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableConst_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZFZ: // global
           I64[Sp - 16] = block_cbZFV_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableConst_$csequence_info" {
     Data.Traversable.$fTraversableConst_$csequence_info:
         const Data.Traversable.$fTraversableConst_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZFV() //  [R1]
         { []
         }
     {offset
       cbZFV: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZFV_info" {
     block_cbZFV_info:
         const _cbZFV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.23766135 UTC

[section ""data" . $fTraversableConst1_rbWTU_closure" {
     $fTraversableConst1_rbWTU_closure:
         const $fTraversableConst1_rbWTU_info;
 },
 $fTraversableConst1_rbWTU_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZGg; else goto cbZGh;
       cbZGg: // global
           R3 = R3;
           R2 = R2;
           R1 = $fTraversableConst1_rbWTU_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZGh: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fTraversableConst1_rbWTU_info" {
     $fTraversableConst1_rbWTU_info:
         const $fTraversableConst1_rbWTU_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.240742154 UTC

[section ""data" . Data.Traversable.$fTraversableConst_closure" {
     Data.Traversable.$fTraversableConst_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Functor.Const.$fFunctorConst_closure;
         const Data.Functor.Const.$fFoldableConst_closure;
         const Data.Traversable.$fTraversableConst_$ctraverse_closure+3;
         const $fTraversableConst1_rbWTU_closure+2;
         const Data.Traversable.$fTraversableConst_$cmapM_closure+3;
         const Data.Traversable.$fTraversableConst_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.244077821 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$csequenceA_closure" {
     Data.Traversable.$fTraversable(,)_$csequenceA_closure:
         const Data.Traversable.$fTraversable(,)_$csequenceA_info;
 },
 sat_sbX3F_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZGD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZGH; else goto cbZGG;
       cbZGH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZGG: // global
           _sbX3C::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbX3C::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX3F_info" {
     sat_sbX3F_info:
         const sat_sbX3F_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZGI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZGK; else goto cbZGL;
       cbZGK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZGL: // global
           I64[Sp - 16] = block_cbZGs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubZGT; else goto cbZGt;
       ubZGT: // global
           call _cbZGs(R1) args: 0, res: 0, upd: 0;
       cbZGt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$csequenceA_info" {
     Data.Traversable.$fTraversable(,)_$csequenceA_info:
         const Data.Traversable.$fTraversable(,)_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZGs() //  [R1]
         { []
         }
     {offset
       cbZGs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbZGO; else goto cbZGN;
       cbZGO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZGN: // global
           _sbX3C::P64 = P64[R1 + 7];
           _sbX3D::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sbX3F_info;
           P64[Hp] = _sbX3C::P64;
           I64[Sp - 8] = block_cbZGJ_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sbX3D::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZGs_info" {
     block_cbZGs_info:
         const _cbZGs;
         const 1;
         const 30;
 },
 _cbZGJ() //  [R1]
         { []
         }
     {offset
       cbZGJ: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sbX3D::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sbX3D::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZGJ_info" {
     block_cbZGJ_info:
         const _cbZGJ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.254143336 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$cmapM_closure" {
     Data.Traversable.$fTraversable(,)_$cmapM_closure:
         const Data.Traversable.$fTraversable(,)_$cmapM_info;
 },
 sat_sbX3O_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZHs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZHw; else goto cbZHv;
       cbZHw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZHv: // global
           _sbX3K::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbX3K::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX3O_info" {
     sat_sbX3O_info:
         const sat_sbX3O_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZHx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZHD; else goto cbZHE;
       cbZHD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZHE: // global
           I64[Sp - 24] = block_cbZHg_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubZHN; else goto cbZHh;
       ubZHN: // global
           call _cbZHg(R1) args: 0, res: 0, upd: 0;
       cbZHh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$cmapM_info" {
     Data.Traversable.$fTraversable(,)_$cmapM_info:
         const Data.Traversable.$fTraversable(,)_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZHg() //  [R1]
         { []
         }
     {offset
       cbZHg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZHH; else goto cbZHG;
       cbZHH: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZHG: // global
           _sbX3K::P64 = P64[R1 + 7];
           _sbX3L::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sbX3L::P64;
           I64[Hp - 8] = sat_sbX3O_info;
           P64[Hp] = _sbX3K::P64;
           I64[Sp] = block_cbZHy_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZHg_info" {
     block_cbZHg_info:
         const _cbZHg;
         const 2;
         const 30;
 },
 _cbZHy() //  [R1]
         { []
         }
     {offset
       cbZHy: // global
           I64[Sp] = block_cbZHC_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZHy_info" {
     block_cbZHy_info:
         const _cbZHy;
         const 2;
         const 30;
 },
 _cbZHC() //  [R1]
         { []
         }
     {offset
       cbZHC: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZHC_info" {
     block_cbZHC_info:
         const _cbZHC;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.266602763 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$csequence_closure" {
     Data.Traversable.$fTraversable(,)_$csequence_closure:
         const Data.Traversable.$fTraversable(,)_$csequence_info;
 },
 sat_sbX3X_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZIp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZIt; else goto cbZIs;
       cbZIt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZIs: // global
           _sbX3T::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbX3T::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX3X_info" {
     sat_sbX3X_info:
         const sat_sbX3X_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZIu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZIA; else goto cbZIB;
       cbZIA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZIB: // global
           I64[Sp - 16] = block_cbZIe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubZIK; else goto cbZIf;
       ubZIK: // global
           call _cbZIe(R1) args: 0, res: 0, upd: 0;
       cbZIf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$csequence_info" {
     Data.Traversable.$fTraversable(,)_$csequence_info:
         const Data.Traversable.$fTraversable(,)_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZIe() //  [R1]
         { []
         }
     {offset
       cbZIe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbZIE; else goto cbZID;
       cbZIE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZID: // global
           _sbX3T::P64 = P64[R1 + 7];
           _sbX3U::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sbX3X_info;
           P64[Hp] = _sbX3T::P64;
           I64[Sp - 8] = block_cbZIv_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sbX3U::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZIe_info" {
     block_cbZIe_info:
         const _cbZIe;
         const 1;
         const 30;
 },
 _cbZIv() //  [R1]
         { []
         }
     {offset
       cbZIv: // global
           I64[Sp] = block_cbZIz_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZIv_info" {
     block_cbZIv_info:
         const _cbZIv;
         const 2;
         const 30;
 },
 _cbZIz() //  [R1]
         { []
         }
     {offset
       cbZIz: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sbX3U::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sbX3U::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZIz_info" {
     block_cbZIz_info:
         const _cbZIz;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.277081617 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_closure" {
     Data.Traversable.$fTraversable(,)_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctor(,)_closure;
         const Data.Foldable.$fFoldable(,)_closure;
         const Data.Traversable.$fTraversable(,)_$ctraverse_closure+3;
         const Data.Traversable.$fTraversable(,)_$csequenceA_closure+2;
         const Data.Traversable.$fTraversable(,)_$cmapM_closure+3;
         const Data.Traversable.$fTraversable(,)_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.28032062 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$csequenceA_closure" {
     Data.Traversable.$fTraversableEither_$csequenceA_closure:
         const Data.Traversable.$fTraversableEither_$csequenceA_info;
 },
 Data.Traversable.$fTraversableEither_$csequenceA_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cbZJi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZJj; else goto cbZJk;
       cbZJj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZJk: // global
           I64[Sp - 16] = block_cbZJb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubZJw; else goto cbZJc;
       ubZJw: // global
           call _cbZJb(R1) args: 0, res: 0, upd: 0;
       cbZJc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$csequenceA_info" {
     Data.Traversable.$fTraversableEither_$csequenceA_info:
         const Data.Traversable.$fTraversableEither_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZJb() //  [R1]
         { []
         }
     {offset
       cbZJb: // global
           _sbX3Y::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbZJf; else goto cbZJg;
       cbZJf: // global
           R2 = _sbX3Y::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cbZJg: // global
           I64[Sp] = block_cbZJq_info;
           R2 = _sbX3Y::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZJb_info" {
     block_cbZJb_info:
         const _cbZJb;
         const 1;
         const 30;
 },
 _cbZJq() //  [R1]
         { []
         }
     {offset
       cbZJq: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZJq_info" {
     block_cbZJq_info:
         const _cbZJq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.288385055 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$cmapM_closure" {
     Data.Traversable.$fTraversableEither_$cmapM_closure:
         const Data.Traversable.$fTraversableEither_$cmapM_info;
 },
 Data.Traversable.$fTraversableEither_$cmapM_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cbZJS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZJT; else goto cbZJU;
       cbZJT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZJU: // global
           I64[Sp - 24] = block_cbZJQ_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$cmapM_info" {
     Data.Traversable.$fTraversableEither_$cmapM_info:
         const Data.Traversable.$fTraversableEither_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZJQ() //  [R1]
         { []
         }
     {offset
       cbZJQ: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableEither_$ctraverse_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZJQ_info" {
     block_cbZJQ_info:
         const _cbZJQ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.294950788 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$csequence_closure" {
     Data.Traversable.$fTraversableEither_$csequence_closure:
         const Data.Traversable.$fTraversableEither_$csequence_info;
 },
 Data.Traversable.$fTraversableEither_$csequence_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbZKh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZKi; else goto cbZKj;
       cbZKi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZKj: // global
           I64[Sp - 16] = block_cbZKa_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubZKF; else goto cbZKb;
       ubZKF: // global
           call _cbZKa(R1) args: 0, res: 0, upd: 0;
       cbZKb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$csequence_info" {
     Data.Traversable.$fTraversableEither_$csequence_info:
         const Data.Traversable.$fTraversableEither_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZKa() //  [R1]
         { []
         }
     {offset
       cbZKa: // global
           _sbX49::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbZKe; else goto cbZKf;
       cbZKe: // global
           I64[Sp] = block_cbZKm_info;
           R2 = _sbX49::P64;
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
       cbZKf: // global
           I64[Sp] = block_cbZKu_info;
           R2 = _sbX49::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZKa_info" {
     block_cbZKa_info:
         const _cbZKa;
         const 1;
         const 30;
 },
 _cbZKm() //  [R1]
         { []
         }
     {offset
       cbZKm: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZKm_info" {
     block_cbZKm_info:
         const _cbZKm;
         const 1;
         const 30;
 },
 _cbZKu() //  [R1]
         { []
         }
     {offset
       cbZKu: // global
           I64[Sp] = block_cbZKy_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZKu_info" {
     block_cbZKu_info:
         const _cbZKu;
         const 1;
         const 30;
 },
 _cbZKy() //  [R1]
         { []
         }
     {offset
       cbZKy: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZKy_info" {
     block_cbZKy_info:
         const _cbZKy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.30522689 UTC

[section ""data" . Data.Traversable.$fTraversableEither_closure" {
     Data.Traversable.$fTraversableEither_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Either.$fFunctorEither_closure;
         const Data.Foldable.$fFoldableEither_closure;
         const Data.Traversable.$fTraversableEither_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableEither_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableEither_$cmapM_closure+3;
         const Data.Traversable.$fTraversableEither_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.309443987 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$csequenceA_closure" {
     Data.Traversable.$fTraversable[]_$csequenceA_closure:
         const Data.Traversable.$fTraversable[]_$csequenceA_info;
 },
 z_sbX4j_entry() //  [R1]
         { []
         }
     {offset
       cbZLa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZLb; else goto cbZLc;
       cbZLb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZLc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbX4j_info" {
     z_sbX4j_info:
         const z_sbX4j_entry;
         const 1;
         const 16;
 },
 go_sbX4k_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZLp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZLq; else goto cbZLr;
       cbZLq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZLr: // global
           I64[Sp - 32] = block_cbZLi_info;
           _sbX4k::P64 = R1;
           _sbX4i::P64 = P64[R1 + 7];
           _sbX4j::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sbX4i::P64;
           P64[Sp - 16] = _sbX4j::P64;
           P64[Sp - 8] = _sbX4k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubZLB; else goto cbZLj;
       ubZLB: // global
           call _cbZLi(R1) args: 0, res: 0, upd: 0;
       cbZLj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sbX4k_info" {
     go_sbX4k_info:
         const go_sbX4k_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cbZLi() //  [R1]
         { []
         }
     {offset
       cbZLi: // global
           if (R1 & 7 == 1) goto cbZLm; else goto cbZLn;
       cbZLm: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbZLn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZLz; else goto cbZLy;
       cbZLz: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZLy: // global
           _sbX4n::P64 = P64[R1 + 6];
           _sbX4o::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sbX4o::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = GHC.Types.:_closure+2;
           P64[Sp + 16] = _sbX4n::P64;
           P64[Sp + 24] = Hp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZLi_info" {
     block_cbZLi_info:
         const _cbZLi;
         const 3;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$csequenceA_entry() //  [R2]
         { []
         }
     {offset
       cbZLC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbZLG; else goto cbZLF;
       cbZLG: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$csequenceA_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZLF: // global
           I64[Hp - 40] = z_sbX4j_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_sbX4k_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$csequenceA_info" {
     Data.Traversable.$fTraversable[]_$csequenceA_info:
         const Data.Traversable.$fTraversable[]_$csequenceA_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.320238354 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$cmapM_closure" {
     Data.Traversable.$fTraversable[]_$cmapM_closure:
         const Data.Traversable.$fTraversable[]_$cmapM_info;
 },
 $dApplicative_sbX4s_entry() //  [R1]
         { []
         }
     {offset
       cbZMb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZMc; else goto cbZMd;
       cbZMc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZMd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbX4s_info" {
     $dApplicative_sbX4s_info:
         const $dApplicative_sbX4s_entry;
         const 1;
         const 16;
 },
 z_sbX4t_entry() //  [R1]
         { []
         }
     {offset
       cbZMi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZMj; else goto cbZMk;
       cbZMj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZMk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbX4t_info" {
     z_sbX4t_info:
         const z_sbX4t_entry;
         const 1;
         const 16;
 },
 go_sbX4u_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZMx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZMy; else goto cbZMz;
       cbZMy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZMz: // global
           I64[Sp - 40] = block_cbZMq_info;
           _sbX4u::P64 = R1;
           _sbX4r::P64 = P64[R1 + 7];
           _sbX4s::P64 = P64[R1 + 15];
           _sbX4t::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sbX4r::P64;
           P64[Sp - 24] = _sbX4s::P64;
           P64[Sp - 16] = _sbX4t::P64;
           P64[Sp - 8] = _sbX4u::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZMK; else goto cbZMr;
       ubZMK: // global
           call _cbZMq(R1) args: 0, res: 0, upd: 0;
       cbZMr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sbX4u_info" {
     go_sbX4u_info:
         const go_sbX4u_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cbZMq() //  [R1]
         { []
         }
     {offset
       cbZMq: // global
           if (R1 & 7 == 1) goto cbZMu; else goto cbZMv;
       cbZMu: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbZMv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbZMH; else goto cbZMG;
       cbZMH: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZMG: // global
           _sbX4x::P64 = P64[R1 + 6];
           _sbX4y::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sbX4y::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sbX4x::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZMq_info" {
     block_cbZMq_info:
         const _cbZMq;
         const 4;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$cmapM_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZML: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbZMP; else goto cbZMO;
       cbZMP: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$cmapM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZMO: // global
           I64[Hp - 72] = $dApplicative_sbX4s_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = z_sbX4t_info;
           _cbZM7::P64 = Hp - 72;
           P64[Hp - 32] = _cbZM7::P64;
           I64[Hp - 24] = go_sbX4u_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = _cbZM7::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$cmapM_info" {
     Data.Traversable.$fTraversable[]_$cmapM_info:
         const Data.Traversable.$fTraversable[]_$cmapM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.333023029 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$csequence_closure" {
     Data.Traversable.$fTraversable[]_$csequence_closure:
         const Data.Traversable.$fTraversable[]_$csequence_info;
 },
 $dApplicative_sbX4C_entry() //  [R1]
         { []
         }
     {offset
       cbZNq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZNr; else goto cbZNs;
       cbZNr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZNs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbX4C_info" {
     $dApplicative_sbX4C_info:
         const $dApplicative_sbX4C_entry;
         const 1;
         const 16;
 },
 z_sbX4D_entry() //  [R1]
         { []
         }
     {offset
       cbZNx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZNy; else goto cbZNz;
       cbZNy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZNz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbX4D_info" {
     z_sbX4D_info:
         const z_sbX4D_entry;
         const 1;
         const 16;
 },
 go_sbX4E_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZNM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZNN; else goto cbZNO;
       cbZNN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZNO: // global
           I64[Sp - 32] = block_cbZNF_info;
           _sbX4E::P64 = R1;
           _sbX4C::P64 = P64[R1 + 7];
           _sbX4D::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sbX4C::P64;
           P64[Sp - 16] = _sbX4D::P64;
           P64[Sp - 8] = _sbX4E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubZNY; else goto cbZNG;
       ubZNY: // global
           call _cbZNF(R1) args: 0, res: 0, upd: 0;
       cbZNG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sbX4E_info" {
     go_sbX4E_info:
         const go_sbX4E_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cbZNF() //  [R1]
         { []
         }
     {offset
       cbZNF: // global
           if (R1 & 7 == 1) goto cbZNJ; else goto cbZNK;
       cbZNJ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbZNK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZNW; else goto cbZNV;
       cbZNW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZNV: // global
           _sbX4H::P64 = P64[R1 + 6];
           _sbX4I::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sbX4I::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = GHC.Types.:_closure+2;
           P64[Sp + 16] = _sbX4H::P64;
           P64[Sp + 24] = Hp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZNF_info" {
     block_cbZNF_info:
         const _cbZNF;
         const 3;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$csequence_entry() //  [R2]
         { []
         }
     {offset
       cbZNZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbZO3; else goto cbZO2;
       cbZO3: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$csequence_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZO2: // global
           I64[Hp - 64] = $dApplicative_sbX4C_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = z_sbX4D_info;
           _cbZNm::P64 = Hp - 64;
           P64[Hp - 24] = _cbZNm::P64;
           I64[Hp - 16] = go_sbX4E_info;
           P64[Hp - 8] = _cbZNm::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$csequence_info" {
     Data.Traversable.$fTraversable[]_$csequence_info:
         const Data.Traversable.$fTraversable[]_$csequence_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.344153004 UTC

[section ""data" . Data.Traversable.$fTraversable[]_closure" {
     Data.Traversable.$fTraversable[]_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctor[]_closure;
         const Data.Foldable.$fFoldable[]_closure;
         const Data.Traversable.$fTraversable[]_$ctraverse_closure+2;
         const Data.Traversable.$fTraversable[]_$csequenceA_closure+1;
         const Data.Traversable.$fTraversable[]_$cmapM_closure+2;
         const Data.Traversable.$fTraversable[]_$csequence_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.346236446 UTC

[section ""data" . Data.Traversable.$fTraversableZipList1_closure" {
     Data.Traversable.$fTraversableZipList1_closure:
         const Data.Traversable.$fTraversableZipList1_info;
 },
 Data.Traversable.$fTraversableZipList1_entry() //  [R2]
         { []
         }
     {offset
       cbZOz: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList1_info" {
     Data.Traversable.$fTraversableZipList1_info:
         const Data.Traversable.$fTraversableZipList1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.352070699 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$ctraverse_closure" {
     Data.Traversable.$fTraversableZipList_$ctraverse_closure:
         const Data.Traversable.$fTraversableZipList_$ctraverse_info;
 },
 z_sbX4P_entry() //  [R1]
         { []
         }
     {offset
       cbZOU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZOV; else goto cbZOW;
       cbZOV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZOW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbX4P_info" {
     z_sbX4P_info:
         const z_sbX4P_entry;
         const 1;
         const 16;
 },
 go_sbX4Q_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZP9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZPa; else goto cbZPb;
       cbZPa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZPb: // global
           I64[Sp - 40] = block_cbZP2_info;
           _sbX4Q::P64 = R1;
           _sbX4L::P64 = P64[R1 + 7];
           _sbX4M::P64 = P64[R1 + 15];
           _sbX4P::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sbX4L::P64;
           P64[Sp - 24] = _sbX4M::P64;
           P64[Sp - 16] = _sbX4P::P64;
           P64[Sp - 8] = _sbX4Q::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZPm; else goto cbZP3;
       ubZPm: // global
           call _cbZP2(R1) args: 0, res: 0, upd: 0;
       cbZP3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sbX4Q_info" {
     go_sbX4Q_info:
         const go_sbX4Q_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cbZP2() //  [R1]
         { []
         }
     {offset
       cbZP2: // global
           if (R1 & 7 == 1) goto cbZP6; else goto cbZP7;
       cbZP6: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbZP7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbZPj; else goto cbZPi;
       cbZPj: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZPi: // global
           _sbX4T::P64 = P64[R1 + 6];
           _sbX4U::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sbX4U::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sbX4T::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZP2_info" {
     block_cbZP2_info:
         const _cbZP2;
         const 4;
         const 30;
 },
 sat_sbX4X_entry() //  [R1]
         { []
         }
     {offset
       cbZPn: // global
           _sbX4X::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbZPo; else goto cbZPp;
       cbZPp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbZPr; else goto cbZPq;
       cbZPr: // global
           HpAlloc = 56;
           goto cbZPo;
       cbZPo: // global
           R1 = _sbX4X::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZPq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbX4X::P64;
           _sbX4L::P64 = P64[_sbX4X::P64 + 16];
           _sbX4M::P64 = P64[_sbX4X::P64 + 24];
           _sbX4N::P64 = P64[_sbX4X::P64 + 32];
           I64[Hp - 48] = z_sbX4P_info;
           P64[Hp - 32] = _sbX4L::P64;
           I64[Hp - 24] = go_sbX4Q_info;
           P64[Hp - 16] = _sbX4L::P64;
           P64[Hp - 8] = _sbX4M::P64;
           P64[Hp] = Hp - 48;
           R2 = _sbX4N::P64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_sbX4Q_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX4X_info" {
     sat_sbX4X_info:
         const sat_sbX4X_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableZipList_$ctraverse_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbZPu: // global
           _sbX4N::P64 = R4;
           _sbX4M::P64 = R3;
           _sbX4L::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZPv; else goto cbZPw;
       cbZPw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbZPy; else goto cbZPx;
       cbZPy: // global
           HpAlloc = 40;
           goto cbZPv;
       cbZPv: // global
           R4 = _sbX4N::P64;
           R3 = _sbX4M::P64;
           R2 = _sbX4L::P64;
           R1 = Data.Traversable.$fTraversableZipList_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZPx: // global
           I64[Hp - 32] = sat_sbX4X_info;
           P64[Hp - 16] = _sbX4L::P64;
           P64[Hp - 8] = _sbX4M::P64;
           P64[Hp] = _sbX4N::P64;
           I64[Sp - 16] = block_cbZPs_info;
           R2 = _sbX4L::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$ctraverse_info" {
     Data.Traversable.$fTraversableZipList_$ctraverse_info:
         const Data.Traversable.$fTraversableZipList_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZPs() //  [R1]
         { []
         }
     {offset
       cbZPs: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableZipList1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZPs_info" {
     block_cbZPs_info:
         const _cbZPs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.364679329 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$csequenceA_closure" {
     Data.Traversable.$fTraversableZipList_$csequenceA_closure:
         const Data.Traversable.$fTraversableZipList_$csequenceA_info;
 },
 Data.Traversable.$fTraversableZipList_$csequenceA_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZQc: // global
           R4 = R3;
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           call Data.Traversable.$fTraversableZipList_$ctraverse_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$csequenceA_info" {
     Data.Traversable.$fTraversableZipList_$csequenceA_info:
         const Data.Traversable.$fTraversableZipList_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.368358562 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$cmapM_closure" {
     Data.Traversable.$fTraversableZipList_$cmapM_closure:
         const Data.Traversable.$fTraversableZipList_$cmapM_info;
 },
 Data.Traversable.$fTraversableZipList_$cmapM_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cbZQp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZQq; else goto cbZQr;
       cbZQq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableZipList_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZQr: // global
           I64[Sp - 24] = block_cbZQn_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$cmapM_info" {
     Data.Traversable.$fTraversableZipList_$cmapM_info:
         const Data.Traversable.$fTraversableZipList_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZQn() //  [R1]
         { []
         }
     {offset
       cbZQn: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableZipList_$ctraverse_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZQn_info" {
     block_cbZQn_info:
         const _cbZQn;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.373597762 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$csequence_closure" {
     Data.Traversable.$fTraversableZipList_$csequence_closure:
         const Data.Traversable.$fTraversableZipList_$csequence_info;
 },
 Data.Traversable.$fTraversableZipList_$csequence_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cbZQJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZQK; else goto cbZQL;
       cbZQK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableZipList_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZQL: // global
           I64[Sp - 16] = block_cbZQH_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$csequence_info" {
     Data.Traversable.$fTraversableZipList_$csequence_info:
         const Data.Traversable.$fTraversableZipList_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZQH() //  [R1]
         { []
         }
     {offset
       cbZQH: // global
           R4 = P64[Sp + 8];
           R3 = GHC.Base.id_closure+1;
           R2 = R1;
           Sp = Sp + 16;
           call Data.Traversable.$fTraversableZipList_$ctraverse_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZQH_info" {
     block_cbZQH_info:
         const _cbZQH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.379181845 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_closure" {
     Data.Traversable.$fTraversableZipList_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Control.Applicative.$fFunctorZipList_closure;
         const Control.Applicative.$fFoldableZipList_closure;
         const Data.Traversable.$fTraversableZipList_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableZipList_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableZipList_$cmapM_closure+3;
         const Data.Traversable.$fTraversableZipList_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.386155475 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$ctraverse_closure" {
     Data.Traversable.$fTraversableArray_$ctraverse_closure:
         const Data.Traversable.$fTraversableArray_$ctraverse_info;
         const 0;
 },
 n_sbX5j_entry() //  [R1]
         { []
         }
     {offset
       cbZRi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZRj; else goto cbZRk;
       cbZRj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZRk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n_sbX5j_info" {
     n_sbX5j_info:
         const n_sbX5j_entry;
         const 1;
         const 16;
 },
 sat_sbX5t_entry() //  [R1]
         { []
         }
     {offset
       cbZRC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZRD; else goto cbZRE;
       cbZRD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZRE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sbX5m::I64 = I64[R1 + 40];
           if (_sbX5m::I64 == I64[R1 + 32]) goto cbZRB; else goto cbZRA;
       cbZRB: // global
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbZRA: // global
           R2 = _sbX5m::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go_sbX5l_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX5t_info" {
     sat_sbX5t_info:
         const sat_sbX5t_entry;
         const 8589934594;
         const 15;
 },
 sat_sbX5p_entry() //  [R1]
         { []
         }
     {offset
       cbZRP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZRQ; else goto cbZRR;
       cbZRQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX5p_info" {
     sat_sbX5p_info:
         const sat_sbX5p_entry;
         const 4294967297;
         const 19;
 },
 sat_sbX5q_entry() //  [R1]
         { []
         }
     {offset
       cbZRS: // global
           _sbX5q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbZRT; else goto cbZRU;
       cbZRU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbZRW; else goto cbZRV;
       cbZRW: // global
           HpAlloc = 32;
           goto cbZRT;
       cbZRT: // global
           R1 = _sbX5q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZRV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbX5q::P64;
           _sbX58::P64 = P64[_sbX5q::P64 + 16];
           _sbX5h::P64 = P64[_sbX5q::P64 + 24];
           _sbX5m::I64 = I64[_sbX5q::P64 + 32];
           I64[Hp - 24] = sat_sbX5p_info;
           P64[Hp - 8] = _sbX5h::P64;
           I64[Hp] = _sbX5m::I64;
           R2 = Hp - 24;
           R1 = _sbX58::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX5q_info" {
     sat_sbX5q_info:
         const sat_sbX5q_entry;
         const 4294967298;
         const 15;
 },
 go_sbX5l_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZRX: // global
           _sbX5m::I64 = R2;
           _sbX5l::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbZRY; else goto cbZRZ;
       cbZRZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbZS1; else goto cbZS0;
       cbZS1: // global
           HpAlloc = 88;
           goto cbZRY;
       cbZRY: // global
           R2 = _sbX5m::I64;
           R1 = _sbX5l::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZS0: // global
           _sbX57::P64 = P64[_sbX5l::P64 + 7];
           _sbX58::P64 = P64[_sbX5l::P64 + 15];
           _sbX5h::P64 = P64[_sbX5l::P64 + 23];
           _sbX5j::P64 = P64[_sbX5l::P64 + 31];
           _sbX5i::I64 = I64[_sbX5l::P64 + 39];
           I64[Hp - 80] = sat_sbX5t_info;
           P64[Hp - 64] = _sbX5j::P64;
           P64[Hp - 56] = _sbX5l::P64;
           I64[Hp - 48] = _sbX5i::I64;
           I64[Hp - 40] = _sbX5m::I64;
           I64[Hp - 32] = sat_sbX5q_info;
           P64[Hp - 16] = _sbX58::P64;
           P64[Hp - 8] = _sbX5h::P64;
           I64[Hp] = _sbX5m::I64;
           R2 = _sbX57::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 80;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sbX5l_info" {
     go_sbX5l_info:
         const go_sbX5l_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 sat_sbX5u_entry() //  [R1]
         { []
         }
     {offset
       cbZS2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZS3; else goto cbZS4;
       cbZS3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZS4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cbZR6_info;
           _sbX57::P64 = P64[R1 + 16];
           _sbX58::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sbX57::P64;
           P64[Sp - 24] = _sbX58::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZSb; else goto cbZR7;
       ubZSb: // global
           call _cbZR6(R1) args: 0, res: 0, upd: 0;
       cbZR7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX5u_info" {
     sat_sbX5u_info:
         const sat_sbX5u_entry;
         const 3;
         const 15;
 },
 _cbZR6() //  [R1]
         { []
         }
     {offset
       cbZR6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbZS7; else goto cbZS6;
       cbZS7: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbZS6: // global
           _sbX5h::P64 = P64[R1 + 23];
           _sbX5i::I64 = I64[R1 + 31] - 1;
           I64[Hp - 64] = n_sbX5j_info;
           _sbX57::P64 = P64[Sp + 8];
           P64[Hp - 48] = _sbX57::P64;
           _cbZRe::P64 = Hp - 64;
           if (%MO_S_Le_W64(0, _sbX5i::I64)) goto cbZS9; else goto cbZSa;
       cbZS9: // global
           I64[Hp - 40] = go_sbX5l_info;
           P64[Hp - 32] = _sbX57::P64;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sbX5h::P64;
           P64[Hp - 8] = _cbZRe::P64;
           I64[Hp] = _sbX5i::I64;
           R2 = 0;
           R1 = Hp - 39;
           Sp = Sp + 24;
           call go_sbX5l_entry(R2, R1) args: 24, res: 0, upd: 24;
       cbZSa: // global
           Hp = Hp - 48;
           R1 = _cbZRe::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbZR6_info" {
     block_cbZR6_info:
         const _cbZR6;
         const 2;
         const 30;
 },
 sat_sbX5b_entry() //  [R1]
         { []
         }
     {offset
       cbZSg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZSh; else goto cbZSi;
       cbZSh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZSi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.bounds_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX5b_info" {
     sat_sbX5b_info:
         const sat_sbX5b_entry;
         const 1;
         const 16;
 },
 sat_sbX5c_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZSo: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.listArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX5c_info" {
     sat_sbX5c_info:
         const sat_sbX5c_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SbXeW_srt+120;
 },
 Data.Traversable.$fTraversableArray_$ctraverse_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cbZSt: // global
           _sbX59::P64 = R5;
           _sbX58::P64 = R4;
           _sbX57::P64 = R3;
           _sbX56::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbZSu; else goto cbZSv;
       cbZSv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbZSx; else goto cbZSw;
       cbZSx: // global
           HpAlloc = 88;
           goto cbZSu;
       cbZSu: // global
           R5 = _sbX59::P64;
           R4 = _sbX58::P64;
           R3 = _sbX57::P64;
           R2 = _sbX56::P64;
           R1 = Data.Traversable.$fTraversableArray_$ctraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZSw: // global
           I64[Hp - 80] = sat_sbX5u_info;
           P64[Hp - 64] = _sbX57::P64;
           P64[Hp - 56] = _sbX58::P64;
           P64[Hp - 48] = _sbX59::P64;
           I64[Hp - 40] = sat_sbX5b_info;
           P64[Hp - 24] = _sbX59::P64;
           I64[Hp - 16] = sat_sbX5c_info;
           P64[Hp - 8] = _sbX56::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 24] = block_cbZSr_info;
           R2 = _sbX57::P64;
           P64[Sp - 16] = Hp - 80;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$ctraverse_info" {
     Data.Traversable.$fTraversableArray_$ctraverse_info:
         const Data.Traversable.$fTraversableArray_$ctraverse_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SbXeW_srt+120;
 },
 _cbZSr() //  [R1]
         { []
         }
     {offset
       cbZSr: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _cbZR2::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cbZR2::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZSr_info" {
     block_cbZSr_info:
         const _cbZSr;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.406834446 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$csequenceA_closure" {
     Data.Traversable.$fTraversableArray_$csequenceA_closure:
         const Data.Traversable.$fTraversableArray_$csequenceA_info;
         const 0;
 },
 Data.Traversable.$fTraversableArray_$csequenceA_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cbZTw: // global
           R5 = R4;
           R4 = GHC.Base.id_closure+1;
           R3 = R3;
           R2 = R2;
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$csequenceA_info" {
     Data.Traversable.$fTraversableArray_$csequenceA_info:
         const Data.Traversable.$fTraversableArray_$csequenceA_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SbXeW_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.41064813 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$cmapM_closure" {
     Data.Traversable.$fTraversableArray_$cmapM_closure:
         const Data.Traversable.$fTraversableArray_$cmapM_info;
         const 0;
 },
 Data.Traversable.$fTraversableArray_$cmapM_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cbZTJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZTK; else goto cbZTL;
       cbZTK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableArray_$cmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZTL: // global
           I64[Sp - 32] = block_cbZTH_info;
           _sbX5x::P64 = R2;
           R2 = R3;
           P64[Sp - 24] = _sbX5x::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$cmapM_info" {
     Data.Traversable.$fTraversableArray_$cmapM_info:
         const Data.Traversable.$fTraversableArray_$cmapM_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SbXeW_srt+128;
 },
 _cbZTH() //  [R1]
         { []
         }
     {offset
       cbZTH: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZTH_info" {
     block_cbZTH_info:
         const _cbZTH;
         const 3;
         const 4294967326;
         const SbXeW_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.416679816 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$csequence_closure" {
     Data.Traversable.$fTraversableArray_$csequence_closure:
         const Data.Traversable.$fTraversableArray_$csequence_info;
         const 0;
 },
 Data.Traversable.$fTraversableArray_$csequence_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbZU3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZU4; else goto cbZU5;
       cbZU4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableArray_$csequence_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZU5: // global
           I64[Sp - 24] = block_cbZU1_info;
           _sbX5C::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _sbX5C::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$csequence_info" {
     Data.Traversable.$fTraversableArray_$csequence_info:
         const Data.Traversable.$fTraversableArray_$csequence_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SbXeW_srt+128;
 },
 _cbZU1() //  [R1]
         { []
         }
     {offset
       cbZU1: // global
           R5 = P64[Sp + 16];
           R4 = GHC.Base.id_closure+1;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZU1_info" {
     block_cbZU1_info:
         const _cbZU1;
         const 2;
         const 4294967326;
         const SbXeW_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.423510104 UTC

[section ""data" . Data.Traversable.$fTraversableArray_closure" {
     Data.Traversable.$fTraversableArray_closure:
         const Data.Traversable.$fTraversableArray_info;
         const 0;
 },
 sat_sbX5K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZUq: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableArray_$csequence_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX5K_info" {
     sat_sbX5K_info:
         const sat_sbX5K_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbXeW_srt+144;
 },
 sat_sbX5J_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZUy: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableArray_$cmapM_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX5J_info" {
     sat_sbX5J_info:
         const sat_sbX5J_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SbXeW_srt+136;
 },
 sat_sbX5I_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbZUG: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableArray_$csequenceA_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX5I_info" {
     sat_sbX5I_info:
         const sat_sbX5I_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbXeW_srt+152;
 },
 sat_sbX5H_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbZUO: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX5H_info" {
     sat_sbX5H_info:
         const sat_sbX5H_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SbXeW_srt+128;
 },
 Data.Traversable.$fTraversableArray_entry() //  [R2]
         { []
         }
     {offset
       cbZUS: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cbZUW; else goto cbZUV;
       cbZUW: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZUV: // global
           I64[Hp - 112] = sat_sbX5K_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sbX5J_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbX5I_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sbX5H_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = GHC.Arr.$fFunctorArray_closure;
           P64[Hp - 32] = Data.Foldable.$fFoldableArray_closure;
           P64[Hp - 24] = Hp - 61;
           P64[Hp - 16] = Hp - 78;
           P64[Hp - 8] = Hp - 93;
           P64[Hp] = Hp - 110;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_info" {
     Data.Traversable.$fTraversableArray_info:
         const Data.Traversable.$fTraversableArray_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const SbXeW_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.436274153 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure" {
     Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure:
         const Data.Traversable.$fTraversableNonEmpty_$ctraverse_info;
 },
 z_sbX5W_entry() //  [R1]
         { []
         }
     {offset
       cbZVz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbZVA; else goto cbZVB;
       cbZVA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZVB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbX5W_info" {
     z_sbX5W_info:
         const z_sbX5W_entry;
         const 1;
         const 16;
 },
 go_sbX5X_entry() //  [R1, R2]
         { []
         }
     {offset
       cbZVO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZVP; else goto cbZVQ;
       cbZVP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbZVQ: // global
           I64[Sp - 40] = block_cbZVH_info;
           _sbX5X::P64 = R1;
           _sbX5L::P64 = P64[R1 + 7];
           _sbX5M::P64 = P64[R1 + 15];
           _sbX5W::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sbX5L::P64;
           P64[Sp - 24] = _sbX5M::P64;
           P64[Sp - 16] = _sbX5W::P64;
           P64[Sp - 8] = _sbX5X::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZW1; else goto cbZVI;
       ubZW1: // global
           call _cbZVH(R1) args: 0, res: 0, upd: 0;
       cbZVI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sbX5X_info" {
     go_sbX5X_info:
         const go_sbX5X_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cbZVH() //  [R1]
         { []
         }
     {offset
       cbZVH: // global
           if (R1 & 7 == 1) goto cbZVL; else goto cbZVM;
       cbZVL: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbZVM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbZVY; else goto cbZVX;
       cbZVY: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbZVX: // global
           _sbX60::P64 = P64[R1 + 6];
           _sbX61::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sbX61::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sbX60::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZVH_info" {
     block_cbZVH_info:
         const _cbZVH;
         const 4;
         const 30;
 },
 sat_sbX64_entry() //  [R1]
         { []
         }
     {offset
       cbZW2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbZW3; else goto cbZW4;
       cbZW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZW4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cbZVq_info;
           _sbX5L::P64 = P64[R1 + 16];
           _sbX5M::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sbX5L::P64;
           P64[Sp - 24] = _sbX5M::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubZW8; else goto cbZVr;
       ubZW8: // global
           call _cbZVq(R1) args: 0, res: 0, upd: 0;
       cbZVr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX64_info" {
     sat_sbX64_info:
         const sat_sbX64_entry;
         const 3;
         const 15;
 },
 _cbZVq() //  [R1]
         { []
         }
     {offset
       cbZVq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbZW7; else goto cbZW6;
       cbZW7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbZW6: // global
           _sbX5V::P64 = P64[R1 + 15];
           I64[Hp - 48] = z_sbX5W_info;
           _sbX5L::P64 = P64[Sp + 8];
           P64[Hp - 32] = _sbX5L::P64;
           I64[Hp - 24] = go_sbX5X_info;
           P64[Hp - 16] = _sbX5L::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R2 = _sbX5V::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call go_sbX5X_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbZVq_info" {
     block_cbZVq_info:
         const _cbZVq;
         const 2;
         const 30;
 },
 sat_sbX5S_entry() //  [R1]
         { []
         }
     {offset
       cbZWe: // global
           _sbX5S::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbZWf; else goto cbZWg;
       cbZWg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbZWi; else goto cbZWh;
       cbZWi: // global
           HpAlloc = 24;
           goto cbZWf;
       cbZWf: // global
           R1 = _sbX5S::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbZWh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbX5S::P64;
           _sbX5M::P64 = P64[_sbX5S::P64 + 16];
           _sbX5N::P64 = P64[_sbX5S::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sbX5N::P64;
           R2 = Hp - 16;
           R1 = _sbX5M::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX5S_info" {
     sat_sbX5S_info:
         const sat_sbX5S_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cbZWj: // global
           _sbX5N::P64 = R4;
           _sbX5M::P64 = R3;
           _sbX5L::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cbZWk; else goto cbZWl;
       cbZWl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbZWn; else goto cbZWm;
       cbZWn: // global
           HpAlloc = 72;
           goto cbZWk;
       cbZWk: // global
           R4 = _sbX5N::P64;
           R3 = _sbX5M::P64;
           R2 = _sbX5L::P64;
           R1 = Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZWm: // global
           I64[Hp - 64] = sat_sbX64_info;
           P64[Hp - 48] = _sbX5L::P64;
           P64[Hp - 40] = _sbX5M::P64;
           P64[Hp - 32] = _sbX5N::P64;
           I64[Hp - 24] = sat_sbX5S_info;
           P64[Hp - 8] = _sbX5M::P64;
           P64[Hp] = _sbX5N::P64;
           R2 = _sbX5L::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Base.:|_closure+2;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$ctraverse_info" {
     Data.Traversable.$fTraversableNonEmpty_$ctraverse_info:
         const Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.450833979 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$csequenceA_closure" {
     Data.Traversable.$fTraversableNonEmpty_$csequenceA_closure:
         const Data.Traversable.$fTraversableNonEmpty_$csequenceA_info;
 },
 Data.Traversable.$fTraversableNonEmpty_$csequenceA_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cbZX5: // global
           R4 = R3;
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           call Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$csequenceA_info" {
     Data.Traversable.$fTraversableNonEmpty_$csequenceA_info:
         const Data.Traversable.$fTraversableNonEmpty_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.455099553 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$cmapM_closure" {
     Data.Traversable.$fTraversableNonEmpty_$cmapM_closure:
         const Data.Traversable.$fTraversableNonEmpty_$cmapM_info;
 },
 Data.Traversable.$fTraversableNonEmpty_$cmapM_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbZXi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZXj; else goto cbZXk;
       cbZXj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableNonEmpty_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZXk: // global
           I64[Sp - 24] = block_cbZXg_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$cmapM_info" {
     Data.Traversable.$fTraversableNonEmpty_$cmapM_info:
         const Data.Traversable.$fTraversableNonEmpty_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZXg() //  [R1]
         { []
         }
     {offset
       cbZXg: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZXg_info" {
     block_cbZXg_info:
         const _cbZXg;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.460171046 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$csequence_closure" {
     Data.Traversable.$fTraversableNonEmpty_$csequence_closure:
         const Data.Traversable.$fTraversableNonEmpty_$csequence_info;
 },
 Data.Traversable.$fTraversableNonEmpty_$csequence_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cbZXC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbZXD; else goto cbZXE;
       cbZXD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableNonEmpty_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZXE: // global
           I64[Sp - 16] = block_cbZXA_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$csequence_info" {
     Data.Traversable.$fTraversableNonEmpty_$csequence_info:
         const Data.Traversable.$fTraversableNonEmpty_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZXA() //  [R1]
         { []
         }
     {offset
       cbZXA: // global
           R4 = P64[Sp + 8];
           R3 = GHC.Base.id_closure+1;
           R2 = R1;
           Sp = Sp + 16;
           call Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZXA_info" {
     block_cbZXA_info:
         const _cbZXA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.464709167 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_closure" {
     Data.Traversable.$fTraversableNonEmpty_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctorNonEmpty_closure;
         const Data.Foldable.$fFoldableNonEmpty_closure;
         const Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableNonEmpty_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableNonEmpty_$cmapM_closure+3;
         const Data.Traversable.$fTraversableNonEmpty_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.467697065 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_$csequenceA_closure" {
     Data.Traversable.$fTraversableMaybe_$csequenceA_closure:
         const Data.Traversable.$fTraversableMaybe_$csequenceA_info;
 },
 Data.Traversable.$fTraversableMaybe_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cbZY2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZY3; else goto cbZY4;
       cbZY3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableMaybe_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZY4: // global
           I64[Sp - 16] = block_cbZXV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubZYg; else goto cbZXW;
       ubZYg: // global
           call _cbZXV(R1) args: 0, res: 0, upd: 0;
       cbZXW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableMaybe_$csequenceA_info" {
     Data.Traversable.$fTraversableMaybe_$csequenceA_info:
         const Data.Traversable.$fTraversableMaybe_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZXV() //  [R1]
         { []
         }
     {offset
       cbZXV: // global
           _sbX6d::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbZXZ; else goto cbZY0;
       cbZXZ: // global
           R2 = _sbX6d::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cbZY0: // global
           I64[Sp] = block_cbZYa_info;
           R2 = _sbX6d::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZXV_info" {
     block_cbZXV_info:
         const _cbZXV;
         const 1;
         const 30;
 },
 _cbZYa() //  [R1]
         { []
         }
     {offset
       cbZYa: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZYa_info" {
     block_cbZYa_info:
         const _cbZYa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.474437784 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_$cmapM_closure" {
     Data.Traversable.$fTraversableMaybe_$cmapM_closure:
         const Data.Traversable.$fTraversableMaybe_$cmapM_info;
 },
 Data.Traversable.$fTraversableMaybe_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbZYC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZYD; else goto cbZYE;
       cbZYD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableMaybe_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZYE: // global
           I64[Sp - 24] = block_cbZYA_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableMaybe_$cmapM_info" {
     Data.Traversable.$fTraversableMaybe_$cmapM_info:
         const Data.Traversable.$fTraversableMaybe_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbZYA() //  [R1]
         { []
         }
     {offset
       cbZYA: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZYA_info" {
     block_cbZYA_info:
         const _cbZYA;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.48025679 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_$csequence_closure" {
     Data.Traversable.$fTraversableMaybe_$csequence_closure:
         const Data.Traversable.$fTraversableMaybe_$csequence_info;
 },
 Data.Traversable.$fTraversableMaybe_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cbZZ1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbZZ2; else goto cbZZ3;
       cbZZ2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableMaybe_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbZZ3: // global
           I64[Sp - 16] = block_cbZYU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubZZp; else goto cbZYV;
       ubZZp: // global
           call _cbZYU(R1) args: 0, res: 0, upd: 0;
       cbZYV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableMaybe_$csequence_info" {
     Data.Traversable.$fTraversableMaybe_$csequence_info:
         const Data.Traversable.$fTraversableMaybe_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbZYU() //  [R1]
         { []
         }
     {offset
       cbZYU: // global
           _sbX6m::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbZYY; else goto cbZYZ;
       cbZYY: // global
           I64[Sp + 8] = block_cbZZ6_info;
           R2 = _sbX6m::P64;
           Sp = Sp + 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
       cbZYZ: // global
           I64[Sp] = block_cbZZe_info;
           R2 = _sbX6m::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZYU_info" {
     block_cbZYU_info:
         const _cbZYU;
         const 1;
         const 30;
 },
 _cbZZ6() //  [R1]
         { []
         }
     {offset
       cbZZ6: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZZ6_info" {
     block_cbZZ6_info:
         const _cbZZ6;
         const 0;
         const 30;
 },
 _cbZZe() //  [R1]
         { []
         }
     {offset
       cbZZe: // global
           I64[Sp] = block_cbZZi_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZZe_info" {
     block_cbZZe_info:
         const _cbZZe;
         const 1;
         const 30;
 },
 _cbZZi() //  [R1]
         { []
         }
     {offset
       cbZZi: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbZZi_info" {
     block_cbZZi_info:
         const _cbZZi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.490104117 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_closure" {
     Data.Traversable.$fTraversableMaybe_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctorMaybe_closure;
         const Data.Foldable.$fFoldableMaybe_closure;
         const Data.Traversable.$fTraversableFirst_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableMaybe_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableMaybe_$cmapM_closure+3;
         const Data.Traversable.$fTraversableMaybe_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.492164316 UTC

[section ""data" . Data.Traversable.$fTraversableFirst1_closure" {
     Data.Traversable.$fTraversableFirst1_closure:
         const Data.Traversable.$fTraversableFirst1_info;
 },
 Data.Traversable.$fTraversableFirst1_entry() //  [R2]
         { []
         }
     {offset
       cbZZQ: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst1_info" {
     Data.Traversable.$fTraversableFirst1_info:
         const Data.Traversable.$fTraversableFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.496349389 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$ctraverse_closure" {
     Data.Traversable.$fTraversableLast_$ctraverse_closure:
         const Data.Traversable.$fTraversableLast_$ctraverse_info;
 },
 sat_sbX6y_entry() //  [R1]
         { []
         }
     {offset
       cc007: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc008; else goto cc009;
       cc008: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc009: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX6y_info" {
     sat_sbX6y_info:
         const sat_sbX6y_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableLast_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc00c: // global
           _sbX6w::P64 = R4;
           _sbX6v::P64 = R3;
           _sbX6u::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc00d; else goto cc00e;
       cc00e: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc00g; else goto cc00f;
       cc00g: // global
           HpAlloc = 40;
           goto cc00d;
       cc00d: // global
           R4 = _sbX6w::P64;
           R3 = _sbX6v::P64;
           R2 = _sbX6u::P64;
           R1 = Data.Traversable.$fTraversableLast_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc00f: // global
           I64[Hp - 32] = sat_sbX6y_info;
           P64[Hp - 16] = _sbX6u::P64;
           P64[Hp - 8] = _sbX6v::P64;
           P64[Hp] = _sbX6w::P64;
           I64[Sp - 16] = block_cc00a_info;
           R2 = _sbX6u::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$ctraverse_info" {
     Data.Traversable.$fTraversableLast_$ctraverse_info:
         const Data.Traversable.$fTraversableLast_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc00a() //  [R1]
         { []
         }
     {offset
       cc00a: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc00a_info" {
     block_cc00a_info:
         const _cc00a;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.504558352 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$csequenceA_closure" {
     Data.Traversable.$fTraversableLast_$csequenceA_closure:
         const Data.Traversable.$fTraversableLast_$csequenceA_info;
 },
 sat_sbX6F_entry() //  [R1]
         { []
         }
     {offset
       cc00M: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc00N; else goto cc00O;
       cc00N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc00O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc00F_info;
           _sbX6z::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbX6z::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc010; else goto cc00G;
       uc010: // global
           call _cc00F(R1) args: 0, res: 0, upd: 0;
       cc00G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX6F_info" {
     sat_sbX6F_info:
         const sat_sbX6F_entry;
         const 2;
         const 18;
 },
 _cc00F() //  [R1]
         { []
         }
     {offset
       cc00F: // global
           _sbX6z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc00J; else goto cc00K;
       cc00J: // global
           R2 = _sbX6z::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc00K: // global
           I64[Sp] = block_cc00U_info;
           R2 = _sbX6z::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc00F_info" {
     block_cc00F_info:
         const _cc00F;
         const 1;
         const 30;
 },
 _cc00U() //  [R1]
         { []
         }
     {offset
       cc00U: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc00U_info" {
     block_cc00U_info:
         const _cc00U;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableLast_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc013: // global
           _sbX6A::P64 = R3;
           _sbX6z::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc014; else goto cc015;
       cc015: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc017; else goto cc016;
       cc017: // global
           HpAlloc = 32;
           goto cc014;
       cc014: // global
           R3 = _sbX6A::P64;
           R2 = _sbX6z::P64;
           R1 = Data.Traversable.$fTraversableLast_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc016: // global
           I64[Hp - 24] = sat_sbX6F_info;
           P64[Hp - 8] = _sbX6z::P64;
           P64[Hp] = _sbX6A::P64;
           I64[Sp - 16] = block_cc011_info;
           R2 = _sbX6z::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$csequenceA_info" {
     Data.Traversable.$fTraversableLast_$csequenceA_info:
         const Data.Traversable.$fTraversableLast_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc011() //  [R1]
         { []
         }
     {offset
       cc011: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc011_info" {
     block_cc011_info:
         const _cc011;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.515418485 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$cmapM_closure" {
     Data.Traversable.$fTraversableLast_$cmapM_closure:
         const Data.Traversable.$fTraversableLast_$cmapM_info;
 },
 sat_sbX6L_entry() //  [R1]
         { []
         }
     {offset
       cc01K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc01L; else goto cc01M;
       cc01L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc01M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX6L_info" {
     sat_sbX6L_info:
         const sat_sbX6L_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableLast_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc01N: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc01P; else goto cc01Q;
       cc01P: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableLast_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc01Q: // global
           I64[Sp - 24] = block_cc01C_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$cmapM_info" {
     Data.Traversable.$fTraversableLast_$cmapM_info:
         const Data.Traversable.$fTraversableLast_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc01C() //  [R1]
         { []
         }
     {offset
       cc01C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc01T; else goto cc01S;
       cc01T: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc01S: // global
           I64[Hp - 32] = sat_sbX6L_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc01O_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc01C_info" {
     block_cc01C_info:
         const _cc01C;
         const 2;
         const 30;
 },
 _cc01O() //  [R1]
         { []
         }
     {offset
       cc01O: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc01O_info" {
     block_cc01O_info:
         const _cc01O;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.525518632 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$csequence_closure" {
     Data.Traversable.$fTraversableLast_$csequence_closure:
         const Data.Traversable.$fTraversableLast_$csequence_info;
 },
 sat_sbX6T_entry() //  [R1]
         { []
         }
     {offset
       cc02z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc02A; else goto cc02B;
       cc02A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc02B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc02s_info;
           _sbX6O::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sbX6O::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc02N; else goto cc02t;
       uc02N: // global
           call _cc02s(R1) args: 0, res: 0, upd: 0;
       cc02t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX6T_info" {
     sat_sbX6T_info:
         const sat_sbX6T_entry;
         const 2;
         const 18;
 },
 _cc02s() //  [R1]
         { []
         }
     {offset
       cc02s: // global
           _sbX6O::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc02w; else goto cc02x;
       cc02w: // global
           R2 = _sbX6O::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc02x: // global
           I64[Sp] = block_cc02H_info;
           R2 = _sbX6O::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc02s_info" {
     block_cc02s_info:
         const _cc02s;
         const 1;
         const 30;
 },
 _cc02H() //  [R1]
         { []
         }
     {offset
       cc02H: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc02H_info" {
     block_cc02H_info:
         const _cc02H;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableLast_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc02O: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc02Q; else goto cc02R;
       cc02Q: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableLast_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc02R: // global
           I64[Sp - 16] = block_cc02k_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$csequence_info" {
     Data.Traversable.$fTraversableLast_$csequence_info:
         const Data.Traversable.$fTraversableLast_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc02k() //  [R1]
         { []
         }
     {offset
       cc02k: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc02U; else goto cc02T;
       cc02U: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc02T: // global
           I64[Hp - 24] = sat_sbX6T_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp] = block_cc02P_info;
           R2 = R1;
           P64[Sp + 8] = Hp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc02k_info" {
     block_cc02k_info:
         const _cc02k;
         const 1;
         const 30;
 },
 _cc02P() //  [R1]
         { []
         }
     {offset
       cc02P: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc02P_info" {
     block_cc02P_info:
         const _cc02P;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.536295879 UTC

[section ""data" . Data.Traversable.$fTraversableLast_closure" {
     Data.Traversable.$fTraversableLast_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Monoid.$fFunctorLast_closure;
         const Data.Foldable.$fFoldableLast_closure;
         const Data.Traversable.$fTraversableLast_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableLast_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableLast_$cmapM_closure+3;
         const Data.Traversable.$fTraversableLast_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.539345993 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$ctraverse1_closure" {
     Data.Traversable.$fTraversableFirst_$ctraverse1_closure:
         const Data.Traversable.$fTraversableFirst_$ctraverse1_info;
 },
 sat_sbX6Y_entry() //  [R1]
         { []
         }
     {offset
       cc03z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc03A; else goto cc03B;
       cc03A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc03B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX6Y_info" {
     sat_sbX6Y_info:
         const sat_sbX6Y_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableFirst_$ctraverse1_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cc03E: // global
           _sbX6W::P64 = R4;
           _sbX6V::P64 = R3;
           _sbX6U::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc03F; else goto cc03G;
       cc03G: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc03I; else goto cc03H;
       cc03I: // global
           HpAlloc = 40;
           goto cc03F;
       cc03F: // global
           R4 = _sbX6W::P64;
           R3 = _sbX6V::P64;
           R2 = _sbX6U::P64;
           R1 = Data.Traversable.$fTraversableFirst_$ctraverse1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc03H: // global
           I64[Hp - 32] = sat_sbX6Y_info;
           P64[Hp - 16] = _sbX6U::P64;
           P64[Hp - 8] = _sbX6V::P64;
           P64[Hp] = _sbX6W::P64;
           I64[Sp - 16] = block_cc03C_info;
           R2 = _sbX6U::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$ctraverse1_info" {
     Data.Traversable.$fTraversableFirst_$ctraverse1_info:
         const Data.Traversable.$fTraversableFirst_$ctraverse1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc03C() //  [R1]
         { []
         }
     {offset
       cc03C: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc03C_info" {
     block_cc03C_info:
         const _cc03C;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.547876033 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$csequenceA_closure" {
     Data.Traversable.$fTraversableFirst_$csequenceA_closure:
         const Data.Traversable.$fTraversableFirst_$csequenceA_info;
 },
 sat_sbX75_entry() //  [R1]
         { []
         }
     {offset
       cc04e: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc04f; else goto cc04g;
       cc04f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc04g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc047_info;
           _sbX6Z::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbX6Z::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc04s; else goto cc048;
       uc04s: // global
           call _cc047(R1) args: 0, res: 0, upd: 0;
       cc048: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX75_info" {
     sat_sbX75_info:
         const sat_sbX75_entry;
         const 2;
         const 18;
 },
 _cc047() //  [R1]
         { []
         }
     {offset
       cc047: // global
           _sbX6Z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc04b; else goto cc04c;
       cc04b: // global
           R2 = _sbX6Z::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc04c: // global
           I64[Sp] = block_cc04m_info;
           R2 = _sbX6Z::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc047_info" {
     block_cc047_info:
         const _cc047;
         const 1;
         const 30;
 },
 _cc04m() //  [R1]
         { []
         }
     {offset
       cc04m: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc04m_info" {
     block_cc04m_info:
         const _cc04m;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableFirst_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc04v: // global
           _sbX70::P64 = R3;
           _sbX6Z::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc04w; else goto cc04x;
       cc04x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc04z; else goto cc04y;
       cc04z: // global
           HpAlloc = 32;
           goto cc04w;
       cc04w: // global
           R3 = _sbX70::P64;
           R2 = _sbX6Z::P64;
           R1 = Data.Traversable.$fTraversableFirst_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc04y: // global
           I64[Hp - 24] = sat_sbX75_info;
           P64[Hp - 8] = _sbX6Z::P64;
           P64[Hp] = _sbX70::P64;
           I64[Sp - 16] = block_cc04t_info;
           R2 = _sbX6Z::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$csequenceA_info" {
     Data.Traversable.$fTraversableFirst_$csequenceA_info:
         const Data.Traversable.$fTraversableFirst_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc04t() //  [R1]
         { []
         }
     {offset
       cc04t: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc04t_info" {
     block_cc04t_info:
         const _cc04t;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.559009482 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$cmapM_closure" {
     Data.Traversable.$fTraversableFirst_$cmapM_closure:
         const Data.Traversable.$fTraversableFirst_$cmapM_info;
 },
 sat_sbX7b_entry() //  [R1]
         { []
         }
     {offset
       cc05c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc05d; else goto cc05e;
       cc05d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc05e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX7b_info" {
     sat_sbX7b_info:
         const sat_sbX7b_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableFirst_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc05f: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc05h; else goto cc05i;
       cc05h: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableFirst_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc05i: // global
           I64[Sp - 24] = block_cc054_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$cmapM_info" {
     Data.Traversable.$fTraversableFirst_$cmapM_info:
         const Data.Traversable.$fTraversableFirst_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc054() //  [R1]
         { []
         }
     {offset
       cc054: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc05l; else goto cc05k;
       cc05l: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc05k: // global
           I64[Hp - 32] = sat_sbX7b_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc05g_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc054_info" {
     block_cc054_info:
         const _cc054;
         const 2;
         const 30;
 },
 _cc05g() //  [R1]
         { []
         }
     {offset
       cc05g: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc05g_info" {
     block_cc05g_info:
         const _cc05g;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.569059914 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$csequence_closure" {
     Data.Traversable.$fTraversableFirst_$csequence_closure:
         const Data.Traversable.$fTraversableFirst_$csequence_info;
 },
 sat_sbX7j_entry() //  [R1]
         { []
         }
     {offset
       cc061: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc062; else goto cc063;
       cc062: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc063: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc05U_info;
           _sbX7e::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sbX7e::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc06f; else goto cc05V;
       uc06f: // global
           call _cc05U(R1) args: 0, res: 0, upd: 0;
       cc05V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX7j_info" {
     sat_sbX7j_info:
         const sat_sbX7j_entry;
         const 2;
         const 18;
 },
 _cc05U() //  [R1]
         { []
         }
     {offset
       cc05U: // global
           _sbX7e::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc05Y; else goto cc05Z;
       cc05Y: // global
           R2 = _sbX7e::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc05Z: // global
           I64[Sp] = block_cc069_info;
           R2 = _sbX7e::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc05U_info" {
     block_cc05U_info:
         const _cc05U;
         const 1;
         const 30;
 },
 _cc069() //  [R1]
         { []
         }
     {offset
       cc069: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc069_info" {
     block_cc069_info:
         const _cc069;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableFirst_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc06g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc06i; else goto cc06j;
       cc06i: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableFirst_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc06j: // global
           I64[Sp - 16] = block_cc05M_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$csequence_info" {
     Data.Traversable.$fTraversableFirst_$csequence_info:
         const Data.Traversable.$fTraversableFirst_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc05M() //  [R1]
         { []
         }
     {offset
       cc05M: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc06m; else goto cc06l;
       cc06m: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc06l: // global
           I64[Hp - 24] = sat_sbX7j_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp] = block_cc06h_info;
           R2 = R1;
           P64[Sp + 8] = Hp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc05M_info" {
     block_cc05M_info:
         const _cc05M;
         const 1;
         const 30;
 },
 _cc06h() //  [R1]
         { []
         }
     {offset
       cc06h: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc06h_info" {
     block_cc06h_info:
         const _cc06h;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.581594377 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_closure" {
     Data.Traversable.$fTraversableFirst_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Monoid.$fFunctorFirst_closure;
         const Data.Foldable.$fFoldableFirst_closure;
         const Data.Traversable.$fTraversableFirst_$ctraverse1_closure+3;
         const Data.Traversable.$fTraversableFirst_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableFirst_$cmapM_closure+3;
         const Data.Traversable.$fTraversableFirst_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.585807627 UTC

[section ""data" . Data.Traversable.$dmtraverse_closure" {
     Data.Traversable.$dmtraverse_closure:
         const Data.Traversable.$dmtraverse_info;
 },
 f1_sbX7n_entry() //  [R1]
         { []
         }
     {offset
       cc071: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc072; else goto cc073;
       cc072: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc073: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.sequenceA_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sbX7n_info" {
     f1_sbX7n_info:
         const f1_sbX7n_entry;
         const 2;
         const 18;
 },
 g_sbX7o_entry() //  [R1]
         { []
         }
     {offset
       cc07a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc07b; else goto cc07c;
       cc07b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc07c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc078_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.$p1Traversable_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . g_sbX7o_info" {
     g_sbX7o_info:
         const g_sbX7o_entry;
         const 2;
         const 18;
 },
 _cc078() //  [R1]
         { []
         }
     {offset
       cc078: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc078_info" {
     block_cc078_info:
         const _cc078;
         const 1;
         const 30;
 },
 sat_sbX7s_entry() //  [R1, R2]
         { []
         }
     {offset
       cc07m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc07q; else goto cc07p;
       cc07q: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc07p: // global
           _sbX7n::P64 = P64[R1 + 7];
           _sbX7o::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sbX7o::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sbX7n::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX7s_info" {
     sat_sbX7s_info:
         const sat_sbX7s_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Traversable.$dmtraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc07r: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc07v; else goto cc07u;
       cc07v: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$dmtraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc07u: // global
           I64[Hp - 80] = f1_sbX7n_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = g_sbX7o_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sbX7s_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmtraverse_info" {
     Data.Traversable.$dmtraverse_info:
         const Data.Traversable.$dmtraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.596642165 UTC

[section ""data" . Data.Traversable.for_closure" {
     Data.Traversable.for_closure:
         const Data.Traversable.for_info;
 },
 f1_sbX7v_entry() //  [R1]
         { []
         }
     {offset
       cc081: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc082; else goto cc083;
       cc082: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc083: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.traverse_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sbX7v_info" {
     f1_sbX7v_info:
         const f1_sbX7v_entry;
         const 2;
         const 18;
 },
 sat_sbX7y_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc089: // global
           _sbX7x::P64 = R3;
           R3 = R2;
           R2 = _sbX7x::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX7y_info" {
     sat_sbX7y_info:
         const sat_sbX7y_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.for_entry() //  [R2, R3]
         { []
         }
     {offset
       cc08c: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc08g; else goto cc08f;
       cc08g: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.for_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc08f: // global
           I64[Hp - 40] = f1_sbX7v_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sbX7y_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.for_info" {
     Data.Traversable.for_info:
         const Data.Traversable.for_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.605431743 UTC

[section ""data" . Data.Traversable.forM_closure" {
     Data.Traversable.forM_closure:
         const Data.Traversable.forM_info;
 },
 f_sbX7B_entry() //  [R1]
         { []
         }
     {offset
       cc08D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc08E; else goto cc08F;
       cc08E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc08F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.mapM_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sbX7B_info" {
     f_sbX7B_info:
         const f_sbX7B_entry;
         const 2;
         const 18;
 },
 sat_sbX7E_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc08L: // global
           _sbX7D::P64 = R3;
           R3 = R2;
           R2 = _sbX7D::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX7E_info" {
     sat_sbX7E_info:
         const sat_sbX7E_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.forM_entry() //  [R2, R3]
         { []
         }
     {offset
       cc08O: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc08S; else goto cc08R;
       cc08S: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.forM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc08R: // global
           I64[Hp - 40] = f_sbX7B_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sbX7E_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.forM_info" {
     Data.Traversable.forM_info:
         const Data.Traversable.forM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.613061694 UTC

[section ""data" . Data.Traversable.mapAccumL_closure" {
     Data.Traversable.mapAccumL_closure:
         const Data.Traversable.mapAccumL_info;
         const 0;
 },
 sat_sbX7L_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc09g: // global
           _sbX7K::P64 = R3;
           R3 = R2;
           R2 = _sbX7K::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX7L_info" {
     sat_sbX7L_info:
         const sat_sbX7L_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.mapAccumL_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc09j: // global
           _sbX7I::P64 = R5;
           _sbX7H::P64 = R4;
           _sbX7G::P64 = R3;
           _sbX7F::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cc09k; else goto cc09l;
       cc09l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc09n; else goto cc09m;
       cc09n: // global
           HpAlloc = 16;
           goto cc09k;
       cc09k: // global
           R5 = _sbX7I::P64;
           R4 = _sbX7H::P64;
           R3 = _sbX7G::P64;
           R2 = _sbX7F::P64;
           R1 = Data.Traversable.mapAccumL_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc09m: // global
           I64[Hp - 8] = sat_sbX7L_info;
           P64[Hp] = _sbX7G::P64;
           R2 = _sbX7F::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Functor.Utils.$fApplicativeStateL_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _sbX7I::P64;
           P64[Sp - 8] = _sbX7H::P64;
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.mapAccumL_info" {
     Data.Traversable.mapAccumL_info:
         const Data.Traversable.mapAccumL_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SbXeW_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.619199403 UTC

[section ""data" . Data.Traversable.mapAccumR_closure" {
     Data.Traversable.mapAccumR_closure:
         const Data.Traversable.mapAccumR_info;
         const 0;
 },
 sat_sbX7S_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc09G: // global
           _sbX7R::P64 = R3;
           R3 = R2;
           R2 = _sbX7R::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbX7S_info" {
     sat_sbX7S_info:
         const sat_sbX7S_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.mapAccumR_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc09J: // global
           _sbX7P::P64 = R5;
           _sbX7O::P64 = R4;
           _sbX7N::P64 = R3;
           _sbX7M::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cc09K; else goto cc09L;
       cc09L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc09N; else goto cc09M;
       cc09N: // global
           HpAlloc = 16;
           goto cc09K;
       cc09K: // global
           R5 = _sbX7P::P64;
           R4 = _sbX7O::P64;
           R3 = _sbX7N::P64;
           R2 = _sbX7M::P64;
           R1 = Data.Traversable.mapAccumR_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc09M: // global
           I64[Hp - 8] = sat_sbX7S_info;
           P64[Hp] = _sbX7N::P64;
           R2 = _sbX7M::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Functor.Utils.$fApplicativeStateR_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _sbX7P::P64;
           P64[Sp - 8] = _sbX7O::P64;
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.mapAccumR_info" {
     Data.Traversable.mapAccumR_info:
         const Data.Traversable.mapAccumR_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SbXeW_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.624600809 UTC

[section ""data" . fmapDefault1_rbWTV_closure" {
     fmapDefault1_rbWTV_closure:
         const fmapDefault1_rbWTV_info;
         const 0;
 },
 fmapDefault1_rbWTV_entry() //  [R2]
         { []
         }
     {offset
       cc0a1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0a2; else goto cc0a3;
       cc0a2: // global
           R2 = R2;
           R1 = fmapDefault1_rbWTV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0a3: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Functor.Identity.$fApplicativeIdentity_closure;
           Sp = Sp - 16;
           call Data.Traversable.traverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . fmapDefault1_rbWTV_info" {
     fmapDefault1_rbWTV_info:
         const fmapDefault1_rbWTV_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbXeW_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.62794806 UTC

[section ""data" . Data.Traversable.fmapDefault_closure" {
     Data.Traversable.fmapDefault_closure:
         const Data.Traversable.fmapDefault_info;
         const 0;
 },
 Data.Traversable.fmapDefault_entry() //  [R2]
         { []
         }
     {offset
       cc0ad: // global
           R2 = R2;
           call fmapDefault1_rbWTV_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.fmapDefault_info" {
     Data.Traversable.fmapDefault_info:
         const Data.Traversable.fmapDefault_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SbXeW_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.632092268 UTC

[section ""data" . foldMapDefault1_rbWTW_closure" {
     foldMapDefault1_rbWTW_closure:
         const foldMapDefault1_rbWTW_info;
         const 0;
 },
 sat_sbX7W_entry() //  [R1]
         { []
         }
     {offset
       cc0as: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0at; else goto cc0au;
       cc0at: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0au: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fApplicativeConst_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbX7W_info" {
     sat_sbX7W_info:
         const sat_sbX7W_entry;
         const 1;
         const 4294967312;
         const SbXeW_srt+232;
 },
 foldMapDefault1_rbWTW_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0av: // global
           _sbX7V::P64 = R3;
           _sbX7U::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cc0aw; else goto cc0ax;
       cc0ax: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0az; else goto cc0ay;
       cc0az: // global
           HpAlloc = 24;
           goto cc0aw;
       cc0aw: // global
           R3 = _sbX7V::P64;
           R2 = _sbX7U::P64;
           R1 = foldMapDefault1_rbWTW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0ay: // global
           I64[Hp - 16] = sat_sbX7W_info;
           P64[Hp] = _sbX7V::P64;
           R2 = _sbX7U::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Traversable.traverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . foldMapDefault1_rbWTW_info" {
     foldMapDefault1_rbWTW_info:
         const foldMapDefault1_rbWTW_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbXeW_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.638068926 UTC

[section ""data" . Data.Traversable.foldMapDefault_closure" {
     Data.Traversable.foldMapDefault_closure:
         const Data.Traversable.foldMapDefault_info;
         const 0;
 },
 Data.Traversable.foldMapDefault_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0aO: // global
           R3 = R3;
           R2 = R2;
           call foldMapDefault1_rbWTW_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.foldMapDefault_info" {
     Data.Traversable.foldMapDefault_info:
         const Data.Traversable.foldMapDefault_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SbXeW_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.641060653 UTC

[section ""cstring" . Data.Traversable.$trModule4_bytes" {
     Data.Traversable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.642819564 UTC

[section ""data" . Data.Traversable.$trModule3_closure" {
     Data.Traversable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Traversable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.644450339 UTC

[section ""cstring" . Data.Traversable.$trModule2_bytes" {
     Data.Traversable.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.646484902 UTC

[section ""data" . Data.Traversable.$trModule1_closure" {
     Data.Traversable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Traversable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.648139336 UTC

[section ""data" . Data.Traversable.$trModule_closure" {
     Data.Traversable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Traversable.$trModule3_closure+1;
         const Data.Traversable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.649927185 UTC

[section ""data" . $krep_rbWTX_closure" {
     $krep_rbWTX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.651573927 UTC

[section ""data" . Data.Traversable.$tcTraversable1_closure" {
     Data.Traversable.$tcTraversable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_rbWTX_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.653477189 UTC

[section ""cstring" . Data.Traversable.$tcTraversable3_bytes" {
     Data.Traversable.$tcTraversable3_bytes:
         I8[] [84,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.655931705 UTC

[section ""data" . Data.Traversable.$tcTraversable2_closure" {
     Data.Traversable.$tcTraversable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Traversable.$tcTraversable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.658380832 UTC

[section ""data" . Data.Traversable.$tcTraversable_closure" {
     Data.Traversable.$tcTraversable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Traversable.$trModule_closure+1;
         const Data.Traversable.$tcTraversable2_closure+1;
         const Data.Traversable.$tcTraversable1_closure+4;
         const 9002450311536760373;
         const 4172295783860716183;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.661950232 UTC

[section ""data" . Data.Traversable.C:Traversable_closure" {
     Data.Traversable.C:Traversable_closure:
         const Data.Traversable.C:Traversable_info;
 },
 Data.Traversable.C:Traversable_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cc0ba: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc0be; else goto cc0bd;
       cc0be: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.C:Traversable_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cc0bd: // global
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.C:Traversable_info" {
     Data.Traversable.C:Traversable_info:
         const Data.Traversable.C:Traversable_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.666148441 UTC

[section ""cstring" . ibYOk_str" {
     ibYOk_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,84,114,97,118,101,114,115,97,98,108,101,46,67,58,84,114,97,118,101,114,115,97,98,108,101]
 },
 Data.Traversable.C:Traversable_con_entry() //  [R1]
         { []
         }
     {offset
       cc0bl: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.C:Traversable_con_info" {
     Data.Traversable.C:Traversable_con_info:
         const Data.Traversable.C:Traversable_con_entry;
         const 6;
         const 1;
         const ibYOk_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:51.669195609 UTC

[section ""relreadonly" . SbXeW_srt" {
     SbXeW_srt:
         const Data.Foldable.$fFoldableRec1_closure;
         const Data.Traversable.$fTraversableRec1_$cp2Traversable_closure;
         const Data.Foldable.$fFoldableM1_closure;
         const Data.Traversable.$fTraversableM1_$cp2Traversable_closure;
         const Data.Foldable.$fFoldable:+:_closure;
         const Data.Traversable.$fTraversable:+:_$cp2Traversable_closure;
         const Data.Foldable.$fFoldable:*:_closure;
         const Data.Traversable.$fTraversable:*:_$cp2Traversable_closure;
         const Data.Foldable.$fFoldable:.:_closure;
         const Data.Traversable.$fTraversable:.:_$cp2Traversable_closure;
         const Data.Traversable.$fTraversable:.:_closure;
         const Data.Traversable.$fTraversable:*:_closure;
         const Data.Traversable.$fTraversable:+:_closure;
         const Data.Traversable.$fTraversableM1_closure;
         const Data.Traversable.$fTraversableRec1_closure;
         const GHC.Arr.listArray_closure;
         const Data.Traversable.$fTraversableArray_$ctraverse_closure;
         const Data.Traversable.$fTraversableArray_$cmapM_closure;
         const Data.Traversable.$fTraversableArray_$csequence_closure;
         const Data.Traversable.$fTraversableArray_$csequenceA_closure;
         const GHC.Arr.$fFunctorArray_closure;
         const Data.Foldable.$fFoldableArray_closure;
         const Data.Traversable.$fTraversableArray_closure;
         const Data.Functor.Utils.$fApplicativeStateL_closure;
         const Data.Traversable.mapAccumL_closure;
         const Data.Functor.Utils.$fApplicativeStateR_closure;
         const Data.Traversable.mapAccumR_closure;
         const Data.Functor.Identity.$fApplicativeIdentity_closure;
         const fmapDefault1_rbWTV_closure;
         const Data.Functor.Const.$fApplicativeConst_closure;
         const foldMapDefault1_rbWTW_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.827856808 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:54.829807022 UTC

[section ""data" . Data.Traversable.$p1Traversable_closure" {
     Data.Traversable.$p1Traversable_closure:
         const Data.Traversable.$p1Traversable_info;
 },
 Data.Traversable.$p1Traversable_entry() //  [R2]
         { []
         }
     {offset
       cc0px: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc0py; else goto cc0pz;
       cc0py: // global
           R2 = R2;
           R1 = Data.Traversable.$p1Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0pz: // global
           I64[Sp - 8] = block_cc0pu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc0pD; else goto cc0pv;
       uc0pD: // global
           call _cc0pu(R1) args: 0, res: 0, upd: 0;
       cc0pv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$p1Traversable_info" {
     Data.Traversable.$p1Traversable_info:
         const Data.Traversable.$p1Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc0pu() //  [R1]
         { []
         }
     {offset
       cc0pu: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0pu_info" {
     block_cc0pu_info:
         const _cc0pu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.838392821 UTC

[section ""data" . Data.Traversable.$p2Traversable_closure" {
     Data.Traversable.$p2Traversable_closure:
         const Data.Traversable.$p2Traversable_info;
 },
 Data.Traversable.$p2Traversable_entry() //  [R2]
         { []
         }
     {offset
       cc0pX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc0pY; else goto cc0pZ;
       cc0pY: // global
           R2 = R2;
           R1 = Data.Traversable.$p2Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0pZ: // global
           I64[Sp - 8] = block_cc0pU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc0q3; else goto cc0pV;
       uc0q3: // global
           call _cc0pU(R1) args: 0, res: 0, upd: 0;
       cc0pV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$p2Traversable_info" {
     Data.Traversable.$p2Traversable_info:
         const Data.Traversable.$p2Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc0pU() //  [R1]
         { []
         }
     {offset
       cc0pU: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0pU_info" {
     block_cc0pU_info:
         const _cc0pU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.843759414 UTC

[section ""data" . Data.Traversable.traverse_closure" {
     Data.Traversable.traverse_closure:
         const Data.Traversable.traverse_info;
 },
 Data.Traversable.traverse_entry() //  [R2]
         { []
         }
     {offset
       cc0qn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc0qo; else goto cc0qp;
       cc0qo: // global
           R2 = R2;
           R1 = Data.Traversable.traverse_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0qp: // global
           I64[Sp - 8] = block_cc0qk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc0qt; else goto cc0ql;
       uc0qt: // global
           call _cc0qk(R1) args: 0, res: 0, upd: 0;
       cc0ql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.traverse_info" {
     Data.Traversable.traverse_info:
         const Data.Traversable.traverse_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc0qk() //  [R1]
         { []
         }
     {offset
       cc0qk: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0qk_info" {
     block_cc0qk_info:
         const _cc0qk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.849606214 UTC

[section ""data" . Data.Traversable.sequenceA_closure" {
     Data.Traversable.sequenceA_closure:
         const Data.Traversable.sequenceA_info;
 },
 Data.Traversable.sequenceA_entry() //  [R2]
         { []
         }
     {offset
       cc0qL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc0qM; else goto cc0qN;
       cc0qM: // global
           R2 = R2;
           R1 = Data.Traversable.sequenceA_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0qN: // global
           I64[Sp - 8] = block_cc0qI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc0qR; else goto cc0qJ;
       uc0qR: // global
           call _cc0qI(R1) args: 0, res: 0, upd: 0;
       cc0qJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.sequenceA_info" {
     Data.Traversable.sequenceA_info:
         const Data.Traversable.sequenceA_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc0qI() //  [R1]
         { []
         }
     {offset
       cc0qI: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0qI_info" {
     block_cc0qI_info:
         const _cc0qI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.855311129 UTC

[section ""data" . Data.Traversable.mapM_closure" {
     Data.Traversable.mapM_closure:
         const Data.Traversable.mapM_info;
 },
 Data.Traversable.mapM_entry() //  [R2]
         { []
         }
     {offset
       cc0r9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc0ra; else goto cc0rb;
       cc0ra: // global
           R2 = R2;
           R1 = Data.Traversable.mapM_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0rb: // global
           I64[Sp - 8] = block_cc0r6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc0rf; else goto cc0r7;
       uc0rf: // global
           call _cc0r6(R1) args: 0, res: 0, upd: 0;
       cc0r7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.mapM_info" {
     Data.Traversable.mapM_info:
         const Data.Traversable.mapM_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc0r6() //  [R1]
         { []
         }
     {offset
       cc0r6: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0r6_info" {
     block_cc0r6_info:
         const _cc0r6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.860721069 UTC

[section ""data" . Data.Traversable.sequence_closure" {
     Data.Traversable.sequence_closure:
         const Data.Traversable.sequence_info;
 },
 Data.Traversable.sequence_entry() //  [R2]
         { []
         }
     {offset
       cc0rx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc0ry; else goto cc0rz;
       cc0ry: // global
           R2 = R2;
           R1 = Data.Traversable.sequence_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0rz: // global
           I64[Sp - 8] = block_cc0ru_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc0rD; else goto cc0rv;
       uc0rD: // global
           call _cc0ru(R1) args: 0, res: 0, upd: 0;
       cc0rv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.sequence_info" {
     Data.Traversable.sequence_info:
         const Data.Traversable.sequence_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc0ru() //  [R1]
         { []
         }
     {offset
       cc0ru: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0ru_info" {
     block_cc0ru_info:
         const _cc0ru;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.867503627 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$ctraverse_closure" {
     Data.Traversable.$fTraversableFirst_$ctraverse_closure:
         const Data.Traversable.$fTraversableFirst_$ctraverse_info;
 },
 Data.Traversable.$fTraversableFirst_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0rZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc0s0; else goto cc0s1;
       cc0s0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableFirst_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0s1: // global
           I64[Sp - 24] = block_cc0rS_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc0sg; else goto cc0rT;
       uc0sg: // global
           call _cc0rS(R1) args: 0, res: 0, upd: 0;
       cc0rT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$ctraverse_info" {
     Data.Traversable.$fTraversableFirst_$ctraverse_info:
         const Data.Traversable.$fTraversableFirst_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0rS() //  [R1]
         { []
         }
     {offset
       cc0rS: // global
           _sc0ce::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc0rW; else goto cc0rX;
       cc0rW: // global
           R2 = _sc0ce::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cc0rX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc0sb; else goto cc0sa;
       cc0sb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc0sa: // global
           _sc0ci::P64 = P64[R1 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sc0ci::P64;
           I64[Sp + 8] = block_cc0s8_info;
           R2 = _sc0ce::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0rS_info" {
     block_cc0rS_info:
         const _cc0rS;
         const 2;
         const 30;
 },
 _cc0s8() //  [R1]
         { []
         }
     {offset
       cc0s8: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0s8_info" {
     block_cc0s8_info:
         const _cc0s8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.876683444 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$ctraverse_closure" {
     Data.Traversable.$fTraversable[]_$ctraverse_closure:
         const Data.Traversable.$fTraversable[]_$ctraverse_info;
 },
 z_sc0cn_entry() //  [R1]
         { []
         }
     {offset
       cc0sO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc0sP; else goto cc0sQ;
       cc0sP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0sQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sc0cn_info" {
     z_sc0cn_info:
         const z_sc0cn_entry;
         const 1;
         const 16;
 },
 go_sc0co_entry() //  [R1, R2]
         { []
         }
     {offset
       cc0t3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc0t4; else goto cc0t5;
       cc0t4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0t5: // global
           I64[Sp - 40] = block_cc0sW_info;
           _sc0co::P64 = R1;
           _sc0cl::P64 = P64[R1 + 7];
           _sc0cm::P64 = P64[R1 + 15];
           _sc0cn::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sc0cl::P64;
           P64[Sp - 24] = _sc0cm::P64;
           P64[Sp - 16] = _sc0cn::P64;
           P64[Sp - 8] = _sc0co::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc0tg; else goto cc0sX;
       uc0tg: // global
           call _cc0sW(R1) args: 0, res: 0, upd: 0;
       cc0sX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc0co_info" {
     go_sc0co_info:
         const go_sc0co_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cc0sW() //  [R1]
         { []
         }
     {offset
       cc0sW: // global
           if (R1 & 7 == 1) goto cc0t0; else goto cc0t1;
       cc0t0: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cc0t1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc0td; else goto cc0tc;
       cc0td: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc0tc: // global
           _sc0cr::P64 = P64[R1 + 6];
           _sc0cs::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sc0cs::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sc0cr::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0sW_info" {
     block_cc0sW_info:
         const _cc0sW;
         const 4;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$ctraverse_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0th: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc0tl; else goto cc0tk;
       cc0tl: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$ctraverse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0tk: // global
           I64[Hp - 48] = z_sc0cn_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = go_sc0co_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$ctraverse_info" {
     Data.Traversable.$fTraversable[]_$ctraverse_info:
         const Data.Traversable.$fTraversable[]_$ctraverse_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.887906587 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$ctraverse_closure" {
     Data.Traversable.$fTraversableEither_$ctraverse_closure:
         const Data.Traversable.$fTraversableEither_$ctraverse_info;
 },
 Data.Traversable.$fTraversableEither_$ctraverse_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cc0u7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc0u8; else goto cc0u9;
       cc0u8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0u9: // global
           I64[Sp - 24] = block_cc0u0_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc0uo; else goto cc0u1;
       uc0uo: // global
           call _cc0u0(R1) args: 0, res: 0, upd: 0;
       cc0u1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$ctraverse_info" {
     Data.Traversable.$fTraversableEither_$ctraverse_info:
         const Data.Traversable.$fTraversableEither_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0u0() //  [R1]
         { []
         }
     {offset
       cc0u0: // global
           _sc0cv::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc0u4; else goto cc0u5;
       cc0u4: // global
           R2 = _sc0cv::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cc0u5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc0uj; else goto cc0ui;
       cc0uj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc0ui: // global
           _sc0cB::P64 = P64[R1 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sc0cB::P64;
           I64[Sp + 8] = block_cc0ug_info;
           R2 = _sc0cv::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0u0_info" {
     block_cc0u0_info:
         const _cc0u0;
         const 2;
         const 30;
 },
 _cc0ug() //  [R1]
         { []
         }
     {offset
       cc0ug: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0ug_info" {
     block_cc0ug_info:
         const _cc0ug;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.896804673 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$ctraverse_closure" {
     Data.Traversable.$fTraversable(,)_$ctraverse_closure:
         const Data.Traversable.$fTraversable(,)_$ctraverse_info;
 },
 sat_sc0cL_entry() //  [R1, R2]
         { []
         }
     {offset
       cc0v2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0v6; else goto cc0v5;
       cc0v6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0v5: // global
           _sc0cI::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sc0cI::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0cL_info" {
     sat_sc0cL_info:
         const sat_sc0cL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cc0v7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc0v9; else goto cc0va;
       cc0v9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0va: // global
           I64[Sp - 24] = block_cc0uQ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc0vi; else goto cc0uR;
       uc0vi: // global
           call _cc0uQ(R1) args: 0, res: 0, upd: 0;
       cc0uR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$ctraverse_info" {
     Data.Traversable.$fTraversable(,)_$ctraverse_info:
         const Data.Traversable.$fTraversable(,)_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0uQ() //  [R1]
         { []
         }
     {offset
       cc0uQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0vd; else goto cc0vc;
       cc0vd: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc0vc: // global
           _sc0cI::P64 = P64[R1 + 7];
           _sc0cJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sc0cJ::P64;
           I64[Hp - 8] = sat_sc0cL_info;
           P64[Hp] = _sc0cI::P64;
           I64[Sp] = block_cc0v8_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0uQ_info" {
     block_cc0uQ_info:
         const _cc0uQ;
         const 2;
         const 30;
 },
 _cc0v8() //  [R1]
         { []
         }
     {offset
       cc0v8: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0v8_info" {
     block_cc0v8_info:
         const _cc0v8;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.905912915 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$csequence_closure" {
     Data.Traversable.$fTraversableProxy_$csequence_closure:
         const Data.Traversable.$fTraversableProxy_$csequence_info;
 },
 Data.Traversable.$fTraversableProxy_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0vO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0vP; else goto cc0vQ;
       cc0vP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0vQ: // global
           I64[Sp - 8] = block_cc0vM_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$csequence_info" {
     Data.Traversable.$fTraversableProxy_$csequence_info:
         const Data.Traversable.$fTraversableProxy_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0vM() //  [R1]
         { []
         }
     {offset
       cc0vM: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0vM_info" {
     block_cc0vM_info:
         const _cc0vM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.911652046 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$cmapM_closure" {
     Data.Traversable.$fTraversableProxy_$cmapM_closure:
         const Data.Traversable.$fTraversableProxy_$cmapM_info;
 },
 Data.Traversable.$fTraversableProxy_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0wc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0wd; else goto cc0we;
       cc0wd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0we: // global
           I64[Sp - 8] = block_cc0wa_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$cmapM_info" {
     Data.Traversable.$fTraversableProxy_$cmapM_info:
         const Data.Traversable.$fTraversableProxy_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0wa() //  [R1]
         { []
         }
     {offset
       cc0wa: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0wa_info" {
     block_cc0wa_info:
         const _cc0wa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.916771844 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$csequenceA_closure" {
     Data.Traversable.$fTraversableProxy_$csequenceA_closure:
         const Data.Traversable.$fTraversableProxy_$csequenceA_info;
 },
 Data.Traversable.$fTraversableProxy_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc0wy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0wz; else goto cc0wA;
       cc0wz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0wA: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$csequenceA_info" {
     Data.Traversable.$fTraversableProxy_$csequenceA_info:
         const Data.Traversable.$fTraversableProxy_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.92163986 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_$ctraverse_closure" {
     Data.Traversable.$fTraversableProxy_$ctraverse_closure:
         const Data.Traversable.$fTraversableProxy_$ctraverse_info;
 },
 Data.Traversable.$fTraversableProxy_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0wN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0wO; else goto cc0wP;
       cc0wO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProxy_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0wP: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Proxy.Proxy_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProxy_$ctraverse_info" {
     Data.Traversable.$fTraversableProxy_$ctraverse_info:
         const Data.Traversable.$fTraversableProxy_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.92487331 UTC

[section ""data" . Data.Traversable.$fTraversableProxy_closure" {
     Data.Traversable.$fTraversableProxy_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Proxy.$fFunctorProxy_closure;
         const Data.Foldable.$fFoldableProxy_closure;
         const Data.Traversable.$fTraversableProxy_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableProxy_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableProxy_$cmapM_closure+3;
         const Data.Traversable.$fTraversableProxy_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.927910469 UTC

[section ""data" . Data.Traversable.$fTraversableConst_$ctraverse_closure" {
     Data.Traversable.$fTraversableConst_$ctraverse_closure:
         const Data.Traversable.$fTraversableConst_$ctraverse_info;
 },
 Data.Traversable.$fTraversableConst_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0x3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0x4; else goto cc0x5;
       cc0x4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableConst_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0x5: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableConst_$ctraverse_info" {
     Data.Traversable.$fTraversableConst_$ctraverse_info:
         const Data.Traversable.$fTraversableConst_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.93155151 UTC

[section ""data" . Data.Traversable.$fTraversableDual1_closure" {
     Data.Traversable.$fTraversableDual1_closure:
         const Data.Traversable.$fTraversableDual1_info;
 },
 Data.Traversable.$fTraversableDual1_entry() //  [R2]
         { []
         }
     {offset
       cc0xg: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual1_info" {
     Data.Traversable.$fTraversableDual1_info:
         const Data.Traversable.$fTraversableDual1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.935859872 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$ctraverse_closure" {
     Data.Traversable.$fTraversableDual_$ctraverse_closure:
         const Data.Traversable.$fTraversableDual_$ctraverse_info;
 },
 Data.Traversable.$fTraversableDual_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc0xu: // global
           _sc0d5::P64 = R4;
           _sc0d4::P64 = R3;
           _sc0d3::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0xv; else goto cc0xw;
       cc0xw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc0xy; else goto cc0xx;
       cc0xy: // global
           HpAlloc = 32;
           goto cc0xv;
       cc0xv: // global
           R4 = _sc0d5::P64;
           R3 = _sc0d4::P64;
           R2 = _sc0d3::P64;
           R1 = Data.Traversable.$fTraversableDual_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0xx: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0d4::P64;
           P64[Hp] = _sc0d5::P64;
           I64[Sp - 16] = block_cc0xs_info;
           R2 = _sc0d3::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$ctraverse_info" {
     Data.Traversable.$fTraversableDual_$ctraverse_info:
         const Data.Traversable.$fTraversableDual_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0xs() //  [R1]
         { []
         }
     {offset
       cc0xs: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0xs_info" {
     block_cc0xs_info:
         const _cc0xs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.942028455 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$ctraverse_closure" {
     Data.Traversable.$fTraversableSum_$ctraverse_closure:
         const Data.Traversable.$fTraversableSum_$ctraverse_info;
 },
 Data.Traversable.$fTraversableSum_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cc0xW: // global
           _sc0da::P64 = R4;
           _sc0d9::P64 = R3;
           _sc0d8::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0xX; else goto cc0xY;
       cc0xY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc0y0; else goto cc0xZ;
       cc0y0: // global
           HpAlloc = 32;
           goto cc0xX;
       cc0xX: // global
           R4 = _sc0da::P64;
           R3 = _sc0d9::P64;
           R2 = _sc0d8::P64;
           R1 = Data.Traversable.$fTraversableSum_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0xZ: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0d9::P64;
           P64[Hp] = _sc0da::P64;
           I64[Sp - 16] = block_cc0xU_info;
           R2 = _sc0d8::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$ctraverse_info" {
     Data.Traversable.$fTraversableSum_$ctraverse_info:
         const Data.Traversable.$fTraversableSum_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0xU() //  [R1]
         { []
         }
     {offset
       cc0xU: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0xU_info" {
     block_cc0xU_info:
         const _cc0xU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.947924223 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$ctraverse_closure" {
     Data.Traversable.$fTraversableProduct_$ctraverse_closure:
         const Data.Traversable.$fTraversableProduct_$ctraverse_info;
 },
 Data.Traversable.$fTraversableProduct_$ctraverse_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cc0yo: // global
           _sc0df::P64 = R4;
           _sc0de::P64 = R3;
           _sc0dd::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0yp; else goto cc0yq;
       cc0yq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc0ys; else goto cc0yr;
       cc0ys: // global
           HpAlloc = 32;
           goto cc0yp;
       cc0yp: // global
           R4 = _sc0df::P64;
           R3 = _sc0de::P64;
           R2 = _sc0dd::P64;
           R1 = Data.Traversable.$fTraversableProduct_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0yr: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0de::P64;
           P64[Hp] = _sc0df::P64;
           I64[Sp - 16] = block_cc0ym_info;
           R2 = _sc0dd::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$ctraverse_info" {
     Data.Traversable.$fTraversableProduct_$ctraverse_info:
         const Data.Traversable.$fTraversableProduct_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0ym() //  [R1]
         { []
         }
     {offset
       cc0ym: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0ym_info" {
     block_cc0ym_info:
         const _cc0ym;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.953852297 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$csequence_closure" {
     Data.Traversable.$fTraversableU1_$csequence_closure:
         const Data.Traversable.$fTraversableU1_$csequence_info;
 },
 Data.Traversable.$fTraversableU1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0yP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0yQ; else goto cc0yR;
       cc0yQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0yR: // global
           I64[Sp - 8] = block_cc0yN_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$csequence_info" {
     Data.Traversable.$fTraversableU1_$csequence_info:
         const Data.Traversable.$fTraversableU1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0yN() //  [R1]
         { []
         }
     {offset
       cc0yN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Generics.U1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0yN_info" {
     block_cc0yN_info:
         const _cc0yN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.95945107 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$cmapM_closure" {
     Data.Traversable.$fTraversableU1_$cmapM_closure:
         const Data.Traversable.$fTraversableU1_$cmapM_info;
 },
 Data.Traversable.$fTraversableU1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0zd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0ze; else goto cc0zf;
       cc0ze: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0zf: // global
           I64[Sp - 8] = block_cc0zb_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$cmapM_info" {
     Data.Traversable.$fTraversableU1_$cmapM_info:
         const Data.Traversable.$fTraversableU1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0zb() //  [R1]
         { []
         }
     {offset
       cc0zb: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Generics.U1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0zb_info" {
     block_cc0zb_info:
         const _cc0zb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.964975526 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$csequenceA_closure" {
     Data.Traversable.$fTraversableU1_$csequenceA_closure:
         const Data.Traversable.$fTraversableU1_$csequenceA_info;
 },
 Data.Traversable.$fTraversableU1_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0zz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0zA; else goto cc0zB;
       cc0zA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0zB: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Generics.U1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$csequenceA_info" {
     Data.Traversable.$fTraversableU1_$csequenceA_info:
         const Data.Traversable.$fTraversableU1_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.968666532 UTC

[section ""data" . Data.Traversable.$fTraversableU1_$ctraverse_closure" {
     Data.Traversable.$fTraversableU1_$ctraverse_closure:
         const Data.Traversable.$fTraversableU1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableU1_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cc0zO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0zP; else goto cc0zQ;
       cc0zP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableU1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0zQ: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Generics.U1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableU1_$ctraverse_info" {
     Data.Traversable.$fTraversableU1_$ctraverse_info:
         const Data.Traversable.$fTraversableU1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.97208677 UTC

[section ""data" . Data.Traversable.$fTraversableU1_closure" {
     Data.Traversable.$fTraversableU1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorU1_closure;
         const Data.Foldable.$fFoldableU1_closure;
         const Data.Traversable.$fTraversableU1_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableU1_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableU1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableU1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.974716886 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$ctraverse_closure" {
     Data.Traversable.$fTraversableIdentity_$ctraverse_closure:
         const Data.Traversable.$fTraversableIdentity_$ctraverse_info;
 },
 Data.Traversable.$fTraversableIdentity_$ctraverse_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cc0A7: // global
           _sc0dw::P64 = R4;
           _sc0dv::P64 = R3;
           _sc0du::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0A8; else goto cc0A9;
       cc0A9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc0Ab; else goto cc0Aa;
       cc0Ab: // global
           HpAlloc = 32;
           goto cc0A8;
       cc0A8: // global
           R4 = _sc0dw::P64;
           R3 = _sc0dv::P64;
           R2 = _sc0du::P64;
           R1 = Data.Traversable.$fTraversableIdentity_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Aa: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0dv::P64;
           P64[Hp] = _sc0dw::P64;
           I64[Sp - 16] = block_cc0A5_info;
           R2 = _sc0du::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$ctraverse_info" {
     Data.Traversable.$fTraversableIdentity_$ctraverse_info:
         const Data.Traversable.$fTraversableIdentity_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0A5() //  [R1]
         { []
         }
     {offset
       cc0A5: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0A5_info" {
     block_cc0A5_info:
         const _cc0A5;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.98074945 UTC

[section ""data" . Data.Traversable.$fTraversableV1_$ctraverse_closure" {
     Data.Traversable.$fTraversableV1_$ctraverse_closure:
         const Data.Traversable.$fTraversableV1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableV1_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cc0Aw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Ax; else goto cc0Ay;
       cc0Ax: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableV1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Ay: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableV1_$ctraverse_info" {
     Data.Traversable.$fTraversableV1_$ctraverse_info:
         const Data.Traversable.$fTraversableV1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.98480524 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$ctraverse_closure" {
     Data.Traversable.$fTraversablePar1_$ctraverse_closure:
         const Data.Traversable.$fTraversablePar1_$ctraverse_info;
 },
 Data.Traversable.$fTraversablePar1_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc0AM: // global
           _sc0dE::P64 = R4;
           _sc0dD::P64 = R3;
           _sc0dC::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0AN; else goto cc0AO;
       cc0AO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc0AQ; else goto cc0AP;
       cc0AQ: // global
           HpAlloc = 32;
           goto cc0AN;
       cc0AN: // global
           R4 = _sc0dE::P64;
           R3 = _sc0dD::P64;
           R2 = _sc0dC::P64;
           R1 = Data.Traversable.$fTraversablePar1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0AP: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0dD::P64;
           P64[Hp] = _sc0dE::P64;
           I64[Sp - 16] = block_cc0AK_info;
           R2 = _sc0dC::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$ctraverse_info" {
     Data.Traversable.$fTraversablePar1_$ctraverse_info:
         const Data.Traversable.$fTraversablePar1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0AK() //  [R1]
         { []
         }
     {offset
       cc0AK: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0AK_info" {
     block_cc0AK_info:
         const _cc0AK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.990095755 UTC

[section ""data" . Data.Traversable.$fTraversableM2_closure" {
     Data.Traversable.$fTraversableM2_closure:
         const Data.Traversable.$fTraversableM2_info;
 },
 Data.Traversable.$fTraversableM2_entry() //  [R2]
         { []
         }
     {offset
       cc0Bb: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM2_info" {
     Data.Traversable.$fTraversableM2_info:
         const Data.Traversable.$fTraversableM2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:54.995130912 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$ctraverse_closure" {
     Data.Traversable.$fTraversableRec1_$ctraverse_closure:
         const Data.Traversable.$fTraversableRec1_$ctraverse_info;
 },
 sat_sc0dN_entry() //  [R1]
         { []
         }
     {offset
       cc0Bq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc0Br; else goto cc0Bs;
       cc0Br: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Bs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0dN_info" {
     sat_sc0dN_info:
         const sat_sc0dN_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$ctraverse_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cc0Bv: // global
           _sc0dL::P64 = R5;
           _sc0dK::P64 = R4;
           _sc0dJ::P64 = R3;
           _sc0dI::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0Bw; else goto cc0Bx;
       cc0Bx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0Bz; else goto cc0By;
       cc0Bz: // global
           HpAlloc = 48;
           goto cc0Bw;
       cc0Bw: // global
           R5 = _sc0dL::P64;
           R4 = _sc0dK::P64;
           R3 = _sc0dJ::P64;
           R2 = _sc0dI::P64;
           R1 = Data.Traversable.$fTraversableRec1_$ctraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0By: // global
           I64[Hp - 40] = sat_sc0dN_info;
           P64[Hp - 24] = _sc0dI::P64;
           P64[Hp - 16] = _sc0dJ::P64;
           P64[Hp - 8] = _sc0dK::P64;
           P64[Hp] = _sc0dL::P64;
           I64[Sp - 16] = block_cc0Bt_info;
           R2 = _sc0dJ::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$ctraverse_info" {
     Data.Traversable.$fTraversableRec1_$ctraverse_info:
         const Data.Traversable.$fTraversableRec1_$ctraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc0Bt() //  [R1]
         { []
         }
     {offset
       cc0Bt: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Bt_info" {
     block_cc0Bt_info:
         const _cc0Bt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.002450325 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$cp2Traversable_closure" {
     Data.Traversable.$fTraversableRec1_$cp2Traversable_closure:
         const Data.Traversable.$fTraversableRec1_$cp2Traversable_info;
         const 0;
 },
 sat_sc0dP_entry() //  [R1]
         { []
         }
     {offset
       cc0C7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0C8; else goto cc0C9;
       cc0C8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0C9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0dP_info" {
     sat_sc0dP_info:
         const sat_sc0dP_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableRec1_$cp2Traversable_entry() //  [R2]
         { []
         }
     {offset
       cc0Ca: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0Ce; else goto cc0Cd;
       cc0Ce: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$cp2Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0Cd: // global
           I64[Hp - 16] = sat_sc0dP_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldableRec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$cp2Traversable_info" {
     Data.Traversable.$fTraversableRec1_$cp2Traversable_info:
         const Data.Traversable.$fTraversableRec1_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc0Cf_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.008292031 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$cp1Traversable_closure" {
     Data.Traversable.$fTraversableRec1_$cp1Traversable_closure:
         const Data.Traversable.$fTraversableRec1_$cp1Traversable_info;
 },
 sat_sc0dR_entry() //  [R1]
         { []
         }
     {offset
       cc0Cy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Cz; else goto cc0CA;
       cc0Cz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0CA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0dR_info" {
     sat_sc0dR_info:
         const sat_sc0dR_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableRec1_$cp1Traversable_entry() //  [R2]
         { []
         }
     {offset
       cc0CB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0CF; else goto cc0CE;
       cc0CF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$cp1Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0CE: // global
           I64[Hp - 16] = sat_sc0dR_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctorRec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$cp1Traversable_info" {
     Data.Traversable.$fTraversableRec1_$cp1Traversable_info:
         const Data.Traversable.$fTraversableRec1_$cp1Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.01369999 UTC

[section ""data" . Data.Traversable.$fTraversableK1_$ctraverse_closure" {
     Data.Traversable.$fTraversableK1_$ctraverse_closure:
         const Data.Traversable.$fTraversableK1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableK1_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cc0CU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0CV; else goto cc0CW;
       cc0CV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableK1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0CW: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableK1_$ctraverse_info" {
     Data.Traversable.$fTraversableK1_$ctraverse_info:
         const Data.Traversable.$fTraversableK1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.018289614 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$ctraverse_closure" {
     Data.Traversable.$fTraversableM1_$ctraverse_closure:
         const Data.Traversable.$fTraversableM1_$ctraverse_info;
 },
 sat_sc0e0_entry() //  [R1]
         { []
         }
     {offset
       cc0Db: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc0Dc; else goto cc0Dd;
       cc0Dc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Dd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0e0_info" {
     sat_sc0e0_info:
         const sat_sc0e0_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$ctraverse_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cc0Dg: // global
           _sc0dY::P64 = R5;
           _sc0dX::P64 = R4;
           _sc0dW::P64 = R3;
           _sc0dV::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0Dh; else goto cc0Di;
       cc0Di: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0Dk; else goto cc0Dj;
       cc0Dk: // global
           HpAlloc = 48;
           goto cc0Dh;
       cc0Dh: // global
           R5 = _sc0dY::P64;
           R4 = _sc0dX::P64;
           R3 = _sc0dW::P64;
           R2 = _sc0dV::P64;
           R1 = Data.Traversable.$fTraversableM1_$ctraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Dj: // global
           I64[Hp - 40] = sat_sc0e0_info;
           P64[Hp - 24] = _sc0dV::P64;
           P64[Hp - 16] = _sc0dW::P64;
           P64[Hp - 8] = _sc0dX::P64;
           P64[Hp] = _sc0dY::P64;
           I64[Sp - 16] = block_cc0De_info;
           R2 = _sc0dW::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$ctraverse_info" {
     Data.Traversable.$fTraversableM1_$ctraverse_info:
         const Data.Traversable.$fTraversableM1_$ctraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc0De() //  [R1]
         { []
         }
     {offset
       cc0De: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0De_info" {
     block_cc0De_info:
         const _cc0De;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.02625165 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$cp2Traversable_closure" {
     Data.Traversable.$fTraversableM1_$cp2Traversable_closure:
         const Data.Traversable.$fTraversableM1_$cp2Traversable_info;
         const 0;
 },
 sat_sc0e2_entry() //  [R1]
         { []
         }
     {offset
       cc0DS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0DT; else goto cc0DU;
       cc0DT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0DU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0e2_info" {
     sat_sc0e2_info:
         const sat_sc0e2_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableM1_$cp2Traversable_entry() //  [R2]
         { []
         }
     {offset
       cc0DV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0DZ; else goto cc0DY;
       cc0DZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$cp2Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0DY: // global
           I64[Hp - 16] = sat_sc0e2_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldableM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$cp2Traversable_info" {
     Data.Traversable.$fTraversableM1_$cp2Traversable_info:
         const Data.Traversable.$fTraversableM1_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc0Cf_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.031949118 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$cp1Traversable_closure" {
     Data.Traversable.$fTraversableM1_$cp1Traversable_closure:
         const Data.Traversable.$fTraversableM1_$cp1Traversable_info;
 },
 sat_sc0e4_entry() //  [R1]
         { []
         }
     {offset
       cc0Ei: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Ej; else goto cc0Ek;
       cc0Ej: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Ek: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0e4_info" {
     sat_sc0e4_info:
         const sat_sc0e4_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableM1_$cp1Traversable_entry() //  [R2]
         { []
         }
     {offset
       cc0El: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0Ep; else goto cc0Eo;
       cc0Ep: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$cp1Traversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc0Eo: // global
           I64[Hp - 16] = sat_sc0e4_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctorM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$cp1Traversable_info" {
     Data.Traversable.$fTraversableM1_$cp1Traversable_info:
         const Data.Traversable.$fTraversableM1_$cp1Traversable_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.039878905 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$ctraverse_closure" {
     Data.Traversable.$fTraversable:+:_$ctraverse_closure:
         const Data.Traversable.$fTraversable:+:_$ctraverse_info;
 },
 sat_sc0ed_entry() //  [R1]
         { []
         }
     {offset
       cc0EN: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc0EO; else goto cc0EP;
       cc0EO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0EP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0ed_info" {
     sat_sc0ed_info:
         const sat_sc0ed_entry;
         const 4;
         const 15;
 },
 sat_sc0eg_entry() //  [R1]
         { []
         }
     {offset
       cc0EW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc0EX; else goto cc0EY;
       cc0EX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0EY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eg_info" {
     sat_sc0eg_info:
         const sat_sc0eg_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversable:+:_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cc0F3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc0F4; else goto cc0F5;
       cc0F4: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0F5: // global
           I64[Sp - 40] = block_cc0EE_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc0Fm; else goto cc0EF;
       uc0Fm: // global
           call _cc0EE(R1) args: 0, res: 0, upd: 0;
       cc0EF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$ctraverse_info" {
     Data.Traversable.$fTraversable:+:_$ctraverse_info:
         const Data.Traversable.$fTraversable:+:_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cc0EE() //  [R1]
         { []
         }
     {offset
       cc0EE: // global
           _sc0e7::P64 = P64[Sp + 24];
           _sc0e8::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cc0F0; else goto cc0F1;
       cc0F0: // global
           Hp = Hp + 48;
           _sc0ea::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cc0Fh; else goto cc0F8;
       cc0F8: // global
           _sc0eb::P64 = P64[_sc0ea::P64 + 7];
           I64[Hp - 40] = sat_sc0ed_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sc0e7::P64;
           P64[Hp - 8] = _sc0e8::P64;
           P64[Hp] = _sc0eb::P64;
           I64[Sp + 24] = block_cc0F6_info;
           R2 = _sc0e7::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
       cc0F1: // global
           Hp = Hp + 48;
           _sc0ea::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cc0Fh; else goto cc0Fg;
       cc0Fh: // global
           HpAlloc = 48;
           R1 = _sc0ea::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc0Fg: // global
           _sc0ee::P64 = P64[_sc0ea::P64 + 6];
           I64[Hp - 40] = sat_sc0eg_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sc0e7::P64;
           P64[Hp - 8] = _sc0e8::P64;
           P64[Hp] = _sc0ee::P64;
           I64[Sp + 24] = block_cc0Fe_info;
           R2 = _sc0e7::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0EE_info" {
     block_cc0EE_info:
         const _cc0EE;
         const 4;
         const 30;
 },
 _cc0F6() //  [R1]
         { []
         }
     {offset
       cc0F6: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Generics.L1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0F6_info" {
     block_cc0F6_info:
         const _cc0F6;
         const 1;
         const 30;
 },
 _cc0Fe() //  [R1]
         { []
         }
     {offset
       cc0Fe: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Generics.R1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Fe_info" {
     block_cc0Fe_info:
         const _cc0Fe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.053864103 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$cp2Traversable_closure" {
     Data.Traversable.$fTraversable:+:_$cp2Traversable_closure:
         const Data.Traversable.$fTraversable:+:_$cp2Traversable_info;
         const 0;
 },
 sat_sc0ek_entry() //  [R1]
         { []
         }
     {offset
       cc0Gj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Gk; else goto cc0Gl;
       cc0Gk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Gl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0ek_info" {
     sat_sc0ek_info:
         const sat_sc0ek_entry;
         const 1;
         const 16;
 },
 sat_sc0ej_entry() //  [R1]
         { []
         }
     {offset
       cc0Gq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Gr; else goto cc0Gs;
       cc0Gr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Gs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0ej_info" {
     sat_sc0ej_info:
         const sat_sc0ej_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:+:_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc0Gt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0Gx; else goto cc0Gw;
       cc0Gx: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Gw: // global
           I64[Hp - 40] = sat_sc0ek_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sc0ej_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldable:+:_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$cp2Traversable_info" {
     Data.Traversable.$fTraversable:+:_$cp2Traversable_info:
         const Data.Traversable.$fTraversable:+:_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc0Cf_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.061882082 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$cp1Traversable_closure" {
     Data.Traversable.$fTraversable:+:_$cp1Traversable_closure:
         const Data.Traversable.$fTraversable:+:_$cp1Traversable_info;
 },
 sat_sc0eo_entry() //  [R1]
         { []
         }
     {offset
       cc0GW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0GX; else goto cc0GY;
       cc0GX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0GY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eo_info" {
     sat_sc0eo_info:
         const sat_sc0eo_entry;
         const 1;
         const 16;
 },
 sat_sc0en_entry() //  [R1]
         { []
         }
     {offset
       cc0H3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0H4; else goto cc0H5;
       cc0H4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0H5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0en_info" {
     sat_sc0en_info:
         const sat_sc0en_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:+:_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc0H6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0Ha; else goto cc0H9;
       cc0Ha: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0H9: // global
           I64[Hp - 40] = sat_sc0eo_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sc0en_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctor:+:_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$cp1Traversable_info" {
     Data.Traversable.$fTraversable:+:_$cp1Traversable_info:
         const Data.Traversable.$fTraversable:+:_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.070308066 UTC

[section ""data" . Data.Traversable.$w$ctraverse_closure" {
     Data.Traversable.$w$ctraverse_closure:
         const Data.Traversable.$w$ctraverse_info;
 },
 sat_sc0ew_entry() //  [R1]
         { []
         }
     {offset
       cc0Hz: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc0HA; else goto cc0HB;
       cc0HA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0HB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0ew_info" {
     sat_sc0ew_info:
         const sat_sc0ew_entry;
         const 4;
         const 15;
 },
 sat_sc0ev_entry() //  [R1]
         { []
         }
     {offset
       cc0HG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc0HH; else goto cc0HI;
       cc0HH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0HI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0ev_info" {
     sat_sc0ev_info:
         const sat_sc0ev_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$w$ctraverse_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cc0HJ: // global
           _sc0et::P64 = R6;
           _sc0es::P64 = R5;
           _sc0er::P64 = R4;
           _sc0eq::P64 = R3;
           _sc0ep::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0HK; else goto cc0HL;
       cc0HL: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cc0HN; else goto cc0HM;
       cc0HN: // global
           HpAlloc = 96;
           goto cc0HK;
       cc0HK: // global
           R6 = _sc0et::P64;
           R5 = _sc0es::P64;
           R4 = _sc0er::P64;
           R3 = _sc0eq::P64;
           R2 = _sc0ep::P64;
           R1 = Data.Traversable.$w$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cc0HM: // global
           I64[Hp - 88] = sat_sc0ew_info;
           P64[Hp - 72] = _sc0eq::P64;
           P64[Hp - 64] = _sc0er::P64;
           P64[Hp - 56] = _sc0es::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_sc0ev_info;
           P64[Hp - 24] = _sc0ep::P64;
           P64[Hp - 16] = _sc0er::P64;
           P64[Hp - 8] = _sc0es::P64;
           P64[Hp] = _sc0et::P64;
           R2 = _sc0er::P64;
           I64[Sp - 24] = stg_ap_ppp_info;
           P64[Sp - 16] = GHC.Generics.:*:_closure+2;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$w$ctraverse_info" {
     Data.Traversable.$w$ctraverse_info:
         const Data.Traversable.$w$ctraverse_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.079217681 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$ctraverse_closure" {
     Data.Traversable.$fTraversable:*:_$ctraverse_closure:
         const Data.Traversable.$fTraversable:*:_$ctraverse_info;
 },
 Data.Traversable.$fTraversable:*:_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cc0Iq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc0Ir; else goto cc0Is;
       cc0Ir: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Is: // global
           I64[Sp - 40] = block_cc0In_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc0Iw; else goto cc0Io;
       uc0Iw: // global
           call _cc0In(R1) args: 0, res: 0, upd: 0;
       cc0Io: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$ctraverse_info" {
     Data.Traversable.$fTraversable:*:_$ctraverse_info:
         const Data.Traversable.$fTraversable:*:_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cc0In() //  [R1]
         { []
         }
     {offset
       cc0In: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0In_info" {
     block_cc0In_info:
         const _cc0In;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.085307061 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$cp2Traversable_closure" {
     Data.Traversable.$fTraversable:*:_$cp2Traversable_closure:
         const Data.Traversable.$fTraversable:*:_$cp2Traversable_info;
         const 0;
 },
 sat_sc0eI_entry() //  [R1]
         { []
         }
     {offset
       cc0IQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0IR; else goto cc0IS;
       cc0IR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0IS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eI_info" {
     sat_sc0eI_info:
         const sat_sc0eI_entry;
         const 1;
         const 16;
 },
 sat_sc0eH_entry() //  [R1]
         { []
         }
     {offset
       cc0IX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0IY; else goto cc0IZ;
       cc0IY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0IZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eH_info" {
     sat_sc0eH_info:
         const sat_sc0eH_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:*:_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc0J0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0J4; else goto cc0J3;
       cc0J4: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0J3: // global
           I64[Hp - 40] = sat_sc0eI_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sc0eH_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldable:*:_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$cp2Traversable_info" {
     Data.Traversable.$fTraversable:*:_$cp2Traversable_info:
         const Data.Traversable.$fTraversable:*:_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc0Cf_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.093589944 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$cp1Traversable_closure" {
     Data.Traversable.$fTraversable:*:_$cp1Traversable_closure:
         const Data.Traversable.$fTraversable:*:_$cp1Traversable_info;
 },
 sat_sc0eM_entry() //  [R1]
         { []
         }
     {offset
       cc0Jt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Ju; else goto cc0Jv;
       cc0Ju: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Jv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eM_info" {
     sat_sc0eM_info:
         const sat_sc0eM_entry;
         const 1;
         const 16;
 },
 sat_sc0eL_entry() //  [R1]
         { []
         }
     {offset
       cc0JA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0JB; else goto cc0JC;
       cc0JB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0JC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eL_info" {
     sat_sc0eL_info:
         const sat_sc0eL_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:*:_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc0JD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0JH; else goto cc0JG;
       cc0JH: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0JG: // global
           I64[Hp - 40] = sat_sc0eM_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sc0eL_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctor:*:_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$cp1Traversable_info" {
     Data.Traversable.$fTraversable:*:_$cp1Traversable_info:
         const Data.Traversable.$fTraversable:*:_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.100128084 UTC

[section ""data" . Data.Traversable.$fTraversable:.:1_closure" {
     Data.Traversable.$fTraversable:.:1_closure:
         const Data.Traversable.$fTraversable:.:1_info;
 },
 Data.Traversable.$fTraversable:.:1_entry() //  [R2]
         { []
         }
     {offset
       cc0K2: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:1_info" {
     Data.Traversable.$fTraversable:.:1_info:
         const Data.Traversable.$fTraversable:.:1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.105502669 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$ctraverse_closure" {
     Data.Traversable.$fTraversable:.:_$ctraverse_closure:
         const Data.Traversable.$fTraversable:.:_$ctraverse_info;
 },
 sat_sc0eU_entry() //  [R1]
         { []
         }
     {offset
       cc0Kl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc0Km; else goto cc0Kn;
       cc0Km: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Kn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eU_info" {
     sat_sc0eU_info:
         const sat_sc0eU_entry;
         const 3;
         const 15;
 },
 sat_sc0eV_entry() //  [R1]
         { []
         }
     {offset
       cc0Ko: // global
           _sc0eV::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cc0Kp; else goto cc0Kq;
       cc0Kq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc0Ks; else goto cc0Kr;
       cc0Ks: // global
           HpAlloc = 40;
           goto cc0Kp;
       cc0Kp: // global
           R1 = _sc0eV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Kr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc0eV::P64;
           _sc0eO::P64 = P64[_sc0eV::P64 + 16];
           _sc0eP::P64 = P64[_sc0eV::P64 + 24];
           _sc0eQ::P64 = P64[_sc0eV::P64 + 32];
           _sc0eR::P64 = P64[_sc0eV::P64 + 40];
           _sc0eS::P64 = P64[_sc0eV::P64 + 48];
           I64[Hp - 32] = sat_sc0eU_info;
           P64[Hp - 16] = _sc0eP::P64;
           P64[Hp - 8] = _sc0eQ::P64;
           P64[Hp] = _sc0eR::P64;
           R2 = _sc0eO::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = _sc0eQ::P64;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sc0eS::P64;
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eV_info" {
     sat_sc0eV_info:
         const sat_sc0eV_entry;
         const 5;
         const 15;
 },
 Data.Traversable.$fTraversable:.:_$ctraverse_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       cc0Kv: // global
           _sc0eS::P64 = R6;
           _sc0eR::P64 = R5;
           _sc0eQ::P64 = R4;
           _sc0eP::P64 = R3;
           _sc0eO::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc0Kw; else goto cc0Kx;
       cc0Kx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc0Kz; else goto cc0Ky;
       cc0Kz: // global
           HpAlloc = 56;
           goto cc0Kw;
       cc0Kw: // global
           R6 = _sc0eS::P64;
           R5 = _sc0eR::P64;
           R4 = _sc0eQ::P64;
           R3 = _sc0eP::P64;
           R2 = _sc0eO::P64;
           R1 = Data.Traversable.$fTraversable:.:_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Ky: // global
           I64[Hp - 48] = sat_sc0eV_info;
           P64[Hp - 32] = _sc0eO::P64;
           P64[Hp - 24] = _sc0eP::P64;
           P64[Hp - 16] = _sc0eQ::P64;
           P64[Hp - 8] = _sc0eR::P64;
           P64[Hp] = _sc0eS::P64;
           I64[Sp - 16] = block_cc0Kt_info;
           R2 = _sc0eQ::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$ctraverse_info" {
     Data.Traversable.$fTraversable:.:_$ctraverse_info:
         const Data.Traversable.$fTraversable:.:_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cc0Kt() //  [R1]
         { []
         }
     {offset
       cc0Kt: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversable:.:1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Kt_info" {
     block_cc0Kt_info:
         const _cc0Kt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.115875356 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$cp2Traversable_closure" {
     Data.Traversable.$fTraversable:.:_$cp2Traversable_closure:
         const Data.Traversable.$fTraversable:.:_$cp2Traversable_info;
         const 0;
 },
 sat_sc0eZ_entry() //  [R1]
         { []
         }
     {offset
       cc0Le: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Lf; else goto cc0Lg;
       cc0Lf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Lg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eZ_info" {
     sat_sc0eZ_info:
         const sat_sc0eZ_entry;
         const 1;
         const 16;
 },
 sat_sc0eY_entry() //  [R1]
         { []
         }
     {offset
       cc0Ll: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Lm; else goto cc0Ln;
       cc0Lm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Ln: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0eY_info" {
     sat_sc0eY_info:
         const sat_sc0eY_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:.:_$cp2Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc0Lo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0Ls; else goto cc0Lr;
       cc0Ls: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Lr: // global
           I64[Hp - 40] = sat_sc0eZ_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sc0eY_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Foldable.$fFoldable:.:_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$cp2Traversable_info" {
     Data.Traversable.$fTraversable:.:_$cp2Traversable_info:
         const Data.Traversable.$fTraversable:.:_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc0Cf_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.124254572 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$cp1Traversable_closure" {
     Data.Traversable.$fTraversable:.:_$cp1Traversable_closure:
         const Data.Traversable.$fTraversable:.:_$cp1Traversable_info;
 },
 sat_sc0f3_entry() //  [R1]
         { []
         }
     {offset
       cc0LR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0LS; else goto cc0LT;
       cc0LS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0LT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0f3_info" {
     sat_sc0f3_info:
         const sat_sc0f3_entry;
         const 1;
         const 16;
 },
 sat_sc0f2_entry() //  [R1]
         { []
         }
     {offset
       cc0LY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0LZ; else goto cc0M0;
       cc0LZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0M0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0f2_info" {
     sat_sc0f2_info:
         const sat_sc0f2_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversable:.:_$cp1Traversable_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc0M1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc0M5; else goto cc0M4;
       cc0M5: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0M4: // global
           I64[Hp - 40] = sat_sc0f3_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sc0f2_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fFunctor:.:_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$cp1Traversable_info" {
     Data.Traversable.$fTraversable:.:_$cp1Traversable_info:
         const Data.Traversable.$fTraversable:.:_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.131439131 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec4_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec4_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec4_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0Ms: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Mt; else goto cc0Mu;
       cc0Mt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Mu: // global
           I64[Sp - 16] = block_cc0Mq_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$ctraverse_info" {
     Data.Traversable.$fTraversableURec4_$ctraverse_info:
         const Data.Traversable.$fTraversableURec4_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0Mq() //  [R1]
         { []
         }
     {offset
       cc0Mq: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Mq_info" {
     block_cc0Mq_info:
         const _cc0Mq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.137131794 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec3_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec3_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec3_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0MO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0MP; else goto cc0MQ;
       cc0MP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0MQ: // global
           I64[Sp - 16] = block_cc0MM_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$ctraverse_info" {
     Data.Traversable.$fTraversableURec3_$ctraverse_info:
         const Data.Traversable.$fTraversableURec3_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0MM() //  [R1]
         { []
         }
     {offset
       cc0MM: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0MM_info" {
     block_cc0MM_info:
         const _cc0MM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.142826383 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec2_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec2_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec2_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0Na: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Nb; else goto cc0Nc;
       cc0Nb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Nc: // global
           I64[Sp - 16] = block_cc0N8_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$ctraverse_info" {
     Data.Traversable.$fTraversableURec2_$ctraverse_info:
         const Data.Traversable.$fTraversableURec2_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0N8() //  [R1]
         { []
         }
     {offset
       cc0N8: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0N8_info" {
     block_cc0N8_info:
         const _cc0N8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.148572116 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec1_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec1_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec1_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0Nw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Nx; else goto cc0Ny;
       cc0Nx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Ny: // global
           I64[Sp - 16] = block_cc0Nu_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$ctraverse_info" {
     Data.Traversable.$fTraversableURec1_$ctraverse_info:
         const Data.Traversable.$fTraversableURec1_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0Nu() //  [R1]
         { []
         }
     {offset
       cc0Nu: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Nu_info" {
     block_cc0Nu_info:
         const _cc0Nu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.154377866 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec0_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec0_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec0_$ctraverse_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc0NS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0NT; else goto cc0NU;
       cc0NT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0NU: // global
           I64[Sp - 16] = block_cc0NQ_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$ctraverse_info" {
     Data.Traversable.$fTraversableURec0_$ctraverse_info:
         const Data.Traversable.$fTraversableURec0_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0NQ() //  [R1]
         { []
         }
     {offset
       cc0NQ: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0NQ_info" {
     block_cc0NQ_info:
         const _cc0NQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.160236614 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$ctraverse_closure" {
     Data.Traversable.$fTraversableURec_$ctraverse_closure:
         const Data.Traversable.$fTraversableURec_$ctraverse_info;
 },
 Data.Traversable.$fTraversableURec_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc0Oe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Of; else goto cc0Og;
       cc0Of: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Og: // global
           I64[Sp - 16] = block_cc0Oc_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$ctraverse_info" {
     Data.Traversable.$fTraversableURec_$ctraverse_info:
         const Data.Traversable.$fTraversableURec_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0Oc() //  [R1]
         { []
         }
     {offset
       cc0Oc: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Oc_info" {
     block_cc0Oc_info:
         const _cc0Oc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.166015162 UTC

[section ""data" . Data.Traversable.$dmsequence_closure" {
     Data.Traversable.$dmsequence_closure:
         const Data.Traversable.$dmsequence_info;
 },
 sat_sc0fG_entry() //  [R1]
         { []
         }
     {offset
       cc0OC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0OD; else goto cc0OE;
       cc0OD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0OE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0fG_info" {
     sat_sc0fG_info:
         const sat_sc0fG_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$dmsequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0OF: // global
           _sc0fF::P64 = R3;
           _sc0fE::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cc0OG; else goto cc0OH;
       cc0OH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0OJ; else goto cc0OI;
       cc0OJ: // global
           HpAlloc = 24;
           goto cc0OG;
       cc0OG: // global
           R3 = _sc0fF::P64;
           R2 = _sc0fE::P64;
           R1 = Data.Traversable.$dmsequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0OI: // global
           I64[Hp - 16] = sat_sc0fG_info;
           P64[Hp] = _sc0fF::P64;
           R2 = _sc0fE::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Traversable.sequenceA_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmsequence_info" {
     Data.Traversable.$dmsequence_info:
         const Data.Traversable.$dmsequence_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.171978462 UTC

[section ""data" . Data.Traversable.$dmmapM_closure" {
     Data.Traversable.$dmmapM_closure:
         const Data.Traversable.$dmmapM_info;
 },
 sat_sc0fJ_entry() //  [R1]
         { []
         }
     {offset
       cc0P5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0P6; else goto cc0P7;
       cc0P6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0P7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0fJ_info" {
     sat_sc0fJ_info:
         const sat_sc0fJ_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$dmmapM_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0P8: // global
           _sc0fI::P64 = R3;
           _sc0fH::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cc0P9; else goto cc0Pa;
       cc0Pa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc0Pc; else goto cc0Pb;
       cc0Pc: // global
           HpAlloc = 24;
           goto cc0P9;
       cc0P9: // global
           R3 = _sc0fI::P64;
           R2 = _sc0fH::P64;
           R1 = Data.Traversable.$dmmapM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Pb: // global
           I64[Hp - 16] = sat_sc0fJ_info;
           P64[Hp] = _sc0fI::P64;
           R2 = _sc0fH::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Traversable.traverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmmapM_info" {
     Data.Traversable.$dmmapM_info:
         const Data.Traversable.$dmmapM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.178290064 UTC

[section ""data" . Data.Traversable.$dmsequenceA_closure" {
     Data.Traversable.$dmsequenceA_closure:
         const Data.Traversable.$dmsequenceA_info;
 },
 Data.Traversable.$dmsequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0Pu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc0Pv; else goto cc0Pw;
       cc0Pv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$dmsequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Pw: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 24;
           call Data.Traversable.traverse_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmsequenceA_info" {
     Data.Traversable.$dmsequenceA_info:
         const Data.Traversable.$dmsequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.182239449 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0PL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0PM; else goto cc0PN;
       cc0PM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0PN: // global
           I64[Sp - 16] = block_cc0PJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$csequenceA_info" {
     Data.Traversable.$fTraversableURec_$csequenceA_info:
         const Data.Traversable.$fTraversableURec_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0PJ() //  [R1]
         { []
         }
     {offset
       cc0PJ: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0PJ_info" {
     block_cc0PJ_info:
         const _cc0PJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.188218099 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$cmapM_closure" {
     Data.Traversable.$fTraversableURec_$cmapM_closure:
         const Data.Traversable.$fTraversableURec_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0Q7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Qb; else goto cc0Qc;
       cc0Qb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Qc: // global
           I64[Sp - 16] = block_cc0Q5_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$cmapM_info" {
     Data.Traversable.$fTraversableURec_$cmapM_info:
         const Data.Traversable.$fTraversableURec_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0Q5() //  [R1]
         { []
         }
     {offset
       cc0Q5: // global
           I64[Sp] = block_cc0Qa_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Q5_info" {
     block_cc0Q5_info:
         const _cc0Q5;
         const 1;
         const 30;
 },
 _cc0Qa() //  [R1]
         { []
         }
     {offset
       cc0Qa: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Qa_info" {
     block_cc0Qa_info:
         const _cc0Qa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.194968729 UTC

[section ""data" . Data.Traversable.$fTraversableURec_$csequence_closure" {
     Data.Traversable.$fTraversableURec_$csequence_closure:
         const Data.Traversable.$fTraversableURec_$csequence_info;
 },
 Data.Traversable.$fTraversableURec_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0QC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0QG; else goto cc0QH;
       cc0QG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0QH: // global
           I64[Sp - 16] = block_cc0QA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec_$csequence_info" {
     Data.Traversable.$fTraversableURec_$csequence_info:
         const Data.Traversable.$fTraversableURec_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0QA() //  [R1]
         { []
         }
     {offset
       cc0QA: // global
           I64[Sp] = block_cc0QF_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0QA_info" {
     block_cc0QA_info:
         const _cc0QA;
         const 1;
         const 30;
 },
 _cc0QF() //  [R1]
         { []
         }
     {offset
       cc0QF: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0QF_info" {
     block_cc0QF_info:
         const _cc0QF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.200896689 UTC

[section ""data" . Data.Traversable.$fTraversableURec_closure" {
     Data.Traversable.$fTraversableURec_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec_closure;
         const Data.Foldable.$fFoldableURec_closure;
         const Data.Traversable.$fTraversableURec_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.203687346 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec0_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec0_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec0_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc0R8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0R9; else goto cc0Ra;
       cc0R9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Ra: // global
           I64[Sp - 16] = block_cc0R6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$csequenceA_info" {
     Data.Traversable.$fTraversableURec0_$csequenceA_info:
         const Data.Traversable.$fTraversableURec0_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0R6() //  [R1]
         { []
         }
     {offset
       cc0R6: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0R6_info" {
     block_cc0R6_info:
         const _cc0R6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.209298637 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$cmapM_closure" {
     Data.Traversable.$fTraversableURec0_$cmapM_closure:
         const Data.Traversable.$fTraversableURec0_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec0_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0Ru: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Ry; else goto cc0Rz;
       cc0Ry: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Rz: // global
           I64[Sp - 16] = block_cc0Rs_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$cmapM_info" {
     Data.Traversable.$fTraversableURec0_$cmapM_info:
         const Data.Traversable.$fTraversableURec0_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0Rs() //  [R1]
         { []
         }
     {offset
       cc0Rs: // global
           I64[Sp] = block_cc0Rx_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Rs_info" {
     block_cc0Rs_info:
         const _cc0Rs;
         const 1;
         const 30;
 },
 _cc0Rx() //  [R1]
         { []
         }
     {offset
       cc0Rx: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Rx_info" {
     block_cc0Rx_info:
         const _cc0Rx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.216764664 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_$csequence_closure" {
     Data.Traversable.$fTraversableURec0_$csequence_closure:
         const Data.Traversable.$fTraversableURec0_$csequence_info;
 },
 Data.Traversable.$fTraversableURec0_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0RZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0S3; else goto cc0S4;
       cc0S3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec0_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0S4: // global
           I64[Sp - 16] = block_cc0RX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec0_$csequence_info" {
     Data.Traversable.$fTraversableURec0_$csequence_info:
         const Data.Traversable.$fTraversableURec0_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0RX() //  [R1]
         { []
         }
     {offset
       cc0RX: // global
           I64[Sp] = block_cc0S2_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0RX_info" {
     block_cc0RX_info:
         const _cc0RX;
         const 1;
         const 30;
 },
 _cc0S2() //  [R1]
         { []
         }
     {offset
       cc0S2: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0S2_info" {
     block_cc0S2_info:
         const _cc0S2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.223547898 UTC

[section ""data" . Data.Traversable.$fTraversableURec0_closure" {
     Data.Traversable.$fTraversableURec0_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec0_closure;
         const Data.Foldable.$fFoldableURec0_closure;
         const Data.Traversable.$fTraversableURec0_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec0_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec0_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec0_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.22606095 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec1_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec1_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec1_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc0Sv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Sw; else goto cc0Sx;
       cc0Sw: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Sx: // global
           I64[Sp - 16] = block_cc0St_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$csequenceA_info" {
     Data.Traversable.$fTraversableURec1_$csequenceA_info:
         const Data.Traversable.$fTraversableURec1_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0St() //  [R1]
         { []
         }
     {offset
       cc0St: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0St_info" {
     block_cc0St_info:
         const _cc0St;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.232060938 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$cmapM_closure" {
     Data.Traversable.$fTraversableURec1_$cmapM_closure:
         const Data.Traversable.$fTraversableURec1_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0SR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0SV; else goto cc0SW;
       cc0SV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0SW: // global
           I64[Sp - 16] = block_cc0SP_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$cmapM_info" {
     Data.Traversable.$fTraversableURec1_$cmapM_info:
         const Data.Traversable.$fTraversableURec1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0SP() //  [R1]
         { []
         }
     {offset
       cc0SP: // global
           I64[Sp] = block_cc0SU_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0SP_info" {
     block_cc0SP_info:
         const _cc0SP;
         const 1;
         const 30;
 },
 _cc0SU() //  [R1]
         { []
         }
     {offset
       cc0SU: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0SU_info" {
     block_cc0SU_info:
         const _cc0SU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.239268877 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_$csequence_closure" {
     Data.Traversable.$fTraversableURec1_$csequence_closure:
         const Data.Traversable.$fTraversableURec1_$csequence_info;
 },
 Data.Traversable.$fTraversableURec1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0Tm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Tq; else goto cc0Tr;
       cc0Tq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Tr: // global
           I64[Sp - 16] = block_cc0Tk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec1_$csequence_info" {
     Data.Traversable.$fTraversableURec1_$csequence_info:
         const Data.Traversable.$fTraversableURec1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0Tk() //  [R1]
         { []
         }
     {offset
       cc0Tk: // global
           I64[Sp] = block_cc0Tp_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Tk_info" {
     block_cc0Tk_info:
         const _cc0Tk;
         const 1;
         const 30;
 },
 _cc0Tp() //  [R1]
         { []
         }
     {offset
       cc0Tp: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Tp_info" {
     block_cc0Tp_info:
         const _cc0Tp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.246029021 UTC

[section ""data" . Data.Traversable.$fTraversableURec1_closure" {
     Data.Traversable.$fTraversableURec1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec1_closure;
         const Data.Foldable.$fFoldableURec1_closure;
         const Data.Traversable.$fTraversableURec1_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec1_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.248385125 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec2_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec2_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec2_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc0TS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0TT; else goto cc0TU;
       cc0TT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0TU: // global
           I64[Sp - 16] = block_cc0TQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$csequenceA_info" {
     Data.Traversable.$fTraversableURec2_$csequenceA_info:
         const Data.Traversable.$fTraversableURec2_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0TQ() //  [R1]
         { []
         }
     {offset
       cc0TQ: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0TQ_info" {
     block_cc0TQ_info:
         const _cc0TQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.253928873 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$cmapM_closure" {
     Data.Traversable.$fTraversableURec2_$cmapM_closure:
         const Data.Traversable.$fTraversableURec2_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec2_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0Ue: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Ui; else goto cc0Uj;
       cc0Ui: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Uj: // global
           I64[Sp - 16] = block_cc0Uc_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$cmapM_info" {
     Data.Traversable.$fTraversableURec2_$cmapM_info:
         const Data.Traversable.$fTraversableURec2_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0Uc() //  [R1]
         { []
         }
     {offset
       cc0Uc: // global
           I64[Sp] = block_cc0Uh_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Uc_info" {
     block_cc0Uc_info:
         const _cc0Uc;
         const 1;
         const 30;
 },
 _cc0Uh() //  [R1]
         { []
         }
     {offset
       cc0Uh: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Uh_info" {
     block_cc0Uh_info:
         const _cc0Uh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.261234034 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_$csequence_closure" {
     Data.Traversable.$fTraversableURec2_$csequence_closure:
         const Data.Traversable.$fTraversableURec2_$csequence_info;
 },
 Data.Traversable.$fTraversableURec2_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0UJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0UN; else goto cc0UO;
       cc0UN: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec2_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0UO: // global
           I64[Sp - 16] = block_cc0UH_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec2_$csequence_info" {
     Data.Traversable.$fTraversableURec2_$csequence_info:
         const Data.Traversable.$fTraversableURec2_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0UH() //  [R1]
         { []
         }
     {offset
       cc0UH: // global
           I64[Sp] = block_cc0UM_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0UH_info" {
     block_cc0UH_info:
         const _cc0UH;
         const 1;
         const 30;
 },
 _cc0UM() //  [R1]
         { []
         }
     {offset
       cc0UM: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0UM_info" {
     block_cc0UM_info:
         const _cc0UM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.267755792 UTC

[section ""data" . Data.Traversable.$fTraversableURec2_closure" {
     Data.Traversable.$fTraversableURec2_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec2_closure;
         const Data.Foldable.$fFoldableURec2_closure;
         const Data.Traversable.$fTraversableURec2_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec2_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec2_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec2_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.270728204 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec3_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec3_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec3_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc0Vf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Vg; else goto cc0Vh;
       cc0Vg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Vh: // global
           I64[Sp - 16] = block_cc0Vd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$csequenceA_info" {
     Data.Traversable.$fTraversableURec3_$csequenceA_info:
         const Data.Traversable.$fTraversableURec3_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0Vd() //  [R1]
         { []
         }
     {offset
       cc0Vd: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Vd_info" {
     block_cc0Vd_info:
         const _cc0Vd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.276231519 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$cmapM_closure" {
     Data.Traversable.$fTraversableURec3_$cmapM_closure:
         const Data.Traversable.$fTraversableURec3_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec3_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0VB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0VF; else goto cc0VG;
       cc0VF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0VG: // global
           I64[Sp - 16] = block_cc0Vz_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$cmapM_info" {
     Data.Traversable.$fTraversableURec3_$cmapM_info:
         const Data.Traversable.$fTraversableURec3_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0Vz() //  [R1]
         { []
         }
     {offset
       cc0Vz: // global
           I64[Sp] = block_cc0VE_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Vz_info" {
     block_cc0Vz_info:
         const _cc0Vz;
         const 1;
         const 30;
 },
 _cc0VE() //  [R1]
         { []
         }
     {offset
       cc0VE: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0VE_info" {
     block_cc0VE_info:
         const _cc0VE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.28385464 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_$csequence_closure" {
     Data.Traversable.$fTraversableURec3_$csequence_closure:
         const Data.Traversable.$fTraversableURec3_$csequence_info;
 },
 Data.Traversable.$fTraversableURec3_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0W6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Wa; else goto cc0Wb;
       cc0Wa: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec3_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Wb: // global
           I64[Sp - 16] = block_cc0W4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec3_$csequence_info" {
     Data.Traversable.$fTraversableURec3_$csequence_info:
         const Data.Traversable.$fTraversableURec3_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0W4() //  [R1]
         { []
         }
     {offset
       cc0W4: // global
           I64[Sp] = block_cc0W9_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0W4_info" {
     block_cc0W4_info:
         const _cc0W4;
         const 1;
         const 30;
 },
 _cc0W9() //  [R1]
         { []
         }
     {offset
       cc0W9: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0W9_info" {
     block_cc0W9_info:
         const _cc0W9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.290088618 UTC

[section ""data" . Data.Traversable.$fTraversableURec3_closure" {
     Data.Traversable.$fTraversableURec3_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec3_closure;
         const Data.Foldable.$fFoldableURec3_closure;
         const Data.Traversable.$fTraversableURec3_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec3_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec3_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec3_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.292528193 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$csequenceA_closure" {
     Data.Traversable.$fTraversableURec4_$csequenceA_closure:
         const Data.Traversable.$fTraversableURec4_$csequenceA_info;
 },
 Data.Traversable.$fTraversableURec4_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc0WC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0WD; else goto cc0WE;
       cc0WD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0WE: // global
           I64[Sp - 16] = block_cc0WA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$csequenceA_info" {
     Data.Traversable.$fTraversableURec4_$csequenceA_info:
         const Data.Traversable.$fTraversableURec4_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0WA() //  [R1]
         { []
         }
     {offset
       cc0WA: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0WA_info" {
     block_cc0WA_info:
         const _cc0WA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.298887236 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$cmapM_closure" {
     Data.Traversable.$fTraversableURec4_$cmapM_closure:
         const Data.Traversable.$fTraversableURec4_$cmapM_info;
 },
 Data.Traversable.$fTraversableURec4_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc0WY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0X2; else goto cc0X3;
       cc0X2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0X3: // global
           I64[Sp - 16] = block_cc0WW_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$cmapM_info" {
     Data.Traversable.$fTraversableURec4_$cmapM_info:
         const Data.Traversable.$fTraversableURec4_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc0WW() //  [R1]
         { []
         }
     {offset
       cc0WW: // global
           I64[Sp] = block_cc0X1_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0WW_info" {
     block_cc0WW_info:
         const _cc0WW;
         const 1;
         const 30;
 },
 _cc0X1() //  [R1]
         { []
         }
     {offset
       cc0X1: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0X1_info" {
     block_cc0X1_info:
         const _cc0X1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.306178421 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_$csequence_closure" {
     Data.Traversable.$fTraversableURec4_$csequence_closure:
         const Data.Traversable.$fTraversableURec4_$csequence_info;
 },
 Data.Traversable.$fTraversableURec4_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0Xt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Xx; else goto cc0Xy;
       cc0Xx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableURec4_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Xy: // global
           I64[Sp - 16] = block_cc0Xr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableURec4_$csequence_info" {
     Data.Traversable.$fTraversableURec4_$csequence_info:
         const Data.Traversable.$fTraversableURec4_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc0Xr() //  [R1]
         { []
         }
     {offset
       cc0Xr: // global
           I64[Sp] = block_cc0Xw_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Xr_info" {
     block_cc0Xr_info:
         const _cc0Xr;
         const 1;
         const 30;
 },
 _cc0Xw() //  [R1]
         { []
         }
     {offset
       cc0Xw: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Xw_info" {
     block_cc0Xw_info:
         const _cc0Xw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.312986875 UTC

[section ""data" . Data.Traversable.$fTraversableURec4_closure" {
     Data.Traversable.$fTraversableURec4_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorURec4_closure;
         const Data.Foldable.$fFoldableURec4_closure;
         const Data.Traversable.$fTraversableURec4_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableURec4_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableURec4_$cmapM_closure+3;
         const Data.Traversable.$fTraversableURec4_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.315256285 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$csequenceA_closure" {
     Data.Traversable.$fTraversable:.:_$csequenceA_closure:
         const Data.Traversable.$fTraversable:.:_$csequenceA_info;
 },
 Data.Traversable.$fTraversable:.:_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cc0XX: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$csequenceA_info" {
     Data.Traversable.$fTraversable:.:_$csequenceA_info:
         const Data.Traversable.$fTraversable:.:_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.321291309 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$cmapM_closure" {
     Data.Traversable.$fTraversable:.:_$cmapM_closure:
         const Data.Traversable.$fTraversable:.:_$cmapM_info;
 },
 Data.Traversable.$fTraversable:.:_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cc0Yb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc0Yc; else goto cc0Yd;
       cc0Yc: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Yd: // global
           I64[Sp - 40] = block_cc0Y9_info;
           _sc0hz::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sc0hz::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$cmapM_info" {
     Data.Traversable.$fTraversable:.:_$cmapM_info:
         const Data.Traversable.$fTraversable:.:_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cc0Y9() //  [R1]
         { []
         }
     {offset
       cc0Y9: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Y9_info" {
     block_cc0Y9_info:
         const _cc0Y9;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.328867166 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_$csequence_closure" {
     Data.Traversable.$fTraversable:.:_$csequence_closure:
         const Data.Traversable.$fTraversable:.:_$csequence_info;
 },
 Data.Traversable.$fTraversable:.:_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cc0Yw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc0Yx; else goto cc0Yy;
       cc0Yx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0Yy: // global
           I64[Sp - 32] = block_cc0Yu_info;
           _sc0hF::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sc0hF::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_$csequence_info" {
     Data.Traversable.$fTraversable:.:_$csequence_info:
         const Data.Traversable.$fTraversable:.:_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc0Yu() //  [R1]
         { []
         }
     {offset
       cc0Yu: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc0Yu_info" {
     block_cc0Yu_info:
         const _cc0Yu;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.337130638 UTC

[section ""data" . Data.Traversable.$fTraversable:.:_closure" {
     Data.Traversable.$fTraversable:.:_closure:
         const Data.Traversable.$fTraversable:.:_info;
         const 0;
 },
 sat_sc0hR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc0YV: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:.:_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0hR_info" {
     sat_sc0hR_info:
         const sat_sc0hR_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sc0hQ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc0Z3: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:.:_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0hQ_info" {
     sat_sc0hQ_info:
         const sat_sc0hQ_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sc0hP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc0Zb: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:.:_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0hP_info" {
     sat_sc0hP_info:
         const sat_sc0hP_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sc0hO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc0Zj: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:.:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0hO_info" {
     sat_sc0hO_info:
         const sat_sc0hO_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sc0hN_entry() //  [R1]
         { []
         }
     {offset
       cc0Zq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Zr; else goto cc0Zs;
       cc0Zr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Zs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:.:_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0hN_info" {
     sat_sc0hN_info:
         const sat_sc0hN_entry;
         const 2;
         const 4294967314;
         const Sc0Cf_srt+72;
 },
 sat_sc0hM_entry() //  [R1]
         { []
         }
     {offset
       cc0Zx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc0Zy; else goto cc0Zz;
       cc0Zy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc0Zz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:.:_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0hM_info" {
     sat_sc0hM_info:
         const sat_sc0hM_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversable:.:_entry() //  [R2, R3]
         { []
         }
     {offset
       cc0ZB: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cc0ZF; else goto cc0ZE;
       cc0ZF: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:.:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc0ZE: // global
           I64[Hp - 208] = sat_sc0hR_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sc0hQ_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sc0hP_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sc0hO_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sc0hN_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sc0hM_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:.:_info" {
     Data.Traversable.$fTraversable:.:_info:
         const Data.Traversable.$fTraversable:.:_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc0Cf_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.352024857 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$csequenceA_closure" {
     Data.Traversable.$fTraversable:*:_$csequenceA_closure:
         const Data.Traversable.$fTraversable:*:_$csequenceA_info;
 },
 Data.Traversable.$fTraversable:*:_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cc10r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc10s; else goto cc10t;
       cc10s: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$csequenceA_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc10t: // global
           I64[Sp - 32] = block_cc10o_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc10x; else goto cc10p;
       uc10x: // global
           call _cc10o(R1) args: 0, res: 0, upd: 0;
       cc10p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$csequenceA_info" {
     Data.Traversable.$fTraversable:*:_$csequenceA_info:
         const Data.Traversable.$fTraversable:*:_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc10o() //  [R1]
         { []
         }
     {offset
       cc10o: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc10o_info" {
     block_cc10o_info:
         const _cc10o;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.358991282 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$cmapM_closure" {
     Data.Traversable.$fTraversable:*:_$cmapM_closure:
         const Data.Traversable.$fTraversable:*:_$cmapM_info;
 },
 Data.Traversable.$fTraversable:*:_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cc10R: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc10V; else goto cc10W;
       cc10V: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc10W: // global
           I64[Sp - 40] = block_cc10O_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc112; else goto cc10P;
       uc112: // global
           call _cc10O(R1) args: 0, res: 0, upd: 0;
       cc10P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$cmapM_info" {
     Data.Traversable.$fTraversable:*:_$cmapM_info:
         const Data.Traversable.$fTraversable:*:_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cc10O() //  [R1]
         { []
         }
     {offset
       cc10O: // global
           I64[Sp - 8] = block_cc10U_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc10O_info" {
     block_cc10O_info:
         const _cc10O;
         const 4;
         const 30;
 },
 _cc10U() //  [R1]
         { []
         }
     {offset
       cc10U: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 40];
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc10U_info" {
     block_cc10U_info:
         const _cc10U;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.366590662 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_$csequence_closure" {
     Data.Traversable.$fTraversable:*:_$csequence_closure:
         const Data.Traversable.$fTraversable:*:_$csequence_info;
 },
 Data.Traversable.$fTraversable:*:_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cc11r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc11v; else goto cc11w;
       cc11v: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc11w: // global
           I64[Sp - 32] = block_cc11o_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc11C; else goto cc11p;
       uc11C: // global
           call _cc11o(R1) args: 0, res: 0, upd: 0;
       cc11p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_$csequence_info" {
     Data.Traversable.$fTraversable:*:_$csequence_info:
         const Data.Traversable.$fTraversable:*:_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc11o() //  [R1]
         { []
         }
     {offset
       cc11o: // global
           I64[Sp - 8] = block_cc11u_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc11o_info" {
     block_cc11o_info:
         const _cc11o;
         const 3;
         const 30;
 },
 _cc11u() //  [R1]
         { []
         }
     {offset
       cc11u: // global
           R6 = P64[Sp + 32];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$w$ctraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc11u_info" {
     block_cc11u_info:
         const _cc11u;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.376239208 UTC

[section ""data" . Data.Traversable.$fTraversable:*:_closure" {
     Data.Traversable.$fTraversable:*:_closure:
         const Data.Traversable.$fTraversable:*:_info;
         const 0;
 },
 sat_sc0in_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc124: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:*:_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0in_info" {
     sat_sc0in_info:
         const sat_sc0in_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sc0im_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc12c: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:*:_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0im_info" {
     sat_sc0im_info:
         const sat_sc0im_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sc0il_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc12k: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:*:_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0il_info" {
     sat_sc0il_info:
         const sat_sc0il_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sc0ik_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc12s: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:*:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0ik_info" {
     sat_sc0ik_info:
         const sat_sc0ik_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sc0ij_entry() //  [R1]
         { []
         }
     {offset
       cc12z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc12A; else goto cc12B;
       cc12A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc12B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:*:_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0ij_info" {
     sat_sc0ij_info:
         const sat_sc0ij_entry;
         const 2;
         const 4294967314;
         const Sc0Cf_srt+56;
 },
 sat_sc0ii_entry() //  [R1]
         { []
         }
     {offset
       cc12G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc12H; else goto cc12I;
       cc12H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc12I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:*:_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0ii_info" {
     sat_sc0ii_info:
         const sat_sc0ii_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversable:*:_entry() //  [R2, R3]
         { []
         }
     {offset
       cc12K: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cc12O; else goto cc12N;
       cc12O: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:*:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc12N: // global
           I64[Hp - 208] = sat_sc0in_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sc0im_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sc0il_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sc0ik_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sc0ij_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sc0ii_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:*:_info" {
     Data.Traversable.$fTraversable:*:_info:
         const Data.Traversable.$fTraversable:*:_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const Sc0Cf_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.390119644 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$csequenceA_closure" {
     Data.Traversable.$fTraversable:+:_$csequenceA_closure:
         const Data.Traversable.$fTraversable:+:_$csequenceA_info;
 },
 Data.Traversable.$fTraversable:+:_$csequenceA_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cc13x: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$csequenceA_info" {
     Data.Traversable.$fTraversable:+:_$csequenceA_info:
         const Data.Traversable.$fTraversable:+:_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.394579036 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$cmapM_closure" {
     Data.Traversable.$fTraversable:+:_$cmapM_closure:
         const Data.Traversable.$fTraversable:+:_$cmapM_info;
 },
 Data.Traversable.$fTraversable:+:_$cmapM_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cc13L: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc13M; else goto cc13N;
       cc13M: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc13N: // global
           I64[Sp - 40] = block_cc13J_info;
           _sc0ir::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sc0ir::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$cmapM_info" {
     Data.Traversable.$fTraversable:+:_$cmapM_info:
         const Data.Traversable.$fTraversable:+:_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cc13J() //  [R1]
         { []
         }
     {offset
       cc13J: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc13J_info" {
     block_cc13J_info:
         const _cc13J;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.400752488 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_$csequence_closure" {
     Data.Traversable.$fTraversable:+:_$csequence_closure:
         const Data.Traversable.$fTraversable:+:_$csequence_info;
 },
 Data.Traversable.$fTraversable:+:_$csequence_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cc146: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc147; else goto cc148;
       cc147: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc148: // global
           I64[Sp - 32] = block_cc144_info;
           _sc0ix::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sc0ix::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_$csequence_info" {
     Data.Traversable.$fTraversable:+:_$csequence_info:
         const Data.Traversable.$fTraversable:+:_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc144() //  [R1]
         { []
         }
     {offset
       cc144: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc144_info" {
     block_cc144_info:
         const _cc144;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.408826165 UTC

[section ""data" . Data.Traversable.$fTraversable:+:_closure" {
     Data.Traversable.$fTraversable:+:_closure:
         const Data.Traversable.$fTraversable:+:_info;
         const 0;
 },
 sat_sc0iJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc14v: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:+:_$csequence_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0iJ_info" {
     sat_sc0iJ_info:
         const sat_sc0iJ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sc0iI_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc14D: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:+:_$cmapM_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0iI_info" {
     sat_sc0iI_info:
         const sat_sc0iI_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sc0iH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc14L: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversable:+:_$csequenceA_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0iH_info" {
     sat_sc0iH_info:
         const sat_sc0iH_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sc0iG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc14T: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversable:+:_$ctraverse_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0iG_info" {
     sat_sc0iG_info:
         const sat_sc0iG_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sc0iF_entry() //  [R1]
         { []
         }
     {offset
       cc150: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc151; else goto cc152;
       cc151: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc152: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:+:_$cp2Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0iF_info" {
     sat_sc0iF_info:
         const sat_sc0iF_entry;
         const 2;
         const 4294967314;
         const Sc0Cf_srt+40;
 },
 sat_sc0iE_entry() //  [R1]
         { []
         }
     {offset
       cc157: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc158; else goto cc159;
       cc158: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc159: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversable:+:_$cp1Traversable_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0iE_info" {
     sat_sc0iE_info:
         const sat_sc0iE_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversable:+:_entry() //  [R2, R3]
         { []
         }
     {offset
       cc15b: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cc15f; else goto cc15e;
       cc15f: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable:+:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc15e: // global
           I64[Hp - 208] = sat_sc0iJ_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sc0iI_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sc0iH_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sc0iG_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sc0iF_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sc0iE_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable:+:_info" {
     Data.Traversable.$fTraversable:+:_info:
         const Data.Traversable.$fTraversable:+:_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const Sc0Cf_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.42350889 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$csequenceA_closure" {
     Data.Traversable.$fTraversableM1_$csequenceA_closure:
         const Data.Traversable.$fTraversableM1_$csequenceA_info;
 },
 sat_sc0iO_entry() //  [R1]
         { []
         }
     {offset
       cc162: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc163; else goto cc164;
       cc163: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc164: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0iO_info" {
     sat_sc0iO_info:
         const sat_sc0iO_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$csequenceA_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cc167: // global
           _sc0iM::P64 = R4;
           _sc0iL::P64 = R3;
           _sc0iK::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc168; else goto cc169;
       cc169: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc16b; else goto cc16a;
       cc16b: // global
           HpAlloc = 40;
           goto cc168;
       cc168: // global
           R4 = _sc0iM::P64;
           R3 = _sc0iL::P64;
           R2 = _sc0iK::P64;
           R1 = Data.Traversable.$fTraversableM1_$csequenceA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc16a: // global
           I64[Hp - 32] = sat_sc0iO_info;
           P64[Hp - 16] = _sc0iK::P64;
           P64[Hp - 8] = _sc0iL::P64;
           P64[Hp] = _sc0iM::P64;
           I64[Sp - 16] = block_cc165_info;
           R2 = _sc0iL::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$csequenceA_info" {
     Data.Traversable.$fTraversableM1_$csequenceA_info:
         const Data.Traversable.$fTraversableM1_$csequenceA_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc165() //  [R1]
         { []
         }
     {offset
       cc165: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc165_info" {
     block_cc165_info:
         const _cc165;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.432296619 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$cmapM_closure" {
     Data.Traversable.$fTraversableM1_$cmapM_closure:
         const Data.Traversable.$fTraversableM1_$cmapM_info;
 },
 sat_sc0iV_entry() //  [R1]
         { []
         }
     {offset
       cc16O: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc16P; else goto cc16Q;
       cc16P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc16Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0iV_info" {
     sat_sc0iV_info:
         const sat_sc0iV_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$cmapM_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cc16R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc16T; else goto cc16U;
       cc16T: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$cmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc16U: // global
           I64[Sp - 32] = block_cc16G_info;
           _sc0iP::P64 = R2;
           R2 = R3;
           P64[Sp - 24] = _sc0iP::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$cmapM_info" {
     Data.Traversable.$fTraversableM1_$cmapM_info:
         const Data.Traversable.$fTraversableM1_$cmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc16G() //  [R1]
         { []
         }
     {offset
       cc16G: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc16X; else goto cc16W;
       cc16X: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc16W: // global
           I64[Hp - 40] = sat_sc0iV_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp + 16] = block_cc16S_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 40;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc16G_info" {
     block_cc16G_info:
         const _cc16G;
         const 3;
         const 30;
 },
 _cc16S() //  [R1]
         { []
         }
     {offset
       cc16S: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc16S_info" {
     block_cc16S_info:
         const _cc16S;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.442933882 UTC

[section ""data" . Data.Traversable.$fTraversableM1_$csequence_closure" {
     Data.Traversable.$fTraversableM1_$csequence_closure:
         const Data.Traversable.$fTraversableM1_$csequence_info;
 },
 sat_sc0j1_entry() //  [R1]
         { []
         }
     {offset
       cc17H: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc17I; else goto cc17J;
       cc17I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc17J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0j1_info" {
     sat_sc0j1_info:
         const sat_sc0j1_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableM1_$csequence_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cc17K: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc17M; else goto cc17N;
       cc17M: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_$csequence_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc17N: // global
           I64[Sp - 24] = block_cc17z_info;
           _sc0iW::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _sc0iW::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_$csequence_info" {
     Data.Traversable.$fTraversableM1_$csequence_info:
         const Data.Traversable.$fTraversableM1_$csequence_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc17z() //  [R1]
         { []
         }
     {offset
       cc17z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc17Q; else goto cc17P;
       cc17Q: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc17P: // global
           I64[Hp - 32] = sat_sc0j1_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc17L_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc17z_info" {
     block_cc17z_info:
         const _cc17z;
         const 2;
         const 30;
 },
 _cc17L() //  [R1]
         { []
         }
     {offset
       cc17L: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc17L_info" {
     block_cc17L_info:
         const _cc17L;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.453825337 UTC

[section ""data" . Data.Traversable.$fTraversableM1_closure" {
     Data.Traversable.$fTraversableM1_closure:
         const Data.Traversable.$fTraversableM1_info;
         const 0;
 },
 sat_sc0j8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc18x: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableM1_$csequence_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0j8_info" {
     sat_sc0j8_info:
         const sat_sc0j8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sc0j7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc18F: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableM1_$cmapM_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0j7_info" {
     sat_sc0j7_info:
         const sat_sc0j7_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sc0j6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc18N: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableM1_$csequenceA_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0j6_info" {
     sat_sc0j6_info:
         const sat_sc0j6_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sc0j5_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc18V: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableM1_$ctraverse_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0j5_info" {
     sat_sc0j5_info:
         const sat_sc0j5_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sc0j4_entry() //  [R1]
         { []
         }
     {offset
       cc192: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc193; else goto cc194;
       cc193: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc194: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableM1_$cp2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0j4_info" {
     sat_sc0j4_info:
         const sat_sc0j4_entry;
         const 1;
         const 4294967312;
         const Sc0Cf_srt+24;
 },
 sat_sc0j3_entry() //  [R1]
         { []
         }
     {offset
       cc199: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc19a; else goto cc19b;
       cc19a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc19b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableM1_$cp1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0j3_info" {
     sat_sc0j3_info:
         const sat_sc0j3_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableM1_entry() //  [R2]
         { []
         }
     {offset
       cc19d: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cc19h; else goto cc19g;
       cc19h: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc19g: // global
           I64[Hp - 160] = sat_sc0j8_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sc0j7_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sc0j6_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sc0j5_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sc0j4_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sc0j3_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 109;
           P64[Hp - 16] = Hp - 126;
           P64[Hp - 8] = Hp - 141;
           P64[Hp] = Hp - 158;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableM1_info" {
     Data.Traversable.$fTraversableM1_info:
         const Data.Traversable.$fTraversableM1_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const Sc0Cf_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.468124776 UTC

[section ""data" . Data.Traversable.$fTraversableK1_$cmapM_closure" {
     Data.Traversable.$fTraversableK1_$cmapM_closure:
         const Data.Traversable.$fTraversableK1_$cmapM_info;
 },
 Data.Traversable.$fTraversableK1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1a2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1a3; else goto cc1a4;
       cc1a3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableK1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1a4: // global
           I64[Sp - 16] = block_cc1a0_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableK1_$cmapM_info" {
     Data.Traversable.$fTraversableK1_$cmapM_info:
         const Data.Traversable.$fTraversableK1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1a0() //  [R1]
         { []
         }
     {offset
       cc1a0: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1a0_info" {
     block_cc1a0_info:
         const _cc1a0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.473236586 UTC

[section ""data" . Data.Traversable.$fTraversableK1_$csequence_closure" {
     Data.Traversable.$fTraversableK1_$csequence_closure:
         const Data.Traversable.$fTraversableK1_$csequence_info;
 },
 Data.Traversable.$fTraversableK1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1ao: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1ap; else goto cc1aq;
       cc1ap: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableK1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1aq: // global
           I64[Sp - 16] = block_cc1am_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableK1_$csequence_info" {
     Data.Traversable.$fTraversableK1_$csequence_info:
         const Data.Traversable.$fTraversableK1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1am() //  [R1]
         { []
         }
     {offset
       cc1am: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1am_info" {
     block_cc1am_info:
         const _cc1am;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.478590818 UTC

[section ""data" . $fTraversableK2_rbWTS_closure" {
     $fTraversableK2_rbWTS_closure:
         const $fTraversableK2_rbWTS_info;
 },
 $fTraversableK2_rbWTS_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1aI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1aJ; else goto cc1aK;
       cc1aJ: // global
           R3 = R3;
           R2 = R2;
           R1 = $fTraversableK2_rbWTS_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1aK: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fTraversableK2_rbWTS_info" {
     $fTraversableK2_rbWTS_info:
         const $fTraversableK2_rbWTS_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.482530311 UTC

[section ""data" . Data.Traversable.$fTraversableK1_closure" {
     Data.Traversable.$fTraversableK1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorK1_closure;
         const Data.Foldable.$fFoldableK1_closure;
         const Data.Traversable.$fTraversableK1_$ctraverse_closure+3;
         const $fTraversableK2_rbWTS_closure+2;
         const Data.Traversable.$fTraversableK1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableK1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.485580659 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$csequenceA_closure" {
     Data.Traversable.$fTraversableRec1_$csequenceA_closure:
         const Data.Traversable.$fTraversableRec1_$csequenceA_info;
 },
 sat_sc0jm_entry() //  [R1]
         { []
         }
     {offset
       cc1b0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc1b1; else goto cc1b2;
       cc1b1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1b2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0jm_info" {
     sat_sc0jm_info:
         const sat_sc0jm_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$csequenceA_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc1b5: // global
           _sc0jk::P64 = R4;
           _sc0jj::P64 = R3;
           _sc0ji::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1b6; else goto cc1b7;
       cc1b7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc1b9; else goto cc1b8;
       cc1b9: // global
           HpAlloc = 40;
           goto cc1b6;
       cc1b6: // global
           R4 = _sc0jk::P64;
           R3 = _sc0jj::P64;
           R2 = _sc0ji::P64;
           R1 = Data.Traversable.$fTraversableRec1_$csequenceA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1b8: // global
           I64[Hp - 32] = sat_sc0jm_info;
           P64[Hp - 16] = _sc0ji::P64;
           P64[Hp - 8] = _sc0jj::P64;
           P64[Hp] = _sc0jk::P64;
           I64[Sp - 16] = block_cc1b3_info;
           R2 = _sc0jj::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$csequenceA_info" {
     Data.Traversable.$fTraversableRec1_$csequenceA_info:
         const Data.Traversable.$fTraversableRec1_$csequenceA_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1b3() //  [R1]
         { []
         }
     {offset
       cc1b3: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1b3_info" {
     block_cc1b3_info:
         const _cc1b3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.494114363 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$cmapM_closure" {
     Data.Traversable.$fTraversableRec1_$cmapM_closure:
         const Data.Traversable.$fTraversableRec1_$cmapM_info;
 },
 sat_sc0jt_entry() //  [R1]
         { []
         }
     {offset
       cc1bM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc1bN; else goto cc1bO;
       cc1bN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1bO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0jt_info" {
     sat_sc0jt_info:
         const sat_sc0jt_entry;
         const 4;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$cmapM_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cc1bP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1bR; else goto cc1bS;
       cc1bR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$cmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1bS: // global
           I64[Sp - 32] = block_cc1bE_info;
           _sc0jn::P64 = R2;
           R2 = R3;
           P64[Sp - 24] = _sc0jn::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$cmapM_info" {
     Data.Traversable.$fTraversableRec1_$cmapM_info:
         const Data.Traversable.$fTraversableRec1_$cmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc1bE() //  [R1]
         { []
         }
     {offset
       cc1bE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc1bV; else goto cc1bU;
       cc1bV: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1bU: // global
           I64[Hp - 40] = sat_sc0jt_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp + 16] = block_cc1bQ_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 40;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1bE_info" {
     block_cc1bE_info:
         const _cc1bE;
         const 3;
         const 30;
 },
 _cc1bQ() //  [R1]
         { []
         }
     {offset
       cc1bQ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1bQ_info" {
     block_cc1bQ_info:
         const _cc1bQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.50410996 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_$csequence_closure" {
     Data.Traversable.$fTraversableRec1_$csequence_closure:
         const Data.Traversable.$fTraversableRec1_$csequence_info;
 },
 sat_sc0jz_entry() //  [R1]
         { []
         }
     {offset
       cc1cF: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cc1cG; else goto cc1cH;
       cc1cG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1cH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0jz_info" {
     sat_sc0jz_info:
         const sat_sc0jz_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableRec1_$csequence_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc1cI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1cK; else goto cc1cL;
       cc1cK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_$csequence_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1cL: // global
           I64[Sp - 24] = block_cc1cx_info;
           _sc0ju::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _sc0ju::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_$csequence_info" {
     Data.Traversable.$fTraversableRec1_$csequence_info:
         const Data.Traversable.$fTraversableRec1_$csequence_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1cx() //  [R1]
         { []
         }
     {offset
       cc1cx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc1cO; else goto cc1cN;
       cc1cO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1cN: // global
           I64[Hp - 32] = sat_sc0jz_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc1cJ_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1cx_info" {
     block_cc1cx_info:
         const _cc1cx;
         const 2;
         const 30;
 },
 _cc1cJ() //  [R1]
         { []
         }
     {offset
       cc1cJ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableM2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1cJ_info" {
     block_cc1cJ_info:
         const _cc1cJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.515293724 UTC

[section ""data" . Data.Traversable.$fTraversableRec1_closure" {
     Data.Traversable.$fTraversableRec1_closure:
         const Data.Traversable.$fTraversableRec1_info;
         const 0;
 },
 sat_sc0jG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1dv: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableRec1_$csequence_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0jG_info" {
     sat_sc0jG_info:
         const sat_sc0jG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sc0jF_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc1dD: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableRec1_$cmapM_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0jF_info" {
     sat_sc0jF_info:
         const sat_sc0jF_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sc0jE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1dL: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableRec1_$csequenceA_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0jE_info" {
     sat_sc0jE_info:
         const sat_sc0jE_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sc0jD_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc1dT: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableRec1_$ctraverse_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0jD_info" {
     sat_sc0jD_info:
         const sat_sc0jD_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sc0jC_entry() //  [R1]
         { []
         }
     {offset
       cc1e0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1e1; else goto cc1e2;
       cc1e1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1e2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableRec1_$cp2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0jC_info" {
     sat_sc0jC_info:
         const sat_sc0jC_entry;
         const 1;
         const 4294967312;
         const Sc0Cf_srt+8;
 },
 sat_sc0jB_entry() //  [R1]
         { []
         }
     {offset
       cc1e7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1e8; else goto cc1e9;
       cc1e8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1e9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableRec1_$cp1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0jB_info" {
     sat_sc0jB_info:
         const sat_sc0jB_entry;
         const 1;
         const 16;
 },
 Data.Traversable.$fTraversableRec1_entry() //  [R2]
         { []
         }
     {offset
       cc1eb: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cc1ef; else goto cc1ee;
       cc1ef: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableRec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1ee: // global
           I64[Hp - 160] = sat_sc0jG_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sc0jF_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sc0jE_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sc0jD_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sc0jC_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sc0jB_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 109;
           P64[Hp - 16] = Hp - 126;
           P64[Hp - 8] = Hp - 141;
           P64[Hp] = Hp - 158;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableRec1_info" {
     Data.Traversable.$fTraversableRec1_info:
         const Data.Traversable.$fTraversableRec1_entry;
         const 0;
         const 35188667056142;
         const 4294967301;
         const Sc0Cf_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.529104899 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$csequenceA_closure" {
     Data.Traversable.$fTraversablePar1_$csequenceA_closure:
         const Data.Traversable.$fTraversablePar1_$csequenceA_info;
 },
 Data.Traversable.$fTraversablePar1_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1f0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1f1; else goto cc1f2;
       cc1f1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversablePar1_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1f2: // global
           I64[Sp - 16] = block_cc1eY_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$csequenceA_info" {
     Data.Traversable.$fTraversablePar1_$csequenceA_info:
         const Data.Traversable.$fTraversablePar1_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1eY() //  [R1]
         { []
         }
     {offset
       cc1eY: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1eY_info" {
     block_cc1eY_info:
         const _cc1eY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.535172592 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$cmapM_closure" {
     Data.Traversable.$fTraversablePar1_$cmapM_closure:
         const Data.Traversable.$fTraversablePar1_$cmapM_info;
 },
 Data.Traversable.$fTraversablePar1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1fo: // global
           _sc0jM::P64 = R4;
           _sc0jL::P64 = R3;
           _sc0jK::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1fs; else goto cc1ft;
       cc1ft: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1fv; else goto cc1fu;
       cc1fv: // global
           HpAlloc = 32;
           goto cc1fs;
       cc1fs: // global
           R4 = _sc0jM::P64;
           R3 = _sc0jL::P64;
           R2 = _sc0jK::P64;
           R1 = Data.Traversable.$fTraversablePar1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1fu: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0jL::P64;
           P64[Hp] = _sc0jM::P64;
           I64[Sp - 16] = block_cc1fm_info;
           R2 = _sc0jK::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$cmapM_info" {
     Data.Traversable.$fTraversablePar1_$cmapM_info:
         const Data.Traversable.$fTraversablePar1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1fm() //  [R1]
         { []
         }
     {offset
       cc1fm: // global
           I64[Sp] = block_cc1fr_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1fm_info" {
     block_cc1fm_info:
         const _cc1fm;
         const 1;
         const 30;
 },
 _cc1fr() //  [R1]
         { []
         }
     {offset
       cc1fr: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1fr_info" {
     block_cc1fr_info:
         const _cc1fr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.542666089 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_$csequence_closure" {
     Data.Traversable.$fTraversablePar1_$csequence_closure:
         const Data.Traversable.$fTraversablePar1_$csequence_info;
 },
 Data.Traversable.$fTraversablePar1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1fY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1g2; else goto cc1g3;
       cc1g2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversablePar1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1g3: // global
           I64[Sp - 16] = block_cc1fW_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversablePar1_$csequence_info" {
     Data.Traversable.$fTraversablePar1_$csequence_info:
         const Data.Traversable.$fTraversablePar1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1fW() //  [R1]
         { []
         }
     {offset
       cc1fW: // global
           I64[Sp] = block_cc1g1_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1fW_info" {
     block_cc1fW_info:
         const _cc1fW;
         const 1;
         const 30;
 },
 _cc1g1() //  [R1]
         { []
         }
     {offset
       cc1g1: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1g1_info" {
     block_cc1g1_info:
         const _cc1g1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.549006958 UTC

[section ""data" . Data.Traversable.$fTraversablePar1_closure" {
     Data.Traversable.$fTraversablePar1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorPar1_closure;
         const Data.Foldable.$fFoldablePar1_closure;
         const Data.Traversable.$fTraversablePar1_$ctraverse_closure+3;
         const Data.Traversable.$fTraversablePar1_$csequenceA_closure+2;
         const Data.Traversable.$fTraversablePar1_$cmapM_closure+3;
         const Data.Traversable.$fTraversablePar1_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.55222414 UTC

[section ""data" . Data.Traversable.$fTraversableV1_$cmapM_closure" {
     Data.Traversable.$fTraversableV1_$cmapM_closure:
         const Data.Traversable.$fTraversableV1_$cmapM_info;
 },
 Data.Traversable.$fTraversableV1_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1gv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1gw; else goto cc1gx;
       cc1gw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableV1_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1gx: // global
           I64[Sp - 16] = block_cc1gt_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableV1_$cmapM_info" {
     Data.Traversable.$fTraversableV1_$cmapM_info:
         const Data.Traversable.$fTraversableV1_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1gt() //  [R1]
         { []
         }
     {offset
       cc1gt: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1gt_info" {
     block_cc1gt_info:
         const _cc1gt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.557427412 UTC

[section ""data" . Data.Traversable.$fTraversableV1_$csequence_closure" {
     Data.Traversable.$fTraversableV1_$csequence_closure:
         const Data.Traversable.$fTraversableV1_$csequence_info;
 },
 Data.Traversable.$fTraversableV1_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1gR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1gS; else goto cc1gT;
       cc1gS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableV1_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1gT: // global
           I64[Sp - 16] = block_cc1gP_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableV1_$csequence_info" {
     Data.Traversable.$fTraversableV1_$csequence_info:
         const Data.Traversable.$fTraversableV1_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1gP() //  [R1]
         { []
         }
     {offset
       cc1gP: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1gP_info" {
     block_cc1gP_info:
         const _cc1gP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.562839217 UTC

[section ""data" . $fTraversableV2_rbWTT_closure" {
     $fTraversableV2_rbWTT_closure:
         const $fTraversableV2_rbWTT_info;
 },
 $fTraversableV2_rbWTT_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1hb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1hc; else goto cc1hd;
       cc1hc: // global
           R3 = R3;
           R2 = R2;
           R1 = $fTraversableV2_rbWTT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1hd: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fTraversableV2_rbWTT_info" {
     $fTraversableV2_rbWTT_info:
         const $fTraversableV2_rbWTT_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.566867251 UTC

[section ""data" . Data.Traversable.$fTraversableV1_closure" {
     Data.Traversable.$fTraversableV1_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Generics.$fFunctorV1_closure;
         const Data.Foldable.$fFoldableV1_closure;
         const Data.Traversable.$fTraversableV1_$ctraverse_closure+3;
         const $fTraversableV2_rbWTT_closure+2;
         const Data.Traversable.$fTraversableV1_$cmapM_closure+3;
         const Data.Traversable.$fTraversableV1_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.56936514 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$csequenceA_closure" {
     Data.Traversable.$fTraversableIdentity_$csequenceA_closure:
         const Data.Traversable.$fTraversableIdentity_$csequenceA_info;
 },
 Data.Traversable.$fTraversableIdentity_$csequenceA_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cc1hr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1hs; else goto cc1ht;
       cc1hs: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableIdentity_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1ht: // global
           I64[Sp - 16] = block_cc1hp_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$csequenceA_info" {
     Data.Traversable.$fTraversableIdentity_$csequenceA_info:
         const Data.Traversable.$fTraversableIdentity_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1hp() //  [R1]
         { []
         }
     {offset
       cc1hp: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1hp_info" {
     block_cc1hp_info:
         const _cc1hp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.575828054 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$cmapM_closure" {
     Data.Traversable.$fTraversableIdentity_$cmapM_closure:
         const Data.Traversable.$fTraversableIdentity_$cmapM_info;
 },
 Data.Traversable.$fTraversableIdentity_$cmapM_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc1hP: // global
           _sc0k8::P64 = R4;
           _sc0k7::P64 = R3;
           _sc0k6::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1hT; else goto cc1hU;
       cc1hU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1hW; else goto cc1hV;
       cc1hW: // global
           HpAlloc = 32;
           goto cc1hT;
       cc1hT: // global
           R4 = _sc0k8::P64;
           R3 = _sc0k7::P64;
           R2 = _sc0k6::P64;
           R1 = Data.Traversable.$fTraversableIdentity_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1hV: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0k7::P64;
           P64[Hp] = _sc0k8::P64;
           I64[Sp - 16] = block_cc1hN_info;
           R2 = _sc0k6::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$cmapM_info" {
     Data.Traversable.$fTraversableIdentity_$cmapM_info:
         const Data.Traversable.$fTraversableIdentity_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1hN() //  [R1]
         { []
         }
     {offset
       cc1hN: // global
           I64[Sp] = block_cc1hS_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1hN_info" {
     block_cc1hN_info:
         const _cc1hN;
         const 1;
         const 30;
 },
 _cc1hS() //  [R1]
         { []
         }
     {offset
       cc1hS: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1hS_info" {
     block_cc1hS_info:
         const _cc1hS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.58403914 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_$csequence_closure" {
     Data.Traversable.$fTraversableIdentity_$csequence_closure:
         const Data.Traversable.$fTraversableIdentity_$csequence_info;
 },
 Data.Traversable.$fTraversableIdentity_$csequence_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc1ip: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1it; else goto cc1iu;
       cc1it: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableIdentity_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1iu: // global
           I64[Sp - 16] = block_cc1in_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableIdentity_$csequence_info" {
     Data.Traversable.$fTraversableIdentity_$csequence_info:
         const Data.Traversable.$fTraversableIdentity_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1in() //  [R1]
         { []
         }
     {offset
       cc1in: // global
           I64[Sp] = block_cc1is_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1in_info" {
     block_cc1in_info:
         const _cc1in;
         const 1;
         const 30;
 },
 _cc1is() //  [R1]
         { []
         }
     {offset
       cc1is: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1is_info" {
     block_cc1is_info:
         const _cc1is;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.590823892 UTC

[section ""data" . Data.Traversable.$fTraversableIdentity_closure" {
     Data.Traversable.$fTraversableIdentity_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Functor.Identity.$fFunctorIdentity_closure;
         const Data.Functor.Identity.$fFoldableIdentity_closure;
         const Data.Traversable.$fTraversableIdentity_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableIdentity_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableIdentity_$cmapM_closure+3;
         const Data.Traversable.$fTraversableIdentity_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.593866379 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$csequenceA_closure" {
     Data.Traversable.$fTraversableProduct_$csequenceA_closure:
         const Data.Traversable.$fTraversableProduct_$csequenceA_info;
 },
 Data.Traversable.$fTraversableProduct_$csequenceA_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc1iW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1iX; else goto cc1iY;
       cc1iX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProduct_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1iY: // global
           I64[Sp - 16] = block_cc1iU_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$csequenceA_info" {
     Data.Traversable.$fTraversableProduct_$csequenceA_info:
         const Data.Traversable.$fTraversableProduct_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1iU() //  [R1]
         { []
         }
     {offset
       cc1iU: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1iU_info" {
     block_cc1iU_info:
         const _cc1iU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.600150517 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$cmapM_closure" {
     Data.Traversable.$fTraversableProduct_$cmapM_closure:
         const Data.Traversable.$fTraversableProduct_$cmapM_info;
 },
 Data.Traversable.$fTraversableProduct_$cmapM_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cc1jk: // global
           _sc0kl::P64 = R4;
           _sc0kk::P64 = R3;
           _sc0kj::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1jo; else goto cc1jp;
       cc1jp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1jr; else goto cc1jq;
       cc1jr: // global
           HpAlloc = 32;
           goto cc1jo;
       cc1jo: // global
           R4 = _sc0kl::P64;
           R3 = _sc0kk::P64;
           R2 = _sc0kj::P64;
           R1 = Data.Traversable.$fTraversableProduct_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1jq: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0kk::P64;
           P64[Hp] = _sc0kl::P64;
           I64[Sp - 16] = block_cc1ji_info;
           R2 = _sc0kj::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$cmapM_info" {
     Data.Traversable.$fTraversableProduct_$cmapM_info:
         const Data.Traversable.$fTraversableProduct_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1ji() //  [R1]
         { []
         }
     {offset
       cc1ji: // global
           I64[Sp] = block_cc1jn_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1ji_info" {
     block_cc1ji_info:
         const _cc1ji;
         const 1;
         const 30;
 },
 _cc1jn() //  [R1]
         { []
         }
     {offset
       cc1jn: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1jn_info" {
     block_cc1jn_info:
         const _cc1jn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.608465065 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_$csequence_closure" {
     Data.Traversable.$fTraversableProduct_$csequence_closure:
         const Data.Traversable.$fTraversableProduct_$csequence_info;
 },
 Data.Traversable.$fTraversableProduct_$csequence_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cc1jU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1jY; else goto cc1jZ;
       cc1jY: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableProduct_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1jZ: // global
           I64[Sp - 16] = block_cc1jS_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableProduct_$csequence_info" {
     Data.Traversable.$fTraversableProduct_$csequence_info:
         const Data.Traversable.$fTraversableProduct_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1jS() //  [R1]
         { []
         }
     {offset
       cc1jS: // global
           I64[Sp] = block_cc1jX_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1jS_info" {
     block_cc1jS_info:
         const _cc1jS;
         const 1;
         const 30;
 },
 _cc1jX() //  [R1]
         { []
         }
     {offset
       cc1jX: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1jX_info" {
     block_cc1jX_info:
         const _cc1jX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.615085075 UTC

[section ""data" . Data.Traversable.$fTraversableProduct_closure" {
     Data.Traversable.$fTraversableProduct_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.Internal.$fFunctorProduct_closure;
         const Data.Foldable.$fFoldableProduct_closure;
         const Data.Traversable.$fTraversableProduct_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableProduct_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableProduct_$cmapM_closure+3;
         const Data.Traversable.$fTraversableProduct_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.617763656 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$csequenceA_closure" {
     Data.Traversable.$fTraversableSum_$csequenceA_closure:
         const Data.Traversable.$fTraversableSum_$csequenceA_info;
 },
 Data.Traversable.$fTraversableSum_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1kr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1ks; else goto cc1kt;
       cc1ks: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableSum_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1kt: // global
           I64[Sp - 16] = block_cc1kp_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$csequenceA_info" {
     Data.Traversable.$fTraversableSum_$csequenceA_info:
         const Data.Traversable.$fTraversableSum_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1kp() //  [R1]
         { []
         }
     {offset
       cc1kp: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1kp_info" {
     block_cc1kp_info:
         const _cc1kp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.624471229 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$cmapM_closure" {
     Data.Traversable.$fTraversableSum_$cmapM_closure:
         const Data.Traversable.$fTraversableSum_$cmapM_info;
 },
 Data.Traversable.$fTraversableSum_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1kP: // global
           _sc0ky::P64 = R4;
           _sc0kx::P64 = R3;
           _sc0kw::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1kT; else goto cc1kU;
       cc1kU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1kW; else goto cc1kV;
       cc1kW: // global
           HpAlloc = 32;
           goto cc1kT;
       cc1kT: // global
           R4 = _sc0ky::P64;
           R3 = _sc0kx::P64;
           R2 = _sc0kw::P64;
           R1 = Data.Traversable.$fTraversableSum_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1kV: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0kx::P64;
           P64[Hp] = _sc0ky::P64;
           I64[Sp - 16] = block_cc1kN_info;
           R2 = _sc0kw::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$cmapM_info" {
     Data.Traversable.$fTraversableSum_$cmapM_info:
         const Data.Traversable.$fTraversableSum_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1kN() //  [R1]
         { []
         }
     {offset
       cc1kN: // global
           I64[Sp] = block_cc1kS_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1kN_info" {
     block_cc1kN_info:
         const _cc1kN;
         const 1;
         const 30;
 },
 _cc1kS() //  [R1]
         { []
         }
     {offset
       cc1kS: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1kS_info" {
     block_cc1kS_info:
         const _cc1kS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.631878201 UTC

[section ""data" . Data.Traversable.$fTraversableSum_$csequence_closure" {
     Data.Traversable.$fTraversableSum_$csequence_closure:
         const Data.Traversable.$fTraversableSum_$csequence_info;
 },
 Data.Traversable.$fTraversableSum_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1lp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1lt; else goto cc1lu;
       cc1lt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableSum_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1lu: // global
           I64[Sp - 16] = block_cc1ln_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableSum_$csequence_info" {
     Data.Traversable.$fTraversableSum_$csequence_info:
         const Data.Traversable.$fTraversableSum_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1ln() //  [R1]
         { []
         }
     {offset
       cc1ln: // global
           I64[Sp] = block_cc1ls_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1ln_info" {
     block_cc1ln_info:
         const _cc1ln;
         const 1;
         const 30;
 },
 _cc1ls() //  [R1]
         { []
         }
     {offset
       cc1ls: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1ls_info" {
     block_cc1ls_info:
         const _cc1ls;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.639053008 UTC

[section ""data" . Data.Traversable.$fTraversableSum_closure" {
     Data.Traversable.$fTraversableSum_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.Internal.$fFunctorSum_closure;
         const Data.Foldable.$fFoldableSum_closure;
         const Data.Traversable.$fTraversableSum_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableSum_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableSum_$cmapM_closure+3;
         const Data.Traversable.$fTraversableSum_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.641599116 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$csequenceA_closure" {
     Data.Traversable.$fTraversableDual_$csequenceA_closure:
         const Data.Traversable.$fTraversableDual_$csequenceA_info;
 },
 Data.Traversable.$fTraversableDual_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1lW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1lX; else goto cc1lY;
       cc1lX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableDual_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1lY: // global
           I64[Sp - 16] = block_cc1lU_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$csequenceA_info" {
     Data.Traversable.$fTraversableDual_$csequenceA_info:
         const Data.Traversable.$fTraversableDual_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1lU() //  [R1]
         { []
         }
     {offset
       cc1lU: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1lU_info" {
     block_cc1lU_info:
         const _cc1lU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.648242882 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$cmapM_closure" {
     Data.Traversable.$fTraversableDual_$cmapM_closure:
         const Data.Traversable.$fTraversableDual_$cmapM_info;
 },
 Data.Traversable.$fTraversableDual_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1mk: // global
           _sc0kL::P64 = R4;
           _sc0kK::P64 = R3;
           _sc0kJ::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1mo; else goto cc1mp;
       cc1mp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1mr; else goto cc1mq;
       cc1mr: // global
           HpAlloc = 32;
           goto cc1mo;
       cc1mo: // global
           R4 = _sc0kL::P64;
           R3 = _sc0kK::P64;
           R2 = _sc0kJ::P64;
           R1 = Data.Traversable.$fTraversableDual_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1mq: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0kK::P64;
           P64[Hp] = _sc0kL::P64;
           I64[Sp - 16] = block_cc1mi_info;
           R2 = _sc0kJ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$cmapM_info" {
     Data.Traversable.$fTraversableDual_$cmapM_info:
         const Data.Traversable.$fTraversableDual_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1mi() //  [R1]
         { []
         }
     {offset
       cc1mi: // global
           I64[Sp] = block_cc1mn_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1mi_info" {
     block_cc1mi_info:
         const _cc1mi;
         const 1;
         const 30;
 },
 _cc1mn() //  [R1]
         { []
         }
     {offset
       cc1mn: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1mn_info" {
     block_cc1mn_info:
         const _cc1mn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.655473318 UTC

[section ""data" . Data.Traversable.$fTraversableDual_$csequence_closure" {
     Data.Traversable.$fTraversableDual_$csequence_closure:
         const Data.Traversable.$fTraversableDual_$csequence_info;
 },
 Data.Traversable.$fTraversableDual_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1mU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1mY; else goto cc1mZ;
       cc1mY: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableDual_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1mZ: // global
           I64[Sp - 16] = block_cc1mS_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableDual_$csequence_info" {
     Data.Traversable.$fTraversableDual_$csequence_info:
         const Data.Traversable.$fTraversableDual_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1mS() //  [R1]
         { []
         }
     {offset
       cc1mS: // global
           I64[Sp] = block_cc1mX_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1mS_info" {
     block_cc1mS_info:
         const _cc1mS;
         const 1;
         const 30;
 },
 _cc1mX() //  [R1]
         { []
         }
     {offset
       cc1mX: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableDual1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1mX_info" {
     block_cc1mX_info:
         const _cc1mX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.662489007 UTC

[section ""data" . Data.Traversable.$fTraversableDual_closure" {
     Data.Traversable.$fTraversableDual_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.Internal.$fFunctorDual_closure;
         const Data.Foldable.$fFoldableDual_closure;
         const Data.Traversable.$fTraversableDual_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableDual_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableDual_$cmapM_closure+3;
         const Data.Traversable.$fTraversableDual_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.664964461 UTC

[section ""data" . Data.Traversable.$fTraversableConst_$cmapM_closure" {
     Data.Traversable.$fTraversableConst_$cmapM_closure:
         const Data.Traversable.$fTraversableConst_$cmapM_info;
 },
 Data.Traversable.$fTraversableConst_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1nr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1ns; else goto cc1nt;
       cc1ns: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableConst_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1nt: // global
           I64[Sp - 16] = block_cc1np_info;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableConst_$cmapM_info" {
     Data.Traversable.$fTraversableConst_$cmapM_info:
         const Data.Traversable.$fTraversableConst_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1np() //  [R1]
         { []
         }
     {offset
       cc1np: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1np_info" {
     block_cc1np_info:
         const _cc1np;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.670606013 UTC

[section ""data" . Data.Traversable.$fTraversableConst_$csequence_closure" {
     Data.Traversable.$fTraversableConst_$csequence_closure:
         const Data.Traversable.$fTraversableConst_$csequence_info;
 },
 Data.Traversable.$fTraversableConst_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1nN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1nO; else goto cc1nP;
       cc1nO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableConst_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1nP: // global
           I64[Sp - 16] = block_cc1nL_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableConst_$csequence_info" {
     Data.Traversable.$fTraversableConst_$csequence_info:
         const Data.Traversable.$fTraversableConst_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1nL() //  [R1]
         { []
         }
     {offset
       cc1nL: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1nL_info" {
     block_cc1nL_info:
         const _cc1nL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.676251807 UTC

[section ""data" . $fTraversableConst1_rbWTU_closure" {
     $fTraversableConst1_rbWTU_closure:
         const $fTraversableConst1_rbWTU_info;
 },
 $fTraversableConst1_rbWTU_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1o7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1o8; else goto cc1o9;
       cc1o8: // global
           R3 = R3;
           R2 = R2;
           R1 = $fTraversableConst1_rbWTU_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1o9: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fTraversableConst1_rbWTU_info" {
     $fTraversableConst1_rbWTU_info:
         const $fTraversableConst1_rbWTU_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.679820354 UTC

[section ""data" . Data.Traversable.$fTraversableConst_closure" {
     Data.Traversable.$fTraversableConst_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Functor.Const.$fFunctorConst_closure;
         const Data.Functor.Const.$fFoldableConst_closure;
         const Data.Traversable.$fTraversableConst_$ctraverse_closure+3;
         const $fTraversableConst1_rbWTU_closure+2;
         const Data.Traversable.$fTraversableConst_$cmapM_closure+3;
         const Data.Traversable.$fTraversableConst_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.683233967 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$csequenceA_closure" {
     Data.Traversable.$fTraversable(,)_$csequenceA_closure:
         const Data.Traversable.$fTraversable(,)_$csequenceA_info;
 },
 sat_sc0l8_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1ow: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc1oA; else goto cc1oz;
       cc1oA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1oz: // global
           _sc0l5::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sc0l5::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0l8_info" {
     sat_sc0l8_info:
         const sat_sc0l8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1oB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1oD; else goto cc1oE;
       cc1oD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1oE: // global
           I64[Sp - 16] = block_cc1ol_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc1oM; else goto cc1om;
       uc1oM: // global
           call _cc1ol(R1) args: 0, res: 0, upd: 0;
       cc1om: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$csequenceA_info" {
     Data.Traversable.$fTraversable(,)_$csequenceA_info:
         const Data.Traversable.$fTraversable(,)_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1ol() //  [R1]
         { []
         }
     {offset
       cc1ol: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc1oH; else goto cc1oG;
       cc1oH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1oG: // global
           _sc0l5::P64 = P64[R1 + 7];
           _sc0l6::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sc0l8_info;
           P64[Hp] = _sc0l5::P64;
           I64[Sp - 8] = block_cc1oC_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sc0l6::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1ol_info" {
     block_cc1ol_info:
         const _cc1ol;
         const 1;
         const 30;
 },
 _cc1oC() //  [R1]
         { []
         }
     {offset
       cc1oC: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sc0l6::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sc0l6::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1oC_info" {
     block_cc1oC_info:
         const _cc1oC;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.694113379 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$cmapM_closure" {
     Data.Traversable.$fTraversable(,)_$cmapM_closure:
         const Data.Traversable.$fTraversable(,)_$cmapM_info;
 },
 sat_sc0lh_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1pq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc1pu; else goto cc1pt;
       cc1pu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1pt: // global
           _sc0ld::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sc0ld::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0lh_info" {
     sat_sc0lh_info:
         const sat_sc0lh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1pv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1pB; else goto cc1pC;
       cc1pB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1pC: // global
           I64[Sp - 24] = block_cc1pe_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc1pL; else goto cc1pf;
       uc1pL: // global
           call _cc1pe(R1) args: 0, res: 0, upd: 0;
       cc1pf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$cmapM_info" {
     Data.Traversable.$fTraversable(,)_$cmapM_info:
         const Data.Traversable.$fTraversable(,)_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1pe() //  [R1]
         { []
         }
     {offset
       cc1pe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc1pF; else goto cc1pE;
       cc1pF: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1pE: // global
           _sc0ld::P64 = P64[R1 + 7];
           _sc0le::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sc0le::P64;
           I64[Hp - 8] = sat_sc0lh_info;
           P64[Hp] = _sc0ld::P64;
           I64[Sp] = block_cc1pw_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1pe_info" {
     block_cc1pe_info:
         const _cc1pe;
         const 2;
         const 30;
 },
 _cc1pw() //  [R1]
         { []
         }
     {offset
       cc1pw: // global
           I64[Sp] = block_cc1pA_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1pw_info" {
     block_cc1pw_info:
         const _cc1pw;
         const 2;
         const 30;
 },
 _cc1pA() //  [R1]
         { []
         }
     {offset
       cc1pA: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1pA_info" {
     block_cc1pA_info:
         const _cc1pA;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.706708205 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_$csequence_closure" {
     Data.Traversable.$fTraversable(,)_$csequence_closure:
         const Data.Traversable.$fTraversable(,)_$csequence_info;
 },
 sat_sc0lq_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1qu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc1qy; else goto cc1qx;
       cc1qy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1qx: // global
           _sc0lm::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sc0lm::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0lq_info" {
     sat_sc0lq_info:
         const sat_sc0lq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Traversable.$fTraversable(,)_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1qz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1qF; else goto cc1qG;
       cc1qF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable(,)_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1qG: // global
           I64[Sp - 16] = block_cc1qj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc1qP; else goto cc1qk;
       uc1qP: // global
           call _cc1qj(R1) args: 0, res: 0, upd: 0;
       cc1qk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable(,)_$csequence_info" {
     Data.Traversable.$fTraversable(,)_$csequence_info:
         const Data.Traversable.$fTraversable(,)_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1qj() //  [R1]
         { []
         }
     {offset
       cc1qj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc1qJ; else goto cc1qI;
       cc1qJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1qI: // global
           _sc0lm::P64 = P64[R1 + 7];
           _sc0ln::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sc0lq_info;
           P64[Hp] = _sc0lm::P64;
           I64[Sp - 8] = block_cc1qA_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sc0ln::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1qj_info" {
     block_cc1qj_info:
         const _cc1qj;
         const 1;
         const 30;
 },
 _cc1qA() //  [R1]
         { []
         }
     {offset
       cc1qA: // global
           I64[Sp] = block_cc1qE_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1qA_info" {
     block_cc1qA_info:
         const _cc1qA;
         const 2;
         const 30;
 },
 _cc1qE() //  [R1]
         { []
         }
     {offset
       cc1qE: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sc0ln::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sc0ln::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1qE_info" {
     block_cc1qE_info:
         const _cc1qE;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.716658632 UTC

[section ""data" . Data.Traversable.$fTraversable(,)_closure" {
     Data.Traversable.$fTraversable(,)_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctor(,)_closure;
         const Data.Foldable.$fFoldable(,)_closure;
         const Data.Traversable.$fTraversable(,)_$ctraverse_closure+3;
         const Data.Traversable.$fTraversable(,)_$csequenceA_closure+2;
         const Data.Traversable.$fTraversable(,)_$cmapM_closure+3;
         const Data.Traversable.$fTraversable(,)_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.720060711 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$csequenceA_closure" {
     Data.Traversable.$fTraversableEither_$csequenceA_closure:
         const Data.Traversable.$fTraversableEither_$csequenceA_info;
 },
 Data.Traversable.$fTraversableEither_$csequenceA_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cc1rt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1ru; else goto cc1rv;
       cc1ru: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1rv: // global
           I64[Sp - 16] = block_cc1rm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc1rH; else goto cc1rn;
       uc1rH: // global
           call _cc1rm(R1) args: 0, res: 0, upd: 0;
       cc1rn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$csequenceA_info" {
     Data.Traversable.$fTraversableEither_$csequenceA_info:
         const Data.Traversable.$fTraversableEither_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1rm() //  [R1]
         { []
         }
     {offset
       cc1rm: // global
           _sc0lr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1rq; else goto cc1rr;
       cc1rq: // global
           R2 = _sc0lr::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = R1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cc1rr: // global
           I64[Sp] = block_cc1rB_info;
           R2 = _sc0lr::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1rm_info" {
     block_cc1rm_info:
         const _cc1rm;
         const 1;
         const 30;
 },
 _cc1rB() //  [R1]
         { []
         }
     {offset
       cc1rB: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1rB_info" {
     block_cc1rB_info:
         const _cc1rB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.727669666 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$cmapM_closure" {
     Data.Traversable.$fTraversableEither_$cmapM_closure:
         const Data.Traversable.$fTraversableEither_$cmapM_info;
 },
 Data.Traversable.$fTraversableEither_$cmapM_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cc1s9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1sa; else goto cc1sb;
       cc1sa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1sb: // global
           I64[Sp - 24] = block_cc1s7_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$cmapM_info" {
     Data.Traversable.$fTraversableEither_$cmapM_info:
         const Data.Traversable.$fTraversableEither_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1s7() //  [R1]
         { []
         }
     {offset
       cc1s7: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableEither_$ctraverse_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1s7_info" {
     block_cc1s7_info:
         const _cc1s7;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.734704221 UTC

[section ""data" . Data.Traversable.$fTraversableEither_$csequence_closure" {
     Data.Traversable.$fTraversableEither_$csequence_closure:
         const Data.Traversable.$fTraversableEither_$csequence_info;
 },
 Data.Traversable.$fTraversableEither_$csequence_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc1sz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1sA; else goto cc1sB;
       cc1sA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableEither_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1sB: // global
           I64[Sp - 16] = block_cc1ss_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc1sX; else goto cc1st;
       uc1sX: // global
           call _cc1ss(R1) args: 0, res: 0, upd: 0;
       cc1st: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableEither_$csequence_info" {
     Data.Traversable.$fTraversableEither_$csequence_info:
         const Data.Traversable.$fTraversableEither_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1ss() //  [R1]
         { []
         }
     {offset
       cc1ss: // global
           _sc0lC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1sw; else goto cc1sx;
       cc1sw: // global
           I64[Sp] = block_cc1sE_info;
           R2 = _sc0lC::P64;
           P64[Sp + 8] = R1;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
       cc1sx: // global
           I64[Sp] = block_cc1sM_info;
           R2 = _sc0lC::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1ss_info" {
     block_cc1ss_info:
         const _cc1ss;
         const 1;
         const 30;
 },
 _cc1sE() //  [R1]
         { []
         }
     {offset
       cc1sE: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1sE_info" {
     block_cc1sE_info:
         const _cc1sE;
         const 1;
         const 30;
 },
 _cc1sM() //  [R1]
         { []
         }
     {offset
       cc1sM: // global
           I64[Sp] = block_cc1sQ_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1sM_info" {
     block_cc1sM_info:
         const _cc1sM;
         const 1;
         const 30;
 },
 _cc1sQ() //  [R1]
         { []
         }
     {offset
       cc1sQ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1sQ_info" {
     block_cc1sQ_info:
         const _cc1sQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.744565292 UTC

[section ""data" . Data.Traversable.$fTraversableEither_closure" {
     Data.Traversable.$fTraversableEither_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Either.$fFunctorEither_closure;
         const Data.Foldable.$fFoldableEither_closure;
         const Data.Traversable.$fTraversableEither_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableEither_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableEither_$cmapM_closure+3;
         const Data.Traversable.$fTraversableEither_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.749160872 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$csequenceA_closure" {
     Data.Traversable.$fTraversable[]_$csequenceA_closure:
         const Data.Traversable.$fTraversable[]_$csequenceA_info;
 },
 z_sc0lM_entry() //  [R1]
         { []
         }
     {offset
       cc1tA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1tB; else goto cc1tC;
       cc1tB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1tC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sc0lM_info" {
     z_sc0lM_info:
         const z_sc0lM_entry;
         const 1;
         const 16;
 },
 go_sc0lN_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1tP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1tQ; else goto cc1tR;
       cc1tQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1tR: // global
           I64[Sp - 32] = block_cc1tI_info;
           _sc0lN::P64 = R1;
           _sc0lL::P64 = P64[R1 + 7];
           _sc0lM::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sc0lL::P64;
           P64[Sp - 16] = _sc0lM::P64;
           P64[Sp - 8] = _sc0lN::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc1u1; else goto cc1tJ;
       uc1u1: // global
           call _cc1tI(R1) args: 0, res: 0, upd: 0;
       cc1tJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc0lN_info" {
     go_sc0lN_info:
         const go_sc0lN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cc1tI() //  [R1]
         { []
         }
     {offset
       cc1tI: // global
           if (R1 & 7 == 1) goto cc1tM; else goto cc1tN;
       cc1tM: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cc1tN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1tZ; else goto cc1tY;
       cc1tZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1tY: // global
           _sc0lQ::P64 = P64[R1 + 6];
           _sc0lR::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sc0lR::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = GHC.Types.:_closure+2;
           P64[Sp + 16] = _sc0lQ::P64;
           P64[Sp + 24] = Hp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1tI_info" {
     block_cc1tI_info:
         const _cc1tI;
         const 3;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$csequenceA_entry() //  [R2]
         { []
         }
     {offset
       cc1u2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc1u6; else goto cc1u5;
       cc1u6: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$csequenceA_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1u5: // global
           I64[Hp - 40] = z_sc0lM_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_sc0lN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$csequenceA_info" {
     Data.Traversable.$fTraversable[]_$csequenceA_info:
         const Data.Traversable.$fTraversable[]_$csequenceA_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.76044041 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$cmapM_closure" {
     Data.Traversable.$fTraversable[]_$cmapM_closure:
         const Data.Traversable.$fTraversable[]_$cmapM_info;
 },
 $dApplicative_sc0lV_entry() //  [R1]
         { []
         }
     {offset
       cc1uM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1uN; else goto cc1uO;
       cc1uN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1uO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sc0lV_info" {
     $dApplicative_sc0lV_info:
         const $dApplicative_sc0lV_entry;
         const 1;
         const 16;
 },
 z_sc0lW_entry() //  [R1]
         { []
         }
     {offset
       cc1uT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1uU; else goto cc1uV;
       cc1uU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1uV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sc0lW_info" {
     z_sc0lW_info:
         const z_sc0lW_entry;
         const 1;
         const 16;
 },
 go_sc0lX_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1v8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1v9; else goto cc1va;
       cc1v9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1va: // global
           I64[Sp - 40] = block_cc1v1_info;
           _sc0lX::P64 = R1;
           _sc0lU::P64 = P64[R1 + 7];
           _sc0lV::P64 = P64[R1 + 15];
           _sc0lW::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sc0lU::P64;
           P64[Sp - 24] = _sc0lV::P64;
           P64[Sp - 16] = _sc0lW::P64;
           P64[Sp - 8] = _sc0lX::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc1vl; else goto cc1v2;
       uc1vl: // global
           call _cc1v1(R1) args: 0, res: 0, upd: 0;
       cc1v2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc0lX_info" {
     go_sc0lX_info:
         const go_sc0lX_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cc1v1() //  [R1]
         { []
         }
     {offset
       cc1v1: // global
           if (R1 & 7 == 1) goto cc1v5; else goto cc1v6;
       cc1v5: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cc1v6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc1vi; else goto cc1vh;
       cc1vi: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1vh: // global
           _sc0m0::P64 = P64[R1 + 6];
           _sc0m1::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sc0m1::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sc0m0::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1v1_info" {
     block_cc1v1_info:
         const _cc1v1;
         const 4;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$cmapM_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1vm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cc1vq; else goto cc1vp;
       cc1vq: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$cmapM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1vp: // global
           I64[Hp - 72] = $dApplicative_sc0lV_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = z_sc0lW_info;
           _cc1uI::P64 = Hp - 72;
           P64[Hp - 32] = _cc1uI::P64;
           I64[Hp - 24] = go_sc0lX_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = _cc1uI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$cmapM_info" {
     Data.Traversable.$fTraversable[]_$cmapM_info:
         const Data.Traversable.$fTraversable[]_$cmapM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.774462717 UTC

[section ""data" . Data.Traversable.$fTraversable[]_$csequence_closure" {
     Data.Traversable.$fTraversable[]_$csequence_closure:
         const Data.Traversable.$fTraversable[]_$csequence_info;
 },
 $dApplicative_sc0m5_entry() //  [R1]
         { []
         }
     {offset
       cc1wf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1wg; else goto cc1wh;
       cc1wg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1wh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sc0m5_info" {
     $dApplicative_sc0m5_info:
         const $dApplicative_sc0m5_entry;
         const 1;
         const 16;
 },
 z_sc0m6_entry() //  [R1]
         { []
         }
     {offset
       cc1wm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1wn; else goto cc1wo;
       cc1wn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1wo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sc0m6_info" {
     z_sc0m6_info:
         const z_sc0m6_entry;
         const 1;
         const 16;
 },
 go_sc0m7_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1wB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1wC; else goto cc1wD;
       cc1wC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1wD: // global
           I64[Sp - 32] = block_cc1wu_info;
           _sc0m7::P64 = R1;
           _sc0m5::P64 = P64[R1 + 7];
           _sc0m6::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sc0m5::P64;
           P64[Sp - 16] = _sc0m6::P64;
           P64[Sp - 8] = _sc0m7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc1wN; else goto cc1wv;
       uc1wN: // global
           call _cc1wu(R1) args: 0, res: 0, upd: 0;
       cc1wv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc0m7_info" {
     go_sc0m7_info:
         const go_sc0m7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cc1wu() //  [R1]
         { []
         }
     {offset
       cc1wu: // global
           if (R1 & 7 == 1) goto cc1wy; else goto cc1wz;
       cc1wy: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cc1wz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1wL; else goto cc1wK;
       cc1wL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1wK: // global
           _sc0ma::P64 = P64[R1 + 6];
           _sc0mb::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sc0mb::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = GHC.Types.:_closure+2;
           P64[Sp + 16] = _sc0ma::P64;
           P64[Sp + 24] = Hp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1wu_info" {
     block_cc1wu_info:
         const _cc1wu;
         const 3;
         const 30;
 },
 Data.Traversable.$fTraversable[]_$csequence_entry() //  [R2]
         { []
         }
     {offset
       cc1wO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cc1wS; else goto cc1wR;
       cc1wS: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Traversable.$fTraversable[]_$csequence_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1wR: // global
           I64[Hp - 64] = $dApplicative_sc0m5_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = z_sc0m6_info;
           _cc1wb::P64 = Hp - 64;
           P64[Hp - 24] = _cc1wb::P64;
           I64[Hp - 16] = go_sc0m7_info;
           P64[Hp - 8] = _cc1wb::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversable[]_$csequence_info" {
     Data.Traversable.$fTraversable[]_$csequence_info:
         const Data.Traversable.$fTraversable[]_$csequence_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.785450074 UTC

[section ""data" . Data.Traversable.$fTraversable[]_closure" {
     Data.Traversable.$fTraversable[]_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctor[]_closure;
         const Data.Foldable.$fFoldable[]_closure;
         const Data.Traversable.$fTraversable[]_$ctraverse_closure+2;
         const Data.Traversable.$fTraversable[]_$csequenceA_closure+1;
         const Data.Traversable.$fTraversable[]_$cmapM_closure+2;
         const Data.Traversable.$fTraversable[]_$csequence_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.787662833 UTC

[section ""data" . Data.Traversable.$fTraversableZipList1_closure" {
     Data.Traversable.$fTraversableZipList1_closure:
         const Data.Traversable.$fTraversableZipList1_info;
 },
 Data.Traversable.$fTraversableZipList1_entry() //  [R2]
         { []
         }
     {offset
       cc1xB: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList1_info" {
     Data.Traversable.$fTraversableZipList1_info:
         const Data.Traversable.$fTraversableZipList1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.794125395 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$ctraverse_closure" {
     Data.Traversable.$fTraversableZipList_$ctraverse_closure:
         const Data.Traversable.$fTraversableZipList_$ctraverse_info;
 },
 z_sc0mi_entry() //  [R1]
         { []
         }
     {offset
       cc1xW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1xX; else goto cc1xY;
       cc1xX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1xY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sc0mi_info" {
     z_sc0mi_info:
         const z_sc0mi_entry;
         const 1;
         const 16;
 },
 go_sc0mj_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1yb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1yc; else goto cc1yd;
       cc1yc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1yd: // global
           I64[Sp - 40] = block_cc1y4_info;
           _sc0mj::P64 = R1;
           _sc0me::P64 = P64[R1 + 7];
           _sc0mf::P64 = P64[R1 + 15];
           _sc0mi::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sc0me::P64;
           P64[Sp - 24] = _sc0mf::P64;
           P64[Sp - 16] = _sc0mi::P64;
           P64[Sp - 8] = _sc0mj::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc1yo; else goto cc1y5;
       uc1yo: // global
           call _cc1y4(R1) args: 0, res: 0, upd: 0;
       cc1y5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc0mj_info" {
     go_sc0mj_info:
         const go_sc0mj_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cc1y4() //  [R1]
         { []
         }
     {offset
       cc1y4: // global
           if (R1 & 7 == 1) goto cc1y8; else goto cc1y9;
       cc1y8: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cc1y9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc1yl; else goto cc1yk;
       cc1yl: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1yk: // global
           _sc0mm::P64 = P64[R1 + 6];
           _sc0mn::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sc0mn::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sc0mm::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1y4_info" {
     block_cc1y4_info:
         const _cc1y4;
         const 4;
         const 30;
 },
 sat_sc0mq_entry() //  [R1]
         { []
         }
     {offset
       cc1yp: // global
           _sc0mq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc1yq; else goto cc1yr;
       cc1yr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc1yt; else goto cc1ys;
       cc1yt: // global
           HpAlloc = 56;
           goto cc1yq;
       cc1yq: // global
           R1 = _sc0mq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1ys: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc0mq::P64;
           _sc0me::P64 = P64[_sc0mq::P64 + 16];
           _sc0mf::P64 = P64[_sc0mq::P64 + 24];
           _sc0mg::P64 = P64[_sc0mq::P64 + 32];
           I64[Hp - 48] = z_sc0mi_info;
           P64[Hp - 32] = _sc0me::P64;
           I64[Hp - 24] = go_sc0mj_info;
           P64[Hp - 16] = _sc0me::P64;
           P64[Hp - 8] = _sc0mf::P64;
           P64[Hp] = Hp - 48;
           R2 = _sc0mg::P64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_sc0mj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0mq_info" {
     sat_sc0mq_info:
         const sat_sc0mq_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableZipList_$ctraverse_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cc1yw: // global
           _sc0mg::P64 = R4;
           _sc0mf::P64 = R3;
           _sc0me::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1yx; else goto cc1yy;
       cc1yy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc1yA; else goto cc1yz;
       cc1yA: // global
           HpAlloc = 40;
           goto cc1yx;
       cc1yx: // global
           R4 = _sc0mg::P64;
           R3 = _sc0mf::P64;
           R2 = _sc0me::P64;
           R1 = Data.Traversable.$fTraversableZipList_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1yz: // global
           I64[Hp - 32] = sat_sc0mq_info;
           P64[Hp - 16] = _sc0me::P64;
           P64[Hp - 8] = _sc0mf::P64;
           P64[Hp] = _sc0mg::P64;
           I64[Sp - 16] = block_cc1yu_info;
           R2 = _sc0me::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$ctraverse_info" {
     Data.Traversable.$fTraversableZipList_$ctraverse_info:
         const Data.Traversable.$fTraversableZipList_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1yu() //  [R1]
         { []
         }
     {offset
       cc1yu: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableZipList1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1yu_info" {
     block_cc1yu_info:
         const _cc1yu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.807480493 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$csequenceA_closure" {
     Data.Traversable.$fTraversableZipList_$csequenceA_closure:
         const Data.Traversable.$fTraversableZipList_$csequenceA_info;
 },
 Data.Traversable.$fTraversableZipList_$csequenceA_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc1zv: // global
           R4 = R3;
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           call Data.Traversable.$fTraversableZipList_$ctraverse_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$csequenceA_info" {
     Data.Traversable.$fTraversableZipList_$csequenceA_info:
         const Data.Traversable.$fTraversableZipList_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.811281087 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$cmapM_closure" {
     Data.Traversable.$fTraversableZipList_$cmapM_closure:
         const Data.Traversable.$fTraversableZipList_$cmapM_info;
 },
 Data.Traversable.$fTraversableZipList_$cmapM_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cc1zJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1zK; else goto cc1zL;
       cc1zK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableZipList_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1zL: // global
           I64[Sp - 24] = block_cc1zH_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$cmapM_info" {
     Data.Traversable.$fTraversableZipList_$cmapM_info:
         const Data.Traversable.$fTraversableZipList_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1zH() //  [R1]
         { []
         }
     {offset
       cc1zH: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableZipList_$ctraverse_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1zH_info" {
     block_cc1zH_info:
         const _cc1zH;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.817101713 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_$csequence_closure" {
     Data.Traversable.$fTraversableZipList_$csequence_closure:
         const Data.Traversable.$fTraversableZipList_$csequence_info;
 },
 Data.Traversable.$fTraversableZipList_$csequence_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cc1A4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1A5; else goto cc1A6;
       cc1A5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableZipList_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1A6: // global
           I64[Sp - 16] = block_cc1A2_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableZipList_$csequence_info" {
     Data.Traversable.$fTraversableZipList_$csequence_info:
         const Data.Traversable.$fTraversableZipList_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1A2() //  [R1]
         { []
         }
     {offset
       cc1A2: // global
           R4 = P64[Sp + 8];
           R3 = GHC.Base.id_closure+1;
           R2 = R1;
           Sp = Sp + 16;
           call Data.Traversable.$fTraversableZipList_$ctraverse_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1A2_info" {
     block_cc1A2_info:
         const _cc1A2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.822416744 UTC

[section ""data" . Data.Traversable.$fTraversableZipList_closure" {
     Data.Traversable.$fTraversableZipList_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Control.Applicative.$fFunctorZipList_closure;
         const Control.Applicative.$fFoldableZipList_closure;
         const Data.Traversable.$fTraversableZipList_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableZipList_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableZipList_$cmapM_closure+3;
         const Data.Traversable.$fTraversableZipList_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.830661968 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$ctraverse_closure" {
     Data.Traversable.$fTraversableArray_$ctraverse_closure:
         const Data.Traversable.$fTraversableArray_$ctraverse_info;
         const 0;
 },
 n_sc0mM_entry() //  [R1]
         { []
         }
     {offset
       cc1AF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1AG; else goto cc1AH;
       cc1AG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1AH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n_sc0mM_info" {
     n_sc0mM_info:
         const n_sc0mM_entry;
         const 1;
         const 16;
 },
 sat_sc0mW_entry() //  [R1]
         { []
         }
     {offset
       cc1AZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1B0; else goto cc1B1;
       cc1B0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1B1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sc0mP::I64 = I64[R1 + 40];
           if (_sc0mP::I64 == I64[R1 + 32]) goto cc1AY; else goto cc1AX;
       cc1AY: // global
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cc1AX: // global
           R2 = _sc0mP::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go_sc0mO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0mW_info" {
     sat_sc0mW_info:
         const sat_sc0mW_entry;
         const 8589934594;
         const 15;
 },
 sat_sc0mS_entry() //  [R1]
         { []
         }
     {offset
       cc1Bc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1Bd; else goto cc1Be;
       cc1Bd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1Be: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0mS_info" {
     sat_sc0mS_info:
         const sat_sc0mS_entry;
         const 4294967297;
         const 19;
 },
 sat_sc0mT_entry() //  [R1]
         { []
         }
     {offset
       cc1Bf: // global
           _sc0mT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc1Bg; else goto cc1Bh;
       cc1Bh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1Bj; else goto cc1Bi;
       cc1Bj: // global
           HpAlloc = 32;
           goto cc1Bg;
       cc1Bg: // global
           R1 = _sc0mT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1Bi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc0mT::P64;
           _sc0mB::P64 = P64[_sc0mT::P64 + 16];
           _sc0mK::P64 = P64[_sc0mT::P64 + 24];
           _sc0mP::I64 = I64[_sc0mT::P64 + 32];
           I64[Hp - 24] = sat_sc0mS_info;
           P64[Hp - 8] = _sc0mK::P64;
           I64[Hp] = _sc0mP::I64;
           R2 = Hp - 24;
           R1 = _sc0mB::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0mT_info" {
     sat_sc0mT_info:
         const sat_sc0mT_entry;
         const 4294967298;
         const 15;
 },
 go_sc0mO_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1Bk: // global
           _sc0mP::I64 = R2;
           _sc0mO::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc1Bl; else goto cc1Bm;
       cc1Bm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc1Bo; else goto cc1Bn;
       cc1Bo: // global
           HpAlloc = 88;
           goto cc1Bl;
       cc1Bl: // global
           R2 = _sc0mP::I64;
           R1 = _sc0mO::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1Bn: // global
           _sc0mA::P64 = P64[_sc0mO::P64 + 7];
           _sc0mB::P64 = P64[_sc0mO::P64 + 15];
           _sc0mK::P64 = P64[_sc0mO::P64 + 23];
           _sc0mM::P64 = P64[_sc0mO::P64 + 31];
           _sc0mL::I64 = I64[_sc0mO::P64 + 39];
           I64[Hp - 80] = sat_sc0mW_info;
           P64[Hp - 64] = _sc0mM::P64;
           P64[Hp - 56] = _sc0mO::P64;
           I64[Hp - 48] = _sc0mL::I64;
           I64[Hp - 40] = _sc0mP::I64;
           I64[Hp - 32] = sat_sc0mT_info;
           P64[Hp - 16] = _sc0mB::P64;
           P64[Hp - 8] = _sc0mK::P64;
           I64[Hp] = _sc0mP::I64;
           R2 = _sc0mA::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 80;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sc0mO_info" {
     go_sc0mO_info:
         const go_sc0mO_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 sat_sc0mX_entry() //  [R1]
         { []
         }
     {offset
       cc1Bp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1Bq; else goto cc1Br;
       cc1Bq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1Br: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cc1At_info;
           _sc0mA::P64 = P64[R1 + 16];
           _sc0mB::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sc0mA::P64;
           P64[Sp - 24] = _sc0mB::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc1By; else goto cc1Au;
       uc1By: // global
           call _cc1At(R1) args: 0, res: 0, upd: 0;
       cc1Au: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0mX_info" {
     sat_sc0mX_info:
         const sat_sc0mX_entry;
         const 3;
         const 15;
 },
 _cc1At() //  [R1]
         { []
         }
     {offset
       cc1At: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cc1Bu; else goto cc1Bt;
       cc1Bu: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc1Bt: // global
           _sc0mK::P64 = P64[R1 + 23];
           _sc0mL::I64 = I64[R1 + 31] - 1;
           I64[Hp - 64] = n_sc0mM_info;
           _sc0mA::P64 = P64[Sp + 8];
           P64[Hp - 48] = _sc0mA::P64;
           _cc1AB::P64 = Hp - 64;
           if (%MO_S_Le_W64(0, _sc0mL::I64)) goto cc1Bw; else goto cc1Bx;
       cc1Bw: // global
           I64[Hp - 40] = go_sc0mO_info;
           P64[Hp - 32] = _sc0mA::P64;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sc0mK::P64;
           P64[Hp - 8] = _cc1AB::P64;
           I64[Hp] = _sc0mL::I64;
           R2 = 0;
           R1 = Hp - 39;
           Sp = Sp + 24;
           call go_sc0mO_entry(R2, R1) args: 24, res: 0, upd: 24;
       cc1Bx: // global
           Hp = Hp - 48;
           R1 = _cc1AB::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1At_info" {
     block_cc1At_info:
         const _cc1At;
         const 2;
         const 30;
 },
 sat_sc0mE_entry() //  [R1]
         { []
         }
     {offset
       cc1BD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1BE; else goto cc1BF;
       cc1BE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1BF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.bounds_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0mE_info" {
     sat_sc0mE_info:
         const sat_sc0mE_entry;
         const 1;
         const 16;
 },
 sat_sc0mF_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1BL: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.listArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0mF_info" {
     sat_sc0mF_info:
         const sat_sc0mF_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sc0Cf_srt+120;
 },
 Data.Traversable.$fTraversableArray_$ctraverse_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cc1BQ: // global
           _sc0mC::P64 = R5;
           _sc0mB::P64 = R4;
           _sc0mA::P64 = R3;
           _sc0mz::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1BR; else goto cc1BS;
       cc1BS: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc1BU; else goto cc1BT;
       cc1BU: // global
           HpAlloc = 88;
           goto cc1BR;
       cc1BR: // global
           R5 = _sc0mC::P64;
           R4 = _sc0mB::P64;
           R3 = _sc0mA::P64;
           R2 = _sc0mz::P64;
           R1 = Data.Traversable.$fTraversableArray_$ctraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1BT: // global
           I64[Hp - 80] = sat_sc0mX_info;
           P64[Hp - 64] = _sc0mA::P64;
           P64[Hp - 56] = _sc0mB::P64;
           P64[Hp - 48] = _sc0mC::P64;
           I64[Hp - 40] = sat_sc0mE_info;
           P64[Hp - 24] = _sc0mC::P64;
           I64[Hp - 16] = sat_sc0mF_info;
           P64[Hp - 8] = _sc0mz::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 24] = block_cc1BO_info;
           R2 = _sc0mA::P64;
           P64[Sp - 16] = Hp - 80;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$ctraverse_info" {
     Data.Traversable.$fTraversableArray_$ctraverse_info:
         const Data.Traversable.$fTraversableArray_$ctraverse_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sc0Cf_srt+120;
 },
 _cc1BO() //  [R1]
         { []
         }
     {offset
       cc1BO: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _cc1Ap::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cc1Ap::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1BO_info" {
     block_cc1BO_info:
         const _cc1BO;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.860526776 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$csequenceA_closure" {
     Data.Traversable.$fTraversableArray_$csequenceA_closure:
         const Data.Traversable.$fTraversableArray_$csequenceA_info;
         const 0;
 },
 Data.Traversable.$fTraversableArray_$csequenceA_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cc1Dg: // global
           R5 = R4;
           R4 = GHC.Base.id_closure+1;
           R3 = R3;
           R2 = R2;
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$csequenceA_info" {
     Data.Traversable.$fTraversableArray_$csequenceA_info:
         const Data.Traversable.$fTraversableArray_$csequenceA_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const Sc0Cf_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.865000577 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$cmapM_closure" {
     Data.Traversable.$fTraversableArray_$cmapM_closure:
         const Data.Traversable.$fTraversableArray_$cmapM_info;
         const 0;
 },
 Data.Traversable.$fTraversableArray_$cmapM_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cc1Du: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1Dv; else goto cc1Dw;
       cc1Dv: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableArray_$cmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1Dw: // global
           I64[Sp - 32] = block_cc1Ds_info;
           _sc0n0::P64 = R2;
           R2 = R3;
           P64[Sp - 24] = _sc0n0::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$cmapM_info" {
     Data.Traversable.$fTraversableArray_$cmapM_info:
         const Data.Traversable.$fTraversableArray_$cmapM_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sc0Cf_srt+128;
 },
 _cc1Ds() //  [R1]
         { []
         }
     {offset
       cc1Ds: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Ds_info" {
     block_cc1Ds_info:
         const _cc1Ds;
         const 3;
         const 4294967326;
         const Sc0Cf_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.87066906 UTC

[section ""data" . Data.Traversable.$fTraversableArray_$csequence_closure" {
     Data.Traversable.$fTraversableArray_$csequence_closure:
         const Data.Traversable.$fTraversableArray_$csequence_info;
         const 0;
 },
 Data.Traversable.$fTraversableArray_$csequence_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cc1DP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1DQ; else goto cc1DR;
       cc1DQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableArray_$csequence_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1DR: // global
           I64[Sp - 24] = block_cc1DN_info;
           _sc0n5::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _sc0n5::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_$csequence_info" {
     Data.Traversable.$fTraversableArray_$csequence_info:
         const Data.Traversable.$fTraversableArray_$csequence_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const Sc0Cf_srt+128;
 },
 _cc1DN() //  [R1]
         { []
         }
     {offset
       cc1DN: // global
           R5 = P64[Sp + 16];
           R4 = GHC.Base.id_closure+1;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1DN_info" {
     block_cc1DN_info:
         const _cc1DN;
         const 2;
         const 4294967326;
         const Sc0Cf_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.87750074 UTC

[section ""data" . Data.Traversable.$fTraversableArray_closure" {
     Data.Traversable.$fTraversableArray_closure:
         const Data.Traversable.$fTraversableArray_info;
         const 0;
 },
 sat_sc0nd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1Ee: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableArray_$csequence_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0nd_info" {
     sat_sc0nd_info:
         const sat_sc0nd_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sc0Cf_srt+144;
 },
 sat_sc0nc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc1Em: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableArray_$cmapM_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0nc_info" {
     sat_sc0nc_info:
         const sat_sc0nc_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const Sc0Cf_srt+136;
 },
 sat_sc0nb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1Eu: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Traversable.$fTraversableArray_$csequenceA_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0nb_info" {
     sat_sc0nb_info:
         const sat_sc0nb_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sc0Cf_srt+152;
 },
 sat_sc0na_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cc1EC: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Traversable.$fTraversableArray_$ctraverse_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0na_info" {
     sat_sc0na_info:
         const sat_sc0na_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const Sc0Cf_srt+128;
 },
 Data.Traversable.$fTraversableArray_entry() //  [R2]
         { []
         }
     {offset
       cc1EG: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cc1EK; else goto cc1EJ;
       cc1EK: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1EJ: // global
           I64[Hp - 112] = sat_sc0nd_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sc0nc_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sc0nb_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sc0na_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = GHC.Arr.$fFunctorArray_closure;
           P64[Hp - 32] = Data.Foldable.$fFoldableArray_closure;
           P64[Hp - 24] = Hp - 61;
           P64[Hp - 16] = Hp - 78;
           P64[Hp - 8] = Hp - 93;
           P64[Hp] = Hp - 110;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableArray_info" {
     Data.Traversable.$fTraversableArray_info:
         const Data.Traversable.$fTraversableArray_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const Sc0Cf_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.891642914 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure" {
     Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure:
         const Data.Traversable.$fTraversableNonEmpty_$ctraverse_info;
 },
 z_sc0np_entry() //  [R1]
         { []
         }
     {offset
       cc1Fu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1Fv; else goto cc1Fw;
       cc1Fv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1Fw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sc0np_info" {
     z_sc0np_info:
         const z_sc0np_entry;
         const 1;
         const 16;
 },
 go_sc0nq_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1FJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1FK; else goto cc1FL;
       cc1FK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1FL: // global
           I64[Sp - 40] = block_cc1FC_info;
           _sc0nq::P64 = R1;
           _sc0ne::P64 = P64[R1 + 7];
           _sc0nf::P64 = P64[R1 + 15];
           _sc0np::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sc0ne::P64;
           P64[Sp - 24] = _sc0nf::P64;
           P64[Sp - 16] = _sc0np::P64;
           P64[Sp - 8] = _sc0nq::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc1FW; else goto cc1FD;
       uc1FW: // global
           call _cc1FC(R1) args: 0, res: 0, upd: 0;
       cc1FD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc0nq_info" {
     go_sc0nq_info:
         const go_sc0nq_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cc1FC() //  [R1]
         { []
         }
     {offset
       cc1FC: // global
           if (R1 & 7 == 1) goto cc1FG; else goto cc1FH;
       cc1FG: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cc1FH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc1FT; else goto cc1FS;
       cc1FT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1FS: // global
           _sc0nt::P64 = P64[R1 + 6];
           _sc0nu::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sc0nu::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sc0nt::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = GHC.Types.:_closure+2;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1FC_info" {
     block_cc1FC_info:
         const _cc1FC;
         const 4;
         const 30;
 },
 sat_sc0nx_entry() //  [R1]
         { []
         }
     {offset
       cc1FX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1FY; else goto cc1FZ;
       cc1FY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1FZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cc1Fl_info;
           _sc0ne::P64 = P64[R1 + 16];
           _sc0nf::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sc0ne::P64;
           P64[Sp - 24] = _sc0nf::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc1G3; else goto cc1Fm;
       uc1G3: // global
           call _cc1Fl(R1) args: 0, res: 0, upd: 0;
       cc1Fm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0nx_info" {
     sat_sc0nx_info:
         const sat_sc0nx_entry;
         const 3;
         const 15;
 },
 _cc1Fl() //  [R1]
         { []
         }
     {offset
       cc1Fl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc1G2; else goto cc1G1;
       cc1G2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc1G1: // global
           _sc0no::P64 = P64[R1 + 15];
           I64[Hp - 48] = z_sc0np_info;
           _sc0ne::P64 = P64[Sp + 8];
           P64[Hp - 32] = _sc0ne::P64;
           I64[Hp - 24] = go_sc0nq_info;
           P64[Hp - 16] = _sc0ne::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R2 = _sc0no::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call go_sc0nq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1Fl_info" {
     block_cc1Fl_info:
         const _cc1Fl;
         const 2;
         const 30;
 },
 sat_sc0nl_entry() //  [R1]
         { []
         }
     {offset
       cc1G9: // global
           _sc0nl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc1Ga; else goto cc1Gb;
       cc1Gb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc1Gd; else goto cc1Gc;
       cc1Gd: // global
           HpAlloc = 24;
           goto cc1Ga;
       cc1Ga: // global
           R1 = _sc0nl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1Gc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc0nl::P64;
           _sc0nf::P64 = P64[_sc0nl::P64 + 16];
           _sc0ng::P64 = P64[_sc0nl::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sc0ng::P64;
           R2 = Hp - 16;
           R1 = _sc0nf::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0nl_info" {
     sat_sc0nl_info:
         const sat_sc0nl_entry;
         const 2;
         const 18;
 },
 Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cc1Ge: // global
           _sc0ng::P64 = R4;
           _sc0nf::P64 = R3;
           _sc0ne::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cc1Gf; else goto cc1Gg;
       cc1Gg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cc1Gi; else goto cc1Gh;
       cc1Gi: // global
           HpAlloc = 72;
           goto cc1Gf;
       cc1Gf: // global
           R4 = _sc0ng::P64;
           R3 = _sc0nf::P64;
           R2 = _sc0ne::P64;
           R1 = Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1Gh: // global
           I64[Hp - 64] = sat_sc0nx_info;
           P64[Hp - 48] = _sc0ne::P64;
           P64[Hp - 40] = _sc0nf::P64;
           P64[Hp - 32] = _sc0ng::P64;
           I64[Hp - 24] = sat_sc0nl_info;
           P64[Hp - 8] = _sc0nf::P64;
           P64[Hp] = _sc0ng::P64;
           R2 = _sc0ne::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Base.:|_closure+2;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$ctraverse_info" {
     Data.Traversable.$fTraversableNonEmpty_$ctraverse_info:
         const Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.907867313 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$csequenceA_closure" {
     Data.Traversable.$fTraversableNonEmpty_$csequenceA_closure:
         const Data.Traversable.$fTraversableNonEmpty_$csequenceA_info;
 },
 Data.Traversable.$fTraversableNonEmpty_$csequenceA_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cc1Hl: // global
           R4 = R3;
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           call Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$csequenceA_info" {
     Data.Traversable.$fTraversableNonEmpty_$csequenceA_info:
         const Data.Traversable.$fTraversableNonEmpty_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.911555354 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$cmapM_closure" {
     Data.Traversable.$fTraversableNonEmpty_$cmapM_closure:
         const Data.Traversable.$fTraversableNonEmpty_$cmapM_info;
 },
 Data.Traversable.$fTraversableNonEmpty_$cmapM_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc1Hz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1HA; else goto cc1HB;
       cc1HA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableNonEmpty_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1HB: // global
           I64[Sp - 24] = block_cc1Hx_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$cmapM_info" {
     Data.Traversable.$fTraversableNonEmpty_$cmapM_info:
         const Data.Traversable.$fTraversableNonEmpty_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1Hx() //  [R1]
         { []
         }
     {offset
       cc1Hx: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Hx_info" {
     block_cc1Hx_info:
         const _cc1Hx;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.917110335 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_$csequence_closure" {
     Data.Traversable.$fTraversableNonEmpty_$csequence_closure:
         const Data.Traversable.$fTraversableNonEmpty_$csequence_info;
 },
 Data.Traversable.$fTraversableNonEmpty_$csequence_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cc1HU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1HV; else goto cc1HW;
       cc1HV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableNonEmpty_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1HW: // global
           I64[Sp - 16] = block_cc1HS_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableNonEmpty_$csequence_info" {
     Data.Traversable.$fTraversableNonEmpty_$csequence_info:
         const Data.Traversable.$fTraversableNonEmpty_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1HS() //  [R1]
         { []
         }
     {offset
       cc1HS: // global
           R4 = P64[Sp + 8];
           R3 = GHC.Base.id_closure+1;
           R2 = R1;
           Sp = Sp + 16;
           call Data.Traversable.$fTraversableNonEmpty_$ctraverse_entry(R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1HS_info" {
     block_cc1HS_info:
         const _cc1HS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.922424267 UTC

[section ""data" . Data.Traversable.$fTraversableNonEmpty_closure" {
     Data.Traversable.$fTraversableNonEmpty_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctorNonEmpty_closure;
         const Data.Foldable.$fFoldableNonEmpty_closure;
         const Data.Traversable.$fTraversableNonEmpty_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableNonEmpty_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableNonEmpty_$cmapM_closure+3;
         const Data.Traversable.$fTraversableNonEmpty_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.925526517 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_$csequenceA_closure" {
     Data.Traversable.$fTraversableMaybe_$csequenceA_closure:
         const Data.Traversable.$fTraversableMaybe_$csequenceA_info;
 },
 Data.Traversable.$fTraversableMaybe_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc1Im: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1In; else goto cc1Io;
       cc1In: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableMaybe_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1Io: // global
           I64[Sp - 16] = block_cc1If_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc1IA; else goto cc1Ig;
       uc1IA: // global
           call _cc1If(R1) args: 0, res: 0, upd: 0;
       cc1Ig: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableMaybe_$csequenceA_info" {
     Data.Traversable.$fTraversableMaybe_$csequenceA_info:
         const Data.Traversable.$fTraversableMaybe_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1If() //  [R1]
         { []
         }
     {offset
       cc1If: // global
           _sc0nG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1Ij; else goto cc1Ik;
       cc1Ij: // global
           R2 = _sc0nG::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cc1Ik: // global
           I64[Sp] = block_cc1Iu_info;
           R2 = _sc0nG::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1If_info" {
     block_cc1If_info:
         const _cc1If;
         const 1;
         const 30;
 },
 _cc1Iu() //  [R1]
         { []
         }
     {offset
       cc1Iu: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Iu_info" {
     block_cc1Iu_info:
         const _cc1Iu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.932854839 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_$cmapM_closure" {
     Data.Traversable.$fTraversableMaybe_$cmapM_closure:
         const Data.Traversable.$fTraversableMaybe_$cmapM_info;
 },
 Data.Traversable.$fTraversableMaybe_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1J4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1J5; else goto cc1J6;
       cc1J5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableMaybe_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1J6: // global
           I64[Sp - 24] = block_cc1J2_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableMaybe_$cmapM_info" {
     Data.Traversable.$fTraversableMaybe_$cmapM_info:
         const Data.Traversable.$fTraversableMaybe_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1J2() //  [R1]
         { []
         }
     {offset
       cc1J2: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1J2_info" {
     block_cc1J2_info:
         const _cc1J2;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.939372883 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_$csequence_closure" {
     Data.Traversable.$fTraversableMaybe_$csequence_closure:
         const Data.Traversable.$fTraversableMaybe_$csequence_info;
 },
 Data.Traversable.$fTraversableMaybe_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1Ju: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1Jv; else goto cc1Jw;
       cc1Jv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableMaybe_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1Jw: // global
           I64[Sp - 16] = block_cc1Jn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc1JS; else goto cc1Jo;
       uc1JS: // global
           call _cc1Jn(R1) args: 0, res: 0, upd: 0;
       cc1Jo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableMaybe_$csequence_info" {
     Data.Traversable.$fTraversableMaybe_$csequence_info:
         const Data.Traversable.$fTraversableMaybe_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1Jn() //  [R1]
         { []
         }
     {offset
       cc1Jn: // global
           _sc0nP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1Jr; else goto cc1Js;
       cc1Jr: // global
           I64[Sp + 8] = block_cc1Jz_info;
           R2 = _sc0nP::P64;
           Sp = Sp + 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
       cc1Js: // global
           I64[Sp] = block_cc1JH_info;
           R2 = _sc0nP::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Jn_info" {
     block_cc1Jn_info:
         const _cc1Jn;
         const 1;
         const 30;
 },
 _cc1Jz() //  [R1]
         { []
         }
     {offset
       cc1Jz: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Jz_info" {
     block_cc1Jz_info:
         const _cc1Jz;
         const 0;
         const 30;
 },
 _cc1JH() //  [R1]
         { []
         }
     {offset
       cc1JH: // global
           I64[Sp] = block_cc1JL_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1JH_info" {
     block_cc1JH_info:
         const _cc1JH;
         const 1;
         const 30;
 },
 _cc1JL() //  [R1]
         { []
         }
     {offset
       cc1JL: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1JL_info" {
     block_cc1JL_info:
         const _cc1JL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.94979579 UTC

[section ""data" . Data.Traversable.$fTraversableMaybe_closure" {
     Data.Traversable.$fTraversableMaybe_closure:
         const Data.Traversable.C:Traversable_con_info;
         const GHC.Base.$fFunctorMaybe_closure;
         const Data.Foldable.$fFoldableMaybe_closure;
         const Data.Traversable.$fTraversableFirst_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableMaybe_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableMaybe_$cmapM_closure+3;
         const Data.Traversable.$fTraversableMaybe_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.951964589 UTC

[section ""data" . Data.Traversable.$fTraversableFirst1_closure" {
     Data.Traversable.$fTraversableFirst1_closure:
         const Data.Traversable.$fTraversableFirst1_info;
 },
 Data.Traversable.$fTraversableFirst1_entry() //  [R2]
         { []
         }
     {offset
       cc1Kt: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst1_info" {
     Data.Traversable.$fTraversableFirst1_info:
         const Data.Traversable.$fTraversableFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.956420856 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$ctraverse_closure" {
     Data.Traversable.$fTraversableLast_$ctraverse_closure:
         const Data.Traversable.$fTraversableLast_$ctraverse_info;
 },
 sat_sc0o1_entry() //  [R1]
         { []
         }
     {offset
       cc1KK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1KL; else goto cc1KM;
       cc1KL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1KM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0o1_info" {
     sat_sc0o1_info:
         const sat_sc0o1_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableLast_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cc1KP: // global
           _sc0nZ::P64 = R4;
           _sc0nY::P64 = R3;
           _sc0nX::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1KQ; else goto cc1KR;
       cc1KR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc1KT; else goto cc1KS;
       cc1KT: // global
           HpAlloc = 40;
           goto cc1KQ;
       cc1KQ: // global
           R4 = _sc0nZ::P64;
           R3 = _sc0nY::P64;
           R2 = _sc0nX::P64;
           R1 = Data.Traversable.$fTraversableLast_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1KS: // global
           I64[Hp - 32] = sat_sc0o1_info;
           P64[Hp - 16] = _sc0nX::P64;
           P64[Hp - 8] = _sc0nY::P64;
           P64[Hp] = _sc0nZ::P64;
           I64[Sp - 16] = block_cc1KN_info;
           R2 = _sc0nX::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$ctraverse_info" {
     Data.Traversable.$fTraversableLast_$ctraverse_info:
         const Data.Traversable.$fTraversableLast_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1KN() //  [R1]
         { []
         }
     {offset
       cc1KN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1KN_info" {
     block_cc1KN_info:
         const _cc1KN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.965698195 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$csequenceA_closure" {
     Data.Traversable.$fTraversableLast_$csequenceA_closure:
         const Data.Traversable.$fTraversableLast_$csequenceA_info;
 },
 sat_sc0o8_entry() //  [R1]
         { []
         }
     {offset
       cc1Lu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1Lv; else goto cc1Lw;
       cc1Lv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1Lw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc1Ln_info;
           _sc0o2::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sc0o2::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc1LI; else goto cc1Lo;
       uc1LI: // global
           call _cc1Ln(R1) args: 0, res: 0, upd: 0;
       cc1Lo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0o8_info" {
     sat_sc0o8_info:
         const sat_sc0o8_entry;
         const 2;
         const 18;
 },
 _cc1Ln() //  [R1]
         { []
         }
     {offset
       cc1Ln: // global
           _sc0o2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1Lr; else goto cc1Ls;
       cc1Lr: // global
           R2 = _sc0o2::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc1Ls: // global
           I64[Sp] = block_cc1LC_info;
           R2 = _sc0o2::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1Ln_info" {
     block_cc1Ln_info:
         const _cc1Ln;
         const 1;
         const 30;
 },
 _cc1LC() //  [R1]
         { []
         }
     {offset
       cc1LC: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1LC_info" {
     block_cc1LC_info:
         const _cc1LC;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableLast_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1LL: // global
           _sc0o3::P64 = R3;
           _sc0o2::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1LM; else goto cc1LN;
       cc1LN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1LP; else goto cc1LO;
       cc1LP: // global
           HpAlloc = 32;
           goto cc1LM;
       cc1LM: // global
           R3 = _sc0o3::P64;
           R2 = _sc0o2::P64;
           R1 = Data.Traversable.$fTraversableLast_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1LO: // global
           I64[Hp - 24] = sat_sc0o8_info;
           P64[Hp - 8] = _sc0o2::P64;
           P64[Hp] = _sc0o3::P64;
           I64[Sp - 16] = block_cc1LJ_info;
           R2 = _sc0o2::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$csequenceA_info" {
     Data.Traversable.$fTraversableLast_$csequenceA_info:
         const Data.Traversable.$fTraversableLast_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1LJ() //  [R1]
         { []
         }
     {offset
       cc1LJ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1LJ_info" {
     block_cc1LJ_info:
         const _cc1LJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.977517799 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$cmapM_closure" {
     Data.Traversable.$fTraversableLast_$cmapM_closure:
         const Data.Traversable.$fTraversableLast_$cmapM_info;
 },
 sat_sc0oe_entry() //  [R1]
         { []
         }
     {offset
       cc1MF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1MG; else goto cc1MH;
       cc1MG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1MH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0oe_info" {
     sat_sc0oe_info:
         const sat_sc0oe_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableLast_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1MI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1MK; else goto cc1ML;
       cc1MK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableLast_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1ML: // global
           I64[Sp - 24] = block_cc1Mx_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$cmapM_info" {
     Data.Traversable.$fTraversableLast_$cmapM_info:
         const Data.Traversable.$fTraversableLast_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1Mx() //  [R1]
         { []
         }
     {offset
       cc1Mx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc1MO; else goto cc1MN;
       cc1MO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1MN: // global
           I64[Hp - 32] = sat_sc0oe_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc1MJ_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Mx_info" {
     block_cc1Mx_info:
         const _cc1Mx;
         const 2;
         const 30;
 },
 _cc1MJ() //  [R1]
         { []
         }
     {offset
       cc1MJ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1MJ_info" {
     block_cc1MJ_info:
         const _cc1MJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.987793445 UTC

[section ""data" . Data.Traversable.$fTraversableLast_$csequence_closure" {
     Data.Traversable.$fTraversableLast_$csequence_closure:
         const Data.Traversable.$fTraversableLast_$csequence_info;
 },
 sat_sc0om_entry() //  [R1]
         { []
         }
     {offset
       cc1NA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1NB; else goto cc1NC;
       cc1NB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1NC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc1Nt_info;
           _sc0oh::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sc0oh::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc1NO; else goto cc1Nu;
       uc1NO: // global
           call _cc1Nt(R1) args: 0, res: 0, upd: 0;
       cc1Nu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0om_info" {
     sat_sc0om_info:
         const sat_sc0om_entry;
         const 2;
         const 18;
 },
 _cc1Nt() //  [R1]
         { []
         }
     {offset
       cc1Nt: // global
           _sc0oh::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1Nx; else goto cc1Ny;
       cc1Nx: // global
           R2 = _sc0oh::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc1Ny: // global
           I64[Sp] = block_cc1NI_info;
           R2 = _sc0oh::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1Nt_info" {
     block_cc1Nt_info:
         const _cc1Nt;
         const 1;
         const 30;
 },
 _cc1NI() //  [R1]
         { []
         }
     {offset
       cc1NI: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1NI_info" {
     block_cc1NI_info:
         const _cc1NI;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableLast_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1NP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1NR; else goto cc1NS;
       cc1NR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableLast_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1NS: // global
           I64[Sp - 16] = block_cc1Nl_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableLast_$csequence_info" {
     Data.Traversable.$fTraversableLast_$csequence_info:
         const Data.Traversable.$fTraversableLast_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1Nl() //  [R1]
         { []
         }
     {offset
       cc1Nl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1NV; else goto cc1NU;
       cc1NV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1NU: // global
           I64[Hp - 24] = sat_sc0om_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp] = block_cc1NQ_info;
           R2 = R1;
           P64[Sp + 8] = Hp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Nl_info" {
     block_cc1Nl_info:
         const _cc1Nl;
         const 1;
         const 30;
 },
 _cc1NQ() //  [R1]
         { []
         }
     {offset
       cc1NQ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1NQ_info" {
     block_cc1NQ_info:
         const _cc1NQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:55.999573046 UTC

[section ""data" . Data.Traversable.$fTraversableLast_closure" {
     Data.Traversable.$fTraversableLast_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Monoid.$fFunctorLast_closure;
         const Data.Foldable.$fFoldableLast_closure;
         const Data.Traversable.$fTraversableLast_$ctraverse_closure+3;
         const Data.Traversable.$fTraversableLast_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableLast_$cmapM_closure+3;
         const Data.Traversable.$fTraversableLast_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.0027107 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$ctraverse1_closure" {
     Data.Traversable.$fTraversableFirst_$ctraverse1_closure:
         const Data.Traversable.$fTraversableFirst_$ctraverse1_info;
 },
 sat_sc0or_entry() //  [R1]
         { []
         }
     {offset
       cc1OO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1OP; else goto cc1OQ;
       cc1OP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1OQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0or_info" {
     sat_sc0or_info:
         const sat_sc0or_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableFirst_$ctraverse1_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cc1OT: // global
           _sc0op::P64 = R4;
           _sc0oo::P64 = R3;
           _sc0on::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1OU; else goto cc1OV;
       cc1OV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc1OX; else goto cc1OW;
       cc1OX: // global
           HpAlloc = 40;
           goto cc1OU;
       cc1OU: // global
           R4 = _sc0op::P64;
           R3 = _sc0oo::P64;
           R2 = _sc0on::P64;
           R1 = Data.Traversable.$fTraversableFirst_$ctraverse1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1OW: // global
           I64[Hp - 32] = sat_sc0or_info;
           P64[Hp - 16] = _sc0on::P64;
           P64[Hp - 8] = _sc0oo::P64;
           P64[Hp] = _sc0op::P64;
           I64[Sp - 16] = block_cc1OR_info;
           R2 = _sc0on::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$ctraverse1_info" {
     Data.Traversable.$fTraversableFirst_$ctraverse1_info:
         const Data.Traversable.$fTraversableFirst_$ctraverse1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1OR() //  [R1]
         { []
         }
     {offset
       cc1OR: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1OR_info" {
     block_cc1OR_info:
         const _cc1OR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.011121033 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$csequenceA_closure" {
     Data.Traversable.$fTraversableFirst_$csequenceA_closure:
         const Data.Traversable.$fTraversableFirst_$csequenceA_info;
 },
 sat_sc0oy_entry() //  [R1]
         { []
         }
     {offset
       cc1Py: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1Pz; else goto cc1PA;
       cc1Pz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1PA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc1Pr_info;
           _sc0os::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sc0os::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc1PM; else goto cc1Ps;
       uc1PM: // global
           call _cc1Pr(R1) args: 0, res: 0, upd: 0;
       cc1Ps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0oy_info" {
     sat_sc0oy_info:
         const sat_sc0oy_entry;
         const 2;
         const 18;
 },
 _cc1Pr() //  [R1]
         { []
         }
     {offset
       cc1Pr: // global
           _sc0os::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1Pv; else goto cc1Pw;
       cc1Pv: // global
           R2 = _sc0os::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc1Pw: // global
           I64[Sp] = block_cc1PG_info;
           R2 = _sc0os::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1Pr_info" {
     block_cc1Pr_info:
         const _cc1Pr;
         const 1;
         const 30;
 },
 _cc1PG() //  [R1]
         { []
         }
     {offset
       cc1PG: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1PG_info" {
     block_cc1PG_info:
         const _cc1PG;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableFirst_$csequenceA_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cc1PP: // global
           _sc0ot::P64 = R3;
           _sc0os::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cc1PQ; else goto cc1PR;
       cc1PR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1PT; else goto cc1PS;
       cc1PT: // global
           HpAlloc = 32;
           goto cc1PQ;
       cc1PQ: // global
           R3 = _sc0ot::P64;
           R2 = _sc0os::P64;
           R1 = Data.Traversable.$fTraversableFirst_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1PS: // global
           I64[Hp - 24] = sat_sc0oy_info;
           P64[Hp - 8] = _sc0os::P64;
           P64[Hp] = _sc0ot::P64;
           I64[Sp - 16] = block_cc1PN_info;
           R2 = _sc0os::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$csequenceA_info" {
     Data.Traversable.$fTraversableFirst_$csequenceA_info:
         const Data.Traversable.$fTraversableFirst_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1PN() //  [R1]
         { []
         }
     {offset
       cc1PN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1PN_info" {
     block_cc1PN_info:
         const _cc1PN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.022817863 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$cmapM_closure" {
     Data.Traversable.$fTraversableFirst_$cmapM_closure:
         const Data.Traversable.$fTraversableFirst_$cmapM_info;
 },
 sat_sc0oE_entry() //  [R1]
         { []
         }
     {offset
       cc1QJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1QK; else goto cc1QL;
       cc1QK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1QL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Data.Traversable.$fTraversableFirst_$ctraverse_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0oE_info" {
     sat_sc0oE_info:
         const sat_sc0oE_entry;
         const 3;
         const 15;
 },
 Data.Traversable.$fTraversableFirst_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1QM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1QO; else goto cc1QP;
       cc1QO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableFirst_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1QP: // global
           I64[Sp - 24] = block_cc1QB_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$cmapM_info" {
     Data.Traversable.$fTraversableFirst_$cmapM_info:
         const Data.Traversable.$fTraversableFirst_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc1QB() //  [R1]
         { []
         }
     {offset
       cc1QB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc1QS; else goto cc1QR;
       cc1QS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1QR: // global
           I64[Hp - 32] = sat_sc0oE_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc1QN_info;
           R2 = R1;
           P64[Sp + 16] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1QB_info" {
     block_cc1QB_info:
         const _cc1QB;
         const 2;
         const 30;
 },
 _cc1QN() //  [R1]
         { []
         }
     {offset
       cc1QN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1QN_info" {
     block_cc1QN_info:
         const _cc1QN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.033586263 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_$csequence_closure" {
     Data.Traversable.$fTraversableFirst_$csequence_closure:
         const Data.Traversable.$fTraversableFirst_$csequence_info;
 },
 sat_sc0oM_entry() //  [R1]
         { []
         }
     {offset
       cc1RE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc1RF; else goto cc1RG;
       cc1RF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1RG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc1Rx_info;
           _sc0oH::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sc0oH::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc1RS; else goto cc1Ry;
       uc1RS: // global
           call _cc1Rx(R1) args: 0, res: 0, upd: 0;
       cc1Ry: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0oM_info" {
     sat_sc0oM_info:
         const sat_sc0oM_entry;
         const 2;
         const 18;
 },
 _cc1Rx() //  [R1]
         { []
         }
     {offset
       cc1Rx: // global
           _sc0oH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc1RB; else goto cc1RC;
       cc1RB: // global
           R2 = _sc0oH::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
       cc1RC: // global
           I64[Sp] = block_cc1RM_info;
           R2 = _sc0oH::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1Rx_info" {
     block_cc1Rx_info:
         const _cc1Rx;
         const 1;
         const 30;
 },
 _cc1RM() //  [R1]
         { []
         }
     {offset
       cc1RM: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1RM_info" {
     block_cc1RM_info:
         const _cc1RM;
         const 1;
         const 30;
 },
 Data.Traversable.$fTraversableFirst_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1RT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc1RV; else goto cc1RW;
       cc1RV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$fTraversableFirst_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1RW: // global
           I64[Sp - 16] = block_cc1Rp_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$fTraversableFirst_$csequence_info" {
     Data.Traversable.$fTraversableFirst_$csequence_info:
         const Data.Traversable.$fTraversableFirst_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc1Rp() //  [R1]
         { []
         }
     {offset
       cc1Rp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1RZ; else goto cc1RY;
       cc1RZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc1RY: // global
           I64[Hp - 24] = sat_sc0oM_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp] = block_cc1RU_info;
           R2 = R1;
           P64[Sp + 8] = Hp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1Rp_info" {
     block_cc1Rp_info:
         const _cc1Rp;
         const 1;
         const 30;
 },
 _cc1RU() //  [R1]
         { []
         }
     {offset
       cc1RU: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Traversable.$fTraversableFirst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc1RU_info" {
     block_cc1RU_info:
         const _cc1RU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.044633146 UTC

[section ""data" . Data.Traversable.$fTraversableFirst_closure" {
     Data.Traversable.$fTraversableFirst_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Monoid.$fFunctorFirst_closure;
         const Data.Foldable.$fFoldableFirst_closure;
         const Data.Traversable.$fTraversableFirst_$ctraverse1_closure+3;
         const Data.Traversable.$fTraversableFirst_$csequenceA_closure+2;
         const Data.Traversable.$fTraversableFirst_$cmapM_closure+3;
         const Data.Traversable.$fTraversableFirst_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.049285441 UTC

[section ""data" . Data.Traversable.$dmtraverse_closure" {
     Data.Traversable.$dmtraverse_closure:
         const Data.Traversable.$dmtraverse_info;
 },
 f1_sc0oQ_entry() //  [R1]
         { []
         }
     {offset
       cc1SS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1ST; else goto cc1SU;
       cc1ST: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1SU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.sequenceA_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sc0oQ_info" {
     f1_sc0oQ_info:
         const f1_sc0oQ_entry;
         const 2;
         const 18;
 },
 g_sc0oR_entry() //  [R1]
         { []
         }
     {offset
       cc1T1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1T2; else goto cc1T3;
       cc1T2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1T3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cc1SZ_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.$p1Traversable_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . g_sc0oR_info" {
     g_sc0oR_info:
         const g_sc0oR_entry;
         const 2;
         const 18;
 },
 _cc1SZ() //  [R1]
         { []
         }
     {offset
       cc1SZ: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc1SZ_info" {
     block_cc1SZ_info:
         const _cc1SZ;
         const 1;
         const 30;
 },
 sat_sc0oV_entry() //  [R1, R2]
         { []
         }
     {offset
       cc1Td: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc1Th; else goto cc1Tg;
       cc1Th: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1Tg: // global
           _sc0oQ::P64 = P64[R1 + 7];
           _sc0oR::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sc0oR::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sc0oQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0oV_info" {
     sat_sc0oV_info:
         const sat_sc0oV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Traversable.$dmtraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc1Ti: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc1Tm; else goto cc1Tl;
       cc1Tm: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.$dmtraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1Tl: // global
           I64[Hp - 80] = f1_sc0oQ_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = g_sc0oR_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sc0oV_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.$dmtraverse_info" {
     Data.Traversable.$dmtraverse_info:
         const Data.Traversable.$dmtraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.061005624 UTC

[section ""data" . Data.Traversable.for_closure" {
     Data.Traversable.for_closure:
         const Data.Traversable.for_info;
 },
 f1_sc0oY_entry() //  [R1]
         { []
         }
     {offset
       cc1U1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1U2; else goto cc1U3;
       cc1U2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1U3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.traverse_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sc0oY_info" {
     f1_sc0oY_info:
         const f1_sc0oY_entry;
         const 2;
         const 18;
 },
 sat_sc0p1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1U9: // global
           _sc0p0::P64 = R3;
           R3 = R2;
           R2 = _sc0p0::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0p1_info" {
     sat_sc0p1_info:
         const sat_sc0p1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.for_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1Uc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc1Ug; else goto cc1Uf;
       cc1Ug: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.for_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1Uf: // global
           I64[Hp - 40] = f1_sc0oY_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sc0p1_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.for_info" {
     Data.Traversable.for_info:
         const Data.Traversable.for_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.068409773 UTC

[section ""data" . Data.Traversable.forM_closure" {
     Data.Traversable.forM_closure:
         const Data.Traversable.forM_info;
 },
 f_sc0p4_entry() //  [R1]
         { []
         }
     {offset
       cc1UH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc1UI; else goto cc1UJ;
       cc1UI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1UJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Traversable.mapM_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sc0p4_info" {
     f_sc0p4_info:
         const f_sc0p4_entry;
         const 2;
         const 18;
 },
 sat_sc0p7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1UP: // global
           _sc0p6::P64 = R3;
           R3 = R2;
           R2 = _sc0p6::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0p7_info" {
     sat_sc0p7_info:
         const sat_sc0p7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.forM_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1US: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc1UW; else goto cc1UV;
       cc1UW: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.forM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1UV: // global
           I64[Hp - 40] = f_sc0p4_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sc0p7_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.forM_info" {
     Data.Traversable.forM_info:
         const Data.Traversable.forM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.076634549 UTC

[section ""data" . Data.Traversable.mapAccumL_closure" {
     Data.Traversable.mapAccumL_closure:
         const Data.Traversable.mapAccumL_info;
         const 0;
 },
 sat_sc0pe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1Vo: // global
           _sc0pd::P64 = R3;
           R3 = R2;
           R2 = _sc0pd::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0pe_info" {
     sat_sc0pe_info:
         const sat_sc0pe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.mapAccumL_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc1Vr: // global
           _sc0pb::P64 = R5;
           _sc0pa::P64 = R4;
           _sc0p9::P64 = R3;
           _sc0p8::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cc1Vs; else goto cc1Vt;
       cc1Vt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc1Vv; else goto cc1Vu;
       cc1Vv: // global
           HpAlloc = 16;
           goto cc1Vs;
       cc1Vs: // global
           R5 = _sc0pb::P64;
           R4 = _sc0pa::P64;
           R3 = _sc0p9::P64;
           R2 = _sc0p8::P64;
           R1 = Data.Traversable.mapAccumL_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1Vu: // global
           I64[Hp - 8] = sat_sc0pe_info;
           P64[Hp] = _sc0p9::P64;
           R2 = _sc0p8::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Functor.Utils.$fApplicativeStateL_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _sc0pb::P64;
           P64[Sp - 8] = _sc0pa::P64;
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.mapAccumL_info" {
     Data.Traversable.mapAccumL_info:
         const Data.Traversable.mapAccumL_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sc0Cf_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.082433405 UTC

[section ""data" . Data.Traversable.mapAccumR_closure" {
     Data.Traversable.mapAccumR_closure:
         const Data.Traversable.mapAccumR_info;
         const 0;
 },
 sat_sc0pl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cc1VR: // global
           _sc0pk::P64 = R3;
           R3 = R2;
           R2 = _sc0pk::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc0pl_info" {
     sat_sc0pl_info:
         const sat_sc0pl_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Traversable.mapAccumR_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc1VU: // global
           _sc0pi::P64 = R5;
           _sc0ph::P64 = R4;
           _sc0pg::P64 = R3;
           _sc0pf::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cc1VV; else goto cc1VW;
       cc1VW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc1VY; else goto cc1VX;
       cc1VY: // global
           HpAlloc = 16;
           goto cc1VV;
       cc1VV: // global
           R5 = _sc0pi::P64;
           R4 = _sc0ph::P64;
           R3 = _sc0pg::P64;
           R2 = _sc0pf::P64;
           R1 = Data.Traversable.mapAccumR_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1VX: // global
           I64[Hp - 8] = sat_sc0pl_info;
           P64[Hp] = _sc0pg::P64;
           R2 = _sc0pf::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Functor.Utils.$fApplicativeStateR_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _sc0pi::P64;
           P64[Sp - 8] = _sc0ph::P64;
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.mapAccumR_info" {
     Data.Traversable.mapAccumR_info:
         const Data.Traversable.mapAccumR_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sc0Cf_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.088603293 UTC

[section ""data" . fmapDefault1_rbWTV_closure" {
     fmapDefault1_rbWTV_closure:
         const fmapDefault1_rbWTV_info;
         const 0;
 },
 fmapDefault1_rbWTV_entry() //  [R2]
         { []
         }
     {offset
       cc1Wf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1Wg; else goto cc1Wh;
       cc1Wg: // global
           R2 = R2;
           R1 = fmapDefault1_rbWTV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc1Wh: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Functor.Identity.$fApplicativeIdentity_closure;
           Sp = Sp - 16;
           call Data.Traversable.traverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . fmapDefault1_rbWTV_info" {
     fmapDefault1_rbWTV_info:
         const fmapDefault1_rbWTV_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc0Cf_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.092039113 UTC

[section ""data" . Data.Traversable.fmapDefault_closure" {
     Data.Traversable.fmapDefault_closure:
         const Data.Traversable.fmapDefault_info;
         const 0;
 },
 Data.Traversable.fmapDefault_entry() //  [R2]
         { []
         }
     {offset
       cc1Wt: // global
           R2 = R2;
           call fmapDefault1_rbWTV_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.fmapDefault_info" {
     Data.Traversable.fmapDefault_info:
         const Data.Traversable.fmapDefault_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc0Cf_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.095959065 UTC

[section ""data" . foldMapDefault1_rbWTW_closure" {
     foldMapDefault1_rbWTW_closure:
         const foldMapDefault1_rbWTW_info;
         const 0;
 },
 sat_sc0pp_entry() //  [R1]
         { []
         }
     {offset
       cc1WI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc1WJ; else goto cc1WK;
       cc1WJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc1WK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fApplicativeConst_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc0pp_info" {
     sat_sc0pp_info:
         const sat_sc0pp_entry;
         const 1;
         const 4294967312;
         const Sc0Cf_srt+232;
 },
 foldMapDefault1_rbWTW_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1WL: // global
           _sc0po::P64 = R3;
           _sc0pn::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cc1WM; else goto cc1WN;
       cc1WN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc1WP; else goto cc1WO;
       cc1WP: // global
           HpAlloc = 24;
           goto cc1WM;
       cc1WM: // global
           R3 = _sc0po::P64;
           R2 = _sc0pn::P64;
           R1 = foldMapDefault1_rbWTW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc1WO: // global
           I64[Hp - 16] = sat_sc0pp_info;
           P64[Hp] = _sc0po::P64;
           R2 = _sc0pn::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Traversable.traverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . foldMapDefault1_rbWTW_info" {
     foldMapDefault1_rbWTW_info:
         const foldMapDefault1_rbWTW_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc0Cf_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.102004928 UTC

[section ""data" . Data.Traversable.foldMapDefault_closure" {
     Data.Traversable.foldMapDefault_closure:
         const Data.Traversable.foldMapDefault_info;
         const 0;
 },
 Data.Traversable.foldMapDefault_entry() //  [R2, R3]
         { []
         }
     {offset
       cc1X7: // global
           R3 = R3;
           R2 = R2;
           call foldMapDefault1_rbWTW_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.foldMapDefault_info" {
     Data.Traversable.foldMapDefault_info:
         const Data.Traversable.foldMapDefault_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Sc0Cf_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.105030848 UTC

[section ""cstring" . Data.Traversable.$trModule4_bytes" {
     Data.Traversable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.106634909 UTC

[section ""data" . Data.Traversable.$trModule3_closure" {
     Data.Traversable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Traversable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.108307618 UTC

[section ""cstring" . Data.Traversable.$trModule2_bytes" {
     Data.Traversable.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.109986801 UTC

[section ""data" . Data.Traversable.$trModule1_closure" {
     Data.Traversable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Traversable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.111724124 UTC

[section ""data" . Data.Traversable.$trModule_closure" {
     Data.Traversable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Traversable.$trModule3_closure+1;
         const Data.Traversable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.113780331 UTC

[section ""data" . $krep_rbWTX_closure" {
     $krep_rbWTX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.115900736 UTC

[section ""data" . Data.Traversable.$tcTraversable1_closure" {
     Data.Traversable.$tcTraversable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_rbWTX_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.11760034 UTC

[section ""cstring" . Data.Traversable.$tcTraversable3_bytes" {
     Data.Traversable.$tcTraversable3_bytes:
         I8[] [84,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.119266231 UTC

[section ""data" . Data.Traversable.$tcTraversable2_closure" {
     Data.Traversable.$tcTraversable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Traversable.$tcTraversable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.120986676 UTC

[section ""data" . Data.Traversable.$tcTraversable_closure" {
     Data.Traversable.$tcTraversable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Traversable.$trModule_closure+1;
         const Data.Traversable.$tcTraversable2_closure+1;
         const Data.Traversable.$tcTraversable1_closure+4;
         const 9002450311536760373;
         const 4172295783860716183;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.123569685 UTC

[section ""data" . Data.Traversable.C:Traversable_closure" {
     Data.Traversable.C:Traversable_closure:
         const Data.Traversable.C:Traversable_info;
 },
 Data.Traversable.C:Traversable_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cc1Xt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc1Xx; else goto cc1Xw;
       cc1Xx: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Traversable.C:Traversable_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cc1Xw: // global
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.C:Traversable_info" {
     Data.Traversable.C:Traversable_info:
         const Data.Traversable.C:Traversable_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.128065169 UTC

[section ""cstring" . ic1XG_str" {
     ic1XG_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,84,114,97,118,101,114,115,97,98,108,101,46,67,58,84,114,97,118,101,114,115,97,98,108,101]
 },
 Data.Traversable.C:Traversable_con_entry() //  [R1]
         { []
         }
     {offset
       cc1XF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Traversable.C:Traversable_con_info" {
     Data.Traversable.C:Traversable_con_info:
         const Data.Traversable.C:Traversable_con_entry;
         const 6;
         const 1;
         const ic1XG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.131212277 UTC

[section ""relreadonly" . Sc0Cf_srt" {
     Sc0Cf_srt:
         const Data.Foldable.$fFoldableRec1_closure;
         const Data.Traversable.$fTraversableRec1_$cp2Traversable_closure;
         const Data.Foldable.$fFoldableM1_closure;
         const Data.Traversable.$fTraversableM1_$cp2Traversable_closure;
         const Data.Foldable.$fFoldable:+:_closure;
         const Data.Traversable.$fTraversable:+:_$cp2Traversable_closure;
         const Data.Foldable.$fFoldable:*:_closure;
         const Data.Traversable.$fTraversable:*:_$cp2Traversable_closure;
         const Data.Foldable.$fFoldable:.:_closure;
         const Data.Traversable.$fTraversable:.:_$cp2Traversable_closure;
         const Data.Traversable.$fTraversable:.:_closure;
         const Data.Traversable.$fTraversable:*:_closure;
         const Data.Traversable.$fTraversable:+:_closure;
         const Data.Traversable.$fTraversableM1_closure;
         const Data.Traversable.$fTraversableRec1_closure;
         const GHC.Arr.listArray_closure;
         const Data.Traversable.$fTraversableArray_$ctraverse_closure;
         const Data.Traversable.$fTraversableArray_$cmapM_closure;
         const Data.Traversable.$fTraversableArray_$csequence_closure;
         const Data.Traversable.$fTraversableArray_$csequenceA_closure;
         const GHC.Arr.$fFunctorArray_closure;
         const Data.Foldable.$fFoldableArray_closure;
         const Data.Traversable.$fTraversableArray_closure;
         const Data.Functor.Utils.$fApplicativeStateL_closure;
         const Data.Traversable.mapAccumL_closure;
         const Data.Functor.Utils.$fApplicativeStateR_closure;
         const Data.Traversable.mapAccumR_closure;
         const Data.Functor.Identity.$fApplicativeIdentity_closure;
         const fmapDefault1_rbWTV_closure;
         const Data.Functor.Const.$fApplicativeConst_closure;
         const foldMapDefault1_rbWTW_closure;
 }]

