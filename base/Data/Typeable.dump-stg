
==================== Pre unarise: ====================
2018-03-16 16:02:40.165745395 UTC

Data.Typeable.typeOf
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7naX ds_s7naY]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7naX;

Data.Typeable.typeRep
  :: forall k (proxy :: k -> *) (a :: k).
     Data.Typeable.Internal.Typeable a =>
     proxy a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Typeable.Internal.someTypeRep eta_B2 eta_B1;

Data.Typeable.cast
  :: forall a b.
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     a -> GHC.Base.Maybe b
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7naZ $dTypeable1_s7nb0 x_s7nb1]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7naZ $dTypeable1_s7nb0
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nb1];
        };

Data.Typeable.eqT1
  :: forall k (a :: k). GHC.Base.Maybe (a Data.Type.Equality.:~: a)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

Data.Typeable.eqT
  :: forall k (a :: k) (b :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nb3 $dTypeable1_s7nb4]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nb3 $dTypeable1_s7nb4
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> Data.Typeable.eqT1;
        };

Data.Typeable.gcast
  :: forall k (a :: k) (b :: k) (c :: k -> *).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     c a -> GHC.Base.Maybe (c b)
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nb6 $dTypeable1_s7nb7 x_s7nb8]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nb6 $dTypeable1_s7nb7
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nb8];
        };

Data.Typeable.gcast1
  :: forall k1 k2 (c :: k2 -> *) (t :: k1 -> k2) (t' :: k1
                                                        -> k2) (a :: k1).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a) -> GHC.Base.Maybe (c (t' a))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nba $dTypeable1_s7nbb x_s7nbc]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nba $dTypeable1_s7nbb
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nbc];
        };

Data.Typeable.gcast2
  :: forall k1 k2 k3 (c :: k3 -> *) (t :: k1 -> k2 -> k3) (t' :: k1
                                                                 -> k2 -> k3) (a :: k1) (b :: k2).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a b) -> GHC.Base.Maybe (c (t' a b))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nbe $dTypeable1_s7nbf x_s7nbg]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nbe $dTypeable1_s7nbf
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nbg];
        };

Data.Typeable.mkFunTy1 :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s7nbj [Occ=Once]
                   ww9_s7nbk [Occ=Once]
                   ww10_s7nbl [Occ=Once]
                   ww11_s7nbm [Occ=Once]
                   ww12_s7nbn [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s7nbp [Occ=Once]
                         ww3_s7nbq [Occ=Once]
                         ww4_s7nbr [Occ=Once]
                         ww5_s7nbs [Occ=Once]
                         ww6_s7nbt [Occ=Once] ->
                    let {
                      sat_s7nbv [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s7nbp
                                                                ww3_s7nbq
                                                                ww4_s7nbr
                                                                ww5_s7nbs
                                                                ww6_s7nbt]; } in
                    let {
                      sat_s7nbu [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s7nbj
                                                                ww9_s7nbk
                                                                ww10_s7nbl
                                                                ww11_s7nbm
                                                                ww12_s7nbn];
                    } in  Data.Typeable.Internal.mkTrApp sat_s7nbu sat_s7nbv;
              };
        };

Data.Typeable.funResultTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> GHC.Base.Maybe Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7nbw ds1_s7nbx]
        case ds_s7nbw of {
          Data.Typeable.Internal.SomeTypeRep f_s7nbz ->
              case ds1_s7nbx of {
                Data.Typeable.Internal.SomeTypeRep x_s7nbB [Occ=Once!] ->
                    let-no-escape {
                      $w$j_s7nbC [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U)>]
                        :: (* Data.Type.Equality.:~~: k_a7mAN)
                           -> GHC.Base.Maybe Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [f_s7nbz x_s7nbB] \r [w_s7nbD]
                              case f_s7nbz of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                             _ [Occ=Dead, Dmd=<L,A>]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds2_s7nbH [Occ=Once!]
                                                             ds3_s7nbI [Occ=Once*] ->
                                    let-no-escape {
                                      $j_s7nbJ [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                        :: GHC.Prim.Word#
                                           -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                          sat-only [x_s7nbB ds3_s7nbI] \r [dt2_s7nbK dt3_s7nbL]
                                              case x_s7nbB of {
                                                Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                 Dmd=<L,A>]
                                                                              _ [Occ=Dead,
                                                                                 Dmd=<L,A>] ->
                                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                      GHC.Fingerprint.Type.Fingerprint dt4_s7nbO [Occ=Once]
                                                                                       dt5_s7nbP [Occ=Once] ->
                                                          case eqWord# [dt2_s7nbK dt4_s7nbO] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case
                                                                    eqWord# [dt3_s7nbL dt5_s7nbP]
                                                                of
                                                                { __DEFAULT -> GHC.Base.Nothing [];
                                                                  1# ->
                                                                      let {
                                                                        sat_s7nbS [Occ=Once]
                                                                          :: Data.Typeable.Internal.SomeTypeRep
                                                                        [LclId] =
                                                                            CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                      } in 
                                                                        GHC.Base.Just [sat_s7nbS];
                                                                };
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrTyCon dt4_s7nbT [Occ=Once]
                                                                               dt5_s7nbU [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7nbK dt4_s7nbT] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7nbL dt5_s7nbU] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7nc0 [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                } in  GHC.Base.Just [sat_s7nc0];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                             dt4_s7nc1 [Occ=Once]
                                                                             dt5_s7nc2 [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7nbK dt4_s7nc1] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7nbL dt5_s7nc2] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7nc8 [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                } in  GHC.Base.Just [sat_s7nc8];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                             _ [Occ=Dead, Dmd=<L,A>]
                                                                             dt4_s7nc9 [Occ=Once]
                                                                             dt5_s7nca [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7nbK dt4_s7nc9] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7nbL dt5_s7nca] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7ncf [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                } in  GHC.Base.Just [sat_s7ncf];
                                                          };
                                                    };
                                              };
                                    } in 
                                      case ds2_s7nbH of {
                                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt2_s7nci [Occ=Once]
                                                                               dt3_s7ncj [Occ=Once] ->
                                                  $j_s7nbJ dt2_s7nci dt3_s7ncj;
                                            };
                                        Data.Typeable.Internal.TrTyCon dt2_s7nck [Occ=Once]
                                                                       dt3_s7ncl [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            $j_s7nbJ dt2_s7nck dt3_s7ncl;
                                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt2_s7ncp [Occ=Once]
                                                                     dt3_s7ncq [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7nbJ dt2_s7ncp dt3_s7ncq;
                                        Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt2_s7ncu [Occ=Once]
                                                                     dt3_s7ncv [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7nbJ dt2_s7ncu dt3_s7ncv;
                                      };
                              };
                    } in 
                      case f_s7nbz of {
                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                            case Data.Typeable.mkFunTy1 of {
                              Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                            _ [Occ=Dead, Dmd=<L,A>] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint _ [Occ=Dead] _ [Occ=Dead] ->
                                        let {
                                          sat_s7ncD [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                          [LclId] =
                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                              GHC.Prim.coercionToken#];
                                        } in  $w$j_s7nbC sat_s7ncD;
                                  };
                              Data.Typeable.Internal.TrTyCon dt_s7ncE [Occ=Once]
                                                             dt1_s7ncF [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7ncK [Occ=Once]
                                                                     dt3_s7ncL [Occ=Once] ->
                                        case eqWord# [dt_s7ncE dt2_s7ncK] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7ncF dt3_s7ncL] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7ncO [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                          GHC.Prim.coercionToken#];
                                                    } in  $w$j_s7nbC sat_s7ncO;
                                              };
                                        };
                                  };
                              Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                           dt_s7ncP [Occ=Once]
                                                           dt1_s7ncQ [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7ncV [Occ=Once]
                                                                     dt3_s7ncW [Occ=Once] ->
                                        case eqWord# [dt_s7ncP dt2_s7ncV] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7ncQ dt3_s7ncW] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7ncZ [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                          GHC.Prim.coercionToken#];
                                                    } in  $w$j_s7nbC sat_s7ncZ;
                                              };
                                        };
                                  };
                            };
                        Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7nd4 [Occ=Once!] ->
                            let-no-escape {
                              $j_s7nd5 [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7nbC ds4_s7nd4] \r [dt2_s7nd6 dt3_s7nd7]
                                      case ds4_s7nd4 of {
                                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7nda [Occ=Once]
                                                                               dt5_s7ndb [Occ=Once] ->
                                                  case eqWord# [dt2_s7nd6 dt4_s7nda] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7nd7 dt5_s7ndb] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7nde [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                                    GHC.Prim.coercionToken#];
                                                              } in  $w$j_s7nbC sat_s7nde;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7ndf [Occ=Once]
                                                                       dt5_s7ndg [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7nd6 dt4_s7ndf] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7nd7 dt5_s7ndg] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ndm [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7nbC sat_s7ndm;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7ndn [Occ=Once]
                                                                     dt5_s7ndo [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7nd6 dt4_s7ndn] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7nd7 dt5_s7ndo] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ndu [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7nbC sat_s7ndu;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7ndv [Occ=Once]
                                                                     dt5_s7ndw [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7nd6 dt4_s7ndv] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7nd7 dt5_s7ndw] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ndB [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7nbC sat_s7ndB;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                              _ [Occ=Dead, Dmd=<L,A>] ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7ndE [Occ=Once]
                                                                       dt3_s7ndF [Occ=Once] ->
                                          $j_s7nd5 dt2_s7ndE dt3_s7ndF;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7ndG [Occ=Once]
                                                               dt3_s7ndH [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7nd5 dt2_s7ndG dt3_s7ndH;
                                Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                             dt2_s7ndL [Occ=Once]
                                                             dt3_s7ndM [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7nd5 dt2_s7ndL dt3_s7ndM;
                              };
                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds4_s7ndU [Occ=Once!] ->
                            let-no-escape {
                              $j_s7ndV [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7nbC ds4_s7ndU] \r [dt2_s7ndW dt3_s7ndX]
                                      case ds4_s7ndU of {
                                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7ne0 [Occ=Once]
                                                                               dt5_s7ne1 [Occ=Once] ->
                                                  case eqWord# [dt2_s7ndW dt4_s7ne0] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7ndX dt5_s7ne1] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7ne4 [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                                    GHC.Prim.coercionToken#];
                                                              } in  $w$j_s7nbC sat_s7ne4;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7ne5 [Occ=Once]
                                                                       dt5_s7ne6 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ndW dt4_s7ne5] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7ndX dt5_s7ne6] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7nec [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7nbC sat_s7nec;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7ned [Occ=Once]
                                                                     dt5_s7nee [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ndW dt4_s7ned] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7ndX dt5_s7nee] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7nek [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7nbC sat_s7nek;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7nel [Occ=Once]
                                                                     dt5_s7nem [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ndW dt4_s7nel] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7ndX dt5_s7nem] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ner [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7nbC sat_s7ner;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                              _ [Occ=Dead, Dmd=<L,A>] ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7neu [Occ=Once]
                                                                       dt3_s7nev [Occ=Once] ->
                                          $j_s7ndV dt2_s7neu dt3_s7nev;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7new [Occ=Once]
                                                               dt3_s7nex [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7ndV dt2_s7new dt3_s7nex;
                                Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                             dt2_s7neB [Occ=Once]
                                                             dt3_s7neC [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7ndV dt2_s7neB dt3_s7neC;
                              };
                        Data.Typeable.Internal.TrFun co_a78FW
                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead] ->
                            case
                                Data.Typeable.Internal.sameTypeRep
                                    Data.Typeable.mkFunTy1 Data.Typeable.Internal.$mApp1
                            of
                            { GHC.Types.False -> GHC.Base.Nothing [];
                              GHC.Types.True ->
                                  let {
                                    sat_s7neL [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                    [LclId] =
                                        CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                        GHC.Prim.coercionToken#];
                                  } in  $w$j_s7nbC sat_s7neL;
                            };
                      };
              };
        };

Data.Typeable.mkFunTy16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

Data.Typeable.mkFunTy15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy16;

Data.Typeable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Typeable.mkFunTy14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule4;

Data.Typeable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Typeable"#;

Data.Typeable.mkFunTy13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule2;

Data.Typeable.mkFunTy12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Data/Typeable.hs"#;

Data.Typeable.mkFunTy11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy12;

Data.Typeable.mkFunTy10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [171#];

Data.Typeable.mkFunTy9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

Data.Typeable.mkFunTy8 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [172#];

Data.Typeable.mkFunTy7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [55#];

Data.Typeable.mkFunTy6 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [Data.Typeable.mkFunTy14
                                           Data.Typeable.mkFunTy13
                                           Data.Typeable.mkFunTy11
                                           Data.Typeable.mkFunTy10
                                           Data.Typeable.mkFunTy9
                                           Data.Typeable.mkFunTy8
                                           Data.Typeable.mkFunTy7];

Data.Typeable.mkFunTy5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [Data.Typeable.mkFunTy15
                                                  Data.Typeable.mkFunTy6
                                                  GHC.Stack.Types.EmptyCallStack];

Data.Typeable.mkFunTy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkFunTy: Attempted to construct function type from non-lifted "#;

Data.Typeable.mkFunTy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type: arg="#;

Data.Typeable.mkFunTy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", res="#;

Data.Typeable.mkFunTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7neM ds1_s7neN]
        case ds_s7neM of {
          Data.Typeable.Internal.SomeTypeRep arg_s7neP ->
              case ds1_s7neN of {
                Data.Typeable.Internal.SomeTypeRep res_s7neR ->
                    let-no-escape {
                      fail_s7neS [Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<B,A>x, Unf=OtherCon []] =
                          sat-only [arg_s7neP res_s7neR] \r [ds2_s7neT]
                              let {
                                sat_s7neY [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [arg_s7neP res_s7neR] \u []
                                        let {
                                          sat_s7neX [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [arg_s7neP res_s7neR] \u []
                                                  let {
                                                    sat_s7neW [Occ=Once, Dmd=<L,1*U>]
                                                      :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [res_s7neR] \s []
                                                            let {
                                                              sat_s7neV [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [res_s7neR] \u []
                                                                      Data.Typeable.Internal.showTypeable
                                                                          Data.Typeable.Internal.$fShowSomeTypeRep2
                                                                          res_s7neR
                                                                          GHC.Types.[];
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  Data.Typeable.mkFunTy2 sat_s7neV;
                                                  } in 
                                                    case
                                                        Data.Typeable.Internal.showTypeable
                                                            Data.Typeable.Internal.$fShowSomeTypeRep2
                                                            arg_s7neP
                                                            GHC.Types.[]
                                                    of
                                                    sat_s7neU
                                                    { __DEFAULT -> GHC.Base.++ sat_s7neU sat_s7neW;
                                                    };
                                        } in 
                                          GHC.CString.unpackAppendCString#
                                              Data.Typeable.mkFunTy3 sat_s7neX;
                              } in 
                                case
                                    GHC.CString.unpackAppendCString#
                                        Data.Typeable.mkFunTy4 sat_s7neY
                                of
                                sat_s7neZ
                                { __DEFAULT -> GHC.Err.error Data.Typeable.mkFunTy5 sat_s7neZ;
                                };
                    } in 
                      let-no-escape {
                        $w$j_s7nf0 [InlPrag=NOUSERINLINE[0],
                                    Occ=Once*!T[2],
                                    Dmd=<C(C(S)),1*C1(C1(U))>]
                          :: ((* :: *) GHC.Prim.~# (* :: *),
                              (* :: *) GHC.Prim.~# (k_a7mzz :: *)) =>
                             Data.Typeable.TypeRep
                        [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                            sat-only [arg_s7neP res_s7neR fail_s7neS] \r [ww_s7n2T ww1_s7n2U]
                                let-no-escape {
                                  $w$j1_s7nf1 [InlPrag=NOUSERINLINE[0],
                                               Occ=Once*!T[2],
                                               Dmd=<C(C(S)),1*C1(C1(U))>]
                                    :: ((* :: *) GHC.Prim.~# (* :: *),
                                        (* :: *) GHC.Prim.~# (k1_a7mzB :: *)) =>
                                       Data.Typeable.TypeRep
                                  [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                                      sat-only [arg_s7neP res_s7neR] \r [ww2_s7n2M ww3_s7n2N]
                                          let {
                                            sat_s7nfx [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [res_s7neR] \u []
                                                    case res_s7neR of {
                                                      Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                       Dmd=<L,A>]
                                                                                    _ [Occ=Dead,
                                                                                       Dmd=<L,A>] ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7nfj [Occ=Once]
                                                                                     dt1_s7nfk [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nfj
                                                                                            dt1_s7nfk];
                                                      Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7nfo [Occ=Once]
                                                                                   dt1_s7nfp [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nfo
                                                                                            dt1_s7nfp];
                                                      Data.Typeable.Internal.TrFun _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7nft [Occ=Once]
                                                                                   dt1_s7nfu [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nft
                                                                                            dt1_s7nfu];
                                                    }; } in
                                          let {
                                            sat_s7nfy [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7nfx GHC.Types.[]]; } in
                                          let {
                                            sat_s7nfh [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [arg_s7neP] \u []
                                                    case arg_s7neP of {
                                                      Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                       Dmd=<L,A>]
                                                                                    _ [Occ=Dead,
                                                                                       Dmd=<L,A>] ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7nf3 [Occ=Once]
                                                                                     dt1_s7nf4 [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nf3
                                                                                            dt1_s7nf4];
                                                      Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7nf8 [Occ=Once]
                                                                                   dt1_s7nf9 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nf8
                                                                                            dt1_s7nf9];
                                                      Data.Typeable.Internal.TrFun _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7nfd [Occ=Once]
                                                                                   dt1_s7nfe [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nfd
                                                                                            dt1_s7nfe];
                                                    }; } in
                                          let {
                                            sat_s7nfz [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7nfh sat_s7nfy];
                                          } in 
                                            case
                                                GHC.Fingerprint.fingerprintFingerprints sat_s7nfz
                                            of
                                            { GHC.Fingerprint.Type.Fingerprint dt1_s7nfB [Occ=Once]
                                                                               dt2_s7nfC [Occ=Once] ->
                                                  let {
                                                    sat_s7nfD [Occ=Once]
                                                      :: Data.Typeable.Internal.TypeRep
                                                           ((a_a7mzA |> Sym ww1_s7n2U)
                                                            -> (a1_a7mzC |> Sym ww3_s7n2N))
                                                    [LclId] =
                                                        CCCS Data.Typeable.Internal.TrFun! [GHC.Prim.coercionToken#
                                                                                            GHC.Prim.coercionToken#
                                                                                            dt1_s7nfB
                                                                                            dt2_s7nfC
                                                                                            arg_s7neP
                                                                                            res_s7neR];
                                                  } in 
                                                    Data.Typeable.Internal.SomeTypeRep [sat_s7nfD];
                                            };
                                } in 
                                  case res_s7neR of {
                                    Data.Typeable.Internal.TrType co_a78FJ
                                                                  _ [Occ=Dead, Dmd=<L,A>] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$WTrType
                                                Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   ds4_s7nfK [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7nfK Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds4_s7nfQ [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7nfQ Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrFun co_a78FW
                                                                 _ [Occ=Dead, Dmd=<L,A>]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                  };
                      } in 
                        case arg_s7neP of {
                          Data.Typeable.Internal.TrType co_a78FJ _ [Occ=Dead, Dmd=<L,A>] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$WTrType Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         ds4_s7ng3 [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ng3 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7ng9 [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ng9 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrFun co_a78FW
                                                       _ [Occ=Dead, Dmd=<L,A>]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                        };
              };
        };

Data.Typeable.splitTyConApp
  :: Data.Typeable.TypeRep
     -> (GHC.Types.TyCon, [Data.Typeable.TypeRep])
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7ngg]
        case ds_s7ngg of {
          Data.Typeable.Internal.SomeTypeRep x_s7ngi [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ngi of {
                (#,#) ww1_s7ngk [Occ=Once] ww2_s7ngl [Occ=Once] ->
                    (,) [ww1_s7ngk ww2_s7ngl];
              };
        };

Data.Typeable.typeRepArgs
  :: Data.Typeable.TypeRep -> [Data.Typeable.TypeRep]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ty_s7ngm]
        case ty_s7ngm of {
          Data.Typeable.Internal.SomeTypeRep x_s7ngo [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ngo of {
                (#,#) _ [Occ=Dead] ww2_s7ngr [Occ=Once] -> ww2_s7ngr;
              };
        };

Data.Typeable.typeRepTyCon
  :: Data.Typeable.TypeRep -> GHC.Types.TyCon
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.someTypeRepTyCon eta_B1;

Data.Typeable.typeRepFingerprint
  :: Data.Typeable.TypeRep -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Typeable.Internal.someTypeRepFingerprint eta_B1;

Data.Typeable.rnfTypeRep :: Data.Typeable.TypeRep -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.rnfSomeTypeRep eta_B1;

Data.Typeable.typeOf1
  :: forall (t :: * -> *) a.
     Data.Typeable.Internal.Typeable t =>
     t a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngs ds_s7ngt]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngs;

Data.Typeable.typeOf2
  :: forall (t :: * -> * -> *) a b.
     Data.Typeable.Internal.Typeable t =>
     t a b -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngu ds_s7ngv]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngu;

Data.Typeable.typeOf3
  :: forall (t :: * -> * -> * -> *) a b c.
     Data.Typeable.Internal.Typeable t =>
     t a b c -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngw ds_s7ngx]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngw;

Data.Typeable.typeOf4
  :: forall (t :: * -> * -> * -> * -> *) a b c d.
     Data.Typeable.Internal.Typeable t =>
     t a b c d -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngy ds_s7ngz]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngy;

Data.Typeable.typeOf5
  :: forall (t :: * -> * -> * -> * -> * -> *) a b c d e.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngA ds_s7ngB]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngA;

Data.Typeable.typeOf6
  :: forall (t :: * -> * -> * -> * -> * -> * -> *) a b c d e f.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngC ds_s7ngD]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngC;

Data.Typeable.typeOf7
  :: forall (t :: *
                  -> * -> * -> * -> * -> * -> * -> *) a b c d e f g.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f g -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngE ds_s7ngF]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngE;

Data.Typeable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule4];

Data.Typeable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule2];

Data.Typeable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Typeable.$trModule3
                                     Data.Typeable.$trModule1];

Data.Typeable.showsTypeRep
  :: Data.Typeable.TypeRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ngG]
        case ds_s7ngG of {
          Data.Typeable.Internal.SomeTypeRep ty_s7ngI [Occ=Once] ->
              Data.Typeable.Internal.showTypeable GHC.Show.$fShow(,)1 ty_s7ngI;
        };


==================== STG syntax: ====================
2018-03-16 16:02:40.183323397 UTC

Data.Typeable.typeOf
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7naX ds_s7naY]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7naX;

Data.Typeable.typeRep
  :: forall k (proxy :: k -> *) (a :: k).
     Data.Typeable.Internal.Typeable a =>
     proxy a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Typeable.Internal.someTypeRep eta_B2 eta_B1;

Data.Typeable.cast
  :: forall a b.
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     a -> GHC.Base.Maybe b
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7naZ $dTypeable1_s7nb0 x_s7nb1]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7naZ $dTypeable1_s7nb0
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nb1];
        };

Data.Typeable.eqT1
  :: forall k (a :: k). GHC.Base.Maybe (a Data.Type.Equality.:~: a)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

Data.Typeable.eqT
  :: forall k (a :: k) (b :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nb3 $dTypeable1_s7nb4]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nb3 $dTypeable1_s7nb4
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> Data.Typeable.eqT1;
        };

Data.Typeable.gcast
  :: forall k (a :: k) (b :: k) (c :: k -> *).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     c a -> GHC.Base.Maybe (c b)
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nb6 $dTypeable1_s7nb7 x_s7nb8]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nb6 $dTypeable1_s7nb7
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nb8];
        };

Data.Typeable.gcast1
  :: forall k1 k2 (c :: k2 -> *) (t :: k1 -> k2) (t' :: k1
                                                        -> k2) (a :: k1).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a) -> GHC.Base.Maybe (c (t' a))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nba $dTypeable1_s7nbb x_s7nbc]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nba $dTypeable1_s7nbb
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nbc];
        };

Data.Typeable.gcast2
  :: forall k1 k2 k3 (c :: k3 -> *) (t :: k1 -> k2 -> k3) (t' :: k1
                                                                 -> k2 -> k3) (a :: k1) (b :: k2).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a b) -> GHC.Base.Maybe (c (t' a b))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7nbe $dTypeable1_s7nbf x_s7nbg]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7nbe $dTypeable1_s7nbf
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7nbg];
        };

Data.Typeable.mkFunTy1 :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s7nbj [Occ=Once]
                   ww9_s7nbk [Occ=Once]
                   ww10_s7nbl [Occ=Once]
                   ww11_s7nbm [Occ=Once]
                   ww12_s7nbn [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s7nbp [Occ=Once]
                         ww3_s7nbq [Occ=Once]
                         ww4_s7nbr [Occ=Once]
                         ww5_s7nbs [Occ=Once]
                         ww6_s7nbt [Occ=Once] ->
                    let {
                      sat_s7nbv [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s7nbp
                                                                ww3_s7nbq
                                                                ww4_s7nbr
                                                                ww5_s7nbs
                                                                ww6_s7nbt]; } in
                    let {
                      sat_s7nbu [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s7nbj
                                                                ww9_s7nbk
                                                                ww10_s7nbl
                                                                ww11_s7nbm
                                                                ww12_s7nbn];
                    } in  Data.Typeable.Internal.mkTrApp sat_s7nbu sat_s7nbv;
              };
        };

Data.Typeable.funResultTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> GHC.Base.Maybe Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7nbw ds1_s7nbx]
        case ds_s7nbw of {
          Data.Typeable.Internal.SomeTypeRep f_s7nbz ->
              case ds1_s7nbx of {
                Data.Typeable.Internal.SomeTypeRep x_s7nbB [Occ=Once!] ->
                    let-no-escape {
                      $w$j_s7nbC [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U)>]
                        :: (* Data.Type.Equality.:~~: k_a7mAN)
                           -> GHC.Base.Maybe Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [f_s7nbz x_s7nbB] \r [w_s7nbD]
                              case f_s7nbz of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds2_s7nbH [Occ=Once!]
                                                             ds3_s7nbI [Occ=Once*] ->
                                    let-no-escape {
                                      $j_s7nbJ [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                        :: GHC.Prim.Word#
                                           -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                          sat-only [x_s7nbB ds3_s7nbI] \r [dt2_s7nbK dt3_s7nbL]
                                              case x_s7nbB of {
                                                Data.Typeable.Internal.TrType ->
                                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                      GHC.Fingerprint.Type.Fingerprint dt4_s7nbO [Occ=Once]
                                                                                       dt5_s7nbP [Occ=Once] ->
                                                          case eqWord# [dt2_s7nbK dt4_s7nbO] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case
                                                                    eqWord# [dt3_s7nbL dt5_s7nbP]
                                                                of
                                                                { __DEFAULT -> GHC.Base.Nothing [];
                                                                  1# ->
                                                                      let {
                                                                        sat_s7nbS [Occ=Once]
                                                                          :: Data.Typeable.Internal.SomeTypeRep
                                                                        [LclId] =
                                                                            CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                      } in 
                                                                        GHC.Base.Just [sat_s7nbS];
                                                                };
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrTyCon dt4_s7nbT [Occ=Once]
                                                                               dt5_s7nbU [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7nbK dt4_s7nbT] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7nbL dt5_s7nbU] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7nc0 [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                } in  GHC.Base.Just [sat_s7nc0];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrApp dt4_s7nc1 [Occ=Once]
                                                                             dt5_s7nc2 [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7nbK dt4_s7nc1] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7nbL dt5_s7nc2] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7nc8 [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                } in  GHC.Base.Just [sat_s7nc8];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrFun dt4_s7nc9 [Occ=Once]
                                                                             dt5_s7nca [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7nbK dt4_s7nc9] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7nbL dt5_s7nca] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7ncf [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7nbI];
                                                                } in  GHC.Base.Just [sat_s7ncf];
                                                          };
                                                    };
                                              };
                                    } in 
                                      case ds2_s7nbH of {
                                        Data.Typeable.Internal.TrType ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt2_s7nci [Occ=Once]
                                                                               dt3_s7ncj [Occ=Once] ->
                                                  $j_s7nbJ dt2_s7nci dt3_s7ncj;
                                            };
                                        Data.Typeable.Internal.TrTyCon dt2_s7nck [Occ=Once]
                                                                       dt3_s7ncl [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            $j_s7nbJ dt2_s7nck dt3_s7ncl;
                                        Data.Typeable.Internal.TrApp dt2_s7ncp [Occ=Once]
                                                                     dt3_s7ncq [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7nbJ dt2_s7ncp dt3_s7ncq;
                                        Data.Typeable.Internal.TrFun dt2_s7ncu [Occ=Once]
                                                                     dt3_s7ncv [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7nbJ dt2_s7ncu dt3_s7ncv;
                                      };
                              };
                    } in 
                      case f_s7nbz of {
                        Data.Typeable.Internal.TrType ->
                            case Data.Typeable.mkFunTy1 of {
                              Data.Typeable.Internal.TrType ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint _ [Occ=Dead] _ [Occ=Dead] ->
                                        let {
                                          sat_s7ncD [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                          [LclId] =
                                              CCCS Data.Type.Equality.HRefl! [];
                                        } in  $w$j_s7nbC sat_s7ncD;
                                  };
                              Data.Typeable.Internal.TrTyCon dt_s7ncE [Occ=Once]
                                                             dt1_s7ncF [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7ncK [Occ=Once]
                                                                     dt3_s7ncL [Occ=Once] ->
                                        case eqWord# [dt_s7ncE dt2_s7ncK] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7ncF dt3_s7ncL] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7ncO [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [];
                                                    } in  $w$j_s7nbC sat_s7ncO;
                                              };
                                        };
                                  };
                              Data.Typeable.Internal.TrApp dt_s7ncP [Occ=Once]
                                                           dt1_s7ncQ [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7ncV [Occ=Once]
                                                                     dt3_s7ncW [Occ=Once] ->
                                        case eqWord# [dt_s7ncP dt2_s7ncV] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7ncQ dt3_s7ncW] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7ncZ [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [];
                                                    } in  $w$j_s7nbC sat_s7ncZ;
                                              };
                                        };
                                  };
                            };
                        Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7nd4 [Occ=Once!] ->
                            let-no-escape {
                              $j_s7nd5 [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7nbC ds4_s7nd4] \r [dt2_s7nd6 dt3_s7nd7]
                                      case ds4_s7nd4 of {
                                        Data.Typeable.Internal.TrType ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7nda [Occ=Once]
                                                                               dt5_s7ndb [Occ=Once] ->
                                                  case eqWord# [dt2_s7nd6 dt4_s7nda] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7nd7 dt5_s7ndb] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7nde [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [];
                                                              } in  $w$j_s7nbC sat_s7nde;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7ndf [Occ=Once]
                                                                       dt5_s7ndg [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7nd6 dt4_s7ndf] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7nd7 dt5_s7ndg] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ndm [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7nbC sat_s7ndm;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp dt4_s7ndn [Occ=Once]
                                                                     dt5_s7ndo [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7nd6 dt4_s7ndn] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7nd7 dt5_s7ndo] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ndu [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7nbC sat_s7ndu;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun dt4_s7ndv [Occ=Once]
                                                                     dt5_s7ndw [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7nd6 dt4_s7ndv] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7nd7 dt5_s7ndw] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ndB [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7nbC sat_s7ndB;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7ndE [Occ=Once]
                                                                       dt3_s7ndF [Occ=Once] ->
                                          $j_s7nd5 dt2_s7ndE dt3_s7ndF;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7ndG [Occ=Once]
                                                               dt3_s7ndH [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7nd5 dt2_s7ndG dt3_s7ndH;
                                Data.Typeable.Internal.TrApp dt2_s7ndL [Occ=Once]
                                                             dt3_s7ndM [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7nd5 dt2_s7ndL dt3_s7ndM;
                              };
                        Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds4_s7ndU [Occ=Once!] ->
                            let-no-escape {
                              $j_s7ndV [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7nbC ds4_s7ndU] \r [dt2_s7ndW dt3_s7ndX]
                                      case ds4_s7ndU of {
                                        Data.Typeable.Internal.TrType ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7ne0 [Occ=Once]
                                                                               dt5_s7ne1 [Occ=Once] ->
                                                  case eqWord# [dt2_s7ndW dt4_s7ne0] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7ndX dt5_s7ne1] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7ne4 [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [];
                                                              } in  $w$j_s7nbC sat_s7ne4;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7ne5 [Occ=Once]
                                                                       dt5_s7ne6 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ndW dt4_s7ne5] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7ndX dt5_s7ne6] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7nec [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7nbC sat_s7nec;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp dt4_s7ned [Occ=Once]
                                                                     dt5_s7nee [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ndW dt4_s7ned] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7ndX dt5_s7nee] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7nek [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7nbC sat_s7nek;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun dt4_s7nel [Occ=Once]
                                                                     dt5_s7nem [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ndW dt4_s7nel] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7ndX dt5_s7nem] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7ner [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7nbC sat_s7ner;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7neu [Occ=Once]
                                                                       dt3_s7nev [Occ=Once] ->
                                          $j_s7ndV dt2_s7neu dt3_s7nev;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7new [Occ=Once]
                                                               dt3_s7nex [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7ndV dt2_s7new dt3_s7nex;
                                Data.Typeable.Internal.TrApp dt2_s7neB [Occ=Once]
                                                             dt3_s7neC [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7ndV dt2_s7neB dt3_s7neC;
                              };
                        Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead] ->
                            case
                                Data.Typeable.Internal.sameTypeRep
                                    Data.Typeable.mkFunTy1 Data.Typeable.Internal.$mApp1
                            of
                            { GHC.Types.False -> GHC.Base.Nothing [];
                              GHC.Types.True ->
                                  let {
                                    sat_s7neL [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                    [LclId] =
                                        CCCS Data.Type.Equality.HRefl! [];
                                  } in  $w$j_s7nbC sat_s7neL;
                            };
                      };
              };
        };

Data.Typeable.mkFunTy16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

Data.Typeable.mkFunTy15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy16;

Data.Typeable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Typeable.mkFunTy14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule4;

Data.Typeable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Typeable"#;

Data.Typeable.mkFunTy13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule2;

Data.Typeable.mkFunTy12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Data/Typeable.hs"#;

Data.Typeable.mkFunTy11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy12;

Data.Typeable.mkFunTy10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [171#];

Data.Typeable.mkFunTy9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

Data.Typeable.mkFunTy8 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [172#];

Data.Typeable.mkFunTy7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [55#];

Data.Typeable.mkFunTy6 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [Data.Typeable.mkFunTy14
                                           Data.Typeable.mkFunTy13
                                           Data.Typeable.mkFunTy11
                                           Data.Typeable.mkFunTy10
                                           Data.Typeable.mkFunTy9
                                           Data.Typeable.mkFunTy8
                                           Data.Typeable.mkFunTy7];

Data.Typeable.mkFunTy5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [Data.Typeable.mkFunTy15
                                                  Data.Typeable.mkFunTy6
                                                  GHC.Stack.Types.EmptyCallStack];

Data.Typeable.mkFunTy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkFunTy: Attempted to construct function type from non-lifted "#;

Data.Typeable.mkFunTy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type: arg="#;

Data.Typeable.mkFunTy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", res="#;

Data.Typeable.mkFunTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7neM ds1_s7neN]
        case ds_s7neM of {
          Data.Typeable.Internal.SomeTypeRep arg_s7neP ->
              case ds1_s7neN of {
                Data.Typeable.Internal.SomeTypeRep res_s7neR ->
                    let-no-escape {
                      fail_s7neS [Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<B,A>x, Unf=OtherCon []] =
                          sat-only [arg_s7neP res_s7neR] \r [void_0E]
                              let {
                                sat_s7neY [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [arg_s7neP res_s7neR] \u []
                                        let {
                                          sat_s7neX [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [arg_s7neP res_s7neR] \u []
                                                  let {
                                                    sat_s7neW [Occ=Once, Dmd=<L,1*U>]
                                                      :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [res_s7neR] \s []
                                                            let {
                                                              sat_s7neV [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [res_s7neR] \u []
                                                                      Data.Typeable.Internal.showTypeable
                                                                          Data.Typeable.Internal.$fShowSomeTypeRep2
                                                                          res_s7neR
                                                                          GHC.Types.[];
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  Data.Typeable.mkFunTy2 sat_s7neV;
                                                  } in 
                                                    case
                                                        Data.Typeable.Internal.showTypeable
                                                            Data.Typeable.Internal.$fShowSomeTypeRep2
                                                            arg_s7neP
                                                            GHC.Types.[]
                                                    of
                                                    sat_s7neU
                                                    { __DEFAULT -> GHC.Base.++ sat_s7neU sat_s7neW;
                                                    };
                                        } in 
                                          GHC.CString.unpackAppendCString#
                                              Data.Typeable.mkFunTy3 sat_s7neX;
                              } in 
                                case
                                    GHC.CString.unpackAppendCString#
                                        Data.Typeable.mkFunTy4 sat_s7neY
                                of
                                sat_s7neZ
                                { __DEFAULT -> GHC.Err.error Data.Typeable.mkFunTy5 sat_s7neZ;
                                };
                    } in 
                      let-no-escape {
                        $w$j_s7nf0 [InlPrag=NOUSERINLINE[0],
                                    Occ=Once*!T[2],
                                    Dmd=<C(C(S)),1*C1(C1(U))>]
                          :: ((* :: *) GHC.Prim.~# (* :: *),
                              (* :: *) GHC.Prim.~# (k_a7mzz :: *)) =>
                             Data.Typeable.TypeRep
                        [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                            sat-only [arg_s7neP res_s7neR fail_s7neS] \r [void_0E void_0E]
                                let-no-escape {
                                  $w$j1_s7nf1 [InlPrag=NOUSERINLINE[0],
                                               Occ=Once*!T[2],
                                               Dmd=<C(C(S)),1*C1(C1(U))>]
                                    :: ((* :: *) GHC.Prim.~# (* :: *),
                                        (* :: *) GHC.Prim.~# (k1_a7mzB :: *)) =>
                                       Data.Typeable.TypeRep
                                  [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                                      sat-only [arg_s7neP res_s7neR] \r [void_0E void_0E]
                                          let {
                                            sat_s7nfx [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [res_s7neR] \u []
                                                    case res_s7neR of {
                                                      Data.Typeable.Internal.TrType ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7nfj [Occ=Once]
                                                                                     dt1_s7nfk [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nfj
                                                                                            dt1_s7nfk];
                                                      Data.Typeable.Internal.TrApp dt_s7nfo [Occ=Once]
                                                                                   dt1_s7nfp [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nfo
                                                                                            dt1_s7nfp];
                                                      Data.Typeable.Internal.TrFun dt_s7nft [Occ=Once]
                                                                                   dt1_s7nfu [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nft
                                                                                            dt1_s7nfu];
                                                    }; } in
                                          let {
                                            sat_s7nfy [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7nfx GHC.Types.[]]; } in
                                          let {
                                            sat_s7nfh [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [arg_s7neP] \u []
                                                    case arg_s7neP of {
                                                      Data.Typeable.Internal.TrType ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7nf3 [Occ=Once]
                                                                                     dt1_s7nf4 [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nf3
                                                                                            dt1_s7nf4];
                                                      Data.Typeable.Internal.TrApp dt_s7nf8 [Occ=Once]
                                                                                   dt1_s7nf9 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nf8
                                                                                            dt1_s7nf9];
                                                      Data.Typeable.Internal.TrFun dt_s7nfd [Occ=Once]
                                                                                   dt1_s7nfe [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7nfd
                                                                                            dt1_s7nfe];
                                                    }; } in
                                          let {
                                            sat_s7nfz [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7nfh sat_s7nfy];
                                          } in 
                                            case
                                                GHC.Fingerprint.fingerprintFingerprints sat_s7nfz
                                            of
                                            { GHC.Fingerprint.Type.Fingerprint dt1_s7nfB [Occ=Once]
                                                                               dt2_s7nfC [Occ=Once] ->
                                                  let {
                                                    sat_s7nfD [Occ=Once]
                                                      :: Data.Typeable.Internal.TypeRep
                                                           ((a_a7mzA |> Sym ww1_s7n2U)
                                                            -> (a1_a7mzC |> Sym ww3_s7n2N))
                                                    [LclId] =
                                                        CCCS Data.Typeable.Internal.TrFun! [dt1_s7nfB
                                                                                            dt2_s7nfC
                                                                                            arg_s7neP
                                                                                            res_s7neR];
                                                  } in 
                                                    Data.Typeable.Internal.SomeTypeRep [sat_s7nfD];
                                            };
                                } in 
                                  case res_s7neR of {
                                    Data.Typeable.Internal.TrType ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$WTrType
                                                Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   ds4_s7nfK [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7nfK Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds4_s7nfQ [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7nfQ Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7nf1
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                  };
                      } in 
                        case arg_s7neP of {
                          Data.Typeable.Internal.TrType ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$WTrType Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         ds4_s7ng3 [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ng3 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7ng9 [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ng9 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7neS GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7nf0 GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                        };
              };
        };

Data.Typeable.splitTyConApp
  :: Data.Typeable.TypeRep
     -> (GHC.Types.TyCon, [Data.Typeable.TypeRep])
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7ngg]
        case ds_s7ngg of {
          Data.Typeable.Internal.SomeTypeRep x_s7ngi [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ngi of {
                (#,#) ww1_s7ngk [Occ=Once] ww2_s7ngl [Occ=Once] ->
                    (,) [ww1_s7ngk ww2_s7ngl];
              };
        };

Data.Typeable.typeRepArgs
  :: Data.Typeable.TypeRep -> [Data.Typeable.TypeRep]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ty_s7ngm]
        case ty_s7ngm of {
          Data.Typeable.Internal.SomeTypeRep x_s7ngo [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ngo of {
                (#,#) _ [Occ=Dead] ww2_s7ngr [Occ=Once] -> ww2_s7ngr;
              };
        };

Data.Typeable.typeRepTyCon
  :: Data.Typeable.TypeRep -> GHC.Types.TyCon
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.someTypeRepTyCon eta_B1;

Data.Typeable.typeRepFingerprint
  :: Data.Typeable.TypeRep -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Typeable.Internal.someTypeRepFingerprint eta_B1;

Data.Typeable.rnfTypeRep :: Data.Typeable.TypeRep -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.rnfSomeTypeRep eta_B1;

Data.Typeable.typeOf1
  :: forall (t :: * -> *) a.
     Data.Typeable.Internal.Typeable t =>
     t a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngs ds_s7ngt]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngs;

Data.Typeable.typeOf2
  :: forall (t :: * -> * -> *) a b.
     Data.Typeable.Internal.Typeable t =>
     t a b -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngu ds_s7ngv]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngu;

Data.Typeable.typeOf3
  :: forall (t :: * -> * -> * -> *) a b c.
     Data.Typeable.Internal.Typeable t =>
     t a b c -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngw ds_s7ngx]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngw;

Data.Typeable.typeOf4
  :: forall (t :: * -> * -> * -> * -> *) a b c d.
     Data.Typeable.Internal.Typeable t =>
     t a b c d -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngy ds_s7ngz]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngy;

Data.Typeable.typeOf5
  :: forall (t :: * -> * -> * -> * -> * -> *) a b c d e.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngA ds_s7ngB]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngA;

Data.Typeable.typeOf6
  :: forall (t :: * -> * -> * -> * -> * -> * -> *) a b c d e f.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngC ds_s7ngD]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngC;

Data.Typeable.typeOf7
  :: forall (t :: *
                  -> * -> * -> * -> * -> * -> * -> *) a b c d e f g.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f g -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ngE ds_s7ngF]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ngE;

Data.Typeable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule4];

Data.Typeable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule2];

Data.Typeable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Typeable.$trModule3
                                     Data.Typeable.$trModule1];

Data.Typeable.showsTypeRep
  :: Data.Typeable.TypeRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ngG]
        case ds_s7ngG of {
          Data.Typeable.Internal.SomeTypeRep ty_s7ngI [Occ=Once] ->
              Data.Typeable.Internal.showTypeable GHC.Show.$fShow(,)1 ty_s7ngI;
        };


==================== Pre unarise: ====================
2018-03-16 16:02:41.403737225 UTC

Data.Typeable.typeOf
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqf ds_s7oqg]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7oqf;

Data.Typeable.typeRep
  :: forall k (proxy :: k -> *) (a :: k).
     Data.Typeable.Internal.Typeable a =>
     proxy a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Typeable.Internal.someTypeRep eta_B2 eta_B1;

Data.Typeable.cast
  :: forall a b.
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     a -> GHC.Base.Maybe b
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqh $dTypeable1_s7oqi x_s7oqj]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqh $dTypeable1_s7oqi
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqj];
        };

Data.Typeable.eqT1
  :: forall k (a :: k). GHC.Base.Maybe (a Data.Type.Equality.:~: a)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

Data.Typeable.eqT
  :: forall k (a :: k) (b :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oql $dTypeable1_s7oqm]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oql $dTypeable1_s7oqm
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> Data.Typeable.eqT1;
        };

Data.Typeable.gcast
  :: forall k (a :: k) (b :: k) (c :: k -> *).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     c a -> GHC.Base.Maybe (c b)
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqo $dTypeable1_s7oqp x_s7oqq]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqo $dTypeable1_s7oqp
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqq];
        };

Data.Typeable.gcast1
  :: forall k1 k2 (c :: k2 -> *) (t :: k1 -> k2) (t' :: k1
                                                        -> k2) (a :: k1).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a) -> GHC.Base.Maybe (c (t' a))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqs $dTypeable1_s7oqt x_s7oqu]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqs $dTypeable1_s7oqt
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqu];
        };

Data.Typeable.gcast2
  :: forall k1 k2 k3 (c :: k3 -> *) (t :: k1 -> k2 -> k3) (t' :: k1
                                                                 -> k2 -> k3) (a :: k1) (b :: k2).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a b) -> GHC.Base.Maybe (c (t' a b))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqw $dTypeable1_s7oqx x_s7oqy]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqw $dTypeable1_s7oqx
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqy];
        };

Data.Typeable.mkFunTy1 :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s7oqB [Occ=Once]
                   ww9_s7oqC [Occ=Once]
                   ww10_s7oqD [Occ=Once]
                   ww11_s7oqE [Occ=Once]
                   ww12_s7oqF [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s7oqH [Occ=Once]
                         ww3_s7oqI [Occ=Once]
                         ww4_s7oqJ [Occ=Once]
                         ww5_s7oqK [Occ=Once]
                         ww6_s7oqL [Occ=Once] ->
                    let {
                      sat_s7oqN [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s7oqH
                                                                ww3_s7oqI
                                                                ww4_s7oqJ
                                                                ww5_s7oqK
                                                                ww6_s7oqL]; } in
                    let {
                      sat_s7oqM [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s7oqB
                                                                ww9_s7oqC
                                                                ww10_s7oqD
                                                                ww11_s7oqE
                                                                ww12_s7oqF];
                    } in  Data.Typeable.Internal.mkTrApp sat_s7oqM sat_s7oqN;
              };
        };

Data.Typeable.funResultTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> GHC.Base.Maybe Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7oqO ds1_s7oqP]
        case ds_s7oqO of {
          Data.Typeable.Internal.SomeTypeRep f_s7oqR ->
              case ds1_s7oqP of {
                Data.Typeable.Internal.SomeTypeRep x_s7oqT [Occ=Once!] ->
                    let-no-escape {
                      $w$j_s7oqU [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U)>]
                        :: (* Data.Type.Equality.:~~: k_a7mAN)
                           -> GHC.Base.Maybe Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [f_s7oqR x_s7oqT] \r [w_s7oqV]
                              case f_s7oqR of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                             _ [Occ=Dead, Dmd=<L,A>]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds2_s7oqZ [Occ=Once!]
                                                             ds3_s7or0 [Occ=Once*] ->
                                    let-no-escape {
                                      $j_s7or1 [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                        :: GHC.Prim.Word#
                                           -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                          sat-only [x_s7oqT ds3_s7or0] \r [dt2_s7or2 dt3_s7or3]
                                              case x_s7oqT of {
                                                Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                 Dmd=<L,A>]
                                                                              _ [Occ=Dead,
                                                                                 Dmd=<L,A>] ->
                                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                      GHC.Fingerprint.Type.Fingerprint dt4_s7or6 [Occ=Once]
                                                                                       dt5_s7or7 [Occ=Once] ->
                                                          case eqWord# [dt2_s7or2 dt4_s7or6] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case
                                                                    eqWord# [dt3_s7or3 dt5_s7or7]
                                                                of
                                                                { __DEFAULT -> GHC.Base.Nothing [];
                                                                  1# ->
                                                                      let {
                                                                        sat_s7ora [Occ=Once]
                                                                          :: Data.Typeable.Internal.SomeTypeRep
                                                                        [LclId] =
                                                                            CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                      } in 
                                                                        GHC.Base.Just [sat_s7ora];
                                                                };
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrTyCon dt4_s7orb [Occ=Once]
                                                                               dt5_s7orc [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7or2 dt4_s7orb] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7or3 dt5_s7orc] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7ori [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                } in  GHC.Base.Just [sat_s7ori];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                             dt4_s7orj [Occ=Once]
                                                                             dt5_s7ork [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7or2 dt4_s7orj] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7or3 dt5_s7ork] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7orq [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                } in  GHC.Base.Just [sat_s7orq];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                             _ [Occ=Dead, Dmd=<L,A>]
                                                                             dt4_s7orr [Occ=Once]
                                                                             dt5_s7ors [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7or2 dt4_s7orr] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7or3 dt5_s7ors] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7orx [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                } in  GHC.Base.Just [sat_s7orx];
                                                          };
                                                    };
                                              };
                                    } in 
                                      case ds2_s7oqZ of {
                                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt2_s7orA [Occ=Once]
                                                                               dt3_s7orB [Occ=Once] ->
                                                  $j_s7or1 dt2_s7orA dt3_s7orB;
                                            };
                                        Data.Typeable.Internal.TrTyCon dt2_s7orC [Occ=Once]
                                                                       dt3_s7orD [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            $j_s7or1 dt2_s7orC dt3_s7orD;
                                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt2_s7orH [Occ=Once]
                                                                     dt3_s7orI [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7or1 dt2_s7orH dt3_s7orI;
                                        Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt2_s7orM [Occ=Once]
                                                                     dt3_s7orN [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7or1 dt2_s7orM dt3_s7orN;
                                      };
                              };
                    } in 
                      case f_s7oqR of {
                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                            case Data.Typeable.mkFunTy1 of {
                              Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                            _ [Occ=Dead, Dmd=<L,A>] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint _ [Occ=Dead] _ [Occ=Dead] ->
                                        let {
                                          sat_s7orV [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                          [LclId] =
                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                              GHC.Prim.coercionToken#];
                                        } in  $w$j_s7oqU sat_s7orV;
                                  };
                              Data.Typeable.Internal.TrTyCon dt_s7orW [Occ=Once]
                                                             dt1_s7orX [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7os2 [Occ=Once]
                                                                     dt3_s7os3 [Occ=Once] ->
                                        case eqWord# [dt_s7orW dt2_s7os2] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7orX dt3_s7os3] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7os6 [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                          GHC.Prim.coercionToken#];
                                                    } in  $w$j_s7oqU sat_s7os6;
                                              };
                                        };
                                  };
                              Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                           dt_s7os7 [Occ=Once]
                                                           dt1_s7os8 [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7osd [Occ=Once]
                                                                     dt3_s7ose [Occ=Once] ->
                                        case eqWord# [dt_s7os7 dt2_s7osd] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7os8 dt3_s7ose] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7osh [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                          GHC.Prim.coercionToken#];
                                                    } in  $w$j_s7oqU sat_s7osh;
                                              };
                                        };
                                  };
                            };
                        Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7osm [Occ=Once!] ->
                            let-no-escape {
                              $j_s7osn [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7oqU ds4_s7osm] \r [dt2_s7oso dt3_s7osp]
                                      case ds4_s7osm of {
                                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7oss [Occ=Once]
                                                                               dt5_s7ost [Occ=Once] ->
                                                  case eqWord# [dt2_s7oso dt4_s7oss] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7osp dt5_s7ost] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7osw [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                                    GHC.Prim.coercionToken#];
                                                              } in  $w$j_s7oqU sat_s7osw;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7osx [Occ=Once]
                                                                       dt5_s7osy [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7oso dt4_s7osx] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7osp dt5_s7osy] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7osE [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7oqU sat_s7osE;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7osF [Occ=Once]
                                                                     dt5_s7osG [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7oso dt4_s7osF] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7osp dt5_s7osG] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7osM [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7oqU sat_s7osM;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7osN [Occ=Once]
                                                                     dt5_s7osO [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7oso dt4_s7osN] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7osp dt5_s7osO] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7osT [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7oqU sat_s7osT;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                              _ [Occ=Dead, Dmd=<L,A>] ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7osW [Occ=Once]
                                                                       dt3_s7osX [Occ=Once] ->
                                          $j_s7osn dt2_s7osW dt3_s7osX;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7osY [Occ=Once]
                                                               dt3_s7osZ [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7osn dt2_s7osY dt3_s7osZ;
                                Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                             dt2_s7ot3 [Occ=Once]
                                                             dt3_s7ot4 [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7osn dt2_s7ot3 dt3_s7ot4;
                              };
                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds4_s7otc [Occ=Once!] ->
                            let-no-escape {
                              $j_s7otd [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7oqU ds4_s7otc] \r [dt2_s7ote dt3_s7otf]
                                      case ds4_s7otc of {
                                        Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                                      _ [Occ=Dead, Dmd=<L,A>] ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7oti [Occ=Once]
                                                                               dt5_s7otj [Occ=Once] ->
                                                  case eqWord# [dt2_s7ote dt4_s7oti] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7otf dt5_s7otj] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7otm [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                                    GHC.Prim.coercionToken#];
                                                              } in  $w$j_s7oqU sat_s7otm;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7otn [Occ=Once]
                                                                       dt5_s7oto [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ote dt4_s7otn] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7otf dt5_s7oto] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7otu [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7oqU sat_s7otu;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7otv [Occ=Once]
                                                                     dt5_s7otw [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ote dt4_s7otv] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7otf dt5_s7otw] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7otC [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7oqU sat_s7otC;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun _ [Occ=Dead, Dmd=<L,A>]
                                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                                     dt4_s7otD [Occ=Once]
                                                                     dt5_s7otE [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ote dt4_s7otD] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7otf dt5_s7otE] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7otJ [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                                              GHC.Prim.coercionToken#];
                                                        } in  $w$j_s7oqU sat_s7otJ;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType _ [Occ=Dead, Dmd=<L,A>]
                                                              _ [Occ=Dead, Dmd=<L,A>] ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7otM [Occ=Once]
                                                                       dt3_s7otN [Occ=Once] ->
                                          $j_s7otd dt2_s7otM dt3_s7otN;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7otO [Occ=Once]
                                                               dt3_s7otP [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7otd dt2_s7otO dt3_s7otP;
                                Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                             dt2_s7otT [Occ=Once]
                                                             dt3_s7otU [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7otd dt2_s7otT dt3_s7otU;
                              };
                        Data.Typeable.Internal.TrFun co_a78FW
                                                     _ [Occ=Dead, Dmd=<L,A>]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead] ->
                            case
                                Data.Typeable.Internal.sameTypeRep
                                    Data.Typeable.mkFunTy1 Data.Typeable.Internal.$mApp1
                            of
                            { GHC.Types.False -> GHC.Base.Nothing [];
                              GHC.Types.True ->
                                  let {
                                    sat_s7ou3 [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                    [LclId] =
                                        CCCS Data.Type.Equality.HRefl! [GHC.Prim.coercionToken#
                                                                        GHC.Prim.coercionToken#];
                                  } in  $w$j_s7oqU sat_s7ou3;
                            };
                      };
              };
        };

Data.Typeable.mkFunTy16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

Data.Typeable.mkFunTy15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy16;

Data.Typeable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Typeable.mkFunTy14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule4;

Data.Typeable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Typeable"#;

Data.Typeable.mkFunTy13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule2;

Data.Typeable.mkFunTy12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Data/Typeable.hs"#;

Data.Typeable.mkFunTy11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy12;

Data.Typeable.mkFunTy10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [171#];

Data.Typeable.mkFunTy9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

Data.Typeable.mkFunTy8 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [172#];

Data.Typeable.mkFunTy7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [55#];

Data.Typeable.mkFunTy6 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [Data.Typeable.mkFunTy14
                                           Data.Typeable.mkFunTy13
                                           Data.Typeable.mkFunTy11
                                           Data.Typeable.mkFunTy10
                                           Data.Typeable.mkFunTy9
                                           Data.Typeable.mkFunTy8
                                           Data.Typeable.mkFunTy7];

Data.Typeable.mkFunTy5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [Data.Typeable.mkFunTy15
                                                  Data.Typeable.mkFunTy6
                                                  GHC.Stack.Types.EmptyCallStack];

Data.Typeable.mkFunTy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkFunTy: Attempted to construct function type from non-lifted "#;

Data.Typeable.mkFunTy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type: arg="#;

Data.Typeable.mkFunTy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", res="#;

Data.Typeable.mkFunTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ou4 ds1_s7ou5]
        case ds_s7ou4 of {
          Data.Typeable.Internal.SomeTypeRep arg_s7ou7 ->
              case ds1_s7ou5 of {
                Data.Typeable.Internal.SomeTypeRep res_s7ou9 ->
                    let-no-escape {
                      fail_s7oua [Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<B,A>x, Unf=OtherCon []] =
                          sat-only [arg_s7ou7 res_s7ou9] \r [ds2_s7oub]
                              let {
                                sat_s7oug [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [arg_s7ou7 res_s7ou9] \u []
                                        let {
                                          sat_s7ouf [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [arg_s7ou7 res_s7ou9] \u []
                                                  let {
                                                    sat_s7oue [Occ=Once, Dmd=<L,1*U>]
                                                      :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [res_s7ou9] \s []
                                                            let {
                                                              sat_s7oud [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [res_s7ou9] \u []
                                                                      Data.Typeable.Internal.showTypeable
                                                                          Data.Typeable.Internal.$fShowSomeTypeRep2
                                                                          res_s7ou9
                                                                          GHC.Types.[];
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  Data.Typeable.mkFunTy2 sat_s7oud;
                                                  } in 
                                                    case
                                                        Data.Typeable.Internal.showTypeable
                                                            Data.Typeable.Internal.$fShowSomeTypeRep2
                                                            arg_s7ou7
                                                            GHC.Types.[]
                                                    of
                                                    sat_s7ouc
                                                    { __DEFAULT -> GHC.Base.++ sat_s7ouc sat_s7oue;
                                                    };
                                        } in 
                                          GHC.CString.unpackAppendCString#
                                              Data.Typeable.mkFunTy3 sat_s7ouf;
                              } in 
                                case
                                    GHC.CString.unpackAppendCString#
                                        Data.Typeable.mkFunTy4 sat_s7oug
                                of
                                sat_s7ouh
                                { __DEFAULT -> GHC.Err.error Data.Typeable.mkFunTy5 sat_s7ouh;
                                };
                    } in 
                      let-no-escape {
                        $w$j_s7oui [InlPrag=NOUSERINLINE[0],
                                    Occ=Once*!T[2],
                                    Dmd=<C(C(S)),1*C1(C1(U))>]
                          :: ((* :: *) GHC.Prim.~# (* :: *),
                              (* :: *) GHC.Prim.~# (k_a7mzz :: *)) =>
                             Data.Typeable.TypeRep
                        [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                            sat-only [arg_s7ou7 res_s7ou9 fail_s7oua] \r [ww_s7n2T ww1_s7n2U]
                                let-no-escape {
                                  $w$j1_s7ouj [InlPrag=NOUSERINLINE[0],
                                               Occ=Once*!T[2],
                                               Dmd=<C(C(S)),1*C1(C1(U))>]
                                    :: ((* :: *) GHC.Prim.~# (* :: *),
                                        (* :: *) GHC.Prim.~# (k1_a7mzB :: *)) =>
                                       Data.Typeable.TypeRep
                                  [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                                      sat-only [arg_s7ou7 res_s7ou9] \r [ww2_s7n2M ww3_s7n2N]
                                          let {
                                            sat_s7ouP [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [res_s7ou9] \u []
                                                    case res_s7ou9 of {
                                                      Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                       Dmd=<L,A>]
                                                                                    _ [Occ=Dead,
                                                                                       Dmd=<L,A>] ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7ouB [Occ=Once]
                                                                                     dt1_s7ouC [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouB
                                                                                            dt1_s7ouC];
                                                      Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7ouG [Occ=Once]
                                                                                   dt1_s7ouH [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouG
                                                                                            dt1_s7ouH];
                                                      Data.Typeable.Internal.TrFun _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7ouL [Occ=Once]
                                                                                   dt1_s7ouM [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouL
                                                                                            dt1_s7ouM];
                                                    }; } in
                                          let {
                                            sat_s7ouQ [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7ouP GHC.Types.[]]; } in
                                          let {
                                            sat_s7ouz [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [arg_s7ou7] \u []
                                                    case arg_s7ou7 of {
                                                      Data.Typeable.Internal.TrType _ [Occ=Dead,
                                                                                       Dmd=<L,A>]
                                                                                    _ [Occ=Dead,
                                                                                       Dmd=<L,A>] ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7oul [Occ=Once]
                                                                                     dt1_s7oum [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7oul
                                                                                            dt1_s7oum];
                                                      Data.Typeable.Internal.TrApp _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7ouq [Occ=Once]
                                                                                   dt1_s7our [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouq
                                                                                            dt1_s7our];
                                                      Data.Typeable.Internal.TrFun _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   _ [Occ=Dead,
                                                                                      Dmd=<L,A>]
                                                                                   dt_s7ouv [Occ=Once]
                                                                                   dt1_s7ouw [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouv
                                                                                            dt1_s7ouw];
                                                    }; } in
                                          let {
                                            sat_s7ouR [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7ouz sat_s7ouQ];
                                          } in 
                                            case
                                                GHC.Fingerprint.fingerprintFingerprints sat_s7ouR
                                            of
                                            { GHC.Fingerprint.Type.Fingerprint dt1_s7ouT [Occ=Once]
                                                                               dt2_s7ouU [Occ=Once] ->
                                                  let {
                                                    sat_s7ouV [Occ=Once]
                                                      :: Data.Typeable.Internal.TypeRep
                                                           ((a_a7mzA |> Sym ww1_s7n2U)
                                                            -> (a1_a7mzC |> Sym ww3_s7n2N))
                                                    [LclId] =
                                                        CCCS Data.Typeable.Internal.TrFun! [GHC.Prim.coercionToken#
                                                                                            GHC.Prim.coercionToken#
                                                                                            dt1_s7ouT
                                                                                            dt2_s7ouU
                                                                                            arg_s7ou7
                                                                                            res_s7ou9];
                                                  } in 
                                                    Data.Typeable.Internal.SomeTypeRep [sat_s7ouV];
                                            };
                                } in 
                                  case res_s7ou9 of {
                                    Data.Typeable.Internal.TrType co_a78FJ
                                                                  _ [Occ=Dead, Dmd=<L,A>] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$WTrType
                                                Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   ds4_s7ov2 [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7ov2 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds4_s7ov8 [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7ov8 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrFun co_a78FW
                                                                 _ [Occ=Dead, Dmd=<L,A>]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                  };
                      } in 
                        case arg_s7ou7 of {
                          Data.Typeable.Internal.TrType co_a78FJ _ [Occ=Dead, Dmd=<L,A>] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$WTrType Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         ds4_s7ovl [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ovl Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrApp _ [Occ=Dead, Dmd=<L,A>]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7ovr [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ovr Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrFun co_a78FW
                                                       _ [Occ=Dead, Dmd=<L,A>]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                        };
              };
        };

Data.Typeable.splitTyConApp
  :: Data.Typeable.TypeRep
     -> (GHC.Types.TyCon, [Data.Typeable.TypeRep])
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7ovy]
        case ds_s7ovy of {
          Data.Typeable.Internal.SomeTypeRep x_s7ovA [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ovA of {
                (#,#) ww1_s7ovC [Occ=Once] ww2_s7ovD [Occ=Once] ->
                    (,) [ww1_s7ovC ww2_s7ovD];
              };
        };

Data.Typeable.typeRepArgs
  :: Data.Typeable.TypeRep -> [Data.Typeable.TypeRep]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ty_s7ovE]
        case ty_s7ovE of {
          Data.Typeable.Internal.SomeTypeRep x_s7ovG [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ovG of {
                (#,#) _ [Occ=Dead] ww2_s7ovJ [Occ=Once] -> ww2_s7ovJ;
              };
        };

Data.Typeable.typeRepTyCon
  :: Data.Typeable.TypeRep -> GHC.Types.TyCon
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.someTypeRepTyCon eta_B1;

Data.Typeable.typeRepFingerprint
  :: Data.Typeable.TypeRep -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Typeable.Internal.someTypeRepFingerprint eta_B1;

Data.Typeable.rnfTypeRep :: Data.Typeable.TypeRep -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.rnfSomeTypeRep eta_B1;

Data.Typeable.typeOf1
  :: forall (t :: * -> *) a.
     Data.Typeable.Internal.Typeable t =>
     t a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovK ds_s7ovL]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovK;

Data.Typeable.typeOf2
  :: forall (t :: * -> * -> *) a b.
     Data.Typeable.Internal.Typeable t =>
     t a b -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovM ds_s7ovN]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovM;

Data.Typeable.typeOf3
  :: forall (t :: * -> * -> * -> *) a b c.
     Data.Typeable.Internal.Typeable t =>
     t a b c -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovO ds_s7ovP]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovO;

Data.Typeable.typeOf4
  :: forall (t :: * -> * -> * -> * -> *) a b c d.
     Data.Typeable.Internal.Typeable t =>
     t a b c d -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovQ ds_s7ovR]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovQ;

Data.Typeable.typeOf5
  :: forall (t :: * -> * -> * -> * -> * -> *) a b c d e.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovS ds_s7ovT]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovS;

Data.Typeable.typeOf6
  :: forall (t :: * -> * -> * -> * -> * -> * -> *) a b c d e f.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovU ds_s7ovV]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovU;

Data.Typeable.typeOf7
  :: forall (t :: *
                  -> * -> * -> * -> * -> * -> * -> *) a b c d e f g.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f g -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovW ds_s7ovX]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovW;

Data.Typeable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule4];

Data.Typeable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule2];

Data.Typeable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Typeable.$trModule3
                                     Data.Typeable.$trModule1];

Data.Typeable.showsTypeRep
  :: Data.Typeable.TypeRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ovY]
        case ds_s7ovY of {
          Data.Typeable.Internal.SomeTypeRep ty_s7ow0 [Occ=Once] ->
              Data.Typeable.Internal.showTypeable GHC.Show.$fShow(,)1 ty_s7ow0;
        };


==================== STG syntax: ====================
2018-03-16 16:02:41.424222328 UTC

Data.Typeable.typeOf
  :: forall a.
     Data.Typeable.Internal.Typeable a =>
     a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqf ds_s7oqg]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7oqf;

Data.Typeable.typeRep
  :: forall k (proxy :: k -> *) (a :: k).
     Data.Typeable.Internal.Typeable a =>
     proxy a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Typeable.Internal.someTypeRep eta_B2 eta_B1;

Data.Typeable.cast
  :: forall a b.
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     a -> GHC.Base.Maybe b
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqh $dTypeable1_s7oqi x_s7oqj]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqh $dTypeable1_s7oqi
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqj];
        };

Data.Typeable.eqT1
  :: forall k (a :: k). GHC.Base.Maybe (a Data.Type.Equality.:~: a)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

Data.Typeable.eqT
  :: forall k (a :: k) (b :: k).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oql $dTypeable1_s7oqm]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oql $dTypeable1_s7oqm
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> Data.Typeable.eqT1;
        };

Data.Typeable.gcast
  :: forall k (a :: k) (b :: k) (c :: k -> *).
     (Data.Typeable.Internal.Typeable a,
      Data.Typeable.Internal.Typeable b) =>
     c a -> GHC.Base.Maybe (c b)
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqo $dTypeable1_s7oqp x_s7oqq]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqo $dTypeable1_s7oqp
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqq];
        };

Data.Typeable.gcast1
  :: forall k1 k2 (c :: k2 -> *) (t :: k1 -> k2) (t' :: k1
                                                        -> k2) (a :: k1).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a) -> GHC.Base.Maybe (c (t' a))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqs $dTypeable1_s7oqt x_s7oqu]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqs $dTypeable1_s7oqt
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqu];
        };

Data.Typeable.gcast2
  :: forall k1 k2 k3 (c :: k3 -> *) (t :: k1 -> k2 -> k3) (t' :: k1
                                                                 -> k2 -> k3) (a :: k1) (b :: k2).
     (Data.Typeable.Internal.Typeable t,
      Data.Typeable.Internal.Typeable t') =>
     c (t a b) -> GHC.Base.Maybe (c (t' a b))
[GblId, Arity=3, Str=<S,1*U><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7oqw $dTypeable1_s7oqx x_s7oqy]
        case
            Data.Typeable.Internal.sameTypeRep
                $dTypeable_s7oqw $dTypeable1_s7oqx
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.Base.Just [x_s7oqy];
        };

Data.Typeable.mkFunTy1 :: Data.Typeable.Internal.TypeRep *
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                16277905407886699876##
                12502576999761269576##
                GHC.Types.tr$ModuleGHCPrim
                GHC.Types.$tcTYPE2
                0#
                GHC.Types.$tcTYPE1
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s7oqB [Occ=Once]
                   ww9_s7oqC [Occ=Once]
                   ww10_s7oqD [Occ=Once]
                   ww11_s7oqE [Occ=Once]
                   ww12_s7oqF [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      16105171405184389724##
                      5595830777317938557##
                      GHC.Types.tr$ModuleGHCPrim
                      GHC.Types.$tc'LiftedRep1
                      0#
                      GHC.Types.$tc'AddrRep1
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_s7oqH [Occ=Once]
                         ww3_s7oqI [Occ=Once]
                         ww4_s7oqJ [Occ=Once]
                         ww5_s7oqK [Occ=Once]
                         ww6_s7oqL [Occ=Once] ->
                    let {
                      sat_s7oqN [Occ=Once]
                        :: Data.Typeable.Internal.TypeRep 'GHC.Types.LiftedRep
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_s7oqH
                                                                ww3_s7oqI
                                                                ww4_s7oqJ
                                                                ww5_s7oqK
                                                                ww6_s7oqL]; } in
                    let {
                      sat_s7oqM [Occ=Once] :: Data.Typeable.Internal.TypeRep TYPE
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_s7oqB
                                                                ww9_s7oqC
                                                                ww10_s7oqD
                                                                ww11_s7oqE
                                                                ww12_s7oqF];
                    } in  Data.Typeable.Internal.mkTrApp sat_s7oqM sat_s7oqN;
              };
        };

Data.Typeable.funResultTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> GHC.Base.Maybe Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7oqO ds1_s7oqP]
        case ds_s7oqO of {
          Data.Typeable.Internal.SomeTypeRep f_s7oqR ->
              case ds1_s7oqP of {
                Data.Typeable.Internal.SomeTypeRep x_s7oqT [Occ=Once!] ->
                    let-no-escape {
                      $w$j_s7oqU [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U)>]
                        :: (* Data.Type.Equality.:~~: k_a7mAN)
                           -> GHC.Base.Maybe Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [f_s7oqR x_s7oqT] \r [w_s7oqV]
                              case f_s7oqR of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds2_s7oqZ [Occ=Once!]
                                                             ds3_s7or0 [Occ=Once*] ->
                                    let-no-escape {
                                      $j_s7or1 [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                        :: GHC.Prim.Word#
                                           -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                          sat-only [x_s7oqT ds3_s7or0] \r [dt2_s7or2 dt3_s7or3]
                                              case x_s7oqT of {
                                                Data.Typeable.Internal.TrType ->
                                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                                      GHC.Fingerprint.Type.Fingerprint dt4_s7or6 [Occ=Once]
                                                                                       dt5_s7or7 [Occ=Once] ->
                                                          case eqWord# [dt2_s7or2 dt4_s7or6] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case
                                                                    eqWord# [dt3_s7or3 dt5_s7or7]
                                                                of
                                                                { __DEFAULT -> GHC.Base.Nothing [];
                                                                  1# ->
                                                                      let {
                                                                        sat_s7ora [Occ=Once]
                                                                          :: Data.Typeable.Internal.SomeTypeRep
                                                                        [LclId] =
                                                                            CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                      } in 
                                                                        GHC.Base.Just [sat_s7ora];
                                                                };
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrTyCon dt4_s7orb [Occ=Once]
                                                                               dt5_s7orc [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7or2 dt4_s7orb] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7or3 dt5_s7orc] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7ori [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                } in  GHC.Base.Just [sat_s7ori];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrApp dt4_s7orj [Occ=Once]
                                                                             dt5_s7ork [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7or2 dt4_s7orj] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7or3 dt5_s7ork] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7orq [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                } in  GHC.Base.Just [sat_s7orq];
                                                          };
                                                    };
                                                Data.Typeable.Internal.TrFun dt4_s7orr [Occ=Once]
                                                                             dt5_s7ors [Occ=Once]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead] ->
                                                    case eqWord# [dt2_s7or2 dt4_s7orr] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case eqWord# [dt3_s7or3 dt5_s7ors] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                let {
                                                                  sat_s7orx [Occ=Once]
                                                                    :: Data.Typeable.Internal.SomeTypeRep
                                                                  [LclId] =
                                                                      CCCS Data.Typeable.Internal.SomeTypeRep! [ds3_s7or0];
                                                                } in  GHC.Base.Just [sat_s7orx];
                                                          };
                                                    };
                                              };
                                    } in 
                                      case ds2_s7oqZ of {
                                        Data.Typeable.Internal.TrType ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt2_s7orA [Occ=Once]
                                                                               dt3_s7orB [Occ=Once] ->
                                                  $j_s7or1 dt2_s7orA dt3_s7orB;
                                            };
                                        Data.Typeable.Internal.TrTyCon dt2_s7orC [Occ=Once]
                                                                       dt3_s7orD [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            $j_s7or1 dt2_s7orC dt3_s7orD;
                                        Data.Typeable.Internal.TrApp dt2_s7orH [Occ=Once]
                                                                     dt3_s7orI [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7or1 dt2_s7orH dt3_s7orI;
                                        Data.Typeable.Internal.TrFun dt2_s7orM [Occ=Once]
                                                                     dt3_s7orN [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            $j_s7or1 dt2_s7orM dt3_s7orN;
                                      };
                              };
                    } in 
                      case f_s7oqR of {
                        Data.Typeable.Internal.TrType ->
                            case Data.Typeable.mkFunTy1 of {
                              Data.Typeable.Internal.TrType ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint _ [Occ=Dead] _ [Occ=Dead] ->
                                        let {
                                          sat_s7orV [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                          [LclId] =
                                              CCCS Data.Type.Equality.HRefl! [];
                                        } in  $w$j_s7oqU sat_s7orV;
                                  };
                              Data.Typeable.Internal.TrTyCon dt_s7orW [Occ=Once]
                                                             dt1_s7orX [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7os2 [Occ=Once]
                                                                     dt3_s7os3 [Occ=Once] ->
                                        case eqWord# [dt_s7orW dt2_s7os2] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7orX dt3_s7os3] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7os6 [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [];
                                                    } in  $w$j_s7oqU sat_s7os6;
                                              };
                                        };
                                  };
                              Data.Typeable.Internal.TrApp dt_s7os7 [Occ=Once]
                                                           dt1_s7os8 [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case Data.Typeable.Internal.fpTYPELiftedRep of {
                                    GHC.Fingerprint.Type.Fingerprint dt2_s7osd [Occ=Once]
                                                                     dt3_s7ose [Occ=Once] ->
                                        case eqWord# [dt_s7os7 dt2_s7osd] of {
                                          __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case eqWord# [dt1_s7os8 dt3_s7ose] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    let {
                                                      sat_s7osh [Occ=Once]
                                                        :: * Data.Type.Equality.:~~: k_a7mAN
                                                      [LclId] =
                                                          CCCS Data.Type.Equality.HRefl! [];
                                                    } in  $w$j_s7oqU sat_s7osh;
                                              };
                                        };
                                  };
                            };
                        Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7osm [Occ=Once!] ->
                            let-no-escape {
                              $j_s7osn [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7oqU ds4_s7osm] \r [dt2_s7oso dt3_s7osp]
                                      case ds4_s7osm of {
                                        Data.Typeable.Internal.TrType ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7oss [Occ=Once]
                                                                               dt5_s7ost [Occ=Once] ->
                                                  case eqWord# [dt2_s7oso dt4_s7oss] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7osp dt5_s7ost] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7osw [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [];
                                                              } in  $w$j_s7oqU sat_s7osw;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7osx [Occ=Once]
                                                                       dt5_s7osy [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7oso dt4_s7osx] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7osp dt5_s7osy] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7osE [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7oqU sat_s7osE;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp dt4_s7osF [Occ=Once]
                                                                     dt5_s7osG [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7oso dt4_s7osF] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7osp dt5_s7osG] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7osM [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7oqU sat_s7osM;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun dt4_s7osN [Occ=Once]
                                                                     dt5_s7osO [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7oso dt4_s7osN] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7osp dt5_s7osO] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7osT [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7oqU sat_s7osT;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7osW [Occ=Once]
                                                                       dt3_s7osX [Occ=Once] ->
                                          $j_s7osn dt2_s7osW dt3_s7osX;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7osY [Occ=Once]
                                                               dt3_s7osZ [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7osn dt2_s7osY dt3_s7osZ;
                                Data.Typeable.Internal.TrApp dt2_s7ot3 [Occ=Once]
                                                             dt3_s7ot4 [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7osn dt2_s7ot3 dt3_s7ot4;
                              };
                        Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds4_s7otc [Occ=Once!] ->
                            let-no-escape {
                              $j_s7otd [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U))>]
                                :: GHC.Prim.Word#
                                   -> GHC.Prim.Word# -> GHC.Base.Maybe Data.Typeable.TypeRep
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                                  sat-only [$w$j_s7oqU ds4_s7otc] \r [dt2_s7ote dt3_s7otf]
                                      case ds4_s7otc of {
                                        Data.Typeable.Internal.TrType ->
                                            case Data.Typeable.Internal.fpTYPELiftedRep of {
                                              GHC.Fingerprint.Type.Fingerprint dt4_s7oti [Occ=Once]
                                                                               dt5_s7otj [Occ=Once] ->
                                                  case eqWord# [dt2_s7ote dt4_s7oti] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        case eqWord# [dt3_s7otf dt5_s7otj] of {
                                                          __DEFAULT -> GHC.Base.Nothing [];
                                                          1# ->
                                                              let {
                                                                sat_s7otm [Occ=Once]
                                                                  :: *
                                                                     Data.Type.Equality.:~~: k_a7mAN
                                                                [LclId] =
                                                                    CCCS Data.Type.Equality.HRefl! [];
                                                              } in  $w$j_s7oqU sat_s7otm;
                                                        };
                                                  };
                                            };
                                        Data.Typeable.Internal.TrTyCon dt4_s7otn [Occ=Once]
                                                                       dt5_s7oto [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ote dt4_s7otn] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7otf dt5_s7oto] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7otu [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7oqU sat_s7otu;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrApp dt4_s7otv [Occ=Once]
                                                                     dt5_s7otw [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ote dt4_s7otv] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7otf dt5_s7otw] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7otC [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7oqU sat_s7otC;
                                                  };
                                            };
                                        Data.Typeable.Internal.TrFun dt4_s7otD [Occ=Once]
                                                                     dt5_s7otE [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case eqWord# [dt2_s7ote dt4_s7otD] of {
                                              __DEFAULT -> GHC.Base.Nothing [];
                                              1# ->
                                                  case eqWord# [dt3_s7otf dt5_s7otE] of {
                                                    __DEFAULT -> GHC.Base.Nothing [];
                                                    1# ->
                                                        let {
                                                          sat_s7otJ [Occ=Once]
                                                            :: * Data.Type.Equality.:~~: k_a7mAN
                                                          [LclId] =
                                                              CCCS Data.Type.Equality.HRefl! [];
                                                        } in  $w$j_s7oqU sat_s7otJ;
                                                  };
                                            };
                                      };
                            } in 
                              case Data.Typeable.mkFunTy1 of {
                                Data.Typeable.Internal.TrType ->
                                    case Data.Typeable.Internal.fpTYPELiftedRep of {
                                      GHC.Fingerprint.Type.Fingerprint dt2_s7otM [Occ=Once]
                                                                       dt3_s7otN [Occ=Once] ->
                                          $j_s7otd dt2_s7otM dt3_s7otN;
                                    };
                                Data.Typeable.Internal.TrTyCon dt2_s7otO [Occ=Once]
                                                               dt3_s7otP [Occ=Once]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                    $j_s7otd dt2_s7otO dt3_s7otP;
                                Data.Typeable.Internal.TrApp dt2_s7otT [Occ=Once]
                                                             dt3_s7otU [Occ=Once]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead] ->
                                    $j_s7otd dt2_s7otT dt3_s7otU;
                              };
                        Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead] ->
                            case
                                Data.Typeable.Internal.sameTypeRep
                                    Data.Typeable.mkFunTy1 Data.Typeable.Internal.$mApp1
                            of
                            { GHC.Types.False -> GHC.Base.Nothing [];
                              GHC.Types.True ->
                                  let {
                                    sat_s7ou3 [Occ=Once] :: * Data.Type.Equality.:~~: k_a7mAN
                                    [LclId] =
                                        CCCS Data.Type.Equality.HRefl! [];
                                  } in  $w$j_s7oqU sat_s7ou3;
                            };
                      };
              };
        };

Data.Typeable.mkFunTy16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

Data.Typeable.mkFunTy15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy16;

Data.Typeable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Typeable.mkFunTy14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule4;

Data.Typeable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Typeable"#;

Data.Typeable.mkFunTy13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.$trModule2;

Data.Typeable.mkFunTy12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Data/Typeable.hs"#;

Data.Typeable.mkFunTy11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Typeable.mkFunTy12;

Data.Typeable.mkFunTy10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [171#];

Data.Typeable.mkFunTy9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

Data.Typeable.mkFunTy8 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [172#];

Data.Typeable.mkFunTy7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [55#];

Data.Typeable.mkFunTy6 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [Data.Typeable.mkFunTy14
                                           Data.Typeable.mkFunTy13
                                           Data.Typeable.mkFunTy11
                                           Data.Typeable.mkFunTy10
                                           Data.Typeable.mkFunTy9
                                           Data.Typeable.mkFunTy8
                                           Data.Typeable.mkFunTy7];

Data.Typeable.mkFunTy5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [Data.Typeable.mkFunTy15
                                                  Data.Typeable.mkFunTy6
                                                  GHC.Stack.Types.EmptyCallStack];

Data.Typeable.mkFunTy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkFunTy: Attempted to construct function type from non-lifted "#;

Data.Typeable.mkFunTy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type: arg="#;

Data.Typeable.mkFunTy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", res="#;

Data.Typeable.mkFunTy
  :: Data.Typeable.TypeRep
     -> Data.Typeable.TypeRep -> Data.Typeable.TypeRep
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ou4 ds1_s7ou5]
        case ds_s7ou4 of {
          Data.Typeable.Internal.SomeTypeRep arg_s7ou7 ->
              case ds1_s7ou5 of {
                Data.Typeable.Internal.SomeTypeRep res_s7ou9 ->
                    let-no-escape {
                      fail_s7oua [Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> Data.Typeable.TypeRep
                      [LclId[JoinId(1)], Arity=1, Str=<B,A>x, Unf=OtherCon []] =
                          sat-only [arg_s7ou7 res_s7ou9] \r [void_0E]
                              let {
                                sat_s7oug [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [arg_s7ou7 res_s7ou9] \u []
                                        let {
                                          sat_s7ouf [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [arg_s7ou7 res_s7ou9] \u []
                                                  let {
                                                    sat_s7oue [Occ=Once, Dmd=<L,1*U>]
                                                      :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [res_s7ou9] \s []
                                                            let {
                                                              sat_s7oud [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [res_s7ou9] \u []
                                                                      Data.Typeable.Internal.showTypeable
                                                                          Data.Typeable.Internal.$fShowSomeTypeRep2
                                                                          res_s7ou9
                                                                          GHC.Types.[];
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  Data.Typeable.mkFunTy2 sat_s7oud;
                                                  } in 
                                                    case
                                                        Data.Typeable.Internal.showTypeable
                                                            Data.Typeable.Internal.$fShowSomeTypeRep2
                                                            arg_s7ou7
                                                            GHC.Types.[]
                                                    of
                                                    sat_s7ouc
                                                    { __DEFAULT -> GHC.Base.++ sat_s7ouc sat_s7oue;
                                                    };
                                        } in 
                                          GHC.CString.unpackAppendCString#
                                              Data.Typeable.mkFunTy3 sat_s7ouf;
                              } in 
                                case
                                    GHC.CString.unpackAppendCString#
                                        Data.Typeable.mkFunTy4 sat_s7oug
                                of
                                sat_s7ouh
                                { __DEFAULT -> GHC.Err.error Data.Typeable.mkFunTy5 sat_s7ouh;
                                };
                    } in 
                      let-no-escape {
                        $w$j_s7oui [InlPrag=NOUSERINLINE[0],
                                    Occ=Once*!T[2],
                                    Dmd=<C(C(S)),1*C1(C1(U))>]
                          :: ((* :: *) GHC.Prim.~# (* :: *),
                              (* :: *) GHC.Prim.~# (k_a7mzz :: *)) =>
                             Data.Typeable.TypeRep
                        [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                            sat-only [arg_s7ou7 res_s7ou9 fail_s7oua] \r [void_0E void_0E]
                                let-no-escape {
                                  $w$j1_s7ouj [InlPrag=NOUSERINLINE[0],
                                               Occ=Once*!T[2],
                                               Dmd=<C(C(S)),1*C1(C1(U))>]
                                    :: ((* :: *) GHC.Prim.~# (* :: *),
                                        (* :: *) GHC.Prim.~# (k1_a7mzB :: *)) =>
                                       Data.Typeable.TypeRep
                                  [LclId[JoinId(2)], Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
                                      sat-only [arg_s7ou7 res_s7ou9] \r [void_0E void_0E]
                                          let {
                                            sat_s7ouP [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [res_s7ou9] \u []
                                                    case res_s7ou9 of {
                                                      Data.Typeable.Internal.TrType ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7ouB [Occ=Once]
                                                                                     dt1_s7ouC [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouB
                                                                                            dt1_s7ouC];
                                                      Data.Typeable.Internal.TrApp dt_s7ouG [Occ=Once]
                                                                                   dt1_s7ouH [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouG
                                                                                            dt1_s7ouH];
                                                      Data.Typeable.Internal.TrFun dt_s7ouL [Occ=Once]
                                                                                   dt1_s7ouM [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouL
                                                                                            dt1_s7ouM];
                                                    }; } in
                                          let {
                                            sat_s7ouQ [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7ouP GHC.Types.[]]; } in
                                          let {
                                            sat_s7ouz [Occ=Once] :: GHC.Fingerprint.Type.Fingerprint
                                            [LclId] =
                                                [arg_s7ou7] \u []
                                                    case arg_s7ou7 of {
                                                      Data.Typeable.Internal.TrType ->
                                                          Data.Typeable.Internal.fpTYPELiftedRep;
                                                      Data.Typeable.Internal.TrTyCon dt_s7oul [Occ=Once]
                                                                                     dt1_s7oum [Occ=Once]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead]
                                                                                     _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7oul
                                                                                            dt1_s7oum];
                                                      Data.Typeable.Internal.TrApp dt_s7ouq [Occ=Once]
                                                                                   dt1_s7our [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouq
                                                                                            dt1_s7our];
                                                      Data.Typeable.Internal.TrFun dt_s7ouv [Occ=Once]
                                                                                   dt1_s7ouw [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          GHC.Fingerprint.Type.Fingerprint [dt_s7ouv
                                                                                            dt1_s7ouw];
                                                    }; } in
                                          let {
                                            sat_s7ouR [Occ=Once]
                                              :: [GHC.Fingerprint.Type.Fingerprint]
                                            [LclId] =
                                                CCCS :! [sat_s7ouz sat_s7ouQ];
                                          } in 
                                            case
                                                GHC.Fingerprint.fingerprintFingerprints sat_s7ouR
                                            of
                                            { GHC.Fingerprint.Type.Fingerprint dt1_s7ouT [Occ=Once]
                                                                               dt2_s7ouU [Occ=Once] ->
                                                  let {
                                                    sat_s7ouV [Occ=Once]
                                                      :: Data.Typeable.Internal.TypeRep
                                                           ((a_a7mzA |> Sym ww1_s7n2U)
                                                            -> (a1_a7mzC |> Sym ww3_s7n2N))
                                                    [LclId] =
                                                        CCCS Data.Typeable.Internal.TrFun! [dt1_s7ouT
                                                                                            dt2_s7ouU
                                                                                            arg_s7ou7
                                                                                            res_s7ou9];
                                                  } in 
                                                    Data.Typeable.Internal.SomeTypeRep [sat_s7ouV];
                                            };
                                } in 
                                  case res_s7ou9 of {
                                    Data.Typeable.Internal.TrType ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$WTrType
                                                Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   ds4_s7ov2 [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7ov2 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 ds4_s7ov8 [Occ=Once] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                ds4_s7ov8 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                    Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                        case
                                            Data.Typeable.Internal.sameTypeRep
                                                Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                                        of
                                        { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                          GHC.Types.True ->
                                              $w$j1_s7ouj
                                                  GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                                        };
                                  };
                      } in 
                        case arg_s7ou7 of {
                          Data.Typeable.Internal.TrType ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$WTrType Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrTyCon _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         ds4_s7ovl [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ovl Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrApp _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       ds4_s7ovr [Occ=Once] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      ds4_s7ovr Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                          Data.Typeable.Internal.TrFun _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      Data.Typeable.Internal.$mApp1 Data.Typeable.mkFunTy1
                              of
                              { GHC.Types.False -> fail_s7oua GHC.Prim.void#;
                                GHC.Types.True ->
                                    $w$j_s7oui GHC.Prim.coercionToken# GHC.Prim.coercionToken#;
                              };
                        };
              };
        };

Data.Typeable.splitTyConApp
  :: Data.Typeable.TypeRep
     -> (GHC.Types.TyCon, [Data.Typeable.TypeRep])
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7ovy]
        case ds_s7ovy of {
          Data.Typeable.Internal.SomeTypeRep x_s7ovA [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ovA of {
                (#,#) ww1_s7ovC [Occ=Once] ww2_s7ovD [Occ=Once] ->
                    (,) [ww1_s7ovC ww2_s7ovD];
              };
        };

Data.Typeable.typeRepArgs
  :: Data.Typeable.TypeRep -> [Data.Typeable.TypeRep]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ty_s7ovE]
        case ty_s7ovE of {
          Data.Typeable.Internal.SomeTypeRep x_s7ovG [Occ=Once] ->
              case Data.Typeable.Internal.$wgo GHC.Types.[] x_s7ovG of {
                (#,#) _ [Occ=Dead] ww2_s7ovJ [Occ=Once] -> ww2_s7ovJ;
              };
        };

Data.Typeable.typeRepTyCon
  :: Data.Typeable.TypeRep -> GHC.Types.TyCon
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.someTypeRepTyCon eta_B1;

Data.Typeable.typeRepFingerprint
  :: Data.Typeable.TypeRep -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Typeable.Internal.someTypeRepFingerprint eta_B1;

Data.Typeable.rnfTypeRep :: Data.Typeable.TypeRep -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Typeable.Internal.rnfSomeTypeRep eta_B1;

Data.Typeable.typeOf1
  :: forall (t :: * -> *) a.
     Data.Typeable.Internal.Typeable t =>
     t a -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovK ds_s7ovL]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovK;

Data.Typeable.typeOf2
  :: forall (t :: * -> * -> *) a b.
     Data.Typeable.Internal.Typeable t =>
     t a b -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovM ds_s7ovN]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovM;

Data.Typeable.typeOf3
  :: forall (t :: * -> * -> * -> *) a b c.
     Data.Typeable.Internal.Typeable t =>
     t a b c -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovO ds_s7ovP]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovO;

Data.Typeable.typeOf4
  :: forall (t :: * -> * -> * -> * -> *) a b c d.
     Data.Typeable.Internal.Typeable t =>
     t a b c d -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovQ ds_s7ovR]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovQ;

Data.Typeable.typeOf5
  :: forall (t :: * -> * -> * -> * -> * -> *) a b c d e.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovS ds_s7ovT]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovS;

Data.Typeable.typeOf6
  :: forall (t :: * -> * -> * -> * -> * -> * -> *) a b c d e f.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovU ds_s7ovV]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovU;

Data.Typeable.typeOf7
  :: forall (t :: *
                  -> * -> * -> * -> * -> * -> * -> *) a b c d e f g.
     Data.Typeable.Internal.Typeable t =>
     t a b c d e f g -> Data.Typeable.TypeRep
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,A>, Unf=OtherCon []] =
    [] \r [$dTypeable_s7ovW ds_s7ovX]
        Data.Typeable.Internal.$WSomeTypeRep $dTypeable_s7ovW;

Data.Typeable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule4];

Data.Typeable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Typeable.$trModule2];

Data.Typeable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Typeable.$trModule3
                                     Data.Typeable.$trModule1];

Data.Typeable.showsTypeRep
  :: Data.Typeable.TypeRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ovY]
        case ds_s7ovY of {
          Data.Typeable.Internal.SomeTypeRep ty_s7ow0 [Occ=Once] ->
              Data.Typeable.Internal.showTypeable GHC.Show.$fShow(,)1 ty_s7ow0;
        };

