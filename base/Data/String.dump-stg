
==================== Pre unarise: ====================
2018-03-16 16:06:57.471106292 UTC

Data.String.fromString [InlPrag=INLINE]
  :: forall a. Data.String.IsString a => GHC.Base.String -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sc3eX] v_sc3eX;

Data.String.$fIsString[]_$cfromString
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     GHC.Base.String -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sc3eY eta_sc3eZ]
        case GHC.Types.heq_sel $d~_sc3eY of { __DEFAULT -> eta_sc3eZ; };

Data.String.$fIsString[] [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     Data.String.IsString [a]
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.String.$fIsString[]_$cfromString eta_B2 eta_B1;

$fIsStringConst1_rc3eM
  :: forall a b. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3f0] $dIsString_sc3f0;

Data.String.$fIsStringConst [InlPrag=INLINE (sat-args=0)]
  :: forall a b.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Const.Const a b)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringConst1_rc3eM eta_B1;

$fIsStringIdentity1_rc3eN
  :: forall a. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3f1] $dIsString_sc3f1;

Data.String.$fIsStringIdentity [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Identity.Identity a)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringIdentity1_rc3eN eta_B1;

Data.String.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.String.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule4];

Data.String.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.String"#;

Data.String.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule2];

Data.String.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.String.$trModule3
                                     Data.String.$trModule1];

$krep_rc3eO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3eP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep2_rc3eQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3eO GHC.Types.[]];

$krep3_rc3eR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3eQ];

Data.String.$tcIsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep1_rc3eP];

$krep4_rc3eS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep5_rc3eT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rc3eR $krep4_rc3eS];

Data.String.$tcIsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsString"#;

Data.String.$tcIsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tcIsString3];

Data.String.$tcIsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13318441332885770359##
                                    5483613882769050508##
                                    Data.String.$trModule
                                    Data.String.$tcIsString2
                                    0#
                                    Data.String.$tcIsString1];

$krep6_rc3eU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_rc3eS GHC.Types.[]];

$krep7_rc3eV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.String.$tcIsString
                                              $krep6_rc3eU];

Data.String.$tc'C:IsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3eT $krep7_rc3eV];

Data.String.$tc'C:IsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsString"#;

Data.String.$tc'C:IsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tc'C:IsString3];

Data.String.$tc'C:IsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17120978992298967165##
                                    12730766526892520308##
                                    Data.String.$trModule
                                    Data.String.$tc'C:IsString2
                                    1#
                                    Data.String.$tc'C:IsString1];


==================== STG syntax: ====================
2018-03-16 16:06:57.473596484 UTC

Data.String.fromString [InlPrag=INLINE]
  :: forall a. Data.String.IsString a => GHC.Base.String -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sc3eX] v_sc3eX;

Data.String.$fIsString[]_$cfromString
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     GHC.Base.String -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sc3eY eta_sc3eZ]
        case GHC.Types.heq_sel $d~_sc3eY of { (##) -> eta_sc3eZ; };

Data.String.$fIsString[] [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     Data.String.IsString [a]
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.String.$fIsString[]_$cfromString eta_B2 eta_B1;

$fIsStringConst1_rc3eM
  :: forall a b. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3f0] $dIsString_sc3f0;

Data.String.$fIsStringConst [InlPrag=INLINE (sat-args=0)]
  :: forall a b.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Const.Const a b)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringConst1_rc3eM eta_B1;

$fIsStringIdentity1_rc3eN
  :: forall a. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3f1] $dIsString_sc3f1;

Data.String.$fIsStringIdentity [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Identity.Identity a)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringIdentity1_rc3eN eta_B1;

Data.String.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.String.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule4];

Data.String.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.String"#;

Data.String.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule2];

Data.String.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.String.$trModule3
                                     Data.String.$trModule1];

$krep_rc3eO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3eP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep2_rc3eQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3eO GHC.Types.[]];

$krep3_rc3eR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3eQ];

Data.String.$tcIsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep1_rc3eP];

$krep4_rc3eS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep5_rc3eT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rc3eR $krep4_rc3eS];

Data.String.$tcIsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsString"#;

Data.String.$tcIsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tcIsString3];

Data.String.$tcIsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13318441332885770359##
                                    5483613882769050508##
                                    Data.String.$trModule
                                    Data.String.$tcIsString2
                                    0#
                                    Data.String.$tcIsString1];

$krep6_rc3eU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_rc3eS GHC.Types.[]];

$krep7_rc3eV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.String.$tcIsString
                                              $krep6_rc3eU];

Data.String.$tc'C:IsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3eT $krep7_rc3eV];

Data.String.$tc'C:IsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsString"#;

Data.String.$tc'C:IsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tc'C:IsString3];

Data.String.$tc'C:IsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17120978992298967165##
                                    12730766526892520308##
                                    Data.String.$trModule
                                    Data.String.$tc'C:IsString2
                                    1#
                                    Data.String.$tc'C:IsString1];


==================== Pre unarise: ====================
2018-03-16 16:06:57.623061799 UTC

Data.String.fromString [InlPrag=INLINE]
  :: forall a. Data.String.IsString a => GHC.Base.String -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sc3it] v_sc3it;

Data.String.$fIsString[]_$cfromString
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     GHC.Base.String -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sc3iu eta_sc3iv]
        case GHC.Types.heq_sel $d~_sc3iu of { __DEFAULT -> eta_sc3iv; };

Data.String.$fIsString[] [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     Data.String.IsString [a]
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.String.$fIsString[]_$cfromString eta_B2 eta_B1;

$fIsStringConst1_rc3eM
  :: forall a b. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3iw] $dIsString_sc3iw;

Data.String.$fIsStringConst [InlPrag=INLINE (sat-args=0)]
  :: forall a b.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Const.Const a b)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringConst1_rc3eM eta_B1;

$fIsStringIdentity1_rc3eN
  :: forall a. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3ix] $dIsString_sc3ix;

Data.String.$fIsStringIdentity [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Identity.Identity a)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringIdentity1_rc3eN eta_B1;

Data.String.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.String.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule4];

Data.String.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.String"#;

Data.String.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule2];

Data.String.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.String.$trModule3
                                     Data.String.$trModule1];

$krep_rc3eO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3eP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep2_rc3eQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3eO GHC.Types.[]];

$krep3_rc3eR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3eQ];

Data.String.$tcIsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep1_rc3eP];

$krep4_rc3eS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep5_rc3eT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rc3eR $krep4_rc3eS];

Data.String.$tcIsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsString"#;

Data.String.$tcIsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tcIsString3];

Data.String.$tcIsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13318441332885770359##
                                    5483613882769050508##
                                    Data.String.$trModule
                                    Data.String.$tcIsString2
                                    0#
                                    Data.String.$tcIsString1];

$krep6_rc3eU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_rc3eS GHC.Types.[]];

$krep7_rc3eV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.String.$tcIsString
                                              $krep6_rc3eU];

Data.String.$tc'C:IsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3eT $krep7_rc3eV];

Data.String.$tc'C:IsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsString"#;

Data.String.$tc'C:IsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tc'C:IsString3];

Data.String.$tc'C:IsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17120978992298967165##
                                    12730766526892520308##
                                    Data.String.$trModule
                                    Data.String.$tc'C:IsString2
                                    1#
                                    Data.String.$tc'C:IsString1];


==================== STG syntax: ====================
2018-03-16 16:06:57.625710194 UTC

Data.String.fromString [InlPrag=INLINE]
  :: forall a. Data.String.IsString a => GHC.Base.String -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sc3it] v_sc3it;

Data.String.$fIsString[]_$cfromString
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     GHC.Base.String -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sc3iu eta_sc3iv]
        case GHC.Types.heq_sel $d~_sc3iu of { (##) -> eta_sc3iv; };

Data.String.$fIsString[] [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (GHC.Types.Char :: *)) =>
     Data.String.IsString [a]
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.String.$fIsString[]_$cfromString eta_B2 eta_B1;

$fIsStringConst1_rc3eM
  :: forall a b. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3iw] $dIsString_sc3iw;

Data.String.$fIsStringConst [InlPrag=INLINE (sat-args=0)]
  :: forall a b.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Const.Const a b)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringConst1_rc3eM eta_B1;

$fIsStringIdentity1_rc3eN
  :: forall a. Data.String.IsString a => Data.String.IsString a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [$dIsString_sc3ix] $dIsString_sc3ix;

Data.String.$fIsStringIdentity [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     Data.String.IsString a =>
     Data.String.IsString (Data.Functor.Identity.Identity a)
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] $fIsStringIdentity1_rc3eN eta_B1;

Data.String.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.String.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule4];

Data.String.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.String"#;

Data.String.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$trModule2];

Data.String.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.String.$trModule3
                                     Data.String.$trModule1];

$krep_rc3eO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3eP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep2_rc3eQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3eO GHC.Types.[]];

$krep3_rc3eR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3eQ];

Data.String.$tcIsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep1_rc3eP];

$krep4_rc3eS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep5_rc3eT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rc3eR $krep4_rc3eS];

Data.String.$tcIsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsString"#;

Data.String.$tcIsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tcIsString3];

Data.String.$tcIsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13318441332885770359##
                                    5483613882769050508##
                                    Data.String.$trModule
                                    Data.String.$tcIsString2
                                    0#
                                    Data.String.$tcIsString1];

$krep6_rc3eU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_rc3eS GHC.Types.[]];

$krep7_rc3eV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.String.$tcIsString
                                              $krep6_rc3eU];

Data.String.$tc'C:IsString1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3eT $krep7_rc3eV];

Data.String.$tc'C:IsString3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsString"#;

Data.String.$tc'C:IsString2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.String.$tc'C:IsString3];

Data.String.$tc'C:IsString :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17120978992298967165##
                                    12730766526892520308##
                                    Data.String.$trModule
                                    Data.String.$tc'C:IsString2
                                    1#
                                    Data.String.$tc'C:IsString1];

